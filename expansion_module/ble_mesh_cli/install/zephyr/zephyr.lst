
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20004540 	.word	0x20004540
 8000004:	0800323d 	.word	0x0800323d
 8000008:	0800328d 	.word	0x0800328d
 800000c:	080030ed 	.word	0x080030ed
 8000010:	080030ed 	.word	0x080030ed
 8000014:	080030ed 	.word	0x080030ed
 8000018:	080030ed 	.word	0x080030ed
 800001c:	080030ed 	.word	0x080030ed
 8000020:	080030ed 	.word	0x080030ed
 8000024:	080030ed 	.word	0x080030ed
 8000028:	080030ed 	.word	0x080030ed
 800002c:	08002d41 	.word	0x08002d41
 8000030:	080030ed 	.word	0x080030ed
 8000034:	080030ed 	.word	0x080030ed
 8000038:	08002cfd 	.word	0x08002cfd
 800003c:	080049c5 	.word	0x080049c5

08000040 <_irq_vector_table>:
 8000040:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000050:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000060:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000070:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000080:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000090:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000a0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000b0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000c0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000d0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000e0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 80000f0:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000100:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000110:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000120:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000130:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000140:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000150:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000160:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000170:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000180:	08003219 08003219 08003219 08003219     .2...2...2...2..
 8000190:	08003219                                .2..

08000194 <_sw_isr_table>:
 8000194:	00000000 08003081 20006390 080033d3     .....0...c. .3..
 80001a4:	20006390 080033f1 20006390 080033fb     .c. .3...c. .3..
 80001b4:	00000000 08003081 00000000 08003081     .....0.......0..
 80001c4:	20006390 0800338d 20006390 08003397     .c. .3...c. .3..
 80001d4:	20006390 080033a1 20006390 080033ab     .c. .3...c. .3..
 80001e4:	20006390 080033b5 00000000 08003081     .c. .3.......0..
 80001f4:	00000000 08003081 00000000 08003081     .....0.......0..
 8000204:	00000000 08003081 00000000 08003081     .....0.......0..
 8000214:	00000000 08003081 00000000 08003081     .....0.......0..
 8000224:	00000000 08003081 00000000 08003081     .....0.......0..
 8000234:	00000000 08003081 00000000 08003081     .....0.......0..
 8000244:	00000000 08003081 20006390 080033bf     .....0...c. .3..
 8000254:	00000000 08003081 00000000 08003081     .....0.......0..
 8000264:	00000000 08003081 00000000 08003081     .....0.......0..
 8000274:	00000000 08003081 00000000 08003081     .....0.......0..
 8000284:	00000000 08003081 00000000 08003081     .....0.......0..
 8000294:	00000000 08003081 00000000 08003081     .....0.......0..
 80002a4:	00000000 08003081 20006420 080041e9     .....0.. d. .A..
 80002b4:	00000000 08003081 00000000 08003081     .....0.......0..
 80002c4:	00000000 08003081 00000000 08003081     .....0.......0..
 80002d4:	20006390 080033c9 20006390 080033dd     .c. .3...c. .3..
 80002e4:	20006390 080033e7 00000000 08003081     .c. .3.......0..
 80002f4:	00000000 08003081 00000000 08003081     .....0.......0..
 8000304:	00000000 08003081 00000000 08003081     .....0.......0..
 8000314:	00000000 08003081 00000000 08003081     .....0.......0..
 8000324:	00000000 08003081 00000000 08003081     .....0.......0..
 8000334:	00000000 08003081 00000000 08003081     .....0.......0..
 8000344:	00000000 08003081 00000000 08003081     .....0.......0..
 8000354:	00000000 08003081 00000000 08003081     .....0.......0..
 8000364:	00000000 08003081 00000000 08003081     .....0.......0..
 8000374:	00000000 08003081 00000000 08003081     .....0.......0..
 8000384:	00000000 08003081 00000000 08003081     .....0.......0..
 8000394:	00000000 08003081 00000000 08003081     .....0.......0..
 80003a4:	00000000 08003081 00000000 08003081     .....0.......0..
 80003b4:	00000000 08003081 00000000 08003081     .....0.......0..
 80003c4:	00000000 08003081 00000000 08003081     .....0.......0..
 80003d4:	00000000 08003081 00000000 08003081     .....0.......0..
 80003e4:	00000000 08003081 00000000 08003081     .....0.......0..
 80003f4:	00000000 08003081 00000000 08003081     .....0.......0..
 8000404:	00000000 08003081 00000000 08003081     .....0.......0..
 8000414:	00000000 08003081 00000000 08003081     .....0.......0..
 8000424:	00000000 08003081 00000000 08003081     .....0.......0..
 8000434:	00000000 08003081                       .....0..

0800043c <__aeabi_llsl>:
 800043c:	4091      	lsls	r1, r2
 800043e:	1c03      	adds	r3, r0, #0
 8000440:	4090      	lsls	r0, r2
 8000442:	469c      	mov	ip, r3
 8000444:	3a20      	subs	r2, #32
 8000446:	4093      	lsls	r3, r2
 8000448:	4319      	orrs	r1, r3
 800044a:	4252      	negs	r2, r2
 800044c:	4663      	mov	r3, ip
 800044e:	40d3      	lsrs	r3, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	4770      	bx	lr

08000454 <__aeabi_ldivmod>:
 8000454:	b97b      	cbnz	r3, 8000476 <__aeabi_ldivmod+0x22>
 8000456:	b972      	cbnz	r2, 8000476 <__aeabi_ldivmod+0x22>
 8000458:	2900      	cmp	r1, #0
 800045a:	bfbe      	ittt	lt
 800045c:	2000      	movlt	r0, #0
 800045e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000462:	e006      	blt.n	8000472 <__aeabi_ldivmod+0x1e>
 8000464:	bf08      	it	eq
 8000466:	2800      	cmpeq	r0, #0
 8000468:	bf1c      	itt	ne
 800046a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800046e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000472:	f000 b9d9 	b.w	8000828 <__aeabi_idiv0>
 8000476:	f1ad 0c08 	sub.w	ip, sp, #8
 800047a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800047e:	2900      	cmp	r1, #0
 8000480:	db09      	blt.n	8000496 <__aeabi_ldivmod+0x42>
 8000482:	2b00      	cmp	r3, #0
 8000484:	db1a      	blt.n	80004bc <__aeabi_ldivmod+0x68>
 8000486:	f000 f861 	bl	800054c <__udivmoddi4>
 800048a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800048e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000492:	b004      	add	sp, #16
 8000494:	4770      	bx	lr
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	2b00      	cmp	r3, #0
 800049e:	db1b      	blt.n	80004d8 <__aeabi_ldivmod+0x84>
 80004a0:	f000 f854 	bl	800054c <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4240      	negs	r0, r0
 80004b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b4:	4252      	negs	r2, r2
 80004b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ba:	4770      	bx	lr
 80004bc:	4252      	negs	r2, r2
 80004be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c2:	f000 f843 	bl	800054c <__udivmoddi4>
 80004c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ce:	b004      	add	sp, #16
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	4770      	bx	lr
 80004d8:	4252      	negs	r2, r2
 80004da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004de:	f000 f835 	bl	800054c <__udivmoddi4>
 80004e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ea:	b004      	add	sp, #16
 80004ec:	4252      	negs	r2, r2
 80004ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_uldivmod>:
 80004f4:	b953      	cbnz	r3, 800050c <__aeabi_uldivmod+0x18>
 80004f6:	b94a      	cbnz	r2, 800050c <__aeabi_uldivmod+0x18>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	bf08      	it	eq
 80004fc:	2800      	cmpeq	r0, #0
 80004fe:	bf1c      	itt	ne
 8000500:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000504:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000508:	f000 b98e 	b.w	8000828 <__aeabi_idiv0>
 800050c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000514:	f000 f81a 	bl	800054c <__udivmoddi4>
 8000518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800051c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000520:	b004      	add	sp, #16
 8000522:	4770      	bx	lr

08000524 <__popcountsi2>:
 8000524:	0843      	lsrs	r3, r0, #1
 8000526:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800052a:	1ac0      	subs	r0, r0, r3
 800052c:	0883      	lsrs	r3, r0, #2
 800052e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000532:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000536:	4418      	add	r0, r3
 8000538:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800053c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000540:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000544:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4770      	bx	lr

0800054c <__udivmoddi4>:
 800054c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000550:	468c      	mov	ip, r1
 8000552:	460d      	mov	r5, r1
 8000554:	4604      	mov	r4, r0
 8000556:	9e08      	ldr	r6, [sp, #32]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d151      	bne.n	8000600 <__udivmoddi4+0xb4>
 800055c:	428a      	cmp	r2, r1
 800055e:	4617      	mov	r7, r2
 8000560:	d96d      	bls.n	800063e <__udivmoddi4+0xf2>
 8000562:	fab2 fe82 	clz	lr, r2
 8000566:	f1be 0f00 	cmp.w	lr, #0
 800056a:	d00b      	beq.n	8000584 <__udivmoddi4+0x38>
 800056c:	f1ce 0c20 	rsb	ip, lr, #32
 8000570:	fa01 f50e 	lsl.w	r5, r1, lr
 8000574:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000578:	fa02 f70e 	lsl.w	r7, r2, lr
 800057c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000580:	fa00 f40e 	lsl.w	r4, r0, lr
 8000584:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000588:	0c25      	lsrs	r5, r4, #16
 800058a:	fbbc f8fa 	udiv	r8, ip, sl
 800058e:	fa1f f987 	uxth.w	r9, r7
 8000592:	fb0a cc18 	mls	ip, sl, r8, ip
 8000596:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800059a:	fb08 f309 	mul.w	r3, r8, r9
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d90a      	bls.n	80005b8 <__udivmoddi4+0x6c>
 80005a2:	19ed      	adds	r5, r5, r7
 80005a4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80005a8:	f080 8123 	bcs.w	80007f2 <__udivmoddi4+0x2a6>
 80005ac:	42ab      	cmp	r3, r5
 80005ae:	f240 8120 	bls.w	80007f2 <__udivmoddi4+0x2a6>
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	1aed      	subs	r5, r5, r3
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	fbb5 f0fa 	udiv	r0, r5, sl
 80005c0:	fb0a 5510 	mls	r5, sl, r0, r5
 80005c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005c8:	fb00 f909 	mul.w	r9, r0, r9
 80005cc:	45a1      	cmp	r9, r4
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x98>
 80005d0:	19e4      	adds	r4, r4, r7
 80005d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005d6:	f080 810a 	bcs.w	80007ee <__udivmoddi4+0x2a2>
 80005da:	45a1      	cmp	r9, r4
 80005dc:	f240 8107 	bls.w	80007ee <__udivmoddi4+0x2a2>
 80005e0:	3802      	subs	r0, #2
 80005e2:	443c      	add	r4, r7
 80005e4:	eba4 0409 	sub.w	r4, r4, r9
 80005e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ec:	2100      	movs	r1, #0
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d061      	beq.n	80006b6 <__udivmoddi4+0x16a>
 80005f2:	fa24 f40e 	lsr.w	r4, r4, lr
 80005f6:	2300      	movs	r3, #0
 80005f8:	6034      	str	r4, [r6, #0]
 80005fa:	6073      	str	r3, [r6, #4]
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	428b      	cmp	r3, r1
 8000602:	d907      	bls.n	8000614 <__udivmoddi4+0xc8>
 8000604:	2e00      	cmp	r6, #0
 8000606:	d054      	beq.n	80006b2 <__udivmoddi4+0x166>
 8000608:	2100      	movs	r1, #0
 800060a:	e886 0021 	stmia.w	r6, {r0, r5}
 800060e:	4608      	mov	r0, r1
 8000610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000614:	fab3 f183 	clz	r1, r3
 8000618:	2900      	cmp	r1, #0
 800061a:	f040 808e 	bne.w	800073a <__udivmoddi4+0x1ee>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d302      	bcc.n	8000628 <__udivmoddi4+0xdc>
 8000622:	4282      	cmp	r2, r0
 8000624:	f200 80fa 	bhi.w	800081c <__udivmoddi4+0x2d0>
 8000628:	1a84      	subs	r4, r0, r2
 800062a:	eb65 0503 	sbc.w	r5, r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	46ac      	mov	ip, r5
 8000632:	2e00      	cmp	r6, #0
 8000634:	d03f      	beq.n	80006b6 <__udivmoddi4+0x16a>
 8000636:	e886 1010 	stmia.w	r6, {r4, ip}
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	b912      	cbnz	r2, 8000646 <__udivmoddi4+0xfa>
 8000640:	2701      	movs	r7, #1
 8000642:	fbb7 f7f2 	udiv	r7, r7, r2
 8000646:	fab7 fe87 	clz	lr, r7
 800064a:	f1be 0f00 	cmp.w	lr, #0
 800064e:	d134      	bne.n	80006ba <__udivmoddi4+0x16e>
 8000650:	1beb      	subs	r3, r5, r7
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	fa1f fc87 	uxth.w	ip, r7
 8000658:	2101      	movs	r1, #1
 800065a:	fbb3 f8f2 	udiv	r8, r3, r2
 800065e:	0c25      	lsrs	r5, r4, #16
 8000660:	fb02 3318 	mls	r3, r2, r8, r3
 8000664:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000668:	fb0c f308 	mul.w	r3, ip, r8
 800066c:	42ab      	cmp	r3, r5
 800066e:	d907      	bls.n	8000680 <__udivmoddi4+0x134>
 8000670:	19ed      	adds	r5, r5, r7
 8000672:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000676:	d202      	bcs.n	800067e <__udivmoddi4+0x132>
 8000678:	42ab      	cmp	r3, r5
 800067a:	f200 80d1 	bhi.w	8000820 <__udivmoddi4+0x2d4>
 800067e:	4680      	mov	r8, r0
 8000680:	1aed      	subs	r5, r5, r3
 8000682:	b2a3      	uxth	r3, r4
 8000684:	fbb5 f0f2 	udiv	r0, r5, r2
 8000688:	fb02 5510 	mls	r5, r2, r0, r5
 800068c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000690:	fb0c fc00 	mul.w	ip, ip, r0
 8000694:	45a4      	cmp	ip, r4
 8000696:	d907      	bls.n	80006a8 <__udivmoddi4+0x15c>
 8000698:	19e4      	adds	r4, r4, r7
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800069e:	d202      	bcs.n	80006a6 <__udivmoddi4+0x15a>
 80006a0:	45a4      	cmp	ip, r4
 80006a2:	f200 80b8 	bhi.w	8000816 <__udivmoddi4+0x2ca>
 80006a6:	4618      	mov	r0, r3
 80006a8:	eba4 040c 	sub.w	r4, r4, ip
 80006ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006b0:	e79d      	b.n	80005ee <__udivmoddi4+0xa2>
 80006b2:	4631      	mov	r1, r6
 80006b4:	4630      	mov	r0, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	f1ce 0420 	rsb	r4, lr, #32
 80006be:	fa05 f30e 	lsl.w	r3, r5, lr
 80006c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80006c6:	fa20 f804 	lsr.w	r8, r0, r4
 80006ca:	0c3a      	lsrs	r2, r7, #16
 80006cc:	fa25 f404 	lsr.w	r4, r5, r4
 80006d0:	ea48 0803 	orr.w	r8, r8, r3
 80006d4:	fbb4 f1f2 	udiv	r1, r4, r2
 80006d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80006dc:	fb02 4411 	mls	r4, r2, r1, r4
 80006e0:	fa1f fc87 	uxth.w	ip, r7
 80006e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80006e8:	fb01 f30c 	mul.w	r3, r1, ip
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	fa00 f40e 	lsl.w	r4, r0, lr
 80006f2:	d909      	bls.n	8000708 <__udivmoddi4+0x1bc>
 80006f4:	19ed      	adds	r5, r5, r7
 80006f6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80006fa:	f080 808a 	bcs.w	8000812 <__udivmoddi4+0x2c6>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	f240 8087 	bls.w	8000812 <__udivmoddi4+0x2c6>
 8000704:	3902      	subs	r1, #2
 8000706:	443d      	add	r5, r7
 8000708:	1aeb      	subs	r3, r5, r3
 800070a:	fa1f f588 	uxth.w	r5, r8
 800070e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000712:	fb02 3310 	mls	r3, r2, r0, r3
 8000716:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800071a:	fb00 f30c 	mul.w	r3, r0, ip
 800071e:	42ab      	cmp	r3, r5
 8000720:	d907      	bls.n	8000732 <__udivmoddi4+0x1e6>
 8000722:	19ed      	adds	r5, r5, r7
 8000724:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000728:	d26f      	bcs.n	800080a <__udivmoddi4+0x2be>
 800072a:	42ab      	cmp	r3, r5
 800072c:	d96d      	bls.n	800080a <__udivmoddi4+0x2be>
 800072e:	3802      	subs	r0, #2
 8000730:	443d      	add	r5, r7
 8000732:	1aeb      	subs	r3, r5, r3
 8000734:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000738:	e78f      	b.n	800065a <__udivmoddi4+0x10e>
 800073a:	f1c1 0720 	rsb	r7, r1, #32
 800073e:	fa22 f807 	lsr.w	r8, r2, r7
 8000742:	408b      	lsls	r3, r1
 8000744:	fa05 f401 	lsl.w	r4, r5, r1
 8000748:	ea48 0303 	orr.w	r3, r8, r3
 800074c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000750:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000754:	40fd      	lsrs	r5, r7
 8000756:	ea4e 0e04 	orr.w	lr, lr, r4
 800075a:	fbb5 f9fc 	udiv	r9, r5, ip
 800075e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000762:	fb0c 5519 	mls	r5, ip, r9, r5
 8000766:	fa1f f883 	uxth.w	r8, r3
 800076a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800076e:	fb09 f408 	mul.w	r4, r9, r8
 8000772:	42ac      	cmp	r4, r5
 8000774:	fa02 f201 	lsl.w	r2, r2, r1
 8000778:	fa00 fa01 	lsl.w	sl, r0, r1
 800077c:	d908      	bls.n	8000790 <__udivmoddi4+0x244>
 800077e:	18ed      	adds	r5, r5, r3
 8000780:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000784:	d243      	bcs.n	800080e <__udivmoddi4+0x2c2>
 8000786:	42ac      	cmp	r4, r5
 8000788:	d941      	bls.n	800080e <__udivmoddi4+0x2c2>
 800078a:	f1a9 0902 	sub.w	r9, r9, #2
 800078e:	441d      	add	r5, r3
 8000790:	1b2d      	subs	r5, r5, r4
 8000792:	fa1f fe8e 	uxth.w	lr, lr
 8000796:	fbb5 f0fc 	udiv	r0, r5, ip
 800079a:	fb0c 5510 	mls	r5, ip, r0, r5
 800079e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80007a2:	fb00 f808 	mul.w	r8, r0, r8
 80007a6:	45a0      	cmp	r8, r4
 80007a8:	d907      	bls.n	80007ba <__udivmoddi4+0x26e>
 80007aa:	18e4      	adds	r4, r4, r3
 80007ac:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80007b0:	d229      	bcs.n	8000806 <__udivmoddi4+0x2ba>
 80007b2:	45a0      	cmp	r8, r4
 80007b4:	d927      	bls.n	8000806 <__udivmoddi4+0x2ba>
 80007b6:	3802      	subs	r0, #2
 80007b8:	441c      	add	r4, r3
 80007ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007be:	eba4 0408 	sub.w	r4, r4, r8
 80007c2:	fba0 8902 	umull	r8, r9, r0, r2
 80007c6:	454c      	cmp	r4, r9
 80007c8:	46c6      	mov	lr, r8
 80007ca:	464d      	mov	r5, r9
 80007cc:	d315      	bcc.n	80007fa <__udivmoddi4+0x2ae>
 80007ce:	d012      	beq.n	80007f6 <__udivmoddi4+0x2aa>
 80007d0:	b156      	cbz	r6, 80007e8 <__udivmoddi4+0x29c>
 80007d2:	ebba 030e 	subs.w	r3, sl, lr
 80007d6:	eb64 0405 	sbc.w	r4, r4, r5
 80007da:	fa04 f707 	lsl.w	r7, r4, r7
 80007de:	40cb      	lsrs	r3, r1
 80007e0:	431f      	orrs	r7, r3
 80007e2:	40cc      	lsrs	r4, r1
 80007e4:	6037      	str	r7, [r6, #0]
 80007e6:	6074      	str	r4, [r6, #4]
 80007e8:	2100      	movs	r1, #0
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	4618      	mov	r0, r3
 80007f0:	e6f8      	b.n	80005e4 <__udivmoddi4+0x98>
 80007f2:	4690      	mov	r8, r2
 80007f4:	e6e0      	b.n	80005b8 <__udivmoddi4+0x6c>
 80007f6:	45c2      	cmp	sl, r8
 80007f8:	d2ea      	bcs.n	80007d0 <__udivmoddi4+0x284>
 80007fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80007fe:	eb69 0503 	sbc.w	r5, r9, r3
 8000802:	3801      	subs	r0, #1
 8000804:	e7e4      	b.n	80007d0 <__udivmoddi4+0x284>
 8000806:	4628      	mov	r0, r5
 8000808:	e7d7      	b.n	80007ba <__udivmoddi4+0x26e>
 800080a:	4640      	mov	r0, r8
 800080c:	e791      	b.n	8000732 <__udivmoddi4+0x1e6>
 800080e:	4681      	mov	r9, r0
 8000810:	e7be      	b.n	8000790 <__udivmoddi4+0x244>
 8000812:	4601      	mov	r1, r0
 8000814:	e778      	b.n	8000708 <__udivmoddi4+0x1bc>
 8000816:	3802      	subs	r0, #2
 8000818:	443c      	add	r4, r7
 800081a:	e745      	b.n	80006a8 <__udivmoddi4+0x15c>
 800081c:	4608      	mov	r0, r1
 800081e:	e708      	b.n	8000632 <__udivmoddi4+0xe6>
 8000820:	f1a8 0802 	sub.w	r8, r8, #2
 8000824:	443d      	add	r5, r7
 8000826:	e72b      	b.n	8000680 <__udivmoddi4+0x134>

08000828 <__aeabi_idiv0>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 800082c:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
 800082e:	4603      	mov	r3, r0
 8000830:	1a98      	subs	r0, r3, r2
 8000832:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000836:	2900      	cmp	r1, #0
 8000838:	d1fa      	bne.n	8000830 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
 800083a:	4770      	bx	lr

0800083c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
 800083c:	3801      	subs	r0, #1
 800083e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8000840:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000848:	4293      	cmp	r3, r2
 800084a:	d102      	bne.n	8000852 <strcmp+0x16>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f7      	bne.n	8000840 <strcmp+0x4>
 8000850:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8000852:	1a98      	subs	r0, r3, r2
 8000854:	4770      	bx	lr

08000856 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8000856:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
 8000858:	b182      	cbz	r2, 800087c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
 800085a:	3a01      	subs	r2, #1
 800085c:	460c      	mov	r4, r1
 800085e:	4603      	mov	r3, r0
 8000860:	d103      	bne.n	800086a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	7820      	ldrb	r0, [r4, #0]
 8000866:	1a10      	subs	r0, r2, r0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
 800086a:	781e      	ldrb	r6, [r3, #0]
 800086c:	7825      	ldrb	r5, [r4, #0]
 800086e:	42ae      	cmp	r6, r5
 8000870:	f100 0001 	add.w	r0, r0, #1
 8000874:	f101 0101 	add.w	r1, r1, #1
 8000878:	d0ef      	beq.n	800085a <memcmp+0x4>
 800087a:	e7f2      	b.n	8000862 <memcmp+0xc>
		return 0;
 800087c:	4610      	mov	r0, r2
}
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
 8000880:	ea81 0300 	eor.w	r3, r1, r0
 8000884:	f013 0f03 	tst.w	r3, #3
{
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
 800088c:	d00b      	beq.n	80008a6 <memcpy+0x26>
 800088e:	3b01      	subs	r3, #1
 8000890:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8000892:	4291      	cmp	r1, r2
 8000894:	d11b      	bne.n	80008ce <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8000896:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
 8000898:	2a00      	cmp	r2, #0
 800089a:	d0fc      	beq.n	8000896 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
 800089c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80008a0:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 80008a4:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
 80008a6:	079c      	lsls	r4, r3, #30
 80008a8:	d1f6      	bne.n	8000898 <memcpy+0x18>
 80008aa:	1f1e      	subs	r6, r3, #4
 80008ac:	460d      	mov	r5, r1
 80008ae:	1b54      	subs	r4, r2, r5
 80008b0:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
 80008b2:	2c03      	cmp	r4, #3
 80008b4:	d806      	bhi.n	80008c4 <memcpy+0x44>
 80008b6:	f022 0403 	bic.w	r4, r2, #3
 80008ba:	4421      	add	r1, r4
 80008bc:	4423      	add	r3, r4
 80008be:	f002 0203 	and.w	r2, r2, #3
 80008c2:	e7e4      	b.n	800088e <memcpy+0xe>
			*(d_word++) = *(s_word++);
 80008c4:	f855 4b04 	ldr.w	r4, [r5], #4
 80008c8:	f846 4f04 	str.w	r4, [r6, #4]!
 80008cc:	e7ef      	b.n	80008ae <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
 80008ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80008d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80008d6:	e7dc      	b.n	8000892 <memcpy+0x12>

080008d8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80008da:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 80008dc:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
 80008de:	079c      	lsls	r4, r3, #30
 80008e0:	d111      	bne.n	8000906 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
 80008e2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80008e6:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
 80008ea:	461e      	mov	r6, r3
 80008ec:	1b95      	subs	r5, r2, r6
 80008ee:	441d      	add	r5, r3
 80008f0:	2d03      	cmp	r5, #3
 80008f2:	d80e      	bhi.n	8000912 <memset+0x3a>
 80008f4:	f022 0403 	bic.w	r4, r2, #3
 80008f8:	4423      	add	r3, r4
 80008fa:	f002 0203 	and.w	r2, r2, #3
 80008fe:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8000900:	4293      	cmp	r3, r2
 8000902:	d109      	bne.n	8000918 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8000904:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8000906:	2a00      	cmp	r2, #0
 8000908:	d0fc      	beq.n	8000904 <memset+0x2c>
		*(d_byte++) = c_byte;
 800090a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 800090e:	3a01      	subs	r2, #1
 8000910:	e7e5      	b.n	80008de <memset+0x6>
		*(d_word++) = c_word;
 8000912:	f846 4b04 	str.w	r4, [r6], #4
 8000916:	e7e9      	b.n	80008ec <memset+0x14>
		*(d_byte++) = c_byte;
 8000918:	f803 1b01 	strb.w	r1, [r3], #1
 800091c:	e7f0      	b.n	8000900 <memset+0x28>

0800091e <temp_cli_get>:
};

static void temp_cli_get(struct bt_mesh_model *model,
                               struct bt_mesh_msg_ctx *ctx,
                               struct net_buf_simple *buf)
{
 800091e:	4770      	bx	lr

08000920 <temp_work_thread>:
	k_work_submit(&temp_work);
}

/* send unsolicited temperature readings */
void temp_work_thread(struct k_work *work)
{
 8000920:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_model *model = &root_models[1];
       	struct net_buf_simple *msg = model->pub->msg;
	int ret;

	if (node_addr == BT_MESH_ADDR_UNASSIGNED)
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <temp_work_thread+0x3c>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b1bb      	cbz	r3, 8000958 <temp_work_thread+0x38>
       	struct net_buf_simple *msg = model->pub->msg;
 8000928:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <temp_work_thread+0x40>)
 800092a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800092c:	691d      	ldr	r5, [r3, #16]
		return;

	/* sensor status */
        bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_SENSOR_GET);
 800092e:	f248 2131 	movw	r1, #33329	; 0x8231
 8000932:	4628      	mov	r0, r5
 8000934:	f00b fe4e 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, ID_TEMP_CELSIUS);
 8000938:	f642 211f 	movw	r1, #10783	; 0x2a1f
 800093c:	4628      	mov	r0, r5
 800093e:	f010 fdf8 	bl	8011532 <net_buf_simple_add_le16>

	ret = bt_mesh_model_publish(model);
 8000942:	f104 001c 	add.w	r0, r4, #28
 8000946:	f00b fe9f 	bl	800c688 <bt_mesh_model_publish>
	if (ret) {
 800094a:	4601      	mov	r1, r0
 800094c:	b120      	cbz	r0, 8000958 <temp_work_thread+0x38>
		printk("ERR: Unable to send sensor status get request: %d\n", ret);
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <temp_work_thread+0x44>)
		return;
	}
 
        //printk("Sensor status Get request sent with OpCode 0x%08x\n", BT_MESH_MODEL_OP_SENSOR_GET);
}
 8000950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("ERR: Unable to send sensor status get request: %d\n", ret);
 8000954:	f000 ba50 	b.w	8000df8 <printk>
 8000958:	bd38      	pop	{r3, r4, r5, pc}
 800095a:	bf00      	nop
 800095c:	20000000 	.word	0x20000000
 8000960:	200056f8 	.word	0x200056f8
 8000964:	08012dc1 	.word	0x08012dc1

08000968 <prov_complete>:
{
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4605      	mov	r5, r0
        printk("Provisioning completed!\n");
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <prov_complete+0x24>)
{
 800096e:	460c      	mov	r4, r1
        printk("Provisioning completed!\n");
 8000970:	f000 fa42 	bl	8000df8 <printk>
	printk("Net ID: %u\n", net_idx);
 8000974:	4629      	mov	r1, r5
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <prov_complete+0x28>)
 8000978:	f000 fa3e 	bl	8000df8 <printk>
	printk("Unicast addr: 0x%04x\n", addr);
 800097c:	4621      	mov	r1, r4
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <prov_complete+0x2c>)
 8000980:	f000 fa3a 	bl	8000df8 <printk>
	node_addr = addr;
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <prov_complete+0x30>)
 8000986:	801c      	strh	r4, [r3, #0]
 8000988:	bd38      	pop	{r3, r4, r5, pc}
 800098a:	bf00      	nop
 800098c:	08012d58 	.word	0x08012d58
 8000990:	08012d71 	.word	0x08012d71
 8000994:	08012d7d 	.word	0x08012d7d
 8000998:	20000000 	.word	0x20000000

0800099c <output_number>:
{
 800099c:	b508      	push	{r3, lr}
        printk("OOB Number: %u\n", number);
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <output_number+0xc>)
 80009a0:	f000 fa2a 	bl	8000df8 <printk>
}
 80009a4:	2000      	movs	r0, #0
 80009a6:	bd08      	pop	{r3, pc}
 80009a8:	08012d19 	.word	0x08012d19

080009ac <temp_cli_status>:
{
 80009ac:	b508      	push	{r3, lr}
	printk("0x%04x\n\n", net_buf_simple_pull_le16(buf));
 80009ae:	4610      	mov	r0, r2
 80009b0:	f010 fe23 	bl	80115fa <net_buf_simple_pull_le16>
}
 80009b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("0x%04x\n\n", net_buf_simple_pull_le16(buf));
 80009b8:	4601      	mov	r1, r0
 80009ba:	4801      	ldr	r0, [pc, #4]	; (80009c0 <temp_cli_status+0x14>)
 80009bc:	f000 ba1c 	b.w	8000df8 <printk>
 80009c0:	08012db8 	.word	0x08012db8

080009c4 <bt_ready>:
{
 80009c4:	b508      	push	{r3, lr}
        if (err) {
 80009c6:	4601      	mov	r1, r0
 80009c8:	b120      	cbz	r0, 80009d4 <bt_ready+0x10>
                printk("Bluetooth init failed (err %d)\n", err);
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <bt_ready+0x38>)
}
 80009cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                printk("Initializing mesh failed (err %d)\n", ret);
 80009d0:	f000 ba12 	b.w	8000df8 <printk>
        printk("Bluetooth initialized\n");
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <bt_ready+0x3c>)
 80009d6:	f000 fa0f 	bl	8000df8 <printk>
        ret = bt_mesh_init(&prov, &comp);
 80009da:	490a      	ldr	r1, [pc, #40]	; (8000a04 <bt_ready+0x40>)
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <bt_ready+0x44>)
 80009de:	f008 fb79 	bl	80090d4 <bt_mesh_init>
        if (ret) {
 80009e2:	4601      	mov	r1, r0
 80009e4:	b108      	cbz	r0, 80009ea <bt_ready+0x26>
                printk("Initializing mesh failed (err %d)\n", ret);
 80009e6:	4809      	ldr	r0, [pc, #36]	; (8000a0c <bt_ready+0x48>)
 80009e8:	e7f0      	b.n	80009cc <bt_ready+0x8>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
 80009ea:	2003      	movs	r0, #3
 80009ec:	f008 fb58 	bl	80090a0 <bt_mesh_prov_enable>
        printk("Client node initialized\n");
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <bt_ready+0x4c>)
}
 80009f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Client node initialized\n");
 80009f6:	f000 b9ff 	b.w	8000df8 <printk>
 80009fa:	bf00      	nop
 80009fc:	08012c74 	.word	0x08012c74
 8000a00:	08012c94 	.word	0x08012c94
 8000a04:	08012ce8 	.word	0x08012ce8
 8000a08:	08012d2c 	.word	0x08012d2c
 8000a0c:	08012cab 	.word	0x08012cab
 8000a10:	08012cce 	.word	0x08012cce

08000a14 <temp_timer_thread>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8000a14:	4909      	ldr	r1, [pc, #36]	; (8000a3c <temp_timer_thread+0x28>)
 8000a16:	f3bf 8f5b 	dmb	ish
 8000a1a:	e851 3f00 	ldrex	r3, [r1]
 8000a1e:	f043 0201 	orr.w	r2, r3, #1
 8000a22:	e841 2000 	strex	r0, r2, [r1]
 8000a26:	2800      	cmp	r0, #0
 8000a28:	d1f7      	bne.n	8000a1a <temp_timer_thread+0x6>
 8000a2a:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8000a2e:	07db      	lsls	r3, r3, #31
 8000a30:	d403      	bmi.n	8000a3a <temp_timer_thread+0x26>
		k_queue_append(&work_q->queue, work);
 8000a32:	3908      	subs	r1, #8
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <temp_timer_thread+0x2c>)
 8000a36:	f010 bf36 	b.w	80118a6 <k_queue_append>
 8000a3a:	4770      	bx	lr
 8000a3c:	20000040 	.word	0x20000040
 8000a40:	20001498 	.word	0x20001498

08000a44 <main>:

void main(void)
{
 8000a44:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <main+0x58>)
 8000a48:	f3bf 8f5b 	dmb	ish
 8000a4c:	f103 0208 	add.w	r2, r3, #8
 8000a50:	e852 1f00 	ldrex	r1, [r2]
 8000a54:	f021 0101 	bic.w	r1, r1, #1
 8000a58:	e842 1000 	strex	r0, r1, [r2]
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d1f7      	bne.n	8000a50 <main+0xc>
 8000a60:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <main+0x5c>)
 8000a66:	605a      	str	r2, [r3, #4]

	/* Initialize temp work thread */
	k_work_init(&temp_work, temp_work_thread);

	/* Initialize temp timer thread */
	k_timer_init(&temp_timer, temp_timer_thread, NULL);
 8000a68:	490e      	ldr	r1, [pc, #56]	; (8000aa4 <main+0x60>)
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f011 fe41 	bl	80126f4 <k_timer_init>
        
	printk("Initializing...\n");
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <main+0x68>)
 8000a74:	f000 f9c0 	bl	8000df8 <printk>

        /* Initialize the Bluetooth Subsystem */
        ret = bt_enable(bt_ready);
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <main+0x6c>)
 8000a7a:	f005 fc45 	bl	8006308 <bt_enable>
        if (ret) {
 8000a7e:	4601      	mov	r1, r0
 8000a80:	b110      	cbz	r0, 8000a88 <main+0x44>
                printk("Bluetooth init failed (err %d)\n", ret);
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <main+0x70>)
 8000a84:	f000 f9b8 	bl	8000df8 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_CUSTOM_DATA_SET, k_thread_custom_data_set, void *, value);

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <main+0x64>)
        }

	/* Start the timer at 5 second interval */
	k_timer_start(&temp_timer, K_SECONDS(50), K_SECONDS(5));
}
 8000a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000a96:	f011 be41 	b.w	801271c <_impl_k_timer_start>
 8000a9a:	bf00      	nop
 8000a9c:	20000038 	.word	0x20000038
 8000aa0:	08000921 	.word	0x08000921
 8000aa4:	08000a15 	.word	0x08000a15
 8000aa8:	20000004 	.word	0x20000004
 8000aac:	08012d08 	.word	0x08012d08
 8000ab0:	080009c5 	.word	0x080009c5
 8000ab4:	08012c74 	.word	0x08012c74

08000ab8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
 8000ab8:	2000      	movs	r0, #0
 8000aba:	4770      	bx	lr

08000abc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000abc:	680b      	ldr	r3, [r1, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8000ac2:	4b01      	ldr	r3, [pc, #4]	; (8000ac8 <char_out+0xc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4718      	bx	r3
 8000ac8:	20005770 	.word	0x20005770

08000acc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8000acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	469b      	mov	fp, r3
 8000ad4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8000ad6:	f8df a090 	ldr.w	sl, [pc, #144]	; 8000b68 <_printk_dec_ulong+0x9c>
 8000ada:	2c01      	cmp	r4, #1
 8000adc:	bfb8      	it	lt
 8000ade:	2401      	movlt	r4, #1
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	bf0c      	ite	eq
 8000ae4:	2330      	moveq	r3, #48	; 0x30
 8000ae6:	2320      	movne	r3, #32
 8000ae8:	4615      	mov	r5, r2
 8000aea:	4680      	mov	r8, r0
 8000aec:	4689      	mov	r9, r1
 8000aee:	9401      	str	r4, [sp, #4]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2601      	movs	r6, #1
 8000af4:	270a      	movs	r7, #10
 8000af6:	2200      	movs	r2, #0
 8000af8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
 8000afc:	b90a      	cbnz	r2, 8000b02 <_printk_dec_ulong+0x36>
 8000afe:	45aa      	cmp	sl, r5
 8000b00:	d21f      	bcs.n	8000b42 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
 8000b02:	fbb5 f0f4 	udiv	r0, r5, r4
 8000b06:	4649      	mov	r1, r9
 8000b08:	3030      	adds	r0, #48	; 0x30
 8000b0a:	47c0      	blx	r8
			digits++;
 8000b0c:	3601      	adds	r6, #1
			found_largest_digit = 1;
 8000b0e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
 8000b10:	3f01      	subs	r7, #1
	while (pos >= 9) {
 8000b12:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
 8000b14:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
 8000b18:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
 8000b1c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
 8000b20:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
 8000b24:	d1e8      	bne.n	8000af8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 8000b26:	4649      	mov	r1, r9
 8000b28:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000b2c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
 8000b2e:	f1bb 0f03 	cmp.w	fp, #3
 8000b32:	d103      	bne.n	8000b3c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
 8000b34:	9b01      	ldr	r3, [sp, #4]
 8000b36:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	dc0f      	bgt.n	8000b5c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 8000b3c:	b005      	add	sp, #20
 8000b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000b42:	9b01      	ldr	r3, [sp, #4]
 8000b44:	42bb      	cmp	r3, r7
 8000b46:	dbe3      	blt.n	8000b10 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8000b48:	f1bb 0f02 	cmp.w	fp, #2
 8000b4c:	d8e0      	bhi.n	8000b10 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000b4e:	4649      	mov	r1, r9
 8000b50:	9802      	ldr	r0, [sp, #8]
 8000b52:	9203      	str	r2, [sp, #12]
			digits++;
 8000b54:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000b56:	47c0      	blx	r8
			digits++;
 8000b58:	9a03      	ldr	r2, [sp, #12]
 8000b5a:	e7d9      	b.n	8000b10 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8000b5c:	4649      	mov	r1, r9
 8000b5e:	2020      	movs	r0, #32
 8000b60:	47c0      	blx	r8
 8000b62:	3c01      	subs	r4, #1
 8000b64:	e7e8      	b.n	8000b38 <_printk_dec_ulong+0x6c>
 8000b66:	bf00      	nop
 8000b68:	3b9ac9ff 	.word	0x3b9ac9ff

08000b6c <__printk_hook_install>:
	_char_out = fn;
 8000b6c:	4b01      	ldr	r3, [pc, #4]	; (8000b74 <__printk_hook_install+0x8>)
 8000b6e:	6018      	str	r0, [r3, #0]
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20005770 	.word	0x20005770

08000b78 <_vprintk>:
{
 8000b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b7c:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
 8000b7e:	f04f 0a00 	mov.w	sl, #0
{
 8000b82:	4606      	mov	r6, r0
 8000b84:	460f      	mov	r7, r1
 8000b86:	9204      	str	r2, [sp, #16]
 8000b88:	461c      	mov	r4, r3
	int min_width = -1;
 8000b8a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8000b8e:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
 8000b90:	4655      	mov	r5, sl
	while (*fmt) {
 8000b92:	9b04      	ldr	r3, [sp, #16]
 8000b94:	7818      	ldrb	r0, [r3, #0]
 8000b96:	b910      	cbnz	r0, 8000b9e <_vprintk+0x26>
}
 8000b98:	b009      	add	sp, #36	; 0x24
 8000b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
 8000b9e:	b945      	cbnz	r5, 8000bb2 <_vprintk+0x3a>
			if (*fmt != '%') {
 8000ba0:	2825      	cmp	r0, #37	; 0x25
 8000ba2:	f000 810c 	beq.w	8000dbe <_vprintk+0x246>
				out((int)*fmt, ctx);
 8000ba6:	4639      	mov	r1, r7
 8000ba8:	47b0      	blx	r6
		++fmt;
 8000baa:	9b04      	ldr	r3, [sp, #16]
 8000bac:	3301      	adds	r3, #1
 8000bae:	9304      	str	r3, [sp, #16]
 8000bb0:	e7ef      	b.n	8000b92 <_vprintk+0x1a>
			switch (*fmt) {
 8000bb2:	2864      	cmp	r0, #100	; 0x64
 8000bb4:	d061      	beq.n	8000c7a <_vprintk+0x102>
 8000bb6:	d819      	bhi.n	8000bec <_vprintk+0x74>
 8000bb8:	2839      	cmp	r0, #57	; 0x39
 8000bba:	d80a      	bhi.n	8000bd2 <_vprintk+0x5a>
 8000bbc:	2831      	cmp	r0, #49	; 0x31
 8000bbe:	d250      	bcs.n	8000c62 <_vprintk+0xea>
 8000bc0:	282d      	cmp	r0, #45	; 0x2d
 8000bc2:	d03c      	beq.n	8000c3e <_vprintk+0xc6>
 8000bc4:	2830      	cmp	r0, #48	; 0x30
 8000bc6:	d03d      	beq.n	8000c44 <_vprintk+0xcc>
 8000bc8:	2825      	cmp	r0, #37	; 0x25
 8000bca:	d108      	bne.n	8000bde <_vprintk+0x66>
				out((int)'%', ctx);
 8000bcc:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
 8000bce:	47b0      	blx	r6
 8000bd0:	e06f      	b.n	8000cb2 <_vprintk+0x13a>
			switch (*fmt) {
 8000bd2:	2858      	cmp	r0, #88	; 0x58
 8000bd4:	f000 8089 	beq.w	8000cea <_vprintk+0x172>
 8000bd8:	2863      	cmp	r0, #99	; 0x63
 8000bda:	f000 80ea 	beq.w	8000db2 <_vprintk+0x23a>
				out((int)'%', ctx);
 8000bde:	4639      	mov	r1, r7
 8000be0:	2025      	movs	r0, #37	; 0x25
 8000be2:	47b0      	blx	r6
				out((int)*fmt, ctx);
 8000be4:	9b04      	ldr	r3, [sp, #16]
 8000be6:	4639      	mov	r1, r7
 8000be8:	7818      	ldrb	r0, [r3, #0]
 8000bea:	e7f0      	b.n	8000bce <_vprintk+0x56>
			switch (*fmt) {
 8000bec:	2870      	cmp	r0, #112	; 0x70
 8000bee:	d072      	beq.n	8000cd6 <_vprintk+0x15e>
 8000bf0:	d806      	bhi.n	8000c00 <_vprintk+0x88>
 8000bf2:	2869      	cmp	r0, #105	; 0x69
 8000bf4:	d041      	beq.n	8000c7a <_vprintk+0x102>
 8000bf6:	286c      	cmp	r0, #108	; 0x6c
 8000bf8:	d03c      	beq.n	8000c74 <_vprintk+0xfc>
 8000bfa:	2868      	cmp	r0, #104	; 0x68
 8000bfc:	d0d5      	beq.n	8000baa <_vprintk+0x32>
 8000bfe:	e7ee      	b.n	8000bde <_vprintk+0x66>
 8000c00:	2875      	cmp	r0, #117	; 0x75
 8000c02:	d058      	beq.n	8000cb6 <_vprintk+0x13e>
 8000c04:	d817      	bhi.n	8000c36 <_vprintk+0xbe>
 8000c06:	2873      	cmp	r0, #115	; 0x73
 8000c08:	d1e9      	bne.n	8000bde <_vprintk+0x66>
				char *s = va_arg(ap, char *);
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	f104 0b04 	add.w	fp, r4, #4
 8000c10:	461c      	mov	r4, r3
				while (*s)
 8000c12:	4625      	mov	r5, r4
 8000c14:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	f040 80bf 	bne.w	8000d9c <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
 8000c1e:	f1b8 0f03 	cmp.w	r8, #3
 8000c22:	f040 80d5 	bne.w	8000dd0 <_vprintk+0x258>
					int remaining = min_width - (s - start);
 8000c26:	1ae4      	subs	r4, r4, r3
 8000c28:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	f300 80bb 	bgt.w	8000da8 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
 8000c32:	465c      	mov	r4, fp
 8000c34:	e03d      	b.n	8000cb2 <_vprintk+0x13a>
			switch (*fmt) {
 8000c36:	2878      	cmp	r0, #120	; 0x78
 8000c38:	d057      	beq.n	8000cea <_vprintk+0x172>
 8000c3a:	287a      	cmp	r0, #122	; 0x7a
 8000c3c:	e7de      	b.n	8000bfc <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
 8000c3e:	f04f 0803 	mov.w	r8, #3
 8000c42:	e7b2      	b.n	8000baa <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
 8000c44:	f1b9 0f00 	cmp.w	r9, #0
 8000c48:	da0e      	bge.n	8000c68 <_vprintk+0xf0>
 8000c4a:	f1b8 0f00 	cmp.w	r8, #0
 8000c4e:	f000 80bc 	beq.w	8000dca <_vprintk+0x252>
					min_width = *fmt - '0';
 8000c52:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8000c56:	f1b8 0f00 	cmp.w	r8, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	f04f 0802 	moveq.w	r8, #2
 8000c60:	e7a3      	b.n	8000baa <_vprintk+0x32>
				if (min_width < 0) {
 8000c62:	f1b9 0f00 	cmp.w	r9, #0
 8000c66:	dbf4      	blt.n	8000c52 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
 8000c68:	230a      	movs	r3, #10
 8000c6a:	fb03 0909 	mla	r9, r3, r9, r0
 8000c6e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8000c72:	e7f0      	b.n	8000c56 <_vprintk+0xde>
				long_ctr++;
 8000c74:	f10a 0a01 	add.w	sl, sl, #1
 8000c78:	e797      	b.n	8000baa <_vprintk+0x32>
				if (long_ctr < 2) {
 8000c7a:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
 8000c7e:	bfc5      	ittet	gt
 8000c80:	3407      	addgt	r4, #7
 8000c82:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
 8000c86:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
 8000c88:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
 8000c8a:	bfd4      	ite	le
 8000c8c:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
 8000c8e:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	da05      	bge.n	8000ca2 <_vprintk+0x12a>
					out((int)'-', ctx);
 8000c96:	4639      	mov	r1, r7
 8000c98:	202d      	movs	r0, #45	; 0x2d
 8000c9a:	47b0      	blx	r6
					d = -d;
 8000c9c:	426d      	negs	r5, r5
					min_width--;
 8000c9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 8000ca2:	f8cd 9000 	str.w	r9, [sp]
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8000caa:	4639      	mov	r1, r7
 8000cac:	4630      	mov	r0, r6
 8000cae:	f7ff ff0d 	bl	8000acc <_printk_dec_ulong>
			might_format = 0;
 8000cb2:	2500      	movs	r5, #0
				break;
 8000cb4:	e779      	b.n	8000baa <_vprintk+0x32>
				if (long_ctr < 2) {
 8000cb6:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
 8000cba:	bfc5      	ittet	gt
 8000cbc:	3407      	addgt	r4, #7
 8000cbe:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
 8000cc2:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
 8000cc4:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
 8000cc6:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
 8000cca:	bfcc      	ite	gt
 8000ccc:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
 8000cd0:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	e7e9      	b.n	8000caa <_vprintk+0x132>
				  out('0', ctx);
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	2030      	movs	r0, #48	; 0x30
 8000cda:	47b0      	blx	r6
				  out('x', ctx);
 8000cdc:	4639      	mov	r1, r7
 8000cde:	2078      	movs	r0, #120	; 0x78
 8000ce0:	47b0      	blx	r6
				  min_width = 8;
 8000ce2:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
 8000ce6:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
 8000cea:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
 8000cee:	bfc7      	ittee	gt
 8000cf0:	3407      	addgt	r4, #7
 8000cf2:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
 8000cf6:	6823      	ldrle	r3, [r4, #0]
 8000cf8:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
 8000cfa:	bfc2      	ittt	gt
 8000cfc:	f103 0408 	addgt.w	r4, r3, #8
 8000d00:	681b      	ldrgt	r3, [r3, #0]
 8000d02:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
 8000d04:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
 8000d08:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
 8000d0c:	bfd8      	it	le
 8000d0e:	3404      	addle	r4, #4
	int digits = 0;
 8000d10:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
 8000d12:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
 8000d14:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
 8000d16:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8000d1a:	9b05      	ldr	r3, [sp, #20]
 8000d1c:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8000d20:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
 8000d24:	f010 000f 	ands.w	r0, r0, #15
 8000d28:	d109      	bne.n	8000d3e <_vprintk+0x1c6>
 8000d2a:	9b07      	ldr	r3, [sp, #28]
 8000d2c:	b913      	cbnz	r3, 8000d34 <_vprintk+0x1bc>
 8000d2e:	f1bb 0f00 	cmp.w	fp, #0
 8000d32:	d122      	bne.n	8000d7a <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
 8000d34:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8000d38:	e007      	b.n	8000d4a <_vprintk+0x1d2>
	for (; size; size--) {
 8000d3a:	9a06      	ldr	r2, [sp, #24]
 8000d3c:	e7eb      	b.n	8000d16 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
 8000d3e:	2809      	cmp	r0, #9
 8000d40:	bf8c      	ite	hi
 8000d42:	f04f 0e57 	movhi.w	lr, #87	; 0x57
 8000d46:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	4470      	add	r0, lr
 8000d4e:	9206      	str	r2, [sp, #24]
 8000d50:	47b0      	blx	r6
			digits++;
 8000d52:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
 8000d54:	9507      	str	r5, [sp, #28]
			digits++;
 8000d56:	3301      	adds	r3, #1
 8000d58:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
 8000d5a:	f1bb 0f00 	cmp.w	fp, #0
 8000d5e:	d1ec      	bne.n	8000d3a <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
 8000d60:	f1b8 0f03 	cmp.w	r8, #3
 8000d64:	d1a5      	bne.n	8000cb2 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	dda0      	ble.n	8000cb2 <_vprintk+0x13a>
			out(' ', ctx);
 8000d70:	4639      	mov	r1, r7
 8000d72:	2020      	movs	r0, #32
 8000d74:	47b0      	blx	r6
 8000d76:	3d01      	subs	r5, #1
 8000d78:	e7f8      	b.n	8000d6c <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
 8000d7a:	1e53      	subs	r3, r2, #1
 8000d7c:	4591      	cmp	r9, r2
 8000d7e:	9306      	str	r3, [sp, #24]
 8000d80:	dbeb      	blt.n	8000d5a <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
 8000d82:	f1b8 0f01 	cmp.w	r8, #1
 8000d86:	d103      	bne.n	8000d90 <_vprintk+0x218>
				out('0', ctx);
 8000d88:	4639      	mov	r1, r7
 8000d8a:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8000d8c:	47b0      	blx	r6
 8000d8e:	e7e4      	b.n	8000d5a <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
 8000d90:	f1b8 0f02 	cmp.w	r8, #2
 8000d94:	d1e1      	bne.n	8000d5a <_vprintk+0x1e2>
				out(' ', ctx);
 8000d96:	4639      	mov	r1, r7
 8000d98:	2020      	movs	r0, #32
 8000d9a:	e7f7      	b.n	8000d8c <_vprintk+0x214>
					out((int)(*s++), ctx);
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	462c      	mov	r4, r5
 8000da2:	47b0      	blx	r6
 8000da4:	9b03      	ldr	r3, [sp, #12]
 8000da6:	e734      	b.n	8000c12 <_vprintk+0x9a>
						out(' ', ctx);
 8000da8:	4639      	mov	r1, r7
 8000daa:	2020      	movs	r0, #32
 8000dac:	47b0      	blx	r6
 8000dae:	3c01      	subs	r4, #1
 8000db0:	e73c      	b.n	8000c2c <_vprintk+0xb4>
				out(c, ctx);
 8000db2:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
 8000db4:	1d25      	adds	r5, r4, #4
				out(c, ctx);
 8000db6:	4639      	mov	r1, r7
 8000db8:	47b0      	blx	r6
				int c = va_arg(ap, int);
 8000dba:	462c      	mov	r4, r5
 8000dbc:	e779      	b.n	8000cb2 <_vprintk+0x13a>
				long_ctr = 0;
 8000dbe:	46aa      	mov	sl, r5
				padding = PAD_NONE;
 8000dc0:	46a8      	mov	r8, r5
				min_width = -1;
 8000dc2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 8000dc6:	2501      	movs	r5, #1
 8000dc8:	e6ef      	b.n	8000baa <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
 8000dca:	f04f 0801 	mov.w	r8, #1
 8000dce:	e6ec      	b.n	8000baa <_vprintk+0x32>
				char *s = va_arg(ap, char *);
 8000dd0:	465c      	mov	r4, fp
			might_format = 0;
 8000dd2:	4605      	mov	r5, r0
 8000dd4:	e6e9      	b.n	8000baa <_vprintk+0x32>
	...

08000dd8 <vprintk>:
{
 8000dd8:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
 8000dda:	ac02      	add	r4, sp, #8
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <vprintk+0x1c>)
 8000de8:	4621      	mov	r1, r4
 8000dea:	f7ff fec5 	bl	8000b78 <_vprintk>
}
 8000dee:	9801      	ldr	r0, [sp, #4]
 8000df0:	b002      	add	sp, #8
 8000df2:	bd10      	pop	{r4, pc}
 8000df4:	08000abd 	.word	0x08000abd

08000df8 <printk>:
{
 8000df8:	b40f      	push	{r0, r1, r2, r3}
 8000dfa:	b507      	push	{r0, r1, r2, lr}
 8000dfc:	a904      	add	r1, sp, #16
 8000dfe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8000e02:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
 8000e04:	f7ff ffe8 	bl	8000dd8 <vprintk>
}
 8000e08:	b003      	add	sp, #12
 8000e0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e0e:	b004      	add	sp, #16
 8000e10:	4770      	bx	lr

08000e12 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BT_DEVICE_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_CONSOLE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_FLASH_LOAD_OFFSET, 1);
GEN_ABSOLUTE_SYM(CONFIG_THREAD_STACK_INFO, 1);
 8000e12:	4770      	bx	lr

08000e14 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8000e14:	428b      	cmp	r3, r1
{
 8000e16:	b538      	push	{r3, r4, r5, lr}
 8000e18:	4615      	mov	r5, r2
 8000e1a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 8000e1c:	d805      	bhi.n	8000e2a <_copy+0x16>
		(void)memcpy(to, from, from_len);
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4629      	mov	r1, r5
 8000e22:	f7ff fd2d 	bl	8000880 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8000e26:	4620      	mov	r0, r4
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	e7fb      	b.n	8000e26 <_copy+0x12>

08000e2e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 8000e2e:	f7ff bd53 	b.w	80008d8 <memset>

08000e32 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 8000e32:	09c3      	lsrs	r3, r0, #7
 8000e34:	005a      	lsls	r2, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000e3c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 8000e40:	b2c0      	uxtb	r0, r0
 8000e42:	4770      	bx	lr

08000e44 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
 8000e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e48:	4606      	mov	r6, r0
 8000e4a:	b0a8      	sub	sp, #160	; 0xa0
 8000e4c:	460f      	mov	r7, r1
 8000e4e:	4614      	mov	r4, r2
 8000e50:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8000e52:	f04f 0820 	mov.w	r8, #32
		uECC_RNG_Function rng_function = uECC_get_rng();
 8000e56:	f000 f965 	bl	8001124 <uECC_get_rng>
		if (!rng_function ||
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b918      	cbnz	r0, 8000e66 <uECC_make_key+0x22>
        		return 0;
 8000e5e:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
 8000e60:	b028      	add	sp, #160	; 0xa0
 8000e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	a808      	add	r0, sp, #32
 8000e6a:	4798      	blx	r3
		if (!rng_function ||
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d0f6      	beq.n	8000e5e <uECC_make_key+0x1a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8000e70:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000e74:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8000e78:	a908      	add	r1, sp, #32
 8000e7a:	4668      	mov	r0, sp
 8000e7c:	331f      	adds	r3, #31
 8000e7e:	fb93 f3f8 	sdiv	r3, r3, r8
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	f000 faeb 	bl	800145e <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
 8000e88:	4622      	mov	r2, r4
 8000e8a:	4669      	mov	r1, sp
 8000e8c:	a818      	add	r0, sp, #96	; 0x60
 8000e8e:	f000 ff08 	bl	8001ca2 <EccPoint_compute_public_key>
 8000e92:	b300      	cbz	r0, 8000ed6 <uECC_make_key+0x92>
					       BITS_TO_BYTES(curve->num_n_bits),
 8000e94:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
 8000e98:	466a      	mov	r2, sp
					       BITS_TO_BYTES(curve->num_n_bits),
 8000e9a:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	fb93 f1f1 	sdiv	r1, r3, r1
 8000ea4:	f000 ff25 	bl	8001cf2 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
 8000ea8:	aa18      	add	r2, sp, #96	; 0x60
 8000eaa:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	f000 ff1f 	bl	8001cf2 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
 8000eb4:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
 8000eb8:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
 8000ebc:	ab18      	add	r3, sp, #96	; 0x60
 8000ebe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000ec2:	1870      	adds	r0, r6, r1
 8000ec4:	f000 ff15 	bl	8001cf2 <uECC_vli_nativeToBytes>
			memset(_private, 0, NUM_ECC_BYTES);
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4668      	mov	r0, sp
 8000ece:	f7ff fd03 	bl	80008d8 <memset>
      			return 1;
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	e7c4      	b.n	8000e60 <uECC_make_key+0x1c>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8000ed6:	3d01      	subs	r5, #1
 8000ed8:	d1bd      	bne.n	8000e56 <uECC_make_key+0x12>
 8000eda:	e7c0      	b.n	8000e5e <uECC_make_key+0x1a>

08000edc <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
 8000edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee0:	4691      	mov	r9, r2
 8000ee2:	b0a5      	sub	sp, #148	; 0x94
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
 8000ee4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	wordcount_t num_bytes = curve->num_bytes;
 8000ee8:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
 8000eec:	f993 b000 	ldrsb.w	fp, [r3]
	uECC_word_t *p2[2] = {_private, tmp};
 8000ef0:	ad04      	add	r5, sp, #16
{
 8000ef2:	4682      	mov	sl, r0
	uECC_vli_bytesToNative(_private,
 8000ef4:	f04f 0808 	mov.w	r8, #8
	uECC_word_t *p2[2] = {_private, tmp};
 8000ef8:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
 8000efa:	4628      	mov	r0, r5
			       BITS_TO_BYTES(curve->num_n_bits));
 8000efc:	3207      	adds	r2, #7
	uECC_vli_bytesToNative(_private,
 8000efe:	fb92 f2f8 	sdiv	r2, r2, r8
{
 8000f02:	461c      	mov	r4, r3
	uECC_word_t *p2[2] = {_private, tmp};
 8000f04:	9502      	str	r5, [sp, #8]
 8000f06:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
 8000f08:	f000 ff07 	bl	8001d1a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
 8000f0c:	463a      	mov	r2, r7
 8000f0e:	4651      	mov	r1, sl
 8000f10:	a814      	add	r0, sp, #80	; 0x50
 8000f12:	f000 ff02 	bl	8001d1a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
 8000f16:	ab14      	add	r3, sp, #80	; 0x50
 8000f18:	eb0a 0107 	add.w	r1, sl, r7
 8000f1c:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 8000f20:	463a      	mov	r2, r7
 8000f22:	f000 fefa 	bl	8001d1a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
 8000f26:	4623      	mov	r3, r4
 8000f28:	4632      	mov	r2, r6
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	f000 fe8c 	bl	8001c4a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
 8000f32:	fab0 f080 	clz	r0, r0
 8000f36:	9401      	str	r4, [sp, #4]
 8000f38:	ab24      	add	r3, sp, #144	; 0x90
 8000f3a:	0940      	lsrs	r0, r0, #5
 8000f3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f40:	8863      	ldrh	r3, [r4, #2]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	a914      	add	r1, sp, #80	; 0x50
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f850 2c88 	ldr.w	r2, [r0, #-136]
 8000f50:	4608      	mov	r0, r1
 8000f52:	f000 fda9 	bl	8001aa8 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
 8000f56:	aa14      	add	r2, sp, #80	; 0x50
 8000f58:	4639      	mov	r1, r7
 8000f5a:	4648      	mov	r0, r9
 8000f5c:	f000 fec9 	bl	8001cf2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
 8000f60:	4621      	mov	r1, r4
 8000f62:	a814      	add	r0, sp, #80	; 0x50
 8000f64:	f000 fd17 	bl	8001996 <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
 8000f68:	eb0d 0408 	add.w	r4, sp, r8
	r = !EccPoint_isZero(_public, curve);
 8000f6c:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
 8000f6e:	4642      	mov	r2, r8
 8000f70:	2100      	movs	r1, #0
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff fcb0 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f7ff fcab 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
 8000f82:	2220      	movs	r2, #32
 8000f84:	2100      	movs	r1, #0
 8000f86:	4628      	mov	r0, r5
 8000f88:	f7ff fca6 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
 8000f8c:	fab7 f087 	clz	r0, r7
 8000f90:	0940      	lsrs	r0, r0, #5
 8000f92:	b025      	add	sp, #148	; 0x94
 8000f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f98 <uECC_vli_add>:

/* Computes result = left + right, returning carry, in constant time.
 * Can modify in place. */
static uECC_word_t uECC_vli_add(uECC_word_t *result, const uECC_word_t *left,
				const uECC_word_t *right, wordcount_t num_words)
{
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	uECC_word_t carry = 0;
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 8000f9a:	2400      	movs	r4, #0
{
 8000f9c:	4686      	mov	lr, r0
	uECC_word_t carry = 0;
 8000f9e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
 8000fa0:	b265      	sxtb	r5, r4
 8000fa2:	42ab      	cmp	r3, r5
 8000fa4:	dc00      	bgt.n	8000fa8 <uECC_vli_add+0x10>
		uECC_word_t val = (sum < left[i]);
		carry = cond_set(val, carry, (sum != left[i]));
		result[i] = sum;
	}
	return carry;
}
 8000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
 8000fa8:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8000fac:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8000fb0:	442e      	add	r6, r5
 8000fb2:	4406      	add	r6, r0
		uECC_word_t val = (sum < left[i]);
 8000fb4:	42b5      	cmp	r5, r6
 8000fb6:	bf8c      	ite	hi
 8000fb8:	2501      	movhi	r5, #1
 8000fba:	2500      	movls	r5, #0
		carry = cond_set(val, carry, (sum != left[i]));
 8000fbc:	bf14      	ite	ne
 8000fbe:	2701      	movne	r7, #1
 8000fc0:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
 8000fc2:	fb07 f705 	mul.w	r7, r7, r5
 8000fc6:	bf0c      	ite	eq
 8000fc8:	4605      	moveq	r5, r0
 8000fca:	2500      	movne	r5, #0
		result[i] = sum;
 8000fcc:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
 8000fd0:	ea47 0005 	orr.w	r0, r7, r5
 8000fd4:	3401      	adds	r4, #1
 8000fd6:	e7e3      	b.n	8000fa0 <uECC_vli_add+0x8>

08000fd8 <uECC_vli_rshift1>:
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
 8000fd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
 8000fdc:	2300      	movs	r3, #0
	while (vli-- > end) {
 8000fde:	4288      	cmp	r0, r1
 8000fe0:	d300      	bcc.n	8000fe4 <uECC_vli_rshift1+0xc>
		uECC_word_t temp = *vli;
		*vli = (temp >> 1) | carry;
		carry = temp << (uECC_WORD_BITS - 1);
	}
}
 8000fe2:	4770      	bx	lr
		uECC_word_t temp = *vli;
 8000fe4:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
 8000fe8:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8000fec:	f841 3d04 	str.w	r3, [r1, #-4]!
		carry = temp << (uECC_WORD_BITS - 1);
 8000ff0:	07d3      	lsls	r3, r2, #31
 8000ff2:	e7f4      	b.n	8000fde <uECC_vli_rshift1+0x6>

08000ff4 <vli_modInv_update>:
			      wordcount_t num_words)
{

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
 8000ff4:	6803      	ldr	r3, [r0, #0]
{
 8000ff6:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
 8000ff8:	f013 0501 	ands.w	r5, r3, #1
{
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
 8001000:	d005      	beq.n	800100e <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
 8001002:	4613      	mov	r3, r2
 8001004:	460a      	mov	r2, r1
 8001006:	4601      	mov	r1, r0
 8001008:	f7ff ffc6 	bl	8000f98 <uECC_vli_add>
 800100c:	4605      	mov	r5, r0
	}
	uECC_vli_rshift1(uv, num_words);
 800100e:	4621      	mov	r1, r4
 8001010:	4630      	mov	r0, r6
 8001012:	f7ff ffe1 	bl	8000fd8 <uECC_vli_rshift1>
	if (carry) {
 8001016:	b145      	cbz	r5, 800102a <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
 8001018:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800101c:	3a01      	subs	r2, #1
 800101e:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8001022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001026:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 800102a:	bd70      	pop	{r4, r5, r6, pc}

0800102c <uECC_vli_mult>:
{
 800102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	b087      	sub	sp, #28
 8001032:	9203      	str	r2, [sp, #12]
	for (k = 0; k < num_words; ++k) {
 8001034:	2200      	movs	r2, #0
{
 8001036:	9102      	str	r1, [sp, #8]
	uECC_word_t r1 = 0;
 8001038:	4615      	mov	r5, r2
	uECC_word_t r0 = 0;
 800103a:	4614      	mov	r4, r2
 800103c:	fa4f f882 	sxtb.w	r8, r2
	for (k = 0; k < num_words; ++k) {
 8001040:	4598      	cmp	r8, r3
 8001042:	db14      	blt.n	800106e <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 8001044:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	f89d 2000 	ldrb.w	r2, [sp]
 8001054:	eb02 0e03 	add.w	lr, r2, r3
 8001058:	fa4f fe8e 	sxtb.w	lr, lr
 800105c:	45e6      	cmp	lr, ip
 800105e:	db33      	blt.n	80010c8 <uECC_vli_mult+0x9c>
	result[num_words * 2 - 1] = r0;
 8001060:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001064:	f840 4c04 	str.w	r4, [r0, #-4]
}
 8001068:	b007      	add	sp, #28
 800106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800106e:	9e03      	ldr	r6, [sp, #12]
	for (k = 0; k < num_words; ++k) {
 8001070:	f04f 0e00 	mov.w	lr, #0
 8001074:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 8001078:	46f4      	mov	ip, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
 800107a:	9902      	ldr	r1, [sp, #8]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 800107c:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
 8001080:	f851 602e 	ldr.w	r6, [r1, lr, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8001084:	9501      	str	r5, [sp, #4]
 8001086:	2500      	movs	r5, #0
 8001088:	9500      	str	r5, [sp, #0]
	uECC_dword_t p = (uECC_dword_t)a * b;
 800108a:	fba7 ab06 	umull	sl, fp, r7, r6
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 800108e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8001092:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
 8001096:	eb16 040a 	adds.w	r4, r6, sl
 800109a:	eb47 050b 	adc.w	r5, r7, fp
	*r2 += (r01 < p);
 800109e:	455d      	cmp	r5, fp
 80010a0:	f10e 0e01 	add.w	lr, lr, #1
 80010a4:	bf08      	it	eq
 80010a6:	4554      	cmpeq	r4, sl
		for (i = 0; i <= k; ++i) {
 80010a8:	fa4f fa8e 	sxtb.w	sl, lr
	r01 += p;
 80010ac:	4626      	mov	r6, r4
	*r2 += (r01 < p);
 80010ae:	bf34      	ite	cc
 80010b0:	2401      	movcc	r4, #1
 80010b2:	2400      	movcs	r4, #0
		for (i = 0; i <= k; ++i) {
 80010b4:	45d0      	cmp	r8, sl
	*r2 += (r01 < p);
 80010b6:	44a4      	add	ip, r4
	*r0 = (uECC_word_t)r01;
 80010b8:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
 80010ba:	dade      	bge.n	800107a <uECC_vli_mult+0x4e>
		result[k] = r0;
 80010bc:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
 80010c0:	462c      	mov	r4, r5
 80010c2:	3201      	adds	r2, #1
	*r2 += (r01 < p);
 80010c4:	4665      	mov	r5, ip
 80010c6:	e7b9      	b.n	800103c <uECC_vli_mult+0x10>
 80010c8:	3201      	adds	r2, #1
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 80010ca:	462f      	mov	r7, r5
 80010cc:	b252      	sxtb	r2, r2
 80010ce:	2500      	movs	r5, #0
 80010d0:	429a      	cmp	r2, r3
 80010d2:	db06      	blt.n	80010e2 <uECC_vli_mult+0xb6>
 80010d4:	9a00      	ldr	r2, [sp, #0]
		result[k] = r0;
 80010d6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
 80010da:	3201      	adds	r2, #1
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	463c      	mov	r4, r7
 80010e0:	e7b6      	b.n	8001050 <uECC_vli_mult+0x24>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 80010e2:	ebae 0602 	sub.w	r6, lr, r2
	uECC_dword_t p = (uECC_dword_t)a * b;
 80010e6:	9903      	ldr	r1, [sp, #12]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 80010e8:	9705      	str	r7, [sp, #20]
	uECC_dword_t p = (uECC_dword_t)a * b;
 80010ea:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80010ee:	9902      	ldr	r1, [sp, #8]
 80010f0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80010f4:	fba6 ab01 	umull	sl, fp, r6, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 80010f8:	2100      	movs	r1, #0
 80010fa:	9104      	str	r1, [sp, #16]
 80010fc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8001100:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
 8001104:	eb16 080a 	adds.w	r8, r6, sl
 8001108:	eb47 090b 	adc.w	r9, r7, fp
	*r2 += (r01 < p);
 800110c:	45d9      	cmp	r9, fp
 800110e:	bf08      	it	eq
 8001110:	45d0      	cmpeq	r8, sl
 8001112:	bf34      	ite	cc
 8001114:	2401      	movcc	r4, #1
 8001116:	460c      	movcs	r4, r1
 8001118:	3201      	adds	r2, #1
 800111a:	4425      	add	r5, r4
	r01 += p;
 800111c:	464f      	mov	r7, r9
 800111e:	b252      	sxtb	r2, r2
	*r0 = (uECC_word_t)r01;
 8001120:	4644      	mov	r4, r8
 8001122:	e7d5      	b.n	80010d0 <uECC_vli_mult+0xa4>

08001124 <uECC_get_rng>:
}
 8001124:	4b01      	ldr	r3, [pc, #4]	; (800112c <uECC_get_rng+0x8>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20005774 	.word	0x20005774

08001130 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
 8001130:	2300      	movs	r3, #0
{
 8001132:	b510      	push	{r4, lr}
		 vli[i] = 0;
 8001134:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
 8001136:	b25a      	sxtb	r2, r3
 8001138:	4291      	cmp	r1, r2
 800113a:	dc00      	bgt.n	800113e <uECC_vli_clear+0xe>
}
 800113c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
 800113e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001142:	3301      	adds	r3, #1
 8001144:	e7f7      	b.n	8001136 <uECC_vli_clear+0x6>

08001146 <uECC_vli_isZero>:
{
 8001146:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
 8001148:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
 800114a:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
 800114c:	b25c      	sxtb	r4, r3
 800114e:	42a1      	cmp	r1, r4
 8001150:	dc03      	bgt.n	800115a <uECC_vli_isZero+0x14>
}
 8001152:	fab2 f082 	clz	r0, r2
 8001156:	0940      	lsrs	r0, r0, #5
 8001158:	bd10      	pop	{r4, pc}
		bits |= vli[i];
 800115a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800115e:	3301      	adds	r3, #1
 8001160:	4322      	orrs	r2, r4
 8001162:	e7f3      	b.n	800114c <uECC_vli_isZero+0x6>

08001164 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001164:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8001166:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001168:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 800116c:	f001 011f 	and.w	r1, r1, #31
 8001170:	fa03 f101 	lsl.w	r1, r3, r1
}
 8001174:	4008      	ands	r0, r1
 8001176:	4770      	bx	lr

08001178 <uECC_vli_numBits>:
{
 8001178:	3901      	subs	r1, #1
 800117a:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 800117c:	2900      	cmp	r1, #0
 800117e:	da04      	bge.n	800118a <uECC_vli_numBits+0x12>
	return (i + 1);
 8001180:	3101      	adds	r1, #1
 8001182:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
 8001184:	b931      	cbnz	r1, 8001194 <uECC_vli_numBits+0x1c>
		return 0;
 8001186:	4608      	mov	r0, r1
}
 8001188:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 800118a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f2      	beq.n	8001178 <uECC_vli_numBits>
 8001192:	e7f5      	b.n	8001180 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
 8001194:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8001198:	3b01      	subs	r3, #1
 800119a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
 800119e:	2000      	movs	r0, #0
 80011a0:	b923      	cbnz	r3, 80011ac <uECC_vli_numBits+0x34>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 80011a2:	3901      	subs	r1, #1
 80011a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80011a8:	b208      	sxth	r0, r1
 80011aa:	4770      	bx	lr
		digit >>= 1;
 80011ac:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
 80011ae:	3001      	adds	r0, #1
 80011b0:	e7f6      	b.n	80011a0 <uECC_vli_numBits+0x28>

080011b2 <uECC_vli_set>:
{
 80011b2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	b25c      	sxtb	r4, r3
 80011b8:	42a2      	cmp	r2, r4
 80011ba:	dc00      	bgt.n	80011be <uECC_vli_set+0xc>
}
 80011bc:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
 80011be:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80011c2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80011c6:	3301      	adds	r3, #1
 80011c8:	e7f5      	b.n	80011b6 <uECC_vli_set+0x4>

080011ca <uECC_vli_cmp_unsafe>:
{
 80011ca:	b510      	push	{r4, lr}
 80011cc:	3a01      	subs	r2, #1
 80011ce:	b252      	sxtb	r2, r2
	for (i = num_words - 1; i >= 0; --i) {
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	da01      	bge.n	80011d8 <uECC_vli_cmp_unsafe+0xe>
	return 0;
 80011d4:	2000      	movs	r0, #0
 80011d6:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
 80011d8:	b213      	sxth	r3, r2
 80011da:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80011de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d803      	bhi.n	80011ee <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
 80011e6:	d2f1      	bcs.n	80011cc <uECC_vli_cmp_unsafe+0x2>
			return -1;
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80011ec:	bd10      	pop	{r4, pc}
			return 1;
 80011ee:	2001      	movs	r0, #1
 80011f0:	bd10      	pop	{r4, pc}

080011f2 <uECC_vli_equal>:
{
 80011f2:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
 80011f4:	3a01      	subs	r2, #1
 80011f6:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
 80011f8:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	da03      	bge.n	8001206 <uECC_vli_equal+0x14>
}
 80011fe:	1c18      	adds	r0, r3, #0
 8001200:	bf18      	it	ne
 8001202:	2001      	movne	r0, #1
 8001204:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
 8001206:	b215      	sxth	r5, r2
 8001208:	3a01      	subs	r2, #1
 800120a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 800120e:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8001212:	406c      	eors	r4, r5
 8001214:	4323      	orrs	r3, r4
 8001216:	b252      	sxtb	r2, r2
 8001218:	e7ef      	b.n	80011fa <uECC_vli_equal+0x8>

0800121a <uECC_vli_sub>:
{
 800121a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
 800121c:	2400      	movs	r4, #0
{
 800121e:	4686      	mov	lr, r0
	uECC_word_t borrow = 0;
 8001220:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
 8001222:	b265      	sxtb	r5, r4
 8001224:	42ab      	cmp	r3, r5
 8001226:	dc00      	bgt.n	800122a <uECC_vli_sub+0x10>
}
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
 800122a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800122e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8001232:	1bae      	subs	r6, r5, r6
 8001234:	1a36      	subs	r6, r6, r0
		uECC_word_t val = (diff > left[i]);
 8001236:	42b5      	cmp	r5, r6
 8001238:	bf34      	ite	cc
 800123a:	2501      	movcc	r5, #1
 800123c:	2500      	movcs	r5, #0
		borrow = cond_set(val, borrow, (diff != left[i]));
 800123e:	bf14      	ite	ne
 8001240:	2701      	movne	r7, #1
 8001242:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
 8001244:	fb07 f705 	mul.w	r7, r7, r5
 8001248:	bf0c      	ite	eq
 800124a:	4605      	moveq	r5, r0
 800124c:	2500      	movne	r5, #0
		result[i] = diff;
 800124e:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
 8001252:	ea47 0005 	orr.w	r0, r7, r5
 8001256:	3401      	adds	r4, #1
 8001258:	e7e3      	b.n	8001222 <uECC_vli_sub+0x8>
	...

0800125c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 800125e:	2208      	movs	r2, #8
{
 8001260:	b089      	sub	sp, #36	; 0x24
 8001262:	460c      	mov	r4, r1
 8001264:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 8001266:	f7ff ffa4 	bl	80011b2 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
 800126a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800126c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
 800126e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001270:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
 8001272:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001274:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
 8001276:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001278:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 800127a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800127c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
 800127e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001280:	2308      	movs	r3, #8
 8001282:	466a      	mov	r2, sp
 8001284:	4669      	mov	r1, sp
 8001286:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
 8001288:	9702      	str	r7, [sp, #8]
 800128a:	9701      	str	r7, [sp, #4]
 800128c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 800128e:	f7ff fe83 	bl	8000f98 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001292:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001294:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001296:	466a      	mov	r2, sp
 8001298:	4631      	mov	r1, r6
 800129a:	4630      	mov	r0, r6
 800129c:	f7ff fe7c 	bl	8000f98 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
 80012a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012a2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
 80012a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012a6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
 80012a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012aa:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
 80012ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012ae:	9306      	str	r3, [sp, #24]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012b0:	4405      	add	r5, r0
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80012b2:	2308      	movs	r3, #8
 80012b4:	466a      	mov	r2, sp
 80012b6:	4669      	mov	r1, sp
 80012b8:	4668      	mov	r0, sp
	tmp[7] = 0;
 80012ba:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80012bc:	f7ff fe6c 	bl	8000f98 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012c0:	2308      	movs	r3, #8
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80012c2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012c4:	466a      	mov	r2, sp
 80012c6:	4631      	mov	r1, r6
 80012c8:	4630      	mov	r0, r6
 80012ca:	f7ff fe65 	bl	8000f98 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
 80012ce:	6a23      	ldr	r3, [r4, #32]
 80012d0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
 80012d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012d4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
 80012d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012d8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
 80012da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012dc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 80012de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012e0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012e2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012e4:	2308      	movs	r3, #8
 80012e6:	466a      	mov	r2, sp
 80012e8:	4631      	mov	r1, r6
 80012ea:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
 80012ec:	9705      	str	r7, [sp, #20]
 80012ee:	9704      	str	r7, [sp, #16]
 80012f0:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80012f2:	f7ff fe51 	bl	8000f98 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
 80012f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
 80012fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012fc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
 80012fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[3] = product[13];
	tmp[4] = product[14];
 8001300:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[2] = product[11];
 8001302:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
 8001304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001306:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
 8001308:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
	tmp[6] = product[13];
 800130a:	9306      	str	r3, [sp, #24]
	tmp[5] = product[15];
 800130c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[7] = product[8];
 800130e:	6a23      	ldr	r3, [r4, #32]
	tmp[5] = product[15];
 8001310:	9205      	str	r2, [sp, #20]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001312:	4405      	add	r5, r0
	tmp[7] = product[8];
 8001314:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001316:	466a      	mov	r2, sp
 8001318:	2308      	movs	r3, #8
 800131a:	4631      	mov	r1, r6
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff fe3b 	bl	8000f98 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
 8001322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001324:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
 8001326:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001328:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
 800132a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800132c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
 800132e:	6a23      	ldr	r3, [r4, #32]
 8001330:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
 8001332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001334:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001336:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001338:	2308      	movs	r3, #8
 800133a:	466a      	mov	r2, sp
 800133c:	4631      	mov	r1, r6
 800133e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
 8001340:	9705      	str	r7, [sp, #20]
 8001342:	9704      	str	r7, [sp, #16]
 8001344:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001346:	f7ff ff68 	bl	800121a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
 800134a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800134c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
 800134e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001350:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
 8001352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001354:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
 8001356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001358:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
 800135a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800135c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
 800135e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001360:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001362:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001364:	2308      	movs	r3, #8
 8001366:	466a      	mov	r2, sp
 8001368:	4631      	mov	r1, r6
 800136a:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
 800136c:	9705      	str	r7, [sp, #20]
 800136e:	9704      	str	r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001370:	f7ff ff53 	bl	800121a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
 8001374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001376:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
 8001378:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800137a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
 800137c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800137e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
 8001380:	6a23      	ldr	r3, [r4, #32]
 8001382:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
 8001384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001386:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
 8001388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800138a:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[12];
 800138c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800138e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001390:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001392:	2308      	movs	r3, #8
 8001394:	466a      	mov	r2, sp
 8001396:	4631      	mov	r1, r6
 8001398:	4630      	mov	r0, r6
	tmp[6] = 0;
 800139a:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 800139c:	f7ff ff3d 	bl	800121a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
 80013a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013a2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
 80013a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013a6:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
	tmp[3] = product[9];
 80013a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013aa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
 80013ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013ae:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
 80013b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b2:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
 80013b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013b6:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80013b8:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80013ba:	2308      	movs	r3, #8
 80013bc:	466a      	mov	r2, sp
 80013be:	4631      	mov	r1, r6
 80013c0:	4630      	mov	r0, r6
	tmp[2] = 0;
 80013c2:	9702      	str	r7, [sp, #8]
	tmp[6] = 0;
 80013c4:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80013c6:	f7ff ff28 	bl	800121a <uECC_vli_sub>

	if (carry < 0) {
 80013ca:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 80013cc:	4c0d      	ldr	r4, [pc, #52]	; (8001404 <vli_mmod_fast_secp256r1+0x1a8>)
	if (carry < 0) {
 80013ce:	d40f      	bmi.n	80013f0 <vli_mmod_fast_secp256r1+0x194>
		}
		while (carry < 0);
	} else  {
		while (carry || 
 80013d0:	b935      	cbnz	r5, 80013e0 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
 80013d2:	2208      	movs	r2, #8
 80013d4:	4631      	mov	r1, r6
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fef7 	bl	80011ca <uECC_vli_cmp_unsafe>
		while (carry || 
 80013dc:	2801      	cmp	r0, #1
 80013de:	d00f      	beq.n	8001400 <vli_mmod_fast_secp256r1+0x1a4>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 80013e0:	2308      	movs	r3, #8
 80013e2:	4622      	mov	r2, r4
 80013e4:	4631      	mov	r1, r6
 80013e6:	4630      	mov	r0, r6
 80013e8:	f7ff ff17 	bl	800121a <uECC_vli_sub>
 80013ec:	1a2d      	subs	r5, r5, r0
 80013ee:	e7ef      	b.n	80013d0 <vli_mmod_fast_secp256r1+0x174>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 80013f0:	2308      	movs	r3, #8
 80013f2:	4622      	mov	r2, r4
 80013f4:	4631      	mov	r1, r6
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fdce 	bl	8000f98 <uECC_vli_add>
		while (carry < 0);
 80013fc:	182d      	adds	r5, r5, r0
 80013fe:	d4f7      	bmi.n	80013f0 <vli_mmod_fast_secp256r1+0x194>
		}
	}
}
 8001400:	b009      	add	sp, #36	; 0x24
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	08012df8 	.word	0x08012df8

08001408 <uECC_vli_modAdd>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 800140e:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8001410:	4623      	mov	r3, r4
{
 8001412:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8001414:	f7ff fdc0 	bl	8000f98 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8001418:	b930      	cbnz	r0, 8001428 <uECC_vli_modAdd+0x20>
 800141a:	4622      	mov	r2, r4
 800141c:	4629      	mov	r1, r5
 800141e:	4630      	mov	r0, r6
 8001420:	f7ff fed3 	bl	80011ca <uECC_vli_cmp_unsafe>
 8001424:	2801      	cmp	r0, #1
 8001426:	d007      	beq.n	8001438 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
 8001428:	4623      	mov	r3, r4
 800142a:	4632      	mov	r2, r6
 800142c:	4629      	mov	r1, r5
 800142e:	4628      	mov	r0, r5
}
 8001430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
 8001434:	f7ff bef1 	b.w	800121a <uECC_vli_sub>
 8001438:	bd70      	pop	{r4, r5, r6, pc}

0800143a <uECC_vli_modSub>:
{
 800143a:	b570      	push	{r4, r5, r6, lr}
 800143c:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8001440:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8001442:	4623      	mov	r3, r4
{
 8001444:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8001446:	f7ff fee8 	bl	800121a <uECC_vli_sub>
	if (l_borrow) {
 800144a:	b138      	cbz	r0, 800145c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
 800144c:	4623      	mov	r3, r4
 800144e:	4632      	mov	r2, r6
 8001450:	4629      	mov	r1, r5
 8001452:	4628      	mov	r0, r5
}
 8001454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
 8001458:	f7ff bd9e 	b.w	8000f98 <uECC_vli_add>
 800145c:	bd70      	pop	{r4, r5, r6, pc}

0800145e <uECC_vli_mmod>:
{
 800145e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001462:	b0a5      	sub	sp, #148	; 0x94
 8001464:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
 8001466:	9103      	str	r1, [sp, #12]
 8001468:	ab14      	add	r3, sp, #80	; 0x50
			   uECC_vli_numBits(mod, num_words);
 800146a:	4629      	mov	r1, r5
{
 800146c:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
 800146e:	4610      	mov	r0, r2
{
 8001470:	4617      	mov	r7, r2
	uECC_word_t *v[2] = {tmp, product};
 8001472:	9302      	str	r3, [sp, #8]
			   uECC_vli_numBits(mod, num_words);
 8001474:	f7ff fe80 	bl	8001178 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 8001478:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
 800147c:	b204      	sxth	r4, r0
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 800147e:	4263      	negs	r3, r4
 8001480:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 8001484:	f04f 0620 	mov.w	r6, #32
 8001488:	fb94 f6f6 	sdiv	r6, r4, r6
 800148c:	b276      	sxtb	r6, r6
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 800148e:	f004 091f 	and.w	r9, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
 8001492:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 8001494:	bf58      	it	pl
 8001496:	f1c3 0900 	rsbpl	r9, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
 800149a:	4631      	mov	r1, r6
 800149c:	f7ff fe48 	bl	8001130 <uECC_vli_clear>
	if (bit_shift > 0) {
 80014a0:	f1b9 0f00 	cmp.w	r9, #0
 80014a4:	b230      	sxth	r0, r6
 80014a6:	dd2b      	ble.n	8001500 <uECC_vli_mmod+0xa2>
 80014a8:	ab04      	add	r3, sp, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 80014b0:	f1c9 0e20 	rsb	lr, r9, #32
	if (bit_shift > 0) {
 80014b4:	4613      	mov	r3, r2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 80014b6:	42ab      	cmp	r3, r5
 80014b8:	d317      	bcc.n	80014ea <uECC_vli_mmod+0x8c>
		for (i = 0; i < num_words * 2; ++i) {
 80014ba:	b22f      	sxth	r7, r5
 80014bc:	007b      	lsls	r3, r7, #1
 80014be:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80014c0:	ab04      	add	r3, sp, #16
 80014c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80014c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80014ca:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80014cc:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80014ce:	eb03 0989 	add.w	r9, r3, r9, lsl #2
	for (index = 1; shift >= 0; --shift) {
 80014d2:	2c00      	cmp	r4, #0
 80014d4:	db55      	blt.n	8001582 <uECC_vli_mmod+0x124>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80014d6:	ab24      	add	r3, sp, #144	; 0x90
 80014d8:	2200      	movs	r2, #0
			v[1 - index][i] = diff;
 80014da:	f1c6 0001 	rsb	r0, r6, #1
 80014de:	4696      	mov	lr, r2
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 80014e0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
 80014e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014e8:	e02d      	b.n	8001546 <uECC_vli_mmod+0xe8>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 80014ea:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 80014ee:	fa06 f109 	lsl.w	r1, r6, r9
 80014f2:	430a      	orrs	r2, r1
 80014f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 80014f8:	fa26 f20e 	lsr.w	r2, r6, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 80014fc:	3301      	adds	r3, #1
 80014fe:	e7da      	b.n	80014b6 <uECC_vli_mmod+0x58>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 8001500:	ab04      	add	r3, sp, #16
 8001502:	462a      	mov	r2, r5
 8001504:	4639      	mov	r1, r7
 8001506:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800150a:	f7ff fe52 	bl	80011b2 <uECC_vli_set>
 800150e:	e7d4      	b.n	80014ba <uECC_vli_mmod+0x5c>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8001510:	fa0f fc81 	sxth.w	ip, r1
 8001514:	f85a 3c88 	ldr.w	r3, [sl, #-136]
 8001518:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 800151c:	ab24      	add	r3, sp, #144	; 0x90
 800151e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001522:	f851 3c80 	ldr.w	r3, [r1, #-128]
 8001526:	ebab 0303 	sub.w	r3, fp, r3
 800152a:	eba3 030e 	sub.w	r3, r3, lr
			if (diff != v[index][i]) {
 800152e:	459b      	cmp	fp, r3
 8001530:	d004      	beq.n	800153c <uECC_vli_mmod+0xde>
				borrow = (diff > v[index][i]);
 8001532:	bf34      	ite	cc
 8001534:	f04f 0e01 	movcc.w	lr, #1
 8001538:	f04f 0e00 	movcs.w	lr, #0
			v[1 - index][i] = diff;
 800153c:	f850 1c88 	ldr.w	r1, [r0, #-136]
 8001540:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
 8001544:	3201      	adds	r2, #1
		for (i = 0; i < num_words * 2; ++i) {
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	b251      	sxtb	r1, r2
 800154a:	4299      	cmp	r1, r3
 800154c:	dbe0      	blt.n	8001510 <uECC_vli_mmod+0xb2>
		index = !(index ^ borrow);
 800154e:	eba6 030e 	sub.w	r3, r6, lr
 8001552:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
 8001554:	4629      	mov	r1, r5
 8001556:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
 8001558:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
 800155a:	f7ff fd3d 	bl	8000fd8 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 800155e:	ab24      	add	r3, sp, #144	; 0x90
 8001560:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8001564:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 8001566:	f853 2c80 	ldr.w	r2, [r3, #-128]
 800156a:	f859 3c80 	ldr.w	r3, [r9, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 800156e:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 8001570:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8001574:	3c01      	subs	r4, #1
 8001576:	f849 3c80 	str.w	r3, [r9, #-128]
 800157a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 800157c:	f7ff fd2c 	bl	8000fd8 <uECC_vli_rshift1>
 8001580:	e7a7      	b.n	80014d2 <uECC_vli_mmod+0x74>
	uECC_vli_set(result, v[index], num_words);
 8001582:	ab24      	add	r3, sp, #144	; 0x90
 8001584:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001588:	462a      	mov	r2, r5
 800158a:	f856 1c88 	ldr.w	r1, [r6, #-136]
 800158e:	4640      	mov	r0, r8
 8001590:	f7ff fe0f 	bl	80011b2 <uECC_vli_set>
}
 8001594:	b025      	add	sp, #148	; 0x94
 8001596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800159a <uECC_vli_modMult_fast>:
{
 800159a:	b530      	push	{r4, r5, lr}
 800159c:	461c      	mov	r4, r3
 800159e:	b091      	sub	sp, #68	; 0x44
 80015a0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	4668      	mov	r0, sp
 80015a8:	f7ff fd40 	bl	800102c <uECC_vli_mult>
	curve->mmod_fast(result, product);
 80015ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80015b0:	4669      	mov	r1, sp
 80015b2:	4628      	mov	r0, r5
 80015b4:	4798      	blx	r3
}
 80015b6:	b011      	add	sp, #68	; 0x44
 80015b8:	bd30      	pop	{r4, r5, pc}

080015ba <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
 80015ba:	4613      	mov	r3, r2
 80015bc:	460a      	mov	r2, r1
 80015be:	f7ff bfec 	b.w	800159a <uECC_vli_modMult_fast>

080015c2 <double_jacobian_default>:
{
 80015c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
 80015c6:	f993 6000 	ldrsb.w	r6, [r3]
{
 80015ca:	b092      	sub	sp, #72	; 0x48
 80015cc:	4604      	mov	r4, r0
 80015ce:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
 80015d0:	4610      	mov	r0, r2
 80015d2:	4631      	mov	r1, r6
{
 80015d4:	4615      	mov	r5, r2
 80015d6:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
 80015d8:	f7ff fdb5 	bl	8001146 <uECC_vli_isZero>
 80015dc:	2800      	cmp	r0, #0
 80015de:	f040 8093 	bne.w	8001708 <double_jacobian_default+0x146>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 80015e2:	4642      	mov	r2, r8
 80015e4:	4649      	mov	r1, r9
 80015e6:	a802      	add	r0, sp, #8
 80015e8:	f7ff ffe7 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 80015ec:	4643      	mov	r3, r8
 80015ee:	aa02      	add	r2, sp, #8
 80015f0:	4621      	mov	r1, r4
 80015f2:	a80a      	add	r0, sp, #40	; 0x28
 80015f4:	f7ff ffd1 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 80015f8:	a902      	add	r1, sp, #8
 80015fa:	4608      	mov	r0, r1
 80015fc:	4642      	mov	r2, r8
 80015fe:	f7ff ffdc 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8001602:	4643      	mov	r3, r8
 8001604:	462a      	mov	r2, r5
 8001606:	4649      	mov	r1, r9
 8001608:	4648      	mov	r0, r9
 800160a:	f7ff ffc6 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 800160e:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8001612:	4642      	mov	r2, r8
 8001614:	4629      	mov	r1, r5
 8001616:	4628      	mov	r0, r5
 8001618:	f7ff ffcf 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 800161c:	463b      	mov	r3, r7
 800161e:	462a      	mov	r2, r5
 8001620:	4621      	mov	r1, r4
 8001622:	4620      	mov	r0, r4
 8001624:	9600      	str	r6, [sp, #0]
 8001626:	f7ff feef 	bl	8001408 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 800162a:	463b      	mov	r3, r7
 800162c:	462a      	mov	r2, r5
 800162e:	4629      	mov	r1, r5
 8001630:	4628      	mov	r0, r5
 8001632:	9600      	str	r6, [sp, #0]
 8001634:	f7ff fee8 	bl	8001408 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8001638:	463b      	mov	r3, r7
 800163a:	462a      	mov	r2, r5
 800163c:	4621      	mov	r1, r4
 800163e:	4628      	mov	r0, r5
 8001640:	9600      	str	r6, [sp, #0]
 8001642:	f7ff fefa 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
 8001646:	4643      	mov	r3, r8
 8001648:	462a      	mov	r2, r5
 800164a:	4621      	mov	r1, r4
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffa4 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8001652:	463b      	mov	r3, r7
 8001654:	4622      	mov	r2, r4
 8001656:	4621      	mov	r1, r4
 8001658:	4628      	mov	r0, r5
 800165a:	9600      	str	r6, [sp, #0]
 800165c:	f7ff fed4 	bl	8001408 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 8001660:	463b      	mov	r3, r7
 8001662:	9600      	str	r6, [sp, #0]
 8001664:	462a      	mov	r2, r5
 8001666:	4621      	mov	r1, r4
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff fecd 	bl	8001408 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 800166e:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
 8001670:	07db      	lsls	r3, r3, #31
 8001672:	d54c      	bpl.n	800170e <double_jacobian_default+0x14c>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8001674:	4633      	mov	r3, r6
 8001676:	463a      	mov	r2, r7
 8001678:	4621      	mov	r1, r4
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fc8c 	bl	8000f98 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
 8001680:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8001682:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fca7 	bl	8000fd8 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 800168a:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 800168e:	3b01      	subs	r3, #1
 8001690:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8001694:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
 8001698:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
 800169c:	4642      	mov	r2, r8
 800169e:	4621      	mov	r1, r4
 80016a0:	4628      	mov	r0, r5
 80016a2:	f7ff ff8a 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 80016a6:	463b      	mov	r3, r7
 80016a8:	aa0a      	add	r2, sp, #40	; 0x28
 80016aa:	4629      	mov	r1, r5
 80016ac:	4628      	mov	r0, r5
 80016ae:	9600      	str	r6, [sp, #0]
 80016b0:	f7ff fec3 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 80016b4:	463b      	mov	r3, r7
 80016b6:	aa0a      	add	r2, sp, #40	; 0x28
 80016b8:	4629      	mov	r1, r5
 80016ba:	4628      	mov	r0, r5
 80016bc:	9600      	str	r6, [sp, #0]
 80016be:	f7ff febc 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 80016c2:	a90a      	add	r1, sp, #40	; 0x28
 80016c4:	4608      	mov	r0, r1
 80016c6:	463b      	mov	r3, r7
 80016c8:	462a      	mov	r2, r5
 80016ca:	9600      	str	r6, [sp, #0]
 80016cc:	f7ff feb5 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
 80016d0:	4643      	mov	r3, r8
 80016d2:	aa0a      	add	r2, sp, #40	; 0x28
 80016d4:	4621      	mov	r1, r4
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ff5f 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
 80016dc:	aa02      	add	r2, sp, #8
 80016de:	463b      	mov	r3, r7
 80016e0:	4610      	mov	r0, r2
 80016e2:	4621      	mov	r1, r4
 80016e4:	9600      	str	r6, [sp, #0]
 80016e6:	f7ff fea8 	bl	800143a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
 80016ea:	4632      	mov	r2, r6
 80016ec:	4629      	mov	r1, r5
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fd5f 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
 80016f4:	4632      	mov	r2, r6
 80016f6:	4649      	mov	r1, r9
 80016f8:	4628      	mov	r0, r5
 80016fa:	f7ff fd5a 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
 80016fe:	4632      	mov	r2, r6
 8001700:	a902      	add	r1, sp, #8
 8001702:	4648      	mov	r0, r9
 8001704:	f7ff fd55 	bl	80011b2 <uECC_vli_set>
}
 8001708:	b012      	add	sp, #72	; 0x48
 800170a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
 800170e:	4631      	mov	r1, r6
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fc61 	bl	8000fd8 <uECC_vli_rshift1>
 8001716:	e7c1      	b.n	800169c <double_jacobian_default+0xda>

08001718 <x_side_default>:
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	4615      	mov	r5, r2
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	4604      	mov	r4, r0
 8001722:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 8001724:	2220      	movs	r2, #32
 8001726:	2100      	movs	r1, #0
 8001728:	a802      	add	r0, sp, #8
 800172a:	f7ff f8d5 	bl	80008d8 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 800172e:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
 8001730:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 8001734:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 8001736:	462a      	mov	r2, r5
 8001738:	4641      	mov	r1, r8
 800173a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 800173c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 800173e:	f7ff ff3c 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 8001742:	4633      	mov	r3, r6
 8001744:	aa02      	add	r2, sp, #8
 8001746:	4621      	mov	r1, r4
 8001748:	4620      	mov	r0, r4
 800174a:	9700      	str	r7, [sp, #0]
 800174c:	f7ff fe75 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 8001750:	462b      	mov	r3, r5
 8001752:	4642      	mov	r2, r8
 8001754:	4621      	mov	r1, r4
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ff1f 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
 800175c:	9700      	str	r7, [sp, #0]
 800175e:	4633      	mov	r3, r6
 8001760:	f105 0284 	add.w	r2, r5, #132	; 0x84
 8001764:	4621      	mov	r1, r4
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fe4e 	bl	8001408 <uECC_vli_modAdd>
}
 800176c:	b00a      	add	sp, #40	; 0x28
 800176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001772 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
 8001772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001776:	b09b      	sub	sp, #108	; 0x6c
 8001778:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 800177a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800177c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8001780:	9500      	str	r5, [sp, #0]
{
 8001782:	4698      	mov	r8, r3
 8001784:	4607      	mov	r7, r0
 8001786:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8001788:	4623      	mov	r3, r4
 800178a:	4602      	mov	r2, r0
 800178c:	4631      	mov	r1, r6
 800178e:	a802      	add	r0, sp, #8
 8001790:	f7ff fe53 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 8001794:	a902      	add	r1, sp, #8
 8001796:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001798:	4608      	mov	r0, r1
 800179a:	f7ff ff0e 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 800179e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017a0:	aa02      	add	r2, sp, #8
 80017a2:	4639      	mov	r1, r7
 80017a4:	4638      	mov	r0, r7
 80017a6:	f7ff fef8 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80017aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ac:	aa02      	add	r2, sp, #8
 80017ae:	4631      	mov	r1, r6
 80017b0:	4630      	mov	r0, r6
 80017b2:	f7ff fef2 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 80017b6:	4623      	mov	r3, r4
 80017b8:	464a      	mov	r2, r9
 80017ba:	4641      	mov	r1, r8
 80017bc:	a802      	add	r0, sp, #8
 80017be:	9500      	str	r5, [sp, #0]
 80017c0:	f7ff fe22 	bl	8001408 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80017c4:	4623      	mov	r3, r4
 80017c6:	464a      	mov	r2, r9
 80017c8:	4641      	mov	r1, r8
 80017ca:	4640      	mov	r0, r8
 80017cc:	9500      	str	r5, [sp, #0]
 80017ce:	f7ff fe34 	bl	800143a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 80017d2:	4623      	mov	r3, r4
 80017d4:	463a      	mov	r2, r7
 80017d6:	4631      	mov	r1, r6
 80017d8:	a80a      	add	r0, sp, #40	; 0x28
 80017da:	9500      	str	r5, [sp, #0]
 80017dc:	f7ff fe2d 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 80017e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017e2:	aa0a      	add	r2, sp, #40	; 0x28
 80017e4:	4649      	mov	r1, r9
 80017e6:	4648      	mov	r0, r9
 80017e8:	f7ff fed7 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 80017ec:	4623      	mov	r3, r4
 80017ee:	4632      	mov	r2, r6
 80017f0:	4639      	mov	r1, r7
 80017f2:	a80a      	add	r0, sp, #40	; 0x28
 80017f4:	9500      	str	r5, [sp, #0]
 80017f6:	f7ff fe07 	bl	8001408 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 80017fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80017fc:	4641      	mov	r1, r8
 80017fe:	4630      	mov	r0, r6
 8001800:	f7ff fedb 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 8001804:	4623      	mov	r3, r4
 8001806:	aa0a      	add	r2, sp, #40	; 0x28
 8001808:	4631      	mov	r1, r6
 800180a:	4630      	mov	r0, r6
 800180c:	9500      	str	r5, [sp, #0]
 800180e:	f7ff fe14 	bl	800143a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8001812:	4623      	mov	r3, r4
 8001814:	4632      	mov	r2, r6
 8001816:	4639      	mov	r1, r7
 8001818:	a812      	add	r0, sp, #72	; 0x48
 800181a:	9500      	str	r5, [sp, #0]
 800181c:	f7ff fe0d 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8001820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001822:	aa12      	add	r2, sp, #72	; 0x48
 8001824:	4641      	mov	r1, r8
 8001826:	4640      	mov	r0, r8
 8001828:	f7ff feb7 	bl	800159a <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
 800182c:	4623      	mov	r3, r4
 800182e:	464a      	mov	r2, r9
 8001830:	4641      	mov	r1, r8
 8001832:	4640      	mov	r0, r8
 8001834:	9500      	str	r5, [sp, #0]
 8001836:	f7ff fe00 	bl	800143a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 800183a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800183c:	a902      	add	r1, sp, #8
 800183e:	a812      	add	r0, sp, #72	; 0x48
 8001840:	f7ff febb 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 8001844:	a912      	add	r1, sp, #72	; 0x48
 8001846:	4623      	mov	r3, r4
 8001848:	aa0a      	add	r2, sp, #40	; 0x28
 800184a:	4608      	mov	r0, r1
 800184c:	9500      	str	r5, [sp, #0]
 800184e:	f7ff fdf4 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8001852:	4623      	mov	r3, r4
 8001854:	463a      	mov	r2, r7
 8001856:	a912      	add	r1, sp, #72	; 0x48
 8001858:	a80a      	add	r0, sp, #40	; 0x28
 800185a:	9500      	str	r5, [sp, #0]
 800185c:	f7ff fded 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 8001860:	a90a      	add	r1, sp, #40	; 0x28
 8001862:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001864:	aa02      	add	r2, sp, #8
 8001866:	4608      	mov	r0, r1
 8001868:	f7ff fe97 	bl	800159a <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
 800186c:	4623      	mov	r3, r4
 800186e:	464a      	mov	r2, r9
 8001870:	a90a      	add	r1, sp, #40	; 0x28
 8001872:	4648      	mov	r0, r9
 8001874:	9500      	str	r5, [sp, #0]
 8001876:	f7ff fde0 	bl	800143a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
 800187a:	462a      	mov	r2, r5
 800187c:	a912      	add	r1, sp, #72	; 0x48
 800187e:	4638      	mov	r0, r7
 8001880:	f7ff fc97 	bl	80011b2 <uECC_vli_set>
}
 8001884:	b01b      	add	sp, #108	; 0x6c
 8001886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800188a <uECC_vli_modInv>:
{
 800188a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188c:	460f      	mov	r7, r1
 800188e:	b0a1      	sub	sp, #132	; 0x84
 8001890:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
 8001892:	4619      	mov	r1, r3
 8001894:	4638      	mov	r0, r7
{
 8001896:	4615      	mov	r5, r2
 8001898:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
 800189a:	f7ff fc54 	bl	8001146 <uECC_vli_isZero>
 800189e:	b128      	cbz	r0, 80018ac <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
 80018a0:	4621      	mov	r1, r4
 80018a2:	4630      	mov	r0, r6
 80018a4:	f7ff fc44 	bl	8001130 <uECC_vli_clear>
}
 80018a8:	b021      	add	sp, #132	; 0x84
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
 80018ac:	4622      	mov	r2, r4
 80018ae:	4639      	mov	r1, r7
 80018b0:	4668      	mov	r0, sp
 80018b2:	f7ff fc7e 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
 80018b6:	4622      	mov	r2, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	a808      	add	r0, sp, #32
 80018bc:	f7ff fc79 	bl	80011b2 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
 80018c0:	4621      	mov	r1, r4
 80018c2:	a810      	add	r0, sp, #64	; 0x40
 80018c4:	f7ff fc34 	bl	8001130 <uECC_vli_clear>
	u[0] = 1;
 80018c8:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
 80018ca:	4621      	mov	r1, r4
 80018cc:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
 80018ce:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
 80018d0:	f7ff fc2e 	bl	8001130 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80018d4:	4622      	mov	r2, r4
 80018d6:	a908      	add	r1, sp, #32
 80018d8:	4668      	mov	r0, sp
 80018da:	f7ff fc76 	bl	80011ca <uECC_vli_cmp_unsafe>
 80018de:	b928      	cbnz	r0, 80018ec <uECC_vli_modInv+0x62>
  	uECC_vli_set(result, u, num_words);
 80018e0:	4622      	mov	r2, r4
 80018e2:	a910      	add	r1, sp, #64	; 0x40
 80018e4:	4630      	mov	r0, r6
 80018e6:	f7ff fc64 	bl	80011b2 <uECC_vli_set>
 80018ea:	e7dd      	b.n	80018a8 <uECC_vli_modInv+0x1e>
		if (EVEN(a)) {
 80018ec:	9b00      	ldr	r3, [sp, #0]
 80018ee:	07da      	lsls	r2, r3, #31
 80018f0:	d409      	bmi.n	8001906 <uECC_vli_modInv+0x7c>
			uECC_vli_rshift1(a, num_words);
 80018f2:	4621      	mov	r1, r4
 80018f4:	4668      	mov	r0, sp
 80018f6:	f7ff fb6f 	bl	8000fd8 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
 80018fa:	4622      	mov	r2, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
 8001900:	f7ff fb78 	bl	8000ff4 <vli_modInv_update>
 8001904:	e7e6      	b.n	80018d4 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
 8001906:	9b08      	ldr	r3, [sp, #32]
 8001908:	07db      	lsls	r3, r3, #31
 800190a:	d407      	bmi.n	800191c <uECC_vli_modInv+0x92>
			uECC_vli_rshift1(b, num_words);
 800190c:	4621      	mov	r1, r4
 800190e:	a808      	add	r0, sp, #32
 8001910:	f7ff fb62 	bl	8000fd8 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
 8001914:	4622      	mov	r2, r4
 8001916:	4629      	mov	r1, r5
 8001918:	a818      	add	r0, sp, #96	; 0x60
 800191a:	e7f1      	b.n	8001900 <uECC_vli_modInv+0x76>
		} else if (cmpResult > 0) {
 800191c:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
 800191e:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
 8001920:	dd1c      	ble.n	800195c <uECC_vli_modInv+0xd2>
			uECC_vli_sub(a, a, b, num_words);
 8001922:	aa08      	add	r2, sp, #32
 8001924:	4669      	mov	r1, sp
 8001926:	4668      	mov	r0, sp
 8001928:	f7ff fc77 	bl	800121a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
 800192c:	4621      	mov	r1, r4
 800192e:	4668      	mov	r0, sp
 8001930:	f7ff fb52 	bl	8000fd8 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8001934:	4622      	mov	r2, r4
 8001936:	a918      	add	r1, sp, #96	; 0x60
 8001938:	a810      	add	r0, sp, #64	; 0x40
 800193a:	f7ff fc46 	bl	80011ca <uECC_vli_cmp_unsafe>
 800193e:	2800      	cmp	r0, #0
 8001940:	da05      	bge.n	800194e <uECC_vli_modInv+0xc4>
        			uECC_vli_add(u, u, mod, num_words);
 8001942:	a910      	add	r1, sp, #64	; 0x40
 8001944:	4623      	mov	r3, r4
 8001946:	462a      	mov	r2, r5
 8001948:	4608      	mov	r0, r1
 800194a:	f7ff fb25 	bl	8000f98 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
 800194e:	a910      	add	r1, sp, #64	; 0x40
 8001950:	4623      	mov	r3, r4
 8001952:	aa18      	add	r2, sp, #96	; 0x60
 8001954:	4608      	mov	r0, r1
 8001956:	f7ff fc60 	bl	800121a <uECC_vli_sub>
 800195a:	e7ce      	b.n	80018fa <uECC_vli_modInv+0x70>
      			uECC_vli_sub(b, b, a, num_words);
 800195c:	a908      	add	r1, sp, #32
 800195e:	466a      	mov	r2, sp
 8001960:	4608      	mov	r0, r1
 8001962:	f7ff fc5a 	bl	800121a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
 8001966:	4621      	mov	r1, r4
 8001968:	a808      	add	r0, sp, #32
 800196a:	f7ff fb35 	bl	8000fd8 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 800196e:	4622      	mov	r2, r4
 8001970:	a910      	add	r1, sp, #64	; 0x40
 8001972:	a818      	add	r0, sp, #96	; 0x60
 8001974:	f7ff fc29 	bl	80011ca <uECC_vli_cmp_unsafe>
 8001978:	2800      	cmp	r0, #0
 800197a:	da05      	bge.n	8001988 <uECC_vli_modInv+0xfe>
        			uECC_vli_add(v, v, mod, num_words);
 800197c:	a918      	add	r1, sp, #96	; 0x60
 800197e:	4623      	mov	r3, r4
 8001980:	462a      	mov	r2, r5
 8001982:	4608      	mov	r0, r1
 8001984:	f7ff fb08 	bl	8000f98 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
 8001988:	a918      	add	r1, sp, #96	; 0x60
 800198a:	4623      	mov	r3, r4
 800198c:	aa10      	add	r2, sp, #64	; 0x40
 800198e:	4608      	mov	r0, r1
 8001990:	f7ff fc43 	bl	800121a <uECC_vli_sub>
 8001994:	e7be      	b.n	8001914 <uECC_vli_modInv+0x8a>

08001996 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
 8001996:	7809      	ldrb	r1, [r1, #0]
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	b249      	sxtb	r1, r1
 800199c:	f7ff bbd3 	b.w	8001146 <uECC_vli_isZero>

080019a0 <apply_z>:
{
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	4615      	mov	r5, r2
 80019a4:	b089      	sub	sp, #36	; 0x24
 80019a6:	461c      	mov	r4, r3
 80019a8:	4607      	mov	r7, r0
 80019aa:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 80019ac:	461a      	mov	r2, r3
 80019ae:	4629      	mov	r1, r5
 80019b0:	4668      	mov	r0, sp
 80019b2:	f7ff fe02 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 80019b6:	4623      	mov	r3, r4
 80019b8:	466a      	mov	r2, sp
 80019ba:	4639      	mov	r1, r7
 80019bc:	4638      	mov	r0, r7
 80019be:	f7ff fdec 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 80019c2:	4623      	mov	r3, r4
 80019c4:	462a      	mov	r2, r5
 80019c6:	4669      	mov	r1, sp
 80019c8:	4668      	mov	r0, sp
 80019ca:	f7ff fde6 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 80019ce:	4623      	mov	r3, r4
 80019d0:	466a      	mov	r2, sp
 80019d2:	4631      	mov	r1, r6
 80019d4:	4630      	mov	r0, r6
 80019d6:	f7ff fde0 	bl	800159a <uECC_vli_modMult_fast>
}
 80019da:	b009      	add	sp, #36	; 0x24
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019de <XYcZ_add>:
{
 80019de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
 80019e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80019e8:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80019ec:	9600      	str	r6, [sp, #0]
{
 80019ee:	461f      	mov	r7, r3
 80019f0:	4680      	mov	r8, r0
 80019f2:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80019f4:	462b      	mov	r3, r5
 80019f6:	4602      	mov	r2, r0
 80019f8:	4621      	mov	r1, r4
 80019fa:	a802      	add	r0, sp, #8
 80019fc:	f7ff fd1d 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 8001a00:	a902      	add	r1, sp, #8
 8001a02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001a04:	4608      	mov	r0, r1
 8001a06:	f7ff fdd8 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8001a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a0c:	aa02      	add	r2, sp, #8
 8001a0e:	4641      	mov	r1, r8
 8001a10:	4640      	mov	r0, r8
 8001a12:	f7ff fdc2 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8001a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a18:	aa02      	add	r2, sp, #8
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff fdbc 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8001a22:	462b      	mov	r3, r5
 8001a24:	464a      	mov	r2, r9
 8001a26:	4639      	mov	r1, r7
 8001a28:	4638      	mov	r0, r7
 8001a2a:	9600      	str	r6, [sp, #0]
 8001a2c:	f7ff fd05 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 8001a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001a32:	4639      	mov	r1, r7
 8001a34:	a802      	add	r0, sp, #8
 8001a36:	f7ff fdc0 	bl	80015ba <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8001a3a:	a902      	add	r1, sp, #8
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	4642      	mov	r2, r8
 8001a40:	4608      	mov	r0, r1
 8001a42:	9600      	str	r6, [sp, #0]
 8001a44:	f7ff fcf9 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8001a48:	a902      	add	r1, sp, #8
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4608      	mov	r0, r1
 8001a50:	9600      	str	r6, [sp, #0]
 8001a52:	f7ff fcf2 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8001a56:	462b      	mov	r3, r5
 8001a58:	4642      	mov	r2, r8
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	9600      	str	r6, [sp, #0]
 8001a60:	f7ff fceb 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
 8001a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a66:	4622      	mov	r2, r4
 8001a68:	4649      	mov	r1, r9
 8001a6a:	4648      	mov	r0, r9
 8001a6c:	f7ff fd95 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8001a70:	462b      	mov	r3, r5
 8001a72:	aa02      	add	r2, sp, #8
 8001a74:	4641      	mov	r1, r8
 8001a76:	4620      	mov	r0, r4
 8001a78:	9600      	str	r6, [sp, #0]
 8001a7a:	f7ff fcde 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 8001a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001a80:	4622      	mov	r2, r4
 8001a82:	4639      	mov	r1, r7
 8001a84:	4638      	mov	r0, r7
 8001a86:	f7ff fd88 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	4639      	mov	r1, r7
 8001a90:	4638      	mov	r0, r7
 8001a92:	9600      	str	r6, [sp, #0]
 8001a94:	f7ff fcd1 	bl	800143a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
 8001a98:	4632      	mov	r2, r6
 8001a9a:	a902      	add	r1, sp, #8
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fb88 	bl	80011b2 <uECC_vli_set>
}
 8001aa2:	b00b      	add	sp, #44	; 0x2c
 8001aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001aa8 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
 8001aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aac:	b0b1      	sub	sp, #196	; 0xc4
 8001aae:	461e      	mov	r6, r3
 8001ab0:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 8001ab2:	9004      	str	r0, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
 8001ab4:	f994 7000 	ldrsb.w	r7, [r4]
{
 8001ab8:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
 8001aba:	a818      	add	r0, sp, #96	; 0x60
 8001abc:	463a      	mov	r2, r7
{
 8001abe:	9105      	str	r1, [sp, #20]
	uECC_vli_set(Rx[1], point, num_words);
 8001ac0:	f7ff fb77 	bl	80011b2 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
 8001ac4:	00bb      	lsls	r3, r7, #2
 8001ac6:	9307      	str	r3, [sp, #28]
 8001ac8:	9b05      	ldr	r3, [sp, #20]
 8001aca:	00ba      	lsls	r2, r7, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	463a      	mov	r2, r7
 8001ad2:	a828      	add	r0, sp, #160	; 0xa0
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	f7ff fb6c 	bl	80011b2 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
 8001ada:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
 8001ade:	2e00      	cmp	r6, #0
 8001ae0:	f000 8089 	beq.w	8001bf6 <EccPoint_mult+0x14e>
		uECC_vli_set(z, initial_Z, num_words);
 8001ae4:	462a      	mov	r2, r5
 8001ae6:	4631      	mov	r1, r6
 8001ae8:	a808      	add	r0, sp, #32
 8001aea:	f7ff fb62 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
 8001aee:	ae10      	add	r6, sp, #64	; 0x40
 8001af0:	462a      	mov	r2, r5
 8001af2:	a918      	add	r1, sp, #96	; 0x60
 8001af4:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
 8001af6:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
 8001afa:	f7ff fb5a 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
 8001afe:	462a      	mov	r2, r5
 8001b00:	a928      	add	r1, sp, #160	; 0xa0
 8001b02:	4648      	mov	r0, r9
 8001b04:	f7ff fb55 	bl	80011b2 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
 8001b08:	4623      	mov	r3, r4
 8001b0a:	aa08      	add	r2, sp, #32
 8001b0c:	a928      	add	r1, sp, #160	; 0xa0
 8001b0e:	a818      	add	r0, sp, #96	; 0x60
 8001b10:	f7ff ff46 	bl	80019a0 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
 8001b14:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8001b18:	4623      	mov	r3, r4
 8001b1a:	aa08      	add	r2, sp, #32
 8001b1c:	a928      	add	r1, sp, #160	; 0xa0
 8001b1e:	a818      	add	r0, sp, #96	; 0x60
 8001b20:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
 8001b22:	4623      	mov	r3, r4
 8001b24:	aa08      	add	r2, sp, #32
 8001b26:	4649      	mov	r1, r9
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f7ff ff39 	bl	80019a0 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
 8001b2e:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
 8001b32:	3d02      	subs	r5, #2
 8001b34:	b22d      	sxth	r5, r5
 8001b36:	2d00      	cmp	r5, #0
 8001b38:	dc64      	bgt.n	8001c04 <EccPoint_mult+0x15c>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001b3a:	9b06      	ldr	r3, [sp, #24]
 8001b3c:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001b3e:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001b40:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001b44:	ab10      	add	r3, sp, #64	; 0x40
 8001b46:	0176      	lsls	r6, r6, #5
 8001b48:	43ed      	mvns	r5, r5
 8001b4a:	eb03 0806 	add.w	r8, r3, r6
 8001b4e:	f005 0501 	and.w	r5, r5, #1
 8001b52:	ab20      	add	r3, sp, #128	; 0x80
 8001b54:	441e      	add	r6, r3
 8001b56:	016d      	lsls	r5, r5, #5
 8001b58:	ab10      	add	r3, sp, #64	; 0x40
 8001b5a:	eb03 0905 	add.w	r9, r3, r5
 8001b5e:	ab20      	add	r3, sp, #128	; 0x80
 8001b60:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8001b62:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001b66:	462b      	mov	r3, r5
 8001b68:	464a      	mov	r2, r9
 8001b6a:	4631      	mov	r1, r6
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	f7ff fe00 	bl	8001772 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8001b72:	4653      	mov	r3, sl
 8001b74:	aa10      	add	r2, sp, #64	; 0x40
 8001b76:	a918      	add	r1, sp, #96	; 0x60
 8001b78:	a808      	add	r0, sp, #32
 8001b7a:	9700      	str	r7, [sp, #0]
 8001b7c:	f7ff fc5d 	bl	800143a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
 8001b80:	a908      	add	r1, sp, #32
 8001b82:	4623      	mov	r3, r4
 8001b84:	4632      	mov	r2, r6
 8001b86:	4608      	mov	r0, r1
 8001b88:	f7ff fd07 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
 8001b8c:	a908      	add	r1, sp, #32
 8001b8e:	4623      	mov	r3, r4
 8001b90:	9a05      	ldr	r2, [sp, #20]
 8001b92:	4608      	mov	r0, r1
 8001b94:	f7ff fd01 	bl	800159a <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
 8001b98:	a908      	add	r1, sp, #32
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4652      	mov	r2, sl
 8001b9e:	4608      	mov	r0, r1
 8001ba0:	f7ff fe73 	bl	800188a <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
 8001ba4:	a908      	add	r1, sp, #32
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	9a02      	ldr	r2, [sp, #8]
 8001baa:	4608      	mov	r0, r1
 8001bac:	f7ff fcf5 	bl	800159a <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
 8001bb0:	a908      	add	r1, sp, #32
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	4642      	mov	r2, r8
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	f7ff fcef 	bl	800159a <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001bbc:	9400      	str	r4, [sp, #0]
 8001bbe:	4633      	mov	r3, r6
 8001bc0:	4642      	mov	r2, r8
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	4648      	mov	r0, r9
 8001bc6:	f7ff ff0a 	bl	80019de <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
 8001bca:	4623      	mov	r3, r4
 8001bcc:	aa08      	add	r2, sp, #32
 8001bce:	a920      	add	r1, sp, #128	; 0x80
 8001bd0:	a810      	add	r0, sp, #64	; 0x40
 8001bd2:	f7ff fee5 	bl	80019a0 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
 8001bd6:	463a      	mov	r2, r7
 8001bd8:	a910      	add	r1, sp, #64	; 0x40
 8001bda:	9804      	ldr	r0, [sp, #16]
 8001bdc:	f7ff fae9 	bl	80011b2 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
 8001be0:	9b04      	ldr	r3, [sp, #16]
 8001be2:	9c07      	ldr	r4, [sp, #28]
 8001be4:	4423      	add	r3, r4
 8001be6:	463a      	mov	r2, r7
 8001be8:	a920      	add	r1, sp, #128	; 0x80
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fae1 	bl	80011b2 <uECC_vli_set>
}
 8001bf0:	b031      	add	sp, #196	; 0xc4
 8001bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	a808      	add	r0, sp, #32
 8001bfa:	f7ff fa99 	bl	8001130 <uECC_vli_clear>
		z[0] = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9308      	str	r3, [sp, #32]
 8001c02:	e774      	b.n	8001aee <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
 8001c04:	4629      	mov	r1, r5
 8001c06:	9806      	ldr	r0, [sp, #24]
 8001c08:	f7ff faac 	bl	8001164 <uECC_vli_testBit>
 8001c0c:	fab0 f080 	clz	r0, r0
 8001c10:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001c12:	f1c0 0801 	rsb	r8, r0, #1
 8001c16:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001c1a:	0140      	lsls	r0, r0, #5
 8001c1c:	eb06 0b08 	add.w	fp, r6, r8
 8001c20:	eb06 0a00 	add.w	sl, r6, r0
 8001c24:	44c8      	add	r8, r9
 8001c26:	eb09 0300 	add.w	r3, r9, r0
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	4658      	mov	r0, fp
 8001c30:	9400      	str	r4, [sp, #0]
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	f7ff fd9d 	bl	8001772 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001c38:	9400      	str	r4, [sp, #0]
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	465a      	mov	r2, fp
 8001c3e:	9903      	ldr	r1, [sp, #12]
 8001c40:	4650      	mov	r0, sl
 8001c42:	f7ff fecc 	bl	80019de <XYcZ_add>
 8001c46:	3d01      	subs	r5, #1
 8001c48:	e774      	b.n	8001b34 <EccPoint_mult+0x8c>

08001c4a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
 8001c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8001c4e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
{
 8001c52:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001c54:	f103 0624 	add.w	r6, r3, #36	; 0x24
{
 8001c58:	4690      	mov	r8, r2
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8001c5a:	f105 041f 	add.w	r4, r5, #31
 8001c5e:	2220      	movs	r2, #32
 8001c60:	fb94 f4f2 	sdiv	r4, r4, r2
 8001c64:	b264      	sxtb	r4, r4
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001c66:	4601      	mov	r1, r0
 8001c68:	4623      	mov	r3, r4
 8001c6a:	4632      	mov	r2, r6
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	f7ff f993 	bl	8000f98 <uECC_vli_add>
 8001c72:	b990      	cbnz	r0, 8001c9a <regularize_k+0x50>
 8001c74:	ebb5 1f44 	cmp.w	r5, r4, lsl #5
 8001c78:	da11      	bge.n	8001c9e <regularize_k+0x54>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	4638      	mov	r0, r7
 8001c7e:	f7ff fa71 	bl	8001164 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8001c82:	1c05      	adds	r5, r0, #0
 8001c84:	bf18      	it	ne
 8001c86:	2501      	movne	r5, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
 8001c88:	4623      	mov	r3, r4
 8001c8a:	4632      	mov	r2, r6
 8001c8c:	4639      	mov	r1, r7
 8001c8e:	4640      	mov	r0, r8
 8001c90:	f7ff f982 	bl	8000f98 <uECC_vli_add>

	return carry;
}
 8001c94:	4628      	mov	r0, r5
 8001c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001c9a:	2501      	movs	r5, #1
 8001c9c:	e7f4      	b.n	8001c88 <regularize_k+0x3e>
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	e7f2      	b.n	8001c88 <regularize_k+0x3e>

08001ca2 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
 8001ca2:	b530      	push	{r4, r5, lr}
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	b095      	sub	sp, #84	; 0x54
 8001ca8:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
 8001caa:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
 8001cac:	4623      	mov	r3, r4
{
 8001cae:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
 8001cb0:	a904      	add	r1, sp, #16
 8001cb2:	9102      	str	r1, [sp, #8]
 8001cb4:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
 8001cb6:	f7ff ffc8 	bl	8001c4a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 8001cba:	fab0 f080 	clz	r0, r0
 8001cbe:	ab14      	add	r3, sp, #80	; 0x50
 8001cc0:	0940      	lsrs	r0, r0, #5
 8001cc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001cc6:	8863      	ldrh	r3, [r4, #2]
 8001cc8:	9401      	str	r4, [sp, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f850 2c48 	ldr.w	r2, [r0, #-72]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7ff fee4 	bl	8001aa8 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff fe57 	bl	8001996 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
 8001ce8:	fab0 f080 	clz	r0, r0
 8001cec:	0940      	lsrs	r0, r0, #5
 8001cee:	b015      	add	sp, #84	; 0x54
 8001cf0:	bd30      	pop	{r4, r5, pc}

08001cf2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
 8001cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
 8001cf4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
 8001cf6:	1e4f      	subs	r7, r1, #1
 8001cf8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
 8001cfa:	428c      	cmp	r4, r1
 8001cfc:	f105 0501 	add.w	r5, r5, #1
 8001d00:	db00      	blt.n	8001d04 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
 8001d04:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8001d06:	f023 0603 	bic.w	r6, r3, #3
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	5996      	ldr	r6, [r2, r6]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	fa26 f303 	lsr.w	r3, r6, r3
 8001d16:	5503      	strb	r3, [r0, r4]
 8001d18:	e7ee      	b.n	8001cf8 <uECC_vli_nativeToBytes+0x6>

08001d1a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
 8001d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1c:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001d1e:	2304      	movs	r3, #4
{
 8001d20:	460e      	mov	r6, r1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001d22:	1cd1      	adds	r1, r2, #3
 8001d24:	fb91 f1f3 	sdiv	r1, r1, r3
 8001d28:	b249      	sxtb	r1, r1
{
 8001d2a:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
 8001d2c:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001d2e:	f7ff f9ff 	bl	8001130 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
 8001d32:	2200      	movs	r2, #0
 8001d34:	b251      	sxtb	r1, r2
 8001d36:	428c      	cmp	r4, r1
 8001d38:	f102 0201 	add.w	r2, r2, #1
 8001d3c:	dc00      	bgt.n	8001d40 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
 8001d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
 8001d40:	1a7b      	subs	r3, r7, r1
		native[b / uECC_WORD_SIZE] |=
 8001d42:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8001d46:	5c71      	ldrb	r1, [r6, r1]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
 8001d52:	5829      	ldr	r1, [r5, r0]
 8001d54:	4319      	orrs	r1, r3
 8001d56:	5029      	str	r1, [r5, r0]
 8001d58:	e7ec      	b.n	8001d34 <uECC_vli_bytesToNative+0x1a>

08001d5a <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
 8001d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5e:	b090      	sub	sp, #64	; 0x40
 8001d60:	4606      	mov	r6, r0
 8001d62:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 8001d64:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
 8001d68:	f7ff fe15 	bl	8001996 <EccPoint_isZero>
 8001d6c:	bb48      	cbnz	r0, 8001dc2 <uECC_valid_point+0x68>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8001d6e:	f104 0804 	add.w	r8, r4, #4
 8001d72:	462a      	mov	r2, r5
 8001d74:	4631      	mov	r1, r6
 8001d76:	4640      	mov	r0, r8
 8001d78:	f7ff fa27 	bl	80011ca <uECC_vli_cmp_unsafe>
 8001d7c:	2801      	cmp	r0, #1
 8001d7e:	d123      	bne.n	8001dc8 <uECC_valid_point+0x6e>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
 8001d80:	eb06 0785 	add.w	r7, r6, r5, lsl #2
 8001d84:	462a      	mov	r2, r5
 8001d86:	4639      	mov	r1, r7
 8001d88:	4640      	mov	r0, r8
 8001d8a:	f7ff fa1e 	bl	80011ca <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8001d8e:	2801      	cmp	r0, #1
 8001d90:	d11a      	bne.n	8001dc8 <uECC_valid_point+0x6e>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
 8001d92:	4622      	mov	r2, r4
 8001d94:	4639      	mov	r1, r7
 8001d96:	4668      	mov	r0, sp
 8001d98:	f7ff fc0f 	bl	80015ba <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
 8001d9c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001da0:	4622      	mov	r2, r4
 8001da2:	4631      	mov	r1, r6
 8001da4:	a808      	add	r0, sp, #32
 8001da6:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
 8001da8:	462a      	mov	r2, r5
 8001daa:	a908      	add	r1, sp, #32
 8001dac:	4668      	mov	r0, sp
 8001dae:	f7ff fa20 	bl	80011f2 <uECC_vli_equal>
 8001db2:	2800      	cmp	r0, #0
		return -3;

	return 0;
 8001db4:	bf14      	ite	ne
 8001db6:	f06f 0002 	mvnne.w	r0, #2
 8001dba:	2000      	moveq	r0, #0
}
 8001dbc:	b010      	add	sp, #64	; 0x40
 8001dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
 8001dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc6:	e7f9      	b.n	8001dbc <uECC_valid_point+0x62>
		return -2;
 8001dc8:	f06f 0001 	mvn.w	r0, #1
 8001dcc:	e7f6      	b.n	8001dbc <uECC_valid_point+0x62>

08001dce <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
 8001dce:	b570      	push	{r4, r5, r6, lr}
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
 8001dd4:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8001dd6:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
 8001dda:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8001ddc:	4601      	mov	r1, r0
 8001dde:	4668      	mov	r0, sp
 8001de0:	f7ff ff9b 	bl	8001d1a <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
 8001de4:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
 8001de8:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
 8001dec:	18b1      	adds	r1, r6, r2
 8001dee:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 8001df2:	f7ff ff92 	bl	8001d1a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
 8001df6:	2210      	movs	r2, #16
 8001df8:	4629      	mov	r1, r5
 8001dfa:	4668      	mov	r0, sp
 8001dfc:	f7ff f9e5 	bl	80011ca <uECC_vli_cmp_unsafe>
 8001e00:	b128      	cbz	r0, 8001e0e <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
 8001e02:	4621      	mov	r1, r4
 8001e04:	4668      	mov	r0, sp
 8001e06:	f7ff ffa8 	bl	8001d5a <uECC_valid_point>
}
 8001e0a:	b010      	add	sp, #64	; 0x40
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
 8001e0e:	f06f 0003 	mvn.w	r0, #3
 8001e12:	e7fa      	b.n	8001e0a <uECC_valid_public_key+0x3c>

08001e14 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 8001e14:	78cb      	ldrb	r3, [r1, #3]
 8001e16:	7802      	ldrb	r2, [r0, #0]
 8001e18:	4053      	eors	r3, r2
 8001e1a:	7003      	strb	r3, [r0, #0]
 8001e1c:	884b      	ldrh	r3, [r1, #2]
 8001e1e:	7842      	ldrb	r2, [r0, #1]
 8001e20:	4053      	eors	r3, r2
 8001e22:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8001e24:	680a      	ldr	r2, [r1, #0]
 8001e26:	7883      	ldrb	r3, [r0, #2]
 8001e28:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001e2c:	7083      	strb	r3, [r0, #2]
 8001e2e:	680a      	ldr	r2, [r1, #0]
 8001e30:	78c3      	ldrb	r3, [r0, #3]
 8001e32:	4053      	eors	r3, r2
 8001e34:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 8001e36:	79cb      	ldrb	r3, [r1, #7]
 8001e38:	7902      	ldrb	r2, [r0, #4]
 8001e3a:	4053      	eors	r3, r2
 8001e3c:	7103      	strb	r3, [r0, #4]
 8001e3e:	88cb      	ldrh	r3, [r1, #6]
 8001e40:	7942      	ldrb	r2, [r0, #5]
 8001e42:	4053      	eors	r3, r2
 8001e44:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 8001e46:	684a      	ldr	r2, [r1, #4]
 8001e48:	7983      	ldrb	r3, [r0, #6]
 8001e4a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001e4e:	7183      	strb	r3, [r0, #6]
 8001e50:	684a      	ldr	r2, [r1, #4]
 8001e52:	79c3      	ldrb	r3, [r0, #7]
 8001e54:	4053      	eors	r3, r2
 8001e56:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 8001e58:	7acb      	ldrb	r3, [r1, #11]
 8001e5a:	7a02      	ldrb	r2, [r0, #8]
 8001e5c:	4053      	eors	r3, r2
 8001e5e:	7203      	strb	r3, [r0, #8]
 8001e60:	7a42      	ldrb	r2, [r0, #9]
 8001e62:	894b      	ldrh	r3, [r1, #10]
 8001e64:	4053      	eors	r3, r2
 8001e66:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8001e68:	688a      	ldr	r2, [r1, #8]
 8001e6a:	7a83      	ldrb	r3, [r0, #10]
 8001e6c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001e70:	7283      	strb	r3, [r0, #10]
 8001e72:	688a      	ldr	r2, [r1, #8]
 8001e74:	7ac3      	ldrb	r3, [r0, #11]
 8001e76:	4053      	eors	r3, r2
 8001e78:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 8001e7a:	7bcb      	ldrb	r3, [r1, #15]
 8001e7c:	7b02      	ldrb	r2, [r0, #12]
 8001e7e:	4053      	eors	r3, r2
 8001e80:	7303      	strb	r3, [r0, #12]
 8001e82:	89cb      	ldrh	r3, [r1, #14]
 8001e84:	7b42      	ldrb	r2, [r0, #13]
 8001e86:	4053      	eors	r3, r2
 8001e88:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 8001e8a:	68ca      	ldr	r2, [r1, #12]
 8001e8c:	7b83      	ldrb	r3, [r0, #14]
 8001e8e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001e92:	7383      	strb	r3, [r0, #14]
 8001e94:	68ca      	ldr	r2, [r1, #12]
 8001e96:	7bc3      	ldrb	r3, [r0, #15]
 8001e98:	4053      	eors	r3, r2
 8001e9a:	73c3      	strb	r3, [r0, #15]
 8001e9c:	4770      	bx	lr

08001e9e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
 8001e9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 8001ea0:	7802      	ldrb	r2, [r0, #0]
 8001ea2:	f88d 2000 	strb.w	r2, [sp]
 8001ea6:	7942      	ldrb	r2, [r0, #5]
 8001ea8:	f88d 2001 	strb.w	r2, [sp, #1]
 8001eac:	7a82      	ldrb	r2, [r0, #10]
 8001eae:	f88d 2002 	strb.w	r2, [sp, #2]
 8001eb2:	7bc2      	ldrb	r2, [r0, #15]
 8001eb4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 8001eb8:	7902      	ldrb	r2, [r0, #4]
 8001eba:	f88d 2004 	strb.w	r2, [sp, #4]
 8001ebe:	7a42      	ldrb	r2, [r0, #9]
 8001ec0:	f88d 2005 	strb.w	r2, [sp, #5]
 8001ec4:	7b82      	ldrb	r2, [r0, #14]
 8001ec6:	f88d 2006 	strb.w	r2, [sp, #6]
 8001eca:	78c2      	ldrb	r2, [r0, #3]
 8001ecc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 8001ed0:	7a02      	ldrb	r2, [r0, #8]
 8001ed2:	f88d 2008 	strb.w	r2, [sp, #8]
 8001ed6:	7b42      	ldrb	r2, [r0, #13]
 8001ed8:	f88d 2009 	strb.w	r2, [sp, #9]
 8001edc:	7882      	ldrb	r2, [r0, #2]
 8001ede:	f88d 200a 	strb.w	r2, [sp, #10]
 8001ee2:	79c2      	ldrb	r2, [r0, #7]
 8001ee4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 8001ee8:	7b02      	ldrb	r2, [r0, #12]
 8001eea:	f88d 200c 	strb.w	r2, [sp, #12]
 8001eee:	7842      	ldrb	r2, [r0, #1]
 8001ef0:	f88d 200d 	strb.w	r2, [sp, #13]
 8001ef4:	7ac3      	ldrb	r3, [r0, #11]
 8001ef6:	7982      	ldrb	r2, [r0, #6]
 8001ef8:	f88d 200e 	strb.w	r2, [sp, #14]
 8001efc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8001f00:	2310      	movs	r3, #16
 8001f02:	466a      	mov	r2, sp
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe ff85 	bl	8000e14 <_copy>
}
 8001f0a:	b005      	add	sp, #20
 8001f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f10 <mult_row_column>:
{
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8001f14:	7808      	ldrb	r0, [r1, #0]
{
 8001f16:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8001f18:	f7fe ff8b 	bl	8000e32 <_double_byte>
 8001f1c:	4605      	mov	r5, r0
 8001f1e:	7860      	ldrb	r0, [r4, #1]
 8001f20:	f7fe ff87 	bl	8000e32 <_double_byte>
 8001f24:	78a2      	ldrb	r2, [r4, #2]
 8001f26:	7863      	ldrb	r3, [r4, #1]
 8001f28:	4053      	eors	r3, r2
 8001f2a:	78e2      	ldrb	r2, [r4, #3]
 8001f2c:	4053      	eors	r3, r2
 8001f2e:	405d      	eors	r5, r3
 8001f30:	4045      	eors	r5, r0
 8001f32:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8001f34:	7860      	ldrb	r0, [r4, #1]
 8001f36:	7827      	ldrb	r7, [r4, #0]
 8001f38:	f7fe ff7b 	bl	8000e32 <_double_byte>
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	78a0      	ldrb	r0, [r4, #2]
 8001f40:	f7fe ff77 	bl	8000e32 <_double_byte>
 8001f44:	78a3      	ldrb	r3, [r4, #2]
 8001f46:	405f      	eors	r7, r3
 8001f48:	78e3      	ldrb	r3, [r4, #3]
 8001f4a:	405f      	eors	r7, r3
 8001f4c:	407d      	eors	r5, r7
 8001f4e:	4045      	eors	r5, r0
 8001f50:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8001f52:	78a0      	ldrb	r0, [r4, #2]
 8001f54:	7865      	ldrb	r5, [r4, #1]
 8001f56:	7827      	ldrb	r7, [r4, #0]
 8001f58:	f7fe ff6b 	bl	8000e32 <_double_byte>
 8001f5c:	406f      	eors	r7, r5
 8001f5e:	4605      	mov	r5, r0
 8001f60:	78e0      	ldrb	r0, [r4, #3]
 8001f62:	f7fe ff66 	bl	8000e32 <_double_byte>
 8001f66:	78e3      	ldrb	r3, [r4, #3]
 8001f68:	405f      	eors	r7, r3
 8001f6a:	407d      	eors	r5, r7
 8001f6c:	4045      	eors	r5, r0
 8001f6e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 8001f70:	7820      	ldrb	r0, [r4, #0]
 8001f72:	f7fe ff5e 	bl	8000e32 <_double_byte>
 8001f76:	7863      	ldrb	r3, [r4, #1]
 8001f78:	7825      	ldrb	r5, [r4, #0]
 8001f7a:	405d      	eors	r5, r3
 8001f7c:	78a3      	ldrb	r3, [r4, #2]
 8001f7e:	405d      	eors	r5, r3
 8001f80:	4045      	eors	r5, r0
 8001f82:	78e0      	ldrb	r0, [r4, #3]
 8001f84:	f7fe ff55 	bl	8000e32 <_double_byte>
 8001f88:	b2ed      	uxtb	r5, r5
 8001f8a:	4068      	eors	r0, r5
 8001f8c:	70f0      	strb	r0, [r6, #3]
 8001f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f90 <tc_aes128_set_encrypt_key>:
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
 8001f92:	4e28      	ldr	r6, [pc, #160]	; (8002034 <tc_aes128_set_encrypt_key+0xa4>)
{
 8001f94:	4607      	mov	r7, r0
 8001f96:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
 8001f98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8001f9a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
 8001f9c:	ad01      	add	r5, sp, #4
 8001f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001fa8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
 8001fac:	2f00      	cmp	r7, #0
 8001fae:	d03c      	beq.n	800202a <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d03c      	beq.n	800202e <tc_aes128_set_encrypt_key+0x9e>
 8001fb4:	1f38      	subs	r0, r7, #4
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4602      	mov	r2, r0
 8001fba:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8001fbc:	784b      	ldrb	r3, [r1, #1]
 8001fbe:	780d      	ldrb	r5, [r1, #0]
 8001fc0:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 8001fc2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001fc6:	78cd      	ldrb	r5, [r1, #3]
 8001fc8:	432b      	orrs	r3, r5
 8001fca:	788d      	ldrb	r5, [r1, #2]
 8001fcc:	3104      	adds	r1, #4
 8001fce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
 8001fd2:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8001fd4:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
 8001fd8:	d1f0      	bne.n	8001fbc <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8001fda:	4c17      	ldr	r4, [pc, #92]	; (8002038 <tc_aes128_set_encrypt_key+0xa8>)
 8001fdc:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
 8001fde:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
 8001fe0:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
 8001fe2:	d118      	bne.n	8002016 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
 8001fe4:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8001fe8:	0e1a      	lsrs	r2, r3, #24
 8001fea:	5ca5      	ldrb	r5, [r4, r2]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	5ca2      	ldrb	r2, [r4, r2]
 8001ff0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001ff4:	f3c3 4507 	ubfx	r5, r3, #16, #8
 8001ff8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001ffc:	5d65      	ldrb	r5, [r4, r5]
 8001ffe:	5ce3      	ldrb	r3, [r4, r3]
 8002000:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002004:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002008:	ad0c      	add	r5, sp, #48	; 0x30
 800200a:	f021 0303 	bic.w	r3, r1, #3
 800200e:	442b      	add	r3, r5
 8002010:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002014:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
 8002016:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
 800201a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
 800201c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
 800201e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
 8002020:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
 8002022:	d1dc      	bne.n	8001fde <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
 8002024:	2001      	movs	r0, #1
}
 8002026:	b00d      	add	sp, #52	; 0x34
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800202a:	4638      	mov	r0, r7
 800202c:	e7fb      	b.n	8002026 <tc_aes128_set_encrypt_key+0x96>
 800202e:	4620      	mov	r0, r4
 8002030:	e7f9      	b.n	8002026 <tc_aes128_set_encrypt_key+0x96>
 8002032:	bf00      	nop
 8002034:	08012be8 	.word	0x08012be8
 8002038:	08012ea4 	.word	0x08012ea4

0800203c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
 800203c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002040:	4615      	mov	r5, r2
 8002042:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 8002044:	4680      	mov	r8, r0
 8002046:	2800      	cmp	r0, #0
 8002048:	d05b      	beq.n	8002102 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
 800204a:	2900      	cmp	r1, #0
 800204c:	d05a      	beq.n	8002104 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
 800204e:	2a00      	cmp	r2, #0
 8002050:	d05a      	beq.n	8002108 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 8002052:	2310      	movs	r3, #16
 8002054:	460a      	mov	r2, r1
 8002056:	4668      	mov	r0, sp
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fedb 	bl	8000e14 <_copy>
	add_round_key(state, s->words);
 800205e:	4629      	mov	r1, r5
 8002060:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
 8002062:	4c2a      	ldr	r4, [pc, #168]	; (800210c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
 8002064:	f7ff fed6 	bl	8001e14 <add_round_key>
 8002068:	f105 0710 	add.w	r7, r5, #16
 800206c:	46a1      	mov	r9, r4
 800206e:	35a0      	adds	r5, #160	; 0xa0
{
 8002070:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
 8002072:	f81d 3006 	ldrb.w	r3, [sp, r6]
 8002076:	5ce3      	ldrb	r3, [r4, r3]
 8002078:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
 800207c:	3601      	adds	r6, #1
 800207e:	2e10      	cmp	r6, #16
 8002080:	d1f7      	bne.n	8002072 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
 8002082:	4668      	mov	r0, sp
 8002084:	f7ff ff0b 	bl	8001e9e <shift_rows>
	mult_row_column(t, s);
 8002088:	4669      	mov	r1, sp
 800208a:	a804      	add	r0, sp, #16
 800208c:	f7ff ff40 	bl	8001f10 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
 8002090:	a901      	add	r1, sp, #4
 8002092:	a805      	add	r0, sp, #20
 8002094:	f7ff ff3c 	bl	8001f10 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
 8002098:	a902      	add	r1, sp, #8
 800209a:	a806      	add	r0, sp, #24
 800209c:	f7ff ff38 	bl	8001f10 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
 80020a0:	a903      	add	r1, sp, #12
 80020a2:	a807      	add	r0, sp, #28
 80020a4:	f7ff ff34 	bl	8001f10 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
 80020a8:	4633      	mov	r3, r6
 80020aa:	aa04      	add	r2, sp, #16
 80020ac:	4631      	mov	r1, r6
 80020ae:	4668      	mov	r0, sp
 80020b0:	f7fe feb0 	bl	8000e14 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
 80020b4:	4639      	mov	r1, r7
 80020b6:	4668      	mov	r0, sp
 80020b8:	3710      	adds	r7, #16
 80020ba:	f7ff feab 	bl	8001e14 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
 80020be:	42bd      	cmp	r5, r7
 80020c0:	d1d6      	bne.n	8002070 <tc_aes_encrypt+0x34>
 80020c2:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
 80020c4:	f81d 3006 	ldrb.w	r3, [sp, r6]
 80020c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80020cc:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
 80020d0:	3601      	adds	r6, #1
 80020d2:	2e10      	cmp	r6, #16
 80020d4:	d1f6      	bne.n	80020c4 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
 80020d6:	4668      	mov	r0, sp
 80020d8:	f7ff fee1 	bl	8001e9e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
 80020dc:	4629      	mov	r1, r5
 80020de:	4668      	mov	r0, sp
 80020e0:	f7ff fe98 	bl	8001e14 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
 80020e4:	4633      	mov	r3, r6
 80020e6:	466a      	mov	r2, sp
 80020e8:	4631      	mov	r1, r6
 80020ea:	4640      	mov	r0, r8
 80020ec:	f7fe fe92 	bl	8000e14 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 80020f0:	4668      	mov	r0, sp
 80020f2:	4632      	mov	r2, r6
 80020f4:	2100      	movs	r1, #0
 80020f6:	f7fe fe9a 	bl	8000e2e <_set>

	return TC_CRYPTO_SUCCESS;
 80020fa:	2001      	movs	r0, #1
}
 80020fc:	b009      	add	sp, #36	; 0x24
 80020fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002102:	e7fb      	b.n	80020fc <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
 8002104:	4608      	mov	r0, r1
 8002106:	e7f9      	b.n	80020fc <tc_aes_encrypt+0xc0>
 8002108:	4610      	mov	r0, r2
 800210a:	e7f7      	b.n	80020fc <tc_aes_encrypt+0xc0>
 800210c:	08012ea4 	.word	0x08012ea4

08002110 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
 8002110:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 8002112:	f991 3000 	ldrsb.w	r3, [r1]
 8002116:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
 8002118:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 800211c:	bfb4      	ite	lt
 800211e:	2387      	movlt	r3, #135	; 0x87
 8002120:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
 8002122:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
 8002124:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
 8002126:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
 8002128:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
 800212c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
 8002130:	d003      	beq.n	800213a <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
 8002132:	f812 3901 	ldrb.w	r3, [r2], #-1
 8002136:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
 8002138:	e7f4      	b.n	8002124 <gf_double+0x14>
 800213a:	bd10      	pop	{r4, pc}

0800213c <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
 800213c:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
 800213e:	b128      	cbz	r0, 800214c <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 8002140:	2258      	movs	r2, #88	; 0x58
 8002142:	2100      	movs	r1, #0
 8002144:	f7fe fe73 	bl	8000e2e <_set>

	return TC_CRYPTO_SUCCESS;
 8002148:	2001      	movs	r0, #1
 800214a:	bd08      	pop	{r3, pc}
}
 800214c:	bd08      	pop	{r3, pc}

0800214e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
 800214e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 8002150:	4604      	mov	r4, r0
 8002152:	b190      	cbz	r0, 800217a <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 8002154:	2210      	movs	r2, #16
 8002156:	2100      	movs	r1, #0
 8002158:	f7fe fe69 	bl	8000e2e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
 800215c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002160:	2210      	movs	r2, #16
 8002162:	2100      	movs	r1, #0
 8002164:	f7fe fe63 	bl	8000e2e <_set>
	s->leftover_offset = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002172:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
 8002176:	2001      	movs	r0, #1
 8002178:	bd10      	pop	{r4, pc}
}
 800217a:	bd10      	pop	{r4, pc}

0800217c <tc_cmac_setup>:
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	460d      	mov	r5, r1
 8002180:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
 8002182:	4604      	mov	r4, r0
 8002184:	b318      	cbz	r0, 80021ce <tc_cmac_setup+0x52>
 8002186:	b319      	cbz	r1, 80021d0 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
 8002188:	2258      	movs	r2, #88	; 0x58
 800218a:	2100      	movs	r1, #0
 800218c:	f7fe fe4f 	bl	8000e2e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
 8002190:	4629      	mov	r1, r5
	s->sched = sched;
 8002192:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
 8002194:	4630      	mov	r0, r6
 8002196:	f7ff fefb 	bl	8001f90 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 800219a:	4620      	mov	r0, r4
 800219c:	2210      	movs	r2, #16
 800219e:	2100      	movs	r1, #0
 80021a0:	f7fe fe45 	bl	8000e2e <_set>
	gf_double (s->K1, s->iv);
 80021a4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
 80021a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021aa:	4621      	mov	r1, r4
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff ff45 	bl	800203c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
 80021b2:	4621      	mov	r1, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	f7ff ffab 	bl	8002110 <gf_double>
	gf_double (s->K2, s->K1);
 80021ba:	4629      	mov	r1, r5
 80021bc:	f104 0020 	add.w	r0, r4, #32
 80021c0:	f7ff ffa6 	bl	8002110 <gf_double>
	tc_cmac_init(s);
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff ffc2 	bl	800214e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
 80021ca:	2001      	movs	r0, #1
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 80021d0:	4608      	mov	r0, r1
}
 80021d2:	bd70      	pop	{r4, r5, r6, pc}

080021d4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	460d      	mov	r5, r1
 80021d8:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 80021da:	4604      	mov	r4, r0
 80021dc:	2800      	cmp	r0, #0
 80021de:	d05b      	beq.n	8002298 <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
 80021e0:	b90a      	cbnz	r2, 80021e6 <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
 80021e2:	2001      	movs	r0, #1
 80021e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
 80021e6:	2900      	cmp	r1, #0
 80021e8:	d056      	beq.n	8002298 <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
 80021ea:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
 80021ee:	ea52 0103 	orrs.w	r1, r2, r3
 80021f2:	d051      	beq.n	8002298 <tc_cmac_update+0xc4>
	s->countdown--;
 80021f4:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80021f8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80021fc:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
 8002200:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002202:	b348      	cbz	r0, 8002258 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
 8002204:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
 8002208:	42be      	cmp	r6, r7
 800220a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800220e:	d209      	bcs.n	8002224 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
 8002210:	4633      	mov	r3, r6
 8002212:	4631      	mov	r1, r6
 8002214:	462a      	mov	r2, r5
 8002216:	4420      	add	r0, r4
 8002218:	f7fe fdfc 	bl	8000e14 <_copy>
			s->leftover_offset += data_length;
 800221c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800221e:	441e      	add	r6, r3
		s->leftover_offset = data_length;
 8002220:	6466      	str	r6, [r4, #68]	; 0x44
 8002222:	e7de      	b.n	80021e2 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
 8002224:	463b      	mov	r3, r7
 8002226:	462a      	mov	r2, r5
 8002228:	4639      	mov	r1, r7
 800222a:	4420      	add	r0, r4
 800222c:	f7fe fdf2 	bl	8000e14 <_copy>
		s->leftover_offset = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
 8002234:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
 8002236:	443d      	add	r5, r7
 8002238:	1e63      	subs	r3, r4, #1
 800223a:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
 800223e:	785a      	ldrb	r2, [r3, #1]
 8002240:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8002244:	404a      	eors	r2, r1
 8002246:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 800224a:	4283      	cmp	r3, r0
 800224c:	d1f7      	bne.n	800223e <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 800224e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002250:	4621      	mov	r1, r4
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fef2 	bl	800203c <tc_aes_encrypt>
 8002258:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
 800225c:	2e10      	cmp	r6, #16
 800225e:	d911      	bls.n	8002284 <tc_cmac_update+0xb0>
 8002260:	1e63      	subs	r3, r4, #1
 8002262:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
 8002264:	785a      	ldrb	r2, [r3, #1]
 8002266:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800226a:	4042      	eors	r2, r0
 800226c:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 8002270:	42bb      	cmp	r3, r7
 8002272:	d1f7      	bne.n	8002264 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 8002274:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002276:	4621      	mov	r1, r4
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff fedf 	bl	800203c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
 800227e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
 8002280:	3e10      	subs	r6, #16
 8002282:	e7eb      	b.n	800225c <tc_cmac_update+0x88>
	if (data_length > 0) {
 8002284:	2e00      	cmp	r6, #0
 8002286:	d0ac      	beq.n	80021e2 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
 8002288:	4633      	mov	r3, r6
 800228a:	462a      	mov	r2, r5
 800228c:	4631      	mov	r1, r6
 800228e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002292:	f7fe fdbf 	bl	8000e14 <_copy>
 8002296:	e7c3      	b.n	8002220 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
 8002298:	2000      	movs	r0, #0
}
 800229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800229c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 80022a0:	4605      	mov	r5, r0
 80022a2:	b370      	cbz	r0, 8002302 <tc_cmac_final+0x66>
 80022a4:	b371      	cbz	r1, 8002304 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
 80022a6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 80022a8:	2a10      	cmp	r2, #16
 80022aa:	d11a      	bne.n	80022e2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
 80022ac:	f101 0210 	add.w	r2, r1, #16
 80022b0:	1e61      	subs	r1, r4, #1
 80022b2:	3a01      	subs	r2, #1
 80022b4:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
 80022b8:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
 80022bc:	784b      	ldrb	r3, [r1, #1]
 80022be:	4043      	eors	r3, r0
 80022c0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80022c4:	4043      	eors	r3, r0
 80022c6:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80022ca:	428e      	cmp	r6, r1
 80022cc:	d1f4      	bne.n	80022b8 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
 80022ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022d0:	4621      	mov	r1, r4
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff feb2 	bl	800203c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff ff2f 	bl	800213c <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
 80022de:	2001      	movs	r0, #1
 80022e0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
 80022e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
 80022e6:	2100      	movs	r1, #0
 80022e8:	f1c2 0210 	rsb	r2, r2, #16
 80022ec:	4420      	add	r0, r4
 80022ee:	f7fe fd9e 	bl	8000e2e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
 80022f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f4:	4423      	add	r3, r4
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
 80022fc:	f104 0220 	add.w	r2, r4, #32
 8002300:	e7d6      	b.n	80022b0 <tc_cmac_final+0x14>
 8002302:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002304:	4608      	mov	r0, r1
}
 8002306:	bd70      	pop	{r4, r5, r6, pc}

08002308 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 8002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800230c:	b09d      	sub	sp, #116	; 0x74
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800230e:	6803      	ldr	r3, [r0, #0]
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	6843      	ldr	r3, [r0, #4]
 8002314:	9304      	str	r3, [sp, #16]
 8002316:	6883      	ldr	r3, [r0, #8]
 8002318:	9305      	str	r3, [sp, #20]
 800231a:	68c3      	ldr	r3, [r0, #12]
 800231c:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800231e:	6903      	ldr	r3, [r0, #16]
 8002320:	9307      	str	r3, [sp, #28]
 8002322:	6943      	ldr	r3, [r0, #20]
 8002324:	9308      	str	r3, [sp, #32]
 8002326:	6983      	ldr	r3, [r0, #24]
 8002328:	9309      	str	r3, [sp, #36]	; 0x24
 800232a:	69c3      	ldr	r3, [r0, #28]
 800232c:	930a      	str	r3, [sp, #40]	; 0x28
 800232e:	469e      	mov	lr, r3
 8002330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	f8dd a020 	ldr.w	sl, [sp, #32]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8002338:	9b04      	ldr	r3, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800233a:	9c07      	ldr	r4, [sp, #28]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800233c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8002340:	f8dd b014 	ldr.w	fp, [sp, #20]
 8002344:	9d03      	ldr	r5, [sp, #12]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002346:	f8df c194 	ldr.w	ip, [pc, #404]	; 80024dc <compress+0x1d4>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	3104      	adds	r1, #4
	for (i = 0; i < 16; ++i) {
 800234e:	2200      	movs	r2, #0
	n |= ((unsigned int)(*((*c)++)) << 16);
 8002350:	f811 3c03 	ldrb.w	r3, [r1, #-3]
	n = (((unsigned int)(*((*c)++))) << 24);
 8002354:	f811 6c04 	ldrb.w	r6, [r1, #-4]
	n |= ((unsigned int)(*((*c)++)) << 16);
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
	n |= ((unsigned int)(*((*c)++)));
 800235e:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 8002362:	4333      	orrs	r3, r6
	n |= ((unsigned int)(*((*c)++)) << 8);
 8002364:	f811 6c02 	ldrb.w	r6, [r1, #-2]
	n |= ((unsigned int)(*((*c)++)));
 8002368:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		t1 = work_space[i] = n;
 800236c:	ae0c      	add	r6, sp, #48	; 0x30
	return (((a) >> n) | ((a) << (32 - n)));
 800236e:	ea4f 28f4 	mov.w	r8, r4, ror #11
		t1 = work_space[i] = n;
 8002372:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002376:	9e01      	ldr	r6, [sp, #4]
 8002378:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
 800237c:	ea26 0604 	bic.w	r6, r6, r4
 8002380:	ea04 070a 	and.w	r7, r4, sl
 8002384:	407e      	eors	r6, r7
 8002386:	ea88 6874 	eor.w	r8, r8, r4, ror #25
 800238a:	44b0      	add	r8, r6
 800238c:	f85c 6022 	ldr.w	r6, [ip, r2, lsl #2]
 8002390:	44b0      	add	r8, r6
 8002392:	4443      	add	r3, r8
 8002394:	449e      	add	lr, r3
		t2 = Sigma0(a) + Maj(a, b, c);
 8002396:	9b00      	ldr	r3, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
 8002398:	ea4f 3875 	mov.w	r8, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 800239c:	ea8b 0603 	eor.w	r6, fp, r3
 80023a0:	402e      	ands	r6, r5
 80023a2:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 80023a6:	ea03 030b 	and.w	r3, r3, fp
 80023aa:	4073      	eors	r3, r6
 80023ac:	ea88 58b5 	eor.w	r8, r8, r5, ror #22
	for (i = 0; i < 16; ++i) {
 80023b0:	3201      	adds	r2, #1
		t2 = Sigma0(a) + Maj(a, b, c);
 80023b2:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
 80023b4:	2a10      	cmp	r2, #16
		h = g; g = f; f = e; e = d + t1;
 80023b6:	eb0e 0609 	add.w	r6, lr, r9
		d = c; c = b; b = a; a = t1 + t2;
 80023ba:	4473      	add	r3, lr
 80023bc:	f101 0104 	add.w	r1, r1, #4
 80023c0:	46d9      	mov	r9, fp
 80023c2:	f8dd e004 	ldr.w	lr, [sp, #4]
	for (i = 0; i < 16; ++i) {
 80023c6:	d178      	bne.n	80024ba <compress+0x1b2>
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 80023c8:	1c51      	adds	r1, r2, #1
 80023ca:	af1c      	add	r7, sp, #112	; 0x70
 80023cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80023ce:	f001 010f 	and.w	r1, r1, #15
 80023d2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80023d6:	f002 090f 	and.w	r9, r2, #15
		s0 = work_space[(i+1)&0x0f];
 80023da:	f851 1c40 	ldr.w	r1, [r1, #-64]
 80023de:	9102      	str	r1, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 80023e0:	ea4f 48b1 	mov.w	r8, r1, ror #18
		s0 = sigma0(s0);
 80023e4:	ea88 18f1 	eor.w	r8, r8, r1, ror #7
		s1 = work_space[(i+14)&0x0f];
 80023e8:	f102 010e 	add.w	r1, r2, #14
 80023ec:	f001 010f 	and.w	r1, r1, #15
 80023f0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80023f4:	eb07 0989 	add.w	r9, r7, r9, lsl #2
		s1 = work_space[(i+14)&0x0f];
 80023f8:	f851 ec40 	ldr.w	lr, [r1, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80023fc:	f102 0109 	add.w	r1, r2, #9
 8002400:	f001 010f 	and.w	r1, r1, #15
 8002404:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8002408:	f859 7c40 	ldr.w	r7, [r9, #-64]
 800240c:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8002410:	4439      	add	r1, r7
		s0 = sigma0(s0);
 8002412:	9f02      	ldr	r7, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 8002414:	ea4f 4cfe 	mov.w	ip, lr, ror #19
		s0 = sigma0(s0);
 8002418:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
 800241c:	ea8c 4c7e 	eor.w	ip, ip, lr, ror #17
 8002420:	ea8c 2c9e 	eor.w	ip, ip, lr, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002424:	4441      	add	r1, r8
 8002426:	4461      	add	r1, ip
	return (((a) >> n) | ((a) << (32 - n)));
 8002428:	ea4f 2ef6 	mov.w	lr, r6, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800242c:	4f2b      	ldr	r7, [pc, #172]	; (80024dc <compress+0x1d4>)
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800242e:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002432:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8002436:	ea2a 0906 	bic.w	r9, sl, r6
 800243a:	ea06 0c04 	and.w	ip, r6, r4
 800243e:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8002442:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8002446:	ea89 090c 	eor.w	r9, r9, ip
 800244a:	44f1      	add	r9, lr
 800244c:	4491      	add	r9, r2
 800244e:	9a01      	ldr	r2, [sp, #4]
 8002450:	f8cd a004 	str.w	sl, [sp, #4]
 8002454:	4449      	add	r1, r9
 8002456:	440a      	add	r2, r1
 8002458:	4690      	mov	r8, r2
		t2 = Sigma0(a) + Maj(a, b, c);
 800245a:	9a00      	ldr	r2, [sp, #0]
 800245c:	9900      	ldr	r1, [sp, #0]
 800245e:	406a      	eors	r2, r5
 8002460:	401a      	ands	r2, r3
	return (((a) >> n) | ((a) << (32 - n)));
 8002462:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8002466:	4029      	ands	r1, r5
 8002468:	4051      	eors	r1, r2
 800246a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
 800246e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002470:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
 8002474:	4471      	add	r1, lr
	for ( ; i < 64; ++i) {
 8002476:	2a40      	cmp	r2, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 8002478:	eb08 0e0b 	add.w	lr, r8, fp
		d = c; c = b; b = a; a = t1 + t2;
 800247c:	4441      	add	r1, r8
 800247e:	f8dd b000 	ldr.w	fp, [sp]
	for ( ; i < 64; ++i) {
 8002482:	d123      	bne.n	80024cc <compress+0x1c4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 8002484:	9a03      	ldr	r2, [sp, #12]
 8002486:	440a      	add	r2, r1
 8002488:	6002      	str	r2, [r0, #0]
 800248a:	9a04      	ldr	r2, [sp, #16]
 800248c:	441a      	add	r2, r3
 800248e:	9b05      	ldr	r3, [sp, #20]
 8002490:	6042      	str	r2, [r0, #4]
 8002492:	442b      	add	r3, r5
 8002494:	6083      	str	r3, [r0, #8]
 8002496:	9b06      	ldr	r3, [sp, #24]
 8002498:	445b      	add	r3, fp
 800249a:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 800249c:	9b07      	ldr	r3, [sp, #28]
 800249e:	4473      	add	r3, lr
 80024a0:	6103      	str	r3, [r0, #16]
 80024a2:	9b08      	ldr	r3, [sp, #32]
 80024a4:	4433      	add	r3, r6
 80024a6:	6143      	str	r3, [r0, #20]
 80024a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024aa:	4423      	add	r3, r4
 80024ac:	6183      	str	r3, [r0, #24]
 80024ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024b0:	4453      	add	r3, sl
 80024b2:	61c3      	str	r3, [r0, #28]
}
 80024b4:	b01d      	add	sp, #116	; 0x74
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ba:	f8cd a004 	str.w	sl, [sp, #4]
 80024be:	f8dd b000 	ldr.w	fp, [sp]
 80024c2:	9500      	str	r5, [sp, #0]
 80024c4:	46a2      	mov	sl, r4
		d = c; c = b; b = a; a = t1 + t2;
 80024c6:	461d      	mov	r5, r3
		h = g; g = f; f = e; e = d + t1;
 80024c8:	4634      	mov	r4, r6
 80024ca:	e741      	b.n	8002350 <compress+0x48>
 80024cc:	46a2      	mov	sl, r4
 80024ce:	9500      	str	r5, [sp, #0]
 80024d0:	4634      	mov	r4, r6
 80024d2:	461d      	mov	r5, r3
		h = g; g = f; f = e; e = d + t1;
 80024d4:	4676      	mov	r6, lr
		d = c; c = b; b = a; a = t1 + t2;
 80024d6:	460b      	mov	r3, r1
 80024d8:	e776      	b.n	80023c8 <compress+0xc0>
 80024da:	bf00      	nop
 80024dc:	08012fa4 	.word	0x08012fa4

080024e0 <tc_sha256_init>:
{
 80024e0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 80024e2:	4604      	mov	r4, r0
 80024e4:	b1c0      	cbz	r0, 8002518 <tc_sha256_init+0x38>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 80024e6:	2270      	movs	r2, #112	; 0x70
 80024e8:	2100      	movs	r1, #0
 80024ea:	f7fe fca0 	bl	8000e2e <_set>
	s->iv[3] = 0xa54ff53a;
 80024ee:	480b      	ldr	r0, [pc, #44]	; (800251c <tc_sha256_init+0x3c>)
 80024f0:	490b      	ldr	r1, [pc, #44]	; (8002520 <tc_sha256_init+0x40>)
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <tc_sha256_init+0x44>)
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <tc_sha256_init+0x48>)
 80024f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	s->iv[4] = 0x510e527f;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <tc_sha256_init+0x4c>)
 80024fc:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <tc_sha256_init+0x50>)
 8002500:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <tc_sha256_init+0x54>)
 8002504:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8002506:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800250a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800250e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8002512:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8002514:	2001      	movs	r0, #1
 8002516:	bd10      	pop	{r4, pc}
}
 8002518:	bd10      	pop	{r4, pc}
 800251a:	bf00      	nop
 800251c:	6a09e667 	.word	0x6a09e667
 8002520:	bb67ae85 	.word	0xbb67ae85
 8002524:	3c6ef372 	.word	0x3c6ef372
 8002528:	a54ff53a 	.word	0xa54ff53a
 800252c:	510e527f 	.word	0x510e527f
 8002530:	9b05688c 	.word	0x9b05688c
 8002534:	1f83d9ab 	.word	0x1f83d9ab

08002538 <tc_sha256_update>:
{
 8002538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253c:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 800253e:	4605      	mov	r5, r0
 8002540:	b320      	cbz	r0, 800258c <tc_sha256_update+0x54>
 8002542:	b329      	cbz	r1, 8002590 <tc_sha256_update+0x58>
	} else if (datalen == 0) {
 8002544:	b132      	cbz	r2, 8002554 <tc_sha256_update+0x1c>
 8002546:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
 8002548:	f100 0728 	add.w	r7, r0, #40	; 0x28
			s->leftover_offset = 0;
 800254c:	f04f 0800 	mov.w	r8, #0
	while (datalen-- > 0) {
 8002550:	42b4      	cmp	r4, r6
 8002552:	d102      	bne.n	800255a <tc_sha256_update+0x22>
		return TC_CRYPTO_SUCCESS;
 8002554:	2001      	movs	r0, #1
 8002556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		s->leftover[s->leftover_offset++] = *(data++);
 800255a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	66aa      	str	r2, [r5, #104]	; 0x68
 8002560:	442b      	add	r3, r5
 8002562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002566:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 800256a:	2a3f      	cmp	r2, #63	; 0x3f
 800256c:	d9f0      	bls.n	8002550 <tc_sha256_update+0x18>
			compress(s->iv, s->leftover);
 800256e:	4639      	mov	r1, r7
 8002570:	4628      	mov	r0, r5
 8002572:	f7ff fec9 	bl	8002308 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8002576:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 800257a:	f512 7200 	adds.w	r2, r2, #512	; 0x200
 800257e:	f143 0300 	adc.w	r3, r3, #0
			s->leftover_offset = 0;
 8002582:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 8002586:	e9c5 2308 	strd	r2, r3, [r5, #32]
 800258a:	e7e1      	b.n	8002550 <tc_sha256_update+0x18>
 800258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8002590:	4608      	mov	r0, r1
}
 8002592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002596 <tc_sha256_final>:
{
 8002596:	b570      	push	{r4, r5, r6, lr}
 8002598:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 800259a:	4605      	mov	r5, r0
 800259c:	2800      	cmp	r0, #0
 800259e:	d05f      	beq.n	8002660 <tc_sha256_final+0xca>
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d05e      	beq.n	8002662 <tc_sha256_final+0xcc>
	s->bits_hashed += (s->leftover_offset << 3);
 80025a4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80025a6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80025aa:	00c8      	lsls	r0, r1, #3
 80025ac:	1812      	adds	r2, r2, r0
 80025ae:	f143 0300 	adc.w	r3, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80025b2:	1c48      	adds	r0, r1, #1
 80025b4:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 80025b6:	e9c4 2308 	strd	r2, r3, [r4, #32]
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80025ba:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80025bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80025c0:	66a0      	str	r0, [r4, #104]	; 0x68
 80025c2:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80025c6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80025ca:	d90b      	bls.n	80025e4 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
 80025cc:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80025d0:	2100      	movs	r1, #0
 80025d2:	4430      	add	r0, r6
 80025d4:	f7fe fc2b 	bl	8000e2e <_set>
		compress(s->iv, s->leftover);
 80025d8:	4631      	mov	r1, r6
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fe94 	bl	8002308 <compress>
		s->leftover_offset = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 80025e4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80025e6:	2100      	movs	r1, #0
 80025e8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80025ec:	4430      	add	r0, r6
 80025ee:	f7fe fc1e 	bl	8000e2e <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80025f2:	6a22      	ldr	r2, [r4, #32]
 80025f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025f6:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80025fa:	0a11      	lsrs	r1, r2, #8
 80025fc:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8002600:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 8002602:	0e12      	lsrs	r2, r2, #24
 8002604:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8002608:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 800260a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 800260e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8002612:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8002614:	0e1b      	lsrs	r3, r3, #24
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8002616:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 800261a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 800261e:	4631      	mov	r1, r6
 8002620:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8002622:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 8002626:	f7ff fe6f 	bl	8002308 <compress>
 800262a:	1d2b      	adds	r3, r5, #4
 800262c:	1f21      	subs	r1, r4, #4
 800262e:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8002632:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t);
 8002636:	f803 2c01 	strb.w	r2, [r3, #-1]
		*digest++ = (uint8_t)(t >> 24);
 800263a:	0e15      	lsrs	r5, r2, #24
 800263c:	f803 5c04 	strb.w	r5, [r3, #-4]
		*digest++ = (uint8_t)(t >> 16);
 8002640:	0c15      	lsrs	r5, r2, #16
 8002642:	f803 5c03 	strb.w	r5, [r3, #-3]
		*digest++ = (uint8_t)(t >> 8);
 8002646:	0a15      	lsrs	r5, r2, #8
 8002648:	f803 5c02 	strb.w	r5, [r3, #-2]
 800264c:	3304      	adds	r3, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800264e:	4283      	cmp	r3, r0
 8002650:	d1ef      	bne.n	8002632 <tc_sha256_final+0x9c>
	_set(s, 0, sizeof(*s));
 8002652:	4620      	mov	r0, r4
 8002654:	2270      	movs	r2, #112	; 0x70
 8002656:	2100      	movs	r1, #0
 8002658:	f7fe fbe9 	bl	8000e2e <_set>
	return TC_CRYPTO_SUCCESS;
 800265c:	2001      	movs	r0, #1
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002662:	4608      	mov	r0, r1
}
 8002664:	bd70      	pop	{r4, r5, r6, pc}

08002666 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	1e43      	subs	r3, r0, #1
 800266a:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 800266c:	42a9      	cmp	r1, r5
 800266e:	d106      	bne.n	800267e <rekey+0x18>
 8002670:	4402      	add	r2, r0
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8002672:	2136      	movs	r1, #54	; 0x36
 8002674:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8002676:	1a13      	subs	r3, r2, r0
 8002678:	2b3f      	cmp	r3, #63	; 0x3f
 800267a:	d90d      	bls.n	8002698 <rekey+0x32>
	}
}
 800267c:	bd70      	pop	{r4, r5, r6, pc}
 800267e:	460e      	mov	r6, r1
		key[i] = inner_pad ^ new_key[i];
 8002680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002684:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8002688:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 800268c:	7834      	ldrb	r4, [r6, #0]
 800268e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8002692:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 8002696:	e7e9      	b.n	800266c <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8002698:	f802 1b01 	strb.w	r1, [r2], #1
 800269c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
 80026a0:	e7e9      	b.n	8002676 <rekey+0x10>

080026a2 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 80026a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a6:	b0bc      	sub	sp, #240	; 0xf0
 80026a8:	460e      	mov	r6, r1
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4614      	mov	r4, r2

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 80026ae:	4605      	mov	r5, r0
 80026b0:	b388      	cbz	r0, 8002716 <tc_hmac_set_key+0x74>
 80026b2:	b389      	cbz	r1, 8002718 <tc_hmac_set_key+0x76>
	    key == (const uint8_t *) 0 ||
 80026b4:	b392      	cbz	r2, 800271c <tc_hmac_set_key+0x7a>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 80026b6:	1dd3      	adds	r3, r2, #7
 80026b8:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 80026bc:	2a40      	cmp	r2, #64	; 0x40
	const uint8_t dummy_key[key_size];
 80026be:	ebad 0d03 	sub.w	sp, sp, r3
 80026c2:	f100 0870 	add.w	r8, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 80026c6:	d816      	bhi.n	80026f6 <tc_hmac_set_key+0x54>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 80026c8:	4638      	mov	r0, r7
 80026ca:	f7ff ff09 	bl	80024e0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 80026ce:	4622      	mov	r2, r4
 80026d0:	4669      	mov	r1, sp
 80026d2:	4638      	mov	r0, r7
 80026d4:	f7ff ff30 	bl	8002538 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 80026d8:	4639      	mov	r1, r7
 80026da:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80026de:	f7ff ff5a 	bl	8002596 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 80026e2:	4622      	mov	r2, r4
 80026e4:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 80026e6:	4640      	mov	r0, r8
 80026e8:	f7ff ffbd 	bl	8002666 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 80026ec:	2001      	movs	r0, #1
}
 80026ee:	37f0      	adds	r7, #240	; 0xf0
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 80026f6:	f7ff fef3 	bl	80024e0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 80026fa:	4622      	mov	r2, r4
 80026fc:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 80026fe:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8002702:	4628      	mov	r0, r5
 8002704:	f7ff ff18 	bl	8002538 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8002708:	4629      	mov	r1, r5
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff ff43 	bl	8002596 <tc_sha256_final>
		rekey(ctx->key,
 8002710:	2220      	movs	r2, #32
 8002712:	4621      	mov	r1, r4
 8002714:	e7e7      	b.n	80026e6 <tc_hmac_set_key+0x44>
 8002716:	e7ea      	b.n	80026ee <tc_hmac_set_key+0x4c>
		return TC_CRYPTO_FAIL;
 8002718:	4608      	mov	r0, r1
 800271a:	e7e8      	b.n	80026ee <tc_hmac_set_key+0x4c>
 800271c:	4610      	mov	r0, r2
 800271e:	e7e6      	b.n	80026ee <tc_hmac_set_key+0x4c>

08002720 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8002720:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8002722:	4604      	mov	r4, r0
 8002724:	b148      	cbz	r0, 800273a <tc_hmac_init+0x1a>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 8002726:	f7ff fedb 	bl	80024e0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff01 	bl	8002538 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8002736:	2001      	movs	r0, #1
 8002738:	bd10      	pop	{r4, pc}
}
 800273a:	bd10      	pop	{r4, pc}

0800273c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 800273c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 800273e:	b118      	cbz	r0, 8002748 <tc_hmac_update+0xc>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8002740:	f7ff fefa 	bl	8002538 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8002744:	2001      	movs	r0, #1
 8002746:	bd08      	pop	{r3, pc}
}
 8002748:	bd08      	pop	{r3, pc}

0800274a <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 800274a:	b570      	push	{r4, r5, r6, lr}
 800274c:	460e      	mov	r6, r1
 800274e:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8002750:	4605      	mov	r5, r0
 8002752:	b1f0      	cbz	r0, 8002792 <tc_hmac_final+0x48>
 8002754:	2920      	cmp	r1, #32
 8002756:	d11c      	bne.n	8002792 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 8002758:	b1da      	cbz	r2, 8002792 <tc_hmac_final+0x48>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 800275a:	4611      	mov	r1, r2
 800275c:	f7ff ff1b 	bl	8002596 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff febd 	bl	80024e0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 8002766:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff fee3 	bl	8002538 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8002772:	4632      	mov	r2, r6
 8002774:	4629      	mov	r1, r5
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff fede 	bl	8002538 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 800277c:	4621      	mov	r1, r4
 800277e:	4628      	mov	r0, r5
 8002780:	f7ff ff09 	bl	8002596 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 8002784:	4620      	mov	r0, r4
 8002786:	22f0      	movs	r2, #240	; 0xf0
 8002788:	2100      	movs	r1, #0
 800278a:	f7fe fb50 	bl	8000e2e <_set>

	return TC_CRYPTO_SUCCESS;
 800278e:	2001      	movs	r0, #1
 8002790:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002792:	2000      	movs	r0, #0
 8002794:	bd70      	pop	{r4, r5, r6, pc}

08002796 <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 8002796:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800279a:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
 800279c:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800279e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	const uint8_t separator1 = 0x01;
 80027a2:	2701      	movs	r7, #1
	const uint8_t separator0 = 0x00;
 80027a4:	f88d 3006 	strb.w	r3, [sp, #6]
{
 80027a8:	4688      	mov	r8, r1
 80027aa:	4691      	mov	r9, r2
	const uint8_t separator1 = 0x01;
 80027ac:	f88d 7007 	strb.w	r7, [sp, #7]
	(void)tc_hmac_init(&prng->h);
 80027b0:	f7ff ffb6 	bl	8002720 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80027b4:	4629      	mov	r1, r5
 80027b6:	2220      	movs	r2, #32
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff ffbf 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 80027be:	463a      	mov	r2, r7
 80027c0:	f10d 0106 	add.w	r1, sp, #6
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff ffb9 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 80027ca:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	(void)tc_hmac_update(&prng->h, e, len);
 80027ce:	464a      	mov	r2, r9
 80027d0:	4641      	mov	r1, r8
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff ffb2 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 80027d8:	4622      	mov	r2, r4
 80027da:	2120      	movs	r1, #32
 80027dc:	4630      	mov	r0, r6
 80027de:	f7ff ffb4 	bl	800274a <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 80027e2:	4631      	mov	r1, r6
 80027e4:	2220      	movs	r2, #32
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff ff5b 	bl	80026a2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff ff97 	bl	8002720 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80027f2:	4629      	mov	r1, r5
 80027f4:	2220      	movs	r2, #32
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff ffa0 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 80027fc:	4622      	mov	r2, r4
 80027fe:	2120      	movs	r1, #32
 8002800:	4628      	mov	r0, r5
 8002802:	f7ff ffa2 	bl	800274a <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ff8a 	bl	8002720 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800280c:	4629      	mov	r1, r5
 800280e:	2220      	movs	r2, #32
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff ff93 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8002816:	463a      	mov	r2, r7
 8002818:	f10d 0107 	add.w	r1, sp, #7
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff8d 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8002822:	464a      	mov	r2, r9
 8002824:	4641      	mov	r1, r8
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff ff88 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 800282c:	4622      	mov	r2, r4
 800282e:	2120      	movs	r1, #32
 8002830:	4630      	mov	r0, r6
 8002832:	f7ff ff8a 	bl	800274a <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8002836:	4631      	mov	r1, r6
 8002838:	2220      	movs	r2, #32
 800283a:	4620      	mov	r0, r4
 800283c:	f7ff ff31 	bl	80026a2 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff6d 	bl	8002720 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002846:	4629      	mov	r1, r5
 8002848:	2220      	movs	r2, #32
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ff76 	bl	800273c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8002850:	4622      	mov	r2, r4
 8002852:	2120      	movs	r1, #32
 8002854:	4628      	mov	r0, r5
 8002856:	f7ff ff78 	bl	800274a <tc_hmac_final>
}
 800285a:	b003      	add	sp, #12
 800285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002860 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	460c      	mov	r4, r1
 8002864:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8002866:	4605      	mov	r5, r0
 8002868:	b1e0      	cbz	r0, 80028a4 <tc_hmac_prng_init+0x44>
	    personalization == (uint8_t *) 0 ||
 800286a:	b1e1      	cbz	r1, 80028a6 <tc_hmac_prng_init+0x46>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 800286c:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
 8002870:	4630      	mov	r0, r6
 8002872:	2220      	movs	r2, #32
 8002874:	2100      	movs	r1, #0
 8002876:	f7fe fada 	bl	8000e2e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 800287a:	f505 7088 	add.w	r0, r5, #272	; 0x110
 800287e:	2220      	movs	r2, #32
 8002880:	2101      	movs	r1, #1
 8002882:	f7fe fad4 	bl	8000e2e <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8002886:	4631      	mov	r1, r6
 8002888:	2220      	movs	r2, #32
 800288a:	4628      	mov	r0, r5
 800288c:	f7ff ff09 	bl	80026a2 <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 8002890:	4628      	mov	r0, r5
 8002892:	463a      	mov	r2, r7
 8002894:	4621      	mov	r1, r4
 8002896:	f7ff ff7e 	bl	8002796 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 80028a0:	2001      	movs	r0, #1
 80028a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80028a6:	4608      	mov	r0, r1
}
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028aa <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 80028aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ac:	9c06      	ldr	r4, [sp, #24]
 80028ae:	4696      	mov	lr, r2
 80028b0:	461f      	mov	r7, r3

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 80028b2:	4605      	mov	r5, r0
 80028b4:	b188      	cbz	r0, 80028da <tc_hmac_prng_reseed+0x30>
 80028b6:	b181      	cbz	r1, 80028da <tc_hmac_prng_reseed+0x30>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 80028b8:	2a1f      	cmp	r2, #31
 80028ba:	d90e      	bls.n	80028da <tc_hmac_prng_reseed+0x30>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 80028bc:	b12b      	cbz	r3, 80028ca <tc_hmac_prng_reseed+0x20>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 80028be:	b164      	cbz	r4, 80028da <tc_hmac_prng_reseed+0x30>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 80028c0:	f7ff ff69 	bl	8002796 <update>
		update(prng, additional_input, additionallen);
 80028c4:	4622      	mov	r2, r4
 80028c6:	4639      	mov	r1, r7
 80028c8:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
 80028ca:	f7ff ff64 	bl	8002796 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d2:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 80028d6:	2001      	movs	r0, #1
 80028d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80028da:	2000      	movs	r0, #0
 80028dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028de <tc_hmac_prng_generate>:
}

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 80028de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e2:	460e      	mov	r6, r1
 80028e4:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 80028e6:	4605      	mov	r5, r0
 80028e8:	b388      	cbz	r0, 800294e <tc_hmac_prng_generate+0x70>
 80028ea:	b382      	cbz	r2, 800294e <tc_hmac_prng_generate+0x70>
	    prng == (TCHmacPrng_t) 0 ||
 80028ec:	1e4b      	subs	r3, r1, #1
 80028ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028f2:	d22c      	bcs.n	800294e <tc_hmac_prng_generate+0x70>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 80028f4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 80028f8:	b363      	cbz	r3, 8002954 <tc_hmac_prng_generate+0x76>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002900:	f502 7788 	add.w	r7, r2, #272	; 0x110
		(void)tc_hmac_init(&prng->h);
 8002904:	4620      	mov	r0, r4
 8002906:	f7ff ff0b 	bl	8002720 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800290a:	2220      	movs	r2, #32
 800290c:	4639      	mov	r1, r7
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff ff14 	bl	800273c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8002914:	4622      	mov	r2, r4
 8002916:	2120      	movs	r1, #32
 8002918:	4638      	mov	r0, r7
 800291a:	f7ff ff16 	bl	800274a <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 800291e:	2e20      	cmp	r6, #32
 8002920:	46b0      	mov	r8, r6
 8002922:	bf28      	it	cs
 8002924:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8002928:	4628      	mov	r0, r5
 800292a:	4643      	mov	r3, r8
 800292c:	463a      	mov	r2, r7
 800292e:	4641      	mov	r1, r8
 8002930:	f7fe fa70 	bl	8000e14 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8002934:	2e20      	cmp	r6, #32
		out += bufferlen;
 8002936:	4445      	add	r5, r8
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8002938:	d807      	bhi.n	800294a <tc_hmac_prng_generate+0x6c>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 800293a:	4620      	mov	r0, r4
 800293c:	2220      	movs	r2, #32
 800293e:	4639      	mov	r1, r7
 8002940:	f7ff ff29 	bl	8002796 <update>

	return TC_CRYPTO_SUCCESS;
 8002944:	2001      	movs	r0, #1
 8002946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 800294a:	3e20      	subs	r6, #32
 800294c:	e7da      	b.n	8002904 <tc_hmac_prng_generate+0x26>
		return TC_CRYPTO_FAIL;
 800294e:	2000      	movs	r0, #0
 8002950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_HMAC_PRNG_RESEED_REQ;
 8002954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800295c <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <UTILS_SetFlashLatency.part.0+0x6c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8002966:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800296a:	461a      	mov	r2, r3
 800296c:	d120      	bne.n	80029b0 <UTILS_SetFlashLatency.part.0+0x54>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <UTILS_SetFlashLatency.part.0+0x70>)
 8002970:	4298      	cmp	r0, r3
 8002972:	d81f      	bhi.n	80029b4 <UTILS_SetFlashLatency.part.0+0x58>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <UTILS_SetFlashLatency.part.0+0x74>)
 8002976:	4298      	cmp	r0, r3
 8002978:	bf94      	ite	ls
 800297a:	2300      	movls	r3, #0
 800297c:	2301      	movhi	r3, #1
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8002984:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002988:	d105      	bne.n	8002996 <UTILS_SetFlashLatency.part.0+0x3a>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE3_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <UTILS_SetFlashLatency.part.0+0x70>)
 800298c:	4290      	cmp	r0, r2
 800298e:	d913      	bls.n	80029b8 <UTILS_SetFlashLatency.part.0+0x5c>
      {
        latency = LL_FLASH_LATENCY_2;
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf08      	it	eq
 8002994:	2302      	moveq	r3, #2
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002996:	490f      	ldr	r1, [pc, #60]	; (80029d4 <UTILS_SetFlashLatency.part.0+0x78>)
 8002998:	680a      	ldr	r2, [r1, #0]
 800299a:	f022 020f 	bic.w	r2, r2, #15
 800299e:	431a      	orrs	r2, r3
 80029a0:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80029a2:	6808      	ldr	r0, [r1, #0]
 80029a4:	f000 000f 	and.w	r0, r0, #15
    {
      status = ERROR;
    }
  }
  return status;
}
 80029a8:	1ac3      	subs	r3, r0, r3
 80029aa:	4258      	negs	r0, r3
 80029ac:	4158      	adcs	r0, r3
 80029ae:	4770      	bx	lr
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80029b0:	2300      	movs	r3, #0
 80029b2:	e7e4      	b.n	800297e <UTILS_SetFlashLatency.part.0+0x22>
        latency = LL_FLASH_LATENCY_2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	e7e2      	b.n	800297e <UTILS_SetFlashLatency.part.0+0x22>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <UTILS_SetFlashLatency.part.0+0x74>)
 80029ba:	4290      	cmp	r0, r2
 80029bc:	d9eb      	bls.n	8002996 <UTILS_SetFlashLatency.part.0+0x3a>
          latency = LL_FLASH_LATENCY_1;
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf08      	it	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	e7e7      	b.n	8002996 <UTILS_SetFlashLatency.part.0+0x3a>
 80029c6:	bf00      	nop
 80029c8:	40007000 	.word	0x40007000
 80029cc:	03938700 	.word	0x03938700
 80029d0:	01c9c380 	.word	0x01c9c380
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <UTILS_PLL_IsBusy+0x18>)
 80029da:	6818      	ldr	r0, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80029dc:	681b      	ldr	r3, [r3, #0]
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 80029de:	011b      	lsls	r3, r3, #4
  if(LL_RCC_PLL_IsReady() != 0U)
 80029e0:	bf5a      	itte	pl
 80029e2:	f080 7000 	eorpl.w	r0, r0, #33554432	; 0x2000000
 80029e6:	f3c0 6040 	ubfxpl	r0, r0, #25, #1
 80029ea:	2000      	movmi	r0, #0
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80029f4:	680b      	ldr	r3, [r1, #0]
 80029f6:	4a23      	ldr	r2, [pc, #140]	; (8002a84 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 80029f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80029fc:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80029fe:	4d22      	ldr	r5, [pc, #136]	; (8002a88 <UTILS_EnablePLLAndSwitchSystem+0x94>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002a00:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8002a02:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002a04:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8002a08:	429c      	cmp	r4, r3
{
 8002a0a:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8002a0c:	d827      	bhi.n	8002a5e <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <UTILS_EnablePLLAndSwitchSystem+0x98>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a16:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002a18:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8002a1a:	0192      	lsls	r2, r2, #6
 8002a1c:	d5fc      	bpl.n	8002a18 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	6831      	ldr	r1, [r6, #0]
 8002a22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	f022 0203 	bic.w	r2, r2, #3
 8002a30:	f042 0202 	orr.w	r2, r2, #2
 8002a34:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <UTILS_EnablePLLAndSwitchSystem+0x98>)
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002a3e:	2a08      	cmp	r2, #8
 8002a40:	d1fa      	bne.n	8002a38 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	6871      	ldr	r1, [r6, #4]
 8002a46:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68b1      	ldr	r1, [r6, #8]
 8002a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	e005      	b.n	8002a6a <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = ERROR;
 8002a5e:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 8002a60:	b11c      	cbz	r4, 8002a6a <UTILS_EnablePLLAndSwitchSystem+0x76>
 8002a62:	f7ff ff7b 	bl	800295c <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8002a66:	2801      	cmp	r0, #1
 8002a68:	d0d1      	beq.n	8002a0e <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }
    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d203      	bcs.n	8002a78 <UTILS_EnablePLLAndSwitchSystem+0x84>
    status = ERROR;
 8002a70:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 8002a72:	b12c      	cbz	r4, 8002a80 <UTILS_EnablePLLAndSwitchSystem+0x8c>
 8002a74:	f7ff ff72 	bl	800295c <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d101      	bne.n	8002a80 <UTILS_EnablePLLAndSwitchSystem+0x8c>
  SystemCoreClock = HCLKFrequency;
 8002a7c:	602c      	str	r4, [r5, #0]
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
 8002a82:	bf00      	nop
 8002a84:	080130a4 	.word	0x080130a4
 8002a88:	20005778 	.word	0x20005778
 8002a8c:	40023800 	.word	0x40023800

08002a90 <LL_PLL_ConfigSystemClock_HSE>:
{
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	4604      	mov	r4, r0
 8002a94:	460d      	mov	r5, r1
 8002a96:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8002a98:	f7ff ff9e 	bl	80029d8 <UTILS_PLL_IsBusy>
 8002a9c:	2801      	cmp	r0, #1
 8002a9e:	d136      	bne.n	8002b0e <LL_PLL_ConfigSystemClock_HSE+0x7e>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8002aa0:	6816      	ldr	r6, [r2, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002aa2:	6857      	ldr	r7, [r2, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002aa4:	6893      	ldr	r3, [r2, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8002aa8:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8002aac:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002ab0:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8002ab4:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ab6:	0c18      	lsrs	r0, r3, #16
 8002ab8:	3001      	adds	r0, #1
 8002aba:	0040      	lsls	r0, r0, #1
 8002abc:	fbb4 f0f0 	udiv	r0, r4, r0
 8002ac0:	6814      	ldr	r4, [r2, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8002ac2:	03a4      	lsls	r4, r4, #14
 8002ac4:	d512      	bpl.n	8002aec <LL_PLL_ConfigSystemClock_HSE+0x5c>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002ac6:	4c13      	ldr	r4, [pc, #76]	; (8002b14 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8002aca:	6865      	ldr	r5, [r4, #4]
 8002acc:	402a      	ands	r2, r5
 8002ace:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ad2:	4332      	orrs	r2, r6
 8002ad4:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8002ad8:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002ada:	6862      	ldr	r2, [r4, #4]
 8002adc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	6062      	str	r2, [r4, #4]
}
 8002ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002ae8:	f7ff bf84 	b.w	80029f4 <UTILS_EnablePLLAndSwitchSystem>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002aec:	6814      	ldr	r4, [r2, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8002aee:	2d01      	cmp	r5, #1
 8002af0:	bf0c      	ite	eq
 8002af2:	f444 2480 	orreq.w	r4, r4, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002af6:	f424 2480 	bicne.w	r4, r4, #262144	; 0x40000
 8002afa:	6014      	str	r4, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002afc:	6814      	ldr	r4, [r2, #0]
 8002afe:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002b02:	6014      	str	r4, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002b04:	4c03      	ldr	r4, [pc, #12]	; (8002b14 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8002b06:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8002b08:	0392      	lsls	r2, r2, #14
 8002b0a:	d5fc      	bpl.n	8002b06 <LL_PLL_ConfigSystemClock_HSE+0x76>
 8002b0c:	e7db      	b.n	8002ac6 <LL_PLL_ConfigSystemClock_HSE+0x36>
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	ffbf8000 	.word	0xffbf8000

08002b1c <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
 8002b1c:	f04f 0310 	mov.w	r3, #16
 8002b20:	f3ef 8111 	mrs	r1, BASEPRI
 8002b24:	f383 8811 	msr	BASEPRI, r3
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <st_stm32f4_init+0x24>)
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8002b32:	f381 8811 	msr	BASEPRI, r1
	irq_unlock(key);

#ifdef CONFIG_CLOCK_CONTROL_STM32_CUBE
	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, System core clock is set to 4MHz */
	SystemCoreClock = 4000000;
 8002b36:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <st_stm32f4_init+0x28>)
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <st_stm32f4_init+0x2c>)
 8002b3a:	601a      	str	r2, [r3, #0]
	/* Update CMSIS SystemCoreClock variable (HCLK) */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
#endif /* CONFIG_CLOCK_CONTROL_STM32_CUBE */

	return 0;
}
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	20005778 	.word	0x20005778
 8002b48:	003d0900 	.word	0x003d0900

08002b4c <stm32_gpio_flags_to_conf>:
#include <gpio/gpio_stm32.h>


int stm32_gpio_flags_to_conf(int flags, int *pincfg)
{
	int direction = flags & GPIO_DIR_MASK;
 8002b4c:	f000 0301 	and.w	r3, r0, #1
	int pud = flags & GPIO_PUD_MASK;

	if (!pincfg) {
 8002b50:	b1b1      	cbz	r1, 8002b80 <stm32_gpio_flags_to_conf+0x34>
		return -EINVAL;
	}

	if (direction == GPIO_DIR_OUT) {
 8002b52:	b123      	cbz	r3, 8002b5e <stm32_gpio_flags_to_conf+0x12>
		*pincfg = STM32_MODER_OUTPUT_MODE;
 8002b54:	2310      	movs	r3, #16
 8002b56:	600b      	str	r3, [r1, #0]
			/* floating */
			*pincfg = *pincfg | STM32_PUPDR_NO_PULL;
		}
	}

	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8002b5e:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8002b62:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002b66:	d103      	bne.n	8002b70 <stm32_gpio_flags_to_conf+0x24>
			*pincfg = *pincfg | STM32_PUPDR_PULL_UP;
 8002b68:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002b6c:	600a      	str	r2, [r1, #0]
 8002b6e:	e7f4      	b.n	8002b5a <stm32_gpio_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8002b70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002b74:	d001      	beq.n	8002b7a <stm32_gpio_flags_to_conf+0x2e>
		*pincfg = STM32_MODER_INPUT_MODE;
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e7ef      	b.n	8002b5a <stm32_gpio_flags_to_conf+0xe>
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7e:	e7f5      	b.n	8002b6c <stm32_gpio_flags_to_conf+0x20>
		return -EINVAL;
 8002b80:	f06f 0315 	mvn.w	r3, #21
 8002b84:	e7e9      	b.n	8002b5a <stm32_gpio_flags_to_conf+0xe>

08002b86 <stm32_gpio_configure>:

int stm32_gpio_configure(u32_t *base_addr, int pin, int conf, int altf)
{
 8002b86:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile struct stm32f4x_gpio *gpio =
		(struct stm32f4x_gpio *)(base_addr);
	unsigned int mode, otype, ospeed, pupd;
	unsigned int pin_shift = pin << 1;
	unsigned int afr_bank = pin / 8;
	unsigned int afr_shift = (pin % 8) << 2;
 8002b88:	424c      	negs	r4, r1
 8002b8a:	f004 0407 	and.w	r4, r4, #7
	unsigned int pin_shift = pin << 1;
 8002b8e:	ea4f 0741 	mov.w	r7, r1, lsl #1
	unsigned int afr_shift = (pin % 8) << 2;
 8002b92:	f001 0507 	and.w	r5, r1, #7
 8002b96:	bf58      	it	pl
 8002b98:	4265      	negpl	r5, r4
	mode = (conf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
	otype = (conf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
	ospeed = (conf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
	pupd = (conf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;

	scratch = gpio->mode & ~(STM32_MODER_MASK << pin_shift);
 8002b9a:	2403      	movs	r4, #3
 8002b9c:	f8d0 e000 	ldr.w	lr, [r0]
 8002ba0:	40bc      	lsls	r4, r7
 8002ba2:	43e4      	mvns	r4, r4
	mode = (conf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
 8002ba4:	f3c2 1601 	ubfx	r6, r2, #4, #2
	scratch = gpio->mode & ~(STM32_MODER_MASK << pin_shift);
 8002ba8:	ea0e 0e04 	and.w	lr, lr, r4
	gpio->mode = scratch | (mode << pin_shift);
 8002bac:	40be      	lsls	r6, r7
 8002bae:	ea46 060e 	orr.w	r6, r6, lr
 8002bb2:	6006      	str	r6, [r0, #0]

	scratch = gpio->ospeed & ~(STM32_OSPEEDR_MASK << pin_shift);
 8002bb4:	f8d0 e008 	ldr.w	lr, [r0, #8]
	ospeed = (conf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
 8002bb8:	f3c2 16c1 	ubfx	r6, r2, #7, #2
	scratch = gpio->ospeed & ~(STM32_OSPEEDR_MASK << pin_shift);
 8002bbc:	ea04 0e0e 	and.w	lr, r4, lr
	gpio->ospeed = scratch | (ospeed << pin_shift);
 8002bc0:	40be      	lsls	r6, r7
 8002bc2:	ea46 060e 	orr.w	r6, r6, lr
 8002bc6:	6086      	str	r6, [r0, #8]

	scratch = gpio->otype & ~(STM32_OTYPER_MASK << pin);
 8002bc8:	6846      	ldr	r6, [r0, #4]
 8002bca:	f04f 0e01 	mov.w	lr, #1
 8002bce:	fa0e fe01 	lsl.w	lr, lr, r1
 8002bd2:	ea26 060e 	bic.w	r6, r6, lr
	otype = (conf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
 8002bd6:	f3c2 1e80 	ubfx	lr, r2, #6, #1
	gpio->otype = scratch | (otype << pin);
 8002bda:	fa0e fe01 	lsl.w	lr, lr, r1
 8002bde:	ea46 060e 	orr.w	r6, r6, lr
 8002be2:	6046      	str	r6, [r0, #4]

	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8002be4:	68c6      	ldr	r6, [r0, #12]
	pupd = (conf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;
 8002be6:	f3c2 2241 	ubfx	r2, r2, #9, #2
	gpio->pupdr = scratch | (pupd << pin_shift);
 8002bea:	40ba      	lsls	r2, r7
	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8002bec:	4034      	ands	r4, r6
	gpio->pupdr = scratch | (pupd << pin_shift);
 8002bee:	4322      	orrs	r2, r4
 8002bf0:	60c2      	str	r2, [r0, #12]
	unsigned int afr_bank = pin / 8;
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	fb91 f1f2 	sdiv	r1, r1, r2
 8002bf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	unsigned int afr_shift = (pin % 8) << 2;
 8002bfc:	00ad      	lsls	r5, r5, #2

	scratch = gpio->afr[afr_bank] & ~(STM32_AFR_MASK << afr_shift);
 8002bfe:	6a02      	ldr	r2, [r0, #32]
 8002c00:	210f      	movs	r1, #15
 8002c02:	40a9      	lsls	r1, r5
 8002c04:	ea22 0201 	bic.w	r2, r2, r1
	gpio->afr[afr_bank] = scratch | (altf << afr_shift);
 8002c08:	40ab      	lsls	r3, r5
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6202      	str	r2, [r0, #32]

	return 0;
}
 8002c0e:	2000      	movs	r0, #0
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c12 <stm32_gpio_set>:

int stm32_gpio_set(u32_t *base, int pin, int value)
{
 8002c12:	f001 010f 	and.w	r1, r1, #15
 8002c16:	2301      	movs	r3, #1
	struct stm32f4x_gpio *gpio = (struct stm32f4x_gpio *)base;

	if (value) {
 8002c18:	b11a      	cbz	r2, 8002c22 <stm32_gpio_set+0x10>
		/* atomic set */
		gpio->bsr = (1 << (pin & 0x0f));
	} else {
		/* atomic reset */
		gpio->bsr = (1 << ((pin & 0x0f) + 0x10));
 8002c1a:	408b      	lsls	r3, r1
 8002c1c:	6183      	str	r3, [r0, #24]
	}

	return 0;
}
 8002c1e:	2000      	movs	r0, #0
 8002c20:	4770      	bx	lr
		gpio->bsr = (1 << ((pin & 0x0f) + 0x10));
 8002c22:	3110      	adds	r1, #16
 8002c24:	e7f9      	b.n	8002c1a <stm32_gpio_set+0x8>

08002c26 <stm32_gpio_get>:

int stm32_gpio_get(u32_t *base, int pin)
{
	struct stm32f4x_gpio *gpio = (struct stm32f4x_gpio *)base;

	return (gpio->idr >> pin) & 0x1;
 8002c26:	6900      	ldr	r0, [r0, #16]
 8002c28:	40c8      	lsrs	r0, r1
}
 8002c2a:	f000 0001 	and.w	r0, r0, #1
 8002c2e:	4770      	bx	lr

08002c30 <stm32_gpio_enable_int>:

int stm32_gpio_enable_int(int port, int pin)
{
 8002c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c32:	4605      	mov	r5, r0
	volatile struct stm32f4x_syscfg *syscfg =
		(struct stm32f4x_syscfg *)SYSCFG_BASE;
	volatile union syscfg_exticr *exticr;
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002c34:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <stm32_gpio_enable_int+0x70>)
{
 8002c36:	460c      	mov	r4, r1
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002c38:	f00e fd26 	bl	8011688 <device_get_binding>
	struct stm32_pclken pclken = {
 8002c3c:	4919      	ldr	r1, [pc, #100]	; (8002ca4 <stm32_gpio_enable_int+0x74>)
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002c3e:	4602      	mov	r2, r0
	struct stm32_pclken pclken = {
 8002c40:	c903      	ldmia	r1, {r0, r1}
 8002c42:	e88d 0003 	stmia.w	sp, {r0, r1}
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
 8002c46:	6851      	ldr	r1, [r2, #4]
 8002c48:	4610      	mov	r0, r2
 8002c4a:	680e      	ldr	r6, [r1, #0]
 8002c4c:	4669      	mov	r1, sp
 8002c4e:	47b0      	blx	r6
	int shift = 0;

	/* Enable SYSCFG clock */
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);

	if (pin <= 3) {
 8002c50:	2c03      	cmp	r4, #3
 8002c52:	dc16      	bgt.n	8002c82 <stm32_gpio_enable_int+0x52>
		exticr = &syscfg->exticr1;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <stm32_gpio_enable_int+0x78>)
		exticr = &syscfg->exticr4;
	} else {
		return -EINVAL;
	}

	shift = 4 * (pin % 4);
 8002c56:	4262      	negs	r2, r4
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	f004 0403 	and.w	r4, r4, #3
 8002c60:	bf58      	it	pl
 8002c62:	4254      	negpl	r4, r2
 8002c64:	00a4      	lsls	r4, r4, #2

	exticr->val &= ~(0xf << shift);
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	210f      	movs	r1, #15
 8002c6a:	40a1      	lsls	r1, r4
 8002c6c:	ea22 0201 	bic.w	r2, r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
	exticr->val |= port << shift;
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	fa05 f404 	lsl.w	r4, r5, r4
 8002c78:	4314      	orrs	r4, r2
 8002c7a:	601c      	str	r4, [r3, #0]

	return 0;
 8002c7c:	2000      	movs	r0, #0
}
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pin <= 7) {
 8002c82:	2c07      	cmp	r4, #7
 8002c84:	dc01      	bgt.n	8002c8a <stm32_gpio_enable_int+0x5a>
		exticr = &syscfg->exticr2;
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <stm32_gpio_enable_int+0x7c>)
 8002c88:	e7e5      	b.n	8002c56 <stm32_gpio_enable_int+0x26>
	} else if (pin <= 11) {
 8002c8a:	2c0b      	cmp	r4, #11
 8002c8c:	dc01      	bgt.n	8002c92 <stm32_gpio_enable_int+0x62>
		exticr = &syscfg->exticr3;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <stm32_gpio_enable_int+0x80>)
 8002c90:	e7e1      	b.n	8002c56 <stm32_gpio_enable_int+0x26>
	} else if (pin <= 15) {
 8002c92:	2c0f      	cmp	r4, #15
 8002c94:	dc01      	bgt.n	8002c9a <stm32_gpio_enable_int+0x6a>
		exticr = &syscfg->exticr4;
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <stm32_gpio_enable_int+0x84>)
 8002c98:	e7dd      	b.n	8002c56 <stm32_gpio_enable_int+0x26>
		return -EINVAL;
 8002c9a:	f06f 0015 	mvn.w	r0, #21
 8002c9e:	e7ee      	b.n	8002c7e <stm32_gpio_enable_int+0x4e>
 8002ca0:	080130b4 	.word	0x080130b4
 8002ca4:	08012c14 	.word	0x08012c14
 8002ca8:	40013808 	.word	0x40013808
 8002cac:	4001380c 	.word	0x4001380c
 8002cb0:	40013810 	.word	0x40013810
 8002cb4:	40013814 	.word	0x40013814

08002cb8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8002cba:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
 8002cbc:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
 8002cbe:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
 8002cc0:	d80b      	bhi.n	8002cda <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
 8002cc2:	6940      	ldr	r0, [r0, #20]
    cmp r0, r1
 8002cc4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8002cc6:	d008      	beq.n	8002cda <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
 8002cc8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
 8002cca:	f00f f823 	bl	8011d14 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
 8002cce:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002cd2:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8002cd8:	600a      	str	r2, [r1, #0]

08002cda <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
 8002cda:	4770      	bx	lr
    ldr r0, =_kernel
 8002cdc:	20001358 	.word	0x20001358
    ldr r1, =_SCS_ICSR
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <_IntLibInit>:
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2110      	movs	r1, #16
 8002cea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002cec:	3301      	adds	r3, #1
 8002cee:	2b55      	cmp	r3, #85	; 0x55
 8002cf0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002cf4:	d1f9      	bne.n	8002cea <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002cfe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002d00:	2028      	movs	r0, #40	; 0x28
    add r0, r2
 8002d02:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 8002d04:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
 8002d08:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 8002d0c:	4f0b      	ldr	r7, [pc, #44]	; (8002d3c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002d0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002d12:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002d14:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
 8002d18:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8002d1a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 8002d1c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002d1e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
 8002d20:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002d22:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002d24:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002d28:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8002d2c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
 8002d30:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
 8002d34:	4770      	bx	lr
 8002d36:	0000      	.short	0x0000
    ldr r1, =_kernel
 8002d38:	20001358 	.word	0x20001358
    ldr v4, =_SCS_ICSR
 8002d3c:	e000ed04 	.word	0xe000ed04

08002d40 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
 8002d40:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002d44:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8002d46:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002d4a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002d4e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
 8002d50:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 8002d54:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
 8002d58:	d001      	beq.n	8002d5e <_context_switch>

    cmp r1, #2
 8002d5a:	2902      	cmp	r1, #2
    beq _oops
 8002d5c:	d007      	beq.n	8002d6e <_oops>

08002d5e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
 8002d5e:	4040      	eors	r0, r0
    msr BASEPRI, r0
 8002d60:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
 8002d6a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
 8002d6c:	4770      	bx	lr

08002d6e <_oops>:

_oops:
    push {lr}
 8002d6e:	b500      	push	{lr}
    blx _do_kernel_oops
 8002d70:	f000 f9fc 	bl	800316c <_do_kernel_oops>
    pop {pc}
 8002d74:	bd00      	pop	{pc}
 8002d76:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002d7e:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
 8002d80:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
 8002d82:	4904      	ldr	r1, [pc, #16]	; (8002d94 <__swap+0x18>)
    ldr r1, [r1]
 8002d84:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
 8002d86:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
 8002d88:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
 8002d8a:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
 8002d8c:	4770      	bx	lr
 8002d8e:	0000      	.short	0x0000
    ldr r1, =_kernel
 8002d90:	20001358 	.word	0x20001358
    ldr r1, =_k_neg_eagain
 8002d94:	08013d10 	.word	0x08013d10

08002d98 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
 8002d9c:	f00e ff90 	bl	8011cc0 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
 8002da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
 8002da8:	4801      	ldr	r0, [pc, #4]	; (8002db0 <_FaultThreadShow.isra.2+0x18>)
 8002daa:	f7fe b825 	b.w	8000df8 <printk>
 8002dae:	bf00      	nop
 8002db0:	0801321d 	.word	0x0801321d

08002db4 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
 8002db8:	481a      	ldr	r0, [pc, #104]	; (8002e24 <_UsageFault+0x70>)
 8002dba:	f7fe f81d 	bl	8000df8 <printk>

	_FaultThreadShow(esf);
 8002dbe:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
 8002dc2:	4c19      	ldr	r4, [pc, #100]	; (8002e28 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
 8002dc4:	f7ff ffe8 	bl	8002d98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
 8002dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dca:	019a      	lsls	r2, r3, #6
 8002dcc:	d502      	bpl.n	8002dd4 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
 8002dce:	4817      	ldr	r0, [pc, #92]	; (8002e2c <_UsageFault+0x78>)
 8002dd0:	f7fe f812 	bl	8000df8 <printk>
	}
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
 8002dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dd6:	01db      	lsls	r3, r3, #7
 8002dd8:	d502      	bpl.n	8002de0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
 8002dda:	4815      	ldr	r0, [pc, #84]	; (8002e30 <_UsageFault+0x7c>)
 8002ddc:	f7fe f80c 	bl	8000df8 <printk>
	}
	if (SCB->CFSR & CFSR_NOCP_Msk) {
 8002de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002de2:	0318      	lsls	r0, r3, #12
 8002de4:	d502      	bpl.n	8002dec <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
 8002de6:	4813      	ldr	r0, [pc, #76]	; (8002e34 <_UsageFault+0x80>)
 8002de8:	f7fe f806 	bl	8000df8 <printk>
	}
	if (SCB->CFSR & CFSR_INVPC_Msk) {
 8002dec:	4c0e      	ldr	r4, [pc, #56]	; (8002e28 <_UsageFault+0x74>)
 8002dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002df0:	0359      	lsls	r1, r3, #13
 8002df2:	d502      	bpl.n	8002dfa <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
 8002df4:	4810      	ldr	r0, [pc, #64]	; (8002e38 <_UsageFault+0x84>)
 8002df6:	f7fd ffff 	bl	8000df8 <printk>
	}
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
 8002dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dfc:	039a      	lsls	r2, r3, #14
 8002dfe:	d502      	bpl.n	8002e06 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
 8002e00:	480e      	ldr	r0, [pc, #56]	; (8002e3c <_UsageFault+0x88>)
 8002e02:	f7fd fff9 	bl	8000df8 <printk>
	}
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
 8002e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e08:	03db      	lsls	r3, r3, #15
 8002e0a:	d502      	bpl.n	8002e12 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <_UsageFault+0x8c>)
 8002e0e:	f7fd fff3 	bl	8000df8 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <_UsageFault+0x74>)
 8002e14:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002e16:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002e1a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002e1e:	6293      	str	r3, [r2, #40]	; 0x28
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	bf00      	nop
 8002e24:	080132ee 	.word	0x080132ee
 8002e28:	e000ed00 	.word	0xe000ed00
 8002e2c:	08013307 	.word	0x08013307
 8002e30:	0801331b 	.word	0x0801331b
 8002e34:	08013336 	.word	0x08013336
 8002e38:	08013355 	.word	0x08013355
 8002e3c:	0801337b 	.word	0x0801337b
 8002e40:	08013396 	.word	0x08013396

08002e44 <_MpuFault>:
{
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
 8002e48:	4817      	ldr	r0, [pc, #92]	; (8002ea8 <_MpuFault+0x64>)
{
 8002e4a:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
 8002e4c:	f7fd ffd4 	bl	8000df8 <printk>
	_FaultThreadShow(esf);
 8002e50:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
 8002e54:	4c15      	ldr	r4, [pc, #84]	; (8002eac <_MpuFault+0x68>)
	_FaultThreadShow(esf);
 8002e56:	f7ff ff9f 	bl	8002d98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
 8002e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e5c:	06db      	lsls	r3, r3, #27
 8002e5e:	d504      	bpl.n	8002e6a <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
 8002e60:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <_MpuFault+0x6c>)
}
 8002e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction Access Violation\n");
 8002e66:	f7fd bfc7 	b.w	8000df8 <printk>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
 8002e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e6c:	0718      	lsls	r0, r3, #28
 8002e6e:	d501      	bpl.n	8002e74 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
 8002e70:	4810      	ldr	r0, [pc, #64]	; (8002eb4 <_MpuFault+0x70>)
 8002e72:	e7f6      	b.n	8002e62 <_MpuFault+0x1e>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
 8002e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e76:	0799      	lsls	r1, r3, #30
 8002e78:	d50f      	bpl.n	8002e9a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
 8002e7a:	480f      	ldr	r0, [pc, #60]	; (8002eb8 <_MpuFault+0x74>)
 8002e7c:	f7fd ffbc 	bl	8000df8 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
 8002e80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e82:	061a      	lsls	r2, r3, #24
 8002e84:	d50e      	bpl.n	8002ea4 <_MpuFault+0x60>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
 8002e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <_MpuFault+0x78>)
 8002e8a:	f7fd ffb5 	bl	8000df8 <printk>
			if (fromHardFault) {
 8002e8e:	b14d      	cbz	r5, 8002ea4 <_MpuFault+0x60>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
 8002e90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
 8002e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e9c:	07db      	lsls	r3, r3, #31
 8002e9e:	d501      	bpl.n	8002ea4 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
 8002ea0:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <_MpuFault+0x7c>)
 8002ea2:	e7de      	b.n	8002e62 <_MpuFault+0x1e>
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	08013267 	.word	0x08013267
 8002eac:	e000ed00 	.word	0xe000ed00
 8002eb0:	0801327e 	.word	0x0801327e
 8002eb4:	08013290 	.word	0x08013290
 8002eb8:	080132a4 	.word	0x080132a4
 8002ebc:	080132bd 	.word	0x080132bd
 8002ec0:	080132ce 	.word	0x080132ce

08002ec4 <_BusFault>:
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
 8002ec8:	481b      	ldr	r0, [pc, #108]	; (8002f38 <_BusFault+0x74>)
{
 8002eca:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
 8002ecc:	f7fd ff94 	bl	8000df8 <printk>
	_FaultThreadShow(esf);
 8002ed0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_STKERR_Msk) {
 8002ed4:	4c19      	ldr	r4, [pc, #100]	; (8002f3c <_BusFault+0x78>)
	_FaultThreadShow(esf);
 8002ed6:	f7ff ff5f 	bl	8002d98 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
 8002eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002edc:	04d9      	lsls	r1, r3, #19
 8002ede:	d504      	bpl.n	8002eea <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
 8002ee0:	4817      	ldr	r0, [pc, #92]	; (8002f40 <_BusFault+0x7c>)
}
 8002ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction bus error\n");
 8002ee6:	f7fd bf87 	b.w	8000df8 <printk>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
 8002eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eec:	051a      	lsls	r2, r3, #20
 8002eee:	d501      	bpl.n	8002ef4 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
 8002ef0:	4814      	ldr	r0, [pc, #80]	; (8002f44 <_BusFault+0x80>)
 8002ef2:	e7f6      	b.n	8002ee2 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
 8002ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ef6:	059b      	lsls	r3, r3, #22
 8002ef8:	d514      	bpl.n	8002f24 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
 8002efa:	4813      	ldr	r0, [pc, #76]	; (8002f48 <_BusFault+0x84>)
 8002efc:	f7fd ff7c 	bl	8000df8 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
 8002f00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f02:	0418      	lsls	r0, r3, #16
 8002f04:	d508      	bpl.n	8002f18 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
 8002f06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f08:	4810      	ldr	r0, [pc, #64]	; (8002f4c <_BusFault+0x88>)
 8002f0a:	f7fd ff75 	bl	8000df8 <printk>
			if (fromHardFault) {
 8002f0e:	b11d      	cbz	r5, 8002f18 <_BusFault+0x54>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
 8002f10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f16:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <_BusFault+0x78>)
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	0559      	lsls	r1, r3, #21
 8002f1e:	d509      	bpl.n	8002f34 <_BusFault+0x70>
			PR_EXC("  Imprecise data bus error\n");
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <_BusFault+0x8c>)
 8002f22:	e7de      	b.n	8002ee2 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
 8002f24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f26:	055a      	lsls	r2, r3, #21
 8002f28:	d4fa      	bmi.n	8002f20 <_BusFault+0x5c>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
 8002f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f2c:	05db      	lsls	r3, r3, #23
 8002f2e:	d501      	bpl.n	8002f34 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
 8002f30:	4808      	ldr	r0, [pc, #32]	; (8002f54 <_BusFault+0x90>)
 8002f32:	e7d6      	b.n	8002ee2 <_BusFault+0x1e>
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
 8002f36:	bf00      	nop
 8002f38:	080130e4 	.word	0x080130e4
 8002f3c:	e000ed00 	.word	0xe000ed00
 8002f40:	0801327e 	.word	0x0801327e
 8002f44:	08013290 	.word	0x08013290
 8002f48:	080130fb 	.word	0x080130fb
 8002f4c:	080132bd 	.word	0x080132bd
 8002f50:	08013115 	.word	0x08013115
 8002f54:	08013131 	.word	0x08013131

08002f58 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
 8002f58:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002f5a:	4d27      	ldr	r5, [pc, #156]	; (8002ff8 <_Fault+0xa0>)
 8002f5c:	686b      	ldr	r3, [r5, #4]
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
 8002f62:	1eda      	subs	r2, r3, #3
{
 8002f64:	4604      	mov	r4, r0
	switch (fault) {
 8002f66:	2a09      	cmp	r2, #9
 8002f68:	d83a      	bhi.n	8002fe0 <_Fault+0x88>
 8002f6a:	e8df f002 	tbb	[pc, r2]
 8002f6e:	3305      	.short	0x3305
 8002f70:	39392f35 	.word	0x39392f35
 8002f74:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
 8002f78:	4820      	ldr	r0, [pc, #128]	; (8002ffc <_Fault+0xa4>)
 8002f7a:	f7fd ff3d 	bl	8000df8 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
 8002f7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f80:	079a      	lsls	r2, r3, #30
 8002f82:	d503      	bpl.n	8002f8c <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
 8002f84:	481e      	ldr	r0, [pc, #120]	; (8003000 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
 8002f86:	f7fd ff37 	bl	8000df8 <printk>
 8002f8a:	e00c      	b.n	8002fa6 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
 8002f8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	d509      	bpl.n	8002fa6 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
 8002f92:	481c      	ldr	r0, [pc, #112]	; (8003004 <_Fault+0xac>)
 8002f94:	f7fd ff30 	bl	8000df8 <printk>
		if (SCB_MMFSR) {
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <_Fault+0xb0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b14b      	cbz	r3, 8002fb2 <_Fault+0x5a>
			_MpuFault(esf, 1);
 8002f9e:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff ff4f 	bl	8002e44 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	2000      	movs	r0, #0
}
 8002faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
 8002fae:	f000 b8e1 	b.w	8003174 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <_Fault+0xb4>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b123      	cbz	r3, 8002fc2 <_Fault+0x6a>
			_BusFault(esf, 1);
 8002fb8:	2101      	movs	r1, #1
		_BusFault(esf, 0);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ff82 	bl	8002ec4 <_BusFault>
 8002fc0:	e7f1      	b.n	8002fa6 <_Fault+0x4e>
		} else if (SCB_UFSR) {
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_Fault+0xb8>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ec      	beq.n	8002fa6 <_Fault+0x4e>
		_UsageFault(esf);
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff fef1 	bl	8002db4 <_UsageFault>
 8002fd2:	e7e8      	b.n	8002fa6 <_Fault+0x4e>
		_MpuFault(esf, 0);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	e7e3      	b.n	8002fa0 <_Fault+0x48>
		_BusFault(esf, 0);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	e7ee      	b.n	8002fba <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <_Fault+0xbc>)
 8002fde:	e7d2      	b.n	8002f86 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <_Fault+0xc0>)
 8002fe2:	490e      	ldr	r1, [pc, #56]	; (800301c <_Fault+0xc4>)
 8002fe4:	f1a3 0210 	sub.w	r2, r3, #16
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	bfd8      	it	le
 8002fec:	4601      	movle	r1, r0
 8002fee:	480c      	ldr	r0, [pc, #48]	; (8003020 <_Fault+0xc8>)
 8002ff0:	f7fd ff02 	bl	8000df8 <printk>
 8002ff4:	e7d7      	b.n	8002fa6 <_Fault+0x4e>
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00
 8002ffc:	08013178 	.word	0x08013178
 8003000:	08013190 	.word	0x08013190
 8003004:	080131b2 	.word	0x080131b2
 8003008:	e000ed28 	.word	0xe000ed28
 800300c:	e000ed29 	.word	0xe000ed29
 8003010:	e000ed2c 	.word	0xe000ed2c
 8003014:	080131d2 	.word	0x080131d2
 8003018:	0801314a 	.word	0x0801314a
 800301c:	0801315f 	.word	0x0801315f
 8003020:	08013209 	.word	0x08013209

08003024 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003024:	4a02      	ldr	r2, [pc, #8]	; (8003030 <_FaultInit+0xc>)
 8003026:	6953      	ldr	r3, [r2, #20]
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	6153      	str	r3, [r2, #20]
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <_arch_irq_enable>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003034:	b243      	sxtb	r3, r0
 8003036:	2201      	movs	r2, #1
 8003038:	f000 001f 	and.w	r0, r0, #31
 800303c:	fa02 f000 	lsl.w	r0, r2, r0
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	4a02      	ldr	r2, [pc, #8]	; (800304c <_arch_irq_enable+0x18>)
 8003044:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003050:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
 8003052:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003054:	bfa8      	it	ge
 8003056:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 800305a:	f101 0101 	add.w	r1, r1, #1
 800305e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	bfbb      	ittet	lt
 8003064:	f000 000f 	andlt.w	r0, r0, #15
 8003068:	4b04      	ldrlt	r3, [pc, #16]	; (800307c <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306e:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	bfaa      	itet	ge
 8003072:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
 800307a:	4770      	bx	lr
 800307c:	e000ed14 	.word	0xe000ed14

08003080 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 8003080:	f000 b834 	b.w	80030ec <__bus_fault>

08003084 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	460c      	mov	r4, r1
 8003088:	4616      	mov	r6, r2
 800308a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 800308c:	2204      	movs	r2, #4
 800308e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003090:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003092:	4605      	mov	r5, r0
 8003094:	f00f f960 	bl	8012358 <_init_thread_base>
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003098:	f1a6 0120 	sub.w	r1, r6, #32
 800309c:	4421      	add	r1, r4
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
 800309e:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
 80030a0:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 80030a2:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
 80030a6:	2300      	movs	r3, #0
	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
 80030ae:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
 80030b0:	65ee      	str	r6, [r5, #92]	; 0x5c
 80030b2:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
 80030b4:	9a06      	ldr	r2, [sp, #24]
 80030b6:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
 80030b8:	9a07      	ldr	r2, [sp, #28]
 80030ba:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
 80030bc:	9a08      	ldr	r2, [sp, #32]
 80030be:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
 80030c0:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
 80030c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030c6:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
 80030c8:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 80030ca:	662b      	str	r3, [r5, #96]	; 0x60
 80030cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	08012109 	.word	0x08012109

080030d4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
 80030d4:	4901      	ldr	r1, [pc, #4]	; (80030dc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 80030d6:	2210      	movs	r2, #16
	str r2, [r1]
 80030d8:	600a      	str	r2, [r1, #0]
	bx lr
 80030da:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 80030dc:	e000ed10 	.word	0xe000ed10

080030e0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 80030e0:	4040      	eors	r0, r0
	msr BASEPRI, r0
 80030e2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
 80030e6:	bf30      	wfi

	bx lr
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
 80030ec:	4040      	eors	r0, r0
	msr BASEPRI, r0
 80030ee:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 80030f2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8003110 <__bus_fault+0x24>
	ldr ip, [ip]
 80030f6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 80030fa:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 80030fe:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 8003100:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 8003104:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
 8003108:	b500      	push	{lr}
	bl _Fault
 800310a:	f7ff ff25 	bl	8002f58 <_Fault>

	pop {pc}
 800310e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
 8003114:	2804      	cmp	r0, #4
{
 8003116:	b538      	push	{r3, r4, r5, lr}
 8003118:	4604      	mov	r4, r0
 800311a:	460d      	mov	r5, r1
	switch (reason) {
 800311c:	d013      	beq.n	8003146 <_NanoFatalErrorHandler+0x32>
 800311e:	2805      	cmp	r0, #5
 8003120:	d013      	beq.n	800314a <_NanoFatalErrorHandler+0x36>
 8003122:	2803      	cmp	r0, #3
 8003124:	d113      	bne.n	800314e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 8003126:	480c      	ldr	r0, [pc, #48]	; (8003158 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
 8003128:	f7fd fe66 	bl	8000df8 <printk>
 800312c:	f00e fdc8 	bl	8011cc0 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
 8003130:	69aa      	ldr	r2, [r5, #24]
 8003132:	4601      	mov	r1, r0
 8003134:	4809      	ldr	r0, [pc, #36]	; (800315c <_NanoFatalErrorHandler+0x48>)
 8003136:	f7fd fe5f 	bl	8000df8 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
 800313a:	4629      	mov	r1, r5
 800313c:	4620      	mov	r0, r4
}
 800313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
 8003142:	f000 b817 	b.w	8003174 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <_NanoFatalErrorHandler+0x4c>)
 8003148:	e7ee      	b.n	8003128 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
 800314a:	4806      	ldr	r0, [pc, #24]	; (8003164 <_NanoFatalErrorHandler+0x50>)
 800314c:	e7ec      	b.n	8003128 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 800314e:	4601      	mov	r1, r0
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <_NanoFatalErrorHandler+0x54>)
 8003152:	f7fd fe51 	bl	8000df8 <printk>
		break;
 8003156:	e7e9      	b.n	800312c <_NanoFatalErrorHandler+0x18>
 8003158:	080133c2 	.word	0x080133c2
 800315c:	08013440 	.word	0x08013440
 8003160:	080133e8 	.word	0x080133e8
 8003164:	08013402 	.word	0x08013402
 8003168:	0801341d 	.word	0x0801341d

0800316c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
 800316c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	f7ff bfd0 	b.w	8003114 <_NanoFatalErrorHandler>

08003174 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8003174:	2805      	cmp	r0, #5
{
 8003176:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 8003178:	d00c      	beq.n	8003194 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
 800317a:	f00e ff97 	bl	80120ac <k_is_in_isr>
 800317e:	b160      	cbz	r0, 800319a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 8003180:	f00e ff94 	bl	80120ac <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <_SysFatalErrorHandler+0x44>)
 8003186:	490d      	ldr	r1, [pc, #52]	; (80031bc <_SysFatalErrorHandler+0x48>)
 8003188:	2800      	cmp	r0, #0
 800318a:	bf08      	it	eq
 800318c:	4619      	moveq	r1, r3
 800318e:	480c      	ldr	r0, [pc, #48]	; (80031c0 <_SysFatalErrorHandler+0x4c>)
 8003190:	f7fd fe32 	bl	8000df8 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 8003194:	f7ff ffa4 	bl	80030e0 <k_cpu_idle>
 8003198:	e7fc      	b.n	8003194 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
 800319a:	f00e ff97 	bl	80120cc <_is_thread_essential>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d1ee      	bne.n	8003180 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 80031a2:	4c08      	ldr	r4, [pc, #32]	; (80031c4 <_SysFatalErrorHandler+0x50>)
 80031a4:	4808      	ldr	r0, [pc, #32]	; (80031c8 <_SysFatalErrorHandler+0x54>)
 80031a6:	68a1      	ldr	r1, [r4, #8]
 80031a8:	f7fd fe26 	bl	8000df8 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
 80031ac:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 80031ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b2:	f000 b80b 	b.w	80031cc <_impl_k_thread_abort>
 80031b6:	bf00      	nop
 80031b8:	08013480 	.word	0x08013480
 80031bc:	0801347c 	.word	0x0801347c
 80031c0:	08013491 	.word	0x08013491
 80031c4:	20001358 	.word	0x20001358
 80031c8:	080134b1 	.word	0x080134b1

080031cc <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4605      	mov	r5, r0
	__asm__ volatile(
 80031d0:	f04f 0310 	mov.w	r3, #16
 80031d4:	f3ef 8411 	mrs	r4, BASEPRI
 80031d8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
 80031dc:	f00f f84c 	bl	8012278 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <_impl_k_thread_abort+0x44>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	429d      	cmp	r5, r3
 80031e6:	d10d      	bne.n	8003204 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <_impl_k_thread_abort+0x48>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f0:	b922      	cbnz	r2, 80031fc <_impl_k_thread_abort+0x30>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
 80031f2:	f00e fd8f 	bl	8011d14 <_update_time_slice_before_swap>
#endif

	return __swap(key);
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff fdc0 	bl	8002d7c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003202:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
 8003204:	4620      	mov	r0, r4
}
 8003206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
 800320a:	f00e bcc3 	b.w	8011b94 <_reschedule_threads>
 800320e:	bf00      	nop
 8003210:	20001358 	.word	0x20001358
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
 8003218:	b500      	push	{lr}
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 800321a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
 800321e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003222:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
 8003226:	4904      	ldr	r1, [pc, #16]	; (8003238 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003228:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800322a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
 800322c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
 800322e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
 8003232:	f7ff bd41 	b.w	8002cb8 <_ExcExit>
 8003236:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003238:	08000194 	.word	0x08000194

0800323c <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800323c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800323e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
 8003242:	4805      	ldr	r0, [pc, #20]	; (8003258 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8003244:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8003248:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800324a:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
 800324e:	2002      	movs	r0, #2
    msr CONTROL, r0
 8003250:	f380 8814 	msr	CONTROL, r0

    b _PrepC
 8003254:	f000 b806 	b.w	8003264 <_PrepC>
    ldr r0, =_interrupt_stack
 8003258:	20004680 	.word	0x20004680

0800325c <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
 800325c:	bf30      	wfi
    b _SysNmiOnReset
 800325e:	f7ff bffd 	b.w	800325c <_SysNmiOnReset>
 8003262:	bf00      	nop

08003264 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 8003264:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <_PrepC+0x20>)
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <_PrepC+0x24>)
 800326a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800326e:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003274:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
 8003278:	f00e fa24 	bl	80116c4 <_bss_zero>
	_data_copy();
 800327c:	f00e fa2c 	bl	80116d8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
 8003280:	f00e fa4a 	bl	8011718 <_Cstart>
 8003284:	08000000 	.word	0x08000000
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 800328c:	b508      	push	{r3, lr}
	handler();
 800328e:	f7ff ffe5 	bl	800325c <_SysNmiOnReset>
	_ExcExit();
}
 8003292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8003296:	f7ff bd0f 	b.w	8002cb8 <_ExcExit>
	...

0800329c <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
 800329e:	4916      	ldr	r1, [pc, #88]	; (80032f8 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
 80032a0:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
 80032a2:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
 80032a4:	680d      	ldr	r5, [r1, #0]
 80032a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032aa:	4295      	cmp	r5, r2
 80032ac:	d80f      	bhi.n	80032ce <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
 80032ae:	2200      	movs	r2, #0
 80032b0:	6848      	ldr	r0, [r1, #4]
 80032b2:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 80032b4:	4295      	cmp	r5, r2
 80032b6:	f100 000c 	add.w	r0, r0, #12
 80032ba:	d10a      	bne.n	80032d2 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
 80032bc:	2205      	movs	r2, #5
 80032be:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <arm_mpu_init+0x60>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80032c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032ca:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
 80032ce:	2000      	movs	r0, #0
 80032d0:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
 80032d2:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 80032d6:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
 80032da:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
 80032dc:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
 80032e0:	f041 0110 	orr.w	r1, r1, #16
 80032e4:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
 80032e6:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
 80032ea:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 80032ec:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
 80032ee:	611c      	str	r4, [r3, #16]
 80032f0:	e7e0      	b.n	80032b4 <arm_mpu_init+0x18>
 80032f2:	bf00      	nop
 80032f4:	e000ed90 	.word	0xe000ed90
 80032f8:	2000577c 	.word	0x2000577c
 80032fc:	20000044 	.word	0x20000044

08003300 <console_out>:
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8003300:	280a      	cmp	r0, #10
{
 8003302:	b538      	push	{r3, r4, r5, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	4d07      	ldr	r5, [pc, #28]	; (8003324 <console_out+0x24>)
	if ('\n' == c) {
 8003308:	d104      	bne.n	8003314 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800330a:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
 800330c:	6843      	ldr	r3, [r0, #4]
 800330e:	210d      	movs	r1, #13
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
 8003314:	6828      	ldr	r0, [r5, #0]
 8003316:	6843      	ldr	r3, [r0, #4]
 8003318:	b2e1      	uxtb	r1, r4
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4798      	blx	r3

	return c;
}
 800331e:	4620      	mov	r0, r4
 8003320:	bd38      	pop	{r3, r4, r5, pc}
 8003322:	bf00      	nop
 8003324:	20000048 	.word	0x20000048

08003328 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <uart_console_hook_install+0x8>)
 800332a:	f7fd bc1f 	b.w	8000b6c <__printk_hook_install>
 800332e:	bf00      	nop
 8003330:	08003301 	.word	0x08003301

08003334 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8003334:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8003336:	4804      	ldr	r0, [pc, #16]	; (8003348 <uart_console_init+0x14>)
 8003338:	f00e f9a6 	bl	8011688 <device_get_binding>
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <uart_console_init+0x18>)
 800333e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 8003340:	f7ff fff2 	bl	8003328 <uart_console_hook_install>

	return 0;
}
 8003344:	2000      	movs	r0, #0
 8003346:	bd08      	pop	{r3, pc}
 8003348:	080134d6 	.word	0x080134d6
 800334c:	20000048 	.word	0x20000048

08003350 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8003350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8003354:	6895      	ldr	r5, [r2, #8]
	return (exti->pr & (1 << line)) ? 1 : 0;
 8003356:	4e0c      	ldr	r6, [pc, #48]	; (8003388 <__stm32_exti_isr+0x38>)
{
 8003358:	4604      	mov	r4, r0
 800335a:	460f      	mov	r7, r1
	return (exti->pr & (1 << line)) ? 1 : 0;
 800335c:	f04f 0801 	mov.w	r8, #1
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8003360:	42bc      	cmp	r4, r7
 8003362:	db01      	blt.n	8003368 <__stm32_exti_isr+0x18>
			}

			data->cb[line].cb(line, data->cb[line].data);
		}
	}
}
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (exti->pr & (1 << line)) ? 1 : 0;
 8003368:	6972      	ldr	r2, [r6, #20]
 800336a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800336e:	421a      	tst	r2, r3
 8003370:	d008      	beq.n	8003384 <__stm32_exti_isr+0x34>
	exti->pr = 1 << line;
 8003372:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8003374:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8003378:	b123      	cbz	r3, 8003384 <__stm32_exti_isr+0x34>
			data->cb[line].cb(line, data->cb[line].data);
 800337a:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 800337e:	4620      	mov	r0, r4
 8003380:	6851      	ldr	r1, [r2, #4]
 8003382:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8003384:	3401      	adds	r4, #1
 8003386:	e7eb      	b.n	8003360 <__stm32_exti_isr+0x10>
 8003388:	40013c00 	.word	0x40013c00

0800338c <__stm32_exti_isr_0>:
}

#else
static inline void __stm32_exti_isr_0(void *arg)
{
	__stm32_exti_isr(0, 1, arg);
 800338c:	4602      	mov	r2, r0
 800338e:	2101      	movs	r1, #1
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff bfdd 	b.w	8003350 <__stm32_exti_isr>

08003396 <__stm32_exti_isr_1>:
}

static inline void __stm32_exti_isr_1(void *arg)
{
	__stm32_exti_isr(1, 2, arg);
 8003396:	4602      	mov	r2, r0
 8003398:	2102      	movs	r1, #2
 800339a:	2001      	movs	r0, #1
 800339c:	f7ff bfd8 	b.w	8003350 <__stm32_exti_isr>

080033a0 <__stm32_exti_isr_2>:
}

static inline void __stm32_exti_isr_2(void *arg)
{
	__stm32_exti_isr(2, 3, arg);
 80033a0:	4602      	mov	r2, r0
 80033a2:	2103      	movs	r1, #3
 80033a4:	2002      	movs	r0, #2
 80033a6:	f7ff bfd3 	b.w	8003350 <__stm32_exti_isr>

080033aa <__stm32_exti_isr_3>:
}

static inline void __stm32_exti_isr_3(void *arg)
{
	__stm32_exti_isr(3, 4, arg);
 80033aa:	4602      	mov	r2, r0
 80033ac:	2104      	movs	r1, #4
 80033ae:	2003      	movs	r0, #3
 80033b0:	f7ff bfce 	b.w	8003350 <__stm32_exti_isr>

080033b4 <__stm32_exti_isr_4>:
}

static inline void __stm32_exti_isr_4(void *arg)
{
	__stm32_exti_isr(4, 5, arg);
 80033b4:	4602      	mov	r2, r0
 80033b6:	2105      	movs	r1, #5
 80033b8:	2004      	movs	r0, #4
 80033ba:	f7ff bfc9 	b.w	8003350 <__stm32_exti_isr>

080033be <__stm32_exti_isr_9_5>:
}

static inline void __stm32_exti_isr_9_5(void *arg)
{
	__stm32_exti_isr(5, 10, arg);
 80033be:	4602      	mov	r2, r0
 80033c0:	210a      	movs	r1, #10
 80033c2:	2005      	movs	r0, #5
 80033c4:	f7ff bfc4 	b.w	8003350 <__stm32_exti_isr>

080033c8 <__stm32_exti_isr_15_10>:
}

static inline void __stm32_exti_isr_15_10(void *arg)
{
	__stm32_exti_isr(10, 16, arg);
 80033c8:	4602      	mov	r2, r0
 80033ca:	2110      	movs	r1, #16
 80033cc:	200a      	movs	r0, #10
 80033ce:	f7ff bfbf 	b.w	8003350 <__stm32_exti_isr>

080033d2 <__stm32_exti_isr_16>:
}

#ifdef CONFIG_SOC_SERIES_STM32F4X
static inline void __stm32_exti_isr_16(void *arg)
{
	__stm32_exti_isr(16, 17, arg);
 80033d2:	4602      	mov	r2, r0
 80033d4:	2111      	movs	r1, #17
 80033d6:	2010      	movs	r0, #16
 80033d8:	f7ff bfba 	b.w	8003350 <__stm32_exti_isr>

080033dc <__stm32_exti_isr_17>:
}

static inline void __stm32_exti_isr_17(void *arg)
{
	__stm32_exti_isr(17, 18, arg);
 80033dc:	4602      	mov	r2, r0
 80033de:	2112      	movs	r1, #18
 80033e0:	2011      	movs	r0, #17
 80033e2:	f7ff bfb5 	b.w	8003350 <__stm32_exti_isr>

080033e6 <__stm32_exti_isr_18>:
}

static inline void __stm32_exti_isr_18(void *arg)
{
	__stm32_exti_isr(18, 19, arg);
 80033e6:	4602      	mov	r2, r0
 80033e8:	2113      	movs	r1, #19
 80033ea:	2012      	movs	r0, #18
 80033ec:	f7ff bfb0 	b.w	8003350 <__stm32_exti_isr>

080033f0 <__stm32_exti_isr_21>:
}

static inline void __stm32_exti_isr_21(void *arg)
{
	__stm32_exti_isr(21, 22, arg);
 80033f0:	4602      	mov	r2, r0
 80033f2:	2116      	movs	r1, #22
 80033f4:	2015      	movs	r0, #21
 80033f6:	f7ff bfab 	b.w	8003350 <__stm32_exti_isr>

080033fa <__stm32_exti_isr_22>:
}

static inline void __stm32_exti_isr_22(void *arg)
{
	__stm32_exti_isr(22, 23, arg);
 80033fa:	4602      	mov	r2, r0
 80033fc:	2117      	movs	r1, #23
 80033fe:	2016      	movs	r0, #22
 8003400:	f7ff bfa6 	b.w	8003350 <__stm32_exti_isr>

08003404 <stm32_exti_init>:
	IRQ_CONNECT(STM32F3_IRQ_EXTI15_10,
		CONFIG_EXTI_STM32_EXTI15_10_IRQ_PRI,
		__stm32_exti_isr_15_10, DEVICE_GET(exti_stm32),
		0);
#elif CONFIG_SOC_SERIES_STM32F4X
	IRQ_CONNECT(STM32F4_IRQ_EXTI0,
 8003404:	2200      	movs	r2, #0
{
 8003406:	b508      	push	{r3, lr}
	IRQ_CONNECT(STM32F4_IRQ_EXTI0,
 8003408:	4611      	mov	r1, r2
 800340a:	2006      	movs	r0, #6
 800340c:	f7ff fe20 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI1,
 8003410:	2200      	movs	r2, #0
 8003412:	4611      	mov	r1, r2
 8003414:	2007      	movs	r0, #7
 8003416:	f7ff fe1b 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI2,
 800341a:	2200      	movs	r2, #0
 800341c:	4611      	mov	r1, r2
 800341e:	2008      	movs	r0, #8
 8003420:	f7ff fe16 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI3,
 8003424:	2200      	movs	r2, #0
 8003426:	4611      	mov	r1, r2
 8003428:	2009      	movs	r0, #9
 800342a:	f7ff fe11 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI4,
 800342e:	2200      	movs	r2, #0
 8003430:	4611      	mov	r1, r2
 8003432:	200a      	movs	r0, #10
 8003434:	f7ff fe0c 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI9_5,
 8003438:	2200      	movs	r2, #0
 800343a:	4611      	mov	r1, r2
 800343c:	2017      	movs	r0, #23
 800343e:	f7ff fe07 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI15_10,
 8003442:	2200      	movs	r2, #0
 8003444:	4611      	mov	r1, r2
 8003446:	2028      	movs	r0, #40	; 0x28
 8003448:	f7ff fe02 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI15_10_IRQ_PRI,
		__stm32_exti_isr_15_10, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI16,
 800344c:	2200      	movs	r2, #0
 800344e:	4611      	mov	r1, r2
 8003450:	2001      	movs	r0, #1
 8003452:	f7ff fdfd 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI16_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI17,
 8003456:	2200      	movs	r2, #0
 8003458:	4611      	mov	r1, r2
 800345a:	2029      	movs	r0, #41	; 0x29
 800345c:	f7ff fdf8 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI17_IRQ_PRI,
		__stm32_exti_isr_17, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI18,
 8003460:	2200      	movs	r2, #0
 8003462:	4611      	mov	r1, r2
 8003464:	202a      	movs	r0, #42	; 0x2a
 8003466:	f7ff fdf3 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI18_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI21,
 800346a:	2200      	movs	r2, #0
 800346c:	4611      	mov	r1, r2
 800346e:	2002      	movs	r0, #2
 8003470:	f7ff fdee 	bl	8003050 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI21_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI22,
 8003474:	2200      	movs	r2, #0
 8003476:	4611      	mov	r1, r2
 8003478:	2003      	movs	r0, #3
 800347a:	f7ff fde9 	bl	8003050 <_irq_priority_set>
}
 800347e:	2000      	movs	r0, #0
 8003480:	bd08      	pop	{r3, pc}
	...

08003484 <stm32_exti_enable>:
	exti->imr |= 1 << line;
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <stm32_exti_enable+0x3c>)
 8003486:	2301      	movs	r3, #1
 8003488:	6811      	ldr	r1, [r2, #0]
 800348a:	4083      	lsls	r3, r0
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]
	if (line >= 5 && line <= 9) {
 8003490:	1f43      	subs	r3, r0, #5
 8003492:	2b04      	cmp	r3, #4
 8003494:	d90e      	bls.n	80034b4 <stm32_exti_enable+0x30>
	} else if (line >= 10 && line <= 15) {
 8003496:	f1a0 030a 	sub.w	r3, r0, #10
 800349a:	2b05      	cmp	r3, #5
 800349c:	d90c      	bls.n	80034b8 <stm32_exti_enable+0x34>
	} else if (line >= 0 && line <= 4) {
 800349e:	2804      	cmp	r0, #4
 80034a0:	d802      	bhi.n	80034a8 <stm32_exti_enable+0x24>
		irqnum = STM32F4_IRQ_EXTI0 + line;
 80034a2:	3006      	adds	r0, #6
	irq_enable(irqnum);
 80034a4:	f7ff bdc6 	b.w	8003034 <_arch_irq_enable>
 80034a8:	3810      	subs	r0, #16
 80034aa:	2806      	cmp	r0, #6
 80034ac:	d806      	bhi.n	80034bc <stm32_exti_enable+0x38>
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <stm32_exti_enable+0x40>)
 80034b0:	5618      	ldrsb	r0, [r3, r0]
 80034b2:	e7f7      	b.n	80034a4 <stm32_exti_enable+0x20>
		irqnum = STM32F4_IRQ_EXTI9_5;
 80034b4:	2017      	movs	r0, #23
 80034b6:	e7f5      	b.n	80034a4 <stm32_exti_enable+0x20>
		irqnum = STM32F4_IRQ_EXTI15_10;
 80034b8:	2028      	movs	r0, #40	; 0x28
 80034ba:	e7f3      	b.n	80034a4 <stm32_exti_enable+0x20>
	} else if (line >= 0 && line <= 4) {
 80034bc:	2000      	movs	r0, #0
 80034be:	e7f1      	b.n	80034a4 <stm32_exti_enable+0x20>
 80034c0:	40013c00 	.word	0x40013c00
 80034c4:	080134dd 	.word	0x080134dd

080034c8 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80034c8:	07ca      	lsls	r2, r1, #31
{
 80034ca:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80034cc:	d505      	bpl.n	80034da <stm32_exti_trigger+0x12>
		exti->rtsr |= 1 << line;
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <stm32_exti_trigger+0x28>)
 80034d0:	2301      	movs	r3, #1
 80034d2:	6894      	ldr	r4, [r2, #8]
 80034d4:	4083      	lsls	r3, r0
 80034d6:	4323      	orrs	r3, r4
 80034d8:	6093      	str	r3, [r2, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 80034da:	078b      	lsls	r3, r1, #30
 80034dc:	d506      	bpl.n	80034ec <stm32_exti_trigger+0x24>
		exti->ftsr |= 1 << line;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <stm32_exti_trigger+0x28>)
 80034e0:	2301      	movs	r3, #1
 80034e2:	68d1      	ldr	r1, [r2, #12]
 80034e4:	fa03 f000 	lsl.w	r0, r3, r0
 80034e8:	4308      	orrs	r0, r1
 80034ea:	60d0      	str	r0, [r2, #12]
 80034ec:	bd10      	pop	{r4, pc}
 80034ee:	bf00      	nop
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <stm32_exti_set_callback>:
{
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <stm32_exti_set_callback+0x14>)
 80034f6:	b510      	push	{r4, lr}
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
	data->cb[line].cb = cb;
 80034fe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8003502:	6062      	str	r2, [r4, #4]
 8003504:	bd10      	pop	{r4, pc}
 8003506:	bf00      	nop
 8003508:	20006390 	.word	0x20006390

0800350c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800350c:	680b      	ldr	r3, [r1, #0]
{
 800350e:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8003510:	2b03      	cmp	r3, #3
 8003512:	d80c      	bhi.n	800352e <stm32_clock_control_on+0x22>
 8003514:	e8df f003 	tbb	[pc, r3]
 8003518:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <stm32_clock_control_on+0x64>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800351e:	684b      	ldr	r3, [r1, #4]
 8003520:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003522:	4319      	orrs	r1, r3
 8003524:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003526:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003528:	4013      	ands	r3, r2
 800352a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800352c:	9b00      	ldr	r3, [sp, #0]
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 800352e:	2000      	movs	r0, #0
 8003530:	b004      	add	sp, #16
 8003532:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003534:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <stm32_clock_control_on+0x64>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8003536:	684b      	ldr	r3, [r1, #4]
 8003538:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800353a:	4319      	orrs	r1, r3
 800353c:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800353e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003540:	4013      	ands	r3, r2
 8003542:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003544:	9b01      	ldr	r3, [sp, #4]
 8003546:	e7f2      	b.n	800352e <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <stm32_clock_control_on+0x64>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800354a:	684b      	ldr	r3, [r1, #4]
 800354c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800354e:	4319      	orrs	r1, r3
 8003550:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003554:	4013      	ands	r3, r2
 8003556:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003558:	9b02      	ldr	r3, [sp, #8]
 800355a:	e7e8      	b.n	800352e <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <stm32_clock_control_on+0x64>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800355e:	684b      	ldr	r3, [r1, #4]
 8003560:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003562:	4319      	orrs	r1, r3
 8003564:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003566:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003568:	4013      	ands	r3, r2
 800356a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	e7de      	b.n	800352e <stm32_clock_control_on+0x22>
 8003570:	40023800 	.word	0x40023800

08003574 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d809      	bhi.n	800358e <stm32_clock_control_off+0x1a>
 800357a:	e8df f003 	tbb	[pc, r3]
 800357e:	0a02      	.short	0x0a02
 8003580:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <stm32_clock_control_off+0x48>)
 8003584:	6849      	ldr	r1, [r1, #4]
 8003586:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003588:	ea23 0301 	bic.w	r3, r3, r1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 800358e:	2000      	movs	r0, #0
 8003590:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <stm32_clock_control_off+0x48>)
 8003594:	6849      	ldr	r1, [r1, #4]
 8003596:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003598:	ea23 0301 	bic.w	r3, r3, r1
 800359c:	6353      	str	r3, [r2, #52]	; 0x34
 800359e:	e7f6      	b.n	800358e <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <stm32_clock_control_off+0x48>)
 80035a2:	6849      	ldr	r1, [r1, #4]
 80035a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80035a6:	ea23 0301 	bic.w	r3, r3, r1
 80035aa:	6413      	str	r3, [r2, #64]	; 0x40
 80035ac:	e7ef      	b.n	800358e <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80035ae:	4a03      	ldr	r2, [pc, #12]	; (80035bc <stm32_clock_control_off+0x48>)
 80035b0:	6849      	ldr	r1, [r1, #4]
 80035b2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80035b4:	ea23 0301 	bic.w	r3, r3, r1
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	e7e8      	b.n	800358e <stm32_clock_control_off+0x1a>
 80035bc:	40023800 	.word	0x40023800

080035c0 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <stm32_clock_control_get_subsys_rate+0x1c>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80035c2:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 80035c4:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 80035c6:	2903      	cmp	r1, #3
 80035c8:	d805      	bhi.n	80035d6 <stm32_clock_control_get_subsys_rate+0x16>
 80035ca:	e8df f001 	tbb	[pc, r1]
 80035ce:	0303      	.short	0x0303
 80035d0:	0302      	.short	0x0302
	return clock / prescaler;
 80035d2:	085b      	lsrs	r3, r3, #1
#endif /* CONFIG_SOC_SERIES_STM32L4X || CONFIG_SOC_SERIES_STM32F0X  */
		*rate = apb1_clock;
		break;
#ifndef CONFIG_SOC_SERIES_STM32F0X
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80035d4:	6013      	str	r3, [r2, #0]
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 80035d6:	2000      	movs	r0, #0
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20005778 	.word	0x20005778

080035e0 <stm32_clock_control_init>:
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
	}
}

static int stm32_clock_control_init(struct device *dev)
{
 80035e0:	b530      	push	{r4, r5, lr}
 80035e2:	b087      	sub	sp, #28
	clk_init->AHBCLKDivider = ahb_prescaler(
 80035e4:	2300      	movs	r3, #0
	clk_init->APB1CLKDivider = apb1_prescaler(
 80035e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	clk_init->AHBCLKDivider = ahb_prescaler(
 80035ea:	9300      	str	r3, [sp, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 80035ec:	9201      	str	r2, [sp, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 80035ee:	9302      	str	r3, [sp, #8]

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80035f0:	f000 f84a 	bl	8003688 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80035f4:	a803      	add	r0, sp, #12
 80035f6:	f000 f83f 	bl	8003678 <config_pll_init>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <stm32_clock_control_init+0x90>)
 80035fc:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80035fe:	0791      	lsls	r1, r2, #30
 8003600:	d52d      	bpl.n	800365e <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003602:	4c1b      	ldr	r4, [pc, #108]	; (8003670 <stm32_clock_control_init+0x90>)
 8003604:	68a3      	ldr	r3, [r4, #8]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003612:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003614:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003616:	f015 050c 	ands.w	r5, r5, #12
 800361a:	d1fb      	bne.n	8003614 <stm32_clock_control_init+0x34>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003622:	6023      	str	r3, [r4, #0]
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_PLL_Disable();

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003624:	6863      	ldr	r3, [r4, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800362a:	fa92 f2a2 	rbit	r2, r2
 800362e:	2107      	movs	r1, #7
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800363c:	4313      	orrs	r3, r2
 800363e:	6063      	str	r3, [r4, #4]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(CONFIG_CLOCK_STM32_HSE_CLOCK, hse_bypass,
 8003640:	aa03      	add	r2, sp, #12
 8003642:	466b      	mov	r3, sp
 8003644:	4629      	mov	r1, r5
 8003646:	480b      	ldr	r0, [pc, #44]	; (8003674 <stm32_clock_control_init+0x94>)
 8003648:	f7ff fa22 	bl	8002a90 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6023      	str	r3, [r4, #0]
							&s_PLLInitStruct,
							&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8003654:	f000 f828 	bl	80036a8 <LL_RCC_MSI_Disable>
	LL_RCC_PLL_Disable();

#endif /* CONFIG_CLOCK_STM32_SYSCLK_SRC_... */

	return 0;
}
 8003658:	4628      	mov	r0, r5
 800365a:	b007      	add	sp, #28
 800365c:	bd30      	pop	{r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003666:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8003668:	0792      	lsls	r2, r2, #30
 800366a:	d5fc      	bpl.n	8003666 <stm32_clock_control_init+0x86>
 800366c:	e7c9      	b.n	8003602 <stm32_clock_control_init+0x22>
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400

08003678 <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 8003678:	2110      	movs	r1, #16
 800367a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800367e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003686:	4770      	bx	lr

08003688 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <config_enable_default_clocks+0x1c>)
 800368a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003694:	b082      	sub	sp, #8
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800369c:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 800369e:	b002      	add	sp, #8
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <LL_RCC_MSI_Disable>:

/**
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
 80036a8:	4770      	bx	lr

080036aa <_flash_get_page_info>:

#include <flash.h>

static int _flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
 80036aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036ae:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
 80036b0:	6843      	ldr	r3, [r0, #4]
{
 80036b2:	460c      	mov	r4, r1
 80036b4:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
 80036b6:	4669      	mov	r1, sp
 80036b8:	aa01      	add	r2, sp, #4
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4798      	blx	r3
 80036be:	9901      	ldr	r1, [sp, #4]
 80036c0:	9a00      	ldr	r2, [sp, #0]

	while (layout_size--) {
 80036c2:	2700      	movs	r7, #0
 80036c4:	3901      	subs	r1, #1
 80036c6:	3208      	adds	r2, #8
	off_t end = 0;
 80036c8:	4638      	mov	r0, r7
	off_t group_offs = 0;
 80036ca:	46bc      	mov	ip, r7
	size_t page_count = 0;
 80036cc:	46be      	mov	lr, r7
	while (layout_size--) {
 80036ce:	1c4b      	adds	r3, r1, #1
 80036d0:	f1a2 0908 	sub.w	r9, r2, #8
 80036d4:	d102      	bne.n	80036dc <_flash_get_page_info+0x32>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
 80036d6:	f06f 0015 	mvn.w	r0, #21
 80036da:	e01e      	b.n	800371a <_flash_get_page_info+0x70>
			end += layout->pages_count * layout->pages_size;
 80036dc:	f852 3c08 	ldr.w	r3, [r2, #-8]
		if (use_addr) {
 80036e0:	b1f6      	cbz	r6, 8003720 <_flash_get_page_info+0x76>
			end += layout->pages_count * layout->pages_size;
 80036e2:	4698      	mov	r8, r3
 80036e4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80036e8:	fb03 0008 	mla	r0, r3, r8, r0
		if (offs < end) {
 80036ec:	42a0      	cmp	r0, r4
 80036ee:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80036f2:	f102 0208 	add.w	r2, r2, #8
 80036f6:	dd18      	ble.n	800372a <_flash_get_page_info+0x80>
 80036f8:	b10f      	cbz	r7, 80036fe <_flash_get_page_info+0x54>
 80036fa:	f8cd 9000 	str.w	r9, [sp]
			info->size = layout->pages_size;
 80036fe:	9b00      	ldr	r3, [sp, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	606b      	str	r3, [r5, #4]
			if (use_addr) {
 8003704:	b176      	cbz	r6, 8003724 <_flash_get_page_info+0x7a>
				num_in_group = (offs - group_offs) /
 8003706:	eba4 040c 	sub.w	r4, r4, ip
 800370a:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
 800370e:	fb03 c304 	mla	r3, r3, r4, ip
			info->index = page_count + num_in_group;
 8003712:	4474      	add	r4, lr
			info->start_offset = group_offs +
 8003714:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
 8003716:	60ac      	str	r4, [r5, #8]
			return 0;
 8003718:	2000      	movs	r0, #0
}
 800371a:	b003      	add	sp, #12
 800371c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			end += layout->pages_count;
 8003720:	4418      	add	r0, r3
 8003722:	e7e3      	b.n	80036ec <_flash_get_page_info+0x42>
				num_in_group = offs - page_count;
 8003724:	eba4 040e 	sub.w	r4, r4, lr
 8003728:	e7f1      	b.n	800370e <_flash_get_page_info+0x64>
		group_offs += layout->pages_count * layout->pages_size;
 800372a:	f852 7c10 	ldr.w	r7, [r2, #-16]
 800372e:	f852 3c0c 	ldr.w	r3, [r2, #-12]
		page_count += layout->pages_count;
 8003732:	44be      	add	lr, r7
		group_offs += layout->pages_count * layout->pages_size;
 8003734:	fb03 cc07 	mla	ip, r3, r7, ip
 8003738:	2701      	movs	r7, #1
 800373a:	e7c8      	b.n	80036ce <_flash_get_page_info+0x24>

0800373c <_impl_flash_get_page_info_by_offs>:

int _impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return _flash_get_page_info(dev, offs, true, info);
 800373c:	4613      	mov	r3, r2
 800373e:	2201      	movs	r2, #1
 8003740:	f7ff bfb3 	b.w	80036aa <_flash_get_page_info>

08003744 <flash_stm32_read>:
}
#endif

static int flash_stm32_read(struct device *dev, off_t offset, void *data,
			    size_t len)
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	461c      	mov	r4, r3
 8003748:	4615      	mov	r5, r2
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 800374a:	2300      	movs	r3, #0
 800374c:	4622      	mov	r2, r4
{
 800374e:	460e      	mov	r6, r1
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 8003750:	f000 f8c6 	bl	80038e0 <flash_stm32_valid_range>
 8003754:	b140      	cbz	r0, 8003768 <flash_stm32_read+0x24>
		return -EINVAL;
	}

	if (!len) {
 8003756:	b12c      	cbz	r4, 8003764 <flash_stm32_read+0x20>
		return 0;
	}

	memcpy(data, (void *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 8003758:	4622      	mov	r2, r4
 800375a:	f106 6100 	add.w	r1, r6, #134217728	; 0x8000000
 800375e:	4628      	mov	r0, r5
 8003760:	f7fd f88e 	bl	8000880 <memcpy>

	return 0;
 8003764:	2000      	movs	r0, #0
 8003766:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8003768:	f06f 0015 	mvn.w	r0, #21
 800376c:	bd70      	pop	{r4, r5, r6, pc}

0800376e <flash_stm32_write>:
	return rc;
}

static int flash_stm32_write(struct device *dev, off_t offset,
			     const void *data, size_t len)
{
 800376e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003770:	461c      	mov	r4, r3
 8003772:	4617      	mov	r7, r2
	int rc;

	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8003774:	2301      	movs	r3, #1
 8003776:	4622      	mov	r2, r4
{
 8003778:	4605      	mov	r5, r0
 800377a:	460e      	mov	r6, r1
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800377c:	f000 f8b0 	bl	80038e0 <flash_stm32_valid_range>
 8003780:	b198      	cbz	r0, 80037aa <flash_stm32_write+0x3c>
		return -EINVAL;
	}

	if (!len) {
 8003782:	b184      	cbz	r4, 80037a6 <flash_stm32_write+0x38>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 8003784:	68a8      	ldr	r0, [r5, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8003786:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800378a:	3004      	adds	r0, #4
 800378c:	f00e fb60 	bl	8011e50 <_impl_k_sem_take>
		return 0;
	}

	flash_stm32_sem_take(dev);

	rc = flash_stm32_write_range(dev, offset, data, len);
 8003790:	4623      	mov	r3, r4
 8003792:	463a      	mov	r2, r7
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f8f9 	bl	800398e <flash_stm32_write_range>
 800379c:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800379e:	68a8      	ldr	r0, [r5, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80037a0:	3004      	adds	r0, #4
 80037a2:	f00e fb13 	bl	8011dcc <_impl_k_sem_give>

	flash_stm32_sem_give(dev);

	return rc;
}
 80037a6:	4620      	mov	r0, r4
 80037a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 80037aa:	f06f 0415 	mvn.w	r4, #21
 80037ae:	e7fa      	b.n	80037a6 <flash_stm32_write+0x38>

080037b0 <flash_stm32_erase>:
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 80037b2:	2301      	movs	r3, #1
{
 80037b4:	4605      	mov	r5, r0
 80037b6:	460e      	mov	r6, r1
 80037b8:	4614      	mov	r4, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 80037ba:	f000 f891 	bl	80038e0 <flash_stm32_valid_range>
 80037be:	2800      	cmp	r0, #0
 80037c0:	d03a      	beq.n	8003838 <flash_stm32_erase+0x88>
	if (!len) {
 80037c2:	2c00      	cmp	r4, #0
 80037c4:	d036      	beq.n	8003834 <flash_stm32_erase+0x84>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 80037c6:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	3004      	adds	r0, #4
 80037ce:	f00e fb3f 	bl	8011e50 <_impl_k_sem_take>
	rc = flash_stm32_block_erase_loop(dev, offset, len);
 80037d2:	4622      	mov	r2, r4
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 f897 	bl	800390a <flash_stm32_block_erase_loop>
 80037dc:	4604      	mov	r4, r0
 80037de:	68a8      	ldr	r0, [r5, #8]
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80037e0:	6803      	ldr	r3, [r0, #0]
	if (regs->acr.val & FLASH_ACR_ICEN) {
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	0591      	lsls	r1, r2, #22
 80037e6:	d50f      	bpl.n	8003808 <flash_stm32_erase+0x58>
		regs->acr.val &= ~FLASH_ACR_ICEN;
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_ICRST;
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	601a      	str	r2, [r3, #0]
		regs->acr.val &= ~FLASH_ACR_ICRST;
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fe:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_ICEN;
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003806:	601a      	str	r2, [r3, #0]
	if (regs->acr.val & FLASH_ACR_DCEN) {
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	0552      	lsls	r2, r2, #21
 800380c:	d50f      	bpl.n	800382e <flash_stm32_erase+0x7e>
		regs->acr.val &= ~FLASH_ACR_DCEN;
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_DCRST;
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381c:	601a      	str	r2, [r3, #0]
		regs->acr.val &= ~FLASH_ACR_DCRST;
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003824:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_DCEN;
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800382e:	3004      	adds	r0, #4
 8003830:	f00e facc 	bl	8011dcc <_impl_k_sem_give>
}
 8003834:	4620      	mov	r0, r4
 8003836:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8003838:	f06f 0415 	mvn.w	r4, #21
 800383c:	e7fa      	b.n	8003834 <flash_stm32_erase+0x84>

0800383e <flash_stm32_wait_flash_idle>:
	if (FLASH_STM32_REGS(dev)->sr & error) {
 800383e:	6883      	ldr	r3, [r0, #8]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68d3      	ldr	r3, [r2, #12]
 8003844:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8003848:	d105      	bne.n	8003856 <flash_stm32_wait_flash_idle+0x18>
 800384a:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
	while ((FLASH_STM32_REGS(dev)->sr & FLASH_SR_BSY) && timeout) {
 800384e:	68d1      	ldr	r1, [r2, #12]
 8003850:	03c9      	lsls	r1, r1, #15
 8003852:	d505      	bpl.n	8003860 <flash_stm32_wait_flash_idle+0x22>
 8003854:	b913      	cbnz	r3, 800385c <flash_stm32_wait_flash_idle+0x1e>
		return -EIO;
 8003856:	f06f 0004 	mvn.w	r0, #4
}
 800385a:	4770      	bx	lr
		timeout--;
 800385c:	3b01      	subs	r3, #1
 800385e:	e7f6      	b.n	800384e <flash_stm32_wait_flash_idle+0x10>
	return 0;
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	f06f 0004 	mvneq.w	r0, #4
 8003868:	2000      	movne	r0, #0
 800386a:	4770      	bx	lr

0800386c <flash_stm32_write_protection>:

static int flash_stm32_write_protection(struct device *dev, bool enable)
{
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	4605      	mov	r5, r0
#if defined(CONFIG_SOC_SERIES_STM32F4X)
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 8003870:	6880      	ldr	r0, [r0, #8]
{
 8003872:	460e      	mov	r6, r1
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 8003874:	f850 4b04 	ldr.w	r4, [r0], #4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8003878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800387c:	f00e fae8 	bl	8011e50 <_impl_k_sem_take>
#endif
	int rc = 0;

	flash_stm32_sem_take(dev);

	if (enable) {
 8003880:	b1a6      	cbz	r6, 80038ac <flash_stm32_write_protection+0x40>
		rc = flash_stm32_wait_flash_idle(dev);
 8003882:	4628      	mov	r0, r5
 8003884:	f7ff ffdb 	bl	800383e <flash_stm32_wait_flash_idle>
		if (rc) {
 8003888:	4606      	mov	r6, r0
 800388a:	b128      	cbz	r0, 8003898 <flash_stm32_write_protection+0x2c>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800388c:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800388e:	3004      	adds	r0, #4
 8003890:	f00e fa9c 	bl	8011dcc <_impl_k_sem_give>
	}

	flash_stm32_sem_give(dev);

	return rc;
}
 8003894:	4630      	mov	r0, r6
 8003896:	bd70      	pop	{r4, r5, r6, pc}
		regs->cr |= FLASH_CR_LOCK;
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800389e:	6123      	str	r3, [r4, #16]
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80038a0:	68a8      	ldr	r0, [r5, #8]
 80038a2:	3004      	adds	r0, #4
 80038a4:	f00e fa92 	bl	8011dcc <_impl_k_sem_give>
	return rc;
 80038a8:	2600      	movs	r6, #0
 80038aa:	e7f3      	b.n	8003894 <flash_stm32_write_protection+0x28>
		if (regs->cr & FLASH_CR_LOCK) {
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	2b00      	cmp	r3, #0
			regs->keyr = FLASH_KEY1;
 80038b0:	bfbf      	itttt	lt
 80038b2:	4b03      	ldrlt	r3, [pc, #12]	; (80038c0 <flash_stm32_write_protection+0x54>)
 80038b4:	6063      	strlt	r3, [r4, #4]
			regs->keyr = FLASH_KEY2;
 80038b6:	f103 3388 	addlt.w	r3, r3, #2290649224	; 0x88888888
 80038ba:	6063      	strlt	r3, [r4, #4]
 80038bc:	e7f0      	b.n	80038a0 <flash_stm32_write_protection+0x34>
 80038be:	bf00      	nop
 80038c0:	45670123 	.word	0x45670123

080038c4 <stm32_flash_init>:
	.write_block_size = 8,
#endif
};

static int stm32_flash_init(struct device *dev)
{
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4604      	mov	r4, r0

	/* enable clock */
	clock_control_on(clk, (clock_control_subsys_t *)&p->pclken);
#endif

	k_sem_init(&p->sem, 1, 1);
 80038c8:	6880      	ldr	r0, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 80038ca:	2201      	movs	r2, #1
 80038cc:	4611      	mov	r1, r2
 80038ce:	3004      	adds	r0, #4
 80038d0:	f00e fa72 	bl	8011db8 <_impl_k_sem_init>

	return flash_stm32_write_protection(dev, false);
 80038d4:	4620      	mov	r0, r4
 80038d6:	2100      	movs	r1, #0
}
 80038d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return flash_stm32_write_protection(dev, false);
 80038dc:	f7ff bfc6 	b.w	800386c <flash_stm32_write_protection>

080038e0 <flash_stm32_valid_range>:

#define STM32F4X_SECTOR_MASK		((u32_t) 0xFFFFFF07)

bool flash_stm32_valid_range(struct device *dev, off_t offset, u32_t len,
			     bool write)
{
 80038e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80038e2:	4614      	mov	r4, r2

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size);

K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable);

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS, flash_get_page_info_by_offs, int, struct device *, dev, off_t, offset, struct flash_pages_info *, info);
 80038e4:	aa01      	add	r2, sp, #4
 80038e6:	4605      	mov	r5, r0
 80038e8:	460e      	mov	r6, r1
 80038ea:	f7ff ff27 	bl	800373c <_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    u32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 80038ee:	b950      	cbnz	r0, 8003906 <flash_stm32_valid_range+0x26>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 80038f0:	1e61      	subs	r1, r4, #1
 80038f2:	aa01      	add	r2, sp, #4
 80038f4:	4431      	add	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	f7ff ff20 	bl	800373c <_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 80038fc:	fab0 f080 	clz	r0, r0
 8003900:	0940      	lsrs	r0, r0, #5
	ARG_UNUSED(write);

	return flash_stm32_range_exists(dev, offset, len);
}
 8003902:	b004      	add	sp, #16
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	2000      	movs	r0, #0
 8003908:	e7fb      	b.n	8003902 <flash_stm32_valid_range+0x22>

0800390a <flash_stm32_block_erase_loop>:
	return rc;
}

int flash_stm32_block_erase_loop(struct device *dev, unsigned int offset,
				 unsigned int len)
{
 800390a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800390e:	4614      	mov	r4, r2
 8003910:	aa01      	add	r2, sp, #4
 8003912:	4606      	mov	r6, r0
 8003914:	460f      	mov	r7, r1
 8003916:	f7ff ff11 	bl	800373c <_impl_flash_get_page_info_by_offs>
	u32_t start_sector, end_sector;
	u32_t i;
	int rc = 0;

	rc = flash_get_page_info_by_offs(dev, offset, &info);
	if (rc) {
 800391a:	b960      	cbnz	r0, 8003936 <flash_stm32_block_erase_loop+0x2c>
		return rc;
	}
	start_sector = info.index;
	rc = flash_get_page_info_by_offs(dev, offset + len - 1, &info);
 800391c:	1e61      	subs	r1, r4, #1
 800391e:	aa01      	add	r2, sp, #4
 8003920:	4439      	add	r1, r7
 8003922:	4630      	mov	r0, r6
	start_sector = info.index;
 8003924:	9d03      	ldr	r5, [sp, #12]
 8003926:	f7ff ff09 	bl	800373c <_impl_flash_get_page_info_by_offs>
	if (rc) {
 800392a:	b920      	cbnz	r0, 8003936 <flash_stm32_block_erase_loop+0x2c>
		return rc;
	}
	end_sector = info.index;
 800392c:	9f03      	ldr	r7, [sp, #12]
 800392e:	ea4f 08c5 	mov.w	r8, r5, lsl #3

	for (i = start_sector; i <= end_sector; i++) {
 8003932:	42bd      	cmp	r5, r7
 8003934:	d902      	bls.n	800393c <flash_stm32_block_erase_loop+0x32>
			break;
		}
	}

	return rc;
}
 8003936:	b004      	add	sp, #16
 8003938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 800393c:	68b3      	ldr	r3, [r6, #8]
 800393e:	681c      	ldr	r4, [r3, #0]
	if (regs->cr & FLASH_CR_LOCK) {
 8003940:	6923      	ldr	r3, [r4, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db20      	blt.n	8003988 <flash_stm32_block_erase_loop+0x7e>
	rc = flash_stm32_wait_flash_idle(dev);
 8003946:	4630      	mov	r0, r6
 8003948:	f7ff ff79 	bl	800383e <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 800394c:	2800      	cmp	r0, #0
 800394e:	dbf2      	blt.n	8003936 <flash_stm32_block_erase_loop+0x2c>
	regs->cr &= STM32F4X_SECTOR_MASK;
 8003950:	6923      	ldr	r3, [r4, #16]
 8003952:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003956:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_SER | (sector << 3);
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	ea43 0308 	orr.w	r3, r3, r8
 8003962:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_STRT;
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396a:	6123      	str	r3, [r4, #16]
	rc = flash_stm32_wait_flash_idle(dev);
 800396c:	4630      	mov	r0, r6
	tmp = regs->cr;
 800396e:	6923      	ldr	r3, [r4, #16]
	rc = flash_stm32_wait_flash_idle(dev);
 8003970:	f7ff ff65 	bl	800383e <flash_stm32_wait_flash_idle>
	regs->cr &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 8003974:	6923      	ldr	r3, [r4, #16]
		if (rc < 0) {
 8003976:	2800      	cmp	r0, #0
	regs->cr &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 8003978:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800397c:	6123      	str	r3, [r4, #16]
 800397e:	f108 0808 	add.w	r8, r8, #8
		if (rc < 0) {
 8003982:	dbd8      	blt.n	8003936 <flash_stm32_block_erase_loop+0x2c>
	for (i = start_sector; i <= end_sector; i++) {
 8003984:	3501      	adds	r5, #1
 8003986:	e7d4      	b.n	8003932 <flash_stm32_block_erase_loop+0x28>
		return -EIO;
 8003988:	f06f 0004 	mvn.w	r0, #4
 800398c:	e7d3      	b.n	8003936 <flash_stm32_block_erase_loop+0x2c>

0800398e <flash_stm32_write_range>:

int flash_stm32_write_range(struct device *dev, unsigned int offset,
			    const void *data, unsigned int len)
{
 800398e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003992:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
 8003996:	4607      	mov	r7, r0
 8003998:	3e01      	subs	r6, #1
 800399a:	4615      	mov	r5, r2
 800399c:	eb02 0803 	add.w	r8, r2, r3
	int i, rc = 0;
 80039a0:	2000      	movs	r0, #0

	for (i = 0; i < len; i++, offset++) {
 80039a2:	45a8      	cmp	r8, r5
 80039a4:	d101      	bne.n	80039aa <flash_stm32_write_range+0x1c>
 80039a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80039aa:	68bb      	ldr	r3, [r7, #8]
		rc = write_byte(dev, offset, ((const u8_t *) data)[i]);
 80039ac:	f815 9b01 	ldrb.w	r9, [r5], #1
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80039b0:	681c      	ldr	r4, [r3, #0]
	if (regs->cr & FLASH_CR_LOCK) {
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db1c      	blt.n	80039f2 <flash_stm32_write_range+0x64>
	rc = flash_stm32_wait_flash_idle(dev);
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7ff ff40 	bl	800383e <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 80039be:	2800      	cmp	r0, #0
 80039c0:	db15      	blt.n	80039ee <flash_stm32_write_range+0x60>
	regs->cr &= ~CR_PSIZE_MASK;
 80039c2:	6923      	ldr	r3, [r4, #16]
 80039c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c8:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_PSIZE_BYTE;
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_PG;
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6123      	str	r3, [r4, #16]
	tmp = regs->cr;
 80039d6:	6923      	ldr	r3, [r4, #16]
	*((u8_t *) offset + CONFIG_FLASH_BASE_ADDRESS) = val;
 80039d8:	f806 9f01 	strb.w	r9, [r6, #1]!
	rc = flash_stm32_wait_flash_idle(dev);
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff2e 	bl	800383e <flash_stm32_wait_flash_idle>
	regs->cr &= (~FLASH_CR_PG);
 80039e2:	6923      	ldr	r3, [r4, #16]
		if (rc < 0) {
 80039e4:	2800      	cmp	r0, #0
	regs->cr &= (~FLASH_CR_PG);
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6123      	str	r3, [r4, #16]
		if (rc < 0) {
 80039ec:	dad9      	bge.n	80039a2 <flash_stm32_write_range+0x14>
			return rc;
		}
	}

	return rc;
}
 80039ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
 80039f2:	f06f 0004 	mvn.w	r0, #4
 80039f6:	e7fa      	b.n	80039ee <flash_stm32_write_range+0x60>

080039f8 <flash_stm32_page_layout>:
			     const struct flash_pages_layout **layout,
			     size_t *layout_size)
{
	ARG_UNUSED(dev);

	*layout = stm32f4_flash_layout;
 80039f8:	4b02      	ldr	r3, [pc, #8]	; (8003a04 <flash_stm32_page_layout+0xc>)
 80039fa:	600b      	str	r3, [r1, #0]
	*layout_size = ARRAY_SIZE(stm32f4_flash_layout);
 80039fc:	2303      	movs	r3, #3
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	08013514 	.word	0x08013514

08003a08 <gpio_stm32_isr>:
 * @brief EXTI interrupt callback
 */
static void gpio_stm32_isr(int line, void *arg)
{
	struct device *dev = arg;
	struct gpio_stm32_data *data = dev->driver_data;
 8003a08:	688a      	ldr	r2, [r1, #8]

	if (BIT(line) & data->cb_pins) {
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	40c3      	lsrs	r3, r0
 8003a0e:	07db      	lsls	r3, r3, #31
{
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	460e      	mov	r6, r1
	if (BIT(line) & data->cb_pins) {
 8003a14:	d50d      	bpl.n	8003a32 <gpio_stm32_isr+0x2a>
		_gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8003a16:	2501      	movs	r5, #1
 8003a18:	6854      	ldr	r4, [r2, #4]
 8003a1a:	4085      	lsls	r5, r0
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
 8003a1c:	b14c      	cbz	r4, 8003a32 <gpio_stm32_isr+0x2a>
		if (cb->pin_mask & pins) {
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	421d      	tst	r5, r3
 8003a22:	d004      	beq.n	8003a2e <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8003a24:	6863      	ldr	r3, [r4, #4]
 8003a26:	462a      	mov	r2, r5
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
 8003a2e:	6824      	ldr	r4, [r4, #0]
 8003a30:	e7f4      	b.n	8003a1c <gpio_stm32_isr+0x14>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8003a34:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->driver_data;
 8003a36:	6883      	ldr	r3, [r0, #8]
	if (set) {
 8003a38:	b13a      	cbz	r2, 8003a4a <gpio_stm32_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
 8003a3e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 8003a40:	6059      	str	r1, [r3, #4]
	if (!list->tail) {
 8003a42:	b902      	cbnz	r2, 8003a46 <gpio_stm32_manage_callback+0x12>
		list->tail = list->head;
 8003a44:	6099      	str	r1, [r3, #8]

	_gpio_manage_callback(&data->cb, callback, set);

	return 0;
}
 8003a46:	2000      	movs	r0, #0
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	6858      	ldr	r0, [r3, #4]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d0fa      	beq.n	8003a46 <gpio_stm32_manage_callback+0x12>
		if (test == node) {
 8003a50:	4281      	cmp	r1, r0
 8003a52:	d10e      	bne.n	8003a72 <gpio_stm32_manage_callback+0x3e>
 8003a54:	689c      	ldr	r4, [r3, #8]
 8003a56:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
 8003a58:	b932      	cbnz	r2, 8003a68 <gpio_stm32_manage_callback+0x34>
		if (list->tail == node) {
 8003a5a:	42a1      	cmp	r1, r4
		list->head = node->next;
 8003a5c:	6058      	str	r0, [r3, #4]
		if (list->tail == node) {
 8003a5e:	d100      	bne.n	8003a62 <gpio_stm32_manage_callback+0x2e>
			list->tail = list->head;
 8003a60:	6098      	str	r0, [r3, #8]
	node->next = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	600b      	str	r3, [r1, #0]
 8003a66:	e7ee      	b.n	8003a46 <gpio_stm32_manage_callback+0x12>
		if (list->tail == node) {
 8003a68:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
 8003a6a:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
 8003a6c:	bf08      	it	eq
 8003a6e:	609a      	streq	r2, [r3, #8]
 8003a70:	e7f7      	b.n	8003a62 <gpio_stm32_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8003a72:	4602      	mov	r2, r0
 8003a74:	6800      	ldr	r0, [r0, #0]
 8003a76:	e7e9      	b.n	8003a4c <gpio_stm32_manage_callback+0x18>

08003a78 <gpio_stm32_enable_callback>:

static int gpio_stm32_enable_callback(struct device *dev,
				      int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 8003a78:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a7a:	b939      	cbnz	r1, 8003a8c <gpio_stm32_enable_callback+0x14>
		return -ENOTSUP;
	}

	data->cb_pins |= BIT(pin);
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	fa03 f202 	lsl.w	r2, r3, r2
 8003a82:	6803      	ldr	r3, [r0, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	6003      	str	r3, [r0, #0]

	return 0;
}
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4770      	bx	lr
		return -ENOTSUP;
 8003a8c:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003a90:	e7fa      	b.n	8003a88 <gpio_stm32_enable_callback+0x10>

08003a92 <gpio_stm32_disable_callback>:

static int gpio_stm32_disable_callback(struct device *dev,
				       int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 8003a92:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a94:	b941      	cbnz	r1, 8003aa8 <gpio_stm32_disable_callback+0x16>
		return -ENOTSUP;
	}

	data->cb_pins &= ~BIT(pin);
 8003a96:	2301      	movs	r3, #1
 8003a98:	fa03 f202 	lsl.w	r2, r3, r2
 8003a9c:	6803      	ldr	r3, [r0, #0]
 8003a9e:	ea23 0302 	bic.w	r3, r3, r2
 8003aa2:	6003      	str	r3, [r0, #0]

	return 0;
}
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4770      	bx	lr
		return -ENOTSUP;
 8003aa8:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003aac:	e7fa      	b.n	8003aa4 <gpio_stm32_disable_callback+0x12>
	...

08003ab0 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003ab0:	6803      	ldr	r3, [r0, #0]

	/* enable clock for subsystem */
	struct device *clk =
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <gpio_stm32_init+0x1c>)
{
 8003ab4:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003ab6:	689c      	ldr	r4, [r3, #8]
	struct device *clk =
 8003ab8:	f00d fde6 	bl	8011688 <device_get_binding>
 8003abc:	6843      	ldr	r3, [r0, #4]
 8003abe:	f104 0108 	add.w	r1, r4, #8
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4798      	blx	r3
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken);

	return 0;
}
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	bf00      	nop
 8003acc:	080130b4 	.word	0x080130b4

08003ad0 <gpio_stm32_read>:
{
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003ad4:	6803      	ldr	r3, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003ad6:	460c      	mov	r4, r1
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003ad8:	689b      	ldr	r3, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003ada:	b931      	cbnz	r1, 8003aea <gpio_stm32_read+0x1a>
	*value = stm32_gpio_get(cfg->base, pin);
 8003adc:	4611      	mov	r1, r2
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	f7ff f8a1 	bl	8002c26 <stm32_gpio_get>
 8003ae4:	6028      	str	r0, [r5, #0]
}
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
 8003aea:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8003aee:	e7fa      	b.n	8003ae6 <gpio_stm32_read+0x16>

08003af0 <gpio_stm32_write>:
{
 8003af0:	b410      	push	{r4}
 8003af2:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003af4:	6802      	ldr	r2, [r0, #0]
 8003af6:	6890      	ldr	r0, [r2, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003af8:	b929      	cbnz	r1, 8003b06 <gpio_stm32_write+0x16>
	return stm32_gpio_set(cfg->base, pin, value);
 8003afa:	4621      	mov	r1, r4
 8003afc:	461a      	mov	r2, r3
 8003afe:	6800      	ldr	r0, [r0, #0]
}
 8003b00:	bc10      	pop	{r4}
	return stm32_gpio_set(cfg->base, pin, value);
 8003b02:	f7ff b886 	b.w	8002c12 <stm32_gpio_set>
}
 8003b06:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8003b0a:	bc10      	pop	{r4}
 8003b0c:	4770      	bx	lr
	...

08003b10 <gpio_stm32_config>:
{
 8003b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b12:	461c      	mov	r4, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003b14:	6803      	ldr	r3, [r0, #0]
{
 8003b16:	4607      	mov	r7, r0
 8003b18:	4615      	mov	r5, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003b1a:	689e      	ldr	r6, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003b1c:	bb59      	cbnz	r1, 8003b76 <gpio_stm32_config+0x66>
	map_res = stm32_gpio_flags_to_conf(flags, &pincfg);
 8003b1e:	a901      	add	r1, sp, #4
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff f813 	bl	8002b4c <stm32_gpio_flags_to_conf>
	if (map_res) {
 8003b26:	bb10      	cbnz	r0, 8003b6e <gpio_stm32_config+0x5e>
	if (stm32_gpio_configure(cfg->base, pin, pincfg, 0)) {
 8003b28:	4603      	mov	r3, r0
 8003b2a:	9a01      	ldr	r2, [sp, #4]
 8003b2c:	6830      	ldr	r0, [r6, #0]
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f7ff f829 	bl	8002b86 <stm32_gpio_configure>
 8003b34:	bb10      	cbnz	r0, 8003b7c <gpio_stm32_config+0x6c>
	if (flags & GPIO_INT) {
 8003b36:	f014 0002 	ands.w	r0, r4, #2
 8003b3a:	d018      	beq.n	8003b6e <gpio_stm32_config+0x5e>
		stm32_exti_set_callback(pin, gpio_stm32_isr, dev);
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	4911      	ldr	r1, [pc, #68]	; (8003b84 <gpio_stm32_config+0x74>)
 8003b40:	4628      	mov	r0, r5
 8003b42:	f7ff fcd7 	bl	80034f4 <stm32_exti_set_callback>
		stm32_gpio_enable_int(cfg->port, pin);
 8003b46:	4629      	mov	r1, r5
 8003b48:	6870      	ldr	r0, [r6, #4]
 8003b4a:	f7ff f871 	bl	8002c30 <stm32_gpio_enable_int>
		if (flags & GPIO_INT_EDGE) {
 8003b4e:	06a2      	lsls	r2, r4, #26
 8003b50:	d509      	bpl.n	8003b66 <gpio_stm32_config+0x56>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
 8003b52:	0663      	lsls	r3, r4, #25
 8003b54:	d40d      	bmi.n	8003b72 <gpio_stm32_config+0x62>
				edge = STM32_EXTI_TRIG_FALLING;
 8003b56:	f014 0f04 	tst.w	r4, #4
 8003b5a:	bf14      	ite	ne
 8003b5c:	2101      	movne	r1, #1
 8003b5e:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8003b60:	4628      	mov	r0, r5
 8003b62:	f7ff fcb1 	bl	80034c8 <stm32_exti_trigger>
		stm32_exti_enable(pin);
 8003b66:	4628      	mov	r0, r5
 8003b68:	f7ff fc8c 	bl	8003484 <stm32_exti_enable>
	return 0;
 8003b6c:	2000      	movs	r0, #0
}
 8003b6e:	b003      	add	sp, #12
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
				edge = STM32_EXTI_TRIG_RISING |
 8003b72:	2103      	movs	r1, #3
 8003b74:	e7f4      	b.n	8003b60 <gpio_stm32_config+0x50>
		return -ENOTSUP;
 8003b76:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8003b7a:	e7f8      	b.n	8003b6e <gpio_stm32_config+0x5e>
		return -EIO;
 8003b7c:	f06f 0004 	mvn.w	r0, #4
 8003b80:	e7f5      	b.n	8003b6e <gpio_stm32_config+0x5e>
 8003b82:	bf00      	nop
 8003b84:	08003a09 	.word	0x08003a09

08003b88 <stm32_i2c_msg_write>:
#else

s32_t stm32_i2c_msg_write(struct device *dev, struct i2c_msg *msg,
			  u8_t *next_msg_flags, u16_t saddr)
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003b88:	6802      	ldr	r2, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	6892      	ldr	r2, [r2, #8]
{
 8003b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003b90:	6815      	ldr	r5, [r2, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003b92:	6886      	ldr	r6, [r0, #8]
 8003b94:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	u32_t len = msg->len;
	u8_t *buf = msg->buf;
 8003b98:	e891 0011 	ldmia.w	r1, {r0, r4}
 8003b9c:	6015      	str	r5, [r2, #0]

	ARG_UNUSED(next_msg_flags);

	LL_I2C_AcknowledgeNextData(i2c, LL_I2C_ACK);

	if (msg->flags & I2C_MSG_RESTART) {
 8003b9e:	7a0d      	ldrb	r5, [r1, #8]
 8003ba0:	076d      	lsls	r5, r5, #29
 8003ba2:	d526      	bpl.n	8003bf2 <stm32_i2c_msg_write+0x6a>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003ba4:	6815      	ldr	r5, [r2, #0]
 8003ba6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003baa:	6015      	str	r5, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003bac:	6955      	ldr	r5, [r2, #20]
		LL_I2C_GenerateStartCondition(i2c);
		while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003bae:	07ed      	lsls	r5, r5, #31
 8003bb0:	d5fc      	bpl.n	8003bac <stm32_i2c_msg_write+0x24>
			;
		}

		if (I2C_ADDR_10_BITS & data->dev_config) {
 8003bb2:	6835      	ldr	r5, [r6, #0]
 8003bb4:	f015 0f01 	tst.w	r5, #1
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003bb8:	6915      	ldr	r5, [r2, #16]
 8003bba:	d02a      	beq.n	8003c12 <stm32_i2c_msg_write+0x8a>
			u8_t slave = (((saddr & 0x0300) >> 7) & 0xFF);
 8003bbc:	11db      	asrs	r3, r3, #7
 8003bbe:	f003 0306 	and.w	r3, r3, #6
 8003bc2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003bc6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003bca:	432b      	orrs	r3, r5
 8003bcc:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 8003bce:	6953      	ldr	r3, [r2, #20]
			u8_t header = slave | HEADER;

			LL_I2C_TransmitData8(i2c, header);
			while (!LL_I2C_IsActiveFlag_ADD10(i2c)) {
 8003bd0:	071d      	lsls	r5, r3, #28
 8003bd2:	d5fc      	bpl.n	8003bce <stm32_i2c_msg_write+0x46>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003bd4:	6913      	ldr	r3, [r2, #16]
 8003bd6:	7935      	ldrb	r5, [r6, #4]
 8003bd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bdc:	432b      	orrs	r3, r5
 8003bde:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003be0:	6953      	ldr	r3, [r2, #20]
		} else {
			u8_t slave = (saddr << 1) & 0xFF;

			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_WRITE);
		}
		while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003be2:	079b      	lsls	r3, r3, #30
 8003be4:	d5fc      	bpl.n	8003be0 <stm32_i2c_msg_write+0x58>
  tmpreg = I2Cx->SR1;
 8003be6:	6953      	ldr	r3, [r2, #20]
 8003be8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003bea:	9b01      	ldr	r3, [sp, #4]
  tmpreg = I2Cx->SR2;
 8003bec:	6993      	ldr	r3, [r2, #24]
 8003bee:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	4404      	add	r4, r0
			;
		}
		LL_I2C_ClearFlag_ADDR(i2c);
	}

	while (len) {
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d111      	bne.n	8003c1c <stm32_i2c_msg_write+0x94>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8003bf8:	6953      	ldr	r3, [r2, #20]
		LL_I2C_TransmitData8(i2c, *buf);
		buf++;
		len--;
	}

	while (!LL_I2C_IsActiveFlag_BTF(i2c)) {
 8003bfa:	075b      	lsls	r3, r3, #29
 8003bfc:	d5fc      	bpl.n	8003bf8 <stm32_i2c_msg_write+0x70>
		;
	}

	if (msg->flags & I2C_MSG_STOP) {
 8003bfe:	7a08      	ldrb	r0, [r1, #8]
 8003c00:	f010 0002 	ands.w	r0, r0, #2
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003c04:	bf1f      	itttt	ne
 8003c06:	6813      	ldrne	r3, [r2, #0]
 8003c08:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 8003c0c:	6013      	strne	r3, [r2, #0]
		LL_I2C_GenerateStopCondition(i2c);
	}

	return 0;
 8003c0e:	2000      	movne	r0, #0
 8003c10:	e010      	b.n	8003c34 <stm32_i2c_msg_write+0xac>
			u8_t slave = (saddr << 1) & 0xFF;
 8003c12:	005b      	lsls	r3, r3, #1
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003c1a:	e7df      	b.n	8003bdc <stm32_i2c_msg_write+0x54>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8003c1c:	6953      	ldr	r3, [r2, #20]
			if (LL_I2C_IsActiveFlag_TXE(i2c)) {
 8003c1e:	061e      	lsls	r6, r3, #24
 8003c20:	d40a      	bmi.n	8003c38 <stm32_i2c_msg_write+0xb0>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8003c22:	6953      	ldr	r3, [r2, #20]
			if (LL_I2C_IsActiveFlag_AF(i2c)) {
 8003c24:	055d      	lsls	r5, r3, #21
 8003c26:	d5f9      	bpl.n	8003c1c <stm32_i2c_msg_write+0x94>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8003c28:	6953      	ldr	r3, [r2, #20]
 8003c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2e:	6153      	str	r3, [r2, #20]
				return -EIO;
 8003c30:	f06f 0004 	mvn.w	r0, #4
}
 8003c34:	b002      	add	sp, #8
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c38:	6913      	ldr	r3, [r2, #16]
 8003c3a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8003c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c42:	432b      	orrs	r3, r5
 8003c44:	6113      	str	r3, [r2, #16]
 8003c46:	e7d5      	b.n	8003bf4 <stm32_i2c_msg_write+0x6c>

08003c48 <stm32_i2c_msg_read>:

s32_t stm32_i2c_msg_read(struct device *dev, struct i2c_msg *msg,
			 u8_t *next_msg_flags, u16_t saddr)
{
 8003c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003c4a:	6802      	ldr	r2, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003c4c:	6886      	ldr	r6, [r0, #8]
	I2C_TypeDef *i2c = cfg->i2c;
 8003c4e:	6892      	ldr	r2, [r2, #8]
	u32_t len = msg->len;
 8003c50:	6848      	ldr	r0, [r1, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8003c52:	6892      	ldr	r2, [r2, #8]
	u8_t *buf = msg->buf;
 8003c54:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c56:	6814      	ldr	r4, [r2, #0]
 8003c58:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003c5c:	6014      	str	r4, [r2, #0]

	ARG_UNUSED(next_msg_flags);

	LL_I2C_AcknowledgeNextData(i2c, LL_I2C_ACK);

	if (msg->flags & I2C_MSG_RESTART) {
 8003c5e:	7a0c      	ldrb	r4, [r1, #8]
 8003c60:	0764      	lsls	r4, r4, #29
 8003c62:	d543      	bpl.n	8003cec <stm32_i2c_msg_read+0xa4>
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003c64:	6814      	ldr	r4, [r2, #0]
 8003c66:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003c6a:	6014      	str	r4, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003c6c:	6954      	ldr	r4, [r2, #20]
		LL_I2C_GenerateStartCondition(i2c);
		while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003c6e:	07e7      	lsls	r7, r4, #31
 8003c70:	d5fc      	bpl.n	8003c6c <stm32_i2c_msg_read+0x24>
			;
		}

		if (I2C_ADDR_10_BITS & data->dev_config) {
 8003c72:	6834      	ldr	r4, [r6, #0]
 8003c74:	07e4      	lsls	r4, r4, #31
 8003c76:	d551      	bpl.n	8003d1c <stm32_i2c_msg_read+0xd4>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c78:	6917      	ldr	r7, [r2, #16]
			u8_t slave = (((saddr &	0x0300) >> 7) & 0xFF);
 8003c7a:	11dc      	asrs	r4, r3, #7
 8003c7c:	f004 0406 	and.w	r4, r4, #6
 8003c80:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
 8003c84:	f044 0ef0 	orr.w	lr, r4, #240	; 0xf0
 8003c88:	ea47 070e 	orr.w	r7, r7, lr
 8003c8c:	6117      	str	r7, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 8003c8e:	6957      	ldr	r7, [r2, #20]
			u8_t header = slave | HEADER;

			LL_I2C_TransmitData8(i2c, header);
			while (!LL_I2C_IsActiveFlag_ADD10(i2c)) {
 8003c90:	073f      	lsls	r7, r7, #28
 8003c92:	d5fc      	bpl.n	8003c8e <stm32_i2c_msg_read+0x46>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c94:	6917      	ldr	r7, [r2, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
 8003c9c:	433b      	orrs	r3, r7
 8003c9e:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003ca0:	6953      	ldr	r3, [r2, #20]
				;
			}
			slave = saddr & 0xFF;
			LL_I2C_TransmitData8(i2c, slave);
			while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003ca2:	079b      	lsls	r3, r3, #30
 8003ca4:	d5fc      	bpl.n	8003ca0 <stm32_i2c_msg_read+0x58>
  tmpreg = I2Cx->SR1;
 8003ca6:	6953      	ldr	r3, [r2, #20]
 8003ca8:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8003caa:	9b00      	ldr	r3, [sp, #0]
  tmpreg = I2Cx->SR2;
 8003cac:	6993      	ldr	r3, [r2, #24]
 8003cae:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8003cb0:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003cba:	6953      	ldr	r3, [r2, #20]
				;
			}
			LL_I2C_ClearFlag_ADDR(i2c);
			LL_I2C_GenerateStartCondition(i2c);
			while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003cbc:	07df      	lsls	r7, r3, #31
 8003cbe:	d5fc      	bpl.n	8003cba <stm32_i2c_msg_read+0x72>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003cc0:	6913      	ldr	r3, [r2, #16]
 8003cc2:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8003cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cca:	431c      	orrs	r4, r3
 8003ccc:	6114      	str	r4, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003cce:	6953      	ldr	r3, [r2, #20]
			u8_t slave = ((saddr) << 1) & 0xFF;

			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
		}

		while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003cd0:	079b      	lsls	r3, r3, #30
 8003cd2:	d5fc      	bpl.n	8003cce <stm32_i2c_msg_read+0x86>
			;
		}

		if (len == 1) {
 8003cd4:	2801      	cmp	r0, #1
 8003cd6:	d12b      	bne.n	8003d30 <stm32_i2c_msg_read+0xe8>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8003cde:	6013      	str	r3, [r2, #0]
  tmpreg = I2Cx->SR1;
 8003ce0:	6953      	ldr	r3, [r2, #20]
 8003ce2:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003ce4:	9b01      	ldr	r3, [sp, #4]
  tmpreg = I2Cx->SR2;
 8003ce6:	6993      	ldr	r3, [r2, #24]
 8003ce8:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003cea:	9b01      	ldr	r3, [sp, #4]
		}

		LL_I2C_ClearFlag_ADDR(i2c);
	}

	while (len) {
 8003cec:	b198      	cbz	r0, 8003d16 <stm32_i2c_msg_read+0xce>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8003cee:	6953      	ldr	r3, [r2, #20]
		while (!LL_I2C_IsActiveFlag_RXNE(i2c)) {
 8003cf0:	065f      	lsls	r7, r3, #25
 8003cf2:	d5fc      	bpl.n	8003cee <stm32_i2c_msg_read+0xa6>
			;
		}
		switch (len) {
 8003cf4:	2802      	cmp	r0, #2
 8003cf6:	d025      	beq.n	8003d44 <stm32_i2c_msg_read+0xfc>
 8003cf8:	2803      	cmp	r0, #3
 8003cfa:	f105 0401 	add.w	r4, r5, #1
 8003cfe:	d032      	beq.n	8003d66 <stm32_i2c_msg_read+0x11e>
 8003d00:	2801      	cmp	r0, #1
 8003d02:	d134      	bne.n	8003d6e <stm32_i2c_msg_read+0x126>
		case 1:
			if (msg->flags & I2C_MSG_STOP) {
 8003d04:	7a0b      	ldrb	r3, [r1, #8]
 8003d06:	079c      	lsls	r4, r3, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003d08:	bf42      	ittt	mi
 8003d0a:	6813      	ldrmi	r3, [r2, #0]
 8003d0c:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8003d10:	6013      	strmi	r3, [r2, #0]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003d12:	6913      	ldr	r3, [r2, #16]
 8003d14:	702b      	strb	r3, [r5, #0]
			buf++;
		}
	}

	return 0;
}
 8003d16:	2000      	movs	r0, #0
 8003d18:	b003      	add	sp, #12
 8003d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003d1c:	6914      	ldr	r4, [r2, #16]
			u8_t slave = ((saddr) << 1) & 0xFF;
 8003d1e:	005b      	lsls	r3, r3, #1
			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 8003d2a:	4323      	orrs	r3, r4
 8003d2c:	6113      	str	r3, [r2, #16]
 8003d2e:	e7ce      	b.n	8003cce <stm32_i2c_msg_read+0x86>
		} else if (len == 2) {
 8003d30:	2802      	cmp	r0, #2
 8003d32:	d1d5      	bne.n	8003ce0 <stm32_i2c_msg_read+0x98>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003d34:	6813      	ldr	r3, [r2, #0]
 8003d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d3a:	6013      	str	r3, [r2, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d42:	e7cc      	b.n	8003cde <stm32_i2c_msg_read+0x96>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8003d44:	6953      	ldr	r3, [r2, #20]
			while (!LL_I2C_IsActiveFlag_BTF(i2c)) {
 8003d46:	0758      	lsls	r0, r3, #29
 8003d48:	d5fc      	bpl.n	8003d44 <stm32_i2c_msg_read+0xfc>
			if (msg->flags & I2C_MSG_STOP) {
 8003d4a:	7a0b      	ldrb	r3, [r1, #8]
 8003d4c:	079b      	lsls	r3, r3, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003d4e:	bf42      	ittt	mi
 8003d50:	6813      	ldrmi	r3, [r2, #0]
 8003d52:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8003d56:	6013      	strmi	r3, [r2, #0]
				*data->current.buf = LL_I2C_ReceiveData8(i2c);
 8003d58:	6a73      	ldr	r3, [r6, #36]	; 0x24
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003d5a:	6911      	ldr	r1, [r2, #16]
 8003d5c:	7019      	strb	r1, [r3, #0]
 8003d5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003d60:	6912      	ldr	r2, [r2, #16]
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e7d7      	b.n	8003d16 <stm32_i2c_msg_read+0xce>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6c:	6013      	str	r3, [r2, #0]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003d6e:	6913      	ldr	r3, [r2, #16]
 8003d70:	702b      	strb	r3, [r5, #0]
			len--;
 8003d72:	3801      	subs	r0, #1
			buf++;
 8003d74:	4625      	mov	r5, r4
 8003d76:	e7b9      	b.n	8003cec <stm32_i2c_msg_read+0xa4>

08003d78 <stm32_i2c_configure_timing>:
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;

	switch (I2C_SPEED_GET(data->dev_config)) {
 8003d78:	6882      	ldr	r2, [r0, #8]
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003d7a:	6803      	ldr	r3, [r0, #0]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003d7c:	6812      	ldr	r2, [r2, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8003d7e:	689b      	ldr	r3, [r3, #8]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003d80:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8003d84:	2a01      	cmp	r2, #1
{
 8003d86:	b510      	push	{r4, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8003d88:	689b      	ldr	r3, [r3, #8]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003d8a:	d004      	beq.n	8003d96 <stm32_i2c_configure_timing+0x1e>
 8003d8c:	2a02      	cmp	r2, #2
 8003d8e:	d021      	beq.n	8003dd4 <stm32_i2c_configure_timing+0x5c>
		break;
	case I2C_SPEED_FAST:
		LL_I2C_ConfigSpeed(i2c, clock, 400000, LL_I2C_DUTYCYCLE_2);
		break;
	default:
		return -EINVAL;
 8003d90:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8003d94:	bd10      	pop	{r4, pc}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d96:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <stm32_i2c_configure_timing+0xa8>)
 8003d9a:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003da2:	4310      	orrs	r0, r2
 8003da4:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003da6:	6a18      	ldr	r0, [r3, #32]
 8003da8:	3201      	adds	r2, #1
 8003daa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003dae:	4302      	orrs	r2, r0
 8003db0:	621a      	str	r2, [r3, #32]
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003db2:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <stm32_i2c_configure_timing+0xac>)
 8003db4:	fbb1 f1f2 	udiv	r1, r1, r2
 8003db8:	f3c1 020b 	ubfx	r2, r1, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003dbc:	2a03      	cmp	r2, #3
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003dc4:	bf98      	it	ls
 8003dc6:	2104      	movls	r1, #4
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003dc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
	return 0;
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	bd10      	pop	{r4, pc}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003dd4:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003dd6:	4c12      	ldr	r4, [pc, #72]	; (8003e20 <stm32_i2c_configure_timing+0xa8>)
 8003dd8:	fbb1 f4f4 	udiv	r4, r1, r4
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003ddc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003de0:	4320      	orrs	r0, r4
 8003de2:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003de4:	6a18      	ldr	r0, [r3, #32]
 8003de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dea:	4362      	muls	r2, r4
 8003dec:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003df0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003df4:	fbb2 f2f4 	udiv	r2, r2, r4
 8003df8:	3201      	adds	r2, #1
 8003dfa:	4302      	orrs	r2, r0
 8003dfc:	621a      	str	r2, [r3, #32]
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <stm32_i2c_configure_timing+0xb0>)
 8003e00:	fbb1 f1f2 	udiv	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e04:	b149      	cbz	r1, 8003e1a <stm32_i2c_configure_timing+0xa2>
 8003e06:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003e10:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e14:	4311      	orrs	r1, r2
 8003e16:	61d9      	str	r1, [r3, #28]
 8003e18:	e7da      	b.n	8003dd0 <stm32_i2c_configure_timing+0x58>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003e1a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003e1e:	e7f4      	b.n	8003e0a <stm32_i2c_configure_timing+0x92>
 8003e20:	000f4240 	.word	0x000f4240
 8003e24:	00030d40 	.word	0x00030d40
 8003e28:	00124f80 	.word	0x00124f80

08003e2c <i2c_stm32_runtime_configure>:

#define SYS_LOG_LEVEL CONFIG_SYS_LOG_I2C_LEVEL
#include <logging/sys_log.h>

static int i2c_stm32_runtime_configure(struct device *dev, u32_t config)
{
 8003e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003e30:	6803      	ldr	r3, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003e32:	f8d0 8008 	ldr.w	r8, [r0, #8]
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003e36:	689f      	ldr	r7, [r3, #8]
	I2C_TypeDef *i2c = cfg->i2c;
	u32_t clock = 0;
 8003e38:	ae02      	add	r6, sp, #8
{
 8003e3a:	4605      	mov	r5, r0
	u32_t clock = 0;
 8003e3c:	2300      	movs	r3, #0
	 * SYSCLK frequency.
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003e3e:	480e      	ldr	r0, [pc, #56]	; (8003e78 <i2c_stm32_runtime_configure+0x4c>)
	I2C_TypeDef *i2c = cfg->i2c;
 8003e40:	68bc      	ldr	r4, [r7, #8]
	u32_t clock = 0;
 8003e42:	f846 3d04 	str.w	r3, [r6, #-4]!
{
 8003e46:	4689      	mov	r9, r1
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003e48:	f00d fc1e 	bl	8011688 <device_get_binding>
	const struct clock_control_driver_api *api = dev->driver_api;

	__ASSERT(api->get_rate, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8003e4c:	6843      	ldr	r3, [r0, #4]
 8003e4e:	4632      	mov	r2, r6
 8003e50:	4639      	mov	r1, r7
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4798      	blx	r3
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003e56:	6823      	ldr	r3, [r4, #0]
			(clock_control_subsys_t *) &cfg->pclken, &clock);
#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	data->dev_config = config;
 8003e58:	f8c8 9000 	str.w	r9, [r8]
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6023      	str	r3, [r4, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003e62:	6823      	ldr	r3, [r4, #0]

	LL_I2C_Disable(i2c);
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);

	return stm32_i2c_configure_timing(dev, clock);
 8003e64:	9901      	ldr	r1, [sp, #4]
 8003e66:	f023 031a 	bic.w	r3, r3, #26
 8003e6a:	6023      	str	r3, [r4, #0]
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f7ff ff83 	bl	8003d78 <stm32_i2c_configure_timing>
}
 8003e72:	b003      	add	sp, #12
 8003e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e78:	080130b4 	.word	0x080130b4

08003e7c <i2c_stm32_init>:
	.configure = i2c_stm32_runtime_configure,
	.transfer = i2c_stm32_transfer,
};

static int i2c_stm32_init(struct device *dev)
{
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4604      	mov	r4, r0
	struct device *clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003e80:	4817      	ldr	r0, [pc, #92]	; (8003ee0 <i2c_stm32_init+0x64>)
 8003e82:	f00d fc01 	bl	8011688 <device_get_binding>
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	689d      	ldr	r5, [r3, #8]
	return api->on(dev, sys);
 8003e8a:	6843      	ldr	r3, [r0, #4]
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4798      	blx	r3
#endif
#include <logging/sys_log.h>

static inline u32_t _i2c_map_dt_bitrate(u32_t bitrate)
{
	switch (bitrate) {
 8003e92:	68eb      	ldr	r3, [r5, #12]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <i2c_stm32_init+0x68>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01c      	beq.n	8003ed4 <i2c_stm32_init+0x58>
 8003e9a:	d807      	bhi.n	8003eac <i2c_stm32_init+0x30>
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <i2c_stm32_init+0x6c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01c      	beq.n	8003edc <i2c_stm32_init+0x60>
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <i2c_stm32_init+0x70>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00c      	beq.n	8003ec2 <i2c_stm32_init+0x46>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	SYS_LOG_ERR("Invalid I2C bit rate value");

	return 0;
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	e00b      	b.n	8003ec4 <i2c_stm32_init+0x48>
	switch (bitrate) {
 8003eac:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <i2c_stm32_init+0x74>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d012      	beq.n	8003ed8 <i2c_stm32_init+0x5c>
 8003eb2:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8003eb6:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d1f4      	bne.n	8003ea8 <i2c_stm32_init+0x2c>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8003ebe:	210a      	movs	r1, #10
 8003ec0:	e000      	b.n	8003ec4 <i2c_stm32_init+0x48>
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
 8003ec2:	2104      	movs	r1, #4
	}
#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	bitrate_cfg = _i2c_map_dt_bitrate(cfg->bitrate);

	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 8003ec4:	f041 0110 	orr.w	r1, r1, #16
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff ffaf 	bl	8003e2c <i2c_stm32_runtime_configure>
		SYS_LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 8003ece:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8003ed4:	2106      	movs	r1, #6
 8003ed6:	e7f5      	b.n	8003ec4 <i2c_stm32_init+0x48>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8003ed8:	2108      	movs	r1, #8
 8003eda:	e7f3      	b.n	8003ec4 <i2c_stm32_init+0x48>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8003edc:	2102      	movs	r1, #2
 8003ede:	e7f1      	b.n	8003ec4 <i2c_stm32_init+0x48>
 8003ee0:	080130b4 	.word	0x080130b4
 8003ee4:	000f4240 	.word	0x000f4240
 8003ee8:	000186a0 	.word	0x000186a0
 8003eec:	00061a80 	.word	0x00061a80
 8003ef0:	0033e140 	.word	0x0033e140

08003ef4 <i2c_stm32_transfer>:
{
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	4698      	mov	r8, r3
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003efa:	6803      	ldr	r3, [r0, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	689e      	ldr	r6, [r3, #8]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6033      	str	r3, [r6, #0]
	current->flags |= I2C_MSG_RESTART;
 8003f08:	7a0b      	ldrb	r3, [r1, #8]
 8003f0a:	f043 0304 	orr.w	r3, r3, #4
{
 8003f0e:	4607      	mov	r7, r0
 8003f10:	460c      	mov	r4, r1
 8003f12:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8003f14:	720b      	strb	r3, [r1, #8]
	int ret = 0;
 8003f16:	2000      	movs	r0, #0
	while (num_msgs > 0) {
 8003f18:	b92d      	cbnz	r5, 8003f26 <i2c_stm32_transfer+0x32>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6033      	str	r3, [r6, #0]
}
 8003f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (num_msgs > 1) {
 8003f26:	2d01      	cmp	r5, #1
 8003f28:	d91e      	bls.n	8003f68 <i2c_stm32_transfer+0x74>
			if (OPERATION(current) != OPERATION(next)) {
 8003f2a:	7d21      	ldrb	r1, [r4, #20]
 8003f2c:	7a23      	ldrb	r3, [r4, #8]
 8003f2e:	404b      	eors	r3, r1
 8003f30:	07db      	lsls	r3, r3, #31
 8003f32:	f104 0214 	add.w	r2, r4, #20
 8003f36:	d501      	bpl.n	8003f3c <i2c_stm32_transfer+0x48>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8003f38:	0748      	lsls	r0, r1, #29
 8003f3a:	d51a      	bpl.n	8003f72 <i2c_stm32_transfer+0x7e>
		if (current->len > 255) {
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d817      	bhi.n	8003f72 <i2c_stm32_transfer+0x7e>
		if ((num_msgs == 1) && !(current->flags & I2C_MSG_STOP)) {
 8003f42:	2d01      	cmp	r5, #1
 8003f44:	7a23      	ldrb	r3, [r4, #8]
 8003f46:	d101      	bne.n	8003f4c <i2c_stm32_transfer+0x58>
 8003f48:	0799      	lsls	r1, r3, #30
 8003f4a:	d512      	bpl.n	8003f72 <i2c_stm32_transfer+0x7e>
		if ((current->flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8003f4c:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, current, next_msg_flags,
 8003f50:	4621      	mov	r1, r4
 8003f52:	4643      	mov	r3, r8
 8003f54:	4638      	mov	r0, r7
		if ((current->flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8003f56:	d109      	bne.n	8003f6c <i2c_stm32_transfer+0x78>
			ret = stm32_i2c_msg_write(dev, current, next_msg_flags,
 8003f58:	f7ff fe16 	bl	8003b88 <stm32_i2c_msg_write>
		if (ret < 0) {
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	dbdc      	blt.n	8003f1a <i2c_stm32_transfer+0x26>
		num_msgs--;
 8003f60:	3d01      	subs	r5, #1
		current++;
 8003f62:	340c      	adds	r4, #12
		num_msgs--;
 8003f64:	b2ed      	uxtb	r5, r5
 8003f66:	e7d7      	b.n	8003f18 <i2c_stm32_transfer+0x24>
		u8_t *next_msg_flags = NULL;
 8003f68:	2200      	movs	r2, #0
 8003f6a:	e7e7      	b.n	8003f3c <i2c_stm32_transfer+0x48>
			ret = stm32_i2c_msg_read(dev, current, next_msg_flags,
 8003f6c:	f7ff fe6c 	bl	8003c48 <stm32_i2c_msg_read>
 8003f70:	e7f4      	b.n	8003f5c <i2c_stm32_transfer+0x68>
					ret = -EINVAL;
 8003f72:	f06f 0015 	mvn.w	r0, #21
 8003f76:	e7d0      	b.n	8003f1a <i2c_stm32_transfer+0x26>

08003f78 <_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int _pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8003f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f7a:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8003f7c:	0906      	lsrs	r6, r0, #4
{
 8003f7e:	460d      	mov	r5, r1
	if (!clk) {
 8003f80:	4610      	mov	r0, r2
 8003f82:	b912      	cbnz	r2, 8003f8a <_pinmux_stm32_set+0x12>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003f84:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <_pinmux_stm32_set+0x4c>)
 8003f86:	f00d fb7f 	bl	8011688 <device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <_pinmux_stm32_set+0x50>)
 8003f90:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	6843      	ldr	r3, [r0, #4]
 8003f98:	4669      	mov	r1, sp
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8003f9e:	b970      	cbnz	r0, 8003fbe <_pinmux_stm32_set+0x46>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003fa0:	1120      	asrs	r0, r4, #4
 8003fa2:	0280      	lsls	r0, r0, #10
	return stm32_gpio_configure((u32_t *)port_base,
 8003fa4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003fa8:	f005 030f 	and.w	r3, r5, #15
 8003fac:	462a      	mov	r2, r5
 8003fae:	f004 010f 	and.w	r1, r4, #15
 8003fb2:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8003fb6:	f7fe fde6 	bl	8002b86 <stm32_gpio_configure>
		return -EIO;
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8003fbe:	f06f 0004 	mvn.w	r0, #4
 8003fc2:	e7fa      	b.n	8003fba <_pinmux_stm32_set+0x42>
 8003fc4:	080130b4 	.word	0x080130b4
 8003fc8:	080135c0 	.word	0x080135c0

08003fcc <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	4604      	mov	r4, r0
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003fd0:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <stm32_setup_pins+0x2c>)
{
 8003fd2:	460e      	mov	r6, r1
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003fd4:	f00d fb58 	bl	8011688 <device_get_binding>

	for (i = 0; i < pins; i++) {
 8003fd8:	2500      	movs	r5, #0
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003fda:	4607      	mov	r7, r0
	for (i = 0; i < pins; i++) {
 8003fdc:	42b5      	cmp	r5, r6
 8003fde:	f104 0408 	add.w	r4, r4, #8
 8003fe2:	d100      	bne.n	8003fe6 <stm32_setup_pins+0x1a>
		_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8003fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pinmux_stm32_set(pinconf[i].pin_num,
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003fec:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8003ff0:	f7ff ffc2 	bl	8003f78 <_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7f1      	b.n	8003fdc <stm32_setup_pins+0x10>
 8003ff8:	080130b4 	.word	0x080130b4

08003ffc <uart_stm32_poll_in>:

#define TIMEOUT 1000

static int uart_stm32_poll_in(struct device *dev, unsigned char *c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003ffc:	6803      	ldr	r3, [r0, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004002:	681a      	ldr	r2, [r3, #0]

	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8004004:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004006:	bf43      	ittte	mi
 8004008:	685b      	ldrmi	r3, [r3, #4]
 800400a:	700b      	strbmi	r3, [r1, #0]
		return -1;
	}

	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);

	return 0;
 800400c:	2000      	movmi	r0, #0
		return -1;
 800400e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8004012:	4770      	bx	lr

08004014 <uart_stm32_poll_out>:

static unsigned char uart_stm32_poll_out(struct device *dev,
					unsigned char c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800401a:	681a      	ldr	r2, [r3, #0]

	/* Wait for TXE flag to be raised */
	while (!LL_USART_IsActiveFlag_TXE(UartInstance))
 800401c:	0612      	lsls	r2, r2, #24
 800401e:	d5fc      	bpl.n	800401a <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR , ~(USART_SR_TC));
 8004020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
	LL_USART_ClearFlag_TC(UartInstance);

	LL_USART_TransmitData8(UartInstance, (u8_t)c);

	return c;
}
 8004026:	4608      	mov	r0, r1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8004028:	6059      	str	r1, [r3, #4]
 800402a:	4770      	bx	lr

0800402c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
 800402c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 800402e:	6803      	ldr	r3, [r0, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004030:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004032:	689d      	ldr	r5, [r3, #8]
	struct device *clk =
 8004034:	481d      	ldr	r0, [pc, #116]	; (80040ac <uart_stm32_init+0x80>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004036:	f855 4b08 	ldr.w	r4, [r5], #8
	struct device *clk =
 800403a:	f00d fb25 	bl	8011688 <device_get_binding>
 800403e:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8004040:	6430      	str	r0, [r6, #64]	; 0x40
 8004042:	4629      	mov	r1, r5
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4798      	blx	r3
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004048:	68e3      	ldr	r3, [r4, #12]
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	/* Get clock rate */
	clock_control_get_rate(data->clock,
 800404a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800404c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004050:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	f043 030c 	orr.w	r3, r3, #12
 8004058:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004060:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004068:	6123      	str	r3, [r4, #16]
	return api->get_rate(dev, sys, rate);
 800406a:	6843      	ldr	r3, [r0, #4]
 800406c:	aa01      	add	r2, sp, #4
 800406e:	4629      	mov	r1, r5
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004074:	9a01      	ldr	r2, [sp, #4]
 8004076:	2319      	movs	r3, #25
 8004078:	4353      	muls	r3, r2
 800407a:	6872      	ldr	r2, [r6, #4]
 800407c:	0092      	lsls	r2, r2, #2
 800407e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004082:	2264      	movs	r2, #100	; 0x64
 8004084:	fbb3 f1f2 	udiv	r1, r3, r2
 8004088:	fb02 3311 	mls	r3, r2, r1, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	fbb3 f3f2 	udiv	r3, r3, r2
 8004094:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004098:	b29b      	uxth	r3, r3
 800409a:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800409c:	68e3      	ldr	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 800409e:	2000      	movs	r0, #0
 80040a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040a4:	60e3      	str	r3, [r4, #12]
 80040a6:	b002      	add	sp, #8
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	080130b4 	.word	0x080130b4

080040b0 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf || ctx->tx_len);
 80040b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040b2:	b953      	cbnz	r3, 80040ca <spi_stm32_transfer_ongoing+0x1a>
 80040b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
/* Value to shift out when no application data needs transmitting. */
#define SPI_STM32_TX_NOP 0x00

static bool spi_stm32_transfer_ongoing(struct spi_stm32_data *data)
{
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80040b6:	b943      	cbnz	r3, 80040ca <spi_stm32_transfer_ongoing+0x1a>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf || ctx->rx_len);
 80040b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80040ba:	b933      	cbnz	r3, 80040ca <spi_stm32_transfer_ongoing+0x1a>
 80040bc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80040be:	3000      	adds	r0, #0
 80040c0:	bf18      	it	ne
 80040c2:	2001      	movne	r0, #1
}
 80040c4:	f000 0001 	and.w	r0, r0, #1
 80040c8:	4770      	bx	lr
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80040ca:	2001      	movs	r0, #1
 80040cc:	e7fa      	b.n	80040c4 <spi_stm32_transfer_ongoing+0x14>

080040ce <spi_stm32_next_tx>:
	return !!(ctx->tx_buf || ctx->tx_len);
 80040ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80040d0:	b922      	cbnz	r2, 80040dc <spi_stm32_next_tx+0xe>
 80040d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80040d4:	3300      	adds	r3, #0
 80040d6:	bf18      	it	ne
 80040d8:	2301      	movne	r3, #1

static inline u16_t spi_stm32_next_tx(struct spi_stm32_data *data)
{
	u16_t tx_frame;

	if (spi_context_tx_on(&data->ctx)) {
 80040da:	b143      	cbz	r3, 80040ee <spi_stm32_next_tx+0x20>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80040dc:	6803      	ldr	r3, [r0, #0]
 80040de:	891b      	ldrh	r3, [r3, #8]
 80040e0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80040e4:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 80040e6:	bf0c      	ite	eq
 80040e8:	7810      	ldrbeq	r0, [r2, #0]
		} else {
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 80040ea:	8810      	ldrhne	r0, [r2, #0]
 80040ec:	4770      	bx	lr
		}
	} else {
		tx_frame = SPI_STM32_TX_NOP;
 80040ee:	4618      	mov	r0, r3
	}
	return tx_frame;
}
 80040f0:	4770      	bx	lr

080040f2 <spi_stm32_irq_config_func_1>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,
		    &api_funcs);

#ifdef CONFIG_SPI_STM32_INTERRUPT
static void spi_stm32_irq_config_func_1(struct device *dev)
{
 80040f2:	b508      	push	{r3, lr}
	IRQ_CONNECT(SPI1_IRQn, CONFIG_SPI_1_IRQ_PRI,
 80040f4:	2023      	movs	r0, #35	; 0x23
 80040f6:	2200      	movs	r2, #0
 80040f8:	2105      	movs	r1, #5
 80040fa:	f7fe ffa9 	bl	8003050 <_irq_priority_set>
		    spi_stm32_isr, DEVICE_GET(spi_stm32_1), 0);
	irq_enable(SPI1_IRQn);
 80040fe:	2023      	movs	r0, #35	; 0x23
}
 8004100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(SPI1_IRQn);
 8004104:	f7fe bf96 	b.w	8003034 <_arch_irq_enable>

08004108 <spi_stm32_init>:
	const struct spi_stm32_config *cfg = dev->config->config_info;
 8004108:	6803      	ldr	r3, [r0, #0]
{
 800410a:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
 800410c:	6885      	ldr	r5, [r0, #8]
	const struct spi_stm32_config *cfg = dev->config->config_info;
 800410e:	689e      	ldr	r6, [r3, #8]
{
 8004110:	4604      	mov	r4, r0
	clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8004112:	4808      	ldr	r0, [pc, #32]	; (8004134 <spi_stm32_init+0x2c>)
 8004114:	f00d fab8 	bl	8011688 <device_get_binding>
	return api->on(dev, sys);
 8004118:	6843      	ldr	r3, [r0, #4]
 800411a:	4631      	mov	r1, r6
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4798      	blx	r3
	cfg->irq_config(dev);
 8004120:	68f3      	ldr	r3, [r6, #12]
 8004122:	4620      	mov	r0, r4
 8004124:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 8004126:	68eb      	ldr	r3, [r5, #12]
 8004128:	b913      	cbnz	r3, 8004130 <spi_stm32_init+0x28>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800412a:	1d28      	adds	r0, r5, #4
 800412c:	f00d fe4e 	bl	8011dcc <_impl_k_sem_give>
}
 8004130:	2000      	movs	r0, #0
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	080130b4 	.word	0x080130b4

08004138 <gpio_pin_write>:
static inline int _impl_gpio_write(struct device *port, int access_op,
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->write(port, access_op, pin, value);
 8004138:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 800413a:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
 800413c:	685c      	ldr	r4, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	46a4      	mov	ip, r4
 8004142:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 8004144:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 8004146:	2100      	movs	r1, #0
 8004148:	4760      	bx	ip

0800414a <spi_stm32_release>:
{
 800414a:	b508      	push	{r3, lr}
	struct spi_stm32_data *data = CONFIG_DATA(config);
 800414c:	6803      	ldr	r3, [r0, #0]
 800414e:	6898      	ldr	r0, [r3, #8]
 8004150:	68c3      	ldr	r3, [r0, #12]
 8004152:	b913      	cbnz	r3, 800415a <spi_stm32_release+0x10>
 8004154:	3004      	adds	r0, #4
 8004156:	f00d fe39 	bl	8011dcc <_impl_k_sem_give>
}
 800415a:	2000      	movs	r0, #0
 800415c:	bd08      	pop	{r3, pc}

0800415e <spi_stm32_complete>:
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800415e:	684b      	ldr	r3, [r1, #4]
 8004160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8004168:	684b      	ldr	r3, [r1, #4]
 800416a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8004170:	684b      	ldr	r3, [r1, #4]
 8004172:	4616      	mov	r6, r2
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004174:	6802      	ldr	r2, [r0, #0]
 8004176:	f023 0320 	bic.w	r3, r3, #32
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	68d3      	ldr	r3, [r2, #12]
 800417e:	4605      	mov	r5, r0
 8004180:	460c      	mov	r4, r1
 8004182:	b173      	cbz	r3, 80041a2 <spi_stm32_complete+0x44>
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	b161      	cbz	r1, 80041a2 <spi_stm32_complete+0x44>
			if (ctx->config->operation & SPI_HOLD_ON_CS) {
 8004188:	8912      	ldrh	r2, [r2, #8]
 800418a:	0491      	lsls	r1, r2, #18
 800418c:	d409      	bmi.n	80041a2 <spi_stm32_complete+0x44>
			k_busy_wait(ctx->config->cs->delay);
 800418e:	6898      	ldr	r0, [r3, #8]
 8004190:	f00d ffa4 	bl	80120dc <k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800419e:	f7ff ffcb 	bl	8004138 <gpio_pin_write>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80041a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ac:	d102      	bne.n	80041b4 <spi_stm32_complete+0x56>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 80041ae:	68a3      	ldr	r3, [r4, #8]
		while (LL_SPI_IsActiveFlag_BSY(spi)) {
 80041b0:	061a      	lsls	r2, r3, #24
 80041b2:	d4fc      	bmi.n	80041ae <spi_stm32_complete+0x50>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	6023      	str	r3, [r4, #0]
	if (!ctx->asynchronous) {
 80041bc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80041c0:	b933      	cbnz	r3, 80041d0 <spi_stm32_complete+0x72>
		ctx->sync_status = status;
 80041c2:	636e      	str	r6, [r5, #52]	; 0x34
 80041c4:	f105 001c 	add.w	r0, r5, #28
}
 80041c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041cc:	f00d bdfe 	b.w	8011dcc <_impl_k_sem_give>
		if (ctx->signal) {
 80041d0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80041d2:	b110      	cbz	r0, 80041da <spi_stm32_complete+0x7c>
			k_poll_signal(ctx->signal, status);
 80041d4:	4631      	mov	r1, r6
 80041d6:	f00e fc69 	bl	8012aac <k_poll_signal>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	891b      	ldrh	r3, [r3, #8]
 80041de:	045b      	lsls	r3, r3, #17
 80041e0:	d401      	bmi.n	80041e6 <spi_stm32_complete+0x88>
 80041e2:	1d28      	adds	r0, r5, #4
 80041e4:	e7f0      	b.n	80041c8 <spi_stm32_complete+0x6a>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}

080041e8 <spi_stm32_isr>:
{
 80041e8:	b538      	push	{r3, r4, r5, lr}
	const struct spi_stm32_config *cfg = dev->config->config_info;
 80041ea:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data = dev->driver_data;
 80041ec:	6884      	ldr	r4, [r0, #8]
	SPI_TypeDef *spi = cfg->spi;
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	6899      	ldr	r1, [r3, #8]
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 80041f2:	688a      	ldr	r2, [r1, #8]
	if (err) {
 80041f4:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
		spi_stm32_complete(data, spi, err);
 80041f8:	4620      	mov	r0, r4
	if (err) {
 80041fa:	d003      	beq.n	8004204 <spi_stm32_isr+0x1c>
}
 80041fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		spi_stm32_complete(data, spi, err);
 8004200:	f7ff bfad 	b.w	800415e <spi_stm32_complete>
	if (spi_stm32_transfer_ongoing(data)) {
 8004204:	f7ff ff54 	bl	80040b0 <spi_stm32_transfer_ongoing>
 8004208:	b940      	cbnz	r0, 800421c <spi_stm32_isr+0x34>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ff50 	bl	80040b0 <spi_stm32_transfer_ongoing>
 8004210:	2800      	cmp	r0, #0
 8004212:	f040 80c7 	bne.w	80043a4 <spi_stm32_isr+0x1bc>
 8004216:	4602      	mov	r2, r0
		spi_stm32_complete(data, spi, err);
 8004218:	4620      	mov	r0, r4
 800421a:	e7ef      	b.n	80041fc <spi_stm32_isr+0x14>
	u16_t operation = data->ctx.config->operation;
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	891d      	ldrh	r5, [r3, #8]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004220:	07ea      	lsls	r2, r5, #31
	tx_frame = spi_stm32_next_tx(data);
 8004222:	4620      	mov	r0, r4
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004224:	d45f      	bmi.n	80042e6 <spi_stm32_isr+0xfe>
	tx_frame = spi_stm32_next_tx(data);
 8004226:	f7ff ff52 	bl	80040ce <spi_stm32_next_tx>
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800422a:	688b      	ldr	r3, [r1, #8]
	while (!LL_SPI_IsActiveFlag_TXE(spi)) {
 800422c:	079b      	lsls	r3, r3, #30
 800422e:	d5fc      	bpl.n	800422a <spi_stm32_isr+0x42>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004230:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8004234:	2d08      	cmp	r5, #8
 8004236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004238:	d13c      	bne.n	80042b4 <spi_stm32_isr+0xcc>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  SPIx->DR = TxData;
 800423a:	b2c0      	uxtb	r0, r0
 800423c:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 800423e:	b183      	cbz	r3, 8004262 <spi_stm32_isr+0x7a>
	ctx->tx_len -= len;
 8004240:	3b01      	subs	r3, #1
 8004242:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 8004244:	2b00      	cmp	r3, #0
 8004246:	d12f      	bne.n	80042a8 <spi_stm32_isr+0xc0>
		ctx->current_tx++;
 8004248:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800424a:	f102 0308 	add.w	r3, r2, #8
 800424e:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 8004250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004252:	3b01      	subs	r3, #1
 8004254:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02a      	beq.n	80042b0 <spi_stm32_isr+0xc8>
			ctx->tx_buf = ctx->current_tx->buf;
 800425a:	6893      	ldr	r3, [r2, #8]
 800425c:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 800425e:	68d3      	ldr	r3, [r2, #12]
 8004260:	6563      	str	r3, [r4, #84]	; 0x54
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8004262:	688b      	ldr	r3, [r1, #8]
	while (!LL_SPI_IsActiveFlag_RXNE(spi)) {
 8004264:	07d8      	lsls	r0, r3, #31
 8004266:	d5fc      	bpl.n	8004262 <spi_stm32_isr+0x7a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004268:	2d08      	cmp	r5, #8
 800426a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800426c:	d17f      	bne.n	800436e <spi_stm32_isr+0x186>
  return (uint8_t)(READ_REG(SPIx->DR));
 800426e:	68ca      	ldr	r2, [r1, #12]
	return !!(ctx->rx_buf || ctx->rx_len);
 8004270:	b90b      	cbnz	r3, 8004276 <spi_stm32_isr+0x8e>
			if (spi_context_rx_on(&data->ctx)) {
 8004272:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004274:	b198      	cbz	r0, 800429e <spi_stm32_isr+0xb6>
 8004276:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004278:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800427a:	b182      	cbz	r2, 800429e <spi_stm32_isr+0xb6>
	ctx->rx_len -= len;
 800427c:	3a01      	subs	r2, #1
 800427e:	65e2      	str	r2, [r4, #92]	; 0x5c
	if (!ctx->rx_len) {
 8004280:	2a00      	cmp	r2, #0
 8004282:	d171      	bne.n	8004368 <spi_stm32_isr+0x180>
		ctx->current_rx++;
 8004284:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004286:	f102 0308 	add.w	r3, r2, #8
 800428a:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count--;
 800428c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800428e:	3b01      	subs	r3, #1
 8004290:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ctx->rx_count) {
 8004292:	2b00      	cmp	r3, #0
 8004294:	d069      	beq.n	800436a <spi_stm32_isr+0x182>
			ctx->rx_buf = ctx->current_rx->buf;
 8004296:	6893      	ldr	r3, [r2, #8]
 8004298:	65a3      	str	r3, [r4, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
 800429a:	68d3      	ldr	r3, [r2, #12]
 800429c:	65e3      	str	r3, [r4, #92]	; 0x5c
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 800429e:	688a      	ldr	r2, [r1, #8]
	if (err || !spi_stm32_transfer_ongoing(data)) {
 80042a0:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 80042a4:	d1b8      	bne.n	8004218 <spi_stm32_isr+0x30>
 80042a6:	e7b0      	b.n	800420a <spi_stm32_isr+0x22>
	} else if (ctx->tx_buf) {
 80042a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0d9      	beq.n	8004262 <spi_stm32_isr+0x7a>
		ctx->tx_buf += dfs * len;
 80042ae:	3301      	adds	r3, #1
 80042b0:	6523      	str	r3, [r4, #80]	; 0x50
 80042b2:	e7d6      	b.n	8004262 <spi_stm32_isr+0x7a>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
  SPIx->DR = TxData;
 80042b4:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0d3      	beq.n	8004262 <spi_stm32_isr+0x7a>
	ctx->tx_len -= len;
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 80042be:	b96b      	cbnz	r3, 80042dc <spi_stm32_isr+0xf4>
		ctx->current_tx++;
 80042c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042c2:	f102 0308 	add.w	r3, r2, #8
 80042c6:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 80042c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <spi_stm32_isr+0xc8>
			ctx->tx_buf = ctx->current_tx->buf;
 80042d2:	6893      	ldr	r3, [r2, #8]
 80042d4:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 80042d6:	68d3      	ldr	r3, [r2, #12]
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	e7c1      	b.n	8004260 <spi_stm32_isr+0x78>
	} else if (ctx->tx_buf) {
 80042dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0bf      	beq.n	8004262 <spi_stm32_isr+0x7a>
		ctx->tx_buf += dfs * len;
 80042e2:	3302      	adds	r3, #2
 80042e4:	e7e4      	b.n	80042b0 <spi_stm32_isr+0xc8>
	tx_frame = spi_stm32_next_tx(data);
 80042e6:	f7ff fef2 	bl	80040ce <spi_stm32_next_tx>
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80042ea:	688b      	ldr	r3, [r1, #8]
	if (LL_SPI_IsActiveFlag_TXE(spi)) {
 80042ec:	079a      	lsls	r2, r3, #30
 80042ee:	d516      	bpl.n	800431e <spi_stm32_isr+0x136>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80042f0:	f3c5 1345 	ubfx	r3, r5, #5, #6
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042f8:	d11d      	bne.n	8004336 <spi_stm32_isr+0x14e>
  SPIx->DR = TxData;
 80042fa:	b2c0      	uxtb	r0, r0
 80042fc:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 80042fe:	b173      	cbz	r3, 800431e <spi_stm32_isr+0x136>
	ctx->tx_len -= len;
 8004300:	3b01      	subs	r3, #1
 8004302:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 8004304:	b98b      	cbnz	r3, 800432a <spi_stm32_isr+0x142>
		ctx->current_tx++;
 8004306:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004308:	f102 0308 	add.w	r3, r2, #8
 800430c:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 800430e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004310:	3b01      	subs	r3, #1
 8004312:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 8004314:	b16b      	cbz	r3, 8004332 <spi_stm32_isr+0x14a>
			ctx->tx_buf = ctx->current_tx->buf;
 8004316:	6893      	ldr	r3, [r2, #8]
 8004318:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 800431a:	68d3      	ldr	r3, [r2, #12]
 800431c:	6563      	str	r3, [r4, #84]	; 0x54
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 800431e:	688b      	ldr	r3, [r1, #8]
	if (LL_SPI_IsActiveFlag_RXNE(spi)) {
 8004320:	07db      	lsls	r3, r3, #31
 8004322:	d5bc      	bpl.n	800429e <spi_stm32_isr+0xb6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004324:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8004328:	e79e      	b.n	8004268 <spi_stm32_isr+0x80>
	} else if (ctx->tx_buf) {
 800432a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f6      	beq.n	800431e <spi_stm32_isr+0x136>
		ctx->tx_buf += dfs * len;
 8004330:	3301      	adds	r3, #1
 8004332:	6523      	str	r3, [r4, #80]	; 0x50
 8004334:	e7f3      	b.n	800431e <spi_stm32_isr+0x136>
  SPIx->DR = TxData;
 8004336:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <spi_stm32_isr+0x136>
	ctx->tx_len -= len;
 800433c:	3b01      	subs	r3, #1
 800433e:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 8004340:	b96b      	cbnz	r3, 800435e <spi_stm32_isr+0x176>
		ctx->current_tx++;
 8004342:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004344:	f102 0308 	add.w	r3, r2, #8
 8004348:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 800434a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800434c:	3b01      	subs	r3, #1
 800434e:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ee      	beq.n	8004332 <spi_stm32_isr+0x14a>
			ctx->tx_buf = ctx->current_tx->buf;
 8004354:	6893      	ldr	r3, [r2, #8]
 8004356:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 8004358:	68d3      	ldr	r3, [r2, #12]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	e7de      	b.n	800431c <spi_stm32_isr+0x134>
	} else if (ctx->tx_buf) {
 800435e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0dc      	beq.n	800431e <spi_stm32_isr+0x136>
		ctx->tx_buf += dfs * len;
 8004364:	3302      	adds	r3, #2
 8004366:	e7e4      	b.n	8004332 <spi_stm32_isr+0x14a>
		ctx->rx_buf += dfs * len;
 8004368:	3301      	adds	r3, #1
 800436a:	65a3      	str	r3, [r4, #88]	; 0x58
 800436c:	e797      	b.n	800429e <spi_stm32_isr+0xb6>
  return (uint16_t)(READ_REG(SPIx->DR));
 800436e:	68c8      	ldr	r0, [r1, #12]
 8004370:	6de2      	ldr	r2, [r4, #92]	; 0x5c
	return !!(ctx->rx_buf || ctx->rx_len);
 8004372:	b90b      	cbnz	r3, 8004378 <spi_stm32_isr+0x190>
			if (spi_context_rx_on(&data->ctx)) {
 8004374:	2a00      	cmp	r2, #0
 8004376:	d092      	beq.n	800429e <spi_stm32_isr+0xb6>
				UNALIGNED_PUT(rx_frame,
 8004378:	8018      	strh	r0, [r3, #0]
	if (!ctx->rx_len) {
 800437a:	2a00      	cmp	r2, #0
 800437c:	d08f      	beq.n	800429e <spi_stm32_isr+0xb6>
	ctx->rx_len -= len;
 800437e:	3a01      	subs	r2, #1
 8004380:	65e2      	str	r2, [r4, #92]	; 0x5c
	if (!ctx->rx_len) {
 8004382:	b96a      	cbnz	r2, 80043a0 <spi_stm32_isr+0x1b8>
		ctx->current_rx++;
 8004384:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004386:	f102 0308 	add.w	r3, r2, #8
 800438a:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count--;
 800438c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800438e:	3b01      	subs	r3, #1
 8004390:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ctx->rx_count) {
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0e9      	beq.n	800436a <spi_stm32_isr+0x182>
			ctx->rx_buf = ctx->current_rx->buf;
 8004396:	6893      	ldr	r3, [r2, #8]
 8004398:	65a3      	str	r3, [r4, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
 800439a:	68d3      	ldr	r3, [r2, #12]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	e77d      	b.n	800429c <spi_stm32_isr+0xb4>
		ctx->rx_buf += dfs * len;
 80043a0:	3302      	adds	r3, #2
 80043a2:	e7e2      	b.n	800436a <spi_stm32_isr+0x182>
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080043a8 <transceive>:
{
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	b08d      	sub	sp, #52	; 0x34
 80043ae:	4607      	mov	r7, r0
 80043b0:	4689      	mov	r9, r1
 80043b2:	4698      	mov	r8, r3
	if (!tx_count && !rx_count) {
 80043b4:	9201      	str	r2, [sp, #4]
 80043b6:	b91a      	cbnz	r2, 80043c0 <transceive+0x18>
 80043b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80f4 	beq.w	80045a8 <transceive+0x200>
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 80043c0:	683b      	ldr	r3, [r7, #0]
	struct spi_stm32_data *data = CONFIG_DATA(config);
 80043c2:	689d      	ldr	r5, [r3, #8]
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 80043c4:	681b      	ldr	r3, [r3, #0]
	k_sem_take(&ctx->lock, K_FOREVER);
 80043c6:	f105 0b04 	add.w	fp, r5, #4
	SPI_TypeDef *spi = cfg->spi;
 80043ca:	689b      	ldr	r3, [r3, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043d0:	4658      	mov	r0, fp
 80043d2:	689e      	ldr	r6, [r3, #8]
 80043d4:	f00d fd3c 	bl	8011e50 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
 80043d8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80043dc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	ctx->signal = signal;
 80043e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80043e2:	63ab      	str	r3, [r5, #56]	; 0x38
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 80043e4:	683b      	ldr	r3, [r7, #0]
	const u32_t scaler[] = {
 80043e6:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8004614 <transceive+0x26c>
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 80043ea:	681a      	ldr	r2, [r3, #0]
	struct spi_stm32_data *data = CONFIG_DATA(config);
 80043ec:	f8d3 a008 	ldr.w	sl, [r3, #8]
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 80043f0:	6892      	ldr	r2, [r2, #8]
 80043f2:	9200      	str	r2, [sp, #0]
	const u32_t scaler[] = {
 80043f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80043f8:	ac04      	add	r4, sp, #16
 80043fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SPI_TypeDef *spi = cfg->spi;
 8004404:	9b00      	ldr	r3, [sp, #0]
 8004406:	689c      	ldr	r4, [r3, #8]
	if (spi_context_configured(&data->ctx, config)) {
 8004408:	f8da 3000 	ldr.w	r3, [sl]
 800440c:	429f      	cmp	r7, r3
 800440e:	d06f      	beq.n	80044f0 <transceive+0x148>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004416:	2b08      	cmp	r3, #8
 8004418:	d002      	beq.n	8004420 <transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800441a:	2b10      	cmp	r3, #16
 800441c:	f040 80f4 	bne.w	8004608 <transceive+0x260>
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8004420:	487b      	ldr	r0, [pc, #492]	; (8004610 <transceive+0x268>)
 8004422:	f00d f931 	bl	8011688 <device_get_binding>
	return api->get_rate(dev, sys, rate);
 8004426:	6843      	ldr	r3, [r0, #4]
 8004428:	9900      	ldr	r1, [sp, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	aa03      	add	r2, sp, #12
 800442e:	4798      	blx	r3
		u32_t clk = clock >> br;
 8004430:	9803      	ldr	r0, [sp, #12]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004432:	2301      	movs	r3, #1
		if (clk <= config->frequency) {
 8004434:	6879      	ldr	r1, [r7, #4]
		u32_t clk = clock >> br;
 8004436:	fa20 f203 	lsr.w	r2, r0, r3
		if (clk <= config->frequency) {
 800443a:	428a      	cmp	r2, r1
 800443c:	f240 80c8 	bls.w	80045d0 <transceive+0x228>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004440:	3301      	adds	r3, #1
 8004442:	2b09      	cmp	r3, #9
 8004444:	d1f6      	bne.n	8004434 <transceive+0x8c>
		return -EINVAL;
 8004446:	f06f 0015 	mvn.w	r0, #21
}
 800444a:	b00d      	add	sp, #52	; 0x34
 800444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004450:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) == SPI_MODE_CPHA) {
 8004452:	2904      	cmp	r1, #4
 8004454:	f022 0202 	bic.w	r2, r2, #2
 8004458:	6022      	str	r2, [r4, #0]
 800445a:	f040 80d1 	bne.w	8004600 <transceive+0x258>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800446c:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800446e:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8004470:	06d9      	lsls	r1, r3, #27
 8004472:	bf4c      	ite	mi
 8004474:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8004478:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 800447c:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800447e:	6822      	ldr	r2, [r4, #0]
	if (config->cs) {
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004486:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004488:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 800448a:	f013 0001 	ands.w	r0, r3, #1
 800448e:	bf14      	ite	ne
 8004490:	f422 7282 	bicne.w	r2, r2, #260	; 0x104
 8004494:	f442 7282 	orreq.w	r2, r2, #260	; 0x104
 8004498:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800449a:	6822      	ldr	r2, [r4, #0]
	if (config->cs) {
 800449c:	2900      	cmp	r1, #0
 800449e:	d037      	beq.n	8004510 <transceive+0x168>
 80044a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a4:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	f022 0204 	bic.w	r2, r2, #4
 80044ac:	6062      	str	r2, [r4, #4]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80044ae:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80044b2:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	bf0c      	ite	eq
 80044b8:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 80044bc:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80044c0:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	f023 0310 	bic.w	r3, r3, #16
 80044c8:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 80044ca:	f8ca 7000 	str.w	r7, [sl]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80044ce:	b179      	cbz	r1, 80044f0 <transceive+0x148>
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	b168      	cbz	r0, 80044f0 <transceive+0x148>
	return api->config(port, access_op, pin, flags);
 80044d4:	6843      	ldr	r3, [r0, #4]
 80044d6:	684a      	ldr	r2, [r1, #4]
 80044d8:	681c      	ldr	r4, [r3, #0]
 80044da:	2100      	movs	r1, #0
 80044dc:	2301      	movs	r3, #1
 80044de:	47a0      	blx	r4
		gpio_pin_write(ctx->config->cs->gpio_dev,
 80044e0:	f8da 3000 	ldr.w	r3, [sl]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044ec:	f7ff fe24 	bl	8004138 <gpio_pin_write>
	ctx->tx_count = tx_count;
 80044f0:	9b01      	ldr	r3, [sp, #4]
 80044f2:	646b      	str	r3, [r5, #68]	; 0x44
	ctx->rx_count = rx_count;
 80044f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
	ctx->current_tx = tx_bufs;
 80044f6:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
	ctx->current_rx = rx_bufs;
 80044fa:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
	ctx->rx_count = rx_count;
 80044fe:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (tx_bufs) {
 8004500:	f1b9 0f00 	cmp.w	r9, #0
 8004504:	d10f      	bne.n	8004526 <transceive+0x17e>
		ctx->tx_buf = NULL;
 8004506:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
		ctx->tx_len = 0;
 800450a:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
 800450e:	e010      	b.n	8004532 <transceive+0x18a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8004514:	2800      	cmp	r0, #0
 8004516:	d1c5      	bne.n	80044a4 <transceive+0xfc>
 8004518:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800451c:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800451e:	6862      	ldr	r2, [r4, #4]
 8004520:	f042 0204 	orr.w	r2, r2, #4
 8004524:	e7c2      	b.n	80044ac <transceive+0x104>
		ctx->tx_buf = tx_bufs->buf;
 8004526:	f8d9 3000 	ldr.w	r3, [r9]
 800452a:	652b      	str	r3, [r5, #80]	; 0x50
		ctx->tx_len = tx_bufs->len / dfs;
 800452c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004530:	656b      	str	r3, [r5, #84]	; 0x54
	if (rx_bufs) {
 8004532:	f1b8 0f00 	cmp.w	r8, #0
 8004536:	d039      	beq.n	80045ac <transceive+0x204>
		ctx->rx_buf = rx_bufs->buf;
 8004538:	f8d8 3000 	ldr.w	r3, [r8]
 800453c:	65ab      	str	r3, [r5, #88]	; 0x58
		ctx->rx_len = rx_bufs->len / dfs;
 800453e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004542:	65eb      	str	r3, [r5, #92]	; 0x5c
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004544:	6833      	ldr	r3, [r6, #0]
	ctx->sync_status = 0;
 8004546:	2200      	movs	r2, #0
 8004548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454c:	636a      	str	r2, [r5, #52]	; 0x34
 800454e:	6033      	str	r3, [r6, #0]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	b14b      	cbz	r3, 800456a <transceive+0x1c2>
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	b138      	cbz	r0, 800456a <transceive+0x1c2>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	f7ff fdec 	bl	8004138 <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	6898      	ldr	r0, [r3, #8]
 8004566:	f00d fdb9 	bl	80120dc <k_busy_wait>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800456a:	6873      	ldr	r3, [r6, #4]
 800456c:	f043 0320 	orr.w	r3, r3, #32
 8004570:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 8004572:	f1b8 0f00 	cmp.w	r8, #0
 8004576:	d003      	beq.n	8004580 <transceive+0x1d8>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8004578:	6873      	ldr	r3, [r6, #4]
 800457a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457e:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8004580:	6873      	ldr	r3, [r6, #4]
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	6073      	str	r3, [r6, #4]
	if (!ctx->asynchronous) {
 8004588:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800458c:	b19b      	cbz	r3, 80045b6 <transceive+0x20e>
	if (!status && (ctx->config->operation & SPI_LOCK_ON)) {
 800458e:	682b      	ldr	r3, [r5, #0]
 8004590:	891c      	ldrh	r4, [r3, #8]
 8004592:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
 8004596:	d107      	bne.n	80045a8 <transceive+0x200>
	if (!ctx->asynchronous || status) {
 8004598:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800459c:	b103      	cbz	r3, 80045a0 <transceive+0x1f8>
 800459e:	b11c      	cbz	r4, 80045a8 <transceive+0x200>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80045a0:	4658      	mov	r0, fp
 80045a2:	f00d fc13 	bl	8011dcc <_impl_k_sem_give>
	return ret ? -EIO : 0;
 80045a6:	b984      	cbnz	r4, 80045ca <transceive+0x222>
 80045a8:	2000      	movs	r0, #0
 80045aa:	e74e      	b.n	800444a <transceive+0xa2>
		ctx->rx_buf = NULL;
 80045ac:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
		ctx->rx_len = 0;
 80045b0:	f8c5 805c 	str.w	r8, [r5, #92]	; 0x5c
 80045b4:	e7c6      	b.n	8004544 <transceive+0x19c>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80045b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045ba:	f105 001c 	add.w	r0, r5, #28
 80045be:	f00d fc47 	bl	8011e50 <_impl_k_sem_take>
		status = ctx->sync_status;
 80045c2:	6b6c      	ldr	r4, [r5, #52]	; 0x34
	if (!status && (ctx->config->operation & SPI_LOCK_ON)) {
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d1e7      	bne.n	8004598 <transceive+0x1f0>
 80045c8:	e7e1      	b.n	800458e <transceive+0x1e6>
 80045ca:	f06f 0004 	mvn.w	r0, #4
 80045ce:	e73c      	b.n	800444a <transceive+0xa2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80045d0:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80045d2:	a90c      	add	r1, sp, #48	; 0x30
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	6022      	str	r2, [r4, #0]
 80045da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80045e4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80045e8:	4313      	orrs	r3, r2
 80045ea:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) ==  SPI_MODE_CPOL) {
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	f003 010e 	and.w	r1, r3, #14
 80045f2:	2902      	cmp	r1, #2
 80045f4:	f47f af2c 	bne.w	8004450 <transceive+0xa8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	f042 0202 	orr.w	r2, r2, #2
 80045fe:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	e72d      	b.n	8004464 <transceive+0xbc>
		return -ENOTSUP;
 8004608:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800460c:	e71d      	b.n	800444a <transceive+0xa2>
 800460e:	bf00      	nop
 8004610:	080130b4 	.word	0x080130b4
 8004614:	08012c1c 	.word	0x08012c1c

08004618 <spi_stm32_transceive_async>:
{
 8004618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(config, tx_bufs, tx_count,
 800461a:	9c07      	ldr	r4, [sp, #28]
 800461c:	9402      	str	r4, [sp, #8]
 800461e:	2401      	movs	r4, #1
 8004620:	9401      	str	r4, [sp, #4]
 8004622:	9c06      	ldr	r4, [sp, #24]
 8004624:	9400      	str	r4, [sp, #0]
 8004626:	f7ff febf 	bl	80043a8 <transceive>
}
 800462a:	b004      	add	sp, #16
 800462c:	bd10      	pop	{r4, pc}

0800462e <spi_stm32_transceive>:
{
 800462e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(config, tx_bufs, tx_count,
 8004630:	2400      	movs	r4, #0
 8004632:	9402      	str	r4, [sp, #8]
 8004634:	9401      	str	r4, [sp, #4]
 8004636:	9c06      	ldr	r4, [sp, #24]
 8004638:	9400      	str	r4, [sp, #0]
 800463a:	f7ff feb5 	bl	80043a8 <transceive>
}
 800463e:	b004      	add	sp, #16
 8004640:	bd10      	pop	{r4, pc}
	...

08004644 <_bt_spi_init>:
	.open		= bt_spi_open,
	.send		= bt_spi_send,
};

static int _bt_spi_init(struct device *unused)
{
 8004644:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	spi_dev = device_get_binding(CONFIG_BT_SPI_DEV_NAME);
 8004646:	480e      	ldr	r0, [pc, #56]	; (8004680 <_bt_spi_init+0x3c>)
 8004648:	f00d f81e 	bl	8011688 <device_get_binding>
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <_bt_spi_init+0x40>)
 800464e:	6018      	str	r0, [r3, #0]
	if (!spi_dev) {
 8004650:	b910      	cbnz	r0, 8004658 <_bt_spi_init+0x14>
		BT_ERR("Failed to initialize SPI driver: %s",
		       CONFIG_BT_SPI_DEV_NAME);
		return -EIO;
 8004652:	f06f 0004 	mvn.w	r0, #4
 8004656:	bd08      	pop	{r3, pc}
		       CONFIG_BT_SPI_CHIP_SELECT_DEV_NAME);
		return -EIO;
	}
#endif /* CONFIG_BT_SPI_BLUENRG */

	irq_dev = device_get_binding(CONFIG_BT_SPI_IRQ_DEV_NAME);
 8004658:	480b      	ldr	r0, [pc, #44]	; (8004688 <_bt_spi_init+0x44>)
 800465a:	f00d f815 	bl	8011688 <device_get_binding>
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <_bt_spi_init+0x48>)
 8004660:	6018      	str	r0, [r3, #0]
	if (!irq_dev) {
 8004662:	2800      	cmp	r0, #0
 8004664:	d0f5      	beq.n	8004652 <_bt_spi_init+0xe>
		BT_ERR("Failed to initialize GPIO driver: %s",
		       CONFIG_BT_SPI_IRQ_DEV_NAME);
		return -EIO;
	}

	rst_dev = device_get_binding(CONFIG_BT_SPI_RESET_DEV_NAME);
 8004666:	4808      	ldr	r0, [pc, #32]	; (8004688 <_bt_spi_init+0x44>)
 8004668:	f00d f80e 	bl	8011688 <device_get_binding>
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <_bt_spi_init+0x4c>)
 800466e:	6018      	str	r0, [r3, #0]
	if (!rst_dev) {
 8004670:	2800      	cmp	r0, #0
 8004672:	d0ee      	beq.n	8004652 <_bt_spi_init+0xe>
		BT_ERR("Failed to initialize GPIO driver: %s",
		       CONFIG_BT_SPI_RESET_DEV_NAME);
		return -EIO;
	}

	bt_hci_driver_register(&drv);
 8004674:	4807      	ldr	r0, [pc, #28]	; (8004694 <_bt_spi_init+0x50>)
 8004676:	f001 fe33 	bl	80062e0 <bt_hci_driver_register>

	return 0;
 800467a:	2000      	movs	r0, #0
}
 800467c:	bd08      	pop	{r3, pc}
 800467e:	bf00      	nop
 8004680:	08013618 	.word	0x08013618
 8004684:	200002d8 	.word	0x200002d8
 8004688:	08013594 	.word	0x08013594
 800468c:	20000168 	.word	0x20000168
 8004690:	2000016c 	.word	0x2000016c
 8004694:	08013620 	.word	0x08013620

08004698 <bt_spi_isr>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <bt_spi_isr+0x8>)
 800469a:	f00d bb97 	b.w	8011dcc <_impl_k_sem_give>
 800469e:	bf00      	nop
 80046a0:	20006474 	.word	0x20006474

080046a4 <bt_spi_transceive>:
{
 80046a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	spi_tx_buf.buf = (void *)tx;
 80046a6:	4c08      	ldr	r4, [pc, #32]	; (80046c8 <bt_spi_transceive+0x24>)
	spi_tx_buf.len = (size_t)tx_len;
 80046a8:	e884 0003 	stmia.w	r4, {r0, r1}
	spi_rx_buf.buf = rx;
 80046ac:	4907      	ldr	r1, [pc, #28]	; (80046cc <bt_spi_transceive+0x28>)
				       struct spi_buf *rx_bufs,
				       size_t rx_count)
{
	const struct spi_driver_api *api = config->dev->driver_api;

	return api->transceive(config, tx_bufs, tx_count, rx_bufs, rx_count);
 80046ae:	4808      	ldr	r0, [pc, #32]	; (80046d0 <bt_spi_transceive+0x2c>)
	spi_rx_buf.len = (size_t)rx_len;
 80046b0:	e881 000c 	stmia.w	r1, {r2, r3}
	const struct spi_driver_api *api = config->dev->driver_api;
 80046b4:	6803      	ldr	r3, [r0, #0]
	return api->transceive(config, tx_bufs, tx_count, rx_bufs, rx_count);
 80046b6:	2201      	movs	r2, #1
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	460b      	mov	r3, r1
 80046c0:	4621      	mov	r1, r4
 80046c2:	47a8      	blx	r5
}
 80046c4:	b003      	add	sp, #12
 80046c6:	bd30      	pop	{r4, r5, pc}
 80046c8:	200002e4 	.word	0x200002e4
 80046cc:	200002dc 	.word	0x200002dc
 80046d0:	2000588c 	.word	0x2000588c

080046d4 <bt_spi_send>:
{
 80046d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t header[5] = { SPI_WRITE, 0x00,  0x00,  0x00,  0x00 };
 80046d6:	230a      	movs	r3, #10
 80046d8:	f88d 3008 	strb.w	r3, [sp, #8]
 80046dc:	2300      	movs	r3, #0
 80046de:	f88d 3009 	strb.w	r3, [sp, #9]
 80046e2:	f88d 300a 	strb.w	r3, [sp, #10]
 80046e6:	f88d 300b 	strb.w	r3, [sp, #11]
 80046ea:	f88d 300c 	strb.w	r3, [sp, #12]
	if (buf->len >= SPI_MAX_MSG_LEN) {
 80046ee:	8983      	ldrh	r3, [r0, #12]
 80046f0:	2bfe      	cmp	r3, #254	; 0xfe
{
 80046f2:	4604      	mov	r4, r0
	if (buf->len >= SPI_MAX_MSG_LEN) {
 80046f4:	d849      	bhi.n	800478a <bt_spi_send+0xb6>
		gpio_pin_read(irq_dev, GPIO_IRQ_PIN, &pending);
 80046f6:	4d26      	ldr	r5, [pc, #152]	; (8004790 <bt_spi_send+0xbc>)
 80046f8:	6828      	ldr	r0, [r5, #0]
	return api->read(port, access_op, pin, value);
 80046fa:	6843      	ldr	r3, [r0, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	689e      	ldr	r6, [r3, #8]
 8004700:	2100      	movs	r1, #0
 8004702:	ab01      	add	r3, sp, #4
 8004704:	47b0      	blx	r6
		if (!pending) {
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	b11b      	cbz	r3, 8004712 <bt_spi_send+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
 800470a:	2001      	movs	r0, #1
 800470c:	f00d fab4 	bl	8011c78 <_impl_k_sleep>
 8004710:	e7f2      	b.n	80046f8 <bt_spi_send+0x24>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004712:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004716:	481f      	ldr	r0, [pc, #124]	; (8004794 <bt_spi_send+0xc0>)
 8004718:	f00d fb9a 	bl	8011e50 <_impl_k_sem_take>
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800471c:	89e3      	ldrh	r3, [r4, #14]
 800471e:	4423      	add	r3, r4
 8004720:	3313      	adds	r3, #19
 8004722:	f023 0303 	bic.w	r3, r3, #3
	switch (bt_buf_get_type(buf)) {
 8004726:	7819      	ldrb	r1, [r3, #0]
 8004728:	b351      	cbz	r1, 8004780 <bt_spi_send+0xac>
 800472a:	2902      	cmp	r1, #2
 800472c:	d12a      	bne.n	8004784 <bt_spi_send+0xb0>
		net_buf_push_u8(buf, HCI_CMD);
 800472e:	f104 0008 	add.w	r0, r4, #8
 8004732:	f00c ff49 	bl	80115c8 <net_buf_simple_push_u8>
		bt_spi_transceive(header, 5, rxmsg, 5);
 8004736:	4d18      	ldr	r5, [pc, #96]	; (8004798 <bt_spi_send+0xc4>)
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <bt_spi_send+0xc4>)
 800473a:	2305      	movs	r3, #5
 800473c:	4619      	mov	r1, r3
 800473e:	a802      	add	r0, sp, #8
 8004740:	f7ff ffb0 	bl	80046a4 <bt_spi_transceive>
		 (rxmsg[1] | rxmsg[2] | rxmsg[3] | rxmsg[4]) == 0);
 8004744:	782b      	ldrb	r3, [r5, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d1f6      	bne.n	8004738 <bt_spi_send+0x64>
 800474a:	78aa      	ldrb	r2, [r5, #2]
 800474c:	786b      	ldrb	r3, [r5, #1]
 800474e:	4313      	orrs	r3, r2
 8004750:	78ea      	ldrb	r2, [r5, #3]
 8004752:	4313      	orrs	r3, r2
 8004754:	792a      	ldrb	r2, [r5, #4]
	} while (rxmsg[STATUS_HEADER_READY] != READY_NOW ||
 8004756:	4313      	orrs	r3, r2
 8004758:	d0ee      	beq.n	8004738 <bt_spi_send+0x64>
		bt_spi_transceive(buf->data, buf->len, rxmsg, buf->len);
 800475a:	4e0f      	ldr	r6, [pc, #60]	; (8004798 <bt_spi_send+0xc4>)
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	68a0      	ldr	r0, [r4, #8]
 8004760:	4619      	mov	r1, r3
 8004762:	4632      	mov	r2, r6
 8004764:	f7ff ff9e 	bl	80046a4 <bt_spi_transceive>
	} while (rxmsg[0] == 0);
 8004768:	782b      	ldrb	r3, [r5, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f6      	beq.n	800475c <bt_spi_send+0x88>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800476e:	4809      	ldr	r0, [pc, #36]	; (8004794 <bt_spi_send+0xc0>)
 8004770:	f00d fb2c 	bl	8011dcc <_impl_k_sem_give>
	net_buf_unref(buf);
 8004774:	4620      	mov	r0, r4
 8004776:	f00c fea5 	bl	80114c4 <net_buf_unref>
	return 0;
 800477a:	2000      	movs	r0, #0
}
 800477c:	b004      	add	sp, #16
 800477e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_push_u8(buf, HCI_CMD);
 8004780:	2101      	movs	r1, #1
 8004782:	e7d4      	b.n	800472e <bt_spi_send+0x5a>
 8004784:	4803      	ldr	r0, [pc, #12]	; (8004794 <bt_spi_send+0xc0>)
 8004786:	f00d fb21 	bl	8011dcc <_impl_k_sem_give>
		return -EINVAL;
 800478a:	f06f 0015 	mvn.w	r0, #21
 800478e:	e7f5      	b.n	800477c <bt_spi_send+0xa8>
 8004790:	20000168 	.word	0x20000168
 8004794:	20006444 	.word	0x20006444
 8004798:	200001d8 	.word	0x200001d8

0800479c <bt_spi_rx_thread>:
{
 800479c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047a0:	b087      	sub	sp, #28
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 80047a2:	230b      	movs	r3, #11
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 80047a4:	22ff      	movs	r2, #255	; 0xff
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 80047a6:	f88d 3008 	strb.w	r3, [sp, #8]
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 80047aa:	4611      	mov	r1, r2
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 80047ac:	2300      	movs	r3, #0
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 80047ae:	4849      	ldr	r0, [pc, #292]	; (80048d4 <bt_spi_rx_thread+0x138>)
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 80047b0:	f88d 3009 	strb.w	r3, [sp, #9]
 80047b4:	f88d 300a 	strb.w	r3, [sp, #10]
 80047b8:	f88d 300b 	strb.w	r3, [sp, #11]
 80047bc:	f88d 300c 	strb.w	r3, [sp, #12]
		gpio_pin_disable_callback(irq_dev, GPIO_IRQ_PIN);
 80047c0:	4e45      	ldr	r6, [pc, #276]	; (80048d8 <bt_spi_rx_thread+0x13c>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80047c2:	4f46      	ldr	r7, [pc, #280]	; (80048dc <bt_spi_rx_thread+0x140>)
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 80047c4:	f7fc f888 	bl	80008d8 <memset>
 80047c8:	46b0      	mov	r8, r6
 80047ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047ce:	4844      	ldr	r0, [pc, #272]	; (80048e0 <bt_spi_rx_thread+0x144>)
 80047d0:	f00d fb3e 	bl	8011e50 <_impl_k_sem_take>
		gpio_pin_disable_callback(irq_dev, GPIO_IRQ_PIN);
 80047d4:	6830      	ldr	r0, [r6, #0]
	return api->disable_callback(port, access_op, pin);
 80047d6:	6843      	ldr	r3, [r0, #4]
 80047d8:	2100      	movs	r1, #0
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2201      	movs	r2, #1
 80047de:	4798      	blx	r3
 80047e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047e4:	4638      	mov	r0, r7
 80047e6:	f00d fb33 	bl	8011e50 <_impl_k_sem_take>
			bt_spi_transceive(header_master, 5, header_slave, 5);
 80047ea:	2305      	movs	r3, #5
 80047ec:	4619      	mov	r1, r3
 80047ee:	aa04      	add	r2, sp, #16
 80047f0:	a802      	add	r0, sp, #8
 80047f2:	f7ff ff57 	bl	80046a4 <bt_spi_transceive>
		} while (header_slave[STATUS_HEADER_TOREAD] == 0 ||
 80047f6:	f89d 5013 	ldrb.w	r5, [sp, #19]
 80047fa:	1e6b      	subs	r3, r5, #1
			 header_slave[STATUS_HEADER_TOREAD] == 0xFF);
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2bfd      	cmp	r3, #253	; 0xfd
 8004800:	d8f3      	bhi.n	80047ea <bt_spi_rx_thread+0x4e>
			bt_spi_transceive(&txmsg, size, &rxmsg, size);
 8004802:	4c38      	ldr	r4, [pc, #224]	; (80048e4 <bt_spi_rx_thread+0x148>)
 8004804:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80048d4 <bt_spi_rx_thread+0x138>
 8004808:	4a36      	ldr	r2, [pc, #216]	; (80048e4 <bt_spi_rx_thread+0x148>)
 800480a:	462b      	mov	r3, r5
 800480c:	4629      	mov	r1, r5
 800480e:	4648      	mov	r0, r9
 8004810:	f7ff ff48 	bl	80046a4 <bt_spi_transceive>
		} while (rxmsg[0] == 0);
 8004814:	7823      	ldrb	r3, [r4, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f6      	beq.n	8004808 <bt_spi_rx_thread+0x6c>
		gpio_pin_enable_callback(irq_dev, GPIO_IRQ_PIN);
 800481a:	f8d8 0000 	ldr.w	r0, [r8]
	return api->enable_callback(port, access_op, pin);
 800481e:	6843      	ldr	r3, [r0, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2100      	movs	r1, #0
 8004826:	4798      	blx	r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004828:	4638      	mov	r0, r7
 800482a:	f00d facf 	bl	8011dcc <_impl_k_sem_give>
		switch (rxmsg[PACKET_TYPE]) {
 800482e:	7823      	ldrb	r3, [r4, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d032      	beq.n	800489a <bt_spi_rx_thread+0xfe>
 8004834:	2b04      	cmp	r3, #4
 8004836:	d1c8      	bne.n	80047ca <bt_spi_rx_thread+0x2e>
			switch (rxmsg[EVT_HEADER_EVENT]) {
 8004838:	7863      	ldrb	r3, [r4, #1]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d327      	bcc.n	800488e <bt_spi_rx_thread+0xf2>
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d90b      	bls.n	800485a <bt_spi_rx_thread+0xbe>
 8004842:	2bff      	cmp	r3, #255	; 0xff
 8004844:	d123      	bne.n	800488e <bt_spi_rx_thread+0xf2>
	return (rxmsg[EVT_VENDOR_CODE_MSB] << 8) | rxmsg[EVT_VENDOR_CODE_LSB];
 8004846:	7922      	ldrb	r2, [r4, #4]
 8004848:	78e3      	ldrb	r3, [r4, #3]
 800484a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	switch (bt_spi_get_evt(rxmsg)) {
 800484e:	2b01      	cmp	r3, #1
 8004850:	d1bb      	bne.n	80047ca <bt_spi_rx_thread+0x2e>
 8004852:	4825      	ldr	r0, [pc, #148]	; (80048e8 <bt_spi_rx_thread+0x14c>)
 8004854:	f00d faba 	bl	8011dcc <_impl_k_sem_give>
 8004858:	e7b7      	b.n	80047ca <bt_spi_rx_thread+0x2e>
				buf = bt_buf_get_cmd_complete(K_FOREVER);
 800485a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485e:	f001 ff47 	bl	80066f0 <bt_buf_get_cmd_complete>
			net_buf_add_mem(buf, &rxmsg[1],
 8004862:	78a2      	ldrb	r2, [r4, #2]
 8004864:	4921      	ldr	r1, [pc, #132]	; (80048ec <bt_spi_rx_thread+0x150>)
				buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004866:	4605      	mov	r5, r0
			net_buf_add_mem(buf, &rxmsg[1],
 8004868:	3202      	adds	r2, #2
 800486a:	3008      	adds	r0, #8
			net_buf_add_mem(buf, &rxmsg[5],
 800486c:	f00c fe50 	bl	8011510 <net_buf_simple_add_mem>
		if (rxmsg[PACKET_TYPE] == HCI_EVT &&
 8004870:	7823      	ldrb	r3, [r4, #0]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <bt_spi_rx_thread+0xea>
		    bt_hci_evt_is_prio(rxmsg[EVT_HEADER_EVENT])) {
 8004876:	7862      	ldrb	r2, [r4, #1]
 8004878:	2a13      	cmp	r2, #19
 800487a:	d804      	bhi.n	8004886 <bt_spi_rx_thread+0xea>
 800487c:	2301      	movs	r3, #1
 800487e:	4093      	lsls	r3, r2
 8004880:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 8004884:	d122      	bne.n	80048cc <bt_spi_rx_thread+0x130>
			bt_recv(buf);
 8004886:	4628      	mov	r0, r5
 8004888:	f001 fc7c 	bl	8006184 <bt_recv>
 800488c:	e79d      	b.n	80047ca <bt_spi_rx_thread+0x2e>
				buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 800488e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004892:	2001      	movs	r0, #1
 8004894:	f001 ff14 	bl	80066c0 <bt_buf_get_rx>
 8004898:	e7e3      	b.n	8004862 <bt_spi_rx_thread+0xc6>
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 800489a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800489e:	2003      	movs	r0, #3
 80048a0:	f001 ff0e 	bl	80066c0 <bt_buf_get_rx>
			memcpy(&acl_hdr, &rxmsg[1], sizeof(acl_hdr));
 80048a4:	2204      	movs	r2, #4
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 80048a6:	4605      	mov	r5, r0
			memcpy(&acl_hdr, &rxmsg[1], sizeof(acl_hdr));
 80048a8:	4910      	ldr	r1, [pc, #64]	; (80048ec <bt_spi_rx_thread+0x150>)
 80048aa:	eb0d 0002 	add.w	r0, sp, r2
 80048ae:	f7fb ffe7 	bl	8000880 <memcpy>
			net_buf_add_mem(buf, &acl_hdr, sizeof(acl_hdr));
 80048b2:	f105 0908 	add.w	r9, r5, #8
 80048b6:	2204      	movs	r2, #4
 80048b8:	eb0d 0102 	add.w	r1, sp, r2
 80048bc:	4648      	mov	r0, r9
 80048be:	f00c fe27 	bl	8011510 <net_buf_simple_add_mem>
			net_buf_add_mem(buf, &rxmsg[5],
 80048c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80048c6:	490a      	ldr	r1, [pc, #40]	; (80048f0 <bt_spi_rx_thread+0x154>)
 80048c8:	4648      	mov	r0, r9
 80048ca:	e7cf      	b.n	800486c <bt_spi_rx_thread+0xd0>
			bt_recv_prio(buf);
 80048cc:	4628      	mov	r0, r5
 80048ce:	f001 fc79 	bl	80061c4 <bt_recv_prio>
 80048d2:	e77a      	b.n	80047ca <bt_spi_rx_thread+0x2e>
 80048d4:	200002ec 	.word	0x200002ec
 80048d8:	20000168 	.word	0x20000168
 80048dc:	20006444 	.word	0x20006444
 80048e0:	20006474 	.word	0x20006474
 80048e4:	200001d8 	.word	0x200001d8
 80048e8:	2000645c 	.word	0x2000645c
 80048ec:	200001d9 	.word	0x200001d9
 80048f0:	200001dd 	.word	0x200001dd

080048f4 <bt_spi_open>:
{
 80048f4:	b570      	push	{r4, r5, r6, lr}
	gpio_pin_configure(rst_dev, GPIO_RESET_PIN,
 80048f6:	4d29      	ldr	r5, [pc, #164]	; (800499c <bt_spi_open+0xa8>)
 80048f8:	6828      	ldr	r0, [r5, #0]
	return api->config(port, access_op, pin, flags);
 80048fa:	6843      	ldr	r3, [r0, #4]
{
 80048fc:	b086      	sub	sp, #24
 80048fe:	681c      	ldr	r4, [r3, #0]
 8004900:	2204      	movs	r2, #4
 8004902:	f240 1301 	movw	r3, #257	; 0x101
 8004906:	2100      	movs	r1, #0
 8004908:	47a0      	blx	r4
	gpio_pin_write(rst_dev, GPIO_RESET_PIN, 0);
 800490a:	6828      	ldr	r0, [r5, #0]
	return api->write(port, access_op, pin, value);
 800490c:	6843      	ldr	r3, [r0, #4]
 800490e:	685c      	ldr	r4, [r3, #4]
 8004910:	2300      	movs	r3, #0
 8004912:	4619      	mov	r1, r3
 8004914:	2204      	movs	r2, #4
 8004916:	47a0      	blx	r4
	spi_conf.dev = spi_dev;
 8004918:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <bt_spi_open+0xac>)
	gpio_pin_configure(irq_dev, GPIO_IRQ_PIN,
 800491a:	4c22      	ldr	r4, [pc, #136]	; (80049a4 <bt_spi_open+0xb0>)
	spi_conf.dev = spi_dev;
 800491c:	681a      	ldr	r2, [r3, #0]
	gpio_pin_configure(irq_dev, GPIO_IRQ_PIN,
 800491e:	6820      	ldr	r0, [r4, #0]
	spi_conf.dev = spi_dev;
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <bt_spi_open+0xb4>)
 8004922:	601a      	str	r2, [r3, #0]
	return api->config(port, access_op, pin, flags);
 8004924:	6843      	ldr	r3, [r0, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	681e      	ldr	r6, [r3, #0]
 800492a:	2100      	movs	r1, #0
 800492c:	2326      	movs	r3, #38	; 0x26
 800492e:	47b0      	blx	r6
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8004930:	491e      	ldr	r1, [pc, #120]	; (80049ac <bt_spi_open+0xb8>)
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <bt_spi_open+0xbc>)
	if (gpio_add_callback(irq_dev, &gpio_cb)) {
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
 8004938:	2302      	movs	r3, #2
 800493a:	608b      	str	r3, [r1, #8]
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
 800493c:	6843      	ldr	r3, [r0, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	4798      	blx	r3
 8004944:	4601      	mov	r1, r0
 8004946:	b120      	cbz	r0, 8004952 <bt_spi_open+0x5e>
		return -EINVAL;
 8004948:	f06f 0415 	mvn.w	r4, #21
}
 800494c:	4620      	mov	r0, r4
 800494e:	b006      	add	sp, #24
 8004950:	bd70      	pop	{r4, r5, r6, pc}
	if (gpio_pin_enable_callback(irq_dev, GPIO_IRQ_PIN)) {
 8004952:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
 8004954:	6842      	ldr	r2, [r0, #4]
 8004956:	6914      	ldr	r4, [r2, #16]
 8004958:	2201      	movs	r2, #1
 800495a:	47a0      	blx	r4
 800495c:	4604      	mov	r4, r0
 800495e:	2800      	cmp	r0, #0
 8004960:	d1f2      	bne.n	8004948 <bt_spi_open+0x54>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 8004962:	f06f 0307 	mvn.w	r3, #7
 8004966:	9005      	str	r0, [sp, #20]
 8004968:	9004      	str	r0, [sp, #16]
 800496a:	9303      	str	r3, [sp, #12]
 800496c:	9002      	str	r0, [sp, #8]
 800496e:	9001      	str	r0, [sp, #4]
 8004970:	9000      	str	r0, [sp, #0]
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <bt_spi_open+0xc0>)
 8004974:	4910      	ldr	r1, [pc, #64]	; (80049b8 <bt_spi_open+0xc4>)
 8004976:	4811      	ldr	r0, [pc, #68]	; (80049bc <bt_spi_open+0xc8>)
 8004978:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800497c:	f00d fc5e 	bl	801223c <_impl_k_thread_create>
	gpio_pin_write(rst_dev, GPIO_RESET_PIN, 1);
 8004980:	6828      	ldr	r0, [r5, #0]
	return api->write(port, access_op, pin, value);
 8004982:	6843      	ldr	r3, [r0, #4]
 8004984:	4621      	mov	r1, r4
 8004986:	685d      	ldr	r5, [r3, #4]
 8004988:	2204      	movs	r2, #4
 800498a:	2301      	movs	r3, #1
 800498c:	47a8      	blx	r5
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 800498e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004992:	480b      	ldr	r0, [pc, #44]	; (80049c0 <bt_spi_open+0xcc>)
 8004994:	f00d fa5c 	bl	8011e50 <_impl_k_sem_take>
 8004998:	e7d8      	b.n	800494c <bt_spi_open+0x58>
 800499a:	bf00      	nop
 800499c:	2000016c 	.word	0x2000016c
 80049a0:	200002d8 	.word	0x200002d8
 80049a4:	20000168 	.word	0x20000168
 80049a8:	2000588c 	.word	0x2000588c
 80049ac:	2000015c 	.word	0x2000015c
 80049b0:	08004699 	.word	0x08004699
 80049b4:	0800479d 	.word	0x0800479d
 80049b8:	20001510 	.word	0x20001510
 80049bc:	20000170 	.word	0x20000170
 80049c0:	2000645c 	.word	0x2000645c

080049c4 <_timer_int_handler>:
	__asm__(" cpsie i"); /* re-enable interrupts (PRIMASK = 0) */

#else /* !CONFIG_SYS_POWER_MANAGEMENT */

	/* accumulate total counter value */
	clock_accumulated_count += sys_clock_hw_cycles_per_tick;
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <_timer_int_handler+0x20>)
 80049c6:	4908      	ldr	r1, [pc, #32]	; (80049e8 <_timer_int_handler+0x24>)
{
 80049c8:	b508      	push	{r3, lr}
	clock_accumulated_count += sys_clock_hw_cycles_per_tick;
 80049ca:	6809      	ldr	r1, [r1, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	440b      	add	r3, r1
 80049d0:	6013      	str	r3, [r2, #0]

	/*
	 * one more tick has occurred -- don't need to do anything special since
	 * timer is already configured to interrupt on the following tick
	 */
	_sys_clock_tick_announce();
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <_timer_int_handler+0x28>)
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f00d fa6f 	bl	8011eb8 <_nano_sys_clock_tick_announce>
	read_timer_end_of_tick_handler();
#endif

	extern void _ExcExit(void);
	_ExcExit();
}
 80049da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 80049de:	f7fe b96b 	b.w	8002cb8 <_ExcExit>
 80049e2:	bf00      	nop
 80049e4:	200003ec 	.word	0x200003ec
 80049e8:	2000635c 	.word	0x2000635c
 80049ec:	20006358 	.word	0x20006358

080049f0 <_sys_clock_driver_init>:
	 */

	/* systick supports 24-bit H/W counter */
	__ASSERT(sys_clock_hw_cycles_per_tick <= (1 << 24),
		 "sys_clock_hw_cycles_per_tick too large");
	sysTickReloadSet(sys_clock_hw_cycles_per_tick - 1);
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <_sys_clock_driver_init+0x20>)
 80049f2:	681a      	ldr	r2, [r3, #0]
	SysTick->LOAD = count;
 80049f4:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <_sys_clock_driver_init+0x24>)
	sysTickReloadSet(sys_clock_hw_cycles_per_tick - 1);
 80049f6:	3a01      	subs	r2, #1
	SysTick->LOAD = count;
 80049f8:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <_sys_clock_driver_init+0x28>)
	SysTick->VAL = 0; /* also clears the countflag */
 80049fc:	2000      	movs	r0, #0
 80049fe:	2110      	movs	r1, #16
 8004a00:	6098      	str	r0, [r3, #8]
 8004a02:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23

#endif /* CONFIG_TICKLESS_IDLE */

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);

	SysTick->CTRL = ctrl;
 8004a06:	2207      	movs	r2, #7
 8004a08:	601a      	str	r2, [r3, #0]

	SysTick->VAL = 0; /* triggers immediate reload of count */
 8004a0a:	6098      	str	r0, [r3, #8]

	return 0;
}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000635c 	.word	0x2000635c
 8004a14:	e000e010 	.word	0xe000e010
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <_timer_cycle_get_32>:
 * \INTERNAL WARNING
 * systick counter is a 24-bit down counter which is reset to "reload" value
 * once it reaches 0.
 */
u32_t _timer_cycle_get_32(void)
{
 8004a1c:	b530      	push	{r4, r5, lr}
return (u32_t) get_elapsed_count();
#else
	u32_t cac, count;

	do {
		cac = clock_accumulated_count;
 8004a1e:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <_timer_cycle_get_32+0x18>)
		count = SysTick->LOAD - SysTick->VAL;
 8004a20:	4905      	ldr	r1, [pc, #20]	; (8004a38 <_timer_cycle_get_32+0x1c>)
		cac = clock_accumulated_count;
 8004a22:	6813      	ldr	r3, [r2, #0]
		count = SysTick->LOAD - SysTick->VAL;
 8004a24:	684c      	ldr	r4, [r1, #4]
 8004a26:	6888      	ldr	r0, [r1, #8]
	} while (cac != clock_accumulated_count);
 8004a28:	6815      	ldr	r5, [r2, #0]
 8004a2a:	42ab      	cmp	r3, r5
 8004a2c:	d1f9      	bne.n	8004a22 <_timer_cycle_get_32+0x6>

	return cac + count;
 8004a2e:	4423      	add	r3, r4
#endif
}
 8004a30:	1a18      	subs	r0, r3, r0
 8004a32:	bd30      	pop	{r4, r5, pc}
 8004a34:	200003ec 	.word	0x200003ec
 8004a38:	e000e010 	.word	0xe000e010

08004a3c <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32F4_PINMUX_FUNC_PA12_OTG_FS_DP},
#endif	/* CONFIG_USB_DC_STM */
};

static int pinmux_stm32_init(struct device *port)
{
 8004a3c:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 8004a3e:	2108      	movs	r1, #8
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <pinmux_stm32_init+0x10>)
 8004a42:	f7ff fac3 	bl	8003fcc <stm32_setup_pins>

	return 0;
}
 8004a46:	2000      	movs	r0, #0
 8004a48:	bd08      	pop	{r3, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08013644 	.word	0x08013644

08004a50 <send_cmd_status>:
		u8_t dhkey[32];
	};
} ecc;

static void send_cmd_status(u16_t opcode, u8_t status)
{
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4680      	mov	r8, r0
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode %x status %x", opcode, status);

	buf = bt_buf_get_cmd_complete(K_FOREVER);
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
 8004a5a:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
 8004a5c:	f001 fe48 	bl	80066f0 <bt_buf_get_cmd_complete>
 8004a60:	89c3      	ldrh	r3, [r0, #14]
 8004a62:	4403      	add	r3, r0
 8004a64:	3313      	adds	r3, #19
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
 8004a6a:	2501      	movs	r5, #1
	bt_buf_set_type(buf, BT_BUF_EVT);

	hdr = net_buf_add(buf, sizeof(*hdr));
 8004a6c:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
 8004a70:	4604      	mov	r4, r0
 8004a72:	701d      	strb	r5, [r3, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004a74:	2102      	movs	r1, #2
 8004a76:	4630      	mov	r0, r6
 8004a78:	f00c fd44 	bl	8011504 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
 8004a7c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
 8004a7e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
 8004a80:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
 8004a82:	7041      	strb	r1, [r0, #1]

	evt = net_buf_add(buf, sizeof(*evt));
 8004a84:	4630      	mov	r0, r6
 8004a86:	f00c fd3d 	bl	8011504 <net_buf_simple_add>
	evt->ncmd = 1;
 8004a8a:	7045      	strb	r5, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
	evt->status = status;
 8004a8c:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
 8004a8e:	f8a0 8002 	strh.w	r8, [r0, #2]

	bt_recv_prio(buf);
 8004a92:	4620      	mov	r0, r4
}
 8004a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
 8004a98:	f001 bb94 	b.w	80061c4 <bt_recv_prio>

08004a9c <sys_memcpy_swap.constprop.3>:
 *
 * @param dst A valid pointer on a memory area where to copy the data in
 * @param src A valid pointer on a memory area where to copy the data from
 * @param length Size of both dst and src memory areas
 */
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
 8004a9c:	f101 0320 	add.w	r3, r1, #32
 8004aa0:	3801      	subs	r0, #1
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
 8004aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aa6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
 8004aaa:	428b      	cmp	r3, r1
 8004aac:	d1f9      	bne.n	8004aa2 <sys_memcpy_swap.constprop.3+0x6>
	}
}
 8004aae:	4770      	bx	lr

08004ab0 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
 8004ab0:	b580      	push	{r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004ab2:	4e54      	ldr	r6, [pc, #336]	; (8004c04 <ecc_thread+0x154>)
 8004ab4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004c1c <ecc_thread+0x16c>
 8004ab8:	4635      	mov	r5, r6
 8004aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f00d f9c6 	bl	8011e50 <_impl_k_sem_take>
 8004ac4:	f3bf 8f5b 	dmb	ish
 8004ac8:	6834      	ldr	r4, [r6, #0]
 8004aca:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
 8004ace:	f014 0401 	ands.w	r4, r4, #1
 8004ad2:	d04e      	beq.n	8004b72 <ecc_thread+0xc2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
 8004ad4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8004c18 <ecc_thread+0x168>
 8004ad8:	4c4b      	ldr	r4, [pc, #300]	; (8004c08 <ecc_thread+0x158>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
 8004ada:	4f4c      	ldr	r7, [pc, #304]	; (8004c0c <ecc_thread+0x15c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
 8004adc:	484c      	ldr	r0, [pc, #304]	; (8004c10 <ecc_thread+0x160>)
 8004ade:	464a      	mov	r2, r9
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f7fc f9af 	bl	8000e44 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
 8004ae6:	b3c8      	cbz	r0, 8004b5c <ecc_thread+0xac>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
 8004ae8:	2220      	movs	r2, #32
 8004aea:	4639      	mov	r1, r7
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7fb feb2 	bl	8000856 <memcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0f2      	beq.n	8004adc <ecc_thread+0x2c>
	return 0;
 8004af6:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004afc:	2001      	movs	r0, #1
 8004afe:	f001 fddf 	bl	80066c0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004b02:	f100 0708 	add.w	r7, r0, #8
 8004b06:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004b08:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f00c fcfa 	bl	8011504 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
 8004b10:	233e      	movs	r3, #62	; 0x3e
 8004b12:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
 8004b14:	2342      	movs	r3, #66	; 0x42
 8004b16:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f00c fcf2 	bl	8011504 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
 8004b20:	2308      	movs	r3, #8
 8004b22:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
 8004b24:	2141      	movs	r1, #65	; 0x41
 8004b26:	4638      	mov	r0, r7
 8004b28:	f00c fcec 	bl	8011504 <net_buf_simple_add>
 8004b2c:	4607      	mov	r7, r0
	evt->status = status;
 8004b2e:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
 8004b32:	b1ac      	cbz	r4, 8004b60 <ecc_thread+0xb0>
		memset(evt->key, 0, sizeof(evt->key));
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	2100      	movs	r1, #0
 8004b38:	f7fb fece 	bl	80008d8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8004b3c:	f3bf 8f5b 	dmb	ish
 8004b40:	e855 3f00 	ldrex	r3, [r5]
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	e845 3200 	strex	r2, r3, [r5]
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d1f7      	bne.n	8004b40 <ecc_thread+0x90>
 8004b50:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
 8004b54:	4648      	mov	r0, r9
 8004b56:	f001 fb15 	bl	8006184 <bt_recv>
 8004b5a:	e7ae      	b.n	8004aba <ecc_thread+0xa>
			return BT_HCI_ERR_UNSPECIFIED;
 8004b5c:	241f      	movs	r4, #31
 8004b5e:	e7cb      	b.n	8004af8 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
 8004b60:	492b      	ldr	r1, [pc, #172]	; (8004c10 <ecc_thread+0x160>)
 8004b62:	f7ff ff9b 	bl	8004a9c <sys_memcpy_swap.constprop.3>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
 8004b66:	492b      	ldr	r1, [pc, #172]	; (8004c14 <ecc_thread+0x164>)
 8004b68:	f107 0021 	add.w	r0, r7, #33	; 0x21
 8004b6c:	f7ff ff96 	bl	8004a9c <sys_memcpy_swap.constprop.3>
 8004b70:	e7e4      	b.n	8004b3c <ecc_thread+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004b72:	f3bf 8f5b 	dmb	ish
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
 8004b7c:	079b      	lsls	r3, r3, #30
 8004b7e:	d59c      	bpl.n	8004aba <ecc_thread+0xa>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
 8004b80:	4925      	ldr	r1, [pc, #148]	; (8004c18 <ecc_thread+0x168>)
 8004b82:	4823      	ldr	r0, [pc, #140]	; (8004c10 <ecc_thread+0x160>)
 8004b84:	f7fd f923 	bl	8001dce <uECC_valid_public_key>
	if (ret < 0) {
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	db07      	blt.n	8004b9c <ecc_thread+0xec>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
 8004b8c:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <ecc_thread+0x160>)
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <ecc_thread+0x168>)
 8004b90:	f1a2 0120 	sub.w	r1, r2, #32
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7fc f9a1 	bl	8000edc <uECC_shared_secret>
 8004b9a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f001 fd8d 	bl	80066c0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004ba6:	f100 0708 	add.w	r7, r0, #8
 8004baa:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004bac:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f00c fca8 	bl	8011504 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
 8004bb4:	233e      	movs	r3, #62	; 0x3e
 8004bb6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
 8004bb8:	2322      	movs	r3, #34	; 0x22
 8004bba:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f00c fca0 	bl	8011504 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
 8004bc8:	2121      	movs	r1, #33	; 0x21
 8004bca:	4638      	mov	r0, r7
 8004bcc:	f00c fc9a 	bl	8011504 <net_buf_simple_add>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	3001      	adds	r0, #1
	if (ret == TC_CRYPTO_FAIL) {
 8004bd4:	b984      	cbnz	r4, 8004bf8 <ecc_thread+0x148>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
 8004bd6:	221f      	movs	r2, #31
 8004bd8:	701a      	strb	r2, [r3, #0]
		memset(evt->dhkey, 0, sizeof(evt->dhkey));
 8004bda:	4621      	mov	r1, r4
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f7fb fe7b 	bl	80008d8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8004be2:	f3bf 8f5b 	dmb	ish
 8004be6:	e855 3f00 	ldrex	r3, [r5]
 8004bea:	f023 0302 	bic.w	r3, r3, #2
 8004bee:	e845 3200 	strex	r2, r3, [r5]
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d0ac      	beq.n	8004b50 <ecc_thread+0xa0>
 8004bf6:	e7f6      	b.n	8004be6 <ecc_thread+0x136>
		evt->status = 0;
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
 8004bfc:	4904      	ldr	r1, [pc, #16]	; (8004c10 <ecc_thread+0x160>)
 8004bfe:	f7ff ff4d 	bl	8004a9c <sys_memcpy_swap.constprop.3>
 8004c02:	e7ee      	b.n	8004be2 <ecc_thread+0x132>
 8004c04:	200004b8 	.word	0x200004b8
 8004c08:	200003f0 	.word	0x200003f0
 8004c0c:	08013734 	.word	0x08013734
 8004c10:	20000410 	.word	0x20000410
 8004c14:	20000430 	.word	0x20000430
 8004c18:	08013684 	.word	0x08013684
 8004c1c:	2000642c 	.word	0x2000642c

08004c20 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	89c3      	ldrh	r3, [r0, #14]
 8004c24:	4403      	add	r3, r0
 8004c26:	3313      	adds	r3, #19
 8004c28:	f023 0303 	bic.w	r3, r3, #3
 8004c2c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b9ab      	cbnz	r3, 8004c5e <bt_hci_ecc_send+0x3e>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
 8004c32:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	f242 0125 	movw	r1, #8229	; 0x2025
 8004c3a:	428a      	cmp	r2, r1
 8004c3c:	d017      	beq.n	8004c6e <bt_hci_ecc_send+0x4e>
 8004c3e:	f242 0126 	movw	r1, #8230	; 0x2026
 8004c42:	428a      	cmp	r2, r1
 8004c44:	d03d      	beq.n	8004cc2 <bt_hci_ecc_send+0xa2>
 8004c46:	f242 0101 	movw	r1, #8193	; 0x2001
 8004c4a:	428a      	cmp	r2, r1
 8004c4c:	d107      	bne.n	8004c5e <bt_hci_ecc_send+0x3e>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
 8004c4e:	78da      	ldrb	r2, [r3, #3]
 8004c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c54:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
 8004c56:	791a      	ldrb	r2, [r3, #4]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
 8004c5e:	4b34      	ldr	r3, [pc, #208]	; (8004d30 <bt_hci_ecc_send+0x110>)
 8004c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c64:	4620      	mov	r0, r4
 8004c66:	68db      	ldr	r3, [r3, #12]
}
 8004c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
 8004c6c:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
 8004c6e:	2103      	movs	r1, #3
 8004c70:	3008      	adds	r0, #8
 8004c72:	f00c fcb2 	bl	80115da <net_buf_simple_pull>
	net_buf_unref(buf);
 8004c76:	4620      	mov	r0, r4
 8004c78:	f00c fc24 	bl	80114c4 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004c7c:	f3bf 8f5b 	dmb	ish
 8004c80:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <bt_hci_ecc_send+0x114>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
 8004c88:	0791      	lsls	r1, r2, #30
 8004c8a:	d506      	bpl.n	8004c9a <bt_hci_ecc_send+0x7a>
		status = BT_HCI_ERR_CMD_DISALLOWED;
 8004c8c:	210c      	movs	r1, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
 8004c8e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
 8004c92:	f7ff fedd 	bl	8004a50 <send_cmd_status>
}
 8004c96:	2000      	movs	r0, #0
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8004c9a:	f3bf 8f5b 	dmb	ish
 8004c9e:	e853 1f00 	ldrex	r1, [r3]
 8004ca2:	f041 0201 	orr.w	r2, r1, #1
 8004ca6:	e843 2000 	strex	r0, r2, [r3]
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d1f7      	bne.n	8004c9e <bt_hci_ecc_send+0x7e>
 8004cae:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
 8004cb2:	f011 0401 	ands.w	r4, r1, #1
 8004cb6:	d1e9      	bne.n	8004c8c <bt_hci_ecc_send+0x6c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004cb8:	481f      	ldr	r0, [pc, #124]	; (8004d38 <bt_hci_ecc_send+0x118>)
 8004cba:	f00d f887 	bl	8011dcc <_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	e7e5      	b.n	8004c8e <bt_hci_ecc_send+0x6e>
			net_buf_pull(buf, sizeof(*chdr));
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	3008      	adds	r0, #8
 8004cc6:	f00c fc88 	bl	80115da <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004cca:	f3bf 8f5b 	dmb	ish
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <bt_hci_ecc_send+0x114>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
 8004cd6:	07d2      	lsls	r2, r2, #31
 8004cd8:	d507      	bpl.n	8004cea <bt_hci_ecc_send+0xca>
		status = BT_HCI_ERR_CMD_DISALLOWED;
 8004cda:	250c      	movs	r5, #12
	net_buf_unref(buf);
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f00c fbf1 	bl	80114c4 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	f242 0026 	movw	r0, #8230	; 0x2026
 8004ce8:	e7d3      	b.n	8004c92 <bt_hci_ecc_send+0x72>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
 8004cea:	89a2      	ldrh	r2, [r4, #12]
 8004cec:	2a3f      	cmp	r2, #63	; 0x3f
 8004cee:	d91c      	bls.n	8004d2a <bt_hci_ecc_send+0x10a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8004cf0:	f3bf 8f5b 	dmb	ish
 8004cf4:	e853 5f00 	ldrex	r5, [r3]
 8004cf8:	f045 0202 	orr.w	r2, r5, #2
 8004cfc:	e843 2100 	strex	r1, r2, [r3]
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d1f7      	bne.n	8004cf4 <bt_hci_ecc_send+0xd4>
 8004d04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
 8004d08:	f015 0502 	ands.w	r5, r5, #2
 8004d0c:	d1e5      	bne.n	8004cda <bt_hci_ecc_send+0xba>
	cmd = (void *)buf->data;
 8004d0e:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
 8004d10:	480a      	ldr	r0, [pc, #40]	; (8004d3c <bt_hci_ecc_send+0x11c>)
 8004d12:	4631      	mov	r1, r6
 8004d14:	f7ff fec2 	bl	8004a9c <sys_memcpy_swap.constprop.3>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
 8004d18:	f106 0120 	add.w	r1, r6, #32
 8004d1c:	4808      	ldr	r0, [pc, #32]	; (8004d40 <bt_hci_ecc_send+0x120>)
 8004d1e:	f7ff febd 	bl	8004a9c <sys_memcpy_swap.constprop.3>
 8004d22:	4805      	ldr	r0, [pc, #20]	; (8004d38 <bt_hci_ecc_send+0x118>)
 8004d24:	f00d f852 	bl	8011dcc <_impl_k_sem_give>
 8004d28:	e7d8      	b.n	8004cdc <bt_hci_ecc_send+0xbc>
		status = BT_HCI_ERR_INVALID_PARAM;
 8004d2a:	2512      	movs	r5, #18
 8004d2c:	e7d6      	b.n	8004cdc <bt_hci_ecc_send+0xbc>
 8004d2e:	bf00      	nop
 8004d30:	200058a0 	.word	0x200058a0
 8004d34:	200004b8 	.word	0x200004b8
 8004d38:	2000642c 	.word	0x2000642c
 8004d3c:	20000410 	.word	0x20000410
 8004d40:	20000430 	.word	0x20000430

08004d44 <default_CSPRNG>:

int default_CSPRNG(u8_t *dst, unsigned int len)
{
 8004d44:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
 8004d46:	f001 fdd7 	bl	80068f8 <bt_rand>
}
 8004d4a:	fab0 f080 	clz	r0, r0
 8004d4e:	0940      	lsrs	r0, r0, #5
 8004d50:	bd08      	pop	{r3, pc}
	...

08004d54 <bt_hci_ecc_init>:

void bt_hci_ecc_init(void)
{
 8004d54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 8004d56:	2300      	movs	r3, #0
 8004d58:	220a      	movs	r2, #10
 8004d5a:	9305      	str	r3, [sp, #20]
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	9203      	str	r2, [sp, #12]
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d6a:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <bt_hci_ecc_init+0x28>)
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <bt_hci_ecc_init+0x2c>)
 8004d6e:	4805      	ldr	r0, [pc, #20]	; (8004d84 <bt_hci_ecc_init+0x30>)
 8004d70:	f00d fa64 	bl	801223c <_impl_k_thread_create>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
}
 8004d74:	b007      	add	sp, #28
 8004d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d7a:	bf00      	nop
 8004d7c:	08004ab1 	.word	0x08004ab1
 8004d80:	200016d0 	.word	0x200016d0
 8004d84:	20000450 	.word	0x20000450

08004d88 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
 8004d88:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
 8004d8a:	7802      	ldrb	r2, [r0, #0]
 8004d8c:	2a01      	cmp	r2, #1
{
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460b      	mov	r3, r1
	switch (src->type) {
 8004d92:	d017      	beq.n	8004dc4 <uuid_to_uuid128+0x3c>
 8004d94:	d303      	bcc.n	8004d9e <uuid_to_uuid128+0x16>
 8004d96:	2a02      	cmp	r2, #2
 8004d98:	d02c      	beq.n	8004df4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
 8004d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8004d9c:	4770      	bx	lr
		*dst = uuid128_base;
 8004d9e:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <uuid_to_uuid128+0x78>)
 8004da0:	460d      	mov	r5, r1
 8004da2:	f102 0710 	add.w	r7, r2, #16
 8004da6:	6810      	ldr	r0, [r2, #0]
 8004da8:	6851      	ldr	r1, [r2, #4]
 8004daa:	462e      	mov	r6, r5
 8004dac:	c603      	stmia	r6!, {r0, r1}
 8004dae:	3208      	adds	r2, #8
 8004db0:	42ba      	cmp	r2, r7
 8004db2:	4635      	mov	r5, r6
 8004db4:	d1f7      	bne.n	8004da6 <uuid_to_uuid128+0x1e>
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
 8004dba:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
 8004dbc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 8004dbe:	0a12      	lsrs	r2, r2, #8
 8004dc0:	739a      	strb	r2, [r3, #14]
 8004dc2:	e7ea      	b.n	8004d9a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
 8004dc4:	4a0e      	ldr	r2, [pc, #56]	; (8004e00 <uuid_to_uuid128+0x78>)
 8004dc6:	460d      	mov	r5, r1
 8004dc8:	f102 0710 	add.w	r7, r2, #16
 8004dcc:	6810      	ldr	r0, [r2, #0]
 8004dce:	6851      	ldr	r1, [r2, #4]
 8004dd0:	462e      	mov	r6, r5
 8004dd2:	c603      	stmia	r6!, {r0, r1}
 8004dd4:	3208      	adds	r2, #8
 8004dd6:	42ba      	cmp	r2, r7
 8004dd8:	4635      	mov	r5, r6
 8004dda:	d1f7      	bne.n	8004dcc <uuid_to_uuid128+0x44>
 8004ddc:	7812      	ldrb	r2, [r2, #0]
 8004dde:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
 8004de0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
 8004de2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 8004de4:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
 8004de8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
 8004dea:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
 8004dec:	0a12      	lsrs	r2, r2, #8
 8004dee:	7399      	strb	r1, [r3, #14]
 8004df0:	741a      	strb	r2, [r3, #16]
 8004df2:	e7d2      	b.n	8004d9a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
 8004df4:	4601      	mov	r1, r0
 8004df6:	2211      	movs	r2, #17
 8004df8:	4618      	mov	r0, r3
}
 8004dfa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
 8004dfc:	f7fb bd40 	b.w	8000880 <memcpy>
 8004e00:	08013754 	.word	0x08013754

08004e04 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
 8004e04:	b510      	push	{r4, lr}
 8004e06:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
 8004e08:	7801      	ldrb	r1, [r0, #0]
 8004e0a:	7822      	ldrb	r2, [r4, #0]
 8004e0c:	428a      	cmp	r2, r1
{
 8004e0e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
 8004e10:	d00e      	beq.n	8004e30 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
 8004e12:	4669      	mov	r1, sp
 8004e14:	f7ff ffb8 	bl	8004d88 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
 8004e18:	a905      	add	r1, sp, #20
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ffb4 	bl	8004d88 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
 8004e20:	2210      	movs	r2, #16
 8004e22:	f10d 0115 	add.w	r1, sp, #21
 8004e26:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8004e2a:	f7fb fd14 	bl	8000856 <memcmp>
 8004e2e:	e00a      	b.n	8004e46 <bt_uuid_cmp+0x42>
	switch (u1->type) {
 8004e30:	2a01      	cmp	r2, #1
 8004e32:	d00a      	beq.n	8004e4a <bt_uuid_cmp+0x46>
 8004e34:	d304      	bcc.n	8004e40 <bt_uuid_cmp+0x3c>
 8004e36:	2a02      	cmp	r2, #2
 8004e38:	d00a      	beq.n	8004e50 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
 8004e3a:	f06f 0015 	mvn.w	r0, #21
 8004e3e:	e002      	b.n	8004e46 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
 8004e40:	8840      	ldrh	r0, [r0, #2]
 8004e42:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8004e44:	1ac0      	subs	r0, r0, r3
}
 8004e46:	b00a      	add	sp, #40	; 0x28
 8004e48:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8004e4a:	6840      	ldr	r0, [r0, #4]
 8004e4c:	6863      	ldr	r3, [r4, #4]
 8004e4e:	e7f9      	b.n	8004e44 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8004e50:	2210      	movs	r2, #16
 8004e52:	1c61      	adds	r1, r4, #1
 8004e54:	3001      	adds	r0, #1
 8004e56:	e7e8      	b.n	8004e2a <bt_uuid_cmp+0x26>

08004e58 <net_buf_user_data>:
 8004e58:	89c3      	ldrh	r3, [r0, #14]
 8004e5a:	4418      	add	r0, r3
 8004e5c:	3013      	adds	r0, #19
}
 8004e5e:	f020 0003 	bic.w	r0, r0, #3
 8004e62:	4770      	bx	lr

08004e64 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
 8004e64:	2207      	movs	r2, #7
 8004e66:	f7fb bd0b 	b.w	8000880 <memcpy>

08004e6a <atomic_or>:
{
 8004e6a:	b500      	push	{lr}
}
 8004e6c:	f3bf 8f5b 	dmb	ish
 8004e70:	e850 3f00 	ldrex	r3, [r0]
 8004e74:	ea43 0201 	orr.w	r2, r3, r1
 8004e78:	e840 2e00 	strex	lr, r2, [r0]
 8004e7c:	f1be 0f00 	cmp.w	lr, #0
 8004e80:	d1f6      	bne.n	8004e70 <atomic_or+0x6>
 8004e82:	f3bf 8f5b 	dmb	ish
 8004e86:	4618      	mov	r0, r3
 8004e88:	f85d fb04 	ldr.w	pc, [sp], #4

08004e8c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 8004e8c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004e8e:	f3bf 8f5b 	dmb	ish
 8004e92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004e96:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
 8004e9a:	f001 011f 	and.w	r1, r1, #31
 8004e9e:	4108      	asrs	r0, r1
}
 8004ea0:	f000 0001 	and.w	r0, r0, #1
 8004ea4:	4770      	bx	lr

08004ea6 <atomic_and>:
{
 8004ea6:	b500      	push	{lr}
}
 8004ea8:	f3bf 8f5b 	dmb	ish
 8004eac:	e850 3f00 	ldrex	r3, [r0]
 8004eb0:	ea03 0201 	and.w	r2, r3, r1
 8004eb4:	e840 2e00 	strex	lr, r2, [r0]
 8004eb8:	f1be 0f00 	cmp.w	lr, #0
 8004ebc:	d1f6      	bne.n	8004eac <atomic_and+0x6>
 8004ebe:	f3bf 8f5b 	dmb	ish
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08004ec8 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
 8004ec8:	78c3      	ldrb	r3, [r0, #3]
 8004eca:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	f100 0170 	add.w	r1, r0, #112	; 0x70
 8004ed4:	bf08      	it	eq
 8004ed6:	2200      	moveq	r2, #0
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <update_conn_param+0x18>)
 8004eda:	f00d bb09 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 8004ede:	bf00      	nop
 8004ee0:	20001498 	.word	0x20001498

08004ee4 <hci_cmd_done.isra.13>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4605      	mov	r5, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004ee8:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
 8004eea:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004eec:	f00c fa18 	bl	8011320 <net_buf_pool_get>
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <hci_cmd_done.isra.13+0x30>)
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	d10d      	bne.n	8004f12 <hci_cmd_done.isra.13+0x2e>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff ffae 	bl	8004e58 <net_buf_user_data>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
 8004efc:	6843      	ldr	r3, [r0, #4]
 8004efe:	b143      	cbz	r3, 8004f12 <hci_cmd_done.isra.13+0x2e>
		cmd(buf)->status = status;
 8004f00:	7045      	strb	r5, [r0, #1]
		k_sem_give(cmd(buf)->sync);
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7ff ffa8 	bl	8004e58 <net_buf_user_data>
	}
}
 8004f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004f0c:	6840      	ldr	r0, [r0, #4]
 8004f0e:	f00c bf5d 	b.w	8011dcc <_impl_k_sem_give>
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	2000651c 	.word	0x2000651c

08004f18 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
 8004f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
 8004f1c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004ffc <hci_tx_thread+0xe4>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004f20:	4c34      	ldr	r4, [pc, #208]	; (8004ff4 <hci_tx_thread+0xdc>)
		events[0].state = K_POLL_STATE_NOT_READY;
 8004f22:	f898 300d 	ldrb.w	r3, [r8, #13]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BT_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
 8004f26:	4834      	ldr	r0, [pc, #208]	; (8004ff8 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
 8004f28:	f36f 1307 	bfc	r3, #4, #4
 8004f2c:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
 8004f30:	f001 febe 	bl	8006cb0 <bt_conn_prepare_events>
 8004f34:	1c46      	adds	r6, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	482f      	ldr	r0, [pc, #188]	; (8004ffc <hci_tx_thread+0xe4>)
 8004f3e:	f00d fcff 	bl	8012940 <k_poll>
		BT_ASSERT(err == 0);
 8004f42:	b9b8      	cbnz	r0, 8004f74 <hci_tx_thread+0x5c>
 8004f44:	4d2d      	ldr	r5, [pc, #180]	; (8004ffc <hci_tx_thread+0xe4>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004f46:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8005000 <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004f4a:	f104 0be4 	add.w	fp, r4, #228	; 0xe4
	for (; count; ev++, count--) {
 8004f4e:	b916      	cbnz	r6, 8004f56 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 8004f50:	f00c fe74 	bl	8011c3c <_impl_k_yield>
 8004f54:	e7e5      	b.n	8004f22 <hci_tx_thread+0xa>
		switch (ev->state) {
 8004f56:	7b6b      	ldrb	r3, [r5, #13]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d136      	bne.n	8004fcc <hci_tx_thread+0xb4>
			if (ev->tag == BT_EVENT_CMD_TX) {
 8004f5e:	f895 a00c 	ldrb.w	sl, [r5, #12]
 8004f62:	f1ba 0f00 	cmp.w	sl, #0
 8004f66:	d134      	bne.n	8004fd2 <hci_tx_thread+0xba>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004f68:	4651      	mov	r1, sl
 8004f6a:	4658      	mov	r0, fp
 8004f6c:	f00c fa34 	bl	80113d8 <net_buf_get>
	BT_ASSERT(buf);
 8004f70:	4607      	mov	r7, r0
 8004f72:	b928      	cbnz	r0, 8004f80 <hci_tx_thread+0x68>
 8004f74:	4040      	eors	r0, r0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	f04f 0004 	mov.w	r0, #4
 8004f7e:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f84:	4648      	mov	r0, r9
 8004f86:	f00c ff63 	bl	8011e50 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
 8004f8a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8004f8e:	b118      	cbz	r0, 8004f98 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
 8004f90:	f00c fa98 	bl	80114c4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8004f94:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f00c faaf 	bl	80114fc <net_buf_ref>
 8004f9e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f7ff fe3c 	bl	8004c20 <bt_hci_ecc_send>
	if (err) {
 8004fa8:	b180      	cbz	r0, 8004fcc <hci_tx_thread+0xb4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004faa:	4648      	mov	r0, r9
 8004fac:	f00c ff0e 	bl	8011dcc <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	201f      	movs	r0, #31
 8004fb4:	f7ff ff96 	bl	8004ee4 <hci_cmd_done.isra.13>
		net_buf_unref(bt_dev.sent_cmd);
 8004fb8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8004fbc:	f00c fa82 	bl	80114c4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8004fc0:	2300      	movs	r3, #0
		net_buf_unref(buf);
 8004fc2:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
 8004fc4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
 8004fc8:	f00c fa7c 	bl	80114c4 <net_buf_unref>
	for (; count; ev++, count--) {
 8004fcc:	3514      	adds	r5, #20
 8004fce:	3e01      	subs	r6, #1
 8004fd0:	e7bd      	b.n	8004f4e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
 8004fd2:	f1ba 0f01 	cmp.w	sl, #1
 8004fd6:	d104      	bne.n	8004fe2 <hci_tx_thread+0xca>
					conn = CONTAINER_OF(ev->fifo,
 8004fd8:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
 8004fda:	3818      	subs	r0, #24
 8004fdc:	f001 fda4 	bl	8006b28 <bt_conn_notify_tx>
 8004fe0:	e7f4      	b.n	8004fcc <hci_tx_thread+0xb4>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
 8004fe2:	f1ba 0f02 	cmp.w	sl, #2
 8004fe6:	d1f1      	bne.n	8004fcc <hci_tx_thread+0xb4>
					conn = CONTAINER_OF(ev->fifo,
 8004fe8:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
 8004fea:	3828      	subs	r0, #40	; 0x28
 8004fec:	f002 f8d8 	bl	80071a0 <bt_conn_process_tx>
 8004ff0:	e7ec      	b.n	8004fcc <hci_tx_thread+0xb4>
 8004ff2:	bf00      	nop
 8004ff4:	200058a0 	.word	0x200058a0
 8004ff8:	200059ac 	.word	0x200059ac
 8004ffc:	20005998 	.word	0x20005998
 8005000:	20005948 	.word	0x20005948

08005004 <bt_hci_cmd_create>:
{
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 800500a:	480f      	ldr	r0, [pc, #60]	; (8005048 <bt_hci_cmd_create+0x44>)
 800500c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005010:	f00c f9a2 	bl	8011358 <net_buf_alloc>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8005014:	2101      	movs	r1, #1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 8005016:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8005018:	f00c f9f7 	bl	801140a <net_buf_reserve>
	cmd(buf)->type = BT_BUF_CMD;
 800501c:	4620      	mov	r0, r4
 800501e:	f7ff ff1b 	bl	8004e58 <net_buf_user_data>
 8005022:	2200      	movs	r2, #0
 8005024:	7002      	strb	r2, [r0, #0]
	cmd(buf)->opcode = opcode;
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff16 	bl	8004e58 <net_buf_user_data>
 800502c:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff ff12 	bl	8004e58 <net_buf_user_data>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8005034:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
 8005036:	6042      	str	r2, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
 8005038:	f104 0008 	add.w	r0, r4, #8
 800503c:	f00c fa62 	bl	8011504 <net_buf_simple_add>
	hdr->param_len = param_len;
 8005040:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
 8005042:	8005      	strh	r5, [r0, #0]
}
 8005044:	4620      	mov	r0, r4
 8005046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005048:	2000651c 	.word	0x2000651c

0800504c <bt_hci_cmd_send>:
{
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4605      	mov	r5, r0
	if (!buf) {
 8005050:	460c      	mov	r4, r1
 8005052:	b919      	cbnz	r1, 800505c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
 8005054:	f7ff ffd6 	bl	8005004 <bt_hci_cmd_create>
		if (!buf) {
 8005058:	4604      	mov	r4, r0
 800505a:	b198      	cbz	r0, 8005084 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
 800505c:	f640 4335 	movw	r3, #3125	; 0xc35
 8005060:	429d      	cmp	r5, r3
 8005062:	d109      	bne.n	8005078 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fddb 	bl	8004c20 <bt_hci_ecc_send>
		if (err) {
 800506a:	4605      	mov	r5, r0
 800506c:	b110      	cbz	r0, 8005074 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
 800506e:	4620      	mov	r0, r4
 8005070:	f00c fa28 	bl	80114c4 <net_buf_unref>
}
 8005074:	4628      	mov	r0, r5
 8005076:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 8005078:	4621      	mov	r1, r4
 800507a:	4804      	ldr	r0, [pc, #16]	; (800508c <bt_hci_cmd_send+0x40>)
 800507c:	f00c fa14 	bl	80114a8 <net_buf_put>
	return 0;
 8005080:	2500      	movs	r5, #0
 8005082:	e7f7      	b.n	8005074 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
 8005084:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8005088:	e7f4      	b.n	8005074 <bt_hci_cmd_send+0x28>
 800508a:	bf00      	nop
 800508c:	20005984 	.word	0x20005984

08005090 <report_completed_packet>:
{
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
 8005094:	f7ff fee0 	bl	8004e58 <net_buf_user_data>
 8005098:	8847      	ldrh	r7, [r0, #2]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 800509a:	79a0      	ldrb	r0, [r4, #6]
 800509c:	f00c f940 	bl	8011320 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 80050a0:	4621      	mov	r1, r4
 80050a2:	f00c fc04 	bl	80118ae <k_queue_prepend>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <report_completed_packet+0x80>)
 80050a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ac:	069b      	lsls	r3, r3, #26
 80050ae:	d52e      	bpl.n	800510e <report_completed_packet+0x7e>
	conn = bt_conn_lookup_id(acl(buf)->id);
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fed1 	bl	8004e58 <net_buf_user_data>
 80050b6:	7840      	ldrb	r0, [r0, #1]
 80050b8:	f002 f8d8 	bl	800726c <bt_conn_lookup_id>
	if (!conn) {
 80050bc:	b338      	cbz	r0, 800510e <report_completed_packet+0x7e>
	if (conn->state != BT_CONN_CONNECTED &&
 80050be:	7a43      	ldrb	r3, [r0, #9]
 80050c0:	3b03      	subs	r3, #3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d903      	bls.n	80050ce <report_completed_packet+0x3e>
}
 80050c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
 80050ca:	f001 bf70 	b.w	8006fae <bt_conn_unref>
	bt_conn_unref(conn);
 80050ce:	f001 ff6e 	bl	8006fae <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
 80050d2:	2105      	movs	r1, #5
 80050d4:	f640 4035 	movw	r0, #3125	; 0xc35
 80050d8:	f7ff ff94 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 80050dc:	4604      	mov	r4, r0
 80050de:	b1b0      	cbz	r0, 800510e <report_completed_packet+0x7e>
	cp = net_buf_add(buf, sizeof(*cp));
 80050e0:	f100 0608 	add.w	r6, r0, #8
 80050e4:	2101      	movs	r1, #1
 80050e6:	4630      	mov	r0, r6
 80050e8:	f00c fa0c 	bl	8011504 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
 80050ec:	2501      	movs	r5, #1
 80050ee:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
 80050f0:	2104      	movs	r1, #4
 80050f2:	4630      	mov	r0, r6
 80050f4:	f00c fa06 	bl	8011504 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
 80050f8:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
 80050fa:	8007      	strh	r7, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
 80050fc:	7085      	strb	r5, [r0, #2]
 80050fe:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 8005100:	4621      	mov	r1, r4
 8005102:	f640 4035 	movw	r0, #3125	; 0xc35
}
 8005106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 800510a:	f7ff bf9f 	b.w	800504c <bt_hci_cmd_send>
 800510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005110:	200058a0 	.word	0x200058a0

08005114 <hci_le_set_phy.isra.25>:
static int hci_le_set_phy(struct bt_conn *conn)
 8005114:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 8005116:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
 8005118:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 800511a:	f242 0032 	movw	r0, #8242	; 0x2032
 800511e:	f7ff ff71 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005122:	4605      	mov	r5, r0
 8005124:	b198      	cbz	r0, 800514e <hci_le_set_phy.isra.25+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
 8005126:	2107      	movs	r1, #7
 8005128:	3008      	adds	r0, #8
 800512a:	f00c f9eb 	bl	8011504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 800512e:	8823      	ldrh	r3, [r4, #0]
 8005130:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
 8005132:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
 8005134:	2302      	movs	r3, #2
	cp->all_phys = 0;
 8005136:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
 8005138:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
 800513a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 800513c:	7144      	strb	r4, [r0, #5]
 800513e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
 8005140:	4629      	mov	r1, r5
 8005142:	f242 0032 	movw	r0, #8242	; 0x2032
 8005146:	f7ff ff81 	bl	800504c <bt_hci_cmd_send>
	return 0;
 800514a:	4620      	mov	r0, r4
 800514c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 800514e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 8005152:	bd38      	pop	{r3, r4, r5, pc}

08005154 <le_conn_param_neg_reply>:
{
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4606      	mov	r6, r0
 8005158:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
 800515a:	f242 0021 	movw	r0, #8225	; 0x2021
 800515e:	2103      	movs	r1, #3
 8005160:	f7ff ff50 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005164:	4604      	mov	r4, r0
 8005166:	b160      	cbz	r0, 8005182 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
 8005168:	2103      	movs	r1, #3
 800516a:	3008      	adds	r0, #8
 800516c:	f00c f9ca 	bl	8011504 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
 8005170:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
 8005172:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 8005174:	4621      	mov	r1, r4
 8005176:	f242 0021 	movw	r0, #8225	; 0x2021
}
 800517a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 800517e:	f7ff bf65 	b.w	800504c <bt_hci_cmd_send>
}
 8005182:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8005186:	bd70      	pop	{r4, r5, r6, pc}

08005188 <bt_hci_cmd_send_sync>:
{
 8005188:	b530      	push	{r4, r5, lr}
 800518a:	4615      	mov	r5, r2
 800518c:	b087      	sub	sp, #28
	if (!buf) {
 800518e:	460c      	mov	r4, r1
 8005190:	b919      	cbnz	r1, 800519a <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
 8005192:	f7ff ff37 	bl	8005004 <bt_hci_cmd_create>
		if (!buf) {
 8005196:	4604      	mov	r4, r0
 8005198:	b348      	cbz	r0, 80051ee <bt_hci_cmd_send_sync+0x66>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 800519a:	2201      	movs	r2, #1
 800519c:	2100      	movs	r1, #0
 800519e:	4668      	mov	r0, sp
 80051a0:	f00c fe0a 	bl	8011db8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fe57 	bl	8004e58 <net_buf_user_data>
 80051aa:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f00c f9a4 	bl	80114fc <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 80051b4:	4621      	mov	r1, r4
 80051b6:	480f      	ldr	r0, [pc, #60]	; (80051f4 <bt_hci_cmd_send_sync+0x6c>)
 80051b8:	f00c f976 	bl	80114a8 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80051bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80051c0:	4668      	mov	r0, sp
 80051c2:	f00c fe45 	bl	8011e50 <_impl_k_sem_take>
	if (cmd(buf)->status) {
 80051c6:	4620      	mov	r0, r4
 80051c8:	f7ff fe46 	bl	8004e58 <net_buf_user_data>
 80051cc:	7840      	ldrb	r0, [r0, #1]
 80051ce:	b130      	cbz	r0, 80051de <bt_hci_cmd_send_sync+0x56>
		net_buf_unref(buf);
 80051d0:	4620      	mov	r0, r4
 80051d2:	f00c f977 	bl	80114c4 <net_buf_unref>
		err = -EIO;
 80051d6:	f06f 0004 	mvn.w	r0, #4
}
 80051da:	b007      	add	sp, #28
 80051dc:	bd30      	pop	{r4, r5, pc}
		if (rsp) {
 80051de:	b10d      	cbz	r5, 80051e4 <bt_hci_cmd_send_sync+0x5c>
			*rsp = buf;
 80051e0:	602c      	str	r4, [r5, #0]
 80051e2:	e7fa      	b.n	80051da <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
 80051e4:	4620      	mov	r0, r4
 80051e6:	f00c f96d 	bl	80114c4 <net_buf_unref>
		err = 0;
 80051ea:	4628      	mov	r0, r5
 80051ec:	e7f5      	b.n	80051da <bt_hci_cmd_send_sync+0x52>
			return -ENOBUFS;
 80051ee:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80051f2:	e7f2      	b.n	80051da <bt_hci_cmd_send_sync+0x52>
 80051f4:	20005984 	.word	0x20005984

080051f8 <set_random_address>:
{
 80051f8:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
 80051fa:	4d15      	ldr	r5, [pc, #84]	; (8005250 <set_random_address+0x58>)
 80051fc:	2206      	movs	r2, #6
 80051fe:	f105 0108 	add.w	r1, r5, #8
 8005202:	4606      	mov	r6, r0
 8005204:	f7fb fb27 	bl	8000856 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
 8005208:	4604      	mov	r4, r0
 800520a:	b1d8      	cbz	r0, 8005244 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
 800520c:	2106      	movs	r1, #6
 800520e:	f242 0005 	movw	r0, #8197	; 0x2005
 8005212:	f7ff fef7 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005216:	4604      	mov	r4, r0
 8005218:	b1b0      	cbz	r0, 8005248 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
 800521a:	2206      	movs	r2, #6
 800521c:	4631      	mov	r1, r6
 800521e:	3008      	adds	r0, #8
 8005220:	f00c f976 	bl	8011510 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
 8005224:	4621      	mov	r1, r4
 8005226:	2200      	movs	r2, #0
 8005228:	f242 0005 	movw	r0, #8197	; 0x2005
 800522c:	f7ff ffac 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005230:	4604      	mov	r4, r0
 8005232:	b938      	cbnz	r0, 8005244 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
 8005234:	2206      	movs	r2, #6
 8005236:	4631      	mov	r1, r6
 8005238:	f105 0008 	add.w	r0, r5, #8
 800523c:	f7fb fb20 	bl	8000880 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
 8005240:	2301      	movs	r3, #1
 8005242:	71eb      	strb	r3, [r5, #7]
}
 8005244:	4620      	mov	r0, r4
 8005246:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 8005248:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800524c:	e7fa      	b.n	8005244 <set_random_address+0x4c>
 800524e:	bf00      	nop
 8005250:	200058a0 	.word	0x200058a0

08005254 <le_set_private_addr>:
{
 8005254:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 8005256:	2106      	movs	r1, #6
 8005258:	4668      	mov	r0, sp
 800525a:	f001 fb4d 	bl	80068f8 <bt_rand>
	if (err) {
 800525e:	b940      	cbnz	r0, 8005272 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
 8005260:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
 8005264:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
 8005266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
 800526e:	f7ff ffc3 	bl	80051f8 <set_random_address>
}
 8005272:	b003      	add	sp, #12
 8005274:	f85d fb04 	ldr.w	pc, [sp], #4

08005278 <set_le_scan_enable>:
{
 8005278:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
 800527a:	2102      	movs	r1, #2
{
 800527c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
 800527e:	f242 000c 	movw	r0, #8204	; 0x200c
 8005282:	f7ff febf 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005286:	4604      	mov	r4, r0
 8005288:	b328      	cbz	r0, 80052d6 <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
 800528a:	2102      	movs	r1, #2
 800528c:	3008      	adds	r0, #8
 800528e:	f00c f939 	bl	8011504 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 8005292:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
 8005294:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 8005296:	d115      	bne.n	80052c4 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
 8005298:	210a      	movs	r1, #10
 800529a:	4810      	ldr	r0, [pc, #64]	; (80052dc <set_le_scan_enable+0x64>)
 800529c:	f7ff fdf6 	bl	8004e8c <atomic_test_bit>
 80052a0:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
 80052a2:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
 80052a4:	4621      	mov	r1, r4
 80052a6:	2200      	movs	r2, #0
 80052a8:	f242 000c 	movw	r0, #8204	; 0x200c
 80052ac:	f7ff ff6c 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 80052b0:	4604      	mov	r4, r0
 80052b2:	b928      	cbnz	r0, 80052c0 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 80052b4:	2d01      	cmp	r5, #1
 80052b6:	d108      	bne.n	80052ca <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	4808      	ldr	r0, [pc, #32]	; (80052dc <set_le_scan_enable+0x64>)
 80052bc:	f7ff fdd5 	bl	8004e6a <atomic_or>
}
 80052c0:	4620      	mov	r0, r4
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	7043      	strb	r3, [r0, #1]
 80052c8:	e7eb      	b.n	80052a2 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80052ca:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80052ce:	4803      	ldr	r0, [pc, #12]	; (80052dc <set_le_scan_enable+0x64>)
 80052d0:	f7ff fde9 	bl	8004ea6 <atomic_and>
 80052d4:	e7f4      	b.n	80052c0 <set_le_scan_enable+0x48>
		return -ENOBUFS;
 80052d6:	f06f 0436 	mvn.w	r4, #54	; 0x36
 80052da:	e7f1      	b.n	80052c0 <set_le_scan_enable+0x48>
 80052dc:	20005910 	.word	0x20005910

080052e0 <set_advertise_enable>:
{
 80052e0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 80052e2:	2101      	movs	r1, #1
{
 80052e4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 80052e6:	f242 000a 	movw	r0, #8202	; 0x200a
 80052ea:	f7ff fe8b 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 80052ee:	4604      	mov	r4, r0
 80052f0:	b1d8      	cbz	r0, 800532a <set_advertise_enable+0x4a>
 80052f2:	3008      	adds	r0, #8
	if (enable) {
 80052f4:	b18d      	cbz	r5, 800531a <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
 80052f6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 80052f8:	f00c f913 	bl	8011522 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
 80052fc:	4621      	mov	r1, r4
 80052fe:	2200      	movs	r2, #0
 8005300:	f242 000a 	movw	r0, #8202	; 0x200a
 8005304:	f7ff ff40 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005308:	4604      	mov	r4, r0
 800530a:	b920      	cbnz	r0, 8005316 <set_advertise_enable+0x36>
	if (enable) {
 800530c:	b13d      	cbz	r5, 800531e <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800530e:	2120      	movs	r1, #32
 8005310:	4807      	ldr	r0, [pc, #28]	; (8005330 <set_advertise_enable+0x50>)
 8005312:	f7ff fdaa 	bl	8004e6a <atomic_or>
}
 8005316:	4620      	mov	r0, r4
 8005318:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 800531a:	4629      	mov	r1, r5
 800531c:	e7ec      	b.n	80052f8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800531e:	f06f 0120 	mvn.w	r1, #32
 8005322:	4803      	ldr	r0, [pc, #12]	; (8005330 <set_advertise_enable+0x50>)
 8005324:	f7ff fdbf 	bl	8004ea6 <atomic_and>
 8005328:	e7f5      	b.n	8005316 <set_advertise_enable+0x36>
		return -ENOBUFS;
 800532a:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800532e:	e7f2      	b.n	8005316 <set_advertise_enable+0x36>
 8005330:	20005910 	.word	0x20005910

08005334 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 800533a:	2120      	movs	r1, #32
{
 800533c:	4607      	mov	r7, r0
 800533e:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 8005340:	f7ff fe60 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005344:	4606      	mov	r6, r0
 8005346:	2800      	cmp	r0, #0
 8005348:	d03c      	beq.n	80053c4 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
 800534a:	2120      	movs	r1, #32
 800534c:	3008      	adds	r0, #8
 800534e:	f00c f8d9 	bl	8011504 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
 8005352:	2220      	movs	r2, #32
 8005354:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
 8005356:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
 8005358:	f7fb fabe 	bl	80008d8 <memset>

	for (i = 0; i < ad_len; i++) {
 800535c:	f04f 0900 	mov.w	r9, #0
 8005360:	45c1      	cmp	r9, r8
 8005362:	d106      	bne.n	8005372 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 8005364:	4631      	mov	r1, r6
 8005366:	4638      	mov	r0, r7
 8005368:	2200      	movs	r2, #0
}
 800536a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 800536e:	f7ff bf0b 	b.w	8005188 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
 8005372:	7862      	ldrb	r2, [r4, #1]
 8005374:	782b      	ldrb	r3, [r5, #0]
 8005376:	18d1      	adds	r1, r2, r3
 8005378:	3102      	adds	r1, #2
 800537a:	291f      	cmp	r1, #31
 800537c:	f104 0408 	add.w	r4, r4, #8
 8005380:	dd06      	ble.n	8005390 <set_ad+0x5c>
			net_buf_unref(buf);
 8005382:	4630      	mov	r0, r6
 8005384:	f00c f89e 	bl	80114c4 <net_buf_unref>
			return -EINVAL;
 8005388:	f06f 0015 	mvn.w	r0, #21
 800538c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
 8005390:	18e9      	adds	r1, r5, r3
 8005392:	1c50      	adds	r0, r2, #1
 8005394:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
 8005396:	1c98      	adds	r0, r3, #2
 8005398:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
 800539a:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
 800539c:	7028      	strb	r0, [r5, #0]
 800539e:	fa55 f383 	uxtab	r3, r5, r3
 80053a2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
 80053a6:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
 80053a8:	3001      	adds	r0, #1
 80053aa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80053ae:	4428      	add	r0, r5
 80053b0:	f7fb fa66 	bl	8000880 <memcpy>
		set_data->len += ad[i].data_len;
 80053b4:	782b      	ldrb	r3, [r5, #0]
 80053b6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 80053ba:	4413      	add	r3, r2
 80053bc:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
 80053be:	f109 0901 	add.w	r9, r9, #1
 80053c2:	e7cd      	b.n	8005360 <set_ad+0x2c>
		return -ENOBUFS;
 80053c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 80053c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080053cc <hci_le_set_data_len.isra.26>:
static int hci_le_set_data_len(struct bt_conn *conn)
 80053cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ce:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
 80053d0:	aa01      	add	r2, sp, #4
 80053d2:	2100      	movs	r1, #0
 80053d4:	f242 002f 	movw	r0, #8239	; 0x202f
 80053d8:	f7ff fed6 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 80053dc:	b9d8      	cbnz	r0, 8005416 <hci_le_set_data_len.isra.26+0x4a>
	rp = (void *)rsp->data;
 80053de:	9801      	ldr	r0, [sp, #4]
 80053e0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 80053e2:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
 80053e6:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
 80053ea:	f00c f86b 	bl	80114c4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 80053ee:	2106      	movs	r1, #6
 80053f0:	f242 0022 	movw	r0, #8226	; 0x2022
 80053f4:	f7ff fe06 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 80053f8:	4604      	mov	r4, r0
 80053fa:	b170      	cbz	r0, 800541a <hci_le_set_data_len.isra.26+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
 80053fc:	2106      	movs	r1, #6
 80053fe:	3008      	adds	r0, #8
 8005400:	f00c f880 	bl	8011504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8005404:	883b      	ldrh	r3, [r7, #0]
 8005406:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
 8005408:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
 800540a:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
 800540c:	4621      	mov	r1, r4
 800540e:	f242 0022 	movw	r0, #8226	; 0x2022
 8005412:	f7ff fe1b 	bl	800504c <bt_hci_cmd_send>
}
 8005416:	b003      	add	sp, #12
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 800541a:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800541e:	e7fa      	b.n	8005416 <hci_le_set_data_len.isra.26+0x4a>

08005420 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
 8005420:	8802      	ldrh	r2, [r0, #0]
 8005422:	8843      	ldrh	r3, [r0, #2]
 8005424:	429a      	cmp	r2, r3
{
 8005426:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
 8005428:	d818      	bhi.n	800545c <bt_le_conn_params_valid+0x3c>
 800542a:	2a05      	cmp	r2, #5
 800542c:	d916      	bls.n	800545c <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
 800542e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8005432:	d813      	bhi.n	800545c <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
 8005434:	8884      	ldrh	r4, [r0, #4]
 8005436:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800543a:	d20f      	bcs.n	800545c <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
 800543c:	88c1      	ldrh	r1, [r0, #6]
 800543e:	f1a1 020a 	sub.w	r2, r1, #10
 8005442:	b292      	uxth	r2, r2
 8005444:	f640 4076 	movw	r0, #3190	; 0xc76
 8005448:	4282      	cmp	r2, r0
 800544a:	d807      	bhi.n	800545c <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
 800544c:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
 8005450:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 8005454:	bfb4      	ite	lt
 8005456:	2001      	movlt	r0, #1
 8005458:	2000      	movge	r0, #0
 800545a:	bd10      	pop	{r4, pc}
		return false;
 800545c:	2000      	movs	r0, #0
}
 800545e:	bd10      	pop	{r4, pc}

08005460 <bt_le_scan_update>:
{
 8005460:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 8005462:	2108      	movs	r1, #8
 8005464:	4808      	ldr	r0, [pc, #32]	; (8005488 <bt_le_scan_update+0x28>)
 8005466:	f7ff fd11 	bl	8004e8c <atomic_test_bit>
 800546a:	4602      	mov	r2, r0
 800546c:	b948      	cbnz	r0, 8005482 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 800546e:	2107      	movs	r1, #7
 8005470:	4805      	ldr	r0, [pc, #20]	; (8005488 <bt_le_scan_update+0x28>)
 8005472:	f7ff fd0b 	bl	8004e8c <atomic_test_bit>
 8005476:	b120      	cbz	r0, 8005482 <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 8005478:	4610      	mov	r0, r2
}
 800547a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 800547e:	f7ff befb 	b.w	8005278 <set_le_scan_enable>
}
 8005482:	2000      	movs	r0, #0
 8005484:	bd08      	pop	{r3, pc}
 8005486:	bf00      	nop
 8005488:	20005910 	.word	0x20005910

0800548c <le_enh_conn_complete>:
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
 800548e:	7803      	ldrb	r3, [r0, #0]
{
 8005490:	b085      	sub	sp, #20
 8005492:	4605      	mov	r5, r0
	if (evt->status) {
 8005494:	b17b      	cbz	r3, 80054b6 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
 8005496:	2102      	movs	r1, #2
 8005498:	2000      	movs	r0, #0
 800549a:	f001 fd5f 	bl	8006f5c <bt_conn_lookup_state_le>
		if (!conn) {
 800549e:	4604      	mov	r4, r0
 80054a0:	b138      	cbz	r0, 80054b2 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
 80054a2:	782b      	ldrb	r3, [r5, #0]
 80054a4:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 80054a6:	2100      	movs	r1, #0
 80054a8:	f001 fc7e 	bl	8006da8 <bt_conn_set_state>
		bt_conn_unref(conn);
 80054ac:	4620      	mov	r0, r4
 80054ae:	f001 fd7e 	bl	8006fae <bt_conn_unref>
}
 80054b2:	b005      	add	sp, #20
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
 80054b6:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
 80054b8:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
 80054bc:	4621      	mov	r1, r4
 80054be:	a802      	add	r0, sp, #8
 80054c0:	f7ff fcd0 	bl	8004e64 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
 80054c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80054c8:	3b02      	subs	r3, #2
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d87d      	bhi.n	80055cc <le_enh_conn_complete+0x140>
 80054d0:	2206      	movs	r2, #6
 80054d2:	f105 0111 	add.w	r1, r5, #17
 80054d6:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 80054da:	f88d 3008 	strb.w	r3, [sp, #8]
 80054de:	f7fb f9cf 	bl	8000880 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
 80054e8:	2102      	movs	r1, #2
 80054ea:	a802      	add	r0, sp, #8
 80054ec:	f001 fd36 	bl	8006f5c <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
 80054f0:	78eb      	ldrb	r3, [r5, #3]
 80054f2:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
 80054f4:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
 80054f6:	d109      	bne.n	800550c <le_enh_conn_complete+0x80>
 80054f8:	f06f 0120 	mvn.w	r1, #32
 80054fc:	4844      	ldr	r0, [pc, #272]	; (8005610 <le_enh_conn_complete+0x184>)
 80054fe:	f7ff fcd2 	bl	8004ea6 <atomic_and>
		if (!conn) {
 8005502:	b92c      	cbnz	r4, 8005510 <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
 8005504:	a802      	add	r0, sp, #8
 8005506:	f001 fc1b 	bl	8006d40 <bt_conn_add_le>
 800550a:	4604      	mov	r4, r0
	if (!conn) {
 800550c:	2c00      	cmp	r4, #0
 800550e:	d0d0      	beq.n	80054b2 <le_enh_conn_complete+0x26>
	conn->handle   = handle;
 8005510:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
 8005512:	a902      	add	r1, sp, #8
	conn->handle   = handle;
 8005514:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
 8005518:	f7ff fca4 	bl	8004e64 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
 800551c:	7e2a      	ldrb	r2, [r5, #24]
 800551e:	7deb      	ldrb	r3, [r5, #23]
 8005520:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005524:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
 8005528:	7eaa      	ldrb	r2, [r5, #26]
 800552a:	7e6b      	ldrb	r3, [r5, #25]
 800552c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005530:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 8005534:	7eeb      	ldrb	r3, [r5, #27]
 8005536:	7f2a      	ldrb	r2, [r5, #28]
 8005538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800553c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
 8005540:	78ee      	ldrb	r6, [r5, #3]
 8005542:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
 8005544:	2e01      	cmp	r6, #1
 8005546:	d11a      	bne.n	800557e <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
 8005548:	4f32      	ldr	r7, [pc, #200]	; (8005614 <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
 800554a:	4669      	mov	r1, sp
 800554c:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8005550:	f7ff fc88 	bl	8004e64 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
 8005554:	4639      	mov	r1, r7
 8005556:	f104 0052 	add.w	r0, r4, #82	; 0x52
 800555a:	f7ff fc83 	bl	8004e64 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 800555e:	2106      	movs	r1, #6
 8005560:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005564:	f7ff fc92 	bl	8004e8c <atomic_test_bit>
 8005568:	b148      	cbz	r0, 800557e <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
 800556a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800556e:	2200      	movs	r2, #0
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 8005574:	4313      	orrs	r3, r2
 8005576:	d002      	beq.n	800557e <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
 8005578:	4630      	mov	r0, r6
 800557a:	f7ff feb1 	bl	80052e0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
 800557e:	2103      	movs	r1, #3
 8005580:	4620      	mov	r0, r4
 8005582:	f001 fc11 	bl	8006da8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
 8005586:	7a63      	ldrb	r3, [r4, #9]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d118      	bne.n	80055be <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
 800558c:	78eb      	ldrb	r3, [r5, #3]
 800558e:	b123      	cbz	r3, 800559a <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
 8005590:	4b20      	ldr	r3, [pc, #128]	; (8005614 <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
 8005592:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005596:	0719      	lsls	r1, r3, #28
 8005598:	d51d      	bpl.n	80055d6 <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
 800559a:	2102      	movs	r1, #2
 800559c:	f242 0016 	movw	r0, #8214	; 0x2016
 80055a0:	f7ff fd30 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 80055a4:	4605      	mov	r5, r0
 80055a6:	b1b0      	cbz	r0, 80055d6 <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
 80055a8:	2102      	movs	r1, #2
 80055aa:	3008      	adds	r0, #8
 80055ac:	f00b ffaa 	bl	8011504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 80055b0:	8823      	ldrh	r3, [r4, #0]
 80055b2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
 80055b4:	4629      	mov	r1, r5
 80055b6:	f242 0016 	movw	r0, #8214	; 0x2016
 80055ba:	f7ff fd47 	bl	800504c <bt_hci_cmd_send>
	bt_conn_unref(conn);
 80055be:	4620      	mov	r0, r4
 80055c0:	f001 fcf5 	bl	8006fae <bt_conn_unref>
	bt_le_scan_update(false);
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ff4b 	bl	8005460 <bt_le_scan_update>
 80055ca:	e772      	b.n	80054b2 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
 80055cc:	4621      	mov	r1, r4
 80055ce:	4668      	mov	r0, sp
 80055d0:	f7ff fc48 	bl	8004e64 <bt_addr_le_copy>
 80055d4:	e788      	b.n	80054e8 <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
 80055d6:	4d0f      	ldr	r5, [pc, #60]	; (8005614 <le_enh_conn_complete+0x188>)
 80055d8:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
 80055dc:	07d2      	lsls	r2, r2, #31
 80055de:	d508      	bpl.n	80055f2 <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7ff fd97 	bl	8005114 <hci_le_set_phy.isra.25>
		if (!err) {
 80055e6:	b920      	cbnz	r0, 80055f2 <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	1d20      	adds	r0, r4, #4
 80055ec:	f7ff fc3d 	bl	8004e6a <atomic_or>
 80055f0:	e7e5      	b.n	80055be <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
 80055f2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 80055f6:	069b      	lsls	r3, r3, #26
 80055f8:	d506      	bpl.n	8005608 <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7ff fee6 	bl	80053cc <hci_le_set_data_len.isra.26>
		if (!err) {
 8005600:	b910      	cbnz	r0, 8005608 <le_enh_conn_complete+0x17c>
 8005602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005606:	e7f0      	b.n	80055ea <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
 8005608:	4620      	mov	r0, r4
 800560a:	f7ff fc5d 	bl	8004ec8 <update_conn_param>
 800560e:	e7d6      	b.n	80055be <le_enh_conn_complete+0x132>
 8005610:	20005910 	.word	0x20005910
 8005614:	200058a0 	.word	0x200058a0

08005618 <hci_rx_thread>:
{
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (scan_dev_found_cb) {
 800561c:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8005918 <hci_rx_thread+0x300>
{
 8005620:	b091      	sub	sp, #68	; 0x44
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
 8005622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005626:	48b9      	ldr	r0, [pc, #740]	; (800590c <hci_rx_thread+0x2f4>)
 8005628:	f00b fed6 	bl	80113d8 <net_buf_get>
 800562c:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
 800562e:	f7ff fc13 	bl	8004e58 <net_buf_user_data>
		switch (bt_buf_get_type(buf)) {
 8005632:	7803      	ldrb	r3, [r0, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d033      	beq.n	80056a0 <hci_rx_thread+0x88>
 8005638:	2b03      	cmp	r3, #3
 800563a:	d173      	bne.n	8005724 <hci_rx_thread+0x10c>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
 800563c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(hdr->handle);
 800563e:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
 8005640:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
 8005642:	f3c6 030b 	ubfx	r3, r6, #0, #12
 8005646:	8043      	strh	r3, [r0, #2]
	acl(buf)->id = BT_CONN_ID_INVALID;
 8005648:	4620      	mov	r0, r4
 800564a:	f7ff fc05 	bl	8004e58 <net_buf_user_data>
 800564e:	23ff      	movs	r3, #255	; 0xff
 8005650:	7043      	strb	r3, [r0, #1]
	net_buf_pull(buf, sizeof(*hdr));
 8005652:	2104      	movs	r1, #4
 8005654:	f104 0008 	add.w	r0, r4, #8
 8005658:	f00b ffbf 	bl	80115da <net_buf_simple_pull>
	if (buf->len != len) {
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	42ab      	cmp	r3, r5
		net_buf_unref(buf);
 8005660:	4620      	mov	r0, r4
	if (buf->len != len) {
 8005662:	d002      	beq.n	800566a <hci_rx_thread+0x52>
			net_buf_unref(buf);
 8005664:	f00b ff2e 	bl	80114c4 <net_buf_unref>
			break;
 8005668:	e017      	b.n	800569a <hci_rx_thread+0x82>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
 800566a:	f7ff fbf5 	bl	8004e58 <net_buf_user_data>
 800566e:	8840      	ldrh	r0, [r0, #2]
 8005670:	f001 fc28 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 8005674:	4605      	mov	r5, r0
		net_buf_unref(buf);
 8005676:	4620      	mov	r0, r4
	if (!conn) {
 8005678:	2d00      	cmp	r5, #0
 800567a:	d0f3      	beq.n	8005664 <hci_rx_thread+0x4c>
	acl(buf)->id = bt_conn_get_id(conn);
 800567c:	f7ff fbec 	bl	8004e58 <net_buf_user_data>
 8005680:	4607      	mov	r7, r0
 8005682:	4628      	mov	r0, r5
 8005684:	f001 fde6 	bl	8007254 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
 8005688:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
 800568a:	7078      	strb	r0, [r7, #1]
	bt_conn_recv(conn, buf, flags);
 800568c:	4621      	mov	r1, r4
 800568e:	4628      	mov	r0, r5
 8005690:	f001 f9dc 	bl	8006a4c <bt_conn_recv>
	bt_conn_unref(conn);
 8005694:	4628      	mov	r0, r5
 8005696:	f001 fc8a 	bl	8006fae <bt_conn_unref>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 800569a:	f00c facf 	bl	8011c3c <_impl_k_yield>
 800569e:	e7c0      	b.n	8005622 <hci_rx_thread+0xa>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
 80056a0:	68a6      	ldr	r6, [r4, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
 80056a2:	7832      	ldrb	r2, [r6, #0]
 80056a4:	2a13      	cmp	r2, #19
 80056a6:	f200 825a 	bhi.w	8005b5e <hci_rx_thread+0x546>
 80056aa:	4093      	lsls	r3, r2
 80056ac:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 80056b0:	f000 8255 	beq.w	8005b5e <hci_rx_thread+0x546>
 80056b4:	4040      	eors	r0, r0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	f04f 0004 	mov.w	r0, #4
 80056be:	df02      	svc	2
 80056c0:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
 80056c2:	783e      	ldrb	r6, [r7, #0]
 80056c4:	bb76      	cbnz	r6, 8005724 <hci_rx_thread+0x10c>
	conn = bt_conn_lookup_handle(handle);
 80056c6:	f8b7 0001 	ldrh.w	r0, [r7, #1]
 80056ca:	f001 fbfb 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 80056ce:	4605      	mov	r5, r0
 80056d0:	b1d8      	cbz	r0, 800570a <hci_rx_thread+0xf2>
	conn->err = evt->reason;
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	7203      	strb	r3, [r0, #8]
	k_call_stacks_analyze();
 80056d6:	f00b fff3 	bl	80116c0 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	f001 fb63 	bl	8006da8 <bt_conn_set_state>
	conn->handle = 0;
 80056e2:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
 80056e4:	78ae      	ldrb	r6, [r5, #2]
 80056e6:	b10e      	cbz	r6, 80056ec <hci_rx_thread+0xd4>
	bt_conn_unref(conn);
 80056e8:	4628      	mov	r0, r5
 80056ea:	e073      	b.n	80057d4 <hci_rx_thread+0x1bc>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
 80056ec:	4631      	mov	r1, r6
 80056ee:	1d28      	adds	r0, r5, #4
 80056f0:	f7ff fbcc 	bl	8004e8c <atomic_test_bit>
 80056f4:	b130      	cbz	r0, 8005704 <hci_rx_thread+0xec>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 80056f6:	4628      	mov	r0, r5
 80056f8:	2101      	movs	r1, #1
 80056fa:	f001 fb55 	bl	8006da8 <bt_conn_set_state>
		bt_le_scan_update(false);
 80056fe:	4630      	mov	r0, r6
 8005700:	f7ff feae 	bl	8005460 <bt_le_scan_update>
	bt_conn_unref(conn);
 8005704:	4628      	mov	r0, r5
 8005706:	f001 fc52 	bl	8006fae <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 800570a:	2106      	movs	r1, #6
 800570c:	4880      	ldr	r0, [pc, #512]	; (8005910 <hci_rx_thread+0x2f8>)
 800570e:	f7ff fbbd 	bl	8004e8c <atomic_test_bit>
 8005712:	b138      	cbz	r0, 8005724 <hci_rx_thread+0x10c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 8005714:	2105      	movs	r1, #5
 8005716:	487e      	ldr	r0, [pc, #504]	; (8005910 <hci_rx_thread+0x2f8>)
 8005718:	f7ff fbb8 	bl	8004e8c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 800571c:	b910      	cbnz	r0, 8005724 <hci_rx_thread+0x10c>
		set_advertise_enable(true);
 800571e:	2001      	movs	r0, #1
 8005720:	f7ff fdde 	bl	80052e0 <set_advertise_enable>
			net_buf_unref(buf);
 8005724:	4620      	mov	r0, r4
 8005726:	e79d      	b.n	8005664 <hci_rx_thread+0x4c>
 8005728:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
 800572a:	780b      	ldrb	r3, [r1, #0]
 800572c:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
 8005730:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8005734:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
 8005738:	78cb      	ldrb	r3, [r1, #3]
 800573a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
 800573e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 8005742:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
 8005746:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800574a:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
 800574e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 8005752:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	enh.clock_accuracy = evt->clock_accuracy;
 8005756:	7c4b      	ldrb	r3, [r1, #17]
 8005758:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
 800575c:	3104      	adds	r1, #4
 800575e:	a809      	add	r0, sp, #36	; 0x24
 8005760:	f7ff fb80 	bl	8004e64 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
 8005764:	2500      	movs	r5, #0
 8005766:	2206      	movs	r2, #6
 8005768:	a904      	add	r1, sp, #16
 800576a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 800576e:	9504      	str	r5, [sp, #16]
 8005770:	f8ad 5014 	strh.w	r5, [sp, #20]
 8005774:	f7fb f884 	bl	8000880 <memcpy>
 8005778:	2206      	movs	r2, #6
 800577a:	a906      	add	r1, sp, #24
 800577c:	f10d 0031 	add.w	r0, sp, #49	; 0x31
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
 8005780:	9506      	str	r5, [sp, #24]
 8005782:	f8ad 501c 	strh.w	r5, [sp, #28]
 8005786:	f7fb f87b 	bl	8000880 <memcpy>
	le_enh_conn_complete(&enh);
 800578a:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
 800578c:	f7ff fe7e 	bl	800548c <le_enh_conn_complete>
 8005790:	e7c8      	b.n	8005724 <hci_rx_thread+0x10c>
 8005792:	68a0      	ldr	r0, [r4, #8]
 8005794:	e7fa      	b.n	800578c <hci_rx_thread+0x174>
 8005796:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 8005798:	f8b5 0001 	ldrh.w	r0, [r5, #1]
 800579c:	f001 fb92 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 80057a0:	4606      	mov	r6, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d0be      	beq.n	8005724 <hci_rx_thread+0x10c>
	if (!evt->status) {
 80057a6:	782b      	ldrb	r3, [r5, #0]
 80057a8:	b99b      	cbnz	r3, 80057d2 <hci_rx_thread+0x1ba>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
 80057aa:	792a      	ldrb	r2, [r5, #4]
 80057ac:	78eb      	ldrb	r3, [r5, #3]
 80057ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80057b2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
 80057b6:	79aa      	ldrb	r2, [r5, #6]
 80057b8:	796b      	ldrb	r3, [r5, #5]
 80057ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80057be:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 80057c2:	79eb      	ldrb	r3, [r5, #7]
 80057c4:	7a2a      	ldrb	r2, [r5, #8]
 80057c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80057ca:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
 80057ce:	f001 f901 	bl	80069d4 <notify_le_param_updated>
	bt_conn_unref(conn);
 80057d2:	4630      	mov	r0, r6
 80057d4:	f001 fbeb 	bl	8006fae <bt_conn_unref>
 80057d8:	e7a4      	b.n	8005724 <hci_rx_thread+0x10c>
 80057da:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 80057dc:	f8b6 0001 	ldrh.w	r0, [r6, #1]
 80057e0:	f001 fb70 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 80057e4:	4605      	mov	r5, r0
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d09c      	beq.n	8005724 <hci_rx_thread+0x10c>
	if (!evt->status) {
 80057ea:	7833      	ldrb	r3, [r6, #0]
 80057ec:	b923      	cbnz	r3, 80057f8 <hci_rx_thread+0x1e0>
		memcpy(conn->le.features, evt->features,
 80057ee:	2208      	movs	r2, #8
 80057f0:	1cf1      	adds	r1, r6, #3
 80057f2:	3064      	adds	r0, #100	; 0x64
 80057f4:	f7fb f844 	bl	8000880 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
 80057f8:	4e46      	ldr	r6, [pc, #280]	; (8005914 <hci_rx_thread+0x2fc>)
 80057fa:	f896 3079 	ldrb.w	r3, [r6, #121]	; 0x79
 80057fe:	07da      	lsls	r2, r3, #31
 8005800:	d50c      	bpl.n	800581c <hci_rx_thread+0x204>
 8005802:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 8005806:	07db      	lsls	r3, r3, #31
 8005808:	d508      	bpl.n	800581c <hci_rx_thread+0x204>
		err = hci_le_set_phy(conn);
 800580a:	4628      	mov	r0, r5
 800580c:	f7ff fc82 	bl	8005114 <hci_le_set_phy.isra.25>
		if (!err) {
 8005810:	b920      	cbnz	r0, 800581c <hci_rx_thread+0x204>
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	1d28      	adds	r0, r5, #4
 8005816:	f7ff fb28 	bl	8004e6a <atomic_or>
 800581a:	e765      	b.n	80056e8 <hci_rx_thread+0xd0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
 800581c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 8005820:	069f      	lsls	r7, r3, #26
 8005822:	d56e      	bpl.n	8005902 <hci_rx_thread+0x2ea>
 8005824:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 8005828:	069e      	lsls	r6, r3, #26
 800582a:	d56a      	bpl.n	8005902 <hci_rx_thread+0x2ea>
		err = hci_le_set_data_len(conn);
 800582c:	4628      	mov	r0, r5
 800582e:	f7ff fdcd 	bl	80053cc <hci_le_set_data_len.isra.26>
		if (!err) {
 8005832:	2800      	cmp	r0, #0
 8005834:	d165      	bne.n	8005902 <hci_rx_thread+0x2ea>
 8005836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800583a:	e7eb      	b.n	8005814 <hci_rx_thread+0x1fc>
 800583c:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 800583e:	78d9      	ldrb	r1, [r3, #3]
 8005840:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
 8005842:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 8005844:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005848:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
 800584c:	7959      	ldrb	r1, [r3, #5]
 800584e:	791a      	ldrb	r2, [r3, #4]
 8005850:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005854:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
 8005858:	799a      	ldrb	r2, [r3, #6]
 800585a:	79d9      	ldrb	r1, [r3, #7]
 800585c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005860:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
 8005864:	7a1a      	ldrb	r2, [r3, #8]
 8005866:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
 8005868:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
 800586a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
 800586e:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
 8005870:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
 8005874:	f001 fb26 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 8005878:	4680      	mov	r8, r0
 800587a:	b920      	cbnz	r0, 8005886 <hci_rx_thread+0x26e>
		return le_conn_param_neg_reply(handle,
 800587c:	2102      	movs	r1, #2
 800587e:	4628      	mov	r0, r5
 8005880:	f7ff fc68 	bl	8005154 <le_conn_param_neg_reply>
 8005884:	e74e      	b.n	8005724 <hci_rx_thread+0x10c>
	if (!le_param_req(conn, &param)) {
 8005886:	a908      	add	r1, sp, #32
 8005888:	f001 f8b8 	bl	80069fc <le_param_req>
 800588c:	b928      	cbnz	r0, 800589a <hci_rx_thread+0x282>
		err = le_conn_param_neg_reply(handle,
 800588e:	211e      	movs	r1, #30
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fc5f 	bl	8005154 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
 8005896:	4640      	mov	r0, r8
 8005898:	e79c      	b.n	80057d4 <hci_rx_thread+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
 800589a:	210e      	movs	r1, #14
 800589c:	f242 0020 	movw	r0, #8224	; 0x2020
 80058a0:	f7ff fbb0 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 80058a4:	4606      	mov	r6, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d0f5      	beq.n	8005896 <hci_rx_thread+0x27e>
	cp = net_buf_add(buf, sizeof(*cp));
 80058aa:	210e      	movs	r1, #14
 80058ac:	3008      	adds	r0, #8
 80058ae:	f00b fe29 	bl	8011504 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
 80058b2:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
 80058b4:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
 80058b6:	2100      	movs	r1, #0
 80058b8:	f7fb f80e 	bl	80008d8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
 80058bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80058c0:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
 80058c2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80058c6:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
 80058c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80058cc:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 80058ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
 80058d2:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 80058d4:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
 80058d6:	4631      	mov	r1, r6
 80058d8:	f242 0020 	movw	r0, #8224	; 0x2020
 80058dc:	f7ff fbb6 	bl	800504c <bt_hci_cmd_send>
 80058e0:	e7d9      	b.n	8005896 <hci_rx_thread+0x27e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
 80058e2:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 80058e4:	8818      	ldrh	r0, [r3, #0]
 80058e6:	f001 faed 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 80058ea:	4605      	mov	r5, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f43f af19 	beq.w	8005724 <hci_rx_thread+0x10c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80058f2:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80058f6:	3004      	adds	r0, #4
 80058f8:	f7ff fad5 	bl	8004ea6 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
 80058fc:	05c0      	lsls	r0, r0, #23
 80058fe:	f57f aef3 	bpl.w	80056e8 <hci_rx_thread+0xd0>
	update_conn_param(conn);
 8005902:	4628      	mov	r0, r5
 8005904:	f7ff fae0 	bl	8004ec8 <update_conn_param>
 8005908:	e6ee      	b.n	80056e8 <hci_rx_thread+0xd0>
 800590a:	bf00      	nop
 800590c:	20005964 	.word	0x20005964
 8005910:	20005910 	.word	0x20005910
 8005914:	200058a0 	.word	0x200058a0
 8005918:	20000570 	.word	0x20000570
	u16_t handle = sys_le16_to_cpu(evt->handle);
 800591c:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 800591e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8005922:	f001 facf 	bl	8006ec4 <bt_conn_lookup_handle>
	if (!conn) {
 8005926:	4605      	mov	r5, r0
 8005928:	2800      	cmp	r0, #0
 800592a:	f43f aefb 	beq.w	8005724 <hci_rx_thread+0x10c>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
 800592e:	1d06      	adds	r6, r0, #4
 8005930:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8005934:	4630      	mov	r0, r6
 8005936:	f7ff fab6 	bl	8004ea6 <atomic_and>
 800593a:	0601      	lsls	r1, r0, #24
 800593c:	f57f aed4 	bpl.w	80056e8 <hci_rx_thread+0xd0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
 8005940:	4ba0      	ldr	r3, [pc, #640]	; (8005bc4 <hci_rx_thread+0x5ac>)
 8005942:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005946:	069a      	lsls	r2, r3, #26
 8005948:	d5db      	bpl.n	8005902 <hci_rx_thread+0x2ea>
 800594a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800594e:	069b      	lsls	r3, r3, #26
 8005950:	d5d7      	bpl.n	8005902 <hci_rx_thread+0x2ea>
		err = hci_le_set_data_len(conn);
 8005952:	4628      	mov	r0, r5
 8005954:	f7ff fd3a 	bl	80053cc <hci_le_set_data_len.isra.26>
		if (!err) {
 8005958:	2800      	cmp	r0, #0
 800595a:	d1d2      	bne.n	8005902 <hci_rx_thread+0x2ea>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800595c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005960:	4630      	mov	r0, r6
 8005962:	e758      	b.n	8005816 <hci_rx_thread+0x1fe>
 8005964:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8005966:	4898      	ldr	r0, [pc, #608]	; (8005bc8 <hci_rx_thread+0x5b0>)
 8005968:	f06f 0110 	mvn.w	r1, #16
 800596c:	f7ff fa9b 	bl	8004ea6 <atomic_and>
	if (!evt->status) {
 8005970:	7833      	ldrb	r3, [r6, #0]
 8005972:	b943      	cbnz	r3, 8005986 <hci_rx_thread+0x36e>
		memcpy(pub_key, evt->key, 64);
 8005974:	1c71      	adds	r1, r6, #1
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	4894      	ldr	r0, [pc, #592]	; (8005bcc <hci_rx_thread+0x5b4>)
 800597a:	f7fa ff81 	bl	8000880 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800597e:	2108      	movs	r1, #8
 8005980:	4891      	ldr	r0, [pc, #580]	; (8005bc8 <hci_rx_thread+0x5b0>)
 8005982:	f7ff fa72 	bl	8004e6a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 8005986:	4b92      	ldr	r3, [pc, #584]	; (8005bd0 <hci_rx_thread+0x5b8>)
 8005988:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
 800598a:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800598c:	2d00      	cmp	r5, #0
 800598e:	f43f aec9 	beq.w	8005724 <hci_rx_thread+0x10c>
		cb->func(evt->status ? NULL : evt->key);
 8005992:	7832      	ldrb	r2, [r6, #0]
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	2a00      	cmp	r2, #0
 8005998:	bf0c      	ite	eq
 800599a:	4638      	moveq	r0, r7
 800599c:	2000      	movne	r0, #0
 800599e:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 80059a0:	686d      	ldr	r5, [r5, #4]
 80059a2:	e7f3      	b.n	800598c <hci_rx_thread+0x374>
	if (dh_key_cb) {
 80059a4:	4d8b      	ldr	r5, [pc, #556]	; (8005bd4 <hci_rx_thread+0x5bc>)
 80059a6:	68a0      	ldr	r0, [r4, #8]
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f43f aeba 	beq.w	8005724 <hci_rx_thread+0x10c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 80059b0:	7802      	ldrb	r2, [r0, #0]
 80059b2:	b922      	cbnz	r2, 80059be <hci_rx_thread+0x3a6>
 80059b4:	3001      	adds	r0, #1
 80059b6:	4798      	blx	r3
		dh_key_cb = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	e6b2      	b.n	8005724 <hci_rx_thread+0x10c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f9      	b.n	80059b6 <hci_rx_thread+0x39e>
	u8_t num_reports = net_buf_pull_u8(buf);
 80059c2:	4628      	mov	r0, r5
 80059c4:	f00b fe11 	bl	80115ea <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80059c8:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8005bc8 <hci_rx_thread+0x5b0>
	u8_t num_reports = net_buf_pull_u8(buf);
 80059cc:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f43f aea7 	beq.w	8005724 <hci_rx_thread+0x10c>
		info = (void *)buf->data;
 80059d6:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
 80059d8:	2109      	movs	r1, #9
 80059da:	4628      	mov	r0, r5
 80059dc:	f00b fdfd 	bl	80115da <net_buf_simple_pull>
		rssi = info->data[info->length];
 80059e0:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 80059e2:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
 80059e4:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
 80059e6:	a808      	add	r0, sp, #32
		rssi = info->data[info->length];
 80059e8:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 80059ec:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80059f0:	3b02      	subs	r3, #2
 80059f2:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
 80059f4:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 80059f6:	f200 809d 	bhi.w	8005b34 <hci_rx_thread+0x51c>
			bt_addr_le_copy(&id_addr, &info->addr);
 80059fa:	f7ff fa33 	bl	8004e64 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 80059fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005a02:	3b02      	subs	r3, #2
 8005a04:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
 8005a08:	f8da 3000 	ldr.w	r3, [sl]
 8005a0c:	b1cb      	cbz	r3, 8005a42 <hci_rx_thread+0x42a>
	state->offset = net_buf_simple_headroom(buf);
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f00b fe18 	bl	8011644 <net_buf_simple_headroom>
	state->len = buf->len;
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
 8005a18:	7a33      	ldrb	r3, [r6, #8]
 8005a1a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
 8005a1c:	9002      	str	r0, [sp, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
 8005a1e:	462b      	mov	r3, r5
 8005a20:	7832      	ldrb	r2, [r6, #0]
 8005a22:	f8da 7000 	ldr.w	r7, [sl]
 8005a26:	fa4f f18b 	sxtb.w	r1, fp
 8005a2a:	a808      	add	r0, sp, #32
 8005a2c:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
 8005a2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005a32:	f105 0308 	add.w	r3, r5, #8
 8005a36:	fa13 f382 	uxtah	r3, r3, r2
 8005a3a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
 8005a3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005a40:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 8005a42:	2108      	movs	r1, #8
 8005a44:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
 8005a46:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 8005a48:	f7ff fa20 	bl	8004e8c <atomic_test_bit>
 8005a4c:	4683      	mov	fp, r0
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d166      	bne.n	8005b20 <hci_rx_thread+0x508>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
 8005a52:	2f01      	cmp	r7, #1
 8005a54:	d864      	bhi.n	8005b20 <hci_rx_thread+0x508>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
 8005a56:	2101      	movs	r1, #1
 8005a58:	a808      	add	r0, sp, #32
 8005a5a:	f001 fa7f 	bl	8006f5c <bt_conn_lookup_state_le>
	if (!conn) {
 8005a5e:	4607      	mov	r7, r0
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d05d      	beq.n	8005b20 <hci_rx_thread+0x508>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 8005a64:	2107      	movs	r1, #7
 8005a66:	4648      	mov	r0, r9
 8005a68:	f7ff fa10 	bl	8004e8c <atomic_test_bit>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d164      	bne.n	8005b3a <hci_rx_thread+0x522>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
 8005a70:	2102      	movs	r1, #2
 8005a72:	4648      	mov	r0, r9
 8005a74:	f7ff fa0a 	bl	8004e8c <atomic_test_bit>
 8005a78:	b110      	cbz	r0, 8005a80 <hci_rx_thread+0x468>
			set_random_address(&bt_dev.id_addr.a);
 8005a7a:	4857      	ldr	r0, [pc, #348]	; (8005bd8 <hci_rx_thread+0x5c0>)
 8005a7c:	f7ff fbbc 	bl	80051f8 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
 8005a80:	4950      	ldr	r1, [pc, #320]	; (8005bc4 <hci_rx_thread+0x5ac>)
 8005a82:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
 8005a86:	f107 0b52 	add.w	fp, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
 8005a8a:	f7ff f9eb 	bl	8004e64 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4658      	mov	r0, fp
 8005a92:	f7ff f9e7 	bl	8004e64 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
 8005a96:	2119      	movs	r1, #25
 8005a98:	f242 000d 	movw	r0, #8205	; 0x200d
 8005a9c:	f7ff fab2 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d04e      	beq.n	8005b44 <hci_rx_thread+0x52c>
	cp = net_buf_add(buf, sizeof(*cp));
 8005aa6:	2119      	movs	r1, #25
 8005aa8:	3008      	adds	r0, #8
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	f00b fd2a 	bl	8011504 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
 8005ab0:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
 8005ab2:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f7fa ff0f 	bl	80008d8 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
 8005aba:	2200      	movs	r2, #0
 8005abc:	2160      	movs	r1, #96	; 0x60
 8005abe:	f888 1000 	strb.w	r1, [r8]
 8005ac2:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
 8005ac6:	f888 1002 	strb.w	r1, [r8, #2]
 8005aca:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
 8005ace:	4659      	mov	r1, fp
 8005ad0:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
 8005ad4:	9202      	str	r2, [sp, #8]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
 8005ad6:	f7ff f9c5 	bl	8004e64 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
 8005ada:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 8005ade:	f888 100c 	strb.w	r1, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
 8005ae2:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8005ae6:	f8a8 100d 	strh.w	r1, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
 8005aea:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8005aee:	f8a8 100f 	strh.w	r1, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
 8005af2:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8005af6:	f8a8 1011 	strh.w	r1, [r8, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
 8005afa:	9b03      	ldr	r3, [sp, #12]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
 8005afc:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8005b00:	f8a8 1013 	strh.w	r1, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
 8005b04:	9a02      	ldr	r2, [sp, #8]
 8005b06:	4619      	mov	r1, r3
 8005b08:	f242 000d 	movw	r0, #8205	; 0x200d
 8005b0c:	f7ff fb3c 	bl	8005188 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
 8005b10:	b9c0      	cbnz	r0, 8005b44 <hci_rx_thread+0x52c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
 8005b12:	4638      	mov	r0, r7
 8005b14:	2102      	movs	r1, #2
 8005b16:	f001 f947 	bl	8006da8 <bt_conn_set_state>
	bt_conn_unref(conn);
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f001 fa47 	bl	8006fae <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
 8005b20:	7a31      	ldrb	r1, [r6, #8]
 8005b22:	4628      	mov	r0, r5
 8005b24:	3101      	adds	r1, #1
 8005b26:	f00b fd58 	bl	80115da <net_buf_simple_pull>
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	e74c      	b.n	80059ce <hci_rx_thread+0x3b6>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
 8005b34:	f7ff f996 	bl	8004e64 <bt_addr_le_copy>
 8005b38:	e766      	b.n	8005a08 <hci_rx_thread+0x3f0>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f7ff fb9c 	bl	8005278 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d095      	beq.n	8005a70 <hci_rx_thread+0x458>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
 8005b44:	231f      	movs	r3, #31
 8005b46:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f001 f92c 	bl	8006da8 <bt_conn_set_state>
	bt_conn_unref(conn);
 8005b50:	4638      	mov	r0, r7
 8005b52:	f001 fa2c 	bl	8006fae <bt_conn_unref>
	bt_le_scan_update(false);
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7ff fc82 	bl	8005460 <bt_le_scan_update>
 8005b5c:	e7e0      	b.n	8005b20 <hci_rx_thread+0x508>
	net_buf_pull(buf, sizeof(*hdr));
 8005b5e:	f104 0508 	add.w	r5, r4, #8
 8005b62:	2102      	movs	r1, #2
 8005b64:	4628      	mov	r0, r5
 8005b66:	f00b fd38 	bl	80115da <net_buf_simple_pull>
	switch (hdr->evt) {
 8005b6a:	7833      	ldrb	r3, [r6, #0]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	f43f ada7 	beq.w	80056c0 <hci_rx_thread+0xa8>
 8005b72:	2b3e      	cmp	r3, #62	; 0x3e
 8005b74:	f47f add6 	bne.w	8005724 <hci_rx_thread+0x10c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
 8005b78:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f00b fd2c 	bl	80115da <net_buf_simple_pull>
	switch (evt->subevent) {
 8005b82:	7833      	ldrb	r3, [r6, #0]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	2b0b      	cmp	r3, #11
 8005b88:	f63f adcc 	bhi.w	8005724 <hci_rx_thread+0x10c>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <hci_rx_thread+0x57c>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005729 	.word	0x08005729
 8005b98:	080059c3 	.word	0x080059c3
 8005b9c:	08005797 	.word	0x08005797
 8005ba0:	080057db 	.word	0x080057db
 8005ba4:	08005725 	.word	0x08005725
 8005ba8:	0800583d 	.word	0x0800583d
 8005bac:	080058e3 	.word	0x080058e3
 8005bb0:	08005965 	.word	0x08005965
 8005bb4:	080059a5 	.word	0x080059a5
 8005bb8:	08005793 	.word	0x08005793
 8005bbc:	08005725 	.word	0x08005725
 8005bc0:	0800591d 	.word	0x0800591d
 8005bc4:	200058a0 	.word	0x200058a0
 8005bc8:	20005910 	.word	0x20005910
 8005bcc:	200004c0 	.word	0x200004c0
 8005bd0:	20000500 	.word	0x20000500
 8005bd4:	200004bc 	.word	0x200004bc
 8005bd8:	200058a1 	.word	0x200058a1

08005bdc <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
 8005bdc:	2301      	movs	r3, #1
{
 8005bde:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
 8005be0:	2106      	movs	r1, #6
{
 8005be2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
 8005be4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
 8005be8:	f000 fe86 	bl	80068f8 <bt_rand>
	if (err) {
 8005bec:	b918      	cbnz	r0, 8005bf6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
 8005bee:	79a3      	ldrb	r3, [r4, #6]
 8005bf0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8005bf4:	71a3      	strb	r3, [r4, #6]
}
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <bt_init>:
{
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 8005bfe:	aa04      	add	r2, sp, #16
 8005c00:	2100      	movs	r1, #0
 8005c02:	f640 4003 	movw	r0, #3075	; 0xc03
 8005c06:	f7ff fabf 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f040 820d 	bne.w	800602c <bt_init+0x434>
	u8_t status = buf->data[0];
 8005c12:	9b04      	ldr	r3, [sp, #16]
 8005c14:	689b      	ldr	r3, [r3, #8]
	if (status) {
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b96b      	cbnz	r3, 8005c36 <bt_init+0x3e>
	scan_dev_found_cb = NULL;
 8005c1a:	4a61      	ldr	r2, [pc, #388]	; (8005da0 <bt_init+0x1a8>)
 8005c1c:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005c1e:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <bt_init+0x1ac>)
 8005c20:	f3bf 8f5b 	dmb	ish
 8005c24:	2201      	movs	r2, #1
 8005c26:	e853 1f00 	ldrex	r1, [r3]
 8005c2a:	e843 2000 	strex	r0, r2, [r3]
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d1f9      	bne.n	8005c26 <bt_init+0x2e>
 8005c32:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
 8005c36:	9804      	ldr	r0, [sp, #16]
 8005c38:	f00b fc44 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
 8005c3c:	aa04      	add	r2, sp, #16
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f241 0003 	movw	r0, #4099	; 0x1003
 8005c44:	f7ff faa0 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005c48:	4604      	mov	r4, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f040 81ee 	bne.w	800602c <bt_init+0x434>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	4d55      	ldr	r5, [pc, #340]	; (8005da8 <bt_init+0x1b0>)
 8005c54:	6899      	ldr	r1, [r3, #8]
 8005c56:	2208      	movs	r2, #8
 8005c58:	3101      	adds	r1, #1
 8005c5a:	f105 0016 	add.w	r0, r5, #22
 8005c5e:	f7fa fe0f 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005c62:	9804      	ldr	r0, [sp, #16]
 8005c64:	f00b fc2e 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
 8005c68:	4621      	mov	r1, r4
 8005c6a:	aa04      	add	r2, sp, #16
 8005c6c:	f241 0001 	movw	r0, #4097	; 0x1001
 8005c70:	f7ff fa8a 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005c74:	4604      	mov	r4, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f040 81d8 	bne.w	800602c <bt_init+0x434>
	read_local_ver_complete(rsp);
 8005c7c:	9804      	ldr	r0, [sp, #16]
 8005c7e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
 8005c80:	785a      	ldrb	r2, [r3, #1]
 8005c82:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
 8005c84:	78d9      	ldrb	r1, [r3, #3]
 8005c86:	789a      	ldrb	r2, [r3, #2]
 8005c88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c8c:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
 8005c8e:	791a      	ldrb	r2, [r3, #4]
 8005c90:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
 8005c92:	7a19      	ldrb	r1, [r3, #8]
 8005c94:	79da      	ldrb	r2, [r3, #7]
 8005c96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c9a:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
 8005c9c:	795a      	ldrb	r2, [r3, #5]
 8005c9e:	799b      	ldrb	r3, [r3, #6]
 8005ca0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005ca4:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
 8005ca6:	f00b fc0d 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
 8005caa:	4621      	mov	r1, r4
 8005cac:	aa04      	add	r2, sp, #16
 8005cae:	f241 0009 	movw	r0, #4105	; 0x1009
 8005cb2:	f7ff fa69 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 81b7 	bne.w	800602c <bt_init+0x434>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	6899      	ldr	r1, [r3, #8]
 8005cc2:	2206      	movs	r2, #6
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	1c68      	adds	r0, r5, #1
 8005cc8:	f7fa fdda 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005ccc:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
 8005cce:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
 8005cd0:	f00b fbf8 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	aa04      	add	r2, sp, #16
 8005cd8:	f241 0002 	movw	r0, #4098	; 0x1002
 8005cdc:	f7ff fa54 	bl	8005188 <bt_hci_cmd_send_sync>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
 8005ce0:	46a0      	mov	r8, r4
	if (err) {
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f040 81a1 	bne.w	800602c <bt_init+0x434>
	memcpy(bt_dev.supported_commands, rp->commands,
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	6899      	ldr	r1, [r3, #8]
 8005cee:	2240      	movs	r2, #64	; 0x40
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	f105 001e 	add.w	r0, r5, #30
 8005cf6:	f7fa fdc3 	bl	8000880 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
 8005cfa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
 8005cfe:	9804      	ldr	r0, [sp, #16]
		bt_dev.supported_commands[34] |= 0x04;
 8005d00:	f043 0306 	orr.w	r3, r3, #6
 8005d04:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
 8005d08:	f00b fbdc 	bl	80114c4 <net_buf_unref>
		err = prng_init();
 8005d0c:	f000 fdcc 	bl	80068a8 <prng_init>
		if (err) {
 8005d10:	4604      	mov	r4, r0
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f040 818a 	bne.w	800602c <bt_init+0x434>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
 8005d18:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8005d1c:	0699      	lsls	r1, r3, #26
 8005d1e:	d539      	bpl.n	8005d94 <bt_init+0x19c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
 8005d20:	2107      	movs	r1, #7
 8005d22:	f640 4033 	movw	r0, #3123	; 0xc33
 8005d26:	f7ff f96d 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	b910      	cbnz	r0, 8005d34 <bt_init+0x13c>
		return -ENOBUFS;
 8005d2e:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8005d32:	e17b      	b.n	800602c <bt_init+0x434>
	hbs = net_buf_add(buf, sizeof(*hbs));
 8005d34:	2107      	movs	r1, #7
 8005d36:	3008      	adds	r0, #8
 8005d38:	f00b fbe4 	bl	8011504 <net_buf_simple_add>
	memset(hbs, 0, sizeof(*hbs));
 8005d3c:	4621      	mov	r1, r4
	hbs = net_buf_add(buf, sizeof(*hbs));
 8005d3e:	4606      	mov	r6, r0
	memset(hbs, 0, sizeof(*hbs));
 8005d40:	2207      	movs	r2, #7
 8005d42:	f7fa fdc9 	bl	80008d8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 8005d46:	2349      	movs	r3, #73	; 0x49
 8005d48:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 8005d4a:	2306      	movs	r3, #6
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 8005d4c:	7074      	strb	r4, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 8005d4e:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 8005d50:	70f3      	strb	r3, [r6, #3]
 8005d52:	f886 8004 	strb.w	r8, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 8005d56:	4639      	mov	r1, r7
 8005d58:	f640 4033 	movw	r0, #3123	; 0xc33
 8005d5c:	f7ff fa14 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005d60:	4604      	mov	r4, r0
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f040 8162 	bne.w	800602c <bt_init+0x434>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
 8005d68:	2101      	movs	r1, #1
 8005d6a:	f640 4031 	movw	r0, #3121	; 0xc31
 8005d6e:	f7ff f949 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005d72:	4606      	mov	r6, r0
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0da      	beq.n	8005d2e <bt_init+0x136>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	3008      	adds	r0, #8
 8005d7c:	f00b fbd1 	bl	8011522 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
 8005d80:	4622      	mov	r2, r4
 8005d82:	4631      	mov	r1, r6
 8005d84:	f640 4031 	movw	r0, #3121	; 0xc31
 8005d88:	f7ff f9fe 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 814c 	bne.w	800602c <bt_init+0x434>
	if (!BT_FEAT_LE(bt_dev.features)) {
 8005d94:	7eab      	ldrb	r3, [r5, #26]
 8005d96:	065b      	lsls	r3, r3, #25
 8005d98:	d408      	bmi.n	8005dac <bt_init+0x1b4>
		return -ENODEV;
 8005d9a:	f06f 0412 	mvn.w	r4, #18
 8005d9e:	e145      	b.n	800602c <bt_init+0x434>
 8005da0:	20000570 	.word	0x20000570
 8005da4:	20005910 	.word	0x20005910
 8005da8:	200058a0 	.word	0x200058a0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
 8005dac:	aa04      	add	r2, sp, #16
 8005dae:	2100      	movs	r1, #0
 8005db0:	f242 0003 	movw	r0, #8195	; 0x2003
 8005db4:	f7ff f9e8 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005db8:	4604      	mov	r4, r0
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f040 8136 	bne.w	800602c <bt_init+0x434>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	48c1      	ldr	r0, [pc, #772]	; (80060c8 <bt_init+0x4d0>)
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	3101      	adds	r1, #1
 8005dca:	f7fa fd59 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005dce:	9804      	ldr	r0, [sp, #16]
 8005dd0:	f00b fb78 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	aa04      	add	r2, sp, #16
 8005dd8:	f242 0002 	movw	r0, #8194	; 0x2002
 8005ddc:	f7ff f9d4 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005de0:	4604      	mov	r4, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f040 8122 	bne.w	800602c <bt_init+0x434>
 8005de8:	9b04      	ldr	r3, [sp, #16]
 8005dea:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
 8005dec:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 8005df0:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
 8005df4:	b13a      	cbz	r2, 8005e06 <bt_init+0x20e>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
 8005df6:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 8005df8:	48b4      	ldr	r0, [pc, #720]	; (80060cc <bt_init+0x4d4>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
 8005dfa:	2a07      	cmp	r2, #7
 8005dfc:	bf28      	it	cs
 8005dfe:	2207      	movcs	r2, #7
 8005e00:	4611      	mov	r1, r2
 8005e02:	f00b ffd9 	bl	8011db8 <_impl_k_sem_init>
	net_buf_unref(rsp);
 8005e06:	9804      	ldr	r0, [sp, #16]
 8005e08:	f00b fb5c 	bl	80114c4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 8005e0c:	7eac      	ldrb	r4, [r5, #26]
 8005e0e:	f014 0420 	ands.w	r4, r4, #32
 8005e12:	f000 80f1 	beq.w	8005ff8 <bt_init+0x400>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
 8005e16:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 8005e1a:	071a      	lsls	r2, r3, #28
 8005e1c:	d514      	bpl.n	8005e48 <bt_init+0x250>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
 8005e1e:	aa04      	add	r2, sp, #16
 8005e20:	2100      	movs	r1, #0
 8005e22:	f242 001c 	movw	r0, #8220	; 0x201c
 8005e26:	f7ff f9af 	bl	8005188 <bt_hci_cmd_send_sync>
		if (err) {
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f040 80fd 	bne.w	800602c <bt_init+0x434>
		le_read_supp_states_complete(rsp);
 8005e32:	9804      	ldr	r0, [sp, #16]
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
 8005e34:	6883      	ldr	r3, [r0, #8]
 8005e36:	f853 2f01 	ldr.w	r2, [r3, #1]!
 8005e3a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
 8005e3c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005e40:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
 8005e44:	f00b fb3e 	bl	80114c4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
 8005e48:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 8005e4c:	069b      	lsls	r3, r3, #26
 8005e4e:	f100 80f1 	bmi.w	8006034 <bt_init+0x43c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
 8005e52:	2108      	movs	r1, #8
 8005e54:	f242 0001 	movw	r0, #8193	; 0x2001
 8005e58:	f7ff f8d4 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f43f af65 	beq.w	8005d2e <bt_init+0x136>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
 8005e64:	2108      	movs	r1, #8
 8005e66:	4408      	add	r0, r1
 8005e68:	f00b fb4c 	bl	8011504 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
 8005e6c:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
 8005e70:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
 8005e72:	bf4c      	ite	mi
 8005e74:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
 8005e76:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
 8005e78:	068e      	lsls	r6, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 8005e7a:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
 8005e7e:	bf48      	it	mi
 8005e80:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 8005e84:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
 8005e88:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 8005e8c:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
 8005e90:	bf18      	it	ne
 8005e92:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
 8005e96:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
 8005e98:	bf08      	it	eq
 8005e9a:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
 8005e9e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
 8005ea0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8005ea4:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
 8005eaa:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
 8005eac:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 8005eae:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
 8005eb0:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 8005eb2:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f242 0001 	movw	r0, #8193	; 0x2001
 8005eba:	f7ff f965 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f040 80b3 	bne.w	800602c <bt_init+0x434>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 8005ec6:	7eab      	ldrb	r3, [r5, #26]
 8005ec8:	0699      	lsls	r1, r3, #26
 8005eca:	d421      	bmi.n	8005f10 <bt_init+0x318>
	if (bt_dev.le.mtu) {
 8005ecc:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
 8005ed0:	b9f1      	cbnz	r1, 8005f10 <bt_init+0x318>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
 8005ed2:	aa04      	add	r2, sp, #16
 8005ed4:	f241 0005 	movw	r0, #4101	; 0x1005
 8005ed8:	f7ff f956 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005edc:	4604      	mov	r4, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f040 80a4 	bne.w	800602c <bt_init+0x434>
	if (bt_dev.le.mtu) {
 8005ee4:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
 8005ee8:	b97b      	cbnz	r3, 8005f0a <bt_init+0x312>
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	4877      	ldr	r0, [pc, #476]	; (80060cc <bt_init+0x4d4>)
 8005eee:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
 8005ef0:	7899      	ldrb	r1, [r3, #2]
 8005ef2:	785a      	ldrb	r2, [r3, #1]
 8005ef4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ef8:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
 8005efc:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
 8005efe:	2a07      	cmp	r2, #7
 8005f00:	bf28      	it	cs
 8005f02:	2207      	movcs	r2, #7
 8005f04:	4611      	mov	r1, r2
 8005f06:	f00b ff57 	bl	8011db8 <_impl_k_sem_init>
	net_buf_unref(rsp);
 8005f0a:	9804      	ldr	r0, [sp, #16]
 8005f0c:	f00b fada 	bl	80114c4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
 8005f10:	2108      	movs	r1, #8
 8005f12:	f640 4001 	movw	r0, #3073	; 0xc01
 8005f16:	f7ff f875 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f43f af06 	beq.w	8005d2e <bt_init+0x136>
	ev = net_buf_add(buf, sizeof(*ev));
 8005f22:	2108      	movs	r1, #8
 8005f24:	4408      	add	r0, r1
 8005f26:	f00b faed 	bl	8011504 <net_buf_simple_add>
	dst[0] = val;
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
 8005f2e:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
 8005f30:	2200      	movs	r2, #0
	dst[1] = val >> 8;
 8005f32:	7043      	strb	r3, [r0, #1]
 8005f34:	2602      	movs	r6, #2
 8005f36:	2320      	movs	r3, #32
	dst[0] = val;
 8005f38:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
 8005f3a:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
 8005f3c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 8005f3e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
 8005f40:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 8005f42:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
 8005f44:	4621      	mov	r1, r4
 8005f46:	f640 4001 	movw	r0, #3073	; 0xc01
 8005f4a:	f7ff f91d 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d16b      	bne.n	800602c <bt_init+0x434>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
 8005f54:	4601      	mov	r1, r0
 8005f56:	aa04      	add	r2, sp, #16
 8005f58:	f64f 4001 	movw	r0, #64513	; 0xfc01
 8005f5c:	f7ff f914 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005f60:	4604      	mov	r4, r0
 8005f62:	bb28      	cbnz	r0, 8005fb0 <bt_init+0x3b8>
	net_buf_unref(rsp);
 8005f64:	9804      	ldr	r0, [sp, #16]
 8005f66:	f00b faad 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	aa04      	add	r2, sp, #16
 8005f6e:	f64f 4002 	movw	r0, #64514	; 0xfc02
 8005f72:	f7ff f909 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005f76:	4604      	mov	r4, r0
 8005f78:	b9d0      	cbnz	r0, 8005fb0 <bt_init+0x3b8>
	rp.cmds = (void *)rsp->data;
 8005f7a:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
 8005f7c:	4854      	ldr	r0, [pc, #336]	; (80060d0 <bt_init+0x4d8>)
 8005f7e:	6899      	ldr	r1, [r3, #8]
 8005f80:	4632      	mov	r2, r6
 8005f82:	3101      	adds	r1, #1
 8005f84:	f7fa fc7c 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005f88:	9804      	ldr	r0, [sp, #16]
 8005f8a:	f00b fa9b 	bl	80114c4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
 8005f8e:	aa04      	add	r2, sp, #16
 8005f90:	4621      	mov	r1, r4
 8005f92:	f64f 4003 	movw	r0, #64515	; 0xfc03
 8005f96:	f7ff f8f7 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8005f9a:	b948      	cbnz	r0, 8005fb0 <bt_init+0x3b8>
	rp.feat = (void *)rsp->data;
 8005f9c:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
 8005f9e:	484d      	ldr	r0, [pc, #308]	; (80060d4 <bt_init+0x4dc>)
 8005fa0:	6899      	ldr	r1, [r3, #8]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4411      	add	r1, r2
 8005fa6:	f7fa fc6b 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005faa:	9804      	ldr	r0, [sp, #16]
 8005fac:	f00b fa8a 	bl	80114c4 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
 8005fb0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
 8005fb2:	2207      	movs	r2, #7
 8005fb4:	a904      	add	r1, sp, #16
 8005fb6:	4848      	ldr	r0, [pc, #288]	; (80060d8 <bt_init+0x4e0>)
 8005fb8:	9304      	str	r3, [sp, #16]
 8005fba:	f8cd 3013 	str.w	r3, [sp, #19]
 8005fbe:	f7fa fc4a 	bl	8000856 <memcmp>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d162      	bne.n	800608c <bt_init+0x494>
	if (bt_storage) {
 8005fc6:	4e45      	ldr	r6, [pc, #276]	; (80060dc <bt_init+0x4e4>)
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 808c 	bne.w	80060e8 <bt_init+0x4f0>
	if (bt_dev.vs_commands[1] & BIT(0)) {
 8005fd0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8005fd4:	07da      	lsls	r2, r3, #31
 8005fd6:	f100 80a3 	bmi.w	8006120 <bt_init+0x528>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
 8005fda:	483f      	ldr	r0, [pc, #252]	; (80060d8 <bt_init+0x4e0>)
 8005fdc:	f7ff fdfe 	bl	8005bdc <bt_addr_le_create_static>
	if (err) {
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	bb18      	cbnz	r0, 800602c <bt_init+0x434>
	if (bt_storage) {
 8005fe4:	6833      	ldr	r3, [r6, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8087 	beq.w	80060fa <bt_init+0x502>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
 8005fec:	685e      	ldr	r6, [r3, #4]
 8005fee:	4a3a      	ldr	r2, [pc, #232]	; (80060d8 <bt_init+0x4e0>)
 8005ff0:	2307      	movs	r3, #7
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	47b0      	blx	r6
 8005ff6:	e080      	b.n	80060fa <bt_init+0x502>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	f640 406d 	movw	r0, #3181	; 0xc6d
 8005ffe:	f7ff f801 	bl	8005004 <bt_hci_cmd_create>
		if (!buf) {
 8006002:	4606      	mov	r6, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	f43f ae92 	beq.w	8005d2e <bt_init+0x136>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
 800600a:	2102      	movs	r1, #2
 800600c:	3008      	adds	r0, #8
 800600e:	f00b fa79 	bl	8011504 <net_buf_simple_add>
		cp_le->le = 0x01;
 8006012:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
 8006014:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
 8006016:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
 8006018:	4622      	mov	r2, r4
 800601a:	4631      	mov	r1, r6
 800601c:	f640 406d 	movw	r0, #3181	; 0xc6d
 8006020:	f7ff f8b2 	bl	8005188 <bt_hci_cmd_send_sync>
		if (err) {
 8006024:	4604      	mov	r4, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f aef5 	beq.w	8005e16 <bt_init+0x21e>
}
 800602c:	4620      	mov	r0, r4
 800602e:	b006      	add	sp, #24
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
 8006034:	aa04      	add	r2, sp, #16
 8006036:	2100      	movs	r1, #0
 8006038:	f242 002f 	movw	r0, #8239	; 0x202f
 800603c:	f7ff f8a4 	bl	8005188 <bt_hci_cmd_send_sync>
		if (err) {
 8006040:	4604      	mov	r4, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	d1f2      	bne.n	800602c <bt_init+0x434>
		rp = (void *)rsp->data;
 8006046:	9804      	ldr	r0, [sp, #16]
 8006048:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 800604a:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
 800604e:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
 8006052:	f00b fa37 	bl	80114c4 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8006056:	2104      	movs	r1, #4
 8006058:	f242 0024 	movw	r0, #8228	; 0x2024
 800605c:	f7fe ffd2 	bl	8005004 <bt_hci_cmd_create>
		if (!buf) {
 8006060:	4606      	mov	r6, r0
 8006062:	2800      	cmp	r0, #0
 8006064:	f43f ae63 	beq.w	8005d2e <bt_init+0x136>
		cp = net_buf_add(buf, sizeof(*cp));
 8006068:	2104      	movs	r1, #4
 800606a:	3008      	adds	r0, #8
 800606c:	f00b fa4a 	bl	8011504 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8006070:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
 8006072:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
 8006076:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8006078:	4631      	mov	r1, r6
 800607a:	f242 0024 	movw	r0, #8228	; 0x2024
 800607e:	f7ff f883 	bl	8005188 <bt_hci_cmd_send_sync>
		if (err) {
 8006082:	4604      	mov	r4, r0
 8006084:	2800      	cmp	r0, #0
 8006086:	f43f aee4 	beq.w	8005e52 <bt_init+0x25a>
 800608a:	e7cf      	b.n	800602c <bt_init+0x434>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
 800608c:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <bt_init+0x4e8>)
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	889a      	ldrh	r2, [r3, #4]
 8006092:	9002      	str	r0, [sp, #8]
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	f8ad 200c 	strh.w	r2, [sp, #12]
 800609a:	a902      	add	r1, sp, #8
 800609c:	2207      	movs	r2, #7
 800609e:	480e      	ldr	r0, [pc, #56]	; (80060d8 <bt_init+0x4e0>)
 80060a0:	f88d 300e 	strb.w	r3, [sp, #14]
 80060a4:	f7fa fbd7 	bl	8000856 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d08c      	beq.n	8005fc6 <bt_init+0x3ce>
		err = bt_conn_init();
 80060ac:	f001 f8f0 	bl	8007290 <bt_conn_init>
		if (err) {
 80060b0:	4604      	mov	r4, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1ba      	bne.n	800602c <bt_init+0x434>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80060b6:	2102      	movs	r1, #2
 80060b8:	480a      	ldr	r0, [pc, #40]	; (80060e4 <bt_init+0x4ec>)
 80060ba:	f7fe fed6 	bl	8004e6a <atomic_or>
	bt_le_scan_update(false);
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff f9ce 	bl	8005460 <bt_le_scan_update>
 80060c4:	e7b2      	b.n	800602c <bt_init+0x434>
 80060c6:	bf00      	nop
 80060c8:	20005918 	.word	0x20005918
 80060cc:	2000592c 	.word	0x2000592c
 80060d0:	200058ff 	.word	0x200058ff
 80060d4:	200058fe 	.word	0x200058fe
 80060d8:	200058a0 	.word	0x200058a0
 80060dc:	2000147c 	.word	0x2000147c
 80060e0:	08012c3c 	.word	0x08012c3c
 80060e4:	20005910 	.word	0x20005910
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
 80060e8:	2100      	movs	r1, #0
 80060ea:	681c      	ldr	r4, [r3, #0]
 80060ec:	4a1b      	ldr	r2, [pc, #108]	; (800615c <bt_init+0x564>)
 80060ee:	2307      	movs	r3, #7
 80060f0:	4608      	mov	r0, r1
 80060f2:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
 80060f4:	2807      	cmp	r0, #7
 80060f6:	f47f af6b 	bne.w	8005fd0 <bt_init+0x3d8>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
 80060fa:	782b      	ldrb	r3, [r5, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d12a      	bne.n	8006156 <bt_init+0x55e>
 8006100:	79ab      	ldrb	r3, [r5, #6]
 8006102:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006106:	2bc0      	cmp	r3, #192	; 0xc0
 8006108:	d125      	bne.n	8006156 <bt_init+0x55e>
	err = set_random_address(&bt_dev.id_addr.a);
 800610a:	4815      	ldr	r0, [pc, #84]	; (8006160 <bt_init+0x568>)
 800610c:	f7ff f874 	bl	80051f8 <set_random_address>
	if (err) {
 8006110:	4604      	mov	r4, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d18a      	bne.n	800602c <bt_init+0x434>
 8006116:	2104      	movs	r1, #4
 8006118:	4812      	ldr	r0, [pc, #72]	; (8006164 <bt_init+0x56c>)
 800611a:	f7fe fea6 	bl	8004e6a <atomic_or>
 800611e:	e7c5      	b.n	80060ac <bt_init+0x4b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
 8006120:	aa01      	add	r2, sp, #4
 8006122:	2100      	movs	r1, #0
 8006124:	f64f 4009 	movw	r0, #64521	; 0xfc09
 8006128:	f7ff f82e 	bl	8005188 <bt_hci_cmd_send_sync>
		if (err) {
 800612c:	2800      	cmp	r0, #0
 800612e:	f47f af54 	bne.w	8005fda <bt_init+0x3e2>
		rp = (void *)rsp->data;
 8006132:	9801      	ldr	r0, [sp, #4]
 8006134:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
 8006136:	784b      	ldrb	r3, [r1, #1]
 8006138:	b153      	cbz	r3, 8006150 <bt_init+0x558>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
 800613a:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
 800613c:	2206      	movs	r2, #6
 800613e:	3102      	adds	r1, #2
 8006140:	4807      	ldr	r0, [pc, #28]	; (8006160 <bt_init+0x568>)
 8006142:	702b      	strb	r3, [r5, #0]
 8006144:	f7fa fb9c 	bl	8000880 <memcpy>
			net_buf_unref(rsp);
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	f00b f9bb 	bl	80114c4 <net_buf_unref>
 800614e:	e7d4      	b.n	80060fa <bt_init+0x502>
		net_buf_unref(rsp);
 8006150:	f00b f9b8 	bl	80114c4 <net_buf_unref>
 8006154:	e741      	b.n	8005fda <bt_init+0x3e2>
		return -EINVAL;
 8006156:	f06f 0415 	mvn.w	r4, #21
 800615a:	e767      	b.n	800602c <bt_init+0x434>
 800615c:	200058a0 	.word	0x200058a0
 8006160:	200058a1 	.word	0x200058a1
 8006164:	20005910 	.word	0x20005910

08006168 <init_work>:
{
 8006168:	b510      	push	{r4, lr}
	err = bt_init();
 800616a:	f7ff fd45 	bl	8005bf8 <bt_init>
	if (ready_cb) {
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <init_work+0x14>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b113      	cbz	r3, 800617a <init_work+0x12>
}
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
 8006178:	4718      	bx	r3
 800617a:	bd10      	pop	{r4, pc}
 800617c:	20000504 	.word	0x20000504

08006180 <bt_send>:
		return bt_hci_ecc_send(buf);
 8006180:	f7fe bd4e 	b.w	8004c20 <bt_hci_ecc_send>

08006184 <bt_recv>:
{
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
 8006188:	7980      	ldrb	r0, [r0, #6]
 800618a:	f00b f8c9 	bl	8011320 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 800618e:	8ac3      	ldrh	r3, [r0, #22]
 8006190:	2b03      	cmp	r3, #3
		net_buf_unref(buf);
 8006192:	4620      	mov	r0, r4
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 8006194:	d804      	bhi.n	80061a0 <bt_recv+0x1c>
		net_buf_unref(buf);
 8006196:	f00b f995 	bl	80114c4 <net_buf_unref>
		return -EINVAL;
 800619a:	f06f 0015 	mvn.w	r0, #21
}
 800619e:	bd10      	pop	{r4, pc}
 80061a0:	f7fe fe5a 	bl	8004e58 <net_buf_user_data>
	switch (bt_buf_get_type(buf)) {
 80061a4:	7803      	ldrb	r3, [r0, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d001      	beq.n	80061ae <bt_recv+0x2a>
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d105      	bne.n	80061ba <bt_recv+0x36>
		net_buf_put(&bt_dev.rx_queue, buf);
 80061ae:	4621      	mov	r1, r4
 80061b0:	4803      	ldr	r0, [pc, #12]	; (80061c0 <bt_recv+0x3c>)
 80061b2:	f00b f979 	bl	80114a8 <net_buf_put>
		return 0;
 80061b6:	2000      	movs	r0, #0
 80061b8:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
 80061ba:	4620      	mov	r0, r4
 80061bc:	e7eb      	b.n	8006196 <bt_recv+0x12>
 80061be:	bf00      	nop
 80061c0:	20005964 	.word	0x20005964

080061c4 <bt_recv_prio>:
{
 80061c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c8:	4604      	mov	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
 80061ca:	6886      	ldr	r6, [r0, #8]
 80061cc:	f7fe fe44 	bl	8004e58 <net_buf_user_data>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 80061d0:	7803      	ldrb	r3, [r0, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d005      	beq.n	80061e2 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
 80061d6:	4040      	eors	r0, r0
 80061d8:	f380 8811 	msr	BASEPRI, r0
 80061dc:	f04f 0004 	mov.w	r0, #4
 80061e0:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
 80061e2:	89a2      	ldrh	r2, [r4, #12]
 80061e4:	2a01      	cmp	r2, #1
 80061e6:	d9f6      	bls.n	80061d6 <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
 80061e8:	7832      	ldrb	r2, [r6, #0]
 80061ea:	2a13      	cmp	r2, #19
 80061ec:	d8f3      	bhi.n	80061d6 <bt_recv_prio+0x12>
 80061ee:	4093      	lsls	r3, r2
 80061f0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 80061f4:	d0ef      	beq.n	80061d6 <bt_recv_prio+0x12>
	net_buf_pull(buf, sizeof(*hdr));
 80061f6:	f104 0508 	add.w	r5, r4, #8
 80061fa:	2102      	movs	r1, #2
 80061fc:	4628      	mov	r0, r5
 80061fe:	f00b f9ec 	bl	80115da <net_buf_simple_pull>
	switch (hdr->evt) {
 8006202:	7833      	ldrb	r3, [r6, #0]
 8006204:	2b0f      	cmp	r3, #15
 8006206:	d018      	beq.n	800623a <bt_recv_prio+0x76>
 8006208:	2b13      	cmp	r3, #19
 800620a:	d023      	beq.n	8006254 <bt_recv_prio+0x90>
 800620c:	2b0e      	cmp	r3, #14
 800620e:	d161      	bne.n	80062d4 <bt_recv_prio+0x110>
	u8_t status, ncmd = evt->ncmd;
 8006210:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 8006212:	2103      	movs	r1, #3
 8006214:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
 8006216:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
 8006218:	f00b f9df 	bl	80115da <net_buf_simple_pull>
	status = buf->data[0];
 800621c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
 800621e:	4621      	mov	r1, r4
 8006220:	7818      	ldrb	r0, [r3, #0]
 8006222:	f7fe fe5f 	bl	8004ee4 <hci_cmd_done.isra.13>
	if (ncmd) {
 8006226:	b116      	cbz	r6, 800622e <bt_recv_prio+0x6a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8006228:	482c      	ldr	r0, [pc, #176]	; (80062dc <bt_recv_prio+0x118>)
 800622a:	f00b fdcf 	bl	8011dcc <_impl_k_sem_give>
	net_buf_unref(buf);
 800622e:	4620      	mov	r0, r4
 8006230:	f00b f948 	bl	80114c4 <net_buf_unref>
}
 8006234:	2000      	movs	r0, #0
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
 800623a:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 800623c:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
 800623e:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
 8006240:	4628      	mov	r0, r5
 8006242:	f00b f9ca 	bl	80115da <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
 8006246:	4621      	mov	r1, r4
 8006248:	7830      	ldrb	r0, [r6, #0]
 800624a:	f7fe fe4b 	bl	8004ee4 <hci_cmd_done.isra.13>
	if (ncmd) {
 800624e:	2f00      	cmp	r7, #0
 8006250:	d0ed      	beq.n	800622e <bt_recv_prio+0x6a>
 8006252:	e7e9      	b.n	8006228 <bt_recv_prio+0x64>
 8006254:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
 8006258:	2700      	movs	r7, #0
 800625a:	f898 3000 	ldrb.w	r3, [r8]
 800625e:	429f      	cmp	r7, r3
 8006260:	dae5      	bge.n	800622e <bt_recv_prio+0x6a>
 8006262:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
 8006266:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
 800626a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
 800626e:	f04f 0310 	mov.w	r3, #16
 8006272:	f3ef 8911 	mrs	r9, BASEPRI
 8006276:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
 800627a:	f000 fe23 	bl	8006ec4 <bt_conn_lookup_handle>
		if (!conn) {
 800627e:	4605      	mov	r5, r0
 8006280:	b918      	cbnz	r0, 800628a <bt_recv_prio+0xc6>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006282:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
 8006286:	3701      	adds	r7, #1
 8006288:	e7e7      	b.n	800625a <bt_recv_prio+0x96>
 800628a:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
 800628e:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
 8006292:	b196      	cbz	r6, 80062ba <bt_recv_prio+0xf6>
	__asm__ volatile(
 8006294:	f04f 0310 	mov.w	r3, #16
 8006298:	f3ef 8011 	mrs	r0, BASEPRI
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	6929      	ldr	r1, [r5, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 80062a2:	b129      	cbz	r1, 80062b0 <bt_recv_prio+0xec>
	if (list->tail == node) {
 80062a4:	696a      	ldr	r2, [r5, #20]
	list->head = node->next;
 80062a6:	680b      	ldr	r3, [r1, #0]
 80062a8:	612b      	str	r3, [r5, #16]
	if (list->tail == node) {
 80062aa:	4291      	cmp	r1, r2
		list->tail = list->head;
 80062ac:	bf08      	it	eq
 80062ae:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80062b0:	f380 8811 	msr	BASEPRI, r0
 80062b4:	3e01      	subs	r6, #1
 80062b6:	b2b6      	uxth	r6, r6
			if (!node) {
 80062b8:	b919      	cbnz	r1, 80062c2 <bt_recv_prio+0xfe>
		bt_conn_unref(conn);
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fe77 	bl	8006fae <bt_conn_unref>
 80062c0:	e7e1      	b.n	8006286 <bt_recv_prio+0xc2>
			k_fifo_put(&conn->tx_notify, node);
 80062c2:	4648      	mov	r0, r9
 80062c4:	f00b faef 	bl	80118a6 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 fb7f 	bl	80069cc <bt_conn_get_pkts>
 80062ce:	f00b fd7d 	bl	8011dcc <_impl_k_sem_give>
 80062d2:	e7de      	b.n	8006292 <bt_recv_prio+0xce>
		net_buf_unref(buf);
 80062d4:	4620      	mov	r0, r4
 80062d6:	f00b f8f5 	bl	80114c4 <net_buf_unref>
 80062da:	e77c      	b.n	80061d6 <bt_recv_prio+0x12>
 80062dc:	20005948 	.word	0x20005948

080062e0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
 80062e0:	4a08      	ldr	r2, [pc, #32]	; (8006304 <bt_hci_driver_register+0x24>)
 80062e2:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80062e6:	b93b      	cbnz	r3, 80062f8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
 80062e8:	6881      	ldr	r1, [r0, #8]
 80062ea:	b141      	cbz	r1, 80062fe <bt_hci_driver_register+0x1e>
 80062ec:	68c1      	ldr	r1, [r0, #12]
 80062ee:	b131      	cbz	r1, 80062fe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
 80062f0:	f8c2 00f4 	str.w	r0, [r2, #244]	; 0xf4
	return 0;
 80062f4:	4618      	mov	r0, r3
 80062f6:	4770      	bx	lr
		return -EALREADY;
 80062f8:	f06f 0044 	mvn.w	r0, #68	; 0x44
 80062fc:	4770      	bx	lr
		return -EINVAL;
 80062fe:	f06f 0015 	mvn.w	r0, #21
}
 8006302:	4770      	bx	lr
 8006304:	200058a0 	.word	0x200058a0

08006308 <bt_enable>:
{
 8006308:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
 800630a:	4d29      	ldr	r5, [pc, #164]	; (80063b0 <bt_enable+0xa8>)
 800630c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
{
 8006310:	b086      	sub	sp, #24
 8006312:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
 8006314:	2b00      	cmp	r3, #0
 8006316:	d044      	beq.n	80063a2 <bt_enable+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 8006318:	2101      	movs	r1, #1
 800631a:	f105 0070 	add.w	r0, r5, #112	; 0x70
 800631e:	f7fe fda4 	bl	8004e6a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 8006322:	f010 0401 	ands.w	r4, r0, #1
 8006326:	d13f      	bne.n	80063a8 <bt_enable+0xa0>
	ready_cb = cb;
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <bt_enable+0xac>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 800632a:	4923      	ldr	r1, [pc, #140]	; (80063b8 <bt_enable+0xb0>)
 800632c:	601e      	str	r6, [r3, #0]
 800632e:	f06f 0308 	mvn.w	r3, #8
 8006332:	9405      	str	r4, [sp, #20]
 8006334:	9404      	str	r4, [sp, #16]
 8006336:	9303      	str	r3, [sp, #12]
 8006338:	9402      	str	r4, [sp, #8]
 800633a:	9401      	str	r4, [sp, #4]
 800633c:	9400      	str	r4, [sp, #0]
 800633e:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <bt_enable+0xb4>)
 8006340:	481f      	ldr	r0, [pc, #124]	; (80063c0 <bt_enable+0xb8>)
 8006342:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006346:	f00b ff79 	bl	801223c <_impl_k_thread_create>
 800634a:	f06f 0307 	mvn.w	r3, #7
 800634e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006352:	491c      	ldr	r1, [pc, #112]	; (80063c4 <bt_enable+0xbc>)
 8006354:	9405      	str	r4, [sp, #20]
 8006356:	9404      	str	r4, [sp, #16]
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	9402      	str	r4, [sp, #8]
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <bt_enable+0xc0>)
 800635e:	9401      	str	r4, [sp, #4]
 8006360:	9400      	str	r4, [sp, #0]
 8006362:	481a      	ldr	r0, [pc, #104]	; (80063cc <bt_enable+0xc4>)
 8006364:	f00b ff6a 	bl	801223c <_impl_k_thread_create>
		bt_hci_ecc_init();
 8006368:	f7fe fcf4 	bl	8004d54 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
 800636c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	4798      	blx	r3
	if (err) {
 8006374:	4604      	mov	r4, r0
 8006376:	b988      	cbnz	r0, 800639c <bt_enable+0x94>
	if (!cb) {
 8006378:	b926      	cbnz	r6, 8006384 <bt_enable+0x7c>
}
 800637a:	b006      	add	sp, #24
 800637c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
 8006380:	f7ff bc3a 	b.w	8005bf8 <bt_init>
 8006384:	2101      	movs	r1, #1
 8006386:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800638a:	f7fe fd6e 	bl	8004e6a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800638e:	07c3      	lsls	r3, r0, #31
 8006390:	d404      	bmi.n	800639c <bt_enable+0x94>
		k_queue_append(&work_q->queue, work);
 8006392:	f105 0164 	add.w	r1, r5, #100	; 0x64
 8006396:	480e      	ldr	r0, [pc, #56]	; (80063d0 <bt_enable+0xc8>)
 8006398:	f00b fa85 	bl	80118a6 <k_queue_append>
}
 800639c:	4620      	mov	r0, r4
 800639e:	b006      	add	sp, #24
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 80063a2:	f06f 0412 	mvn.w	r4, #18
 80063a6:	e7f9      	b.n	800639c <bt_enable+0x94>
		return -EALREADY;
 80063a8:	f06f 0444 	mvn.w	r4, #68	; 0x44
 80063ac:	e7f6      	b.n	800639c <bt_enable+0x94>
 80063ae:	bf00      	nop
 80063b0:	200058a0 	.word	0x200058a0
 80063b4:	20000504 	.word	0x20000504
 80063b8:	200022d0 	.word	0x200022d0
 80063bc:	08004f19 	.word	0x08004f19
 80063c0:	20000574 	.word	0x20000574
 80063c4:	20001ad0 	.word	0x20001ad0
 80063c8:	08005619 	.word	0x08005619
 80063cc:	20000508 	.word	0x20000508
 80063d0:	20001498 	.word	0x20001498

080063d4 <bt_addr_le_is_bonded>:
}
 80063d4:	2000      	movs	r0, #0
 80063d6:	4770      	bx	lr

080063d8 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
 80063d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80063da:	461e      	mov	r6, r3
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 80063dc:	7803      	ldrb	r3, [r0, #0]
 80063de:	f013 0f01 	tst.w	r3, #1
{
 80063e2:	4605      	mov	r5, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	8843      	ldrh	r3, [r0, #2]
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 80063e8:	d10a      	bne.n	8006400 <bt_le_adv_start+0x28>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 80063ea:	4947      	ldr	r1, [pc, #284]	; (8006508 <bt_le_adv_start+0x130>)
 80063ec:	7b89      	ldrb	r1, [r1, #14]
 80063ee:	2908      	cmp	r1, #8
 80063f0:	d806      	bhi.n	8006400 <bt_le_adv_start+0x28>
 80063f2:	2b9f      	cmp	r3, #159	; 0x9f
 80063f4:	d804      	bhi.n	8006400 <bt_le_adv_start+0x28>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
 80063f6:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
 80063fa:	4620      	mov	r0, r4
 80063fc:	b004      	add	sp, #16
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
	if (param->interval_min > param->interval_max ||
 8006400:	88a9      	ldrh	r1, [r5, #4]
 8006402:	428b      	cmp	r3, r1
 8006404:	d8f7      	bhi.n	80063f6 <bt_le_adv_start+0x1e>
 8006406:	2b1f      	cmp	r3, #31
 8006408:	d9f5      	bls.n	80063f6 <bt_le_adv_start+0x1e>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
 800640a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800640e:	d8f2      	bhi.n	80063f6 <bt_le_adv_start+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 8006410:	2105      	movs	r1, #5
 8006412:	483e      	ldr	r0, [pc, #248]	; (800650c <bt_le_adv_start+0x134>)
 8006414:	f7fe fd3a 	bl	8004e8c <atomic_test_bit>
 8006418:	b110      	cbz	r0, 8006420 <bt_le_adv_start+0x48>
		return -EALREADY;
 800641a:	f06f 0444 	mvn.w	r4, #68	; 0x44
 800641e:	e7ec      	b.n	80063fa <bt_le_adv_start+0x22>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 8006420:	4621      	mov	r1, r4
 8006422:	f242 0008 	movw	r0, #8200	; 0x2008
 8006426:	f7fe ff85 	bl	8005334 <set_ad>
	if (err) {
 800642a:	4604      	mov	r4, r0
 800642c:	2800      	cmp	r0, #0
 800642e:	d1e4      	bne.n	80063fa <bt_le_adv_start+0x22>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 8006430:	2e00      	cmp	r6, #0
 8006432:	d146      	bne.n	80064c2 <bt_le_adv_start+0xea>
 8006434:	782b      	ldrb	r3, [r5, #0]
 8006436:	07d9      	lsls	r1, r3, #31
 8006438:	d443      	bmi.n	80064c2 <bt_le_adv_start+0xea>
	memset(&set_param, 0, sizeof(set_param));
 800643a:	220f      	movs	r2, #15
 800643c:	2100      	movs	r1, #0
 800643e:	4668      	mov	r0, sp
 8006440:	f7fa fa4a 	bl	80008d8 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
 8006444:	886b      	ldrh	r3, [r5, #2]
 8006446:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
 800644a:	88ab      	ldrh	r3, [r5, #4]
 800644c:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
 8006450:	2307      	movs	r3, #7
 8006452:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 8006456:	782b      	ldrb	r3, [r5, #0]
 8006458:	07da      	lsls	r2, r3, #31
 800645a:	d53c      	bpl.n	80064d6 <bt_le_adv_start+0xfe>
			if (atomic_test_bit(bt_dev.flags,
 800645c:	2102      	movs	r1, #2
 800645e:	482b      	ldr	r0, [pc, #172]	; (800650c <bt_le_adv_start+0x134>)
 8006460:	4c29      	ldr	r4, [pc, #164]	; (8006508 <bt_le_adv_start+0x130>)
 8006462:	f7fe fd13 	bl	8004e8c <atomic_test_bit>
 8006466:	b110      	cbz	r0, 800646e <bt_le_adv_start+0x96>
				set_random_address(&bt_dev.id_addr.a);
 8006468:	1c60      	adds	r0, r4, #1
 800646a:	f7fe fec5 	bl	80051f8 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
 800646e:	7823      	ldrb	r3, [r4, #0]
 8006470:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
 8006474:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 8006476:	210f      	movs	r1, #15
 8006478:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
 800647c:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 8006480:	f7fe fdc0 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8006484:	4604      	mov	r4, r0
 8006486:	2800      	cmp	r0, #0
 8006488:	d03b      	beq.n	8006502 <bt_le_adv_start+0x12a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 800648a:	220f      	movs	r2, #15
 800648c:	4669      	mov	r1, sp
 800648e:	3008      	adds	r0, #8
 8006490:	f00b f83e 	bl	8011510 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
 8006494:	4621      	mov	r1, r4
 8006496:	2200      	movs	r2, #0
 8006498:	f242 0006 	movw	r0, #8198	; 0x2006
 800649c:	f7fe fe74 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 80064a0:	4604      	mov	r4, r0
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d1a9      	bne.n	80063fa <bt_le_adv_start+0x22>
	err = set_advertise_enable(true);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7fe ff1a 	bl	80052e0 <set_advertise_enable>
	if (err) {
 80064ac:	4604      	mov	r4, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d1a3      	bne.n	80063fa <bt_le_adv_start+0x22>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
 80064b2:	782b      	ldrb	r3, [r5, #0]
 80064b4:	079b      	lsls	r3, r3, #30
 80064b6:	d4a0      	bmi.n	80063fa <bt_le_adv_start+0x22>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80064b8:	2140      	movs	r1, #64	; 0x40
 80064ba:	4814      	ldr	r0, [pc, #80]	; (800650c <bt_le_adv_start+0x134>)
 80064bc:	f7fe fcd5 	bl	8004e6a <atomic_or>
 80064c0:	e79b      	b.n	80063fa <bt_le_adv_start+0x22>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 80064c2:	9a08      	ldr	r2, [sp, #32]
 80064c4:	4631      	mov	r1, r6
 80064c6:	f242 0009 	movw	r0, #8201	; 0x2009
 80064ca:	f7fe ff33 	bl	8005334 <set_ad>
		if (err) {
 80064ce:	4604      	mov	r4, r0
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0b2      	beq.n	800643a <bt_le_adv_start+0x62>
 80064d4:	e791      	b.n	80063fa <bt_le_adv_start+0x22>
		if (param->own_addr) {
 80064d6:	68a8      	ldr	r0, [r5, #8]
 80064d8:	b170      	cbz	r0, 80064f8 <bt_le_adv_start+0x120>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
 80064da:	7943      	ldrb	r3, [r0, #5]
 80064dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80064e0:	d189      	bne.n	80063f6 <bt_le_adv_start+0x1e>
			err = set_random_address(param->own_addr);
 80064e2:	f7fe fe89 	bl	80051f8 <set_random_address>
			err = le_set_private_addr();
 80064e6:	4604      	mov	r4, r0
		if (err) {
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d186      	bne.n	80063fa <bt_le_adv_start+0x22>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
 80064f2:	b126      	cbz	r6, 80064fe <bt_le_adv_start+0x126>
			set_param.type = BT_LE_ADV_SCAN_IND;
 80064f4:	2302      	movs	r3, #2
 80064f6:	e7be      	b.n	8006476 <bt_le_adv_start+0x9e>
			err = le_set_private_addr();
 80064f8:	f7fe feac 	bl	8005254 <le_set_private_addr>
 80064fc:	e7f3      	b.n	80064e6 <bt_le_adv_start+0x10e>
			set_param.type = BT_LE_ADV_NONCONN_IND;
 80064fe:	2303      	movs	r3, #3
 8006500:	e7b9      	b.n	8006476 <bt_le_adv_start+0x9e>
		return -ENOBUFS;
 8006502:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8006506:	e778      	b.n	80063fa <bt_le_adv_start+0x22>
 8006508:	200058a0 	.word	0x200058a0
 800650c:	20005910 	.word	0x20005910

08006510 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
 8006510:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8006512:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8006516:	4810      	ldr	r0, [pc, #64]	; (8006558 <bt_le_adv_stop+0x48>)
 8006518:	f7fe fcc5 	bl	8004ea6 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 800651c:	2105      	movs	r1, #5
 800651e:	480e      	ldr	r0, [pc, #56]	; (8006558 <bt_le_adv_stop+0x48>)
 8006520:	f7fe fcb4 	bl	8004e8c <atomic_test_bit>
 8006524:	b910      	cbnz	r0, 800652c <bt_le_adv_stop+0x1c>
		return 0;
 8006526:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
 8006528:	4620      	mov	r0, r4
 800652a:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
 800652c:	2000      	movs	r0, #0
 800652e:	f7fe fed7 	bl	80052e0 <set_advertise_enable>
	if (err) {
 8006532:	4604      	mov	r4, r0
 8006534:	2800      	cmp	r0, #0
 8006536:	d1f7      	bne.n	8006528 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 8006538:	2107      	movs	r1, #7
 800653a:	4807      	ldr	r0, [pc, #28]	; (8006558 <bt_le_adv_stop+0x48>)
 800653c:	f7fe fca6 	bl	8004e8c <atomic_test_bit>
 8006540:	2800      	cmp	r0, #0
 8006542:	d0f0      	beq.n	8006526 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
 8006544:	2109      	movs	r1, #9
 8006546:	4804      	ldr	r0, [pc, #16]	; (8006558 <bt_le_adv_stop+0x48>)
 8006548:	f7fe fca0 	bl	8004e8c <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 800654c:	2800      	cmp	r0, #0
 800654e:	d0ea      	beq.n	8006526 <bt_le_adv_stop+0x16>
			le_set_private_addr();
 8006550:	f7fe fe80 	bl	8005254 <le_set_private_addr>
 8006554:	e7e8      	b.n	8006528 <bt_le_adv_stop+0x18>
 8006556:	bf00      	nop
 8006558:	20005910 	.word	0x20005910

0800655c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
 800655c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
 8006560:	7803      	ldrb	r3, [r0, #0]
 8006562:	2b01      	cmp	r3, #1
{
 8006564:	4605      	mov	r5, r0
 8006566:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
 8006568:	d810      	bhi.n	800658c <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
 800656a:	7843      	ldrb	r3, [r0, #1]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d80d      	bhi.n	800658c <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
 8006570:	8841      	ldrh	r1, [r0, #2]
 8006572:	1f0b      	subs	r3, r1, #4
 8006574:	b29b      	uxth	r3, r3
 8006576:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 800657a:	4283      	cmp	r3, r0
 800657c:	d806      	bhi.n	800658c <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
 800657e:	88aa      	ldrh	r2, [r5, #4]
 8006580:	1f13      	subs	r3, r2, #4
 8006582:	b29b      	uxth	r3, r3
 8006584:	4283      	cmp	r3, r0
 8006586:	d801      	bhi.n	800658c <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
 8006588:	4291      	cmp	r1, r2
 800658a:	d26e      	bcs.n	800666a <bt_le_scan_start+0x10e>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
 800658c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
 8006590:	4620      	mov	r0, r4
 8006592:	b002      	add	sp, #8
 8006594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 8006598:	2107      	movs	r1, #7
 800659a:	483b      	ldr	r0, [pc, #236]	; (8006688 <bt_le_scan_start+0x12c>)
 800659c:	f7fe fc76 	bl	8004e8c <atomic_test_bit>
 80065a0:	b150      	cbz	r0, 80065b8 <bt_le_scan_start+0x5c>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 80065a2:	4610      	mov	r0, r2
 80065a4:	f7fe fe68 	bl	8005278 <set_le_scan_enable>
		if (err) {
 80065a8:	4604      	mov	r4, r0
 80065aa:	b128      	cbz	r0, 80065b8 <bt_le_scan_start+0x5c>
 80065ac:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80065b0:	4835      	ldr	r0, [pc, #212]	; (8006688 <bt_le_scan_start+0x12c>)
 80065b2:	f7fe fc78 	bl	8004ea6 <atomic_and>
		return err;
 80065b6:	e7eb      	b.n	8006590 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
 80065b8:	786b      	ldrb	r3, [r5, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d049      	beq.n	8006652 <bt_le_scan_start+0xf6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80065be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065c2:	4831      	ldr	r0, [pc, #196]	; (8006688 <bt_le_scan_start+0x12c>)
 80065c4:	f7fe fc51 	bl	8004e6a <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
 80065c8:	2207      	movs	r2, #7
 80065ca:	2100      	movs	r1, #0
 80065cc:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
 80065ce:	782e      	ldrb	r6, [r5, #0]
 80065d0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 80065d4:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
 80065d6:	f7fa f97f 	bl	80008d8 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
 80065da:	482c      	ldr	r0, [pc, #176]	; (800668c <bt_le_scan_start+0x130>)
	set_param.scan_type = scan_type;
 80065dc:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
 80065e6:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr.type;
 80065e8:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
 80065ea:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
 80065ee:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
 80065f2:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
 80065f6:	d10b      	bne.n	8006610 <bt_le_scan_start+0xb4>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 80065f8:	2105      	movs	r1, #5
 80065fa:	3070      	adds	r0, #112	; 0x70
 80065fc:	f7fe fc46 	bl	8004e8c <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
 8006600:	b930      	cbnz	r0, 8006610 <bt_le_scan_start+0xb4>
			err = le_set_private_addr();
 8006602:	f7fe fe27 	bl	8005254 <le_set_private_addr>
			if (err) {
 8006606:	4604      	mov	r4, r0
 8006608:	2800      	cmp	r0, #0
 800660a:	d1cf      	bne.n	80065ac <bt_le_scan_start+0x50>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
 800660c:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
 8006610:	2107      	movs	r1, #7
 8006612:	f242 000b 	movw	r0, #8203	; 0x200b
 8006616:	f7fe fcf5 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 800661a:	4604      	mov	r4, r0
 800661c:	b380      	cbz	r0, 8006680 <bt_le_scan_start+0x124>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 800661e:	2207      	movs	r2, #7
 8006620:	4669      	mov	r1, sp
 8006622:	3008      	adds	r0, #8
 8006624:	f00a ff74 	bl	8011510 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
 8006628:	4621      	mov	r1, r4
 800662a:	f242 000b 	movw	r0, #8203	; 0x200b
 800662e:	f7fe fd0d 	bl	800504c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 8006632:	2001      	movs	r0, #1
 8006634:	f7fe fe20 	bl	8005278 <set_le_scan_enable>
	if (err) {
 8006638:	4604      	mov	r4, r0
 800663a:	2800      	cmp	r0, #0
 800663c:	d1b6      	bne.n	80065ac <bt_le_scan_start+0x50>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
 800663e:	2e01      	cmp	r6, #1
 8006640:	d10d      	bne.n	800665e <bt_le_scan_start+0x102>
 8006642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006646:	4810      	ldr	r0, [pc, #64]	; (8006688 <bt_le_scan_start+0x12c>)
 8006648:	f7fe fc0f 	bl	8004e6a <atomic_or>
	scan_dev_found_cb = cb;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <bt_le_scan_start+0x134>)
 800664e:	601f      	str	r7, [r3, #0]
	return 0;
 8006650:	e79e      	b.n	8006590 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8006652:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8006656:	480c      	ldr	r0, [pc, #48]	; (8006688 <bt_le_scan_start+0x12c>)
 8006658:	f7fe fc25 	bl	8004ea6 <atomic_and>
 800665c:	e7b4      	b.n	80065c8 <bt_le_scan_start+0x6c>
 800665e:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8006662:	4809      	ldr	r0, [pc, #36]	; (8006688 <bt_le_scan_start+0x12c>)
 8006664:	f7fe fc1f 	bl	8004ea6 <atomic_and>
 8006668:	e7f0      	b.n	800664c <bt_le_scan_start+0xf0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 800666a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800666e:	4806      	ldr	r0, [pc, #24]	; (8006688 <bt_le_scan_start+0x12c>)
 8006670:	f7fe fbfb 	bl	8004e6a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 8006674:	f410 7280 	ands.w	r2, r0, #256	; 0x100
 8006678:	d08e      	beq.n	8006598 <bt_le_scan_start+0x3c>
		return -EALREADY;
 800667a:	f06f 0444 	mvn.w	r4, #68	; 0x44
 800667e:	e787      	b.n	8006590 <bt_le_scan_start+0x34>
		return -ENOBUFS;
 8006680:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8006684:	e792      	b.n	80065ac <bt_le_scan_start+0x50>
 8006686:	bf00      	nop
 8006688:	20005910 	.word	0x20005910
 800668c:	200058a0 	.word	0x200058a0
 8006690:	20000570 	.word	0x20000570

08006694 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
 8006694:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8006696:	f46f 7180 	mvn.w	r1, #256	; 0x100
 800669a:	4807      	ldr	r0, [pc, #28]	; (80066b8 <bt_le_scan_stop+0x24>)
 800669c:	f7fe fc03 	bl	8004ea6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80066a0:	05c3      	lsls	r3, r0, #23
 80066a2:	d506      	bpl.n	80066b2 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <bt_le_scan_stop+0x28>)
 80066a6:	2000      	movs	r0, #0
 80066a8:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
 80066aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
 80066ae:	f7fe bed7 	b.w	8005460 <bt_le_scan_update>
}
 80066b2:	f06f 0044 	mvn.w	r0, #68	; 0x44
 80066b6:	bd08      	pop	{r3, pc}
 80066b8:	20005910 	.word	0x20005910
 80066bc:	20000570 	.word	0x20000570

080066c0 <bt_buf_get_rx>:

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
		 "Invalid buffer type requested");

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
 80066c0:	2801      	cmp	r0, #1
{
 80066c2:	b538      	push	{r3, r4, r5, lr}
 80066c4:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
 80066c6:	bf0c      	ite	eq
 80066c8:	4807      	ldreq	r0, [pc, #28]	; (80066e8 <bt_buf_get_rx+0x28>)
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
 80066ca:	4808      	ldrne	r0, [pc, #32]	; (80066ec <bt_buf_get_rx+0x2c>)
 80066cc:	f00a fe44 	bl	8011358 <net_buf_alloc>
 80066d0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
 80066d2:	b130      	cbz	r0, 80066e2 <bt_buf_get_rx+0x22>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 80066d4:	2101      	movs	r1, #1
 80066d6:	f00a fe98 	bl	801140a <net_buf_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
 80066da:	4620      	mov	r0, r4
 80066dc:	f7fe fbbc 	bl	8004e58 <net_buf_user_data>
 80066e0:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
 80066e2:	4620      	mov	r0, r4
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	2000653c 	.word	0x2000653c
 80066ec:	2000649c 	.word	0x2000649c

080066f0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
 80066f0:	b510      	push	{r4, lr}
 80066f2:	4601      	mov	r1, r0
	__asm__ volatile(
 80066f4:	f04f 0310 	mov.w	r3, #16
 80066f8:	f3ef 8011 	mrs	r0, BASEPRI
 80066fc:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
 8006702:	2200      	movs	r2, #0
	buf = bt_dev.sent_cmd;
 8006704:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
 8006708:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 800670c:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
 8006710:	b924      	cbnz	r4, 800671c <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 8006712:	2001      	movs	r0, #1
}
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 8006718:	f7ff bfd2 	b.w	80066c0 <bt_buf_get_rx>
 800671c:	4620      	mov	r0, r4
 800671e:	f7fe fb9b 	bl	8004e58 <net_buf_user_data>
 8006722:	2101      	movs	r1, #1
 8006724:	7001      	strb	r1, [r0, #0]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8006726:	4620      	mov	r0, r4
		buf->len = 0;
 8006728:	81a2      	strh	r2, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 800672a:	f00a fe6e 	bl	801140a <net_buf_reserve>
}
 800672e:	4620      	mov	r0, r4
 8006730:	bd10      	pop	{r4, pc}
 8006732:	bf00      	nop
 8006734:	200058a0 	.word	0x200058a0

08006738 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
 800673c:	4e1d      	ldr	r6, [pc, #116]	; (80067b4 <bt_pub_key_gen+0x7c>)
 800673e:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8006742:	f003 0306 	and.w	r3, r3, #6
 8006746:	2b06      	cmp	r3, #6
{
 8006748:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
 800674a:	d130      	bne.n	80067ae <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
 800674c:	4d1a      	ldr	r5, [pc, #104]	; (80067b8 <bt_pub_key_gen+0x80>)
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
 8006752:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 8006754:	2110      	movs	r1, #16
 8006756:	f106 0070 	add.w	r0, r6, #112	; 0x70
 800675a:	f7fe fb86 	bl	8004e6a <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800675e:	f010 0810 	ands.w	r8, r0, #16
 8006762:	d003      	beq.n	800676c <bt_pub_key_gen+0x34>
		return 0;
 8006764:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
 8006766:	4620      	mov	r0, r4
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800676c:	f06f 0108 	mvn.w	r1, #8
 8006770:	f106 0070 	add.w	r0, r6, #112	; 0x70
 8006774:	f7fe fb97 	bl	8004ea6 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
 8006778:	4642      	mov	r2, r8
 800677a:	4641      	mov	r1, r8
 800677c:	f242 0025 	movw	r0, #8229	; 0x2025
 8006780:	f7fe fd02 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8006784:	4604      	mov	r4, r0
 8006786:	b140      	cbz	r0, 800679a <bt_pub_key_gen+0x62>
 8006788:	f06f 0110 	mvn.w	r1, #16
 800678c:	f106 0070 	add.w	r0, r6, #112	; 0x70
 8006790:	f7fe fb89 	bl	8004ea6 <atomic_and>
		pub_key_cb = NULL;
 8006794:	f8c5 8000 	str.w	r8, [r5]
		return err;
 8006798:	e7e5      	b.n	8006766 <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800679a:	682c      	ldr	r4, [r5, #0]
 800679c:	2c00      	cmp	r4, #0
 800679e:	d0e1      	beq.n	8006764 <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
 80067a0:	42bc      	cmp	r4, r7
 80067a2:	d002      	beq.n	80067aa <bt_pub_key_gen+0x72>
			cb->func(NULL);
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	2000      	movs	r0, #0
 80067a8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 80067aa:	6864      	ldr	r4, [r4, #4]
 80067ac:	e7f6      	b.n	800679c <bt_pub_key_gen+0x64>
		return -ENOTSUP;
 80067ae:	f06f 0422 	mvn.w	r4, #34	; 0x22
 80067b2:	e7d8      	b.n	8006766 <bt_pub_key_gen+0x2e>
 80067b4:	200058a0 	.word	0x200058a0
 80067b8:	20000500 	.word	0x20000500

080067bc <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
 80067bc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 80067be:	2103      	movs	r1, #3
 80067c0:	4803      	ldr	r0, [pc, #12]	; (80067d0 <bt_pub_key_get+0x14>)
 80067c2:	f7fe fb63 	bl	8004e8c <atomic_test_bit>
 80067c6:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
 80067c8:	4802      	ldr	r0, [pc, #8]	; (80067d4 <bt_pub_key_get+0x18>)
 80067ca:	bf08      	it	eq
 80067cc:	2000      	moveq	r0, #0
 80067ce:	bd08      	pop	{r3, pc}
 80067d0:	20005910 	.word	0x20005910
 80067d4:	200004c0 	.word	0x200004c0

080067d8 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 80067da:	4c1a      	ldr	r4, [pc, #104]	; (8006844 <bt_dh_key_gen+0x6c>)
 80067dc:	6823      	ldr	r3, [r4, #0]
{
 80067de:	4607      	mov	r7, r0
 80067e0:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 80067e2:	b113      	cbz	r3, 80067ea <bt_dh_key_gen+0x12>
		return -EBUSY;
 80067e4:	f06f 000f 	mvn.w	r0, #15
 80067e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 80067ea:	2104      	movs	r1, #4
 80067ec:	4816      	ldr	r0, [pc, #88]	; (8006848 <bt_dh_key_gen+0x70>)
 80067ee:	f7fe fb4d 	bl	8004e8c <atomic_test_bit>
 80067f2:	4606      	mov	r6, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d1f5      	bne.n	80067e4 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 80067f8:	2103      	movs	r1, #3
 80067fa:	4813      	ldr	r0, [pc, #76]	; (8006848 <bt_dh_key_gen+0x70>)
 80067fc:	f7fe fb46 	bl	8004e8c <atomic_test_bit>
 8006800:	b1e0      	cbz	r0, 800683c <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 8006802:	2140      	movs	r1, #64	; 0x40
 8006804:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
 8006808:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 800680a:	f7fe fbfb 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 800680e:	4605      	mov	r5, r0
 8006810:	b918      	cbnz	r0, 800681a <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
 8006812:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
 8006814:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8006818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
 800681a:	2140      	movs	r1, #64	; 0x40
 800681c:	3008      	adds	r0, #8
 800681e:	f00a fe71 	bl	8011504 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
 8006822:	2240      	movs	r2, #64	; 0x40
 8006824:	4639      	mov	r1, r7
 8006826:	f7fa f82b 	bl	8000880 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
 800682a:	4632      	mov	r2, r6
 800682c:	4629      	mov	r1, r5
 800682e:	f242 0026 	movw	r0, #8230	; 0x2026
 8006832:	f7fe fca9 	bl	8005188 <bt_hci_cmd_send_sync>
	if (err) {
 8006836:	b118      	cbz	r0, 8006840 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
 8006838:	6026      	str	r6, [r4, #0]
		return err;
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
 800683c:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	bf00      	nop
 8006844:	200004bc 	.word	0x200004bc
 8006848:	20005910 	.word	0x20005910

0800684c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
 800684c:	b530      	push	{r4, r5, lr}
 800684e:	2400      	movs	r4, #0
 8006850:	b08d      	sub	sp, #52	; 0x34

	for (i = 0; i < (sizeof(seed) / 8); i++) {
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 8006852:	aa02      	add	r2, sp, #8
 8006854:	2100      	movs	r1, #0
 8006856:	f242 0018 	movw	r0, #8216	; 0x2018
 800685a:	f7fe fc95 	bl	8005188 <bt_hci_cmd_send_sync>
		if (ret) {
 800685e:	4605      	mov	r5, r0
 8006860:	b9e8      	cbnz	r0, 800689e <prng_reseed.constprop.0+0x52>
			return ret;
		}

		rp = (void *)rsp->data;
 8006862:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	ab04      	add	r3, sp, #16
 8006868:	1918      	adds	r0, r3, r4
 800686a:	2208      	movs	r2, #8
 800686c:	3101      	adds	r1, #1
 800686e:	f7fa f807 	bl	8000880 <memcpy>
 8006872:	3408      	adds	r4, #8

		net_buf_unref(rsp);
 8006874:	9802      	ldr	r0, [sp, #8]
 8006876:	f00a fe25 	bl	80114c4 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 800687a:	2c20      	cmp	r4, #32
 800687c:	d1e9      	bne.n	8006852 <prng_reseed.constprop.0+0x6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 800687e:	f00b fb19 	bl	8011eb4 <_impl_k_uptime_get>
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
 8006882:	2308      	movs	r3, #8
	extra = k_uptime_get();
 8006884:	e9cd 0102 	strd	r0, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4622      	mov	r2, r4
 800688c:	446b      	add	r3, sp
 800688e:	a904      	add	r1, sp, #16
 8006890:	4804      	ldr	r0, [pc, #16]	; (80068a4 <prng_reseed.constprop.0+0x58>)
 8006892:	f7fc f80a 	bl	80028aa <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
 8006896:	2800      	cmp	r0, #0
 8006898:	bf08      	it	eq
 800689a:	f06f 0504 	mvneq.w	r5, #4
	}

	return 0;
}
 800689e:	4628      	mov	r0, r5
 80068a0:	b00d      	add	sp, #52	; 0x34
 80068a2:	bd30      	pop	{r4, r5, pc}
 80068a4:	200005e0 	.word	0x200005e0

080068a8 <prng_init>:

int prng_init(void)
{
 80068a8:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!(bt_dev.supported_commands[27] & BIT(7))) {
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <prng_init+0x48>)
 80068ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da16      	bge.n	80068e2 <prng_init+0x3a>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 80068b4:	aa01      	add	r2, sp, #4
 80068b6:	2100      	movs	r1, #0
 80068b8:	f242 0018 	movw	r0, #8216	; 0x2018
 80068bc:	f7fe fc64 	bl	8005188 <bt_hci_cmd_send_sync>
	if (ret) {
 80068c0:	b968      	cbnz	r0, 80068de <prng_init+0x36>
		return ret;
	}

	rp = (void *)rsp->data;
 80068c2:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
 80068c4:	480b      	ldr	r0, [pc, #44]	; (80068f4 <prng_init+0x4c>)
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	2208      	movs	r2, #8
 80068ca:	3101      	adds	r1, #1
 80068cc:	f7fb ffc8 	bl	8002860 <tc_hmac_prng_init>
 80068d0:	4604      	mov	r4, r0

	net_buf_unref(rsp);
 80068d2:	9801      	ldr	r0, [sp, #4]
 80068d4:	f00a fdf6 	bl	80114c4 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
 80068d8:	b134      	cbz	r4, 80068e8 <prng_init+0x40>
		BT_ERR("Failed to initialize PRNG");
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
 80068da:	f7ff ffb7 	bl	800684c <prng_reseed.constprop.0>
}
 80068de:	b002      	add	sp, #8
 80068e0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 80068e2:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80068e6:	e7fa      	b.n	80068de <prng_init+0x36>
		return -EIO;
 80068e8:	f06f 0004 	mvn.w	r0, #4
 80068ec:	e7f7      	b.n	80068de <prng_init+0x36>
 80068ee:	bf00      	nop
 80068f0:	200058a0 	.word	0x200058a0
 80068f4:	200005e0 	.word	0x200005e0

080068f8 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
 80068f8:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
 80068fa:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <bt_rand+0x2c>)
{
 80068fc:	4604      	mov	r4, r0
 80068fe:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
 8006900:	f7fb ffed 	bl	80028de <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d107      	bne.n	8006918 <bt_rand+0x20>
		ret = prng_reseed(&prng);
 8006908:	f7ff ffa0 	bl	800684c <prng_reseed.constprop.0>
		if (ret) {
 800690c:	b948      	cbnz	r0, 8006922 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
 800690e:	4a05      	ldr	r2, [pc, #20]	; (8006924 <bt_rand+0x2c>)
 8006910:	4629      	mov	r1, r5
 8006912:	4620      	mov	r0, r4
 8006914:	f7fb ffe3 	bl	80028de <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
 8006918:	2801      	cmp	r0, #1
 800691a:	bf0c      	ite	eq
 800691c:	2000      	moveq	r0, #0
 800691e:	f06f 0004 	mvnne.w	r0, #4
}
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200005e0 	.word	0x200005e0

08006928 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	b0ad      	sub	sp, #180	; 0xb4
 800692c:	460d      	mov	r5, r1
	struct tc_aes_key_sched_struct s;

	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	if (tc_aes128_set_encrypt_key(&s, key) == TC_CRYPTO_FAIL) {
 800692e:	4601      	mov	r1, r0
 8006930:	4668      	mov	r0, sp
{
 8006932:	4614      	mov	r4, r2
	if (tc_aes128_set_encrypt_key(&s, key) == TC_CRYPTO_FAIL) {
 8006934:	f7fb fb2c 	bl	8001f90 <tc_aes128_set_encrypt_key>
 8006938:	b918      	cbnz	r0, 8006942 <bt_encrypt_be+0x1a>
		return -EINVAL;
 800693a:	f06f 0015 	mvn.w	r0, #21
	}

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
 800693e:	b02d      	add	sp, #180	; 0xb4
 8006940:	bd30      	pop	{r4, r5, pc}
	if (tc_aes_encrypt(enc_data, plaintext, &s) == TC_CRYPTO_FAIL) {
 8006942:	466a      	mov	r2, sp
 8006944:	4629      	mov	r1, r5
 8006946:	4620      	mov	r0, r4
 8006948:	f7fb fb78 	bl	800203c <tc_aes_encrypt>
 800694c:	2800      	cmp	r0, #0
 800694e:	d0f4      	beq.n	800693a <bt_encrypt_be+0x12>
	return 0;
 8006950:	2000      	movs	r0, #0
 8006952:	e7f4      	b.n	800693e <bt_encrypt_be+0x16>

08006954 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
 8006954:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <notify_connected+0x1c>)
 8006958:	681c      	ldr	r4, [r3, #0]
{
 800695a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 800695c:	b904      	cbnz	r4, 8006960 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
 800695e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	b113      	cbz	r3, 800696a <notify_connected+0x16>
			cb->connected(conn, conn->err);
 8006964:	7a29      	ldrb	r1, [r5, #8]
 8006966:	4628      	mov	r0, r5
 8006968:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 800696a:	6924      	ldr	r4, [r4, #16]
 800696c:	e7f6      	b.n	800695c <notify_connected+0x8>
 800696e:	bf00      	nop
 8006970:	20000718 	.word	0x20000718

08006974 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8006974:	f3bf 8f5b 	dmb	ish
 8006978:	6800      	ldr	r0, [r0, #0]
 800697a:	f3bf 8f5b 	dmb	ish
}
 800697e:	4770      	bx	lr

08006980 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
 8006980:	8943      	ldrh	r3, [r0, #10]
{
 8006982:	b510      	push	{r4, lr}
 8006984:	4604      	mov	r4, r0
	if (!conn->rx_len) {
 8006986:	b12b      	cbz	r3, 8006994 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
 8006988:	68c0      	ldr	r0, [r0, #12]
 800698a:	f00a fd9b 	bl	80114c4 <net_buf_unref>
	conn->rx = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
 8006992:	8163      	strh	r3, [r4, #10]
 8006994:	bd10      	pop	{r4, pc}

08006996 <atomic_dec>:
}
 8006996:	f3bf 8f5b 	dmb	ish
 800699a:	e850 3f00 	ldrex	r3, [r0]
 800699e:	1e5a      	subs	r2, r3, #1
 80069a0:	e840 2100 	strex	r1, r2, [r0]
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d1f8      	bne.n	800699a <atomic_dec+0x4>
 80069a8:	f3bf 8f5b 	dmb	ish
 80069ac:	4618      	mov	r0, r3
 80069ae:	4770      	bx	lr

080069b0 <atomic_inc>:
}
 80069b0:	f3bf 8f5b 	dmb	ish
 80069b4:	e850 3f00 	ldrex	r3, [r0]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	e840 2100 	strex	r1, r2, [r0]
 80069be:	2900      	cmp	r1, #0
 80069c0:	d1f8      	bne.n	80069b4 <atomic_inc+0x4>
 80069c2:	f3bf 8f5b 	dmb	ish
 80069c6:	4618      	mov	r0, r3
 80069c8:	4770      	bx	lr
	...

080069cc <bt_conn_get_pkts>:
}
 80069cc:	4800      	ldr	r0, [pc, #0]	; (80069d0 <bt_conn_get_pkts+0x4>)
 80069ce:	4770      	bx	lr
 80069d0:	2000592c 	.word	0x2000592c

080069d4 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
 80069d4:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <notify_le_param_updated+0x24>)
{
 80069d6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
 80069d8:	681c      	ldr	r4, [r3, #0]
{
 80069da:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 80069dc:	b904      	cbnz	r4, 80069e0 <notify_le_param_updated+0xc>
}
 80069de:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
 80069e0:	68e6      	ldr	r6, [r4, #12]
 80069e2:	b13e      	cbz	r6, 80069f4 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
 80069e4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 80069e8:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 80069ec:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
 80069f4:	6924      	ldr	r4, [r4, #16]
 80069f6:	e7f1      	b.n	80069dc <notify_le_param_updated+0x8>
 80069f8:	20000718 	.word	0x20000718

080069fc <le_param_req>:
{
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
 8006a00:	4608      	mov	r0, r1
{
 8006a02:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
 8006a04:	f7fe fd0c 	bl	8005420 <bt_le_conn_params_valid>
 8006a08:	4605      	mov	r5, r0
 8006a0a:	b910      	cbnz	r0, 8006a12 <le_param_req+0x16>
		return false;
 8006a0c:	2500      	movs	r5, #0
}
 8006a0e:	4628      	mov	r0, r5
 8006a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <le_param_req+0x3c>)
 8006a14:	681c      	ldr	r4, [r3, #0]
 8006a16:	2c00      	cmp	r4, #0
 8006a18:	d0f9      	beq.n	8006a0e <le_param_req+0x12>
		if (!cb->le_param_req) {
 8006a1a:	68a3      	ldr	r3, [r4, #8]
 8006a1c:	b90b      	cbnz	r3, 8006a22 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
 8006a1e:	6924      	ldr	r4, [r4, #16]
 8006a20:	e7f9      	b.n	8006a16 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
 8006a22:	4631      	mov	r1, r6
 8006a24:	4638      	mov	r0, r7
 8006a26:	4798      	blx	r3
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0ef      	beq.n	8006a0c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7fe fcf7 	bl	8005420 <bt_le_conn_params_valid>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d1f3      	bne.n	8006a1e <le_param_req+0x22>
 8006a36:	e7e9      	b.n	8006a0c <le_param_req+0x10>
 8006a38:	20000718 	.word	0x20000718

08006a3c <bt_conn_cb_register>:
	cb->_next = callback_list;
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <bt_conn_cb_register+0xc>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	6102      	str	r2, [r0, #16]
	callback_list = cb;
 8006a42:	6018      	str	r0, [r3, #0]
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000718 	.word	0x20000718

08006a4c <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
 8006a4c:	2a01      	cmp	r2, #1
{
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	4605      	mov	r5, r0
 8006a52:	460c      	mov	r4, r1
	switch (flags) {
 8006a54:	d00f      	beq.n	8006a76 <bt_conn_recv+0x2a>
 8006a56:	2a02      	cmp	r2, #2
 8006a58:	d110      	bne.n	8006a7c <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
 8006a5a:	688b      	ldr	r3, [r1, #8]
 8006a5c:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
 8006a5e:	8943      	ldrh	r3, [r0, #10]
 8006a60:	b10b      	cbz	r3, 8006a66 <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
 8006a62:	f7ff ff8d 	bl	8006980 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	1af3      	subs	r3, r6, r3
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
 8006a70:	b333      	cbz	r3, 8006ac0 <bt_conn_recv+0x74>
			conn->rx = buf;
 8006a72:	60ec      	str	r4, [r5, #12]
			return;
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
 8006a76:	8943      	ldrh	r3, [r0, #10]
 8006a78:	b93b      	cbnz	r3, 8006a8a <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
 8006a7a:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
 8006a7c:	f7ff ff80 	bl	8006980 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
 8006a80:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
 8006a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
 8006a86:	f00a bd1d 	b.w	80114c4 <net_buf_unref>
		if (buf->len > conn->rx_len) {
 8006a8a:	898e      	ldrh	r6, [r1, #12]
 8006a8c:	42b3      	cmp	r3, r6
 8006a8e:	d3f4      	bcc.n	8006a7a <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
 8006a90:	68c0      	ldr	r0, [r0, #12]
 8006a92:	3008      	adds	r0, #8
 8006a94:	f00a fddb 	bl	801164e <net_buf_simple_tailroom>
 8006a98:	4286      	cmp	r6, r0
 8006a9a:	d8ee      	bhi.n	8006a7a <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
 8006a9c:	68e8      	ldr	r0, [r5, #12]
 8006a9e:	89a2      	ldrh	r2, [r4, #12]
 8006aa0:	68a1      	ldr	r1, [r4, #8]
 8006aa2:	3008      	adds	r0, #8
 8006aa4:	f00a fd34 	bl	8011510 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
 8006aa8:	896b      	ldrh	r3, [r5, #10]
 8006aaa:	89a2      	ldrh	r2, [r4, #12]
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f00a fd07 	bl	80114c4 <net_buf_unref>
		if (conn->rx_len) {
 8006ab6:	896b      	ldrh	r3, [r5, #10]
 8006ab8:	b973      	cbnz	r3, 8006ad8 <bt_conn_recv+0x8c>
		buf = conn->rx;
 8006aba:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
 8006abc:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
 8006abe:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
 8006ac0:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
 8006ac2:	89a2      	ldrh	r2, [r4, #12]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d1d9      	bne.n	8006a80 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
 8006acc:	4621      	mov	r1, r4
 8006ace:	4628      	mov	r0, r5
}
 8006ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
 8006ad4:	f000 bd25 	b.w	8007522 <bt_l2cap_recv>
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}

08006ada <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
 8006ada:	b570      	push	{r4, r5, r6, lr}
 8006adc:	4605      	mov	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
 8006ade:	7988      	ldrb	r0, [r1, #6]
{
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
 8006ae4:	f00a fc1c 	bl	8011320 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 8006ae8:	8ac3      	ldrh	r3, [r0, #22]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d805      	bhi.n	8006afa <bt_conn_send_cb+0x20>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
 8006aee:	4620      	mov	r0, r4
 8006af0:	f00a fce8 	bl	80114c4 <net_buf_unref>
		return -EINVAL;
 8006af4:	f06f 0015 	mvn.w	r0, #21
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (conn->state != BT_CONN_CONNECTED) {
 8006afa:	7a6b      	ldrb	r3, [r5, #9]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d005      	beq.n	8006b0c <bt_conn_send_cb+0x32>
		BT_ERR("not connected!");
		net_buf_unref(buf);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f00a fcdf 	bl	80114c4 <net_buf_unref>
		return -ENOTCONN;
 8006b06:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 8006b0c:	89e3      	ldrh	r3, [r4, #14]
 8006b0e:	4423      	add	r3, r4
 8006b10:	3313      	adds	r3, #19
 8006b12:	f023 0303 	bic.w	r3, r3, #3
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
 8006b16:	f105 0028 	add.w	r0, r5, #40	; 0x28
	conn_tx(buf)->cb = cb;
 8006b1a:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	f00a fcc3 	bl	80114a8 <net_buf_put>
	return 0;
 8006b22:	2000      	movs	r0, #0
}
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b28 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
 8006b2c:	4d0d      	ldr	r5, [pc, #52]	; (8006b64 <bt_conn_notify_tx+0x3c>)
 8006b2e:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
 8006b30:	f100 0718 	add.w	r7, r0, #24
 8006b34:	f04f 0800 	mov.w	r8, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f00a fed7 	bl	80118ee <k_queue_get>
 8006b40:	4604      	mov	r4, r0
 8006b42:	b908      	cbnz	r0, 8006b48 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
 8006b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	b10b      	cbz	r3, 8006b50 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4798      	blx	r3
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006b54:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
 8006b56:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
 8006b5a:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1eb      	bne.n	8006b38 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
 8006b60:	606c      	str	r4, [r5, #4]
 8006b62:	e7e7      	b.n	8006b34 <bt_conn_notify_tx+0xc>
 8006b64:	200007ec 	.word	0x200007ec

08006b68 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8006b70:	4840      	ldr	r0, [pc, #256]	; (8006c74 <send_frag+0x10c>)
 8006b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b76:	4698      	mov	r8, r3
 8006b78:	4614      	mov	r4, r2
 8006b7a:	f00b f969 	bl	8011e50 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
 8006b7e:	4b3e      	ldr	r3, [pc, #248]	; (8006c78 <send_frag+0x110>)
 8006b80:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006b84:	f7ff fef6 	bl	8006974 <atomic_get>
 8006b88:	b130      	cbz	r0, 8006b98 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
 8006b8a:	7a5a      	ldrb	r2, [r3, #9]
 8006b8c:	3a03      	subs	r2, #3
 8006b8e:	2a01      	cmp	r2, #1
 8006b90:	d802      	bhi.n	8006b98 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ffc8 	bl	8006b28 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
 8006b98:	7a6b      	ldrb	r3, [r5, #9]
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d14e      	bne.n	8006c3c <send_frag+0xd4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	f107 0008 	add.w	r0, r7, #8
 8006ba4:	f00a fcf4 	bl	8011590 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 8006ba8:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
 8006baa:	4e34      	ldr	r6, [pc, #208]	; (8006c7c <send_frag+0x114>)
 8006bac:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8006bb0:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8006bb2:	89bb      	ldrh	r3, [r7, #12]
 8006bb4:	3b04      	subs	r3, #4
 8006bb6:	8043      	strh	r3, [r0, #2]
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	443b      	add	r3, r7
 8006bbc:	3313      	adds	r3, #19
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	2102      	movs	r1, #2

	cb = conn_tx(buf)->cb;
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	7019      	strb	r1, [r3, #0]
 8006bc8:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
 8006bca:	6871      	ldr	r1, [r6, #4]
	list->head = node->next;
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
 8006bd0:	428c      	cmp	r4, r1
		list->tail = list->head;
 8006bd2:	bf08      	it	eq
 8006bd4:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
 8006bd6:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
 8006bd8:	f04f 0310 	mov.w	r3, #16
 8006bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8006be0:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006be8:	696b      	ldr	r3, [r5, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d134      	bne.n	8006c58 <send_frag+0xf0>
		list->tail = node;
 8006bee:	616c      	str	r4, [r5, #20]
		list->head = node;
 8006bf0:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006bf2:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f7ff fac2 	bl	8006180 <bt_send>
	if (err) {
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d036      	beq.n	8006c6e <send_frag+0x106>
	__asm__ volatile(
 8006c00:	f04f 0310 	mov.w	r3, #16
 8006c04:	f3ef 8011 	mrs	r0, BASEPRI
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	692b      	ldr	r3, [r5, #16]
	sys_snode_t *prev = NULL;
 8006c0e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8006c10:	b153      	cbz	r3, 8006c28 <send_frag+0xc0>
		if (test == node) {
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d128      	bne.n	8006c68 <send_frag+0x100>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	6969      	ldr	r1, [r5, #20]
	if (!prev_node) {
 8006c1a:	bb02      	cbnz	r2, 8006c5e <send_frag+0xf6>
		if (list->tail == node) {
 8006c1c:	428c      	cmp	r4, r1
		list->head = node->next;
 8006c1e:	612b      	str	r3, [r5, #16]
		if (list->tail == node) {
 8006c20:	d100      	bne.n	8006c24 <send_frag+0xbc>
			list->tail = list->head;
 8006c22:	616b      	str	r3, [r5, #20]
	node->next = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006c28:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6063      	str	r3, [r4, #4]
	node->next = list->head;
 8006c30:	6833      	ldr	r3, [r6, #0]
 8006c32:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006c34:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 8006c36:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
 8006c38:	b903      	cbnz	r3, 8006c3c <send_frag+0xd4>
		list->tail = list->head;
 8006c3a:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8006c3c:	480d      	ldr	r0, [pc, #52]	; (8006c74 <send_frag+0x10c>)
 8006c3e:	f00b f8c5 	bl	8011dcc <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
 8006c42:	f1b8 0f00 	cmp.w	r8, #0
 8006c46:	d004      	beq.n	8006c52 <send_frag+0xea>
		net_buf_unref(buf);
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f00a fc3b 	bl	80114c4 <net_buf_unref>
	}
	return false;
 8006c4e:	f04f 0800 	mov.w	r8, #0
}
 8006c52:	4640      	mov	r0, r8
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
 8006c58:	601c      	str	r4, [r3, #0]
		list->tail = node;
 8006c5a:	616c      	str	r4, [r5, #20]
 8006c5c:	e7c9      	b.n	8006bf2 <send_frag+0x8a>
		if (list->tail == node) {
 8006c5e:	428c      	cmp	r4, r1
		prev_node->next = node->next;
 8006c60:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
 8006c62:	bf08      	it	eq
 8006c64:	616a      	streq	r2, [r5, #20]
 8006c66:	e7dd      	b.n	8006c24 <send_frag+0xbc>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8006c68:	461a      	mov	r2, r3
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	e7d0      	b.n	8006c10 <send_frag+0xa8>
	return true;
 8006c6e:	f04f 0801 	mov.w	r8, #1
 8006c72:	e7ee      	b.n	8006c52 <send_frag+0xea>
 8006c74:	2000592c 	.word	0x2000592c
 8006c78:	20000754 	.word	0x20000754
 8006c7c:	200007ec 	.word	0x200007ec

08006c80 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 8006c84:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f00a fba4 	bl	80113d8 <net_buf_get>
 8006c90:	b958      	cbnz	r0, 8006caa <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff ff48 	bl	8006b28 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fe71 	bl	8006980 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
 8006c9e:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8006ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
 8006ca6:	f7ff be76 	b.w	8006996 <atomic_dec>
		net_buf_unref(buf);
 8006caa:	f00a fc0b 	bl	80114c4 <net_buf_unref>
 8006cae:	e7eb      	b.n	8006c88 <conn_cleanup+0x8>

08006cb0 <bt_conn_prepare_events>:
{
 8006cb0:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <bt_conn_prepare_events+0x80>)
 8006cb4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 8006cb6:	2101      	movs	r1, #1
	conn_change.signaled = 0;
 8006cb8:	609a      	str	r2, [r3, #8]
{
 8006cba:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 8006cbc:	f00b fe2c 	bl	8012918 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <bt_conn_prepare_events+0x84>)
 8006cc2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006cc6:	f7ff fe55 	bl	8006974 <atomic_get>
 8006cca:	4619      	mov	r1, r3
 8006ccc:	b908      	cbnz	r0, 8006cd2 <bt_conn_prepare_events+0x22>
			continue;
 8006cce:	2001      	movs	r0, #1
 8006cd0:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
 8006cd2:	7a5a      	ldrb	r2, [r3, #9]
 8006cd4:	b99a      	cbnz	r2, 8006cfe <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8006cd6:	f3bf 8f5b 	dmb	ish
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	e852 0f00 	ldrex	r0, [r2]
 8006ce0:	f020 0440 	bic.w	r4, r0, #64	; 0x40
 8006ce4:	e842 4e00 	strex	lr, r4, [r2]
 8006ce8:	f1be 0f00 	cmp.w	lr, #0
 8006cec:	d1f6      	bne.n	8006cdc <bt_conn_prepare_events+0x2c>
 8006cee:	f3bf 8f5b 	dmb	ish
 8006cf2:	0642      	lsls	r2, r0, #25
 8006cf4:	d503      	bpl.n	8006cfe <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff ffc2 	bl	8006c80 <conn_cleanup>
 8006cfc:	e7e7      	b.n	8006cce <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
 8006cfe:	7a4c      	ldrb	r4, [r1, #9]
 8006d00:	2c03      	cmp	r4, #3
 8006d02:	d1e4      	bne.n	8006cce <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
 8006d04:	f105 0014 	add.w	r0, r5, #20
 8006d08:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <bt_conn_prepare_events+0x88>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2104      	movs	r1, #4
 8006d0e:	f00b fe03 	bl	8012918 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
 8006d18:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <bt_conn_prepare_events+0x8c>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2104      	movs	r1, #4
 8006d22:	f00b fdf9 	bl	8012918 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
 8006d26:	2302      	movs	r3, #2
 8006d28:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8006d2c:	4620      	mov	r0, r4
}
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	200059e8 	.word	0x200059e8
 8006d34:	20000754 	.word	0x20000754
 8006d38:	2000076c 	.word	0x2000076c
 8006d3c:	2000077c 	.word	0x2000077c

08006d40 <bt_conn_add_le>:
{
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006d42:	4c17      	ldr	r4, [pc, #92]	; (8006da0 <bt_conn_add_le+0x60>)
 8006d44:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
 8006d48:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff fe12 	bl	8006974 <atomic_get>
 8006d50:	4605      	mov	r5, r0
 8006d52:	b108      	cbz	r0, 8006d58 <bt_conn_add_le+0x18>
		return NULL;
 8006d54:	2000      	movs	r0, #0
 8006d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
 8006d58:	4601      	mov	r1, r0
 8006d5a:	2298      	movs	r2, #152	; 0x98
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7f9 fdbb 	bl	80008d8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8006d62:	f3bf 8f5b 	dmb	ish
 8006d66:	2301      	movs	r3, #1
 8006d68:	e856 2f00 	ldrex	r2, [r6]
 8006d6c:	e846 3100 	strex	r1, r3, [r6]
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d1f9      	bne.n	8006d68 <bt_conn_add_le+0x28>
 8006d74:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
 8006d78:	2207      	movs	r2, #7
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8006d80:	f7f9 fd7e 	bl	8000880 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
 8006d84:	2318      	movs	r3, #24
 8006d86:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 8006d8a:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
 8006d8c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
 8006d90:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 8006d92:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
 8006d96:	4903      	ldr	r1, [pc, #12]	; (8006da4 <bt_conn_add_le+0x64>)
 8006d98:	f00b fb40 	bl	801241c <k_delayed_work_init>
			conn = &conns[i];
 8006d9c:	4620      	mov	r0, r4
}
 8006d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da0:	20000754 	.word	0x20000754
 8006da4:	080070dd 	.word	0x080070dd

08006da8 <bt_conn_set_state>:
{
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
 8006daa:	7a45      	ldrb	r5, [r0, #9]
 8006dac:	428d      	cmp	r5, r1
{
 8006dae:	4604      	mov	r4, r0
	if (conn->state == state) {
 8006db0:	d07e      	beq.n	8006eb0 <bt_conn_set_state+0x108>
	conn->state = state;
 8006db2:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
 8006db4:	b915      	cbnz	r5, 8006dbc <bt_conn_set_state+0x14>
	atomic_inc(&conn->ref);
 8006db6:	3040      	adds	r0, #64	; 0x40
 8006db8:	f7ff fdfa 	bl	80069b0 <atomic_inc>
	switch (conn->state) {
 8006dbc:	7a63      	ldrb	r3, [r4, #9]
 8006dbe:	b1db      	cbz	r3, 8006df8 <bt_conn_set_state+0x50>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d175      	bne.n	8006eb0 <bt_conn_set_state+0x108>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8006dc4:	78a3      	ldrb	r3, [r4, #2]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d072      	beq.n	8006eb0 <bt_conn_set_state+0x108>
		k_fifo_init(&conn->tx_queue);
 8006dca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006dce:	f00a fd23 	bl	8011818 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
 8006dd2:	f104 0018 	add.w	r0, r4, #24
 8006dd6:	f00a fd1f 	bl	8011818 <k_queue_init>
		k_poll_signal(&conn_change, 0);
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4835      	ldr	r0, [pc, #212]	; (8006eb4 <bt_conn_set_state+0x10c>)
 8006dde:	f00b fe65 	bl	8012aac <k_poll_signal>
	list->head = NULL;
 8006de2:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
 8006de4:	4620      	mov	r0, r4
 8006de6:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
 8006de8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006dea:	f000 fad5 	bl	8007398 <bt_l2cap_connected>
		notify_connected(conn);
 8006dee:	4620      	mov	r0, r4
}
 8006df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
 8006df4:	f7ff bdae 	b.w	8006954 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8006df8:	78a3      	ldrb	r3, [r4, #2]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d105      	bne.n	8006e0a <bt_conn_set_state+0x62>
	atomic_dec(&conn->ref);
 8006dfe:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8006e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
 8006e06:	f7ff bdc6 	b.w	8006996 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
 8006e0a:	1eeb      	subs	r3, r5, #3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d843      	bhi.n	8006e98 <bt_conn_set_state+0xf0>
			bt_l2cap_disconnected(conn);
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fafb 	bl	800740c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
 8006e16:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <bt_conn_set_state+0x110>)
 8006e18:	681d      	ldr	r5, [r3, #0]
 8006e1a:	b9ed      	cbnz	r5, 8006e58 <bt_conn_set_state+0xb0>
	node->next = list->head;
 8006e1c:	4e27      	ldr	r6, [pc, #156]	; (8006ebc <bt_conn_set_state+0x114>)
 8006e1e:	4f28      	ldr	r7, [pc, #160]	; (8006ec0 <bt_conn_set_state+0x118>)
	__asm__ volatile(
 8006e20:	f04f 0310 	mov.w	r3, #16
 8006e24:	f3ef 8111 	mrs	r1, BASEPRI
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	6923      	ldr	r3, [r4, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8006e2e:	b12b      	cbz	r3, 8006e3c <bt_conn_set_state+0x94>
	if (list->tail == node) {
 8006e30:	6960      	ldr	r0, [r4, #20]
	list->head = node->next;
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	6122      	str	r2, [r4, #16]
	if (list->tail == node) {
 8006e36:	4283      	cmp	r3, r0
		list->tail = list->head;
 8006e38:	bf08      	it	eq
 8006e3a:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006e3c:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
 8006e40:	b18b      	cbz	r3, 8006e66 <bt_conn_set_state+0xbe>
	node->next = list->head;
 8006e42:	6832      	ldr	r2, [r6, #0]
 8006e44:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
 8006e46:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
 8006e48:	605d      	str	r5, [r3, #4]
	list->head = node;
 8006e4a:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
 8006e4c:	b902      	cbnz	r2, 8006e50 <bt_conn_set_state+0xa8>
		list->tail = list->head;
 8006e4e:	6073      	str	r3, [r6, #4]
 8006e50:	4638      	mov	r0, r7
 8006e52:	f00a ffbb 	bl	8011dcc <_impl_k_sem_give>
 8006e56:	e7e3      	b.n	8006e20 <bt_conn_set_state+0x78>
		if (cb->disconnected) {
 8006e58:	686b      	ldr	r3, [r5, #4]
 8006e5a:	b113      	cbz	r3, 8006e62 <bt_conn_set_state+0xba>
			cb->disconnected(conn, conn->err);
 8006e5c:	7a21      	ldrb	r1, [r4, #8]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 8006e62:	692d      	ldr	r5, [r5, #16]
 8006e64:	e7d9      	b.n	8006e1a <bt_conn_set_state+0x72>
			if (conn->type == BT_CONN_TYPE_LE) {
 8006e66:	78a3      	ldrb	r3, [r4, #2]
 8006e68:	b91b      	cbnz	r3, 8006e72 <bt_conn_set_state+0xca>
				k_delayed_work_cancel(&conn->le.update_work);
 8006e6a:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8006e6e:	f00b faf3 	bl	8012458 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8006e72:	f3bf 8f5b 	dmb	ish
 8006e76:	3404      	adds	r4, #4
 8006e78:	e854 3f00 	ldrex	r3, [r4]
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e80:	e844 3200 	strex	r2, r3, [r4]
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d1f7      	bne.n	8006e78 <bt_conn_set_state+0xd0>
 8006e88:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4809      	ldr	r0, [pc, #36]	; (8006eb4 <bt_conn_set_state+0x10c>)
}
 8006e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
 8006e94:	f00b be0a 	b.w	8012aac <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
 8006e98:	2d02      	cmp	r5, #2
 8006e9a:	d103      	bne.n	8006ea4 <bt_conn_set_state+0xfc>
			notify_connected(conn);
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff fd59 	bl	8006954 <notify_connected>
 8006ea2:	e7ac      	b.n	8006dfe <bt_conn_set_state+0x56>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
 8006ea4:	2d01      	cmp	r5, #1
 8006ea6:	d103      	bne.n	8006eb0 <bt_conn_set_state+0x108>
			if (conn->err) {
 8006ea8:	7a23      	ldrb	r3, [r4, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0a7      	beq.n	8006dfe <bt_conn_set_state+0x56>
 8006eae:	e7f5      	b.n	8006e9c <bt_conn_set_state+0xf4>
 8006eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200059e8 	.word	0x200059e8
 8006eb8:	20000718 	.word	0x20000718
 8006ebc:	200007ec 	.word	0x200007ec
 8006ec0:	2000592c 	.word	0x2000592c

08006ec4 <bt_conn_lookup_handle>:
{
 8006ec4:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006ec6:	4c0b      	ldr	r4, [pc, #44]	; (8006ef4 <bt_conn_lookup_handle+0x30>)
{
 8006ec8:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
 8006eca:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006ece:	f7ff fd51 	bl	8006974 <atomic_get>
 8006ed2:	b168      	cbz	r0, 8006ef0 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
 8006ed4:	7a63      	ldrb	r3, [r4, #9]
 8006ed6:	3b03      	subs	r3, #3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d808      	bhi.n	8006eee <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
 8006edc:	8823      	ldrh	r3, [r4, #0]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d105      	bne.n	8006eee <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
 8006ee2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006ee6:	f7ff fd63 	bl	80069b0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
 8006eea:	4620      	mov	r0, r4
 8006eec:	bd10      	pop	{r4, pc}
	return NULL;
 8006eee:	2000      	movs	r0, #0
}
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000754 	.word	0x20000754

08006ef8 <bt_conn_addr_le_cmp>:
{
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	460d      	mov	r5, r1
 8006efc:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
 8006efe:	f100 0144 	add.w	r1, r0, #68	; 0x44
 8006f02:	2207      	movs	r2, #7
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7f9 fca6 	bl	8000856 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
 8006f0a:	b160      	cbz	r0, 8006f26 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
 8006f0c:	78e3      	ldrb	r3, [r4, #3]
 8006f0e:	2207      	movs	r2, #7
 8006f10:	b933      	cbnz	r3, 8006f20 <bt_conn_addr_le_cmp+0x28>
 8006f12:	f104 0152 	add.w	r1, r4, #82	; 0x52
 8006f16:	4628      	mov	r0, r5
}
 8006f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f1c:	f7f9 bc9b 	b.w	8000856 <memcmp>
 8006f20:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 8006f24:	e7f7      	b.n	8006f16 <bt_conn_addr_le_cmp+0x1e>
 8006f26:	bd38      	pop	{r3, r4, r5, pc}

08006f28 <bt_conn_lookup_addr_le>:
{
 8006f28:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006f2a:	4c0b      	ldr	r4, [pc, #44]	; (8006f58 <bt_conn_lookup_addr_le+0x30>)
{
 8006f2c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
 8006f2e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006f32:	f7ff fd1f 	bl	8006974 <atomic_get>
 8006f36:	b908      	cbnz	r0, 8006f3c <bt_conn_lookup_addr_le+0x14>
	return NULL;
 8006f38:	2000      	movs	r0, #0
 8006f3a:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
 8006f3c:	78a3      	ldrb	r3, [r4, #2]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1fa      	bne.n	8006f38 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff ffd8 	bl	8006ef8 <bt_conn_addr_le_cmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1f5      	bne.n	8006f38 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
 8006f4c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006f50:	f7ff fd2e 	bl	80069b0 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006f54:	4620      	mov	r0, r4
}
 8006f56:	bd10      	pop	{r4, pc}
 8006f58:	20000754 	.word	0x20000754

08006f5c <bt_conn_lookup_state_le>:
{
 8006f5c:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006f5e:	4c0e      	ldr	r4, [pc, #56]	; (8006f98 <bt_conn_lookup_state_le+0x3c>)
{
 8006f60:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
 8006f62:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
 8006f66:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
 8006f68:	f7ff fd04 	bl	8006974 <atomic_get>
 8006f6c:	b908      	cbnz	r0, 8006f72 <bt_conn_lookup_state_le+0x16>
	return NULL;
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
 8006f72:	78a2      	ldrb	r2, [r4, #2]
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	d1fa      	bne.n	8006f6e <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006f78:	b93b      	cbnz	r3, 8006f8a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
 8006f7a:	7a63      	ldrb	r3, [r4, #9]
 8006f7c:	42ab      	cmp	r3, r5
 8006f7e:	d1f6      	bne.n	8006f6e <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
 8006f80:	4806      	ldr	r0, [pc, #24]	; (8006f9c <bt_conn_lookup_state_le+0x40>)
 8006f82:	f7ff fd15 	bl	80069b0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
 8006f86:	4804      	ldr	r0, [pc, #16]	; (8006f98 <bt_conn_lookup_state_le+0x3c>)
}
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f7ff ffb3 	bl	8006ef8 <bt_conn_addr_le_cmp>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1eb      	bne.n	8006f6e <bt_conn_lookup_state_le+0x12>
 8006f96:	e7f0      	b.n	8006f7a <bt_conn_lookup_state_le+0x1e>
 8006f98:	20000754 	.word	0x20000754
 8006f9c:	20000794 	.word	0x20000794

08006fa0 <bt_conn_ref>:
{
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
 8006fa4:	3040      	adds	r0, #64	; 0x40
 8006fa6:	f7ff fd03 	bl	80069b0 <atomic_inc>
}
 8006faa:	4620      	mov	r0, r4
 8006fac:	bd10      	pop	{r4, pc}

08006fae <bt_conn_unref>:
	atomic_dec(&conn->ref);
 8006fae:	3040      	adds	r0, #64	; 0x40
 8006fb0:	f7ff bcf1 	b.w	8006996 <atomic_dec>

08006fb4 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
 8006fb4:	7a43      	ldrb	r3, [r0, #9]
 8006fb6:	3b01      	subs	r3, #1
{
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	4605      	mov	r5, r0
 8006fbc:	460e      	mov	r6, r1
	switch (conn->state) {
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d803      	bhi.n	8006fca <bt_conn_disconnect+0x16>
 8006fc2:	e8df f003 	tbb	[pc, r3]
 8006fc6:	0d06      	.short	0x0d06
 8006fc8:	0d0f      	.short	0x0d0f
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
 8006fca:	f06f 0438 	mvn.w	r4, #56	; 0x38
	}
}
 8006fce:	4620      	mov	r0, r4
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
 8006fd2:	7229      	strb	r1, [r5, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	f7ff fee7 	bl	8006da8 <bt_conn_set_state>
		bt_le_scan_update(false);
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f7fe fa40 	bl	8005460 <bt_le_scan_update>
		return 0;
 8006fe0:	2400      	movs	r4, #0
 8006fe2:	e7f4      	b.n	8006fce <bt_conn_disconnect+0x1a>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	f240 4006 	movw	r0, #1030	; 0x406
 8006fea:	f7fe f80b 	bl	8005004 <bt_hci_cmd_create>
	if (!buf) {
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b198      	cbz	r0, 800701a <bt_conn_disconnect+0x66>
	disconn = net_buf_add(buf, sizeof(*disconn));
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	3008      	adds	r0, #8
 8006ff6:	f00a fa85 	bl	8011504 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
 8006ffa:	882b      	ldrh	r3, [r5, #0]
 8006ffc:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
 8006ffe:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
 8007000:	4621      	mov	r1, r4
 8007002:	f240 4006 	movw	r0, #1030	; 0x406
 8007006:	f7fe f821 	bl	800504c <bt_hci_cmd_send>
	if (err) {
 800700a:	4604      	mov	r4, r0
 800700c:	2800      	cmp	r0, #0
 800700e:	d1de      	bne.n	8006fce <bt_conn_disconnect+0x1a>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
 8007010:	2104      	movs	r1, #4
 8007012:	4628      	mov	r0, r5
 8007014:	f7ff fec8 	bl	8006da8 <bt_conn_set_state>
 8007018:	e7d9      	b.n	8006fce <bt_conn_disconnect+0x1a>
		return -ENOBUFS;
 800701a:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800701e:	e7d6      	b.n	8006fce <bt_conn_disconnect+0x1a>

08007020 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	4607      	mov	r7, r0
 8007024:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
 8007026:	f242 0013 	movw	r0, #8211	; 0x2013
 800702a:	210e      	movs	r1, #14
 800702c:	f7fd ffea 	bl	8005004 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
 8007030:	4606      	mov	r6, r0
 8007032:	b1c8      	cbz	r0, 8007068 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
 8007034:	210e      	movs	r1, #14
 8007036:	3008      	adds	r0, #8
 8007038:	f00a fa64 	bl	8011504 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
 800703c:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
 800703e:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
 8007040:	220e      	movs	r2, #14
 8007042:	f7f9 fc49 	bl	80008d8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
 8007046:	883b      	ldrh	r3, [r7, #0]
 8007048:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
 800704a:	882b      	ldrh	r3, [r5, #0]
 800704c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
 800704e:	886b      	ldrh	r3, [r5, #2]
 8007050:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
 8007052:	88ab      	ldrh	r3, [r5, #4]
 8007054:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
 8007056:	88eb      	ldrh	r3, [r5, #6]
 8007058:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
 800705a:	4631      	mov	r1, r6
 800705c:	f242 0013 	movw	r0, #8211	; 0x2013
}
 8007060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
 8007064:	f7fd bff2 	b.w	800504c <bt_hci_cmd_send>
}
 8007068:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007070 <bt_conn_le_param_update>:
{
 8007070:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
 8007072:	880a      	ldrh	r2, [r1, #0]
 8007074:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8007078:	429a      	cmp	r2, r3
{
 800707a:	4604      	mov	r4, r0
 800707c:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
 800707e:	d80c      	bhi.n	800709a <bt_conn_le_param_update+0x2a>
 8007080:	884a      	ldrh	r2, [r1, #2]
 8007082:	429a      	cmp	r2, r3
 8007084:	d309      	bcc.n	800709a <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
 8007086:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800708a:	888b      	ldrh	r3, [r1, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d104      	bne.n	800709a <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
 8007090:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8007094:	88cb      	ldrh	r3, [r1, #6]
 8007096:	429a      	cmp	r2, r3
 8007098:	d01a      	beq.n	80070d0 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
 800709a:	f104 0070 	add.w	r0, r4, #112	; 0x70
 800709e:	f00b f9db 	bl	8012458 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <bt_conn_le_param_update+0x68>)
 80070a4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80070a8:	079a      	lsls	r2, r3, #30
 80070aa:	d503      	bpl.n	80070b4 <bt_conn_le_param_update+0x44>
 80070ac:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80070b0:	079b      	lsls	r3, r3, #30
 80070b2:	d401      	bmi.n	80070b8 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
 80070b4:	78e3      	ldrb	r3, [r4, #3]
 80070b6:	b92b      	cbnz	r3, 80070c4 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
 80070b8:	4629      	mov	r1, r5
 80070ba:	4620      	mov	r0, r4
}
 80070bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
 80070c0:	f7ff bfae 	b.w	8007020 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
 80070c4:	4629      	mov	r1, r5
 80070c6:	4620      	mov	r0, r4
}
 80070c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
 80070cc:	f000 ba46 	b.w	800755c <bt_l2cap_update_conn_param>
}
 80070d0:	f06f 0044 	mvn.w	r0, #68	; 0x44
 80070d4:	bd38      	pop	{r3, r4, r5, pc}
 80070d6:	bf00      	nop
 80070d8:	200058a0 	.word	0x200058a0

080070dc <le_conn_update>:
{
 80070dc:	b507      	push	{r0, r1, r2, lr}
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
 80070de:	f830 3c14 	ldrh.w	r3, [r0, #-20]
 80070e2:	f8ad 3000 	strh.w	r3, [sp]
 80070e6:	f830 3c12 	ldrh.w	r3, [r0, #-18]
 80070ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80070ee:	f830 3c10 	ldrh.w	r3, [r0, #-16]
 80070f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_conn_le_param_update(conn, param);
 80070f6:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
 80070f8:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
 80070fc:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
 8007100:	3870      	subs	r0, #112	; 0x70
 8007102:	f7ff ffb5 	bl	8007070 <bt_conn_le_param_update>
}
 8007106:	b003      	add	sp, #12
 8007108:	f85d fb04 	ldr.w	pc, [sp], #4

0800710c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
 800710c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <bt_conn_create_pdu+0x20>)
{
 8007110:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
 8007112:	2800      	cmp	r0, #0
 8007114:	bf08      	it	eq
 8007116:	4618      	moveq	r0, r3
 8007118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800711c:	f00a f91c 	bl	8011358 <net_buf_alloc>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
 8007120:	1d69      	adds	r1, r5, #5
	buf = net_buf_alloc(pool, K_FOREVER);
 8007122:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
 8007124:	f00a f971 	bl	801140a <net_buf_reserve>

	return buf;
}
 8007128:	4620      	mov	r0, r4
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200064bc 	.word	0x200064bc

08007130 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
 8007130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007134:	4606      	mov	r6, r0
 8007136:	460d      	mov	r5, r1
	frag = bt_conn_create_pdu(NULL, 0);
 8007138:	2100      	movs	r1, #0
 800713a:	4608      	mov	r0, r1
 800713c:	f7ff ffe6 	bl	800710c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
 8007140:	7833      	ldrb	r3, [r6, #0]
 8007142:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(NULL, 0);
 8007144:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
 8007146:	d005      	beq.n	8007154 <create_frag.isra.6+0x24>
		net_buf_unref(frag);
 8007148:	f00a f9bc 	bl	80114c4 <net_buf_unref>
		return NULL;
 800714c:	2400      	movs	r4, #0
}
 800714e:	4620      	mov	r0, r4
 8007150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007154:	89c3      	ldrh	r3, [r0, #14]
	return bt_dev.le.mtu;
 8007156:	4e11      	ldr	r6, [pc, #68]	; (800719c <create_frag.isra.6+0x6c>)
 8007158:	4403      	add	r3, r0
 800715a:	3313      	adds	r3, #19
 800715c:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
 8007160:	2200      	movs	r2, #0
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 8007162:	f100 0708 	add.w	r7, r0, #8
	conn_tx(frag)->cb = NULL;
 8007166:	601a      	str	r2, [r3, #0]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 8007168:	4638      	mov	r0, r7
 800716a:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
 800716e:	f00a fa6e 	bl	801164e <net_buf_simple_tailroom>
 8007172:	4580      	cmp	r8, r0
 8007174:	d20c      	bcs.n	8007190 <create_frag.isra.6+0x60>
	return bt_dev.le.mtu;
 8007176:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
 800717a:	f855 1f08 	ldr.w	r1, [r5, #8]!
 800717e:	4632      	mov	r2, r6
 8007180:	4638      	mov	r0, r7
 8007182:	f00a f9c5 	bl	8011510 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	f00a fa26 	bl	80115da <net_buf_simple_pull>
 800718e:	e7de      	b.n	800714e <create_frag.isra.6+0x1e>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 8007190:	4638      	mov	r0, r7
 8007192:	f00a fa5c 	bl	801164e <net_buf_simple_tailroom>
 8007196:	b286      	uxth	r6, r0
 8007198:	e7ef      	b.n	800717a <create_frag.isra.6+0x4a>
 800719a:	bf00      	nop
 800719c:	200058a0 	.word	0x200058a0

080071a0 <bt_conn_process_tx>:
{
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
 80071a2:	7a43      	ldrb	r3, [r0, #9]
{
 80071a4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
 80071a6:	b993      	cbnz	r3, 80071ce <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80071a8:	f3bf 8f5b 	dmb	ish
 80071ac:	1d03      	adds	r3, r0, #4
 80071ae:	e853 2f00 	ldrex	r2, [r3]
 80071b2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 80071b6:	e843 1400 	strex	r4, r1, [r3]
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	d1f7      	bne.n	80071ae <bt_conn_process_tx+0xe>
 80071be:	f3bf 8f5b 	dmb	ish
 80071c2:	0653      	lsls	r3, r2, #25
 80071c4:	d503      	bpl.n	80071ce <bt_conn_process_tx+0x2e>
}
 80071c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
 80071ca:	f7ff bd59 	b.w	8006c80 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
 80071ce:	2100      	movs	r1, #0
 80071d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80071d4:	f00a f900 	bl	80113d8 <net_buf_get>
	BT_ASSERT(buf);
 80071d8:	4604      	mov	r4, r0
 80071da:	b928      	cbnz	r0, 80071e8 <bt_conn_process_tx+0x48>
 80071dc:	4040      	eors	r0, r0
 80071de:	f380 8811 	msr	BASEPRI, r0
 80071e2:	f04f 0004 	mov.w	r0, #4
 80071e6:	df02      	svc	2
	return bt_dev.le.mtu;
 80071e8:	4e19      	ldr	r6, [pc, #100]	; (8007250 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
 80071ea:	8981      	ldrh	r1, [r0, #12]
 80071ec:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
 80071f0:	4291      	cmp	r1, r2
 80071f2:	d807      	bhi.n	8007204 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
 80071f4:	2300      	movs	r3, #0
 80071f6:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
 80071f8:	4621      	mov	r1, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	f7ff fcb4 	bl	8006b68 <send_frag>
	if (!send_buf(conn, buf)) {
 8007200:	b140      	cbz	r0, 8007214 <bt_conn_process_tx+0x74>
}
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007204:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
 8007208:	4601      	mov	r1, r0
 800720a:	4638      	mov	r0, r7
 800720c:	f7ff ff90 	bl	8007130 <create_frag.isra.6>
	if (!frag) {
 8007210:	4601      	mov	r1, r0
 8007212:	b920      	cbnz	r0, 800721e <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
 8007214:	4620      	mov	r0, r4
}
 8007216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
 800721a:	f00a b953 	b.w	80114c4 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
 800721e:	2301      	movs	r3, #1
 8007220:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
 8007222:	4628      	mov	r0, r5
 8007224:	f7ff fca0 	bl	8006b68 <send_frag>
 8007228:	2800      	cmp	r0, #0
 800722a:	d0f3      	beq.n	8007214 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
 800722c:	89a2      	ldrh	r2, [r4, #12]
 800722e:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
 8007232:	429a      	cmp	r2, r3
 8007234:	d802      	bhi.n	800723c <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
 8007236:	2300      	movs	r3, #0
 8007238:	2201      	movs	r2, #1
 800723a:	e7dd      	b.n	80071f8 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
 800723c:	4621      	mov	r1, r4
 800723e:	4638      	mov	r0, r7
 8007240:	f7ff ff76 	bl	8007130 <create_frag.isra.6>
		if (!frag) {
 8007244:	4601      	mov	r1, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	d0e4      	beq.n	8007214 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
 800724a:	2301      	movs	r3, #1
 800724c:	461a      	mov	r2, r3
 800724e:	e7e8      	b.n	8007222 <bt_conn_process_tx+0x82>
 8007250:	200058a0 	.word	0x200058a0

08007254 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <bt_conn_get_id+0x10>)
 8007256:	1ac0      	subs	r0, r0, r3
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <bt_conn_get_id+0x14>)
 800725a:	10c0      	asrs	r0, r0, #3
 800725c:	4358      	muls	r0, r3
}
 800725e:	b2c0      	uxtb	r0, r0
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000754 	.word	0x20000754
 8007268:	286bca1b 	.word	0x286bca1b

0800726c <bt_conn_lookup_id>:

struct bt_conn *bt_conn_lookup_id(u8_t id)
{
 800726c:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (id >= ARRAY_SIZE(conns)) {
 800726e:	b108      	cbz	r0, 8007274 <bt_conn_lookup_id+0x8>
		return NULL;
 8007270:	2000      	movs	r0, #0
 8007272:	bd08      	pop	{r3, pc}
	}

	conn = &conns[id];

	if (!atomic_get(&conn->ref)) {
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <bt_conn_lookup_id+0x1c>)
 8007276:	f7ff fb7d 	bl	8006974 <atomic_get>
 800727a:	2800      	cmp	r0, #0
 800727c:	d0f8      	beq.n	8007270 <bt_conn_lookup_id+0x4>
	atomic_inc(&conn->ref);
 800727e:	4802      	ldr	r0, [pc, #8]	; (8007288 <bt_conn_lookup_id+0x1c>)
 8007280:	f7ff fb96 	bl	80069b0 <atomic_inc>
		return NULL;
	}

	return bt_conn_ref(conn);
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <bt_conn_lookup_id+0x20>)
}
 8007286:	bd08      	pop	{r3, pc}
 8007288:	20000794 	.word	0x20000794
 800728c:	20000754 	.word	0x20000754

08007290 <bt_conn_init>:

int bt_conn_init(void)
{
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <bt_conn_init+0x3c>)
 8007292:	b570      	push	{r4, r5, r6, lr}
 8007294:	2200      	movs	r2, #0
 8007296:	681d      	ldr	r5, [r3, #0]
 8007298:	6859      	ldr	r1, [r3, #4]
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
 800729a:	4e0d      	ldr	r6, [pc, #52]	; (80072d0 <bt_conn_init+0x40>)
{
 800729c:	4614      	mov	r4, r2
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
 800729e:	18b0      	adds	r0, r6, r2
	node->next = list->head;
 80072a0:	5195      	str	r5, [r2, r6]
	if (!list->tail) {
 80072a2:	b909      	cbnz	r1, 80072a8 <bt_conn_init+0x18>
		list->tail = list->head;
 80072a4:	4601      	mov	r1, r0
	if (!list->tail) {
 80072a6:	2401      	movs	r4, #1
 80072a8:	3208      	adds	r2, #8
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 80072aa:	2a38      	cmp	r2, #56	; 0x38
	list->head = node;
 80072ac:	4605      	mov	r5, r0
 80072ae:	d1f6      	bne.n	800729e <bt_conn_init+0xe>
 80072b0:	6018      	str	r0, [r3, #0]
 80072b2:	b104      	cbz	r4, 80072b6 <bt_conn_init+0x26>
 80072b4:	6059      	str	r1, [r3, #4]
	}

	bt_att_init();
 80072b6:	f001 f95b 	bl	8008570 <bt_att_init>

	err = bt_smp_init();
 80072ba:	f001 fe59 	bl	8008f70 <bt_smp_init>
	if (err) {
 80072be:	4604      	mov	r4, r0
 80072c0:	b908      	cbnz	r0, 80072c6 <bt_conn_init+0x36>
		return err;
	}

	bt_l2cap_init();
 80072c2:	f000 f981 	bl	80075c8 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
 80072c6:	4620      	mov	r0, r4
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	bf00      	nop
 80072cc:	200007ec 	.word	0x200007ec
 80072d0:	2000071c 	.word	0x2000071c

080072d4 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
 80072d4:	4770      	bx	lr
	...

080072d8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <l2cap_accept+0x14>)
 80072da:	6818      	ldr	r0, [r3, #0]
 80072dc:	b918      	cbnz	r0, 80072e6 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
 80072de:	4a04      	ldr	r2, [pc, #16]	; (80072f0 <l2cap_accept+0x18>)
 80072e0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
 80072e2:	600b      	str	r3, [r1, #0]

		return 0;
 80072e4:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
 80072e6:	f06f 000b 	mvn.w	r0, #11
}
 80072ea:	4770      	bx	lr
 80072ec:	200007f4 	.word	0x200007f4
 80072f0:	20005a04 	.word	0x20005a04

080072f4 <l2cap_connected>:
 80072f4:	4770      	bx	lr
	...

080072f8 <bt_l2cap_le_fixed_chan_register>:
	node->next = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <bt_l2cap_le_fixed_chan_register+0x1c>)
 80072fe:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
 8007300:	f100 0208 	add.w	r2, r0, #8
 8007304:	b911      	cbnz	r1, 800730c <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
 8007306:	605a      	str	r2, [r3, #4]
		list->head = node;
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	4770      	bx	lr
		list->tail->next = node;
 800730c:	600a      	str	r2, [r1, #0]
		list->tail = node;
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000088c 	.word	0x2000088c

08007318 <bt_l2cap_chan_remove>:
{
 8007318:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800731a:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 800731c:	b113      	cbz	r3, 8007324 <bt_l2cap_chan_remove+0xc>
 800731e:	3b08      	subs	r3, #8
 8007320:	2200      	movs	r2, #0
 8007322:	b903      	cbnz	r3, 8007326 <bt_l2cap_chan_remove+0xe>
 8007324:	bd30      	pop	{r4, r5, pc}
		if (chan == ch) {
 8007326:	428b      	cmp	r3, r1
 8007328:	f103 0408 	add.w	r4, r3, #8
 800732c:	d10e      	bne.n	800734c <bt_l2cap_chan_remove+0x34>
 800732e:	6899      	ldr	r1, [r3, #8]
 8007330:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	if (!prev_node) {
 8007332:	b932      	cbnz	r2, 8007342 <bt_l2cap_chan_remove+0x2a>
		if (list->tail == node) {
 8007334:	42ac      	cmp	r4, r5
		list->head = node->next;
 8007336:	6381      	str	r1, [r0, #56]	; 0x38
		if (list->tail == node) {
 8007338:	d100      	bne.n	800733c <bt_l2cap_chan_remove+0x24>
			list->tail = list->head;
 800733a:	63c1      	str	r1, [r0, #60]	; 0x3c
	node->next = NULL;
 800733c:	2200      	movs	r2, #0
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
 8007342:	42ac      	cmp	r4, r5
		prev_node->next = node->next;
 8007344:	6011      	str	r1, [r2, #0]
			list->tail = prev_node;
 8007346:	bf08      	it	eq
 8007348:	63c2      	streq	r2, [r0, #60]	; 0x3c
 800734a:	e7f7      	b.n	800733c <bt_l2cap_chan_remove+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
 800734c:	4622      	mov	r2, r4
 800734e:	2c00      	cmp	r4, #0
 8007350:	d0e8      	beq.n	8007324 <bt_l2cap_chan_remove+0xc>
	return node->next;
 8007352:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0e5      	beq.n	8007324 <bt_l2cap_chan_remove+0xc>
 8007358:	3b08      	subs	r3, #8
 800735a:	e7e2      	b.n	8007322 <bt_l2cap_chan_remove+0xa>

0800735c <bt_l2cap_chan_del>:
	if (!chan->conn) {
 800735c:	6803      	ldr	r3, [r0, #0]
{
 800735e:	b510      	push	{r4, lr}
 8007360:	4604      	mov	r4, r0
	if (!chan->conn) {
 8007362:	b12b      	cbz	r3, 8007370 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
 8007364:	6843      	ldr	r3, [r0, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	b103      	cbz	r3, 800736c <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
 800736a:	4798      	blx	r3
	chan->conn = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
 8007370:	68e3      	ldr	r3, [r4, #12]
 8007372:	b11b      	cbz	r3, 800737c <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
 8007374:	4620      	mov	r0, r4
}
 8007376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
 800737a:	4718      	bx	r3
 800737c:	bd10      	pop	{r4, pc}

0800737e <l2cap_rtx_timeout>:
{
 800737e:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
 8007380:	f1a0 0410 	sub.w	r4, r0, #16
 8007384:	4621      	mov	r1, r4
 8007386:	f850 0c10 	ldr.w	r0, [r0, #-16]
 800738a:	f7ff ffc5 	bl	8007318 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
 800738e:	4620      	mov	r0, r4
}
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
 8007394:	f7ff bfe2 	b.w	800735c <bt_l2cap_chan_del>

08007398 <bt_l2cap_connected>:
{
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <bt_l2cap_connected+0x6c>)
 800739a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800739e:	681c      	ldr	r4, [r3, #0]
 80073a0:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 80073a2:	b12c      	cbz	r4, 80073b0 <bt_l2cap_connected+0x18>
	node->next = NULL;
 80073a4:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 80073a6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007408 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 80073aa:	3c08      	subs	r4, #8
 80073ac:	46b9      	mov	r9, r7
 80073ae:	b914      	cbnz	r4, 80073b6 <bt_l2cap_connected+0x1e>
}
 80073b0:	b003      	add	sp, #12
 80073b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	a901      	add	r1, sp, #4
 80073ba:	4630      	mov	r0, r6
 80073bc:	4798      	blx	r3
 80073be:	2800      	cmp	r0, #0
 80073c0:	db18      	blt.n	80073f4 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
 80073c2:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
 80073c4:	8823      	ldrh	r3, [r4, #0]
 80073c6:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
 80073c8:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 80073cc:	4641      	mov	r1, r8
 80073ce:	f105 0010 	add.w	r0, r5, #16
 80073d2:	f00b f823 	bl	801241c <k_delayed_work_init>
	if (!list->tail) {
 80073d6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	node->next = NULL;
 80073d8:	60af      	str	r7, [r5, #8]
	sys_slist_append(&conn->channels, &chan->node);
 80073da:	f105 0308 	add.w	r3, r5, #8
	if (!list->tail) {
 80073de:	b972      	cbnz	r2, 80073fe <bt_l2cap_connected+0x66>
		list->tail = node;
 80073e0:	63f3      	str	r3, [r6, #60]	; 0x3c
		list->head = node;
 80073e2:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
 80073e4:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
 80073e6:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
 80073e8:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
 80073ea:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	b103      	cbz	r3, 80073f4 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
 80073f2:	4798      	blx	r3
	return node->next;
 80073f4:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 80073f6:	2c00      	cmp	r4, #0
 80073f8:	d0da      	beq.n	80073b0 <bt_l2cap_connected+0x18>
 80073fa:	3c08      	subs	r4, #8
 80073fc:	e7d7      	b.n	80073ae <bt_l2cap_connected+0x16>
		list->tail->next = node;
 80073fe:	6013      	str	r3, [r2, #0]
		list->tail = node;
 8007400:	63f3      	str	r3, [r6, #60]	; 0x3c
 8007402:	e7ef      	b.n	80073e4 <bt_l2cap_connected+0x4c>
 8007404:	2000088c 	.word	0x2000088c
 8007408:	0800737f 	.word	0x0800737f

0800740c <bt_l2cap_disconnected>:
{
 800740c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800740e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007410:	b1a3      	cbz	r3, 800743c <bt_l2cap_disconnected+0x30>
 8007412:	f1b3 0008 	subs.w	r0, r3, #8
 8007416:	d10a      	bne.n	800742e <bt_l2cap_disconnected+0x22>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
 800741c:	f7ff ff9e 	bl	800735c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007420:	b164      	cbz	r4, 800743c <bt_l2cap_disconnected+0x30>
	return node->next;
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	b103      	cbz	r3, 8007428 <bt_l2cap_disconnected+0x1c>
 8007426:	3b08      	subs	r3, #8
{
 8007428:	4620      	mov	r0, r4
 800742a:	461c      	mov	r4, r3
 800742c:	e7f6      	b.n	800741c <bt_l2cap_disconnected+0x10>
 800742e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007430:	2c00      	cmp	r4, #0
 8007432:	d1f2      	bne.n	800741a <bt_l2cap_disconnected+0xe>
}
 8007434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
 8007438:	f7ff bf90 	b.w	800735c <bt_l2cap_chan_del>
 800743c:	bd10      	pop	{r4, pc}

0800743e <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 800743e:	3104      	adds	r1, #4
 8007440:	f7ff be64 	b.w	800710c <bt_conn_create_pdu>

08007444 <bt_l2cap_send_cb>:
{
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	4614      	mov	r4, r2
 8007448:	4605      	mov	r5, r0
 800744a:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
 800744c:	f102 0008 	add.w	r0, r2, #8
 8007450:	2104      	movs	r1, #4
{
 8007452:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
 8007454:	f00a f89c 	bl	8011590 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8007458:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
 800745a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 800745c:	3904      	subs	r1, #4
 800745e:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
 8007460:	4632      	mov	r2, r6
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
}
 8007466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
 800746a:	f7ff bb36 	b.w	8006ada <bt_conn_send_cb>

0800746e <l2cap_recv>:
{
 800746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 8007472:	898b      	ldrh	r3, [r1, #12]
 8007474:	2b03      	cmp	r3, #3
{
 8007476:	4606      	mov	r6, r0
 8007478:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
 800747a:	d931      	bls.n	80074e0 <l2cap_recv+0x72>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
 800747c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 800747e:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
 8007480:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
 8007484:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
 8007486:	f00a f8a8 	bl	80115da <net_buf_simple_pull>
	if (buf->len != len) {
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	42bb      	cmp	r3, r7
 800748e:	d127      	bne.n	80074e0 <l2cap_recv+0x72>
	if (!hdr->ident) {
 8007490:	7867      	ldrb	r7, [r4, #1]
 8007492:	b32f      	cbz	r7, 80074e0 <l2cap_recv+0x72>
	switch (hdr->code) {
 8007494:	7823      	ldrb	r3, [r4, #0]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d022      	beq.n	80074e0 <l2cap_recv+0x72>
 800749a:	2b13      	cmp	r3, #19
 800749c:	d020      	beq.n	80074e0 <l2cap_recv+0x72>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 800749e:	2104      	movs	r1, #4
 80074a0:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
 80074a2:	f8d6 8000 	ldr.w	r8, [r6]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80074a6:	f7ff fe31 	bl	800710c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 80074aa:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80074ae:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 80074b0:	2104      	movs	r1, #4
 80074b2:	4630      	mov	r0, r6
 80074b4:	f00a f826 	bl	8011504 <net_buf_simple_add>
	hdr->len = sys_cpu_to_le16(len);
 80074b8:	2400      	movs	r4, #0
	hdr->code = code;
 80074ba:	2301      	movs	r3, #1
	hdr->len = sys_cpu_to_le16(len);
 80074bc:	2102      	movs	r1, #2
	hdr->code = code;
 80074be:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
 80074c0:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 80074c2:	7081      	strb	r1, [r0, #2]
 80074c4:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
 80074c6:	4630      	mov	r0, r6
 80074c8:	f00a f81c 	bl	8011504 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
 80074cc:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
 80074ce:	7004      	strb	r4, [r0, #0]
 80074d0:	7044      	strb	r4, [r0, #1]
 80074d2:	462a      	mov	r2, r5
 80074d4:	4640      	mov	r0, r8
 80074d6:	2105      	movs	r1, #5
}
 80074d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	f7ff bfb2 	b.w	8007444 <bt_l2cap_send_cb>
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074e4 <bt_l2cap_le_lookup_tx_cid>:
{
 80074e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 80074e6:	b100      	cbz	r0, 80074ea <bt_l2cap_le_lookup_tx_cid+0x6>
 80074e8:	3808      	subs	r0, #8
 80074ea:	b900      	cbnz	r0, 80074ee <bt_l2cap_le_lookup_tx_cid+0xa>
}
 80074ec:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 80074ee:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 80074f2:	428b      	cmp	r3, r1
 80074f4:	d0fa      	beq.n	80074ec <bt_l2cap_le_lookup_tx_cid+0x8>
 80074f6:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 80074f8:	2000      	movs	r0, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f6      	beq.n	80074ec <bt_l2cap_le_lookup_tx_cid+0x8>
 80074fe:	f1a3 0008 	sub.w	r0, r3, #8
 8007502:	e7f2      	b.n	80074ea <bt_l2cap_le_lookup_tx_cid+0x6>

08007504 <bt_l2cap_le_lookup_rx_cid>:
{
 8007504:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8007506:	b100      	cbz	r0, 800750a <bt_l2cap_le_lookup_rx_cid+0x6>
 8007508:	3808      	subs	r0, #8
 800750a:	b900      	cbnz	r0, 800750e <bt_l2cap_le_lookup_rx_cid+0xa>
}
 800750c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 800750e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8007510:	428b      	cmp	r3, r1
 8007512:	d0fb      	beq.n	800750c <bt_l2cap_le_lookup_rx_cid+0x8>
 8007514:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8007516:	2000      	movs	r0, #0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f7      	beq.n	800750c <bt_l2cap_le_lookup_rx_cid+0x8>
 800751c:	f1a3 0008 	sub.w	r0, r3, #8
 8007520:	e7f3      	b.n	800750a <bt_l2cap_le_lookup_rx_cid+0x6>

08007522 <bt_l2cap_recv>:
{
 8007522:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	2b03      	cmp	r3, #3
{
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
 800752c:	d804      	bhi.n	8007538 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
 800752e:	4620      	mov	r0, r4
}
 8007530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
 8007534:	f009 bfc6 	b.w	80114c4 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
 8007538:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 800753a:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
 800753c:	f850 3f08 	ldr.w	r3, [r0, #8]!
 8007540:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
 8007542:	f00a f84a 	bl	80115da <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	f7ff ffdb 	bl	8007504 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 800754e:	2800      	cmp	r0, #0
 8007550:	d0ed      	beq.n	800752e <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
 8007552:	6843      	ldr	r3, [r0, #4]
 8007554:	4621      	mov	r1, r4
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	4798      	blx	r3
 800755a:	e7e8      	b.n	800752e <bt_l2cap_recv+0xc>

0800755c <bt_l2cap_update_conn_param>:
{
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
 8007560:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <bt_l2cap_update_conn_param+0x68>)
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	3201      	adds	r2, #1
	if (!ident) {
 8007566:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
 800756a:	bf08      	it	eq
 800756c:	2201      	moveq	r2, #1
{
 800756e:	460c      	mov	r4, r1
		ident++;
 8007570:	701a      	strb	r2, [r3, #0]
{
 8007572:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 8007574:	2104      	movs	r1, #4
 8007576:	2000      	movs	r0, #0
	return ident;
 8007578:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 800757a:	f7ff fdc7 	bl	800710c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 800757e:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 8007582:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007584:	2104      	movs	r1, #4
 8007586:	4640      	mov	r0, r8
 8007588:	f009 ffbc 	bl	8011504 <net_buf_simple_add>
	hdr->code = code;
 800758c:	2312      	movs	r3, #18
	hdr->ident = ident;
 800758e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 8007590:	2108      	movs	r1, #8
 8007592:	2600      	movs	r6, #0
	hdr->code = code;
 8007594:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
 8007596:	7081      	strb	r1, [r0, #2]
 8007598:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
 800759a:	4640      	mov	r0, r8
 800759c:	f009 ffb2 	bl	8011504 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
 80075a0:	8823      	ldrh	r3, [r4, #0]
 80075a2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
 80075a4:	8863      	ldrh	r3, [r4, #2]
 80075a6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
 80075a8:	88a3      	ldrh	r3, [r4, #4]
 80075aa:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
 80075ac:	88e3      	ldrh	r3, [r4, #6]
 80075ae:	80c3      	strh	r3, [r0, #6]
 80075b0:	463a      	mov	r2, r7
 80075b2:	4628      	mov	r0, r5
 80075b4:	4633      	mov	r3, r6
 80075b6:	2105      	movs	r1, #5
 80075b8:	f7ff ff44 	bl	8007444 <bt_l2cap_send_cb>
}
 80075bc:	4630      	mov	r0, r6
 80075be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c2:	bf00      	nop
 80075c4:	20000888 	.word	0x20000888

080075c8 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <bt_l2cap_init+0x8>)
 80075ca:	f7ff be95 	b.w	80072f8 <bt_l2cap_le_fixed_chan_register>
 80075ce:	bf00      	nop
 80075d0:	200059f8 	.word	0x200059f8

080075d4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
 80075d4:	2006      	movs	r0, #6
 80075d6:	4770      	bx	lr

080075d8 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
 80075d8:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 80075dc:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
 80075de:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
 80075e2:	4284      	cmp	r4, r0
 80075e4:	ea4f 01c3 	mov.w	r1, r3, lsl #3
 80075e8:	d102      	bne.n	80075f0 <att_op_get_type+0x18>
			return handlers[i].type;
 80075ea:	440a      	add	r2, r1
 80075ec:	7890      	ldrb	r0, [r2, #2]
 80075ee:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 80075f0:	3301      	adds	r3, #1
 80075f2:	2b1b      	cmp	r3, #27
 80075f4:	d1f3      	bne.n	80075de <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
 80075f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075fa:	bf14      	ite	ne
 80075fc:	2000      	movne	r0, #0
 80075fe:	2006      	moveq	r0, #6
}
 8007600:	bd10      	pop	{r4, pc}
 8007602:	bf00      	nop
 8007604:	0801377c 	.word	0x0801377c

08007608 <att_req_destroy>:
{
 8007608:	b510      	push	{r4, lr}
 800760a:	4604      	mov	r4, r0
	if (req->buf) {
 800760c:	6900      	ldr	r0, [r0, #16]
 800760e:	b108      	cbz	r0, 8007614 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
 8007610:	f009 ff58 	bl	80114c4 <net_buf_unref>
	if (req->destroy) {
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	b10b      	cbz	r3, 800761c <att_req_destroy+0x14>
		req->destroy(req);
 8007618:	4620      	mov	r0, r4
 800761a:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
 800761c:	4620      	mov	r0, r4
 800761e:	2214      	movs	r2, #20
 8007620:	2100      	movs	r1, #0
}
 8007622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
 8007626:	f7f9 b957 	b.w	80008d8 <memset>

0800762a <att_notify>:
{
 800762a:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
 800762c:	f101 0008 	add.w	r0, r1, #8
 8007630:	f009 ffe3 	bl	80115fa <net_buf_simple_pull_le16>
}
 8007634:	2000      	movs	r0, #0
 8007636:	bd08      	pop	{r3, pc}

08007638 <read_group_cb>:
{
 8007638:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
 800763c:	680d      	ldr	r5, [r1, #0]
{
 800763e:	4606      	mov	r6, r0
 8007640:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800764a:	a902      	add	r1, sp, #8
 800764c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
 800764e:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8007650:	f88d 8008 	strb.w	r8, [sp, #8]
 8007654:	f8ad 300a 	strh.w	r3, [sp, #10]
 8007658:	f7fd fbd4 	bl	8004e04 <bt_uuid_cmp>
 800765c:	b198      	cbz	r0, 8007686 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 800765e:	f642 0301 	movw	r3, #10241	; 0x2801
 8007662:	a903      	add	r1, sp, #12
 8007664:	6830      	ldr	r0, [r6, #0]
 8007666:	f88d 800c 	strb.w	r8, [sp, #12]
 800766a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800766e:	f7fd fbc9 	bl	8004e04 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 8007672:	b140      	cbz	r0, 8007686 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	b123      	cbz	r3, 8007682 <read_group_cb+0x4a>
 8007678:	8a32      	ldrh	r2, [r6, #16]
 800767a:	8859      	ldrh	r1, [r3, #2]
 800767c:	4291      	cmp	r1, r2
 800767e:	d200      	bcs.n	8007682 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
 8007680:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 8007682:	2001      	movs	r0, #1
 8007684:	e012      	b.n	80076ac <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	6830      	ldr	r0, [r6, #0]
 800768a:	f7fd fbbb 	bl	8004e04 <bt_uuid_cmp>
 800768e:	b110      	cbz	r0, 8007696 <read_group_cb+0x5e>
		data->group = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	e7f5      	b.n	8007682 <read_group_cb+0x4a>
	if (data->rsp->len &&
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	68a0      	ldr	r0, [r4, #8]
 800769a:	781a      	ldrb	r2, [r3, #0]
 800769c:	b14a      	cbz	r2, 80076b2 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
 800769e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 80076a2:	8981      	ldrh	r1, [r0, #12]
 80076a4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
 80076a6:	4293      	cmp	r3, r2
 80076a8:	da03      	bge.n	80076b2 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
 80076aa:	2000      	movs	r0, #0
}
 80076ac:	b004      	add	sp, #16
 80076ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 80076b2:	2104      	movs	r1, #4
 80076b4:	3008      	adds	r0, #8
 80076b6:	f009 ff25 	bl	8011504 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 80076ba:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 80076bc:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 80076be:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 80076c0:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
 80076c2:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 80076ca:	6889      	ldr	r1, [r1, #8]
 80076cc:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	2500      	movs	r5, #0
 80076d4:	440a      	add	r2, r1
 80076d6:	9500      	str	r5, [sp, #0]
 80076d8:	4631      	mov	r1, r6
 80076da:	b29b      	uxth	r3, r3
 80076dc:	4638      	mov	r0, r7
 80076de:	47c0      	blx	r8
	if (read < 0) {
 80076e0:	1e01      	subs	r1, r0, #0
 80076e2:	dbe2      	blt.n	80076aa <read_group_cb+0x72>
	if (!data->rsp->len) {
 80076e4:	68e0      	ldr	r0, [r4, #12]
 80076e6:	7802      	ldrb	r2, [r0, #0]
 80076e8:	1d0b      	adds	r3, r1, #4
 80076ea:	b92a      	cbnz	r2, 80076f8 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
 80076ec:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
 80076ee:	68a0      	ldr	r0, [r4, #8]
 80076f0:	3008      	adds	r0, #8
 80076f2:	f009 ff07 	bl	8011504 <net_buf_simple_add>
 80076f6:	e7c4      	b.n	8007682 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d0f8      	beq.n	80076ee <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
 80076fc:	68a2      	ldr	r2, [r4, #8]
 80076fe:	8993      	ldrh	r3, [r2, #12]
 8007700:	3b04      	subs	r3, #4
 8007702:	8193      	strh	r3, [r2, #12]
 8007704:	e7d1      	b.n	80076aa <read_group_cb+0x72>

08007706 <find_info_cb>:
	if (!data->rsp) {
 8007706:	688b      	ldr	r3, [r1, #8]
{
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	4605      	mov	r5, r0
 800770c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
 800770e:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
 8007710:	b963      	cbnz	r3, 800772c <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007712:	6848      	ldr	r0, [r1, #4]
 8007714:	2101      	movs	r1, #1
 8007716:	3008      	adds	r0, #8
 8007718:	f009 fef4 	bl	8011504 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 800771c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 800771e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf0c      	ite	eq
 8007726:	2301      	moveq	r3, #1
 8007728:	2302      	movne	r3, #2
 800772a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
 800772c:	68a3      	ldr	r3, [r4, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d003      	beq.n	800773c <find_info_cb+0x36>
 8007734:	2b02      	cmp	r3, #2
 8007736:	d01a      	beq.n	800776e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
 8007738:	2000      	movs	r0, #0
}
 800773a:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f9      	bne.n	8007738 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
 8007744:	6860      	ldr	r0, [r4, #4]
 8007746:	2104      	movs	r1, #4
 8007748:	3008      	adds	r0, #8
 800774a:	f009 fedb 	bl	8011504 <net_buf_simple_add>
 800774e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
 8007750:	8a2b      	ldrh	r3, [r5, #16]
 8007752:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	885b      	ldrh	r3, [r3, #2]
 8007758:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
 8007760:	899b      	ldrh	r3, [r3, #12]
 8007762:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 8007764:	2804      	cmp	r0, #4
 8007766:	bf94      	ite	ls
 8007768:	2000      	movls	r0, #0
 800776a:	2001      	movhi	r0, #1
 800776c:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d1e0      	bne.n	8007738 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
 8007776:	6860      	ldr	r0, [r4, #4]
 8007778:	2112      	movs	r1, #18
 800777a:	3008      	adds	r0, #8
 800777c:	f009 fec2 	bl	8011504 <net_buf_simple_add>
 8007780:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 8007782:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
 8007784:	8a2b      	ldrh	r3, [r5, #16]
 8007786:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 800778a:	2210      	movs	r2, #16
 800778c:	3101      	adds	r1, #1
 800778e:	f7f9 f877 	bl	8000880 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
 8007792:	6863      	ldr	r3, [r4, #4]
 8007794:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
 8007798:	899b      	ldrh	r3, [r3, #12]
 800779a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 800779c:	2812      	cmp	r0, #18
 800779e:	e7e2      	b.n	8007766 <find_info_cb+0x60>

080077a0 <find_type_cb>:
{
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
 80077a4:	680e      	ldr	r6, [r1, #0]
{
 80077a6:	b088      	sub	sp, #32
 80077a8:	4605      	mov	r5, r0
 80077aa:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80077ac:	2700      	movs	r7, #0
 80077ae:	f642 0301 	movw	r3, #10241	; 0x2801
 80077b2:	a902      	add	r1, sp, #8
 80077b4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
 80077b6:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80077ba:	f88d 7008 	strb.w	r7, [sp, #8]
 80077be:	f8ad 300a 	strh.w	r3, [sp, #10]
 80077c2:	f7fd fb1f 	bl	8004e04 <bt_uuid_cmp>
 80077c6:	b928      	cbnz	r0, 80077d4 <find_type_cb+0x34>
		data->group = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
 80077cc:	2001      	movs	r0, #1
}
 80077ce:	b008      	add	sp, #32
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
 80077d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80077d8:	a903      	add	r1, sp, #12
 80077da:	6828      	ldr	r0, [r5, #0]
 80077dc:	f88d 700c 	strb.w	r7, [sp, #12]
 80077e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80077e4:	f7fd fb0e 	bl	8004e04 <bt_uuid_cmp>
 80077e8:	b140      	cbz	r0, 80077fc <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0ed      	beq.n	80077cc <find_type_cb+0x2c>
 80077f0:	8a2a      	ldrh	r2, [r5, #16]
 80077f2:	8859      	ldrh	r1, [r3, #2]
 80077f4:	4291      	cmp	r1, r2
 80077f6:	d2e9      	bcs.n	80077cc <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
 80077f8:	805a      	strh	r2, [r3, #2]
 80077fa:	e7e7      	b.n	80077cc <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
 8007802:	8992      	ldrh	r2, [r2, #12]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	2b03      	cmp	r3, #3
 8007808:	d9e1      	bls.n	80077ce <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
 800780a:	2310      	movs	r3, #16
 800780c:	9000      	str	r0, [sp, #0]
 800780e:	eb0d 0203 	add.w	r2, sp, r3
 8007812:	686e      	ldr	r6, [r5, #4]
 8007814:	4629      	mov	r1, r5
 8007816:	4640      	mov	r0, r8
 8007818:	47b0      	blx	r6
	if (read < 0) {
 800781a:	1e02      	subs	r2, r0, #0
 800781c:	dbd4      	blt.n	80077c8 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
 800781e:	7c23      	ldrb	r3, [r4, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d1d1      	bne.n	80077c8 <find_type_cb+0x28>
 8007824:	a904      	add	r1, sp, #16
 8007826:	68e0      	ldr	r0, [r4, #12]
 8007828:	f7f9 f815 	bl	8000856 <memcmp>
 800782c:	2800      	cmp	r0, #0
 800782e:	d1cb      	bne.n	80077c8 <find_type_cb+0x28>
	data->err = 0x00;
 8007830:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 8007832:	6860      	ldr	r0, [r4, #4]
 8007834:	2104      	movs	r1, #4
 8007836:	3008      	adds	r0, #8
 8007838:	f009 fe64 	bl	8011504 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 800783c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 800783e:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 8007840:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
 8007842:	8043      	strh	r3, [r0, #2]
 8007844:	e7c2      	b.n	80077cc <find_type_cb+0x2c>
	...

08007848 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
 8007848:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 800784a:	2317      	movs	r3, #23
{
 800784c:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 800784e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
 8007852:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
 8007854:	4906      	ldr	r1, [pc, #24]	; (8007870 <bt_att_connected+0x28>)
 8007856:	30a4      	adds	r0, #164	; 0xa4
 8007858:	f00a fde0 	bl	801241c <k_delayed_work_init>
	list->head = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
 8007862:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
 8007866:	6820      	ldr	r0, [r4, #0]
}
 8007868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
 800786c:	f001 bb3e 	b.w	8008eec <bt_gatt_connected>
 8007870:	08007d41 	.word	0x08007d41

08007874 <check_perm.isra.3>:
	if ((mask & BT_GATT_PERM_READ) &&
 8007874:	f011 0f01 	tst.w	r1, #1
 8007878:	7c83      	ldrb	r3, [r0, #18]
 800787a:	d004      	beq.n	8007886 <check_perm.isra.3+0x12>
 800787c:	f013 0f15 	tst.w	r3, #21
 8007880:	d012      	beq.n	80078a8 <check_perm.isra.3+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 8007882:	6842      	ldr	r2, [r0, #4]
 8007884:	b182      	cbz	r2, 80078a8 <check_perm.isra.3+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
 8007886:	078a      	lsls	r2, r1, #30
 8007888:	d504      	bpl.n	8007894 <check_perm.isra.3+0x20>
 800788a:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 800788e:	d00d      	beq.n	80078ac <check_perm.isra.3+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 8007890:	6882      	ldr	r2, [r0, #8]
 8007892:	b15a      	cbz	r2, 80078ac <check_perm.isra.3+0x38>
	mask &= attr->perm;
 8007894:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
 8007896:	f011 0f30 	tst.w	r1, #48	; 0x30
 800789a:	d109      	bne.n	80078b0 <check_perm.isra.3+0x3c>
	return 0;
 800789c:	f011 0f0c 	tst.w	r1, #12
 80078a0:	bf14      	ite	ne
 80078a2:	200f      	movne	r0, #15
 80078a4:	2000      	moveq	r0, #0
 80078a6:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
 80078a8:	2002      	movs	r0, #2
 80078aa:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
 80078ac:	2003      	movs	r0, #3
 80078ae:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
 80078b0:	2005      	movs	r0, #5
}
 80078b2:	4770      	bx	lr

080078b4 <read_type_cb>:
{
 80078b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
 80078b8:	680f      	ldr	r7, [r1, #0]
{
 80078ba:	4606      	mov	r6, r0
 80078bc:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
 80078c2:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80078c6:	f7fd fa9d 	bl	8004e04 <bt_uuid_cmp>
 80078ca:	4680      	mov	r8, r0
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d14d      	bne.n	800796c <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 80078d0:	2115      	movs	r1, #21
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ffce 	bl	8007874 <check_perm.isra.3>
 80078d8:	4605      	mov	r5, r0
 80078da:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 80078dc:	b148      	cbz	r0, 80078f2 <read_type_cb+0x3e>
		if (data->rsp->len) {
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	781d      	ldrb	r5, [r3, #0]
 80078e2:	b115      	cbz	r5, 80078ea <read_type_cb+0x36>
			data->err = 0x00;
 80078e4:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
 80078e8:	4645      	mov	r5, r8
}
 80078ea:	4628      	mov	r0, r5
 80078ec:	b003      	add	sp, #12
 80078ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
 80078f2:	68a0      	ldr	r0, [r4, #8]
 80078f4:	2102      	movs	r1, #2
 80078f6:	3008      	adds	r0, #8
 80078f8:	f009 fe04 	bl	8011504 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
 80078fc:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 80078fe:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
 8007900:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
 8007902:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007904:	898a      	ldrh	r2, [r1, #12]
 8007906:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800790a:	6889      	ldr	r1, [r1, #8]
 800790c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8007910:	9500      	str	r5, [sp, #0]
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	440a      	add	r2, r1
 8007918:	4648      	mov	r0, r9
 800791a:	4631      	mov	r1, r6
 800791c:	47c0      	blx	r8
	if (read < 0) {
 800791e:	1e01      	subs	r1, r0, #0
 8007920:	da08      	bge.n	8007934 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
 8007922:	f101 03ff 	add.w	r3, r1, #255	; 0xff
 8007926:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 8007928:	bf9a      	itte	ls
 800792a:	4249      	negls	r1, r1
 800792c:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
 800792e:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
 8007930:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
 8007932:	e7da      	b.n	80078ea <read_type_cb+0x36>
	if (!data->rsp->len) {
 8007934:	68e0      	ldr	r0, [r4, #12]
 8007936:	7802      	ldrb	r2, [r0, #0]
 8007938:	1c8b      	adds	r3, r1, #2
 800793a:	b982      	cbnz	r2, 800795e <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
 800793c:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
 800793e:	68a0      	ldr	r0, [r4, #8]
 8007940:	3008      	adds	r0, #8
 8007942:	f009 fddf 	bl	8011504 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 800794c:	899b      	ldrh	r3, [r3, #12]
 800794e:	1aed      	subs	r5, r5, r3
 8007950:	68e3      	ldr	r3, [r4, #12]
 8007952:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 8007954:	429d      	cmp	r5, r3
 8007956:	bfd4      	ite	le
 8007958:	2500      	movle	r5, #0
 800795a:	2501      	movgt	r5, #1
 800795c:	e7c5      	b.n	80078ea <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
 800795e:	429a      	cmp	r2, r3
 8007960:	d0ed      	beq.n	800793e <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
 8007962:	68a2      	ldr	r2, [r4, #8]
 8007964:	8993      	ldrh	r3, [r2, #12]
 8007966:	3b02      	subs	r3, #2
 8007968:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
 800796a:	e7be      	b.n	80078ea <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
 800796c:	2501      	movs	r5, #1
 800796e:	e7bc      	b.n	80078ea <read_type_cb+0x36>

08007970 <uuid_create>:
{
 8007970:	b510      	push	{r4, lr}
	switch (buf->len) {
 8007972:	898a      	ldrh	r2, [r1, #12]
 8007974:	2a02      	cmp	r2, #2
{
 8007976:	4604      	mov	r4, r0
	switch (buf->len) {
 8007978:	d003      	beq.n	8007982 <uuid_create+0x12>
 800797a:	2a10      	cmp	r2, #16
 800797c:	d00a      	beq.n	8007994 <uuid_create+0x24>
	return false;
 800797e:	2000      	movs	r0, #0
}
 8007980:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
 8007982:	2300      	movs	r3, #0
 8007984:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
 8007986:	f101 0008 	add.w	r0, r1, #8
 800798a:	f009 fe36 	bl	80115fa <net_buf_simple_pull_le16>
 800798e:	8060      	strh	r0, [r4, #2]
		return true;
 8007990:	2001      	movs	r0, #1
 8007992:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
 8007994:	2302      	movs	r3, #2
 8007996:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
 800799a:	6889      	ldr	r1, [r1, #8]
 800799c:	f7f8 ff70 	bl	8000880 <memcpy>
 80079a0:	e7f6      	b.n	8007990 <uuid_create+0x20>
	...

080079a4 <att_req_sent>:
{
 80079a4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 80079a6:	2104      	movs	r1, #4
 80079a8:	f7ff fd9c 	bl	80074e4 <bt_l2cap_le_lookup_tx_cid>
 80079ac:	4604      	mov	r4, r0
 80079ae:	30cc      	adds	r0, #204	; 0xcc
 80079b0:	f00a fa0c 	bl	8011dcc <_impl_k_sem_give>
	if (att->req) {
 80079b4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80079b8:	b143      	cbz	r3, 80079cc <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 80079ba:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80079be:	f247 5230 	movw	r2, #30000	; 0x7530
 80079c2:	4803      	ldr	r0, [pc, #12]	; (80079d0 <att_req_sent+0x2c>)
}
 80079c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c8:	f00a bd92 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	20001498 	.word	0x20001498

080079d4 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 80079d4:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
 80079d6:	4d0f      	ldr	r5, [pc, #60]	; (8007a14 <bt_att_accept+0x40>)
 80079d8:	682c      	ldr	r4, [r5, #0]
{
 80079da:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
 80079dc:	b9b4      	cbnz	r4, 8007a0c <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
 80079de:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <bt_att_accept+0x44>)
 80079e0:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80079e2:	f105 0394 	add.w	r3, r5, #148	; 0x94
 80079e6:	f3bf 8f5b 	dmb	ish
 80079ea:	e853 2f00 	ldrex	r2, [r3]
 80079ee:	e843 4100 	strex	r1, r4, [r3]
 80079f2:	2900      	cmp	r1, #0
 80079f4:	d1f9      	bne.n	80079ea <bt_att_accept+0x16>
 80079f6:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 80079fa:	2202      	movs	r2, #2
 80079fc:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 8007a00:	4611      	mov	r1, r2
 8007a02:	f00a f9d9 	bl	8011db8 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
 8007a06:	6035      	str	r5, [r6, #0]

		return 0;
 8007a08:	4620      	mov	r0, r4
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
 8007a0c:	f06f 000b 	mvn.w	r0, #11
}
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
 8007a12:	bf00      	nop
 8007a14:	20000894 	.word	0x20000894
 8007a18:	20005a24 	.word	0x20005a24

08007a1c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
 8007a1c:	6803      	ldr	r3, [r0, #0]
 8007a1e:	7a5b      	ldrb	r3, [r3, #9]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d10a      	bne.n	8007a3a <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8007a24:	f3bf 8f5b 	dmb	ish
 8007a28:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8007a2c:	f3bf 8f5b 	dmb	ish
 8007a30:	ea6f 00a0 	mvn.w	r0, r0, asr #2
 8007a34:	f000 0001 	and.w	r0, r0, #1
 8007a38:	4770      	bx	lr
 8007a3a:	2001      	movs	r0, #1
}
 8007a3c:	4770      	bx	lr

08007a3e <att_prepare_write_req>:
 8007a3e:	2006      	movs	r0, #6
 8007a40:	4770      	bx	lr

08007a42 <att_chan_get>:
{
 8007a42:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
 8007a44:	7a43      	ldrb	r3, [r0, #9]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d001      	beq.n	8007a4e <att_chan_get+0xc>
		return NULL;
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
 8007a4e:	2104      	movs	r1, #4
 8007a50:	f7ff fd58 	bl	8007504 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0f8      	beq.n	8007a4a <att_chan_get+0x8>
 8007a58:	f3bf 8f5b 	dmb	ish
 8007a5c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8007a60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
 8007a64:	075b      	lsls	r3, r3, #29
 8007a66:	d4f0      	bmi.n	8007a4a <att_chan_get+0x8>
}
 8007a68:	bd08      	pop	{r3, pc}

08007a6a <att_pdu_sent>:
{
 8007a6a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 8007a6c:	2104      	movs	r1, #4
 8007a6e:	f7ff fd39 	bl	80074e4 <bt_l2cap_le_lookup_tx_cid>
}
 8007a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8007a76:	30cc      	adds	r0, #204	; 0xcc
 8007a78:	f00a b9a8 	b.w	8011dcc <_impl_k_sem_give>

08007a7c <att_cfm_sent>:
{
 8007a7c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 8007a7e:	2104      	movs	r1, #4
 8007a80:	f7ff fd30 	bl	80074e4 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8007a84:	f3bf 8f5b 	dmb	ish
 8007a88:	f100 0394 	add.w	r3, r0, #148	; 0x94
 8007a8c:	e853 2f00 	ldrex	r2, [r3]
 8007a90:	f022 0202 	bic.w	r2, r2, #2
 8007a94:	e843 2100 	strex	r1, r2, [r3]
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	d1f7      	bne.n	8007a8c <att_cfm_sent+0x10>
 8007a9c:	f3bf 8f5b 	dmb	ish
 8007aa0:	30cc      	adds	r0, #204	; 0xcc
}
 8007aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007aa6:	f00a b991 	b.w	8011dcc <_impl_k_sem_give>

08007aaa <att_rsp_sent>:
{
 8007aaa:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 8007aac:	2104      	movs	r1, #4
 8007aae:	f7ff fd19 	bl	80074e4 <bt_l2cap_le_lookup_tx_cid>
 8007ab2:	f3bf 8f5b 	dmb	ish
 8007ab6:	f100 0394 	add.w	r3, r0, #148	; 0x94
 8007aba:	e853 2f00 	ldrex	r2, [r3]
 8007abe:	f022 0201 	bic.w	r2, r2, #1
 8007ac2:	e843 2100 	strex	r1, r2, [r3]
 8007ac6:	2900      	cmp	r1, #0
 8007ac8:	d1f7      	bne.n	8007aba <att_rsp_sent+0x10>
 8007aca:	f3bf 8f5b 	dmb	ish
 8007ace:	30cc      	adds	r0, #204	; 0xcc
}
 8007ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ad4:	f00a b97a 	b.w	8011dcc <_impl_k_sem_give>

08007ad8 <write_cb>:
{
 8007ad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007adc:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
 8007ade:	f8d1 8000 	ldr.w	r8, [r1]
 8007ae2:	212a      	movs	r1, #42	; 0x2a
{
 8007ae4:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
 8007ae6:	f7ff fec5 	bl	8007874 <check_perm.isra.3>
 8007aea:	4605      	mov	r5, r0
 8007aec:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 8007aee:	b9e0      	cbnz	r0, 8007b2a <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
 8007af0:	8a62      	ldrh	r2, [r4, #18]
 8007af2:	9001      	str	r0, [sp, #4]
 8007af4:	9200      	str	r2, [sp, #0]
 8007af6:	7c23      	ldrb	r3, [r4, #16]
 8007af8:	68b7      	ldr	r7, [r6, #8]
 8007afa:	68e2      	ldr	r2, [r4, #12]
 8007afc:	4631      	mov	r1, r6
 8007afe:	4640      	mov	r0, r8
 8007b00:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
 8007b02:	2800      	cmp	r0, #0
 8007b04:	db02      	blt.n	8007b0c <write_cb+0x34>
 8007b06:	7c23      	ldrb	r3, [r4, #16]
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	d00b      	beq.n	8007b24 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
 8007b0c:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8007b10:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 8007b12:	bf9a      	itte	ls
 8007b14:	4240      	negls	r0, r0
 8007b16:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
 8007b18:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
 8007b1a:	7520      	strb	r0, [r4, #20]
}
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	b002      	add	sp, #8
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
 8007b24:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
 8007b26:	2501      	movs	r5, #1
 8007b28:	e7f8      	b.n	8007b1c <write_cb+0x44>
		return BT_GATT_ITER_STOP;
 8007b2a:	2500      	movs	r5, #0
 8007b2c:	e7f6      	b.n	8007b1c <write_cb+0x44>
	...

08007b30 <att_send_req>:
{
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
 8007b34:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
 8007b38:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
 8007b3c:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b44:	f00a f984 	bl	8011e50 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7ff ff67 	bl	8007a1c <att_is_connected>
 8007b4e:	b928      	cbnz	r0, 8007b5c <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8007b50:	4630      	mov	r0, r6
 8007b52:	f00a f93b 	bl	8011dcc <_impl_k_sem_give>
		return -ENOTCONN;
 8007b56:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
 8007b5c:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
 8007b5e:	f106 0008 	add.w	r0, r6, #8
 8007b62:	f009 fd6f 	bl	8011644 <net_buf_simple_headroom>
	state->len = buf->len;
 8007b66:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
 8007b68:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
 8007b6a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007b6c:	6920      	ldr	r0, [r4, #16]
 8007b6e:	682d      	ldr	r5, [r5, #0]
 8007b70:	f009 fcc4 	bl	80114fc <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007b78:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
 8007b7a:	7818      	ldrb	r0, [r3, #0]
 8007b7c:	f7ff fd2c 	bl	80075d8 <att_op_get_type>
 8007b80:	3801      	subs	r0, #1
 8007b82:	b2c0      	uxtb	r0, r0
 8007b84:	2804      	cmp	r0, #4
 8007b86:	bf96      	itet	ls
 8007b88:	4b05      	ldrls	r3, [pc, #20]	; (8007ba0 <att_send_req+0x70>)
 8007b8a:	4b06      	ldrhi	r3, [pc, #24]	; (8007ba4 <att_send_req+0x74>)
 8007b8c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007b90:	4632      	mov	r2, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	2104      	movs	r1, #4
 8007b96:	f7ff fc55 	bl	8007444 <bt_l2cap_send_cb>
	return 0;
 8007b9a:	2000      	movs	r0, #0
}
 8007b9c:	bd70      	pop	{r4, r5, r6, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08013768 	.word	0x08013768
 8007ba4:	08007a6b 	.word	0x08007a6b

08007ba8 <att_handle_rsp>:
{
 8007ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
 8007bae:	30a4      	adds	r0, #164	; 0xa4
{
 8007bb0:	461e      	mov	r6, r3
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
 8007bb6:	f00a fc4f 	bl	8012458 <k_delayed_work_cancel>
	if (!att->req) {
 8007bba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007bbe:	b1db      	cbz	r3, 8007bf8 <att_handle_rsp+0x50>
	if (att->req->buf) {
 8007bc0:	6918      	ldr	r0, [r3, #16]
 8007bc2:	b128      	cbz	r0, 8007bd0 <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
 8007bc4:	f009 fc7e 	bl	80114c4 <net_buf_unref>
		att->req->buf = NULL;
 8007bc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007bcc:	2200      	movs	r2, #0
 8007bce:	611a      	str	r2, [r3, #16]
	func = att->req->func;
 8007bd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
 8007bd4:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
 8007bd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
 8007bda:	2500      	movs	r5, #0
 8007bdc:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
 8007bde:	463a      	mov	r2, r7
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4631      	mov	r1, r6
 8007be4:	4643      	mov	r3, r8
 8007be6:	47c8      	blx	r9
	if (!att->req->func) {
 8007be8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007bec:	6843      	ldr	r3, [r0, #4]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
 8007bf0:	f7ff fd0a 	bl	8007608 <att_req_destroy>
	att->req = NULL;
 8007bf4:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8007bf8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8007bfc:	b159      	cbz	r1, 8007c16 <att_handle_rsp+0x6e>
	if (list->tail == node) {
 8007bfe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	list->head = node->next;
 8007c02:	680b      	ldr	r3, [r1, #0]
 8007c04:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (list->tail == node) {
 8007c08:	4291      	cmp	r1, r2
		list->tail = list->head;
 8007c0a:	bf08      	it	eq
 8007c0c:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
 8007c10:	4620      	mov	r0, r4
 8007c12:	f7ff ff8d 	bl	8007b30 <att_send_req>
}
 8007c16:	2000      	movs	r0, #0
 8007c18:	b003      	add	sp, #12
 8007c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007c1e <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
 8007c1e:	898a      	ldrh	r2, [r1, #12]
 8007c20:	6889      	ldr	r1, [r1, #8]
 8007c22:	2300      	movs	r3, #0
 8007c24:	f7ff bfc0 	b.w	8007ba8 <att_handle_rsp>

08007c28 <att_handle_exec_write_rsp>:
 8007c28:	f7ff bff9 	b.w	8007c1e <att_confirm>

08007c2c <att_handle_prepare_write_rsp>:
 8007c2c:	f7ff bff7 	b.w	8007c1e <att_confirm>

08007c30 <att_handle_write_rsp>:
 8007c30:	f7ff bff5 	b.w	8007c1e <att_confirm>

08007c34 <att_handle_read_mult_rsp>:
 8007c34:	f7ff bff3 	b.w	8007c1e <att_confirm>

08007c38 <att_handle_read_blob_rsp>:
 8007c38:	f7ff bff1 	b.w	8007c1e <att_confirm>

08007c3c <att_handle_read_rsp>:
 8007c3c:	f7ff bfef 	b.w	8007c1e <att_confirm>

08007c40 <att_handle_read_type_rsp>:
 8007c40:	f7ff bfed 	b.w	8007c1e <att_confirm>

08007c44 <att_handle_find_type_rsp>:
 8007c44:	f7ff bfeb 	b.w	8007c1e <att_confirm>

08007c48 <att_handle_find_info_rsp>:
 8007c48:	f7ff bfe9 	b.w	8007c1e <att_confirm>

08007c4c <att_mtu_rsp>:
{
 8007c4c:	b410      	push	{r4}
 8007c4e:	460a      	mov	r2, r1
	if (!att) {
 8007c50:	b190      	cbz	r0, 8007c78 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
 8007c52:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
 8007c54:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
 8007c56:	2b16      	cmp	r3, #22
 8007c58:	d805      	bhi.n	8007c66 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	4611      	mov	r1, r2
}
 8007c60:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
 8007c62:	f7ff bfa1 	b.w	8007ba8 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
 8007c66:	2b45      	cmp	r3, #69	; 0x45
 8007c68:	bf28      	it	cs
 8007c6a:	2345      	movcs	r3, #69	; 0x45
 8007c6c:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
 8007c6e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
 8007c72:	8992      	ldrh	r2, [r2, #12]
 8007c74:	2300      	movs	r3, #0
 8007c76:	e7f3      	b.n	8007c60 <att_mtu_rsp+0x14>
}
 8007c78:	bc10      	pop	{r4}
 8007c7a:	4770      	bx	lr

08007c7c <att_error_rsp>:
{
 8007c7c:	b430      	push	{r4, r5}
	if (!att->req) {
 8007c7e:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
 8007c82:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
 8007c84:	b172      	cbz	r2, 8007ca4 <att_error_rsp+0x28>
	if (att->req->buf) {
 8007c86:	6913      	ldr	r3, [r2, #16]
 8007c88:	b133      	cbz	r3, 8007c98 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
 8007c8a:	8995      	ldrh	r5, [r2, #12]
	buf->len = state->len;
 8007c8c:	89d2      	ldrh	r2, [r2, #14]
 8007c8e:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
 8007c90:	f103 0110 	add.w	r1, r3, #16
 8007c94:	4429      	add	r1, r5
 8007c96:	6099      	str	r1, [r3, #8]
	err = rsp->error;
 8007c98:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4611      	mov	r1, r2
}
 8007c9e:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
 8007ca0:	f7ff bf82 	b.w	8007ba8 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
 8007ca4:	230e      	movs	r3, #14
 8007ca6:	e7f8      	b.n	8007c9a <att_error_rsp+0x1e>

08007ca8 <att_reset>:
{
 8007ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8007caa:	f100 0394 	add.w	r3, r0, #148	; 0x94
 8007cae:	4605      	mov	r5, r0
 8007cb0:	f3bf 8f5b 	dmb	ish
 8007cb4:	e853 2f00 	ldrex	r2, [r3]
 8007cb8:	f042 0204 	orr.w	r2, r2, #4
 8007cbc:	e843 2100 	strex	r1, r2, [r3]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	d1f7      	bne.n	8007cb4 <att_reset+0xc>
 8007cc4:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
 8007cc8:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f00a f87d 	bl	8011dcc <_impl_k_sem_give>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f00a f87a 	bl	8011dcc <_impl_k_sem_give>
 8007cd8:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 8007cdc:	b98c      	cbnz	r4, 8007d02 <att_reset+0x5a>
	if (!att->req) {
 8007cde:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
 8007ce8:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
 8007cec:	b90b      	cbnz	r3, 8007cf2 <att_reset+0x4a>
}
 8007cee:	b003      	add	sp, #12
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
 8007cf2:	230e      	movs	r3, #14
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4628      	mov	r0, r5
}
 8007cf8:	b003      	add	sp, #12
 8007cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
 8007cfe:	f7ff bf53 	b.w	8007ba8 <att_handle_rsp>
	return node->next;
 8007d02:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
 8007d04:	6867      	ldr	r7, [r4, #4]
 8007d06:	b12f      	cbz	r7, 8007d14 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9400      	str	r4, [sp, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	210e      	movs	r1, #14
 8007d10:	4618      	mov	r0, r3
 8007d12:	47b8      	blx	r7
		att_req_destroy(req);
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff fc77 	bl	8007608 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 8007d1a:	2e00      	cmp	r6, #0
 8007d1c:	d0df      	beq.n	8007cde <att_reset+0x36>
 8007d1e:	4634      	mov	r4, r6
 8007d20:	6836      	ldr	r6, [r6, #0]
 8007d22:	e7ef      	b.n	8007d04 <att_reset+0x5c>

08007d24 <bt_att_disconnected>:
{
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4604      	mov	r4, r0
	att_reset(att);
 8007d28:	f7ff ffbe 	bl	8007ca8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	f001 f8e7 	bl	8008f00 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
 8007d32:	4620      	mov	r0, r4
 8007d34:	22e4      	movs	r2, #228	; 0xe4
 8007d36:	2100      	movs	r1, #0
}
 8007d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
 8007d3c:	f7f8 bdcc 	b.w	80008d8 <memset>

08007d40 <att_timeout>:
{
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
	att_reset(att);
 8007d44:	38a4      	subs	r0, #164	; 0xa4
 8007d46:	f7ff ffaf 	bl	8007ca8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8007d4a:	f854 0ca4 	ldr.w	r0, [r4, #-164]
 8007d4e:	f001 f8d7 	bl	8008f00 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f844 3ca4 	str.w	r3, [r4, #-164]
 8007d58:	bd10      	pop	{r4, pc}

08007d5a <read_cb>:
{
 8007d5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d5e:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007d60:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
 8007d62:	f8d1 9000 	ldr.w	r9, [r1]
{
 8007d66:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007d68:	3008      	adds	r0, #8
 8007d6a:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
 8007d6c:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007d70:	f009 fbc8 	bl	8011504 <net_buf_simple_add>
	data->err = 0x00;
 8007d74:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007d76:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
 8007d78:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 8007d7a:	2115      	movs	r1, #21
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f7ff fd79 	bl	8007874 <check_perm.isra.3>
 8007d82:	4605      	mov	r5, r0
 8007d84:	7420      	strb	r0, [r4, #16]
	if (data->err) {
 8007d86:	bb08      	cbnz	r0, 8007dcc <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007d88:	68a1      	ldr	r1, [r4, #8]
 8007d8a:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
 8007d8e:	898a      	ldrh	r2, [r1, #12]
 8007d90:	6889      	ldr	r1, [r1, #8]
 8007d92:	88a0      	ldrh	r0, [r4, #4]
 8007d94:	9000      	str	r0, [sp, #0]
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	6877      	ldr	r7, [r6, #4]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4640      	mov	r0, r8
 8007da2:	47b8      	blx	r7
	if (read < 0) {
 8007da4:	1e01      	subs	r1, r0, #0
 8007da6:	da0b      	bge.n	8007dc0 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
 8007da8:	f101 03ff 	add.w	r3, r1, #255	; 0xff
 8007dac:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 8007dae:	bf9a      	itte	ls
 8007db0:	4249      	negls	r1, r1
 8007db2:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
 8007db4:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
 8007db6:	7421      	strb	r1, [r4, #16]
}
 8007db8:	4628      	mov	r0, r5
 8007dba:	b003      	add	sp, #12
 8007dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
 8007dc0:	68a0      	ldr	r0, [r4, #8]
 8007dc2:	3008      	adds	r0, #8
 8007dc4:	f009 fb9e 	bl	8011504 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
 8007dc8:	2501      	movs	r5, #1
 8007dca:	e7f5      	b.n	8007db8 <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
 8007dcc:	463d      	mov	r5, r7
 8007dce:	e7f3      	b.n	8007db8 <read_cb+0x5e>

08007dd0 <bt_att_create_pdu>:
{
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	4614      	mov	r4, r2
	att = att_chan_get(conn);
 8007dd6:	f7ff fe34 	bl	8007a42 <att_chan_get>
	if (!att) {
 8007dda:	b180      	cbz	r0, 8007dfe <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
 8007ddc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8007de0:	3401      	adds	r4, #1
 8007de2:	429c      	cmp	r4, r3
 8007de4:	d80b      	bhi.n	8007dfe <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
 8007de6:	2100      	movs	r1, #0
 8007de8:	4608      	mov	r0, r1
 8007dea:	f7ff fb28 	bl	800743e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007dee:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
 8007df0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007df2:	3008      	adds	r0, #8
 8007df4:	f009 fb86 	bl	8011504 <net_buf_simple_add>
	hdr->code = op;
 8007df8:	7005      	strb	r5, [r0, #0]
}
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8007dfe:	2400      	movs	r4, #0
 8007e00:	e7fb      	b.n	8007dfa <bt_att_create_pdu+0x2a>
	...

08007e04 <att_indicate>:
{
 8007e04:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8007e06:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
 8007e08:	f101 0008 	add.w	r0, r1, #8
 8007e0c:	f009 fbf5 	bl	80115fa <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	211e      	movs	r1, #30
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7ff ffdb 	bl	8007dd0 <bt_att_create_pdu>
	if (!buf) {
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	b120      	cbz	r0, 8007e28 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
 8007e1e:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <att_indicate+0x28>)
 8007e20:	2104      	movs	r1, #4
 8007e22:	4620      	mov	r0, r4
 8007e24:	f7ff fb0e 	bl	8007444 <bt_l2cap_send_cb>
}
 8007e28:	2000      	movs	r0, #0
 8007e2a:	bd10      	pop	{r4, pc}
 8007e2c:	08007a7d 	.word	0x08007a7d

08007e30 <att_mtu_req>:
{
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
 8007e34:	688b      	ldr	r3, [r1, #8]
 8007e36:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 8007e38:	2d16      	cmp	r5, #22
{
 8007e3a:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 8007e3c:	d91f      	bls.n	8007e7e <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
 8007e3e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
 8007e42:	2202      	movs	r2, #2
 8007e44:	2103      	movs	r1, #3
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff ffc2 	bl	8007dd0 <bt_att_create_pdu>
	if (!pdu) {
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	b1c8      	cbz	r0, 8007e84 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
 8007e50:	2102      	movs	r1, #2
 8007e52:	3008      	adds	r0, #8
 8007e54:	f009 fb56 	bl	8011504 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
 8007e58:	2400      	movs	r4, #0
 8007e5a:	2345      	movs	r3, #69	; 0x45
 8007e5c:	7003      	strb	r3, [r0, #0]
 8007e5e:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <att_mtu_req+0x5c>)
 8007e62:	4640      	mov	r0, r8
 8007e64:	463a      	mov	r2, r7
 8007e66:	2104      	movs	r1, #4
 8007e68:	f7ff faec 	bl	8007444 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
 8007e6c:	2d45      	cmp	r5, #69	; 0x45
 8007e6e:	bf28      	it	cs
 8007e70:	2545      	movcs	r5, #69	; 0x45
 8007e72:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
 8007e74:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
 8007e78:	4620      	mov	r0, r4
 8007e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
 8007e7e:	2004      	movs	r0, #4
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
 8007e84:	200e      	movs	r0, #14
}
 8007e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08007aab 	.word	0x08007aab

08007e90 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	4688      	mov	r8, r1
 8007e96:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8007e98:	2101      	movs	r1, #1
 8007e9a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8007ea0:	f7ff ff96 	bl	8007dd0 <bt_att_create_pdu>
	if (!buf) {
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	b180      	cbz	r0, 8007eca <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
 8007ea8:	2104      	movs	r1, #4
 8007eaa:	3008      	adds	r0, #8
 8007eac:	f009 fb2a 	bl	8011504 <net_buf_simple_add>
	rsp->request = req;
 8007eb0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
 8007eb4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
 8007eb6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
 8007eba:	4622      	mov	r2, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <send_err_rsp.part.9+0x40>)
 8007ec0:	2104      	movs	r1, #4
}
 8007ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
 8007ec6:	f7ff babd 	b.w	8007444 <bt_l2cap_send_cb>
 8007eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ece:	bf00      	nop
 8007ed0:	08007aab 	.word	0x08007aab

08007ed4 <bt_att_recv>:
{
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 8007ed8:	898b      	ldrh	r3, [r1, #12]
{
 8007eda:	4604      	mov	r4, r0
 8007edc:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d05e      	beq.n	8007fa0 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
 8007ee2:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 8007ee4:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
 8007ee6:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
 8007eea:	f009 fb76 	bl	80115da <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
 8007eee:	4a2d      	ldr	r2, [pc, #180]	; (8007fa4 <bt_att_recv+0xd0>)
 8007ef0:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
 8007ef6:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
 8007efa:	45ae      	cmp	lr, r5
 8007efc:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 8007f00:	d118      	bne.n	8007f34 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
 8007f02:	4402      	add	r2, r0
 8007f04:	7895      	ldrb	r5, [r2, #2]
 8007f06:	2d01      	cmp	r5, #1
 8007f08:	d024      	beq.n	8007f54 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
 8007f0a:	2d05      	cmp	r5, #5
 8007f0c:	d133      	bne.n	8007f76 <bt_att_recv+0xa2>
 8007f0e:	f3bf 8f5b 	dmb	ish
 8007f12:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8007f16:	e852 3f00 	ldrex	r3, [r2]
 8007f1a:	f043 0e02 	orr.w	lr, r3, #2
 8007f1e:	e842 ec00 	strex	ip, lr, [r2]
 8007f22:	f1bc 0f00 	cmp.w	ip, #0
 8007f26:	d1f6      	bne.n	8007f16 <bt_att_recv+0x42>
 8007f28:	f3bf 8f5b 	dmb	ish
 8007f2c:	079b      	lsls	r3, r3, #30
 8007f2e:	d522      	bpl.n	8007f76 <bt_att_recv+0xa2>
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007f34:	3301      	adds	r3, #1
 8007f36:	2b1b      	cmp	r3, #27
 8007f38:	d1dd      	bne.n	8007ef6 <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f7ff fb4c 	bl	80075d8 <att_op_get_type>
 8007f40:	b370      	cbz	r0, 8007fa0 <bt_att_recv+0xcc>
	if (!req) {
 8007f42:	b36d      	cbz	r5, 8007fa0 <bt_att_recv+0xcc>
 8007f44:	2306      	movs	r3, #6
 8007f46:	2200      	movs	r2, #0
 8007f48:	4629      	mov	r1, r5
 8007f4a:	6820      	ldr	r0, [r4, #0]
}
 8007f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	f7ff bf9e 	b.w	8007e90 <send_err_rsp.part.9>
 8007f54:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8007f58:	f3bf 8f5b 	dmb	ish
 8007f5c:	e852 3f00 	ldrex	r3, [r2]
 8007f60:	f043 0e01 	orr.w	lr, r3, #1
 8007f64:	e842 ec00 	strex	ip, lr, [r2]
 8007f68:	f1bc 0f00 	cmp.w	ip, #0
 8007f6c:	d1f6      	bne.n	8007f5c <bt_att_recv+0x88>
 8007f6e:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
 8007f72:	07da      	lsls	r2, r3, #31
 8007f74:	d414      	bmi.n	8007fa0 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
 8007f76:	180b      	adds	r3, r1, r0
 8007f78:	89b1      	ldrh	r1, [r6, #12]
 8007f7a:	785a      	ldrb	r2, [r3, #1]
 8007f7c:	4291      	cmp	r1, r2
 8007f7e:	d30d      	bcc.n	8007f9c <bt_att_recv+0xc8>
		err = handler->func(att, buf);
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4620      	mov	r0, r4
 8007f86:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
 8007f88:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
 8007f8a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
 8007f8c:	d108      	bne.n	8007fa0 <bt_att_recv+0xcc>
 8007f8e:	b138      	cbz	r0, 8007fa0 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
 8007f90:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
 8007f92:	b129      	cbz	r1, 8007fa0 <bt_att_recv+0xcc>
 8007f94:	2200      	movs	r2, #0
 8007f96:	e7d8      	b.n	8007f4a <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
 8007f98:	2304      	movs	r3, #4
 8007f9a:	e7f9      	b.n	8007f90 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
 8007f9c:	2d01      	cmp	r5, #1
 8007f9e:	d0fb      	beq.n	8007f98 <bt_att_recv+0xc4>
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	0801377c 	.word	0x0801377c

08007fa8 <att_read_group_req>:
{
 8007fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8007fac:	898b      	ldrh	r3, [r1, #12]
 8007fae:	2b06      	cmp	r3, #6
{
 8007fb0:	b08d      	sub	sp, #52	; 0x34
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8007fb6:	d001      	beq.n	8007fbc <att_read_group_req+0x14>
 8007fb8:	2b14      	cmp	r3, #20
 8007fba:	d168      	bne.n	800808e <att_read_group_req+0xe6>
	req = (void *)buf->data;
 8007fbc:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
 8007fbe:	2104      	movs	r1, #4
	req = (void *)buf->data;
 8007fc0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
 8007fc4:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
 8007fc8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8007fca:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
 8007fcc:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
 8007fce:	f009 fb04 	bl	80115da <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff fccb 	bl	8007970 <uuid_create>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d059      	beq.n	8008092 <att_read_group_req+0xea>
	if (!start || !end) {
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	d05a      	beq.n	8008098 <att_read_group_req+0xf0>
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	2e00      	cmp	r6, #0
 8007fe6:	d056      	beq.n	8008096 <att_read_group_req+0xee>
	if (start > end) {
 8007fe8:	42b5      	cmp	r5, r6
 8007fea:	d855      	bhi.n	8008098 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8007fec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007ff0:	4669      	mov	r1, sp
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f88d 4000 	strb.w	r4, [sp]
 8007ff8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007ffc:	f7fc ff02 	bl	8004e04 <bt_uuid_cmp>
 8008000:	bb38      	cbnz	r0, 8008052 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
 8008002:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
 8008006:	2214      	movs	r2, #20
 8008008:	2100      	movs	r1, #0
 800800a:	a807      	add	r0, sp, #28
 800800c:	f7f8 fc64 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
 8008010:	2201      	movs	r2, #1
 8008012:	2111      	movs	r1, #17
 8008014:	4648      	mov	r0, r9
 8008016:	f7ff fedb 	bl	8007dd0 <bt_att_create_pdu>
 800801a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
 800801c:	2800      	cmp	r0, #0
 800801e:	d038      	beq.n	8008092 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8008020:	2101      	movs	r1, #1
 8008022:	3008      	adds	r0, #8
	data.uuid = uuid;
 8008024:	9708      	str	r7, [sp, #32]
	data.att = att;
 8008026:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 800802a:	f009 fa6b 	bl	8011504 <net_buf_simple_add>
	data.rsp->len = 0;
 800802e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8008030:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8008032:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
 8008034:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8008036:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <att_read_group_req+0x100>)
	data.group = NULL;
 8008038:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	f000 fe69 	bl	8008d14 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
 8008042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008044:	781c      	ldrb	r4, [r3, #0]
 8008046:	b9d4      	cbnz	r4, 800807e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
 8008048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804a:	f009 fa3b 	bl	80114c4 <net_buf_unref>
 800804e:	230a      	movs	r3, #10
 8008050:	e00c      	b.n	800806c <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
 8008052:	f642 0301 	movw	r3, #10241	; 0x2801
 8008056:	a901      	add	r1, sp, #4
 8008058:	4638      	mov	r0, r7
 800805a:	f88d 4004 	strb.w	r4, [sp, #4]
 800805e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008062:	f7fc fecf 	bl	8004e04 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8008066:	2800      	cmp	r0, #0
 8008068:	d0cb      	beq.n	8008002 <att_read_group_req+0x5a>
 800806a:	2310      	movs	r3, #16
 800806c:	462a      	mov	r2, r5
 800806e:	2110      	movs	r1, #16
 8008070:	4648      	mov	r0, r9
 8008072:	f7ff ff0d 	bl	8007e90 <send_err_rsp.part.9>
}
 8008076:	4620      	mov	r0, r4
 8008078:	b00d      	add	sp, #52	; 0x34
 800807a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <att_read_group_req+0x104>)
 8008080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008082:	2104      	movs	r1, #4
 8008084:	4648      	mov	r0, r9
 8008086:	f7ff f9dd 	bl	8007444 <bt_l2cap_send_cb>
		return 0;
 800808a:	2400      	movs	r4, #0
 800808c:	e7f3      	b.n	8008076 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
 800808e:	2404      	movs	r4, #4
 8008090:	e7f1      	b.n	8008076 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
 8008092:	240e      	movs	r4, #14
 8008094:	e7ef      	b.n	8008076 <att_read_group_req+0xce>
			*err = 0;
 8008096:	4635      	mov	r5, r6
 8008098:	2301      	movs	r3, #1
 800809a:	462a      	mov	r2, r5
 800809c:	2110      	movs	r1, #16
 800809e:	4648      	mov	r0, r9
 80080a0:	f7ff fef6 	bl	8007e90 <send_err_rsp.part.9>
 80080a4:	e7f1      	b.n	800808a <att_read_group_req+0xe2>
 80080a6:	bf00      	nop
 80080a8:	08007639 	.word	0x08007639
 80080ac:	08007aab 	.word	0x08007aab

080080b0 <att_read_mult_req>:
{
 80080b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 80080b4:	6804      	ldr	r4, [r0, #0]
{
 80080b6:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
 80080b8:	2214      	movs	r2, #20
{
 80080ba:	4606      	mov	r6, r0
 80080bc:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
 80080be:	a801      	add	r0, sp, #4
 80080c0:	2100      	movs	r1, #0
 80080c2:	f7f8 fc09 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
 80080c6:	2200      	movs	r2, #0
 80080c8:	210f      	movs	r1, #15
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff fe80 	bl	8007dd0 <bt_att_create_pdu>
 80080d0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
 80080d2:	b368      	cbz	r0, 8008130 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 80080d4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8008138 <att_read_mult_req+0x88>
	data.att = att;
 80080d8:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
 80080da:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 80080de:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d806      	bhi.n	80080f6 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <att_read_mult_req+0x84>)
 80080ea:	9a03      	ldr	r2, [sp, #12]
 80080ec:	2104      	movs	r1, #4
 80080ee:	4620      	mov	r0, r4
 80080f0:	f7ff f9a8 	bl	8007444 <bt_l2cap_send_cb>
 80080f4:	e018      	b.n	8008128 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
 80080f6:	4638      	mov	r0, r7
 80080f8:	f009 fa7f 	bl	80115fa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 80080fc:	ab01      	add	r3, sp, #4
 80080fe:	464a      	mov	r2, r9
 8008100:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
 8008102:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008104:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008108:	f000 fe04 	bl	8008d14 <bt_gatt_foreach_attr>
		if (data.err) {
 800810c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0e6      	beq.n	80080e2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
 8008114:	9803      	ldr	r0, [sp, #12]
 8008116:	f009 f9d5 	bl	80114c4 <net_buf_unref>
 800811a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800811e:	4632      	mov	r2, r6
 8008120:	210e      	movs	r1, #14
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff feb4 	bl	8007e90 <send_err_rsp.part.9>
	return 0;
 8008128:	2000      	movs	r0, #0
}
 800812a:	b007      	add	sp, #28
 800812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
 8008130:	200e      	movs	r0, #14
 8008132:	e7fa      	b.n	800812a <att_read_mult_req+0x7a>
 8008134:	08007aab 	.word	0x08007aab
 8008138:	08007d5b 	.word	0x08007d5b

0800813c <att_read_rsp>:
{
 800813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	4607      	mov	r7, r0
 8008142:	b086      	sub	sp, #24
 8008144:	460c      	mov	r4, r1
 8008146:	4690      	mov	r8, r2
	if (!handle) {
 8008148:	461d      	mov	r5, r3
 800814a:	b3a3      	cbz	r3, 80081b6 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
 800814c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
 800814e:	2214      	movs	r2, #20
 8008150:	2100      	movs	r1, #0
 8008152:	a801      	add	r0, sp, #4
 8008154:	f7f8 fbc0 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
 8008158:	2200      	movs	r2, #0
 800815a:	4641      	mov	r1, r8
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff fe37 	bl	8007dd0 <bt_att_create_pdu>
 8008162:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
 8008164:	b348      	cbz	r0, 80081ba <att_read_rsp+0x7e>
	data.offset = offset;
 8008166:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800816a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 800816e:	2301      	movs	r3, #1
 8008170:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008174:	4a12      	ldr	r2, [pc, #72]	; (80081c0 <att_read_rsp+0x84>)
	data.att = att;
 8008176:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008178:	ab01      	add	r3, sp, #4
 800817a:	4629      	mov	r1, r5
 800817c:	4628      	mov	r0, r5
 800817e:	f000 fdc9 	bl	8008d14 <bt_gatt_foreach_attr>
	if (data.err) {
 8008182:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8008186:	b17f      	cbz	r7, 80081a8 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
 8008188:	9803      	ldr	r0, [sp, #12]
 800818a:	f009 f99b 	bl	80114c4 <net_buf_unref>
	if (!req) {
 800818e:	b13c      	cbz	r4, 80081a0 <att_read_rsp+0x64>
 8008190:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008194:	462a      	mov	r2, r5
 8008196:	4621      	mov	r1, r4
 8008198:	4630      	mov	r0, r6
 800819a:	f7ff fe79 	bl	8007e90 <send_err_rsp.part.9>
		return 0;
 800819e:	2400      	movs	r4, #0
}
 80081a0:	4620      	mov	r0, r4
 80081a2:	b006      	add	sp, #24
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <att_read_rsp+0x88>)
 80081aa:	9a03      	ldr	r2, [sp, #12]
 80081ac:	2104      	movs	r1, #4
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff f948 	bl	8007444 <bt_l2cap_send_cb>
 80081b4:	e7f3      	b.n	800819e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
 80081b6:	2401      	movs	r4, #1
 80081b8:	e7f2      	b.n	80081a0 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
 80081ba:	240e      	movs	r4, #14
 80081bc:	e7f0      	b.n	80081a0 <att_read_rsp+0x64>
 80081be:	bf00      	nop
 80081c0:	08007d5b 	.word	0x08007d5b
 80081c4:	08007aab 	.word	0x08007aab

080081c8 <att_read_blob_req>:
{
 80081c8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
 80081ca:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
 80081cc:	8813      	ldrh	r3, [r2, #0]
 80081ce:	8852      	ldrh	r2, [r2, #2]
 80081d0:	9200      	str	r2, [sp, #0]
 80081d2:	210c      	movs	r1, #12
 80081d4:	220d      	movs	r2, #13
 80081d6:	f7ff ffb1 	bl	800813c <att_read_rsp>
}
 80081da:	b003      	add	sp, #12
 80081dc:	f85d fb04 	ldr.w	pc, [sp], #4

080081e0 <att_read_req>:
{
 80081e0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
 80081e2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
 80081e4:	2200      	movs	r2, #0
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	9200      	str	r2, [sp, #0]
 80081ea:	210a      	movs	r1, #10
 80081ec:	220b      	movs	r2, #11
 80081ee:	f7ff ffa5 	bl	800813c <att_read_rsp>
}
 80081f2:	b003      	add	sp, #12
 80081f4:	f85d fb04 	ldr.w	pc, [sp], #4

080081f8 <att_read_type_req>:
{
 80081f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 80081fc:	898b      	ldrh	r3, [r1, #12]
 80081fe:	2b06      	cmp	r3, #6
{
 8008200:	b08d      	sub	sp, #52	; 0x34
 8008202:	4607      	mov	r7, r0
 8008204:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8008206:	d001      	beq.n	800820c <att_read_type_req+0x14>
 8008208:	2b14      	cmp	r3, #20
 800820a:	d152      	bne.n	80082b2 <att_read_type_req+0xba>
	req = (void *)buf->data;
 800820c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
 800820e:	2104      	movs	r1, #4
	req = (void *)buf->data;
 8008210:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
 8008214:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008218:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 800821a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
 800821c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
 8008220:	f009 f9db 	bl	80115da <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
 8008224:	4631      	mov	r1, r6
 8008226:	4640      	mov	r0, r8
 8008228:	f7ff fba2 	bl	8007970 <uuid_create>
 800822c:	b198      	cbz	r0, 8008256 <att_read_type_req+0x5e>
	if (!start || !end) {
 800822e:	2d00      	cmp	r5, #0
 8008230:	d042      	beq.n	80082b8 <att_read_type_req+0xc0>
 8008232:	2c00      	cmp	r4, #0
 8008234:	d03f      	beq.n	80082b6 <att_read_type_req+0xbe>
	if (start > end) {
 8008236:	42a5      	cmp	r5, r4
 8008238:	d83e      	bhi.n	80082b8 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
 800823a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
 800823c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
 800823e:	2100      	movs	r1, #0
 8008240:	eb0d 0002 	add.w	r0, sp, r2
 8008244:	f7f8 fb48 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
 8008248:	2201      	movs	r2, #1
 800824a:	2109      	movs	r1, #9
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fdbf 	bl	8007dd0 <bt_att_create_pdu>
 8008252:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
 8008254:	b908      	cbnz	r0, 800825a <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
 8008256:	240e      	movs	r4, #14
 8008258:	e027      	b.n	80082aa <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 800825a:	2101      	movs	r1, #1
 800825c:	3008      	adds	r0, #8
	data.att = att;
 800825e:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
 8008260:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8008264:	f009 f94e 	bl	8011504 <net_buf_simple_add>
	data.rsp->len = 0;
 8008268:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 800826a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 800826c:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 800826e:	4621      	mov	r1, r4
	data.rsp->len = 0;
 8008270:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 8008272:	4a14      	ldr	r2, [pc, #80]	; (80082c4 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008274:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 8008278:	4628      	mov	r0, r5
 800827a:	ab06      	add	r3, sp, #24
 800827c:	f000 fd4a 	bl	8008d14 <bt_gatt_foreach_attr>
	if (data.err) {
 8008280:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 8008284:	b15c      	cbz	r4, 800829e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
 8008286:	9808      	ldr	r0, [sp, #32]
 8008288:	f009 f91c 	bl	80114c4 <net_buf_unref>
 800828c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008290:	462a      	mov	r2, r5
 8008292:	2108      	movs	r1, #8
 8008294:	4630      	mov	r0, r6
 8008296:	f7ff fdfb 	bl	8007e90 <send_err_rsp.part.9>
		return 0;
 800829a:	2400      	movs	r4, #0
 800829c:	e005      	b.n	80082aa <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800829e:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <att_read_type_req+0xd0>)
 80082a0:	9a08      	ldr	r2, [sp, #32]
 80082a2:	2104      	movs	r1, #4
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff f8cd 	bl	8007444 <bt_l2cap_send_cb>
}
 80082aa:	4620      	mov	r0, r4
 80082ac:	b00d      	add	sp, #52	; 0x34
 80082ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
 80082b2:	2404      	movs	r4, #4
 80082b4:	e7f9      	b.n	80082aa <att_read_type_req+0xb2>
			*err = 0;
 80082b6:	4625      	mov	r5, r4
 80082b8:	2301      	movs	r3, #1
 80082ba:	462a      	mov	r2, r5
 80082bc:	2108      	movs	r1, #8
 80082be:	4648      	mov	r0, r9
 80082c0:	e7e9      	b.n	8008296 <att_read_type_req+0x9e>
 80082c2:	bf00      	nop
 80082c4:	080078b5 	.word	0x080078b5
 80082c8:	08007aab 	.word	0x08007aab

080082cc <att_find_type_req>:
{
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 80082d0:	f8d0 8000 	ldr.w	r8, [r0]
{
 80082d4:	4606      	mov	r6, r0
	req = (void *)buf->data;
 80082d6:	4608      	mov	r0, r1
{
 80082d8:	b086      	sub	sp, #24
	req = (void *)buf->data;
 80082da:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
 80082de:	460f      	mov	r7, r1
	value = net_buf_pull(buf, sizeof(*req));
 80082e0:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
 80082e2:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 80082e4:	885d      	ldrh	r5, [r3, #2]
	type = sys_le16_to_cpu(req->type);
 80082e6:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
 80082ea:	f009 f976 	bl	80115da <net_buf_simple_pull>
 80082ee:	4681      	mov	r9, r0
	if (!start || !end) {
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	d046      	beq.n	8008382 <att_find_type_req+0xb6>
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	d043      	beq.n	8008380 <att_find_type_req+0xb4>
	if (start > end) {
 80082f8:	42ac      	cmp	r4, r5
 80082fa:	d842      	bhi.n	8008382 <att_find_type_req+0xb6>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
 80082fc:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
 8008300:	d12a      	bne.n	8008358 <att_find_type_req+0x8c>
				 buf->len);
 8008302:	f8b7 800c 	ldrh.w	r8, [r7, #12]
	struct bt_conn *conn = att->chan.chan.conn;
 8008306:	6837      	ldr	r7, [r6, #0]
	memset(&data, 0, sizeof(data));
 8008308:	2214      	movs	r2, #20
 800830a:	2100      	movs	r1, #0
 800830c:	a801      	add	r0, sp, #4
 800830e:	f7f8 fae3 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
 8008312:	2200      	movs	r2, #0
 8008314:	2107      	movs	r1, #7
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff fd5a 	bl	8007dd0 <bt_att_create_pdu>
 800831c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
 800831e:	b368      	cbz	r0, 800837c <att_find_type_req+0xb0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008320:	230a      	movs	r3, #10
	data.att = att;
 8008322:	9601      	str	r6, [sp, #4]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008324:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008328:	4629      	mov	r1, r5
	data.group = NULL;
 800832a:	2600      	movs	r6, #0
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 800832c:	ab01      	add	r3, sp, #4
 800832e:	4a16      	ldr	r2, [pc, #88]	; (8008388 <att_find_type_req+0xbc>)
	data.group = NULL;
 8008330:	9603      	str	r6, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008332:	4620      	mov	r0, r4
	data.value = value;
 8008334:	f8cd 9010 	str.w	r9, [sp, #16]
	return att_find_type_rsp(att, start_handle, end_handle, value,
 8008338:	f88d 8014 	strb.w	r8, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 800833c:	f000 fcea 	bl	8008d14 <bt_gatt_foreach_attr>
	if (data.err) {
 8008340:	f89d 5015 	ldrb.w	r5, [sp, #21]
 8008344:	b19d      	cbz	r5, 800836e <att_find_type_req+0xa2>
		net_buf_unref(data.buf);
 8008346:	9802      	ldr	r0, [sp, #8]
 8008348:	f009 f8bc 	bl	80114c4 <net_buf_unref>
 800834c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008350:	4622      	mov	r2, r4
 8008352:	2106      	movs	r1, #6
 8008354:	4638      	mov	r0, r7
 8008356:	e003      	b.n	8008360 <att_find_type_req+0x94>
 8008358:	230a      	movs	r3, #10
 800835a:	4622      	mov	r2, r4
 800835c:	2106      	movs	r1, #6
 800835e:	4640      	mov	r0, r8
 8008360:	f7ff fd96 	bl	8007e90 <send_err_rsp.part.9>
		return 0;
 8008364:	2500      	movs	r5, #0
}
 8008366:	4628      	mov	r0, r5
 8008368:	b006      	add	sp, #24
 800836a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800836e:	4b07      	ldr	r3, [pc, #28]	; (800838c <att_find_type_req+0xc0>)
 8008370:	9a02      	ldr	r2, [sp, #8]
 8008372:	2104      	movs	r1, #4
 8008374:	4638      	mov	r0, r7
 8008376:	f7ff f865 	bl	8007444 <bt_l2cap_send_cb>
 800837a:	e7f4      	b.n	8008366 <att_find_type_req+0x9a>
		return BT_ATT_ERR_UNLIKELY;
 800837c:	250e      	movs	r5, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
 800837e:	e7f2      	b.n	8008366 <att_find_type_req+0x9a>
			*err = 0;
 8008380:	462c      	mov	r4, r5
 8008382:	2301      	movs	r3, #1
 8008384:	e7e9      	b.n	800835a <att_find_type_req+0x8e>
 8008386:	bf00      	nop
 8008388:	080077a1 	.word	0x080077a1
 800838c:	08007aab 	.word	0x08007aab

08008390 <att_find_info_req>:
{
 8008390:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
 8008392:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
 8008394:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008396:	881d      	ldrh	r5, [r3, #0]
{
 8008398:	b085      	sub	sp, #20
 800839a:	4607      	mov	r7, r0
	if (!start || !end) {
 800839c:	b375      	cbz	r5, 80083fc <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
 800839e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
 80083a0:	b35c      	cbz	r4, 80083fa <att_find_info_req+0x6a>
	if (start > end) {
 80083a2:	42a5      	cmp	r5, r4
 80083a4:	d82a      	bhi.n	80083fc <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
 80083a6:	2210      	movs	r2, #16
 80083a8:	2100      	movs	r1, #0
 80083aa:	4668      	mov	r0, sp
 80083ac:	f7f8 fa94 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
 80083b0:	2200      	movs	r2, #0
 80083b2:	2105      	movs	r1, #5
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff fd0b 	bl	8007dd0 <bt_att_create_pdu>
 80083ba:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
 80083bc:	b910      	cbnz	r0, 80083c4 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
 80083be:	200e      	movs	r0, #14
}
 80083c0:	b005      	add	sp, #20
 80083c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 80083c4:	4621      	mov	r1, r4
 80083c6:	466b      	mov	r3, sp
 80083c8:	4a0d      	ldr	r2, [pc, #52]	; (8008400 <att_find_info_req+0x70>)
	data.att = att;
 80083ca:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 fca1 	bl	8008d14 <bt_gatt_foreach_attr>
	if (!data.rsp) {
 80083d2:	9c02      	ldr	r4, [sp, #8]
 80083d4:	b94c      	cbnz	r4, 80083ea <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
 80083d6:	9801      	ldr	r0, [sp, #4]
 80083d8:	f009 f874 	bl	80114c4 <net_buf_unref>
 80083dc:	230a      	movs	r3, #10
 80083de:	462a      	mov	r2, r5
 80083e0:	2104      	movs	r1, #4
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7ff fd54 	bl	8007e90 <send_err_rsp.part.9>
 80083e8:	e005      	b.n	80083f6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 80083ea:	4b06      	ldr	r3, [pc, #24]	; (8008404 <att_find_info_req+0x74>)
 80083ec:	9a01      	ldr	r2, [sp, #4]
 80083ee:	2104      	movs	r1, #4
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff f827 	bl	8007444 <bt_l2cap_send_cb>
		return 0;
 80083f6:	2000      	movs	r0, #0
 80083f8:	e7e2      	b.n	80083c0 <att_find_info_req+0x30>
			*err = 0;
 80083fa:	4625      	mov	r5, r4
 80083fc:	2301      	movs	r3, #1
 80083fe:	e7ee      	b.n	80083de <att_find_info_req+0x4e>
 8008400:	08007707 	.word	0x08007707
 8008404:	08007aab 	.word	0x08007aab

08008408 <att_write_rsp.part.10.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
 8008408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	4690      	mov	r8, r2
 8008410:	4605      	mov	r5, r0
 8008412:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
 8008414:	2218      	movs	r2, #24
 8008416:	2100      	movs	r1, #0
 8008418:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
 800841a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
 800841c:	f7f8 fa5c 	bl	80008d8 <memset>
	if (rsp) {
 8008420:	f1b8 0f00 	cmp.w	r8, #0
 8008424:	d11f      	bne.n	8008466 <att_write_rsp.part.10.constprop.14+0x5e>
	data.offset = offset;
 8008426:	2300      	movs	r3, #0
 8008428:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
 800842c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800842e:	9303      	str	r3, [sp, #12]
	data.len = len;
 8008430:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008434:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008438:	2301      	movs	r3, #1
 800843a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 800843e:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <att_write_rsp.part.10.constprop.14+0xa4>)
	data.conn = conn;
 8008440:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 8008442:	466b      	mov	r3, sp
 8008444:	4639      	mov	r1, r7
 8008446:	4638      	mov	r0, r7
	data.op = op;
 8008448:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 800844c:	f000 fc62 	bl	8008d14 <bt_gatt_foreach_attr>
	if (data.err) {
 8008450:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8008454:	b98c      	cbnz	r4, 800847a <att_write_rsp.part.10.constprop.14+0x72>
	if (data.buf) {
 8008456:	9a01      	ldr	r2, [sp, #4]
 8008458:	b1b2      	cbz	r2, 8008488 <att_write_rsp.part.10.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
 800845a:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <att_write_rsp.part.10.constprop.14+0xa8>)
 800845c:	2104      	movs	r1, #4
 800845e:	4628      	mov	r0, r5
 8008460:	f7fe fff0 	bl	8007444 <bt_l2cap_send_cb>
 8008464:	e011      	b.n	800848a <att_write_rsp.part.10.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
 8008466:	2200      	movs	r2, #0
 8008468:	4641      	mov	r1, r8
 800846a:	4628      	mov	r0, r5
 800846c:	f7ff fcb0 	bl	8007dd0 <bt_att_create_pdu>
 8008470:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
 8008472:	2800      	cmp	r0, #0
 8008474:	d1d7      	bne.n	8008426 <att_write_rsp.part.10.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
 8008476:	240e      	movs	r4, #14
 8008478:	e007      	b.n	800848a <att_write_rsp.part.10.constprop.14+0x82>
		if (rsp) {
 800847a:	f1b8 0f00 	cmp.w	r8, #0
 800847e:	d00f      	beq.n	80084a0 <att_write_rsp.part.10.constprop.14+0x98>
			net_buf_unref(data.buf);
 8008480:	9801      	ldr	r0, [sp, #4]
 8008482:	f009 f81f 	bl	80114c4 <net_buf_unref>
	if (!req) {
 8008486:	b926      	cbnz	r6, 8008492 <att_write_rsp.part.10.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 8008488:	2400      	movs	r4, #0
}
 800848a:	4620      	mov	r0, r4
 800848c:	b006      	add	sp, #24
 800848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008492:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008496:	463a      	mov	r2, r7
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fcf8 	bl	8007e90 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 80084a0:	2e18      	cmp	r6, #24
 80084a2:	d1f1      	bne.n	8008488 <att_write_rsp.part.10.constprop.14+0x80>
 80084a4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80084a8:	e7ef      	b.n	800848a <att_write_rsp.part.10.constprop.14+0x82>
 80084aa:	bf00      	nop
 80084ac:	08007ad9 	.word	0x08007ad9
 80084b0:	08007aab 	.word	0x08007aab

080084b4 <att_signed_write_cmd>:
{
 80084b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
 80084b8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
 80084ba:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
 80084bc:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
 80084c0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
 80084c2:	4620      	mov	r0, r4
 80084c4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
 80084c6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
 80084ca:	f009 f861 	bl	8011590 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
 80084ce:	4629      	mov	r1, r5
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 fd4a 	bl	8008f6a <bt_smp_sign_verify>
	if (err) {
 80084d6:	4607      	mov	r7, r0
 80084d8:	b9c8      	cbnz	r0, 800850e <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
 80084da:	2101      	movs	r1, #1
 80084dc:	4620      	mov	r0, r4
 80084de:	f009 f87c 	bl	80115da <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
 80084e2:	2102      	movs	r1, #2
 80084e4:	4620      	mov	r0, r4
 80084e6:	f009 f878 	bl	80115da <net_buf_simple_pull>
	if (!handle) {
 80084ea:	f1b8 0f00 	cmp.w	r8, #0
 80084ee:	d010      	beq.n	8008512 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
 80084f0:	7b2b      	ldrb	r3, [r5, #12]
 80084f2:	3b0c      	subs	r3, #12
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	68ab      	ldr	r3, [r5, #8]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	463a      	mov	r2, r7
 80084fe:	4643      	mov	r3, r8
 8008500:	4639      	mov	r1, r7
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ff80 	bl	8008408 <att_write_rsp.part.10.constprop.14>
}
 8008508:	b002      	add	sp, #8
 800850a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 800850e:	2000      	movs	r0, #0
 8008510:	e7fa      	b.n	8008508 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
 8008512:	2001      	movs	r0, #1
 8008514:	e7f8      	b.n	8008508 <att_signed_write_cmd+0x54>

08008516 <att_write_cmd>:
{
 8008516:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8008518:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
 800851a:	f101 0008 	add.w	r0, r1, #8
{
 800851e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 8008520:	f009 f86b 	bl	80115fa <net_buf_simple_pull_le16>
	if (!handle) {
 8008524:	4603      	mov	r3, r0
 8008526:	b150      	cbz	r0, 800853e <att_write_cmd+0x28>
 8008528:	7b22      	ldrb	r2, [r4, #12]
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	68a2      	ldr	r2, [r4, #8]
 800852e:	9200      	str	r2, [sp, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	4611      	mov	r1, r2
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff ff67 	bl	8008408 <att_write_rsp.part.10.constprop.14>
}
 800853a:	b003      	add	sp, #12
 800853c:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
 800853e:	2001      	movs	r0, #1
 8008540:	e7fb      	b.n	800853a <att_write_cmd+0x24>

08008542 <att_write_req>:
{
 8008542:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8008544:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
 8008546:	f101 0008 	add.w	r0, r1, #8
{
 800854a:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 800854c:	f009 f855 	bl	80115fa <net_buf_simple_pull_le16>
	if (!handle) {
 8008550:	4603      	mov	r3, r0
 8008552:	b150      	cbz	r0, 800856a <att_write_req+0x28>
 8008554:	7b22      	ldrb	r2, [r4, #12]
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	68a2      	ldr	r2, [r4, #8]
 800855a:	9200      	str	r2, [sp, #0]
 800855c:	2112      	movs	r1, #18
 800855e:	2213      	movs	r2, #19
 8008560:	4628      	mov	r0, r5
 8008562:	f7ff ff51 	bl	8008408 <att_write_rsp.part.10.constprop.14>
}
 8008566:	b003      	add	sp, #12
 8008568:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
 800856a:	2001      	movs	r0, #1
 800856c:	e7fb      	b.n	8008566 <att_write_req+0x24>
	...

08008570 <bt_att_init>:

void bt_att_init(void)
{
 8008570:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 8008572:	4803      	ldr	r0, [pc, #12]	; (8008580 <bt_att_init+0x10>)
 8008574:	f7fe fec0 	bl	80072f8 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
 8008578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
 800857c:	f000 bb3e 	b.w	8008bfc <bt_gatt_init>
 8008580:	20005a18 	.word	0x20005a18

08008584 <bt_att_get_mtu>:

u16_t bt_att_get_mtu(struct bt_conn *conn)
{
 8008584:	b508      	push	{r3, lr}
	struct bt_att *att;

	att = att_chan_get(conn);
 8008586:	f7ff fa5c 	bl	8007a42 <att_chan_get>
	if (!att) {
 800858a:	b108      	cbz	r0, 8008590 <bt_att_get_mtu+0xc>
		return 0;
	}

	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
 800858c:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
}
 8008590:	bd08      	pop	{r3, pc}

08008592 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
 8008592:	b510      	push	{r4, lr}
 8008594:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
 8008596:	b1d8      	cbz	r0, 80085d0 <bt_att_req_send+0x3e>
 8008598:	b1d1      	cbz	r1, 80085d0 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
 800859a:	f7ff fa52 	bl	8007a42 <att_chan_get>
	if (!att) {
 800859e:	4603      	mov	r3, r0
 80085a0:	b1c8      	cbz	r0, 80085d6 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
 80085a2:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80085a6:	b172      	cbz	r2, 80085c6 <bt_att_req_send+0x34>
	if (!list->tail) {
 80085a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	node->next = NULL;
 80085ac:	2000      	movs	r0, #0
 80085ae:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
 80085b0:	b92a      	cbnz	r2, 80085be <bt_att_req_send+0x2c>
		list->tail = node;
 80085b2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		list->head = node;
 80085b6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
 80085ba:	4610      	mov	r0, r2
 80085bc:	bd10      	pop	{r4, pc}
		list->tail->next = node;
 80085be:	6014      	str	r4, [r2, #0]
		list->tail = node;
 80085c0:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 80085c4:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
 80085c6:	4621      	mov	r1, r4
}
 80085c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
 80085cc:	f7ff bab0 	b.w	8007b30 <att_send_req>
		return -EINVAL;
 80085d0:	f06f 0015 	mvn.w	r0, #21
 80085d4:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
 80085d6:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 80085da:	bd10      	pop	{r4, pc}

080085dc <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
 80085dc:	4770      	bx	lr

080085de <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
 80085de:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
 80085e0:	2000      	movs	r0, #0
 80085e2:	4770      	bx	lr

080085e4 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
 80085e4:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
 80085e6:	2300      	movs	r3, #0
 80085e8:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
 80085ea:	461a      	mov	r2, r3
 80085ec:	42aa      	cmp	r2, r5
 80085ee:	d107      	bne.n	8008600 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
 80085f0:	890a      	ldrh	r2, [r1, #8]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d00d      	beq.n	8008612 <gatt_ccc_changed+0x2e>
		ccc->value = value;
 80085f6:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
 80085f8:	68ca      	ldr	r2, [r1, #12]
	}
}
 80085fa:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
 80085fc:	4619      	mov	r1, r3
 80085fe:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
 8008600:	680c      	ldr	r4, [r1, #0]
 8008602:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
 8008606:	3201      	adds	r2, #1
 8008608:	8924      	ldrh	r4, [r4, #8]
 800860a:	42a3      	cmp	r3, r4
 800860c:	bf38      	it	cc
 800860e:	4623      	movcc	r3, r4
 8008610:	e7ec      	b.n	80085ec <gatt_ccc_changed+0x8>
}
 8008612:	bc30      	pop	{r4, r5}
 8008614:	4770      	bx	lr

08008616 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
 8008616:	b410      	push	{r4}
 8008618:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
 800861a:	699c      	ldr	r4, [r3, #24]
 800861c:	460a      	mov	r2, r1
 800861e:	6959      	ldr	r1, [r3, #20]
 8008620:	4623      	mov	r3, r4
}
 8008622:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
 8008624:	4718      	bx	r3

08008626 <bt_gatt_attr_write_ccc>:
{
 8008626:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	4689      	mov	r9, r1
 800862c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
 8008630:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
 8008634:	2902      	cmp	r1, #2
{
 8008636:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
 8008638:	d84d      	bhi.n	80086d6 <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
 800863a:	4419      	add	r1, r3
 800863c:	2902      	cmp	r1, #2
 800863e:	461e      	mov	r6, r3
 8008640:	dc4c      	bgt.n	80086dc <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
 8008642:	7853      	ldrb	r3, [r2, #1]
 8008644:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
 8008646:	2500      	movs	r5, #0
 8008648:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	429d      	cmp	r5, r3
 8008650:	d207      	bcs.n	8008662 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8008658:	3101      	adds	r1, #1
 800865a:	4650      	mov	r0, sl
 800865c:	f7fe fc4c 	bl	8006ef8 <bt_conn_addr_le_cmp>
 8008660:	b948      	cbnz	r0, 8008676 <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	429d      	cmp	r5, r3
 8008666:	d130      	bne.n	80086ca <bt_gatt_attr_write_ccc+0xa4>
 8008668:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
 800866c:	4545      	cmp	r5, r8
 800866e:	d104      	bne.n	800867a <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 8008670:	f06f 0610 	mvn.w	r6, #16
 8008674:	e026      	b.n	80086c4 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
 8008676:	3501      	adds	r5, #1
 8008678:	e7e8      	b.n	800864c <bt_gatt_attr_write_ccc+0x26>
 800867a:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	eb03 000b 	add.w	r0, r3, fp
 8008684:	f813 300b 	ldrb.w	r3, [r3, fp]
 8008688:	b113      	cbz	r3, 8008690 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
 800868a:	f108 0801 	add.w	r8, r8, #1
 800868e:	e7ed      	b.n	800866c <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
 8008690:	2207      	movs	r2, #7
 8008692:	f10a 0144 	add.w	r1, sl, #68	; 0x44
 8008696:	3001      	adds	r0, #1
 8008698:	f7f8 f8f2 	bl	8000880 <memcpy>
			if (value) {
 800869c:	b11f      	cbz	r7, 80086a6 <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	4598      	cmp	r8, r3
 80086aa:	d0e1      	beq.n	8008670 <bt_gatt_attr_write_ccc+0x4a>
 80086ac:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
 80086b4:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
 80086b6:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
 80086b8:	42bb      	cmp	r3, r7
 80086ba:	d003      	beq.n	80086c4 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
 80086bc:	4621      	mov	r1, r4
 80086be:	4648      	mov	r0, r9
 80086c0:	f7ff ff90 	bl	80085e4 <gatt_ccc_changed>
}
 80086c4:	4630      	mov	r0, r6
 80086c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
 80086ca:	2f00      	cmp	r7, #0
 80086cc:	d1ef      	bne.n	80086ae <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	012b      	lsls	r3, r5, #4
 80086d2:	54d7      	strb	r7, [r2, r3]
 80086d4:	e7eb      	b.n	80086ae <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80086d6:	f06f 0606 	mvn.w	r6, #6
 80086da:	e7f3      	b.n	80086c4 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 80086dc:	f06f 060c 	mvn.w	r6, #12
 80086e0:	e7f0      	b.n	80086c4 <bt_gatt_attr_write_ccc+0x9e>

080086e2 <gatt_notify>:
{
 80086e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e6:	468a      	mov	sl, r1
 80086e8:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
 80086ea:	211b      	movs	r1, #27
 80086ec:	1c9a      	adds	r2, r3, #2
{
 80086ee:	4680      	mov	r8, r0
 80086f0:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
 80086f2:	f7ff fb6d 	bl	8007dd0 <bt_att_create_pdu>
	if (!buf) {
 80086f6:	4604      	mov	r4, r0
 80086f8:	b1d0      	cbz	r0, 8008730 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
 80086fa:	f100 0708 	add.w	r7, r0, #8
 80086fe:	2102      	movs	r1, #2
 8008700:	4638      	mov	r0, r7
 8008702:	f008 feff 	bl	8011504 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
 8008706:	4605      	mov	r5, r0
	net_buf_add(buf, len);
 8008708:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
 800870a:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
 800870e:	4638      	mov	r0, r7
 8008710:	f008 fef8 	bl	8011504 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
 8008714:	4632      	mov	r2, r6
 8008716:	4649      	mov	r1, r9
 8008718:	4628      	mov	r0, r5
 800871a:	f7f8 f8b1 	bl	8000880 <memcpy>
 800871e:	4640      	mov	r0, r8
 8008720:	2300      	movs	r3, #0
 8008722:	4622      	mov	r2, r4
 8008724:	2104      	movs	r1, #4
 8008726:	f7fe fe8d 	bl	8007444 <bt_l2cap_send_cb>
	return 0;
 800872a:	2000      	movs	r0, #0
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
 8008730:	f06f 000b 	mvn.w	r0, #11
}
 8008734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008738 <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
 8008738:	8c0a      	ldrh	r2, [r1, #32]
{
 800873a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 800873e:	3202      	adds	r2, #2
{
 8008740:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 8008742:	211d      	movs	r1, #29
{
 8008744:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 8008746:	f7ff fb43 	bl	8007dd0 <bt_att_create_pdu>
	if (!buf) {
 800874a:	4605      	mov	r5, r0
 800874c:	b320      	cbz	r0, 8008798 <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
 800874e:	f100 0608 	add.w	r6, r0, #8
 8008752:	2102      	movs	r1, #2
 8008754:	4630      	mov	r0, r6
 8008756:	f008 fed5 	bl	8011504 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 800875a:	6963      	ldr	r3, [r4, #20]

	net_buf_add(buf, params->len);
 800875c:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 800875e:	8a1b      	ldrh	r3, [r3, #16]
 8008760:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
 8008762:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 8008764:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
 8008768:	f008 fecc 	bl	8011504 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
 800876c:	8c22      	ldrh	r2, [r4, #32]
 800876e:	69e1      	ldr	r1, [r4, #28]
 8008770:	4638      	mov	r0, r7
 8008772:	f7f8 f885 	bl	8000880 <memcpy>
		req->func = func;
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <gatt_indicate+0x68>)
 8008778:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
 800877a:	2300      	movs	r3, #0
		req->buf = buf;
 800877c:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
 800877e:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
 8008780:	4621      	mov	r1, r4
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff ff05 	bl	8008592 <bt_att_req_send>
	if (err) {
 8008788:	4604      	mov	r4, r0
 800878a:	b110      	cbz	r0, 8008792 <gatt_indicate+0x5a>
		net_buf_unref(buf);
 800878c:	4628      	mov	r0, r5
 800878e:	f008 fe99 	bl	80114c4 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
 8008792:	4620      	mov	r0, r4
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
 8008798:	f06f 040b 	mvn.w	r4, #11
 800879c:	e7f9      	b.n	8008792 <gatt_indicate+0x5a>
 800879e:	bf00      	nop
 80087a0:	08008617 	.word	0x08008617

080087a4 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
 80087a6:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
 80087a8:	6813      	ldr	r3, [r2, #0]
{
 80087aa:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
 80087ac:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
 80087ae:	b153      	cbz	r3, 80087c6 <gatt_register+0x22>
 80087b0:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
 80087b2:	b343      	cbz	r3, 8008806 <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
 80087b4:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 80087b8:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80087bc:	2614      	movs	r6, #20
 80087be:	fb06 3304 	mla	r3, r6, r4, r3
 80087c2:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80087c6:	2414      	movs	r4, #20
 80087c8:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
 80087cc:	b109      	cbz	r1, 80087d2 <gatt_register+0x2e>
 80087ce:	42a9      	cmp	r1, r5
 80087d0:	d108      	bne.n	80087e4 <gatt_register+0x40>
	node->next = NULL;
 80087d2:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
 80087d4:	f100 0108 	add.w	r1, r0, #8
 80087d8:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
 80087da:	6850      	ldr	r0, [r2, #4]
 80087dc:	b978      	cbnz	r0, 80087fe <gatt_register+0x5a>
		list->tail = node;
 80087de:	6051      	str	r1, [r2, #4]
		list->head = node;
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
 80087e4:	8a0c      	ldrh	r4, [r1, #16]
 80087e6:	b92c      	cbnz	r4, 80087f4 <gatt_register+0x50>
			attrs->handle = ++handle;
 80087e8:	3301      	adds	r3, #1
 80087ea:	b29c      	uxth	r4, r3
 80087ec:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
 80087ee:	3114      	adds	r1, #20
 80087f0:	4623      	mov	r3, r4
 80087f2:	e7eb      	b.n	80087cc <gatt_register+0x28>
		} else if (attrs->handle > handle) {
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d3fa      	bcc.n	80087ee <gatt_register+0x4a>
			return -EINVAL;
 80087f8:	f06f 0015 	mvn.w	r0, #21
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
 80087fe:	6001      	str	r1, [r0, #0]
		list->tail = node;
 8008800:	6051      	str	r1, [r2, #4]
	return 0;
 8008802:	4618      	mov	r0, r3
 8008804:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	deff      	udf	#255	; 0xff
 800880a:	bf00      	nop
 800880c:	20000978 	.word	0x20000978

08008810 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
 8008810:	b510      	push	{r4, lr}
 8008812:	4b17      	ldr	r3, [pc, #92]	; (8008870 <sc_indicate.constprop.17+0x60>)
 8008814:	f3bf 8f5b 	dmb	ish
 8008818:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800881c:	e852 4f00 	ldrex	r4, [r2]
 8008820:	f044 0e01 	orr.w	lr, r4, #1
 8008824:	e842 ec00 	strex	ip, lr, [r2]
 8008828:	f1bc 0f00 	cmp.w	ip, #0
 800882c:	d1f6      	bne.n	800881c <sc_indicate.constprop.17+0xc>
 800882e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
 8008832:	07e2      	lsls	r2, r4, #31
 8008834:	d402      	bmi.n	800883c <sc_indicate.constprop.17+0x2c>
		sc->start = start;
 8008836:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
 8008838:	84d9      	strh	r1, [r3, #38]	; 0x26
 800883a:	e00a      	b.n	8008852 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
 800883c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800883e:	4282      	cmp	r2, r0
 8008840:	d803      	bhi.n	800884a <sc_indicate.constprop.17+0x3a>
 8008842:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008844:	428a      	cmp	r2, r1
 8008846:	d301      	bcc.n	800884c <sc_indicate.constprop.17+0x3c>
 8008848:	bd10      	pop	{r4, pc}
		*start = new_start;
 800884a:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
 800884c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800884e:	428a      	cmp	r2, r1
 8008850:	d3f2      	bcc.n	8008838 <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8008852:	f3bf 8f5b 	dmb	ish
 8008856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008858:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
 800885c:	079b      	lsls	r3, r3, #30
 800885e:	d406      	bmi.n	800886e <sc_indicate.constprop.17+0x5e>
 8008860:	220a      	movs	r2, #10
 8008862:	4904      	ldr	r1, [pc, #16]	; (8008874 <sc_indicate.constprop.17+0x64>)
 8008864:	4804      	ldr	r0, [pc, #16]	; (8008878 <sc_indicate.constprop.17+0x68>)
}
 8008866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886a:	f009 be41 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 800886e:	bd10      	pop	{r4, pc}
 8008870:	20000980 	.word	0x20000980
 8008874:	200009a8 	.word	0x200009a8
 8008878:	20001498 	.word	0x20001498

0800887c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
 800887c:	6882      	ldr	r2, [r0, #8]
 800887e:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <connected_cb+0x68>)
 8008880:	429a      	cmp	r2, r3
{
 8008882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008886:	4607      	mov	r7, r0
 8008888:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
 800888a:	d126      	bne.n	80088da <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
 800888c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
 800888e:	2600      	movs	r6, #0
 8008890:	686b      	ldr	r3, [r5, #4]
 8008892:	429e      	cmp	r6, r3
 8008894:	d221      	bcs.n	80088da <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 8008896:	6829      	ldr	r1, [r5, #0]
 8008898:	ea4f 1806 	mov.w	r8, r6, lsl #4
 800889c:	4441      	add	r1, r8
 800889e:	3101      	adds	r1, #1
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7fe fb29 	bl	8006ef8 <bt_conn_addr_le_cmp>
 80088a6:	b9d8      	cbnz	r0, 80088e0 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	4443      	add	r3, r8
 80088ac:	891b      	ldrh	r3, [r3, #8]
 80088ae:	b1bb      	cbz	r3, 80088e0 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
 80088b0:	4629      	mov	r1, r5
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff fe96 	bl	80085e4 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
 80088b8:	682c      	ldr	r4, [r5, #0]
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <connected_cb+0x6c>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	d10c      	bne.n	80088da <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
 80088c0:	4444      	add	r4, r8
	if (!data->start && !data->end) {
 80088c2:	89a0      	ldrh	r0, [r4, #12]
 80088c4:	89e1      	ldrh	r1, [r4, #14]
 80088c6:	b900      	cbnz	r0, 80088ca <connected_cb+0x4e>
 80088c8:	b139      	cbz	r1, 80088da <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
 80088ca:	f7ff ffa1 	bl	8008810 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
 80088ce:	2204      	movs	r2, #4
 80088d0:	2100      	movs	r1, #0
 80088d2:	f104 000c 	add.w	r0, r4, #12
 80088d6:	f7f7 ffff 	bl	80008d8 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
 80088da:	2001      	movs	r0, #1
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
 80088e0:	3601      	adds	r6, #1
 80088e2:	e7d5      	b.n	8008890 <connected_cb+0x14>
 80088e4:	08008627 	.word	0x08008627
 80088e8:	200009d4 	.word	0x200009d4

080088ec <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80088ec:	490d      	ldr	r1, [pc, #52]	; (8008924 <sc_indicate_rsp+0x38>)
 80088ee:	f3bf 8f5b 	dmb	ish
 80088f2:	f101 0350 	add.w	r3, r1, #80	; 0x50
 80088f6:	e853 2f00 	ldrex	r2, [r3]
 80088fa:	f022 0202 	bic.w	r2, r2, #2
 80088fe:	e843 2000 	strex	r0, r2, [r3]
 8008902:	2800      	cmp	r0, #0
 8008904:	d1f7      	bne.n	80088f6 <sc_indicate_rsp+0xa>
 8008906:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800890a:	f3bf 8f5b 	dmb	ish
 800890e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8008910:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8008914:	07db      	lsls	r3, r3, #31
 8008916:	d504      	bpl.n	8008922 <sc_indicate_rsp+0x36>
 8008918:	2200      	movs	r2, #0
 800891a:	3128      	adds	r1, #40	; 0x28
 800891c:	4802      	ldr	r0, [pc, #8]	; (8008928 <sc_indicate_rsp+0x3c>)
 800891e:	f009 bde7 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 8008922:	4770      	bx	lr
 8008924:	20000980 	.word	0x20000980
 8008928:	20001498 	.word	0x20001498

0800892c <read_appearance>:
{
 800892c:	b513      	push	{r0, r1, r4, lr}
 800892e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008932:	4610      	mov	r0, r2
	if (offset > value_len) {
 8008934:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
 800893e:	d80d      	bhi.n	800895c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
 8008940:	f1c1 0402 	rsb	r4, r1, #2
 8008944:	429c      	cmp	r4, r3
 8008946:	bfa8      	it	ge
 8008948:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 800894a:	f10d 0306 	add.w	r3, sp, #6
 800894e:	4622      	mov	r2, r4
 8008950:	4419      	add	r1, r3
 8008952:	f7f7 ff95 	bl	8000880 <memcpy>
}
 8008956:	4620      	mov	r0, r4
 8008958:	b002      	add	sp, #8
 800895a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800895c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
 8008960:	e7f9      	b.n	8008956 <read_appearance+0x2a>
	...

08008964 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
 8008968:	6882      	ldr	r2, [r0, #8]
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <disconnected_cb+0x98>)
 800896c:	429a      	cmp	r2, r3
{
 800896e:	4607      	mov	r7, r0
 8008970:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
 8008972:	d129      	bne.n	80089c8 <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
 8008974:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
 8008976:	8923      	ldrh	r3, [r4, #8]
 8008978:	b333      	cbz	r3, 80089c8 <disconnected_cb+0x64>
 800897a:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 800897c:	f101 0944 	add.w	r9, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	429e      	cmp	r6, r3
 8008984:	d30b      	bcc.n	800899e <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
 8008986:	2202      	movs	r2, #2
 8008988:	2100      	movs	r1, #0
 800898a:	f104 0008 	add.w	r0, r4, #8
 800898e:	f7f7 ffa3 	bl	80008d8 <memset>
	if (ccc->cfg_changed) {
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	b1c3      	cbz	r3, 80089c8 <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
 8008996:	8921      	ldrh	r1, [r4, #8]
 8008998:	4638      	mov	r0, r7
 800899a:	4798      	blx	r3
 800899c:	e014      	b.n	80089c8 <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
 800899e:	6821      	ldr	r1, [r4, #0]
 80089a0:	0135      	lsls	r5, r6, #4
 80089a2:	4429      	add	r1, r5
 80089a4:	890b      	ldrh	r3, [r1, #8]
 80089a6:	b1a3      	cbz	r3, 80089d2 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 80089a8:	3101      	adds	r1, #1
 80089aa:	4640      	mov	r0, r8
 80089ac:	f7fe faa4 	bl	8006ef8 <bt_conn_addr_le_cmp>
 80089b0:	b188      	cbz	r0, 80089d6 <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	4428      	add	r0, r5
 80089b6:	3001      	adds	r0, #1
 80089b8:	f7fe fab6 	bl	8006f28 <bt_conn_lookup_addr_le>
			if (tmp) {
 80089bc:	b148      	cbz	r0, 80089d2 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
 80089be:	7a43      	ldrb	r3, [r0, #9]
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d104      	bne.n	80089ce <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
 80089c4:	f7fe faf3 	bl	8006fae <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
 80089c8:	2001      	movs	r0, #1
 80089ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
 80089ce:	f7fe faee 	bl	8006fae <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7d4      	b.n	8008980 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 80089d6:	4648      	mov	r0, r9
 80089d8:	f7fd fcfc 	bl	80063d4 <bt_addr_le_is_bonded>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
 80089e0:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 80089e2:	b929      	cbnz	r1, 80089f0 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
 80089e4:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
 80089e6:	2202      	movs	r2, #2
 80089e8:	3008      	adds	r0, #8
 80089ea:	f7f7 ff75 	bl	80008d8 <memset>
 80089ee:	e7f0      	b.n	80089d2 <disconnected_cb+0x6e>
 80089f0:	2207      	movs	r2, #7
 80089f2:	4649      	mov	r1, r9
 80089f4:	3001      	adds	r0, #1
 80089f6:	f7f7 ff43 	bl	8000880 <memcpy>
 80089fa:	e7ea      	b.n	80089d2 <disconnected_cb+0x6e>
 80089fc:	08008627 	.word	0x08008627

08008a00 <read_name>:
{
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
 8008a04:	4e0d      	ldr	r6, [pc, #52]	; (8008a3c <read_name+0x3c>)
{
 8008a06:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
 8008a0a:	4630      	mov	r0, r6
{
 8008a0c:	4698      	mov	r8, r3
 8008a0e:	4617      	mov	r7, r2
				 strlen(gap_name));
 8008a10:	f7f7 ff0c 	bl	800082c <strlen>
	if (offset > value_len) {
 8008a14:	b283      	uxth	r3, r0
 8008a16:	42ab      	cmp	r3, r5
 8008a18:	d30d      	bcc.n	8008a36 <read_name+0x36>
	len = min(buf_len, value_len - offset);
 8008a1a:	1b5c      	subs	r4, r3, r5
 8008a1c:	4544      	cmp	r4, r8
 8008a1e:	4623      	mov	r3, r4
 8008a20:	bfa8      	it	ge
 8008a22:	4643      	movge	r3, r8
 8008a24:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 8008a26:	4622      	mov	r2, r4
 8008a28:	1971      	adds	r1, r6, r5
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7f7 ff28 	bl	8000880 <memcpy>
}
 8008a30:	4620      	mov	r0, r4
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008a36:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
 8008a3a:	e7f9      	b.n	8008a30 <read_name+0x30>
 8008a3c:	08013854 	.word	0x08013854

08008a40 <bt_gatt_attr_read_ccc>:
{
 8008a40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
 8008a44:	68ce      	ldr	r6, [r1, #12]
{
 8008a46:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4690      	mov	r8, r2
 8008a4e:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
 8008a50:	2500      	movs	r5, #0
 8008a52:	6873      	ldr	r3, [r6, #4]
 8008a54:	429d      	cmp	r5, r3
 8008a56:	d20f      	bcs.n	8008a78 <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 8008a58:	6831      	ldr	r1, [r6, #0]
 8008a5a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 8008a5e:	4451      	add	r1, sl
 8008a60:	3101      	adds	r1, #1
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7fe fa48 	bl	8006ef8 <bt_conn_addr_le_cmp>
 8008a68:	b108      	cbz	r0, 8008a6e <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	e7f1      	b.n	8008a52 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
 8008a6e:	6832      	ldr	r2, [r6, #0]
 8008a70:	4452      	add	r2, sl
 8008a72:	8913      	ldrh	r3, [r2, #8]
 8008a74:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
 8008a78:	6873      	ldr	r3, [r6, #4]
 8008a7a:	429d      	cmp	r5, r3
		value = 0x0000;
 8008a7c:	bf04      	itt	eq
 8008a7e:	2300      	moveq	r3, #0
 8008a80:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
 8008a84:	2f02      	cmp	r7, #2
 8008a86:	d80f      	bhi.n	8008aa8 <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
 8008a88:	f1c7 0402 	rsb	r4, r7, #2
 8008a8c:	454c      	cmp	r4, r9
 8008a8e:	bfa8      	it	ge
 8008a90:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
 8008a92:	f10d 0306 	add.w	r3, sp, #6
 8008a96:	4622      	mov	r2, r4
 8008a98:	19d9      	adds	r1, r3, r7
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	f7f7 fef0 	bl	8000880 <memcpy>
}
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	b002      	add	sp, #8
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008aa8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 8008aac:	e7f8      	b.n	8008aa0 <bt_gatt_attr_read_ccc+0x60>

08008aae <bt_gatt_attr_read_service>:
{
 8008aae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
 8008ab0:	68c9      	ldr	r1, [r1, #12]
{
 8008ab2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8008ab6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
 8008ab8:	780a      	ldrb	r2, [r1, #0]
 8008aba:	b992      	cbnz	r2, 8008ae2 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
 8008abc:	884a      	ldrh	r2, [r1, #2]
 8008abe:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
 8008ac2:	2d02      	cmp	r5, #2
 8008ac4:	d819      	bhi.n	8008afa <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
 8008ac6:	f1c5 0402 	rsb	r4, r5, #2
 8008aca:	429c      	cmp	r4, r3
 8008acc:	bfa8      	it	ge
 8008ace:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 8008ad0:	f10d 0306 	add.w	r3, sp, #6
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	1959      	adds	r1, r3, r5
 8008ad8:	f7f7 fed2 	bl	8000880 <memcpy>
}
 8008adc:	4620      	mov	r0, r4
 8008ade:	b003      	add	sp, #12
 8008ae0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
 8008ae2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
 8008ae4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
 8008ae8:	d807      	bhi.n	8008afa <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
 8008aea:	f1c5 0410 	rsb	r4, r5, #16
 8008aee:	429c      	cmp	r4, r3
 8008af0:	bfa8      	it	ge
 8008af2:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 8008af4:	4622      	mov	r2, r4
 8008af6:	4429      	add	r1, r5
 8008af8:	e7ee      	b.n	8008ad8 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008afa:	f06f 0406 	mvn.w	r4, #6
 8008afe:	e7ed      	b.n	8008adc <bt_gatt_attr_read_service+0x2e>

08008b00 <notify_cb>:
{
 8008b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
 8008b04:	f642 1302 	movw	r3, #10498	; 0x2902
{
 8008b08:	4605      	mov	r5, r0
 8008b0a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
 8008b0c:	2400      	movs	r4, #0
 8008b0e:	4669      	mov	r1, sp
 8008b10:	6800      	ldr	r0, [r0, #0]
 8008b12:	f88d 4000 	strb.w	r4, [sp]
 8008b16:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008b1a:	f7fc f973 	bl	8004e04 <bt_uuid_cmp>
 8008b1e:	b178      	cbz	r0, 8008b40 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
 8008b20:	f642 0303 	movw	r3, #10243	; 0x2803
 8008b24:	6828      	ldr	r0, [r5, #0]
 8008b26:	f88d 4004 	strb.w	r4, [sp, #4]
 8008b2a:	a901      	add	r1, sp, #4
 8008b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008b30:	f7fc f968 	bl	8004e04 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
 8008b34:	1b00      	subs	r0, r0, r4
 8008b36:	bf18      	it	ne
 8008b38:	2001      	movne	r0, #1
}
 8008b3a:	b003      	add	sp, #12
 8008b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
 8008b40:	68aa      	ldr	r2, [r5, #8]
 8008b42:	4b2c      	ldr	r3, [pc, #176]	; (8008bf4 <notify_cb+0xf4>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d001      	beq.n	8008b4c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
 8008b48:	2001      	movs	r0, #1
 8008b4a:	e7f6      	b.n	8008b3a <notify_cb+0x3a>
	ccc = attr->user_data;
 8008b4c:	68ef      	ldr	r7, [r5, #12]
 8008b4e:	4d2a      	ldr	r5, [pc, #168]	; (8008bf8 <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
 8008b50:	4604      	mov	r4, r0
 8008b52:	46a8      	mov	r8, r5
 8008b54:	4681      	mov	r9, r0
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	d2f5      	bcs.n	8008b48 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
 8008b5c:	6838      	ldr	r0, [r7, #0]
 8008b5e:	88b3      	ldrh	r3, [r6, #4]
 8008b60:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8008b64:	8902      	ldrh	r2, [r0, #8]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d115      	bne.n	8008b96 <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	f7fe f9dc 	bl	8006f28 <bt_conn_lookup_addr_le>
		if (!conn) {
 8008b70:	4683      	mov	fp, r0
 8008b72:	b9f8      	cbnz	r0, 8008bb4 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	4543      	cmp	r3, r8
 8008b78:	d10d      	bne.n	8008b96 <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
 8008b7a:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
 8008b7c:	a801      	add	r0, sp, #4
 8008b7e:	8c1a      	ldrh	r2, [r3, #32]
 8008b80:	69d9      	ldr	r1, [r3, #28]
 8008b82:	f7f7 fe7d 	bl	8000880 <memcpy>
	if (!stored->start && !stored->end) {
 8008b86:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
 8008b88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008b8c:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
 8008b8e:	b928      	cbnz	r0, 8008b9c <notify_cb+0x9c>
 8008b90:	b942      	cbnz	r2, 8008ba4 <notify_cb+0xa4>
		*stored = data;
 8008b92:	9801      	ldr	r0, [sp, #4]
 8008b94:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
 8008b96:	3401      	adds	r4, #1
 8008b98:	3510      	adds	r5, #16
 8008b9a:	e7dc      	b.n	8008b56 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
 8008b9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
 8008ba0:	4281      	cmp	r1, r0
 8008ba2:	d305      	bcc.n	8008bb0 <notify_cb+0xb0>
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d2f6      	bcs.n	8008b96 <notify_cb+0x96>
	if (*end < new_end) {
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d2f4      	bcs.n	8008b96 <notify_cb+0x96>
		*end = new_end;
 8008bac:	81eb      	strh	r3, [r5, #14]
 8008bae:	e7f2      	b.n	8008b96 <notify_cb+0x96>
		*start = new_start;
 8008bb0:	81a9      	strh	r1, [r5, #12]
 8008bb2:	e7f9      	b.n	8008ba8 <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
 8008bb4:	7a43      	ldrb	r3, [r0, #9]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d002      	beq.n	8008bc0 <notify_cb+0xc0>
			bt_conn_unref(conn);
 8008bba:	f7fe f9f8 	bl	8006fae <bt_conn_unref>
 8008bbe:	e7ea      	b.n	8008b96 <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
 8008bc0:	88b3      	ldrh	r3, [r6, #4]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d10c      	bne.n	8008be0 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
 8008bc6:	6971      	ldr	r1, [r6, #20]
 8008bc8:	f7ff fdb6 	bl	8008738 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
 8008bcc:	4682      	mov	sl, r0
		bt_conn_unref(conn);
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f7fe f9ed 	bl	8006fae <bt_conn_unref>
		if (err < 0) {
 8008bd4:	f1ba 0f00 	cmp.w	sl, #0
 8008bd8:	db09      	blt.n	8008bee <notify_cb+0xee>
		data->err = 0;
 8008bda:	f8c6 9000 	str.w	r9, [r6]
 8008bde:	e7da      	b.n	8008b96 <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
 8008be0:	68b1      	ldr	r1, [r6, #8]
 8008be2:	8a33      	ldrh	r3, [r6, #16]
 8008be4:	68f2      	ldr	r2, [r6, #12]
 8008be6:	8a09      	ldrh	r1, [r1, #16]
 8008be8:	f7ff fd7b 	bl	80086e2 <gatt_notify>
 8008bec:	e7ee      	b.n	8008bcc <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e7a3      	b.n	8008b3a <notify_cb+0x3a>
 8008bf2:	bf00      	nop
 8008bf4:	08008627 	.word	0x08008627
 8008bf8:	200009d4 	.word	0x200009d4

08008bfc <bt_gatt_init>:
{
 8008bfc:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
 8008bfe:	4806      	ldr	r0, [pc, #24]	; (8008c18 <bt_gatt_init+0x1c>)
 8008c00:	f7ff fdd0 	bl	80087a4 <gatt_register>
	gatt_register(&gatt_svc);
 8008c04:	4805      	ldr	r0, [pc, #20]	; (8008c1c <bt_gatt_init+0x20>)
 8008c06:	f7ff fdcd 	bl	80087a4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
 8008c0a:	4905      	ldr	r1, [pc, #20]	; (8008c20 <bt_gatt_init+0x24>)
 8008c0c:	4805      	ldr	r0, [pc, #20]	; (8008c24 <bt_gatt_init+0x28>)
}
 8008c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
 8008c12:	f009 bc03 	b.w	801241c <k_delayed_work_init>
 8008c16:	bf00      	nop
 8008c18:	20005afc 	.word	0x20005afc
 8008c1c:	20005b58 	.word	0x20005b58
 8008c20:	08008d95 	.word	0x08008d95
 8008c24:	200009a8 	.word	0x200009a8

08008c28 <bt_gatt_service_register>:
{
 8008c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008c2a:	6803      	ldr	r3, [r0, #0]
{
 8008c2c:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008c2e:	2500      	movs	r5, #0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f88d 5000 	strb.w	r5, [sp]
 8008c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c3a:	4669      	mov	r1, sp
 8008c3c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008c40:	f7fc f8e0 	bl	8004e04 <bt_uuid_cmp>
 8008c44:	b918      	cbnz	r0, 8008c4e <bt_gatt_service_register+0x26>
		return -EALREADY;
 8008c46:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8008c4a:	b003      	add	sp, #12
 8008c4c:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	a901      	add	r1, sp, #4
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	f88d 5004 	strb.w	r5, [sp, #4]
 8008c58:	f641 0301 	movw	r3, #6145	; 0x1801
 8008c5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008c60:	f7fc f8d0 	bl	8004e04 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d0ee      	beq.n	8008c46 <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7ff fd9b 	bl	80087a4 <gatt_register>
	if (err < 0) {
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	dbeb      	blt.n	8008c4a <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008c72:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
 8008c74:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008c76:	8a10      	ldrh	r0, [r2, #16]
 8008c78:	2114      	movs	r1, #20
 8008c7a:	fb01 2303 	mla	r3, r1, r3, r2
 8008c7e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8008c82:	f7ff fdc5 	bl	8008810 <sc_indicate.constprop.17>
	return 0;
 8008c86:	4628      	mov	r0, r5
 8008c88:	e7df      	b.n	8008c4a <bt_gatt_service_register+0x22>
	...

08008c8c <bt_gatt_service_unregister>:
{
 8008c8c:	4b14      	ldr	r3, [pc, #80]	; (8008ce0 <bt_gatt_service_unregister+0x54>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	b510      	push	{r4, lr}
	sys_snode_t *prev = NULL;
 8008c92:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
 8008c94:	f100 0408 	add.w	r4, r0, #8
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8008c98:	b912      	cbnz	r2, 8008ca0 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
 8008c9a:	f06f 0001 	mvn.w	r0, #1
}
 8008c9e:	bd10      	pop	{r4, pc}
		if (test == node) {
 8008ca0:	4294      	cmp	r4, r2
 8008ca2:	d11a      	bne.n	8008cda <bt_gatt_service_unregister+0x4e>
 8008ca4:	6882      	ldr	r2, [r0, #8]
	if (!prev_node) {
 8008ca6:	b991      	cbnz	r1, 8008cce <bt_gatt_service_unregister+0x42>
		if (list->tail == node) {
 8008ca8:	6859      	ldr	r1, [r3, #4]
		list->head = node->next;
 8008caa:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
 8008cac:	428c      	cmp	r4, r1
 8008cae:	d100      	bne.n	8008cb2 <bt_gatt_service_unregister+0x26>
			list->tail = list->head;
 8008cb0:	605a      	str	r2, [r3, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008cb2:	6802      	ldr	r2, [r0, #0]
		    svc->attrs[svc->attr_count - 1].handle);
 8008cb4:	8883      	ldrh	r3, [r0, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008cb6:	2114      	movs	r1, #20
 8008cb8:	fb01 2303 	mla	r3, r1, r3, r2
	node->next = NULL;
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	6084      	str	r4, [r0, #8]
 8008cc0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8008cc4:	8a10      	ldrh	r0, [r2, #16]
 8008cc6:	f7ff fda3 	bl	8008810 <sc_indicate.constprop.17>
	return 0;
 8008cca:	4620      	mov	r0, r4
 8008ccc:	bd10      	pop	{r4, pc}
		prev_node->next = node->next;
 8008cce:	600a      	str	r2, [r1, #0]
		if (list->tail == node) {
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	4294      	cmp	r4, r2
			list->tail = prev_node;
 8008cd4:	bf08      	it	eq
 8008cd6:	6059      	streq	r1, [r3, #4]
 8008cd8:	e7eb      	b.n	8008cb2 <bt_gatt_service_unregister+0x26>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8008cda:	4611      	mov	r1, r2
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	e7db      	b.n	8008c98 <bt_gatt_service_unregister+0xc>
 8008ce0:	20000978 	.word	0x20000978

08008ce4 <bt_gatt_attr_read>:
{
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8008cec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
 8008cf0:	4291      	cmp	r1, r2
 8008cf2:	d80b      	bhi.n	8008d0c <bt_gatt_attr_read+0x28>
	len = min(buf_len, value_len - offset);
 8008cf4:	1a54      	subs	r4, r2, r1
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	bfa8      	it	ge
 8008cfa:	4623      	movge	r3, r4
 8008cfc:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	4622      	mov	r2, r4
 8008d02:	4419      	add	r1, r3
 8008d04:	f7f7 fdbc 	bl	8000880 <memcpy>
}
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008d0c:	f06f 0406 	mvn.w	r4, #6
 8008d10:	e7fa      	b.n	8008d08 <bt_gatt_attr_read+0x24>
	...

08008d14 <bt_gatt_foreach_attr>:
{
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	4699      	mov	r9, r3
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <bt_gatt_foreach_attr+0x50>)
 8008d1c:	681c      	ldr	r4, [r3, #0]
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460f      	mov	r7, r1
 8008d22:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008d24:	b1dc      	cbz	r4, 8008d5e <bt_gatt_foreach_attr+0x4a>
 8008d26:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
 8008d28:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008d2c:	b1bc      	cbz	r4, 8008d5e <bt_gatt_foreach_attr+0x4a>
 8008d2e:	2500      	movs	r5, #0
 8008d30:	e006      	b.n	8008d40 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
 8008d32:	6820      	ldr	r0, [r4, #0]
 8008d34:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
 8008d38:	8a03      	ldrh	r3, [r0, #16]
 8008d3a:	42b3      	cmp	r3, r6
 8008d3c:	d207      	bcs.n	8008d4e <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
 8008d3e:	3501      	adds	r5, #1
 8008d40:	88a3      	ldrh	r3, [r4, #4]
 8008d42:	429d      	cmp	r5, r3
 8008d44:	dbf5      	blt.n	8008d32 <bt_gatt_foreach_attr+0x1e>
	return node->next;
 8008d46:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008d48:	b14c      	cbz	r4, 8008d5e <bt_gatt_foreach_attr+0x4a>
 8008d4a:	3c08      	subs	r4, #8
 8008d4c:	e7ee      	b.n	8008d2c <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
 8008d4e:	42bb      	cmp	r3, r7
 8008d50:	d8f5      	bhi.n	8008d3e <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
 8008d52:	4649      	mov	r1, r9
 8008d54:	47c0      	blx	r8
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1f1      	bne.n	8008d3e <bt_gatt_foreach_attr+0x2a>
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	bf00      	nop
 8008d64:	20000978 	.word	0x20000978

08008d68 <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
 8008d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
 8008d6a:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
 8008d6e:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
 8008d70:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
 8008d72:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
 8008d74:	2302      	movs	r3, #2
 8008d76:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
 8008d7a:	4a05      	ldr	r2, [pc, #20]	; (8008d90 <bt_gatt_indicate.part.8+0x28>)
 8008d7c:	8a00      	ldrh	r0, [r0, #16]
 8008d7e:	466b      	mov	r3, sp
 8008d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d84:	f7ff ffc6 	bl	8008d14 <bt_gatt_foreach_attr>
}
 8008d88:	9800      	ldr	r0, [sp, #0]
 8008d8a:	b007      	add	sp, #28
 8008d8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d90:	08008b01 	.word	0x08008b01

08008d94 <sc_process>:
{
 8008d94:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
 8008d96:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 8008d9a:	f8ad 2004 	strh.w	r2, [sp, #4]
{
 8008d9e:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
 8008da0:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8008da4:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
 8008da8:	3828      	subs	r0, #40	; 0x28
 8008daa:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8008dae:	f3bf 8f5b 	dmb	ish
 8008db2:	e854 2f00 	ldrex	r2, [r4]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	e844 2100 	strex	r1, r2, [r4]
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d1f7      	bne.n	8008db2 <sc_process+0x1e>
 8008dc2:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
 8008dcc:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
 8008dd0:	4a0e      	ldr	r2, [pc, #56]	; (8008e0c <sc_process+0x78>)
 8008dd2:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
 8008dd6:	4a0e      	ldr	r2, [pc, #56]	; (8008e10 <sc_process+0x7c>)
 8008dd8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
 8008ddc:	aa01      	add	r2, sp, #4
 8008dde:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
 8008de2:	2204      	movs	r2, #4
 8008de4:	f823 2c08 	strh.w	r2, [r3, #-8]
 8008de8:	f7ff ffbe 	bl	8008d68 <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
 8008dec:	b958      	cbnz	r0, 8008e06 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8008dee:	f3bf 8f5b 	dmb	ish
 8008df2:	e854 3f00 	ldrex	r3, [r4]
 8008df6:	f043 0302 	orr.w	r3, r3, #2
 8008dfa:	e844 3200 	strex	r2, r3, [r4]
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	d1f7      	bne.n	8008df2 <sc_process+0x5e>
 8008e02:	f3bf 8f5b 	dmb	ish
}
 8008e06:	b002      	add	sp, #8
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20005b30 	.word	0x20005b30
 8008e10:	080088ed 	.word	0x080088ed

08008e14 <bt_gatt_attr_next>:
{
 8008e14:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008e16:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
 8008e18:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008e1a:	3101      	adds	r1, #1
 8008e1c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008e24:	4608      	mov	r0, r1
 8008e26:	4a03      	ldr	r2, [pc, #12]	; (8008e34 <bt_gatt_attr_next+0x20>)
 8008e28:	f7ff ff74 	bl	8008d14 <bt_gatt_foreach_attr>
}
 8008e2c:	9801      	ldr	r0, [sp, #4]
 8008e2e:	b003      	add	sp, #12
 8008e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e34:	080085df 	.word	0x080085df

08008e38 <bt_gatt_attr_read_chrc>:
{
 8008e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
 8008e3a:	68cf      	ldr	r7, [r1, #12]
{
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
 8008e40:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
 8008e42:	793b      	ldrb	r3, [r7, #4]
{
 8008e44:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
 8008e48:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8008e4c:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
 8008e4e:	f7ff ffe1 	bl	8008e14 <bt_gatt_attr_next>
	if (!next) {
 8008e52:	b9d0      	cbnz	r0, 8008e8a <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
 8008e54:	f88d 0005 	strb.w	r0, [sp, #5]
 8008e58:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	780b      	ldrb	r3, [r1, #0]
 8008e60:	b9bb      	cbnz	r3, 8008e92 <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
 8008e62:	884b      	ldrh	r3, [r1, #2]
 8008e64:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
 8008e68:	2305      	movs	r3, #5
	if (offset > value_len) {
 8008e6a:	42ab      	cmp	r3, r5
 8008e6c:	d319      	bcc.n	8008ea2 <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
 8008e6e:	1b5b      	subs	r3, r3, r5
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	bfa8      	it	ge
 8008e74:	4623      	movge	r3, r4
 8008e76:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 8008e78:	ab01      	add	r3, sp, #4
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	1959      	adds	r1, r3, r5
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7f7 fcfe 	bl	8000880 <memcpy>
}
 8008e84:	4620      	mov	r0, r4
 8008e86:	b007      	add	sp, #28
 8008e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
 8008e8a:	8a03      	ldrh	r3, [r0, #16]
 8008e8c:	f8ad 3005 	strh.w	r3, [sp, #5]
 8008e90:	e7e4      	b.n	8008e5c <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
 8008e92:	2210      	movs	r2, #16
 8008e94:	3101      	adds	r1, #1
 8008e96:	f10d 0007 	add.w	r0, sp, #7
 8008e9a:	f7f7 fcf1 	bl	8000880 <memcpy>
		value_len += 16;
 8008e9e:	2313      	movs	r3, #19
 8008ea0:	e7e3      	b.n	8008e6a <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008ea2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
 8008ea6:	e7ed      	b.n	8008e84 <bt_gatt_attr_read_chrc+0x4c>

08008ea8 <bt_gatt_notify>:
{
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	461d      	mov	r5, r3
 8008eac:	b086      	sub	sp, #24
 8008eae:	8a0c      	ldrh	r4, [r1, #16]
	if (conn) {
 8008eb0:	b120      	cbz	r0, 8008ebc <bt_gatt_notify+0x14>
		return gatt_notify(conn, attr->handle, data, len);
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f7ff fc15 	bl	80086e2 <gatt_notify>
}
 8008eb8:	b006      	add	sp, #24
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
	nfy.err = -ENOTCONN;
 8008ebc:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8008ec0:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_NOTIFY;
 8008ec2:	2301      	movs	r3, #1
	nfy.attr = attr;
 8008ec4:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
 8008ec6:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.data = data;
 8008eca:	9203      	str	r2, [sp, #12]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
 8008ecc:	4620      	mov	r0, r4
 8008ece:	466b      	mov	r3, sp
 8008ed0:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <bt_gatt_notify+0x3c>)
	nfy.len = len;
 8008ed2:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
 8008ed6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008eda:	f7ff ff1b 	bl	8008d14 <bt_gatt_foreach_attr>
	return nfy.err;
 8008ede:	9800      	ldr	r0, [sp, #0]
 8008ee0:	e7ea      	b.n	8008eb8 <bt_gatt_notify+0x10>
 8008ee2:	bf00      	nop
 8008ee4:	08008b01 	.word	0x08008b01

08008ee8 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
 8008ee8:	f7ff bb4c 	b.w	8008584 <bt_att_get_mtu>

08008eec <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
 8008eec:	4603      	mov	r3, r0
 8008eee:	4a03      	ldr	r2, [pc, #12]	; (8008efc <bt_gatt_connected+0x10>)
 8008ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f7ff bf0d 	b.w	8008d14 <bt_gatt_foreach_attr>
 8008efa:	bf00      	nop
 8008efc:	0800887d 	.word	0x0800887d

08008f00 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
 8008f00:	4603      	mov	r3, r0
 8008f02:	4a03      	ldr	r2, [pc, #12]	; (8008f10 <bt_gatt_disconnected+0x10>)
 8008f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f08:	2001      	movs	r0, #1
 8008f0a:	f7ff bf03 	b.w	8008d14 <bt_gatt_foreach_attr>
 8008f0e:	bf00      	nop
 8008f10:	08008965 	.word	0x08008965

08008f14 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <bt_smp_accept+0x14>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	b918      	cbnz	r0, 8008f22 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
 8008f1a:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <bt_smp_accept+0x18>)
 8008f1c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
 8008f1e:	600b      	str	r3, [r1, #0]

		return 0;
 8008f20:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
 8008f22:	f06f 000b 	mvn.w	r0, #11
}
 8008f26:	4770      	bx	lr
 8008f28:	200009e4 	.word	0x200009e4
 8008f2c:	20005b70 	.word	0x20005b70

08008f30 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008f30:	2100      	movs	r1, #0
{
 8008f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
 8008f36:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008f38:	4608      	mov	r0, r1
 8008f3a:	f7fe fa80 	bl	800743e <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8008f3e:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008f42:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8008f44:	2101      	movs	r1, #1
 8008f46:	4630      	mov	r0, r6
 8008f48:	f008 fadc 	bl	8011504 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
 8008f4c:	2505      	movs	r5, #5
 8008f4e:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
 8008f50:	2101      	movs	r1, #1
 8008f52:	4630      	mov	r0, r6
 8008f54:	f008 fad6 	bl	8011504 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
 8008f58:	7005      	strb	r5, [r0, #0]
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2106      	movs	r1, #6
}
 8008f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f66:	f7fe ba6d 	b.w	8007444 <bt_l2cap_send_cb>

08008f6a <bt_smp_sign_verify>:
 8008f6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8008f6e:	4770      	bx	lr

08008f70 <bt_smp_init>:

int bt_smp_init(void)
{
 8008f70:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 8008f72:	4802      	ldr	r0, [pc, #8]	; (8008f7c <bt_smp_init+0xc>)
 8008f74:	f7fe f9c0 	bl	80072f8 <bt_l2cap_le_fixed_chan_register>

	return 0;
}
 8008f78:	2000      	movs	r0, #0
 8008f7a:	bd08      	pop	{r3, pc}
 8008f7c:	20005b64 	.word	0x20005b64

08008f80 <bt_mesh_provision>:
static bool provisioned;

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u32_t seq,
		      u16_t addr, const u8_t dev_key[16])
{
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4605      	mov	r5, r0
 8008f86:	460e      	mov	r6, r1
 8008f88:	4614      	mov	r4, r2
 8008f8a:	4698      	mov	r8, r3
 8008f8c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	BT_INFO("Primary Element: 0x%04x", addr);
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
	       net_idx, flags, iv_index);

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable();
 8008f90:	f007 fff2 	bl	8010f78 <bt_mesh_proxy_prov_disable>
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
 8008f94:	462a      	mov	r2, r5
 8008f96:	4643      	mov	r3, r8
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 fe36 	bl	8009c0c <bt_mesh_net_create>
	if (err) {
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b120      	cbz	r0, 8008fae <bt_mesh_provision+0x2e>
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
			bt_mesh_proxy_prov_enable();
 8008fa4:	f007 ffd0 	bl	8010f48 <bt_mesh_proxy_prov_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_complete(net_idx, addr);
	}

	return 0;
}
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_mesh.seq = seq;
 8008fae:	4c16      	ldr	r4, [pc, #88]	; (8009008 <bt_mesh_provision+0x88>)
 8008fb0:	9a06      	ldr	r2, [sp, #24]
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	f362 0317 	bfi	r3, r2, #0, #24
 8008fb8:	6063      	str	r3, [r4, #4]
	bt_mesh_comp_provision(addr);
 8008fba:	4638      	mov	r0, r7
 8008fbc:	f003 f9da 	bl	800c374 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
 8008fc0:	2210      	movs	r2, #16
 8008fc2:	9908      	ldr	r1, [sp, #32]
 8008fc4:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8008fc8:	f7f7 fc5a 	bl	8000880 <memcpy>
	provisioned = true;
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <bt_mesh_provision+0x8c>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	701a      	strb	r2, [r3, #0]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
 8008fd2:	f005 fabf 	bl	800e554 <bt_mesh_beacon_get>
 8008fd6:	2801      	cmp	r0, #1
 8008fd8:	d112      	bne.n	8009000 <bt_mesh_provision+0x80>
		bt_mesh_beacon_enable();
 8008fda:	f000 fb93 	bl	8009704 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
 8008fde:	f005 fb13 	bl	800e608 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 8008fe2:	2802      	cmp	r0, #2
 8008fe4:	d003      	beq.n	8008fee <bt_mesh_provision+0x6e>
		bt_mesh_proxy_gatt_enable();
 8008fe6:	f007 ffdf 	bl	8010fa8 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
 8008fea:	f000 f95d 	bl	80092a8 <bt_mesh_adv_update>
		bt_mesh_scan_enable();
 8008fee:	f000 f9c9 	bl	8009384 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
 8008ff2:	f006 fb61 	bl	800f6b8 <bt_mesh_friend_init>
		bt_mesh_prov_complete(net_idx, addr);
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f007 fc9f 	bl	801093c <bt_mesh_prov_complete>
	return 0;
 8008ffe:	e7d3      	b.n	8008fa8 <bt_mesh_provision+0x28>
		bt_mesh_beacon_disable();
 8009000:	f000 fbaa 	bl	8009758 <bt_mesh_beacon_disable>
 8009004:	e7eb      	b.n	8008fde <bt_mesh_provision+0x5e>
 8009006:	bf00      	nop
 8009008:	20005b88 	.word	0x20005b88
 800900c:	20000a78 	.word	0x20000a78

08009010 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
 8009010:	b570      	push	{r4, r5, r6, lr}
	if (!provisioned) {
 8009012:	4e1e      	ldr	r6, [pc, #120]	; (800908c <bt_mesh_reset+0x7c>)
 8009014:	7833      	ldrb	r3, [r6, #0]
 8009016:	b3bb      	cbz	r3, 8009088 <bt_mesh_reset+0x78>
		return;
	}

	bt_mesh_comp_unprovision();

	bt_mesh.iv_index = 0;
 8009018:	4c1d      	ldr	r4, [pc, #116]	; (8009090 <bt_mesh_reset+0x80>)
	bt_mesh_comp_unprovision();
 800901a:	f003 f9c1 	bl	800c3a0 <bt_mesh_comp_unprovision>
	bt_mesh.seq = 0;
 800901e:	6863      	ldr	r3, [r4, #4]
	bt_mesh.iv_index = 0;
 8009020:	2500      	movs	r5, #0
	bt_mesh.seq = 0;
 8009022:	f365 0317 	bfi	r3, r5, #0, #24
 8009026:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = 0;
 8009028:	0e1b      	lsrs	r3, r3, #24
	bt_mesh.pending_update = 0;
	bt_mesh.valid = 0;
	bt_mesh.last_update = 0;
	bt_mesh.ivu_initiator = 0;
 800902a:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 800902e:	f365 0341 	bfi	r3, r5, #1, #1
	bt_mesh.last_update = 0;
 8009032:	2100      	movs	r1, #0
 8009034:	2000      	movs	r0, #0
	bt_mesh.ivu_initiator = 0;
 8009036:	71e3      	strb	r3, [r4, #7]
	bt_mesh.last_update = 0;
 8009038:	e9c4 0102 	strd	r0, r1, [r4, #8]

	k_delayed_work_cancel(&bt_mesh.ivu_complete);
 800903c:	f504 7096 	add.w	r0, r4, #300	; 0x12c
	bt_mesh.iv_index = 0;
 8009040:	6025      	str	r5, [r4, #0]
	k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8009042:	f009 fa09 	bl	8012458 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
 8009046:	f005 f969 	bl	800e31c <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
 800904a:	f002 fb0b 	bl	800b664 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
 800904e:	f002 fb15 	bl	800b67c <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
 8009052:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009056:	f006 f8c3 	bl	800f1e0 <bt_mesh_friend_clear_net_idx>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
 800905a:	f007 ffc9 	bl	8010ff0 <bt_mesh_proxy_gatt_disable>
	}

	memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
 800905e:	4629      	mov	r1, r5
 8009060:	2210      	movs	r2, #16
 8009062:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8009066:	f7f7 fc37 	bl	80008d8 <memset>

	memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
 800906a:	4629      	mov	r1, r5
 800906c:	2250      	movs	r2, #80	; 0x50
 800906e:	f504 705f 	add.w	r0, r4, #892	; 0x37c
 8009072:	f7f7 fc31 	bl	80008d8 <memset>

	provisioned = false;
 8009076:	7035      	strb	r5, [r6, #0]

	bt_mesh_scan_disable();
 8009078:	f000 f996 	bl	80093a8 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
 800907c:	f000 fb6c 	bl	8009758 <bt_mesh_beacon_disable>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
 8009080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_reset();
 8009084:	f007 bc62 	b.w	801094c <bt_mesh_prov_reset>
 8009088:	bd70      	pop	{r4, r5, r6, pc}
 800908a:	bf00      	nop
 800908c:	20000a78 	.word	0x20000a78
 8009090:	20005b88 	.word	0x20005b88

08009094 <bt_mesh_is_provisioned>:

bool bt_mesh_is_provisioned(void)
{
	return provisioned;
}
 8009094:	4b01      	ldr	r3, [pc, #4]	; (800909c <bt_mesh_is_provisioned+0x8>)
 8009096:	7818      	ldrb	r0, [r3, #0]
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000a78 	.word	0x20000a78

080090a0 <bt_mesh_prov_enable>:
	return provisioned;
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <bt_mesh_prov_enable+0x30>)

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
	if (bt_mesh_is_provisioned()) {
 80090a2:	781b      	ldrb	r3, [r3, #0]
{
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
 80090a8:	b973      	cbnz	r3, 80090c8 <bt_mesh_prov_enable+0x28>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
 80090aa:	07c3      	lsls	r3, r0, #31
 80090ac:	d503      	bpl.n	80090b6 <bt_mesh_prov_enable+0x16>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
 80090ae:	f000 f969 	bl	8009384 <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
 80090b2:	f000 fb27 	bl	8009704 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
 80090b6:	f014 0002 	ands.w	r0, r4, #2
 80090ba:	d007      	beq.n	80090cc <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
 80090bc:	f007 ff44 	bl	8010f48 <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
 80090c0:	f000 f8f2 	bl	80092a8 <bt_mesh_adv_update>
	}

	return 0;
 80090c4:	2000      	movs	r0, #0
 80090c6:	bd10      	pop	{r4, pc}
		return -EALREADY;
 80090c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	20000a78 	.word	0x20000a78

080090d4 <bt_mesh_init>:
	return 0;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
 80090d8:	4608      	mov	r0, r1
 80090da:	f003 f939 	bl	800c350 <bt_mesh_comp_register>
	if (err) {
 80090de:	4604      	mov	r4, r0
 80090e0:	b970      	cbnz	r0, 8009100 <bt_mesh_init+0x2c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
 80090e2:	4628      	mov	r0, r5
 80090e4:	f007 fc06 	bl	80108f4 <bt_mesh_prov_init>
		if (err) {
 80090e8:	4604      	mov	r4, r0
 80090ea:	b948      	cbnz	r0, 8009100 <bt_mesh_init+0x2c>
			return err;
		}
	}

	bt_mesh_net_init();
 80090ec:	f001 fb18 	bl	800a720 <bt_mesh_net_init>
	bt_mesh_trans_init();
 80090f0:	f002 faca 	bl	800b688 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
 80090f4:	f000 faf2 	bl	80096dc <bt_mesh_beacon_init>
	bt_mesh_adv_init();
 80090f8:	f000 f92a 	bl	8009350 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
 80090fc:	f008 f8fe 	bl	80112fc <bt_mesh_proxy_init>
	}

	return 0;
}
 8009100:	4620      	mov	r0, r4
 8009102:	bd38      	pop	{r3, r4, r5, pc}

08009104 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <adv_alloc+0xc>)
 8009106:	220c      	movs	r2, #12
 8009108:	fb02 3000 	mla	r0, r2, r0, r3
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000a7c 	.word	0x20000a7c

08009114 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, s8_t rssi,
			    u8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
 8009114:	2a03      	cmp	r2, #3
{
 8009116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911a:	4688      	mov	r8, r1
 800911c:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
 800911e:	d104      	bne.n	800912a <bt_mesh_scan_cb+0x16>
 8009120:	f103 0908 	add.w	r9, r3, #8
		return;
	}

	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	while (buf->len > 1) {
 8009124:	88a3      	ldrh	r3, [r4, #4]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d801      	bhi.n	800912e <bt_mesh_scan_cb+0x1a>
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct net_buf_simple_state state;
		u8_t len, type;

		len = net_buf_simple_pull_u8(buf);
 800912e:	4620      	mov	r0, r4
 8009130:	f008 fa5b 	bl	80115ea <net_buf_simple_pull_u8>
		/* Check for early termination */
		if (len == 0) {
 8009134:	4606      	mov	r6, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	d0f7      	beq.n	800912a <bt_mesh_scan_cb+0x16>
			return;
		}

		if (len > buf->len || buf->len < 1) {
 800913a:	88a3      	ldrh	r3, [r4, #4]
 800913c:	b285      	uxth	r5, r0
 800913e:	429d      	cmp	r5, r3
 8009140:	d8f3      	bhi.n	800912a <bt_mesh_scan_cb+0x16>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f1      	beq.n	800912a <bt_mesh_scan_cb+0x16>
	state->offset = net_buf_simple_headroom(buf);
 8009146:	4620      	mov	r0, r4
 8009148:	f008 fa7c 	bl	8011644 <net_buf_simple_headroom>
 800914c:	4607      	mov	r7, r0
			return;
		}

		net_buf_simple_save(buf, &state);

		type = net_buf_simple_pull_u8(buf);
 800914e:	4620      	mov	r0, r4
	state->len = buf->len;
 8009150:	f8b4 a004 	ldrh.w	sl, [r4, #4]
 8009154:	f008 fa49 	bl	80115ea <net_buf_simple_pull_u8>

		buf->len = len - 1;
 8009158:	3d01      	subs	r5, #1

		switch (type) {
 800915a:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
 800915c:	80a5      	strh	r5, [r4, #4]
		switch (type) {
 800915e:	d007      	beq.n	8009170 <bt_mesh_scan_cb+0x5c>
 8009160:	282b      	cmp	r0, #43	; 0x2b
 8009162:	d014      	beq.n	800918e <bt_mesh_scan_cb+0x7a>
 8009164:	2829      	cmp	r0, #41	; 0x29
 8009166:	d108      	bne.n	800917a <bt_mesh_scan_cb+0x66>
		case BT_DATA_MESH_MESSAGE:
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
			break;
#if defined(CONFIG_BT_MESH_PB_ADV)
		case BT_DATA_MESH_PROV:
			bt_mesh_pb_adv_recv(buf);
 8009168:	4620      	mov	r0, r4
 800916a:	f007 fb79 	bl	8010860 <bt_mesh_pb_adv_recv>
 800916e:	e004      	b.n	800917a <bt_mesh_scan_cb+0x66>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
 8009170:	2200      	movs	r2, #0
 8009172:	4641      	mov	r1, r8
 8009174:	4620      	mov	r0, r4
 8009176:	f001 f9b1 	bl	800a4dc <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
 800917a:	fa19 f787 	uxtah	r7, r9, r7
 800917e:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
 8009180:	f8a4 a004 	strh.w	sl, [r4, #4]
		default:
			break;
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
 8009184:	4631      	mov	r1, r6
 8009186:	4620      	mov	r0, r4
 8009188:	f008 fa27 	bl	80115da <net_buf_simple_pull>
 800918c:	e7ca      	b.n	8009124 <bt_mesh_scan_cb+0x10>
			bt_mesh_beacon_recv(buf);
 800918e:	4620      	mov	r0, r4
 8009190:	f000 fa0c 	bl	80095ac <bt_mesh_beacon_recv>
 8009194:	e7f1      	b.n	800917a <bt_mesh_scan_cb+0x66>
	...

08009198 <adv_thread>:
{
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
 800919c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800929c <adv_thread+0x104>
	const s32_t adv_int_min = ((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
 80091a0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80092a0 <adv_thread+0x108>
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 80091a4:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80092a4 <adv_thread+0x10c>
{
 80091a8:	b089      	sub	sp, #36	; 0x24
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
 80091aa:	2100      	movs	r1, #0
 80091ac:	4640      	mov	r0, r8
 80091ae:	f008 f913 	bl	80113d8 <net_buf_get>
 80091b2:	4605      	mov	r5, r0
			while (!buf) {
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	d059      	beq.n	800926c <adv_thread+0xd4>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 80091b8:	89eb      	ldrh	r3, [r5, #14]
 80091ba:	442b      	add	r3, r5
 80091bc:	3313      	adds	r3, #19
 80091be:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	7a0a      	ldrb	r2, [r1, #8]
 80091c6:	0750      	lsls	r0, r2, #29
 80091c8:	d562      	bpl.n	8009290 <adv_thread+0xf8>
			BT_MESH_ADV(buf)->busy = 0;
 80091ca:	f36f 0282 	bfc	r2, #2, #1
 80091ce:	720a      	strb	r2, [r1, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
 80091d0:	681b      	ldr	r3, [r3, #0]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
 80091d2:	f899 200e 	ldrb.w	r2, [r9, #14]
 80091d6:	2a09      	cmp	r2, #9
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 80091d8:	7a5a      	ldrb	r2, [r3, #9]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
 80091da:	e893 00c0 	ldmia.w	r3, {r6, r7}
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 80091de:	f002 021f 	and.w	r2, r2, #31
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 80091e2:	7a1b      	ldrb	r3, [r3, #8]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
 80091e4:	bf34      	ite	cc
 80091e6:	2164      	movcc	r1, #100	; 0x64
 80091e8:	2114      	movcs	r1, #20
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 80091ea:	428a      	cmp	r2, r1
 80091ec:	bfb8      	it	lt
 80091ee:	b28a      	uxthlt	r2, r1
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 80091f0:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 80091f4:	f003 0303 	and.w	r3, r3, #3
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 80091f8:	bfa8      	it	ge
 80091fa:	b292      	uxthge	r2, r2
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 80091fc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8009200:	f88d 300c 	strb.w	r3, [sp, #12]
	ad.data_len = buf->len;
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	f88d 300d 	strb.w	r3, [sp, #13]
	ad.data = buf->data;
 800920a:	68ab      	ldr	r3, [r5, #8]
 800920c:	9304      	str	r3, [sp, #16]
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 800920e:	f102 040a 	add.w	r4, r2, #10
	param.options = 0;
 8009212:	2300      	movs	r3, #0
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 8009214:	fb01 4404 	mla	r4, r1, r4, r4
	param.interval_min = ADV_INT(adv_int);
 8009218:	00d2      	lsls	r2, r2, #3
 800921a:	2105      	movs	r1, #5
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 800921c:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_INT(adv_int);
 800921e:	fb92 f2f1 	sdiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 8009222:	a805      	add	r0, sp, #20
	param.interval_min = ADV_INT(adv_int);
 8009224:	f8ad 2016 	strh.w	r2, [sp, #22]
	param.interval_max = param.interval_min;
 8009228:	f8ad 2018 	strh.w	r2, [sp, #24]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 800922c:	a903      	add	r1, sp, #12
 800922e:	2201      	movs	r2, #1
	param.options = 0;
 8009230:	f88d 3014 	strb.w	r3, [sp, #20]
	param.own_addr = NULL;
 8009234:	9307      	str	r3, [sp, #28]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 8009236:	f7fd f8cf 	bl	80063d8 <bt_le_adv_start>
 800923a:	4683      	mov	fp, r0
	net_buf_unref(buf);
 800923c:	4628      	mov	r0, r5
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 800923e:	b2a4      	uxth	r4, r4
	net_buf_unref(buf);
 8009240:	f008 f940 	bl	80114c4 <net_buf_unref>
	if (cb && cb->start) {
 8009244:	b1e6      	cbz	r6, 8009280 <adv_thread+0xe8>
 8009246:	6833      	ldr	r3, [r6, #0]
 8009248:	b11b      	cbz	r3, 8009252 <adv_thread+0xba>
		cb->start(duration, err, cb_data);
 800924a:	463a      	mov	r2, r7
 800924c:	4659      	mov	r1, fp
 800924e:	4620      	mov	r0, r4
 8009250:	4798      	blx	r3
	if (err) {
 8009252:	f1bb 0f00 	cmp.w	fp, #0
 8009256:	d11b      	bne.n	8009290 <adv_thread+0xf8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
 8009258:	4620      	mov	r0, r4
 800925a:	f008 fd0d 	bl	8011c78 <_impl_k_sleep>
	err = bt_le_adv_stop();
 800925e:	f7fd f957 	bl	8006510 <bt_le_adv_stop>
	if (cb && cb->end) {
 8009262:	6873      	ldr	r3, [r6, #4]
 8009264:	b1a3      	cbz	r3, 8009290 <adv_thread+0xf8>
		cb->end(err, cb_data);
 8009266:	4639      	mov	r1, r7
 8009268:	4798      	blx	r3
 800926a:	e011      	b.n	8009290 <adv_thread+0xf8>
				timeout = bt_mesh_proxy_adv_start();
 800926c:	f007 ff4a 	bl	8011104 <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
 8009270:	4601      	mov	r1, r0
 8009272:	4640      	mov	r0, r8
 8009274:	f008 f8b0 	bl	80113d8 <net_buf_get>
 8009278:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
 800927a:	f008 f833 	bl	80112e4 <bt_mesh_proxy_adv_stop>
 800927e:	e799      	b.n	80091b4 <adv_thread+0x1c>
	if (err) {
 8009280:	f1bb 0f00 	cmp.w	fp, #0
 8009284:	d104      	bne.n	8009290 <adv_thread+0xf8>
 8009286:	4620      	mov	r0, r4
 8009288:	f008 fcf6 	bl	8011c78 <_impl_k_sleep>
	err = bt_le_adv_stop();
 800928c:	f7fd f940 	bl	8006510 <bt_le_adv_stop>
		k_call_stacks_analyze();
 8009290:	f008 fa16 	bl	80116c0 <k_call_stacks_analyze>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 8009294:	f008 fcd2 	bl	8011c3c <_impl_k_yield>
 8009298:	e787      	b.n	80091aa <adv_thread+0x12>
 800929a:	bf00      	nop
 800929c:	2000648c 	.word	0x2000648c
 80092a0:	200058a0 	.word	0x200058a0
 80092a4:	0801385b 	.word	0x0801385b

080092a8 <bt_mesh_adv_update>:
	k_fifo_cancel_wait(&adv_queue);
 80092a8:	4801      	ldr	r0, [pc, #4]	; (80092b0 <bt_mesh_adv_update+0x8>)
 80092aa:	f008 babd 	b.w	8011828 <k_queue_cancel_wait>
 80092ae:	bf00      	nop
 80092b0:	2000648c 	.word	0x2000648c

080092b4 <bt_mesh_adv_create_from_pool>:
{
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	460c      	mov	r4, r1
	buf = net_buf_alloc(pool, timeout);
 80092b8:	9907      	ldr	r1, [sp, #28]
{
 80092ba:	4617      	mov	r7, r2
 80092bc:	461e      	mov	r6, r3
	buf = net_buf_alloc(pool, timeout);
 80092be:	f008 f84b 	bl	8011358 <net_buf_alloc>
	if (!buf) {
 80092c2:	4605      	mov	r5, r0
 80092c4:	b1c8      	cbz	r0, 80092fa <bt_mesh_adv_create_from_pool+0x46>
	adv = get_id(net_buf_id(buf));
 80092c6:	f008 f831 	bl	801132c <net_buf_id>
 80092ca:	47a0      	blx	r4
 80092cc:	89eb      	ldrh	r3, [r5, #14]
 80092ce:	442b      	add	r3, r5
 80092d0:	3313      	adds	r3, #19
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
 80092d8:	6018      	str	r0, [r3, #0]
	memset(adv, 0, sizeof(*adv));
 80092da:	220c      	movs	r2, #12
 80092dc:	2100      	movs	r1, #0
 80092de:	f7f7 fafb 	bl	80008d8 <memset>
	adv->type         = type;
 80092e2:	7a23      	ldrb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
 80092e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
	adv->type         = type;
 80092e8:	f367 0301 	bfi	r3, r7, #0, #2
	adv->count        = xmit_count;
 80092ec:	f366 03c5 	bfi	r3, r6, #3, #3
 80092f0:	7223      	strb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
 80092f2:	7a63      	ldrb	r3, [r4, #9]
 80092f4:	f362 0304 	bfi	r3, r2, #0, #5
 80092f8:	7263      	strb	r3, [r4, #9]
}
 80092fa:	4628      	mov	r0, r5
 80092fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009300 <bt_mesh_adv_create>:
{
 8009300:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
 8009302:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009306:	460b      	mov	r3, r1
 8009308:	4602      	mov	r2, r0
 800930a:	4903      	ldr	r1, [pc, #12]	; (8009318 <bt_mesh_adv_create+0x18>)
 800930c:	4803      	ldr	r0, [pc, #12]	; (800931c <bt_mesh_adv_create+0x1c>)
 800930e:	f7ff ffd1 	bl	80092b4 <bt_mesh_adv_create_from_pool>
}
 8009312:	b003      	add	sp, #12
 8009314:	f85d fb04 	ldr.w	pc, [sp], #4
 8009318:	08009105 	.word	0x08009105
 800931c:	200064dc 	.word	0x200064dc

08009320 <bt_mesh_adv_send>:
{
 8009320:	b510      	push	{r4, lr}
 8009322:	89c3      	ldrh	r3, [r0, #14]
 8009324:	4403      	add	r3, r0
 8009326:	3313      	adds	r3, #19
 8009328:	f023 0303 	bic.w	r3, r3, #3
	BT_MESH_ADV(buf)->cb = cb;
 800932c:	681c      	ldr	r4, [r3, #0]
	BT_MESH_ADV(buf)->cb_data = cb_data;
 800932e:	e884 0006 	stmia.w	r4, {r1, r2}
	BT_MESH_ADV(buf)->busy = 1;
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	7a13      	ldrb	r3, [r2, #8]
 8009336:	f043 0304 	orr.w	r3, r3, #4
 800933a:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
 800933c:	f008 f8de 	bl	80114fc <net_buf_ref>
}
 8009340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
 8009344:	4601      	mov	r1, r0
 8009346:	4801      	ldr	r0, [pc, #4]	; (800934c <bt_mesh_adv_send+0x2c>)
 8009348:	f008 b8ae 	b.w	80114a8 <net_buf_put>
 800934c:	2000648c 	.word	0x2000648c

08009350 <bt_mesh_adv_init>:
	}
}

void bt_mesh_adv_init(void)
{
 8009350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 8009352:	2300      	movs	r3, #0
 8009354:	f06f 0208 	mvn.w	r2, #8
 8009358:	9305      	str	r3, [sp, #20]
 800935a:	9304      	str	r3, [sp, #16]
 800935c:	9203      	str	r2, [sp, #12]
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <bt_mesh_adv_init+0x28>)
 800936a:	4904      	ldr	r1, [pc, #16]	; (800937c <bt_mesh_adv_init+0x2c>)
 800936c:	4804      	ldr	r0, [pc, #16]	; (8009380 <bt_mesh_adv_init+0x30>)
 800936e:	f008 ff65 	bl	801223c <_impl_k_thread_create>
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
}
 8009372:	b007      	add	sp, #28
 8009374:	f85d fb04 	ldr.w	pc, [sp], #4
 8009378:	08009199 	.word	0x08009199
 800937c:	20003548 	.word	0x20003548
 8009380:	20000b6c 	.word	0x20000b6c

08009384 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
 8009384:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
 8009388:	4906      	ldr	r1, [pc, #24]	; (80093a4 <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	9000      	str	r0, [sp, #0]
 800938e:	889b      	ldrh	r3, [r3, #4]
 8009390:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
 8009394:	4668      	mov	r0, sp
 8009396:	f7fd f8e1 	bl	800655c <bt_le_scan_start>
}
 800939a:	b003      	add	sp, #12
 800939c:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a0:	08012c44 	.word	0x08012c44
 80093a4:	08009115 	.word	0x08009115

080093a8 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
 80093a8:	f7fd b974 	b.w	8006694 <bt_le_scan_stop>

080093ac <beacon_complete>:
{
	memcpy(sub->beacon_cache, data, 21);
}

static void beacon_complete(int err, void *user_data)
{
 80093ac:	b510      	push	{r4, lr}
 80093ae:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 80093b0:	f008 fd6c 	bl	8011e8c <_impl_k_uptime_get_32>
	struct bt_mesh_subnet *sub = user_data;

	BT_DBG("err %d", err);

	sub->beacon_sent = k_uptime_get_32();
 80093b4:	6020      	str	r0, [r4, #0]
 80093b6:	bd10      	pop	{r4, pc}

080093b8 <bt_mesh_beacon_ivu_initiator.part.1>:
void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
}

void bt_mesh_beacon_ivu_initiator(bool enable)
 80093b8:	b508      	push	{r3, lr}
{
	bt_mesh.ivu_initiator = enable;

	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
 80093ba:	f005 f8cb 	bl	800e554 <bt_mesh_beacon_get>
 80093be:	b920      	cbnz	r0, 80093ca <bt_mesh_beacon_ivu_initiator.part.1+0x12>
		k_delayed_work_cancel(&beacon_timer);
 80093c0:	4802      	ldr	r0, [pc, #8]	; (80093cc <bt_mesh_beacon_ivu_initiator.part.1+0x14>)
	}
}
 80093c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
 80093c6:	f009 b847 	b.w	8012458 <k_delayed_work_cancel>
 80093ca:	bd08      	pop	{r3, pc}
 80093cc:	20000bd4 	.word	0x20000bd4

080093d0 <k_work_submit_to_queue.constprop.4>:
 80093d0:	4909      	ldr	r1, [pc, #36]	; (80093f8 <k_work_submit_to_queue.constprop.4+0x28>)
 80093d2:	f3bf 8f5b 	dmb	ish
 80093d6:	e851 3f00 	ldrex	r3, [r1]
 80093da:	f043 0201 	orr.w	r2, r3, #1
 80093de:	e841 2000 	strex	r0, r2, [r1]
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d1f7      	bne.n	80093d6 <k_work_submit_to_queue.constprop.4+0x6>
 80093e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d403      	bmi.n	80093f6 <k_work_submit_to_queue.constprop.4+0x26>
		k_queue_append(&work_q->queue, work);
 80093ee:	3908      	subs	r1, #8
 80093f0:	4802      	ldr	r0, [pc, #8]	; (80093fc <k_work_submit_to_queue.constprop.4+0x2c>)
 80093f2:	f008 ba58 	b.w	80118a6 <k_queue_append>
 80093f6:	4770      	bx	lr
 80093f8:	20000bdc 	.word	0x20000bdc
 80093fc:	20001498 	.word	0x20001498

08009400 <bt_mesh_beacon_create>:
{
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	460c      	mov	r4, r1
 8009404:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
 8009406:	f000 fbdb 	bl	8009bc0 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
 800940a:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
 800940c:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
 800940e:	4620      	mov	r0, r4
 8009410:	f008 f887 	bl	8011522 <net_buf_simple_add_u8>
	if (sub->kr_flag) {
 8009414:	7fab      	ldrb	r3, [r5, #30]
 8009416:	b1c3      	cbz	r3, 800944a <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
 8009418:	f105 0689 	add.w	r6, r5, #137	; 0x89
	net_buf_simple_add_u8(buf, flags);
 800941c:	4639      	mov	r1, r7
 800941e:	4620      	mov	r0, r4
 8009420:	f008 f87f 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
 8009424:	2208      	movs	r2, #8
 8009426:	f106 0121 	add.w	r1, r6, #33	; 0x21
 800942a:	4620      	mov	r0, r4
 800942c:	f008 f870 	bl	8011510 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <bt_mesh_beacon_create+0x50>)
 8009432:	4620      	mov	r0, r4
 8009434:	6819      	ldr	r1, [r3, #0]
 8009436:	f008 f89c 	bl	8011572 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
 800943a:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800943e:	4620      	mov	r0, r4
 8009440:	2208      	movs	r2, #8
}
 8009442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
 8009446:	f008 b863 	b.w	8011510 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
 800944a:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800944e:	e7e5      	b.n	800941c <bt_mesh_beacon_create+0x1c>
 8009450:	20005b88 	.word	0x20005b88

08009454 <beacon_send>:
{
 8009454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
 8009458:	f007 f9fa 	bl	8010850 <bt_prov_active>
 800945c:	b138      	cbz	r0, 800946e <beacon_send+0x1a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800945e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009462:	494b      	ldr	r1, [pc, #300]	; (8009590 <beacon_send+0x13c>)
 8009464:	484b      	ldr	r0, [pc, #300]	; (8009594 <beacon_send+0x140>)
}
 8009466:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946a:	f009 b841 	b.w	80124f0 <k_delayed_work_submit_to_queue>
	if (bt_mesh_is_provisioned()) {
 800946e:	f7ff fe11 	bl	8009094 <bt_mesh_is_provisioned>
 8009472:	4604      	mov	r4, r0
 8009474:	2800      	cmp	r0, #0
 8009476:	d063      	beq.n	8009540 <beacon_send+0xec>
	first_half = !first_half;
 8009478:	4b47      	ldr	r3, [pc, #284]	; (8009598 <beacon_send+0x144>)
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	f082 0201 	eor.w	r2, r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
	if (first_half) {
 8009482:	b9d2      	cbnz	r2, 80094ba <beacon_send+0x66>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009484:	4b45      	ldr	r3, [pc, #276]	; (800959c <beacon_send+0x148>)
 8009486:	f8b3 01d0 	ldrh.w	r0, [r3, #464]	; 0x1d0
 800948a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800948e:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
 8009490:	bf1c      	itt	ne
 8009492:	f893 11b9 	ldrbne.w	r1, [r3, #441]	; 0x1b9
 8009496:	f883 11b8 	strbne.w	r1, [r3, #440]	; 0x1b8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800949a:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
		sub->beacons_cur = 0;
 800949e:	bf18      	it	ne
 80094a0:	f883 21b9 	strbne.w	r2, [r3, #441]	; 0x1b9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80094a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094a8:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
 80094aa:	bf1f      	itttt	ne
 80094ac:	f893 229d 	ldrbne.w	r2, [r3, #669]	; 0x29d
 80094b0:	f883 229c 	strbne.w	r2, [r3, #668]	; 0x29c
		sub->beacons_cur = 0;
 80094b4:	2200      	movne	r2, #0
 80094b6:	f883 229d 	strbne.w	r2, [r3, #669]	; 0x29d
 80094ba:	f008 fce7 	bl	8011e8c <_impl_k_uptime_get_32>
 80094be:	4c38      	ldr	r4, [pc, #224]	; (80095a0 <beacon_send+0x14c>)
		if (time_diff < K_SECONDS(600) &&
 80094c0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80095a4 <beacon_send+0x150>
		bt_mesh_adv_send(buf, &send_cb, sub);
 80094c4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80095a8 <beacon_send+0x154>
 80094c8:	4606      	mov	r6, r0
 80094ca:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80094ce:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 80094d2:	42ac      	cmp	r4, r5
 80094d4:	d018      	beq.n	8009508 <beacon_send+0xb4>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80094d6:	8ba3      	ldrh	r3, [r4, #28]
 80094d8:	42bb      	cmp	r3, r7
 80094da:	d029      	beq.n	8009530 <beacon_send+0xdc>
		time_diff = now - sub->beacon_sent;
 80094dc:	6822      	ldr	r2, [r4, #0]
 80094de:	1ab2      	subs	r2, r6, r2
		if (time_diff < K_SECONDS(600) &&
 80094e0:	4542      	cmp	r2, r8
 80094e2:	d809      	bhi.n	80094f8 <beacon_send+0xa4>
		    time_diff < BEACON_THRESHOLD(sub)) {
 80094e4:	7921      	ldrb	r1, [r4, #4]
 80094e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80094ea:	fb01 3303 	mla	r3, r1, r3, r3
 80094ee:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 80094f2:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d31b      	bcc.n	8009530 <beacon_send+0xdc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT_COUNT,
 80094f8:	2300      	movs	r3, #0
 80094fa:	2214      	movs	r2, #20
 80094fc:	4619      	mov	r1, r3
 80094fe:	2002      	movs	r0, #2
 8009500:	f7ff fefe 	bl	8009300 <bt_mesh_adv_create>
		if (!buf) {
 8009504:	4682      	mov	sl, r0
 8009506:	b930      	cbnz	r0, 8009516 <beacon_send+0xc2>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
 8009508:	f005 f824 	bl	800e554 <bt_mesh_beacon_get>
 800950c:	2801      	cmp	r0, #1
 800950e:	d111      	bne.n	8009534 <beacon_send+0xe0>
 8009510:	f242 7210 	movw	r2, #10000	; 0x2710
 8009514:	e7a5      	b.n	8009462 <beacon_send+0xe>
		bt_mesh_beacon_create(sub, &buf->b);
 8009516:	f100 0108 	add.w	r1, r0, #8
 800951a:	4620      	mov	r0, r4
 800951c:	f7ff ff70 	bl	8009400 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
 8009520:	4650      	mov	r0, sl
 8009522:	4622      	mov	r2, r4
 8009524:	4649      	mov	r1, r9
 8009526:	f7ff fefb 	bl	8009320 <bt_mesh_adv_send>
		net_buf_unref(buf);
 800952a:	4650      	mov	r0, sl
 800952c:	f007 ffca 	bl	80114c4 <net_buf_unref>
 8009530:	34e4      	adds	r4, #228	; 0xe4
 8009532:	e7ce      	b.n	80094d2 <beacon_send+0x7e>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <beacon_send+0x148>)
 8009536:	79db      	ldrb	r3, [r3, #7]
 8009538:	079b      	lsls	r3, r3, #30
 800953a:	d4e9      	bmi.n	8009510 <beacon_send+0xbc>
 800953c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT_COUNT,
 8009540:	2102      	movs	r1, #2
 8009542:	4603      	mov	r3, r0
 8009544:	2214      	movs	r2, #20
 8009546:	4608      	mov	r0, r1
 8009548:	f7ff feda 	bl	8009300 <bt_mesh_adv_create>
	if (!buf) {
 800954c:	4605      	mov	r5, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	d085      	beq.n	800945e <beacon_send+0xa>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
 8009552:	f100 0608 	add.w	r6, r0, #8
 8009556:	4621      	mov	r1, r4
 8009558:	4630      	mov	r0, r6
 800955a:	f007 ffe2 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, bt_mesh_prov_get_uuid(), 16);
 800955e:	f007 f971 	bl	8010844 <bt_mesh_prov_get_uuid>
 8009562:	2210      	movs	r2, #16
 8009564:	4601      	mov	r1, r0
 8009566:	4630      	mov	r0, r6
 8009568:	f007 ffd2 	bl	8011510 <net_buf_simple_add_mem>
	memset(net_buf_add(buf, 2 + 4), 0, 2 + 4);
 800956c:	2106      	movs	r1, #6
 800956e:	4630      	mov	r0, r6
 8009570:	f007 ffc8 	bl	8011504 <net_buf_simple_add>
 8009574:	4621      	mov	r1, r4
 8009576:	2206      	movs	r2, #6
 8009578:	f7f7 f9ae 	bl	80008d8 <memset>
	bt_mesh_adv_send(buf, NULL, NULL);
 800957c:	4628      	mov	r0, r5
 800957e:	4622      	mov	r2, r4
 8009580:	4621      	mov	r1, r4
 8009582:	f7ff fecd 	bl	8009320 <bt_mesh_adv_send>
	net_buf_unref(buf);
 8009586:	4628      	mov	r0, r5
 8009588:	f007 ff9c 	bl	80114c4 <net_buf_unref>
 800958c:	e767      	b.n	800945e <beacon_send+0xa>
 800958e:	bf00      	nop
 8009590:	20000bd4 	.word	0x20000bd4
 8009594:	20001498 	.word	0x20001498
 8009598:	20000bfc 	.word	0x20000bfc
 800959c:	20005b88 	.word	0x20005b88
 80095a0:	20005d3c 	.word	0x20005d3c
 80095a4:	000927bf 	.word	0x000927bf
 80095a8:	08013860 	.word	0x08013860

080095ac <bt_mesh_beacon_recv>:
{
 80095ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < 1) {
 80095b0:	8883      	ldrh	r3, [r0, #4]
{
 80095b2:	b085      	sub	sp, #20
 80095b4:	4605      	mov	r5, r0
	if (buf->len < 1) {
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d03b      	beq.n	8009632 <bt_mesh_beacon_recv+0x86>
	type = net_buf_simple_pull_u8(buf);
 80095ba:	f008 f816 	bl	80115ea <net_buf_simple_pull_u8>
	switch (type) {
 80095be:	2801      	cmp	r0, #1
 80095c0:	d137      	bne.n	8009632 <bt_mesh_beacon_recv+0x86>
	if (buf->len < 21) {
 80095c2:	88ab      	ldrh	r3, [r5, #4]
 80095c4:	2b14      	cmp	r3, #20
 80095c6:	d934      	bls.n	8009632 <bt_mesh_beacon_recv+0x86>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80095c8:	4e42      	ldr	r6, [pc, #264]	; (80096d4 <bt_mesh_beacon_recv+0x128>)
	sub = cache_check(buf->data);
 80095ca:	682c      	ldr	r4, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80095cc:	f8b6 21d0 	ldrh.w	r2, [r6, #464]	; 0x1d0
 80095d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d006      	beq.n	80095e6 <bt_mesh_beacon_recv+0x3a>
		if (!memcmp(sub->beacon_cache, data, 21)) {
 80095d8:	2215      	movs	r2, #21
 80095da:	4621      	mov	r1, r4
 80095dc:	f506 70dd 	add.w	r0, r6, #442	; 0x1ba
 80095e0:	f7f7 f939 	bl	8000856 <memcmp>
 80095e4:	b348      	cbz	r0, 800963a <bt_mesh_beacon_recv+0x8e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80095e6:	f8b6 22b4 	ldrh.w	r2, [r6, #692]	; 0x2b4
 80095ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d005      	beq.n	80095fe <bt_mesh_beacon_recv+0x52>
		if (!memcmp(sub->beacon_cache, data, 21)) {
 80095f2:	2215      	movs	r2, #21
 80095f4:	4621      	mov	r1, r4
 80095f6:	4838      	ldr	r0, [pc, #224]	; (80096d8 <bt_mesh_beacon_recv+0x12c>)
 80095f8:	f7f7 f92d 	bl	8000856 <memcmp>
 80095fc:	b1e0      	cbz	r0, 8009638 <bt_mesh_beacon_recv+0x8c>
	flags = net_buf_simple_pull_u8(buf);
 80095fe:	4628      	mov	r0, r5
	data = buf->data;
 8009600:	f8d5 9000 	ldr.w	r9, [r5]
	flags = net_buf_simple_pull_u8(buf);
 8009604:	f007 fff1 	bl	80115ea <net_buf_simple_pull_u8>
	net_buf_simple_pull(buf, 8);
 8009608:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
 800960a:	4607      	mov	r7, r0
	net_buf_simple_pull(buf, 8);
 800960c:	4628      	mov	r0, r5
	net_id = buf->data;
 800960e:	682c      	ldr	r4, [r5, #0]
	net_buf_simple_pull(buf, 8);
 8009610:	f007 ffe3 	bl	80115da <net_buf_simple_pull>
	iv_index = net_buf_simple_pull_be32(buf);
 8009614:	4628      	mov	r0, r5
 8009616:	f008 f803 	bl	8011620 <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
 800961a:	f10d 030f 	add.w	r3, sp, #15
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
 8009622:	4680      	mov	r8, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	4620      	mov	r0, r4
 8009628:	4639      	mov	r1, r7
 800962a:	f000 fdbf 	bl	800a1ac <bt_mesh_subnet_find>
	if (!sub) {
 800962e:	4604      	mov	r4, r0
 8009630:	b980      	cbnz	r0, 8009654 <bt_mesh_beacon_recv+0xa8>
}
 8009632:	b005      	add	sp, #20
 8009634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
 8009638:	20e4      	movs	r0, #228	; 0xe4
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800963a:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
 800963e:	1834      	adds	r4, r6, r0
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
 8009640:	f004 ff88 	bl	800e554 <bt_mesh_beacon_get>
 8009644:	2801      	cmp	r0, #1
 8009646:	d1f4      	bne.n	8009632 <bt_mesh_beacon_recv+0x86>
	    sub->beacons_cur < 0xff) {
 8009648:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
 800964a:	2bff      	cmp	r3, #255	; 0xff
 800964c:	d0f1      	beq.n	8009632 <bt_mesh_beacon_recv+0x86>
		sub->beacons_cur++;
 800964e:	3301      	adds	r3, #1
 8009650:	7163      	strb	r3, [r4, #5]
 8009652:	e7ee      	b.n	8009632 <bt_mesh_beacon_recv+0x86>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
 8009654:	7fc3      	ldrb	r3, [r0, #31]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d103      	bne.n	8009662 <bt_mesh_beacon_recv+0xb6>
 800965a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0e7      	beq.n	8009632 <bt_mesh_beacon_recv+0x86>
	memcpy(sub->beacon_cache, data, 21);
 8009662:	2215      	movs	r2, #21
 8009664:	4649      	mov	r1, r9
 8009666:	1da0      	adds	r0, r4, #6
 8009668:	f7f7 f90a 	bl	8000880 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
 800966c:	2000      	movs	r0, #0
 800966e:	f000 f931 	bl	80098d4 <bt_mesh_subnet_get>
 8009672:	b110      	cbz	r0, 800967a <bt_mesh_beacon_recv+0xce>
 8009674:	8ba3      	ldrh	r3, [r4, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e2      	bne.n	8009640 <bt_mesh_beacon_recv+0x94>
	if (bt_mesh.ivu_initiator &&
 800967a:	79f3      	ldrb	r3, [r6, #7]
 800967c:	f013 0f02 	tst.w	r3, #2
 8009680:	ea4f 0557 	mov.w	r5, r7, lsr #1
 8009684:	d00a      	beq.n	800969c <bt_mesh_beacon_recv+0xf0>
	    bt_mesh.iv_update == BT_MESH_IV_UPDATE(flags)) {
 8009686:	f003 0201 	and.w	r2, r3, #1
 800968a:	f005 0101 	and.w	r1, r5, #1
	if (bt_mesh.ivu_initiator &&
 800968e:	428a      	cmp	r2, r1
 8009690:	d104      	bne.n	800969c <bt_mesh_beacon_recv+0xf0>
	bt_mesh.ivu_initiator = enable;
 8009692:	f36f 0341 	bfc	r3, #1, #1
 8009696:	71f3      	strb	r3, [r6, #7]
 8009698:	f7ff fe8e 	bl	80093b8 <bt_mesh_beacon_ivu_initiator.part.1>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
 800969c:	f005 0101 	and.w	r1, r5, #1
 80096a0:	4640      	mov	r0, r8
 80096a2:	f000 fb8d 	bl	8009dc0 <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
 80096a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
 80096aa:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
 80096ac:	f007 0101 	and.w	r1, r7, #1
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 fb31 	bl	8009d18 <bt_mesh_kr_update>
	if (kr_change) {
 80096b6:	b148      	cbz	r0, 80096cc <bt_mesh_beacon_recv+0x120>
		bt_mesh_net_beacon_update(sub);
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fa8d 	bl	8009bd8 <bt_mesh_net_beacon_update>
	if (iv_change) {
 80096be:	b11d      	cbz	r5, 80096c8 <bt_mesh_beacon_recv+0x11c>
		bt_mesh_net_sec_update(NULL);
 80096c0:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
 80096c2:	f000 fb67 	bl	8009d94 <bt_mesh_net_sec_update>
 80096c6:	e7bb      	b.n	8009640 <bt_mesh_beacon_recv+0x94>
 80096c8:	4620      	mov	r0, r4
 80096ca:	e7fa      	b.n	80096c2 <bt_mesh_beacon_recv+0x116>
	if (iv_change) {
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d0b7      	beq.n	8009640 <bt_mesh_beacon_recv+0x94>
 80096d0:	e7f6      	b.n	80096c0 <bt_mesh_beacon_recv+0x114>
 80096d2:	bf00      	nop
 80096d4:	20005b88 	.word	0x20005b88
 80096d8:	20005e26 	.word	0x20005e26

080096dc <bt_mesh_beacon_init>:
	k_delayed_work_init(&beacon_timer, beacon_send);
 80096dc:	4901      	ldr	r1, [pc, #4]	; (80096e4 <bt_mesh_beacon_init+0x8>)
 80096de:	4802      	ldr	r0, [pc, #8]	; (80096e8 <bt_mesh_beacon_init+0xc>)
 80096e0:	f008 be9c 	b.w	801241c <k_delayed_work_init>
 80096e4:	08009455 	.word	0x08009455
 80096e8:	20000bd4 	.word	0x20000bd4

080096ec <bt_mesh_beacon_ivu_initiator>:
	bt_mesh.ivu_initiator = enable;
 80096ec:	4b04      	ldr	r3, [pc, #16]	; (8009700 <bt_mesh_beacon_ivu_initiator+0x14>)
 80096ee:	79da      	ldrb	r2, [r3, #7]
 80096f0:	f360 0241 	bfi	r2, r0, #1, #1
 80096f4:	71da      	strb	r2, [r3, #7]
	if (enable) {
 80096f6:	b108      	cbz	r0, 80096fc <bt_mesh_beacon_ivu_initiator+0x10>
	k_work_submit_to_queue(&k_sys_work_q, work);
 80096f8:	f7ff be6a 	b.w	80093d0 <k_work_submit_to_queue.constprop.4>
 80096fc:	f7ff be5c 	b.w	80093b8 <bt_mesh_beacon_ivu_initiator.part.1>
 8009700:	20005b88 	.word	0x20005b88

08009704 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
 8009704:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
 8009706:	f7ff fcc5 	bl	8009094 <bt_mesh_is_provisioned>
 800970a:	b1e8      	cbz	r0, 8009748 <bt_mesh_beacon_enable+0x44>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800970c:	4c10      	ldr	r4, [pc, #64]	; (8009750 <bt_mesh_beacon_enable+0x4c>)
 800970e:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8009712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009716:	429a      	cmp	r2, r3
 8009718:	d008      	beq.n	800972c <bt_mesh_beacon_enable+0x28>
			continue;
		}

		sub->beacons_last = 0;
 800971a:	2300      	movs	r3, #0
		sub->beacons_cur = 0;

		bt_mesh_net_beacon_update(sub);
 800971c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
		sub->beacons_last = 0;
 8009720:	f884 31b8 	strb.w	r3, [r4, #440]	; 0x1b8
		sub->beacons_cur = 0;
 8009724:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
		bt_mesh_net_beacon_update(sub);
 8009728:	f000 fa56 	bl	8009bd8 <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800972c:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8009730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009734:	429a      	cmp	r2, r3
 8009736:	d007      	beq.n	8009748 <bt_mesh_beacon_enable+0x44>
		sub->beacons_last = 0;
 8009738:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
 800973a:	4806      	ldr	r0, [pc, #24]	; (8009754 <bt_mesh_beacon_enable+0x50>)
		sub->beacons_last = 0;
 800973c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
		sub->beacons_cur = 0;
 8009740:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
		bt_mesh_net_beacon_update(sub);
 8009744:	f000 fa48 	bl	8009bd8 <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
 8009748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800974c:	f7ff be40 	b.w	80093d0 <k_work_submit_to_queue.constprop.4>
 8009750:	20005b88 	.word	0x20005b88
 8009754:	20005e20 	.word	0x20005e20

08009758 <bt_mesh_beacon_disable>:

void bt_mesh_beacon_disable(void)
{
	if (!bt_mesh.ivu_initiator) {
 8009758:	4b03      	ldr	r3, [pc, #12]	; (8009768 <bt_mesh_beacon_disable+0x10>)
 800975a:	79db      	ldrb	r3, [r3, #7]
 800975c:	079b      	lsls	r3, r3, #30
 800975e:	d402      	bmi.n	8009766 <bt_mesh_beacon_disable+0xe>
		k_delayed_work_cancel(&beacon_timer);
 8009760:	4802      	ldr	r0, [pc, #8]	; (800976c <bt_mesh_beacon_disable+0x14>)
 8009762:	f008 be79 	b.w	8012458 <k_delayed_work_cancel>
 8009766:	4770      	bx	lr
 8009768:	20005b88 	.word	0x20005b88
 800976c:	20000bd4 	.word	0x20000bd4

08009770 <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
 8009770:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009774:	4605      	mov	r5, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
 8009776:	f105 0621 	add.w	r6, r5, #33	; 0x21
{
 800977a:	4608      	mov	r0, r1
 800977c:	4617      	mov	r7, r2
	if (memcmp(net_id, keys->net_id, 8)) {
 800977e:	4631      	mov	r1, r6
 8009780:	2208      	movs	r2, #8
{
 8009782:	4698      	mov	r8, r3
	if (memcmp(net_id, keys->net_id, 8)) {
 8009784:	f7f7 f867 	bl	8000856 <memcmp>
 8009788:	b998      	cbnz	r0, 80097b2 <auth_match+0x42>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
 800978a:	ac02      	add	r4, sp, #8
 800978c:	4643      	mov	r3, r8
 800978e:	4632      	mov	r2, r6
 8009790:	4639      	mov	r1, r7
 8009792:	9400      	str	r4, [sp, #0]
 8009794:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8009798:	f002 fd11 	bl	800c1be <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
 800979c:	2208      	movs	r2, #8
 800979e:	4621      	mov	r1, r4
 80097a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097a2:	f7f7 f858 	bl	8000856 <memcmp>
 80097a6:	fab0 f080 	clz	r0, r0
 80097aa:	0940      	lsrs	r0, r0, #5
			bt_hex(auth, 8), bt_hex(net_auth, 8));
		return false;
	}

	return true;
}
 80097ac:	b004      	add	sp, #16
 80097ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
 80097b2:	2000      	movs	r0, #0
 80097b4:	e7fa      	b.n	80097ac <auth_match+0x3c>
	...

080097b8 <net_decrypt.isra.2>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 80097b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 80097bc:	4d41      	ldr	r5, [pc, #260]	; (80098c4 <net_decrypt.isra.2+0x10c>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 80097be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80097c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80097c2:	4689      	mov	r9, r1
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 80097c4:	6829      	ldr	r1, [r5, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 80097c6:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 80097c8:	7813      	ldrb	r3, [r2, #0]
 80097ca:	f001 0101 	and.w	r1, r1, #1
 80097ce:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
 80097d2:	7cbb      	ldrb	r3, [r7, #18]
 80097d4:	f361 0300 	bfi	r3, r1, #0, #1
 80097d8:	74bb      	strb	r3, [r7, #18]
	buf->data = buf->__buf + reserve_head;
 80097da:	f104 0308 	add.w	r3, r4, #8
 80097de:	6023      	str	r3, [r4, #0]
	buf->len = 0;
 80097e0:	2300      	movs	r3, #0
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 80097e2:	4690      	mov	r8, r2
 80097e4:	80a3      	strh	r3, [r4, #4]

	net_buf_simple_init(buf, 0);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
 80097e6:	4651      	mov	r1, sl
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 80097e8:	4606      	mov	r6, r0
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
 80097ea:	4620      	mov	r0, r4
 80097ec:	f007 fe8a 	bl	8011504 <net_buf_simple_add>
 80097f0:	4652      	mov	r2, sl
 80097f2:	4641      	mov	r1, r8
 80097f4:	f7f7 f844 	bl	8000880 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 80097f8:	7cbb      	ldrb	r3, [r7, #18]
 80097fa:	6829      	ldr	r1, [r5, #0]
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	464a      	mov	r2, r9
 8009804:	1ac9      	subs	r1, r1, r3
 8009806:	f002 fb11 	bl	800be2c <bt_mesh_net_obfuscate>
 800980a:	2800      	cmp	r0, #0
 800980c:	d150      	bne.n	80098b0 <net_decrypt.isra.2+0xf8>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
 800980e:	7cbb      	ldrb	r3, [r7, #18]
 8009810:	f013 0830 	ands.w	r8, r3, #48	; 0x30
 8009814:	d130      	bne.n	8009878 <net_decrypt.isra.2+0xc0>
 8009816:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
 8009818:	682a      	ldr	r2, [r5, #0]
 800981a:	f891 9002 	ldrb.w	r9, [r1, #2]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	1ad3      	subs	r3, r2, r3
	memcpy(&hash2, &pdu->data[3], 4);
 8009824:	2204      	movs	r2, #4
 8009826:	3103      	adds	r1, #3
 8009828:	eb0d 0002 	add.w	r0, sp, r2
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
 800982c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
 8009830:	f7f7 f826 	bl	8000880 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	f8df e094 	ldr.w	lr, [pc, #148]	; 80098cc <net_decrypt.isra.2+0x114>
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	4318      	orrs	r0, r3
 8009840:	f10e 0c50 	add.w	ip, lr, #80	; 0x50
		if (msg_cache[i] == hash) {
 8009844:	e9fe 2302 	ldrd	r2, r3, [lr, #8]!
 8009848:	428b      	cmp	r3, r1
 800984a:	bf08      	it	eq
 800984c:	4282      	cmpeq	r2, r0
 800984e:	d032      	beq.n	80098b6 <net_decrypt.isra.2+0xfe>
	for (i = 0; i < ARRAY_SIZE(msg_cache); i++) {
 8009850:	45f4      	cmp	ip, lr
 8009852:	d1f7      	bne.n	8009844 <net_decrypt.isra.2+0x8c>
	msg_cache[msg_cache_next++] = hash;
 8009854:	f8df e078 	ldr.w	lr, [pc, #120]	; 80098d0 <net_decrypt.isra.2+0x118>
 8009858:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <net_decrypt.isra.2+0x110>)
 800985a:	f8be 3000 	ldrh.w	r3, [lr]
 800985e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009862:	3301      	adds	r3, #1
 8009864:	e9c2 0100 	strd	r0, r1, [r2]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
 8009868:	b29b      	uxth	r3, r3
 800986a:	210a      	movs	r1, #10
 800986c:	fbb3 f2f1 	udiv	r2, r3, r1
 8009870:	fb01 3312 	mls	r3, r1, r2, r3
 8009874:	f8ae 3000 	strh.w	r3, [lr]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
 8009878:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
 800987a:	7951      	ldrb	r1, [r2, #5]
 800987c:	7993      	ldrb	r3, [r2, #6]
 800987e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009882:	b21b      	sxth	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
 8009884:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
 8009886:	813b      	strh	r3, [r7, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
 8009888:	dd18      	ble.n	80098bc <net_decrypt.isra.2+0x104>
		return -EINVAL;
	}

	BT_DBG("src 0x%04x", rx->ctx.addr);

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
 800988a:	7cba      	ldrb	r2, [r7, #18]
	    rx->net_if == BT_MESH_NET_IF_PROXY_CFG) {
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 800988c:	6829      	ldr	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
 800988e:	f002 0330 	and.w	r3, r2, #48	; 0x30
 8009892:	2b30      	cmp	r3, #48	; 0x30
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 8009894:	f002 0201 	and.w	r2, r2, #1
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
 8009898:	eba1 0202 	sub.w	r2, r1, r2
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 800989c:	bf0c      	ite	eq
 800989e:	2301      	moveq	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
 80098a0:	2300      	movne	r3, #0
 80098a2:	4621      	mov	r1, r4
 80098a4:	4630      	mov	r0, r6
 80098a6:	f002 fb34 	bl	800bf12 <bt_mesh_net_decrypt>
}
 80098aa:	b002      	add	sp, #8
 80098ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOENT;
 80098b0:	f06f 0001 	mvn.w	r0, #1
 80098b4:	e7f9      	b.n	80098aa <net_decrypt.isra.2+0xf2>
		return -EALREADY;
 80098b6:	f06f 0044 	mvn.w	r0, #68	; 0x44
 80098ba:	e7f6      	b.n	80098aa <net_decrypt.isra.2+0xf2>
		return -EINVAL;
 80098bc:	f06f 0015 	mvn.w	r0, #21
 80098c0:	e7f3      	b.n	80098aa <net_decrypt.isra.2+0xf2>
 80098c2:	bf00      	nop
 80098c4:	20005b88 	.word	0x20005b88
 80098c8:	20000ca8 	.word	0x20000ca8
 80098cc:	20000ca0 	.word	0x20000ca0
 80098d0:	20000cf8 	.word	0x20000cf8

080098d4 <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
 80098d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098d8:	4298      	cmp	r0, r3
 80098da:	d011      	beq.n	8009900 <bt_mesh_subnet_get+0x2c>
		if (bt_mesh.sub[i].net_idx == net_idx) {
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <bt_mesh_subnet_get+0x34>)
 80098de:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
 80098e2:	4282      	cmp	r2, r0
 80098e4:	d00a      	beq.n	80098fc <bt_mesh_subnet_get+0x28>
 80098e6:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
 80098ea:	4282      	cmp	r2, r0
 80098ec:	d10a      	bne.n	8009904 <bt_mesh_subnet_get+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 80098ee:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
 80098f0:	22e4      	movs	r2, #228	; 0xe4
 80098f2:	fb02 3000 	mla	r0, r2, r0, r3
 80098f6:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
 80098fa:	4770      	bx	lr
		if (bt_mesh.sub[i].net_idx == net_idx) {
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7f7      	b.n	80098f0 <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
 8009900:	4802      	ldr	r0, [pc, #8]	; (800990c <bt_mesh_subnet_get+0x38>)
 8009902:	4770      	bx	lr
	return NULL;
 8009904:	2000      	movs	r0, #0
}
 8009906:	4770      	bx	lr
 8009908:	20005b88 	.word	0x20005b88
 800990c:	20005d3c 	.word	0x20005d3c

08009910 <bt_mesh_net_keys_create>:
{
 8009910:	b530      	push	{r4, r5, lr}
 8009912:	b085      	sub	sp, #20
	u8_t p[] = { 0 };
 8009914:	2300      	movs	r3, #0
 8009916:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 800991a:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
 800991e:	460d      	mov	r5, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f100 0311 	add.w	r3, r0, #17
{
 8009926:	4604      	mov	r4, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	f10d 030f 	add.w	r3, sp, #15
 8009930:	a903      	add	r1, sp, #12
 8009932:	4628      	mov	r0, r5
 8009934:	f002 f9b6 	bl	800bca4 <bt_mesh_k2>
	if (err) {
 8009938:	b9d0      	cbnz	r0, 8009970 <bt_mesh_net_keys_create+0x60>
	memcpy(keys->net, key, 16);
 800993a:	4629      	mov	r1, r5
 800993c:	2210      	movs	r2, #16
 800993e:	4620      	mov	r0, r4
 8009940:	f7f6 ff9e 	bl	8000880 <memcpy>
	keys->nid = nid;
 8009944:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8009948:	7423      	strb	r3, [r4, #16]
	err = bt_mesh_k3(key, keys->net_id);
 800994a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 800994e:	4628      	mov	r0, r5
 8009950:	f002 fa00 	bl	800bd54 <bt_mesh_k3>
	if (err) {
 8009954:	b960      	cbnz	r0, 8009970 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
 8009956:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800995a:	4906      	ldr	r1, [pc, #24]	; (8009974 <bt_mesh_net_keys_create+0x64>)
 800995c:	4628      	mov	r0, r5
 800995e:	f002 fa4f 	bl	800be00 <bt_mesh_id128>
	if (err) {
 8009962:	b928      	cbnz	r0, 8009970 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
 8009964:	f104 0249 	add.w	r2, r4, #73	; 0x49
 8009968:	4903      	ldr	r1, [pc, #12]	; (8009978 <bt_mesh_net_keys_create+0x68>)
 800996a:	4628      	mov	r0, r5
 800996c:	f002 fa48 	bl	800be00 <bt_mesh_id128>
}
 8009970:	b005      	add	sp, #20
 8009972:	bd30      	pop	{r4, r5, pc}
 8009974:	08013868 	.word	0x08013868
 8009978:	0801386d 	.word	0x0801386d

0800997c <friend_cred_set>:
{
 800997c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997e:	b087      	sub	sp, #28
 8009980:	4605      	mov	r5, r0
 8009982:	4616      	mov	r6, r2
	lpn_addr = cred->addr;
 8009984:	8847      	ldrh	r7, [r0, #2]
{
 8009986:	460c      	mov	r4, r1
	frnd_addr = bt_mesh_primary_addr();
 8009988:	f002 fd14 	bl	800c3b4 <bt_mesh_primary_addr>
	p[0] = 0x01;
 800998c:	2301      	movs	r3, #1
 800998e:	f88d 300c 	strb.w	r3, [sp, #12]
	dst[0] = val >> 8;
 8009992:	0a3b      	lsrs	r3, r7, #8
 8009994:	f88d 300d 	strb.w	r3, [sp, #13]
 8009998:	0a03      	lsrs	r3, r0, #8
 800999a:	f88d 300f 	strb.w	r3, [sp, #15]
	sys_put_be16(cred->lpn_counter, p + 5);
 800999e:	88ab      	ldrh	r3, [r5, #4]
	dst[1] = val;
 80099a0:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
 80099a4:	0a1a      	lsrs	r2, r3, #8
	sys_put_be16(cred->frnd_counter, p + 7);
 80099a6:	88eb      	ldrh	r3, [r5, #6]
 80099a8:	f88d 2011 	strb.w	r2, [sp, #17]
 80099ac:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 80099b0:	0a1a      	lsrs	r2, r3, #8
 80099b2:	f88d 2013 	strb.w	r2, [sp, #19]
	dst[1] = val;
 80099b6:	f88d 3014 	strb.w	r3, [sp, #20]
			 cred->cred[idx].enc, cred->cred[idx].privacy);
 80099ba:	f101 0219 	add.w	r2, r1, #25
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
 80099be:	f101 0308 	add.w	r3, r1, #8
			 cred->cred[idx].enc, cred->cred[idx].privacy);
 80099c2:	3109      	adds	r1, #9
 80099c4:	442a      	add	r2, r5
 80099c6:	4429      	add	r1, r5
 80099c8:	f88d 0010 	strb.w	r0, [sp, #16]
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
 80099cc:	9201      	str	r2, [sp, #4]
 80099ce:	9100      	str	r1, [sp, #0]
 80099d0:	442b      	add	r3, r5
 80099d2:	2209      	movs	r2, #9
 80099d4:	a903      	add	r1, sp, #12
 80099d6:	4630      	mov	r0, r6
 80099d8:	f88d 700e 	strb.w	r7, [sp, #14]
 80099dc:	f002 f962 	bl	800bca4 <bt_mesh_k2>
}
 80099e0:	b007      	add	sp, #28
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099e4 <friend_cred_refresh>:
{
 80099e4:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 80099e6:	4c0f      	ldr	r4, [pc, #60]	; (8009a24 <friend_cred_refresh+0x40>)
 80099e8:	8863      	ldrh	r3, [r4, #2]
{
 80099ea:	4605      	mov	r5, r0
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 80099ec:	b14b      	cbz	r3, 8009a02 <friend_cred_refresh+0x1e>
 80099ee:	8823      	ldrh	r3, [r4, #0]
 80099f0:	4283      	cmp	r3, r0
 80099f2:	d106      	bne.n	8009a02 <friend_cred_refresh+0x1e>
			memcpy(&cred->cred[0], &cred->cred[1],
 80099f4:	2221      	movs	r2, #33	; 0x21
 80099f6:	f104 0129 	add.w	r1, r4, #41	; 0x29
 80099fa:	f104 0008 	add.w	r0, r4, #8
 80099fe:	f7f6 ff3f 	bl	8000880 <memcpy>
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 8009a02:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8009a06:	b15b      	cbz	r3, 8009a20 <friend_cred_refresh+0x3c>
 8009a08:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	d107      	bne.n	8009a20 <friend_cred_refresh+0x3c>
			memcpy(&cred->cred[0], &cred->cred[1],
 8009a10:	4905      	ldr	r1, [pc, #20]	; (8009a28 <friend_cred_refresh+0x44>)
 8009a12:	2221      	movs	r2, #33	; 0x21
 8009a14:	f1a1 0021 	sub.w	r0, r1, #33	; 0x21
}
 8009a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(&cred->cred[0], &cred->cred[1],
 8009a1c:	f7f6 bf30 	b.w	8000880 <memcpy>
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
 8009a22:	bf00      	nop
 8009a24:	20000c14 	.word	0x20000c14
 8009a28:	20000c87 	.word	0x20000c87

08009a2c <friend_cred_update>:
{
 8009a2c:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 8009a2e:	4c10      	ldr	r4, [pc, #64]	; (8009a70 <friend_cred_update+0x44>)
 8009a30:	8863      	ldrh	r3, [r4, #2]
{
 8009a32:	4605      	mov	r5, r0
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 8009a34:	b153      	cbz	r3, 8009a4c <friend_cred_update+0x20>
 8009a36:	8822      	ldrh	r2, [r4, #0]
 8009a38:	8b83      	ldrh	r3, [r0, #28]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d106      	bne.n	8009a4c <friend_cred_update+0x20>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 8009a3e:	f100 0289 	add.w	r2, r0, #137	; 0x89
 8009a42:	2101      	movs	r1, #1
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7ff ff99 	bl	800997c <friend_cred_set>
		if (err) {
 8009a4a:	b978      	cbnz	r0, 8009a6c <friend_cred_update+0x40>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 8009a4c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8009a50:	b15b      	cbz	r3, 8009a6a <friend_cred_update+0x3e>
 8009a52:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009a56:	8bab      	ldrh	r3, [r5, #28]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d106      	bne.n	8009a6a <friend_cred_update+0x3e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 8009a5c:	f105 0289 	add.w	r2, r5, #137	; 0x89
 8009a60:	2101      	movs	r1, #1
 8009a62:	4804      	ldr	r0, [pc, #16]	; (8009a74 <friend_cred_update+0x48>)
 8009a64:	f7ff ff8a 	bl	800997c <friend_cred_set>
		if (err) {
 8009a68:	b900      	cbnz	r0, 8009a6c <friend_cred_update+0x40>
	return 0;
 8009a6a:	2000      	movs	r0, #0
}
 8009a6c:	bd38      	pop	{r3, r4, r5, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000c14 	.word	0x20000c14
 8009a74:	20000c5e 	.word	0x20000c5e

08009a78 <friend_cred_clear>:
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
 8009a78:	2100      	movs	r1, #0
	cred->net_idx = BT_MESH_KEY_UNUSED;
 8009a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a7e:	8003      	strh	r3, [r0, #0]
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
 8009a80:	8041      	strh	r1, [r0, #2]
	cred->lpn_counter = 0;
 8009a82:	8081      	strh	r1, [r0, #4]
	cred->frnd_counter = 0;
 8009a84:	80c1      	strh	r1, [r0, #6]
	memset(cred->cred, 0, sizeof(cred->cred));
 8009a86:	2242      	movs	r2, #66	; 0x42
 8009a88:	3008      	adds	r0, #8
 8009a8a:	f7f6 bf25 	b.w	80008d8 <memset>
	...

08009a90 <friend_cred_create>:
{
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4605      	mov	r5, r0
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
 8009a94:	481b      	ldr	r0, [pc, #108]	; (8009b04 <friend_cred_create+0x74>)
 8009a96:	8844      	ldrh	r4, [r0, #2]
 8009a98:	b194      	cbz	r4, 8009ac0 <friend_cred_create+0x30>
 8009a9a:	42a1      	cmp	r1, r4
 8009a9c:	d103      	bne.n	8009aa6 <friend_cred_create+0x16>
		    (friend_cred[i].addr == addr &&
 8009a9e:	8806      	ldrh	r6, [r0, #0]
 8009aa0:	8bac      	ldrh	r4, [r5, #28]
 8009aa2:	42a6      	cmp	r6, r4
 8009aa4:	d00b      	beq.n	8009abe <friend_cred_create+0x2e>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
 8009aa6:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
 8009aaa:	b1e4      	cbz	r4, 8009ae6 <friend_cred_create+0x56>
 8009aac:	42a1      	cmp	r1, r4
 8009aae:	d104      	bne.n	8009aba <friend_cred_create+0x2a>
		    (friend_cred[i].addr == addr &&
 8009ab0:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
 8009ab4:	8bac      	ldrh	r4, [r5, #28]
 8009ab6:	42a6      	cmp	r6, r4
 8009ab8:	d015      	beq.n	8009ae6 <friend_cred_create+0x56>
		return NULL;
 8009aba:	2400      	movs	r4, #0
 8009abc:	e01f      	b.n	8009afe <friend_cred_create+0x6e>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009abe:	2400      	movs	r4, #0
			cred = &friend_cred[i];
 8009ac0:	264a      	movs	r6, #74	; 0x4a
 8009ac2:	4366      	muls	r6, r4
 8009ac4:	1984      	adds	r4, r0, r6
	cred->net_idx = sub->net_idx;
 8009ac6:	8baf      	ldrh	r7, [r5, #28]
 8009ac8:	5387      	strh	r7, [r0, r6]
	cred->addr = addr;
 8009aca:	8061      	strh	r1, [r4, #2]
	cred->lpn_counter = lpn_counter;
 8009acc:	80a2      	strh	r2, [r4, #4]
	cred->frnd_counter = frnd_counter;
 8009ace:	80e3      	strh	r3, [r4, #6]
	err = friend_cred_set(cred, 0, sub->keys[0].net);
 8009ad0:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7ff ff50 	bl	800997c <friend_cred_set>
	if (err) {
 8009adc:	b128      	cbz	r0, 8009aea <friend_cred_create+0x5a>
			friend_cred_clear(cred);
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7ff ffca 	bl	8009a78 <friend_cred_clear>
 8009ae4:	e7e9      	b.n	8009aba <friend_cred_create+0x2a>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009ae6:	2401      	movs	r4, #1
 8009ae8:	e7ea      	b.n	8009ac0 <friend_cred_create+0x30>
	if (sub->kr_flag) {
 8009aea:	7fab      	ldrb	r3, [r5, #30]
 8009aec:	b13b      	cbz	r3, 8009afe <friend_cred_create+0x6e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 8009aee:	f105 0289 	add.w	r2, r5, #137	; 0x89
 8009af2:	2101      	movs	r1, #1
 8009af4:	4620      	mov	r0, r4
 8009af6:	f7ff ff41 	bl	800997c <friend_cred_set>
		if (err) {
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1ef      	bne.n	8009ade <friend_cred_create+0x4e>
}
 8009afe:	4620      	mov	r0, r4
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000c14 	.word	0x20000c14

08009b08 <friend_cred_del>:
		if (cred->addr == addr && cred->net_idx == net_idx) {
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <friend_cred_del+0x38>)
 8009b0a:	885a      	ldrh	r2, [r3, #2]
 8009b0c:	428a      	cmp	r2, r1
{
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	461a      	mov	r2, r3
		if (cred->addr == addr && cred->net_idx == net_idx) {
 8009b12:	d102      	bne.n	8009b1a <friend_cred_del+0x12>
 8009b14:	881c      	ldrh	r4, [r3, #0]
 8009b16:	4284      	cmp	r4, r0
 8009b18:	d00c      	beq.n	8009b34 <friend_cred_del+0x2c>
 8009b1a:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
 8009b1e:	428b      	cmp	r3, r1
 8009b20:	d10a      	bne.n	8009b38 <friend_cred_del+0x30>
 8009b22:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
 8009b26:	4283      	cmp	r3, r0
 8009b28:	d106      	bne.n	8009b38 <friend_cred_del+0x30>
		struct friend_cred *cred = &friend_cred[i];
 8009b2a:	4806      	ldr	r0, [pc, #24]	; (8009b44 <friend_cred_del+0x3c>)
			friend_cred_clear(cred);
 8009b2c:	f7ff ffa4 	bl	8009a78 <friend_cred_clear>
			return 0;
 8009b30:	2000      	movs	r0, #0
 8009b32:	bd10      	pop	{r4, pc}
		struct friend_cred *cred = &friend_cred[i];
 8009b34:	4618      	mov	r0, r3
 8009b36:	e7f9      	b.n	8009b2c <friend_cred_del+0x24>
	return -ENOENT;
 8009b38:	f06f 0001 	mvn.w	r0, #1
}
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000c14 	.word	0x20000c14
 8009b44:	20000c5e 	.word	0x20000c5e

08009b48 <friend_cred_get>:
{
 8009b48:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (cred->net_idx != sub->net_idx) {
 8009b4a:	4c1c      	ldr	r4, [pc, #112]	; (8009bbc <friend_cred_get+0x74>)
 8009b4c:	8b86      	ldrh	r6, [r0, #28]
 8009b4e:	8827      	ldrh	r7, [r4, #0]
{
 8009b50:	9d05      	ldr	r5, [sp, #20]
		if (cred->net_idx != sub->net_idx) {
 8009b52:	42b7      	cmp	r7, r6
 8009b54:	d103      	bne.n	8009b5e <friend_cred_get+0x16>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
 8009b56:	b161      	cbz	r1, 8009b72 <friend_cred_get+0x2a>
 8009b58:	8867      	ldrh	r7, [r4, #2]
 8009b5a:	428f      	cmp	r7, r1
 8009b5c:	d029      	beq.n	8009bb2 <friend_cred_get+0x6a>
		if (cred->net_idx != sub->net_idx) {
 8009b5e:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
 8009b62:	42b7      	cmp	r7, r6
 8009b64:	d127      	bne.n	8009bb6 <friend_cred_get+0x6e>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
 8009b66:	b119      	cbz	r1, 8009b70 <friend_cred_get+0x28>
 8009b68:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
 8009b6c:	428e      	cmp	r6, r1
 8009b6e:	d122      	bne.n	8009bb6 <friend_cred_get+0x6e>
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009b70:	2101      	movs	r1, #1
		if (nid) {
 8009b72:	b142      	cbz	r2, 8009b86 <friend_cred_get+0x3e>
			*nid = cred->cred[sub->kr_flag].nid;
 8009b74:	7f86      	ldrb	r6, [r0, #30]
 8009b76:	eb06 1746 	add.w	r7, r6, r6, lsl #5
 8009b7a:	264a      	movs	r6, #74	; 0x4a
 8009b7c:	fb06 7601 	mla	r6, r6, r1, r7
 8009b80:	4426      	add	r6, r4
 8009b82:	7a36      	ldrb	r6, [r6, #8]
 8009b84:	7016      	strb	r6, [r2, #0]
		if (enc) {
 8009b86:	b143      	cbz	r3, 8009b9a <friend_cred_get+0x52>
			*enc = cred->cred[sub->kr_flag].enc;
 8009b88:	7f82      	ldrb	r2, [r0, #30]
 8009b8a:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8009b8e:	3209      	adds	r2, #9
 8009b90:	264a      	movs	r6, #74	; 0x4a
 8009b92:	fb06 2201 	mla	r2, r6, r1, r2
 8009b96:	4422      	add	r2, r4
 8009b98:	601a      	str	r2, [r3, #0]
		if (priv) {
 8009b9a:	b145      	cbz	r5, 8009bae <friend_cred_get+0x66>
			*priv = cred->cred[sub->kr_flag].privacy;
 8009b9c:	7f83      	ldrb	r3, [r0, #30]
 8009b9e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8009ba2:	3319      	adds	r3, #25
 8009ba4:	224a      	movs	r2, #74	; 0x4a
 8009ba6:	fb02 3101 	mla	r1, r2, r1, r3
 8009baa:	4421      	add	r1, r4
 8009bac:	6029      	str	r1, [r5, #0]
		return 0;
 8009bae:	2000      	movs	r0, #0
 8009bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	e7dd      	b.n	8009b72 <friend_cred_get+0x2a>
	return -ENOENT;
 8009bb6:	f06f 0001 	mvn.w	r0, #1
 8009bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bbc:	20000c14 	.word	0x20000c14

08009bc0 <bt_mesh_net_flags>:
	if (sub && sub->kr_flag) {
 8009bc0:	b100      	cbz	r0, 8009bc4 <bt_mesh_net_flags+0x4>
 8009bc2:	7f80      	ldrb	r0, [r0, #30]
	if (bt_mesh.iv_update) {
 8009bc4:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <bt_mesh_net_flags+0x14>)
 8009bc6:	79db      	ldrb	r3, [r3, #7]
 8009bc8:	07db      	lsls	r3, r3, #31
		flags |= BT_MESH_NET_FLAG_IVU;
 8009bca:	bf48      	it	mi
 8009bcc:	f040 0002 	orrmi.w	r0, r0, #2
}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20005b88 	.word	0x20005b88

08009bd8 <bt_mesh_net_beacon_update>:
{
 8009bd8:	b507      	push	{r0, r1, r2, lr}
 8009bda:	4602      	mov	r2, r0
	u8_t flags = bt_mesh_net_flags(sub);
 8009bdc:	f7ff fff0 	bl	8009bc0 <bt_mesh_net_flags>
	if (sub->kr_flag) {
 8009be0:	7f93      	ldrb	r3, [r2, #30]
	u8_t flags = bt_mesh_net_flags(sub);
 8009be2:	4601      	mov	r1, r0
	if (sub->kr_flag) {
 8009be4:	b16b      	cbz	r3, 8009c02 <bt_mesh_net_beacon_update+0x2a>
		keys = &sub->keys[1];
 8009be6:	f102 0089 	add.w	r0, r2, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
 8009bea:	3228      	adds	r2, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
 8009bec:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <bt_mesh_net_beacon_update+0x30>)
 8009bee:	9200      	str	r2, [sp, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f100 0221 	add.w	r2, r0, #33	; 0x21
 8009bf6:	3049      	adds	r0, #73	; 0x49
 8009bf8:	f002 fae1 	bl	800c1be <bt_mesh_beacon_auth>
}
 8009bfc:	b003      	add	sp, #12
 8009bfe:	f85d fb04 	ldr.w	pc, [sp], #4
		keys = &sub->keys[0];
 8009c02:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8009c06:	e7f0      	b.n	8009bea <bt_mesh_net_beacon_update+0x12>
 8009c08:	20005b88 	.word	0x20005b88

08009c0c <bt_mesh_net_create>:
{
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (bt_mesh.valid) {
 8009c10:	4c24      	ldr	r4, [pc, #144]	; (8009ca4 <bt_mesh_net_create+0x98>)
 8009c12:	79e5      	ldrb	r5, [r4, #7]
 8009c14:	f015 0510 	ands.w	r5, r5, #16
{
 8009c18:	4680      	mov	r8, r0
 8009c1a:	460e      	mov	r6, r1
 8009c1c:	4691      	mov	r9, r2
 8009c1e:	461f      	mov	r7, r3
	if (bt_mesh.valid) {
 8009c20:	d13c      	bne.n	8009c9c <bt_mesh_net_create+0x90>
	memset(msg_cache, 0, sizeof(msg_cache));
 8009c22:	4629      	mov	r1, r5
 8009c24:	2250      	movs	r2, #80	; 0x50
 8009c26:	4820      	ldr	r0, [pc, #128]	; (8009ca8 <bt_mesh_net_create+0x9c>)
 8009c28:	f7f6 fe56 	bl	80008d8 <memset>
	msg_cache_next = 0;
 8009c2c:	4b1f      	ldr	r3, [pc, #124]	; (8009cac <bt_mesh_net_create+0xa0>)
 8009c2e:	801d      	strh	r5, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
 8009c30:	f006 0301 	and.w	r3, r6, #1
 8009c34:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
 8009c38:	4649      	mov	r1, r9
	if (sub->kr_flag) {
 8009c3a:	b343      	cbz	r3, 8009c8e <bt_mesh_net_create+0x82>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
 8009c3c:	f204 203d 	addw	r0, r4, #573	; 0x23d
 8009c40:	f7ff fe66 	bl	8009910 <bt_mesh_net_keys_create>
		if (err) {
 8009c44:	b118      	cbz	r0, 8009c4e <bt_mesh_net_create+0x42>
			return -EIO;
 8009c46:	f06f 0004 	mvn.w	r0, #4
 8009c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
	bt_mesh.valid = 1;
 8009c54:	79e3      	ldrb	r3, [r4, #7]
	sub->net_idx = idx;
 8009c56:	f8a4 81d0 	strh.w	r8, [r4, #464]	; 0x1d0
	bt_mesh.valid = 1;
 8009c5a:	f043 0310 	orr.w	r3, r3, #16
 8009c5e:	71e3      	strb	r3, [r4, #7]
		sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f884 31d4 	strb.w	r3, [r4, #468]	; 0x1d4
 8009c66:	f008 f911 	bl	8011e8c <_impl_k_uptime_get_32>
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
 8009c6a:	79e3      	ldrb	r3, [r4, #7]
		sub->node_id_start = k_uptime_get_32();
 8009c6c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
 8009c70:	0876      	lsrs	r6, r6, #1
 8009c72:	f366 0300 	bfi	r3, r6, #0, #1
 8009c76:	71e3      	strb	r3, [r4, #7]
	bt_mesh.iv_index = iv_index;
 8009c78:	6027      	str	r7, [r4, #0]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 8009c7a:	f008 f91b 	bl	8011eb4 <_impl_k_uptime_get>
	bt_mesh.last_update = k_uptime_get();
 8009c7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
	bt_mesh_net_beacon_update(sub);
 8009c82:	480b      	ldr	r0, [pc, #44]	; (8009cb0 <bt_mesh_net_create+0xa4>)
 8009c84:	f7ff ffa8 	bl	8009bd8 <bt_mesh_net_beacon_update>
	return 0;
 8009c88:	2000      	movs	r0, #0
 8009c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
 8009c8e:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009c92:	f7ff fe3d 	bl	8009910 <bt_mesh_net_keys_create>
		if (err) {
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d0dc      	beq.n	8009c54 <bt_mesh_net_create+0x48>
 8009c9a:	e7d4      	b.n	8009c46 <bt_mesh_net_create+0x3a>
		return -EALREADY;
 8009c9c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8009ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ca4:	20005b88 	.word	0x20005b88
 8009ca8:	20000ca8 	.word	0x20000ca8
 8009cac:	20000cf8 	.word	0x20000cf8
 8009cb0:	20005d3c 	.word	0x20005d3c

08009cb4 <bt_mesh_net_revoke_keys>:
{
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4605      	mov	r5, r0
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009cb8:	4c15      	ldr	r4, [pc, #84]	; (8009d10 <bt_mesh_net_revoke_keys+0x5c>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
 8009cba:	2259      	movs	r2, #89	; 0x59
 8009cbc:	f100 0189 	add.w	r1, r0, #137	; 0x89
 8009cc0:	3030      	adds	r0, #48	; 0x30
 8009cc2:	f7f6 fddd 	bl	8000880 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009cc6:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 8009cca:	8bab      	ldrh	r3, [r5, #28]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d10c      	bne.n	8009cea <bt_mesh_net_revoke_keys+0x36>
 8009cd0:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 8009cd4:	b14b      	cbz	r3, 8009cea <bt_mesh_net_revoke_keys+0x36>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
 8009cd6:	2211      	movs	r2, #17
 8009cd8:	f504 71bd 	add.w	r1, r4, #378	; 0x17a
 8009cdc:	f204 1069 	addw	r0, r4, #361	; 0x169
 8009ce0:	f7f6 fdce 	bl	8000880 <memcpy>
		key->updated = false;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009cea:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 8009cee:	8bab      	ldrh	r3, [r5, #28]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d10b      	bne.n	8009d0c <bt_mesh_net_revoke_keys+0x58>
 8009cf4:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 8009cf8:	b143      	cbz	r3, 8009d0c <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
 8009cfa:	4906      	ldr	r1, [pc, #24]	; (8009d14 <bt_mesh_net_revoke_keys+0x60>)
 8009cfc:	2211      	movs	r2, #17
 8009cfe:	f1a1 0011 	sub.w	r0, r1, #17
 8009d02:	f7f6 fdbd 	bl	8000880 <memcpy>
		key->updated = false;
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	20005b88 	.word	0x20005b88
 8009d14:	20005d2a 	.word	0x20005d2a

08009d18 <bt_mesh_kr_update>:
{
 8009d18:	b510      	push	{r4, lr}
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
 8009d1a:	7f83      	ldrb	r3, [r0, #30]
 8009d1c:	428b      	cmp	r3, r1
{
 8009d1e:	4604      	mov	r4, r0
 8009d20:	7fc0      	ldrb	r0, [r0, #31]
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
 8009d22:	d002      	beq.n	8009d2a <bt_mesh_kr_update+0x12>
 8009d24:	b908      	cbnz	r0, 8009d2a <bt_mesh_kr_update+0x12>
		return false;
 8009d26:	2000      	movs	r0, #0
 8009d28:	bd10      	pop	{r4, pc}
	sub->kr_flag = new_kr;
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	bf14      	ite	ne
 8009d2e:	2301      	movne	r3, #1
 8009d30:	2300      	moveq	r3, #0
 8009d32:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
 8009d34:	d004      	beq.n	8009d40 <bt_mesh_kr_update+0x28>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
 8009d36:	2801      	cmp	r0, #1
 8009d38:	d1f5      	bne.n	8009d26 <bt_mesh_kr_update+0xe>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	77e3      	strb	r3, [r4, #31]
			return true;
 8009d3e:	bd10      	pop	{r4, pc}
		switch (sub->kr_phase) {
 8009d40:	2801      	cmp	r0, #1
 8009d42:	d00b      	beq.n	8009d5c <bt_mesh_kr_update+0x44>
 8009d44:	2802      	cmp	r0, #2
 8009d46:	d1ee      	bne.n	8009d26 <bt_mesh_kr_update+0xe>
			bt_mesh_net_revoke_keys(sub);
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7ff ffb3 	bl	8009cb4 <bt_mesh_net_revoke_keys>
				friend_cred_refresh(sub->net_idx);
 8009d4e:	8ba0      	ldrh	r0, [r4, #28]
 8009d50:	f7ff fe48 	bl	80099e4 <friend_cred_refresh>
			sub->kr_phase = BT_MESH_KR_NORMAL;
 8009d54:	2300      	movs	r3, #0
 8009d56:	77e3      	strb	r3, [r4, #31]
			return true;
 8009d58:	2001      	movs	r0, #1
 8009d5a:	bd10      	pop	{r4, pc}
			if (!new_key) {
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	d1f3      	bne.n	8009d48 <bt_mesh_kr_update+0x30>
 8009d60:	e7e1      	b.n	8009d26 <bt_mesh_kr_update+0xe>
	...

08009d64 <bt_mesh_rpl_reset>:
{
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4c0a      	ldr	r4, [pc, #40]	; (8009d90 <bt_mesh_rpl_reset+0x2c>)
				rpl->old_iv = true;
 8009d68:	2601      	movs	r6, #1
 8009d6a:	f104 0550 	add.w	r5, r4, #80	; 0x50
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 8009d6e:	42ac      	cmp	r4, r5
 8009d70:	d100      	bne.n	8009d74 <bt_mesh_rpl_reset+0x10>
}
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
		if (rpl->src) {
 8009d74:	8823      	ldrh	r3, [r4, #0]
 8009d76:	b133      	cbz	r3, 8009d86 <bt_mesh_rpl_reset+0x22>
			if (rpl->old_iv) {
 8009d78:	78a3      	ldrb	r3, [r4, #2]
 8009d7a:	b133      	cbz	r3, 8009d8a <bt_mesh_rpl_reset+0x26>
				memset(rpl, 0, sizeof(*rpl));
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	2100      	movs	r1, #0
 8009d80:	4620      	mov	r0, r4
 8009d82:	f7f6 fda9 	bl	80008d8 <memset>
 8009d86:	3408      	adds	r4, #8
 8009d88:	e7f1      	b.n	8009d6e <bt_mesh_rpl_reset+0xa>
				rpl->old_iv = true;
 8009d8a:	70a6      	strb	r6, [r4, #2]
 8009d8c:	e7fb      	b.n	8009d86 <bt_mesh_rpl_reset+0x22>
 8009d8e:	bf00      	nop
 8009d90:	20005f04 	.word	0x20005f04

08009d94 <bt_mesh_net_sec_update>:
{
 8009d94:	b510      	push	{r4, lr}
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
 8009d96:	4604      	mov	r4, r0
 8009d98:	b158      	cbz	r0, 8009db2 <bt_mesh_net_sec_update+0x1e>
 8009d9a:	8b80      	ldrh	r0, [r0, #28]
 8009d9c:	f005 fa46 	bl	800f22c <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 8009da0:	f004 fc32 	bl	800e608 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 8009da4:	2801      	cmp	r0, #1
 8009da6:	d107      	bne.n	8009db8 <bt_mesh_net_sec_update+0x24>
		bt_mesh_proxy_beacon_send(sub);
 8009da8:	4620      	mov	r0, r4
}
 8009daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
 8009dae:	f007 b87d 	b.w	8010eac <bt_mesh_proxy_beacon_send>
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
 8009db2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009db6:	e7f1      	b.n	8009d9c <bt_mesh_net_sec_update+0x8>
 8009db8:	bd10      	pop	{r4, pc}
 8009dba:	0000      	movs	r0, r0
 8009dbc:	0000      	movs	r0, r0
	...

08009dc0 <bt_mesh_net_iv_update>:
{
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_mesh.iv_update) {
 8009dc2:	4c39      	ldr	r4, [pc, #228]	; (8009ea8 <bt_mesh_net_iv_update+0xe8>)
 8009dc4:	79e7      	ldrb	r7, [r4, #7]
		if (iv_index != bt_mesh.iv_index) {
 8009dc6:	6823      	ldr	r3, [r4, #0]
	if (bt_mesh.iv_update) {
 8009dc8:	f017 0701 	ands.w	r7, r7, #1
{
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460d      	mov	r5, r1
	if (bt_mesh.iv_update) {
 8009dd0:	d01c      	beq.n	8009e0c <bt_mesh_net_iv_update+0x4c>
		if (iv_index != bt_mesh.iv_index) {
 8009dd2:	4283      	cmp	r3, r0
 8009dd4:	d002      	beq.n	8009ddc <bt_mesh_net_iv_update+0x1c>
			return false;
 8009dd6:	2500      	movs	r5, #0
}
 8009dd8:	4628      	mov	r0, r5
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_update) {
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d1fa      	bne.n	8009dd6 <bt_mesh_net_iv_update+0x16>
 8009de0:	f008 f868 	bl	8011eb4 <_impl_k_uptime_get>
		s64_t delta = k_uptime_get() - bt_mesh.last_update;
 8009de4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8009de8:	1a80      	subs	r0, r0, r2
 8009dea:	eb61 0103 	sbc.w	r1, r1, r3
		if (delta < K_HOURS(96)) {
 8009dee:	a32c      	add	r3, pc, #176	; (adr r3, 8009ea0 <bt_mesh_net_iv_update+0xe0>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4282      	cmp	r2, r0
 8009df6:	418b      	sbcs	r3, r1
 8009df8:	daed      	bge.n	8009dd6 <bt_mesh_net_iv_update+0x16>
	if (!iv_update && bt_mesh_tx_in_progress()) {
 8009dfa:	b9dd      	cbnz	r5, 8009e34 <bt_mesh_net_iv_update+0x74>
 8009dfc:	f001 f880 	bl	800af00 <bt_mesh_tx_in_progress>
 8009e00:	b1c0      	cbz	r0, 8009e34 <bt_mesh_net_iv_update+0x74>
		bt_mesh.pending_update = 1;
 8009e02:	79e3      	ldrb	r3, [r4, #7]
 8009e04:	f043 0308 	orr.w	r3, r3, #8
 8009e08:	71e3      	strb	r3, [r4, #7]
		return false;
 8009e0a:	e7e5      	b.n	8009dd8 <bt_mesh_net_iv_update+0x18>
		if (iv_index < bt_mesh.iv_index ||
 8009e0c:	4298      	cmp	r0, r3
 8009e0e:	d9e2      	bls.n	8009dd6 <bt_mesh_net_iv_update+0x16>
		    iv_index > bt_mesh.iv_index + 42) {
 8009e10:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
 8009e14:	4290      	cmp	r0, r2
 8009e16:	d8de      	bhi.n	8009dd6 <bt_mesh_net_iv_update+0x16>
		if (iv_index > bt_mesh.iv_index + 1) {
 8009e18:	3301      	adds	r3, #1
 8009e1a:	4298      	cmp	r0, r3
 8009e1c:	d931      	bls.n	8009e82 <bt_mesh_net_iv_update+0xc2>
			memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
 8009e1e:	2250      	movs	r2, #80	; 0x50
 8009e20:	4639      	mov	r1, r7
 8009e22:	f504 705f 	add.w	r0, r4, #892	; 0x37c
 8009e26:	f7f6 fd57 	bl	80008d8 <memset>
			bt_mesh.seq = 0;
 8009e2a:	6863      	ldr	r3, [r4, #4]
			bt_mesh.iv_index = iv_index;
 8009e2c:	6026      	str	r6, [r4, #0]
			bt_mesh.seq = 0;
 8009e2e:	f367 0317 	bfi	r3, r7, #0, #24
 8009e32:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = iv_update;
 8009e34:	79e3      	ldrb	r3, [r4, #7]
 8009e36:	f365 0300 	bfi	r3, r5, #0, #1
 8009e3a:	71e3      	strb	r3, [r4, #7]
	if (bt_mesh.iv_update) {
 8009e3c:	f013 0301 	ands.w	r3, r3, #1
 8009e40:	d023      	beq.n	8009e8a <bt_mesh_net_iv_update+0xca>
		bt_mesh.iv_index = iv_index;
 8009e42:	6026      	str	r6, [r4, #0]
		bt_mesh_rpl_reset();
 8009e44:	f7ff ff8e 	bl	8009d64 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8009e48:	4a18      	ldr	r2, [pc, #96]	; (8009eac <bt_mesh_net_iv_update+0xec>)
 8009e4a:	4919      	ldr	r1, [pc, #100]	; (8009eb0 <bt_mesh_net_iv_update+0xf0>)
 8009e4c:	4819      	ldr	r0, [pc, #100]	; (8009eb4 <bt_mesh_net_iv_update+0xf4>)
 8009e4e:	f008 fb4f 	bl	80124f0 <k_delayed_work_submit_to_queue>
 8009e52:	f008 f82f 	bl	8011eb4 <_impl_k_uptime_get>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009e56:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8009e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e5e:	429a      	cmp	r2, r3
	bt_mesh.last_update = k_uptime_get();
 8009e60:	e9c4 0102 	strd	r0, r1, [r4, #8]
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009e64:	d002      	beq.n	8009e6c <bt_mesh_net_iv_update+0xac>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
 8009e66:	4814      	ldr	r0, [pc, #80]	; (8009eb8 <bt_mesh_net_iv_update+0xf8>)
 8009e68:	f7ff feb6 	bl	8009bd8 <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009e6c:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8009e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d002      	beq.n	8009e7e <bt_mesh_net_iv_update+0xbe>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
 8009e78:	4810      	ldr	r0, [pc, #64]	; (8009ebc <bt_mesh_net_iv_update+0xfc>)
 8009e7a:	f7ff fead 	bl	8009bd8 <bt_mesh_net_beacon_update>
	return true;
 8009e7e:	2501      	movs	r5, #1
 8009e80:	e7aa      	b.n	8009dd8 <bt_mesh_net_iv_update+0x18>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
 8009e82:	d1a8      	bne.n	8009dd6 <bt_mesh_net_iv_update+0x16>
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d1ab      	bne.n	8009de0 <bt_mesh_net_iv_update+0x20>
 8009e88:	e7a5      	b.n	8009dd6 <bt_mesh_net_iv_update+0x16>
		bt_mesh.seq = 0;
 8009e8a:	6862      	ldr	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8009e8c:	4808      	ldr	r0, [pc, #32]	; (8009eb0 <bt_mesh_net_iv_update+0xf0>)
		bt_mesh.seq = 0;
 8009e8e:	f363 0217 	bfi	r2, r3, #0, #24
 8009e92:	6062      	str	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8009e94:	f008 fae0 	bl	8012458 <k_delayed_work_cancel>
 8009e98:	e7db      	b.n	8009e52 <bt_mesh_net_iv_update+0x92>
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	14996fff 	.word	0x14996fff
 8009ea4:	00000000 	.word	0x00000000
 8009ea8:	20005b88 	.word	0x20005b88
 8009eac:	19bfcc00 	.word	0x19bfcc00
 8009eb0:	20005cb4 	.word	0x20005cb4
 8009eb4:	20001498 	.word	0x20001498
 8009eb8:	20005d3c 	.word	0x20005d3c
 8009ebc:	20005e20 	.word	0x20005e20

08009ec0 <ivu_complete>:
		bt_mesh_net_relay(buf, &rx);
	}
}

static void ivu_complete(struct k_work *work)
{
 8009ec0:	b508      	push	{r3, lr}
	BT_DBG("");

	bt_mesh_beacon_ivu_initiator(true);
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	f7ff fc12 	bl	80096ec <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
 8009ec8:	4b03      	ldr	r3, [pc, #12]	; (8009ed8 <ivu_complete+0x18>)
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6818      	ldr	r0, [r3, #0]
}
 8009ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
 8009ed2:	f7ff bf75 	b.w	8009dc0 <bt_mesh_net_iv_update>
 8009ed6:	bf00      	nop
 8009ed8:	20005b88 	.word	0x20005b88

08009edc <bt_mesh_net_resend>:
{
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ee0:	4c34      	ldr	r4, [pc, #208]	; (8009fb4 <bt_mesh_net_resend+0xd8>)
 8009ee2:	2759      	movs	r7, #89	; 0x59
 8009ee4:	4357      	muls	r7, r2
{
 8009ee6:	4699      	mov	r9, r3
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ee8:	79e3      	ldrb	r3, [r4, #7]
{
 8009eea:	460e      	mov	r6, r1
	priv = sub->keys[new_key].privacy;
 8009eec:	f107 0869 	add.w	r8, r7, #105	; 0x69
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ef0:	6821      	ldr	r1, [r4, #0]
	priv = sub->keys[new_key].privacy;
 8009ef2:	4480      	add	r8, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ef4:	f003 0301 	and.w	r3, r3, #1
{
 8009ef8:	4682      	mov	sl, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009efa:	4642      	mov	r2, r8
 8009efc:	1ac9      	subs	r1, r1, r3
 8009efe:	68b0      	ldr	r0, [r6, #8]
 8009f00:	f001 ff94 	bl	800be2c <bt_mesh_net_obfuscate>
	if (err) {
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d151      	bne.n	8009fae <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009f0a:	79e2      	ldrb	r2, [r4, #7]
 8009f0c:	6821      	ldr	r1, [r4, #0]
	enc = sub->keys[new_key].enc;
 8009f0e:	3741      	adds	r7, #65	; 0x41
 8009f10:	4457      	add	r7, sl
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009f12:	f002 0201 	and.w	r2, r2, #1
 8009f16:	f106 0a08 	add.w	sl, r6, #8
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	1a8a      	subs	r2, r1, r2
 8009f1e:	4638      	mov	r0, r7
 8009f20:	4651      	mov	r1, sl
 8009f22:	f001 fff6 	bl	800bf12 <bt_mesh_net_decrypt>
	if (err) {
 8009f26:	4605      	mov	r5, r0
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d140      	bne.n	8009fae <bt_mesh_net_resend+0xd2>
	buf->data[2] = (bt_mesh.seq >> 16);
 8009f2c:	68b3      	ldr	r3, [r6, #8]
 8009f2e:	79a2      	ldrb	r2, [r4, #6]
 8009f30:	709a      	strb	r2, [r3, #2]
	buf->data[3] = (bt_mesh.seq >> 8);
 8009f32:	6863      	ldr	r3, [r4, #4]
 8009f34:	68b2      	ldr	r2, [r6, #8]
 8009f36:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009f3a:	70d3      	strb	r3, [r2, #3]
	buf->data[4] = bt_mesh.seq++;
 8009f3c:	6863      	ldr	r3, [r4, #4]
 8009f3e:	68b1      	ldr	r1, [r6, #8]
 8009f40:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8009f44:	1c50      	adds	r0, r2, #1
 8009f46:	f360 0317 	bfi	r3, r0, #0, #24
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	710a      	strb	r2, [r1, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009f4e:	79e2      	ldrb	r2, [r4, #7]
 8009f50:	6821      	ldr	r1, [r4, #0]
 8009f52:	f002 0201 	and.w	r2, r2, #1
 8009f56:	462b      	mov	r3, r5
 8009f58:	1a8a      	subs	r2, r1, r2
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	4651      	mov	r1, sl
 8009f5e:	f001 ff8d 	bl	800be7c <bt_mesh_net_encrypt>
	if (err) {
 8009f62:	4605      	mov	r5, r0
 8009f64:	bb18      	cbnz	r0, 8009fae <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009f66:	79e3      	ldrb	r3, [r4, #7]
 8009f68:	6821      	ldr	r1, [r4, #0]
 8009f6a:	68b0      	ldr	r0, [r6, #8]
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	4642      	mov	r2, r8
 8009f72:	1ac9      	subs	r1, r1, r3
 8009f74:	f001 ff5a 	bl	800be2c <bt_mesh_net_obfuscate>
	if (err) {
 8009f78:	4605      	mov	r5, r0
 8009f7a:	b9c0      	cbnz	r0, 8009fae <bt_mesh_net_resend+0xd2>
	bt_mesh_adv_send(buf, cb, cb_data);
 8009f7c:	9a08      	ldr	r2, [sp, #32]
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff f9cd 	bl	8009320 <bt_mesh_adv_send>
	if (!bt_mesh.iv_update && bt_mesh.seq > IV_UPDATE_SEQ_LIMIT) {
 8009f86:	79e3      	ldrb	r3, [r4, #7]
 8009f88:	07db      	lsls	r3, r3, #31
 8009f8a:	d410      	bmi.n	8009fae <bt_mesh_net_resend+0xd2>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	4a0a      	ldr	r2, [pc, #40]	; (8009fb8 <bt_mesh_net_resend+0xdc>)
 8009f90:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009f94:	4293      	cmp	r3, r2
 8009f96:	dd0a      	ble.n	8009fae <bt_mesh_net_resend+0xd2>
		bt_mesh_beacon_ivu_initiator(true);
 8009f98:	2001      	movs	r0, #1
 8009f9a:	f7ff fba7 	bl	80096ec <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	4408      	add	r0, r1
 8009fa4:	f7ff ff0c 	bl	8009dc0 <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7ff fef3 	bl	8009d94 <bt_mesh_net_sec_update>
}
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb4:	20005b88 	.word	0x20005b88
 8009fb8:	007a1200 	.word	0x007a1200

08009fbc <bt_mesh_net_encode>:
{
 8009fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 8009fc0:	6843      	ldr	r3, [r0, #4]
 8009fc2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fca:	4598      	cmp	r8, r3
{
 8009fcc:	4605      	mov	r5, r0
 8009fce:	460e      	mov	r6, r1
 8009fd0:	4617      	mov	r7, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009fd2:	d008      	beq.n	8009fe6 <bt_mesh_net_encode+0x2a>
	} else if (net_buf_simple_tailroom(buf) < 4) {
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f007 fb3a 	bl	801164e <net_buf_simple_tailroom>
 8009fda:	2803      	cmp	r0, #3
 8009fdc:	d809      	bhi.n	8009ff2 <bt_mesh_net_encode+0x36>
		return -EINVAL;
 8009fde:	f06f 0015 	mvn.w	r0, #21
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	f007 fb31 	bl	801164e <net_buf_simple_tailroom>
 8009fec:	2807      	cmp	r0, #7
 8009fee:	d8f1      	bhi.n	8009fd4 <bt_mesh_net_encode+0x18>
 8009ff0:	e7f5      	b.n	8009fde <bt_mesh_net_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
 8009ff2:	686b      	ldr	r3, [r5, #4]
	seq[0] = (bt_mesh.seq >> 16);
 8009ff4:	4c2d      	ldr	r4, [pc, #180]	; (800a0ac <bt_mesh_net_encode+0xf0>)
	net_buf_simple_push_be16(buf, tx->ctx->addr);
 8009ff6:	8899      	ldrh	r1, [r3, #4]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f007 fad1 	bl	80115a0 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
 8009ffe:	8929      	ldrh	r1, [r5, #8]
 800a000:	4630      	mov	r0, r6
 800a002:	f007 facd 	bl	80115a0 <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
 800a006:	2103      	movs	r1, #3
 800a008:	4630      	mov	r0, r6
 800a00a:	f007 fac1 	bl	8011590 <net_buf_simple_push>
	seq[0] = (bt_mesh.seq >> 16);
 800a00e:	79a3      	ldrb	r3, [r4, #6]
 800a010:	7003      	strb	r3, [r0, #0]
	seq[1] = (bt_mesh.seq >> 8);
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800a018:	7043      	strb	r3, [r0, #1]
	seq[2] = bt_mesh.seq++;
 800a01a:	6863      	ldr	r3, [r4, #4]
 800a01c:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800a020:	1c51      	adds	r1, r2, #1
 800a022:	f361 0317 	bfi	r3, r1, #0, #24
 800a026:	6063      	str	r3, [r4, #4]
 800a028:	7082      	strb	r2, [r0, #2]
	if (ctl) {
 800a02a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a02e:	4598      	cmp	r8, r3
 800a030:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
 800a032:	79d9      	ldrb	r1, [r3, #7]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
 800a034:	4630      	mov	r0, r6
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
 800a036:	bf08      	it	eq
 800a038:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
 800a03c:	f007 fac4 	bl	80115c8 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 800a040:	f8d5 8000 	ldr.w	r8, [r5]
		tx->friend_cred = 0;
 800a044:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 800a046:	f898 201e 	ldrb.w	r2, [r8, #30]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 800a04a:	6821      	ldr	r1, [r4, #0]
		tx->friend_cred = 0;
 800a04c:	f36f 0300 	bfc	r3, #0, #1
 800a050:	72eb      	strb	r3, [r5, #11]
 800a052:	2559      	movs	r5, #89	; 0x59
 800a054:	4355      	muls	r5, r2
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 800a056:	79e3      	ldrb	r3, [r4, #7]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 800a058:	eb08 0205 	add.w	r2, r8, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 800a05c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a060:	1acb      	subs	r3, r1, r3
 800a062:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800a066:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800a06a:	b2c9      	uxtb	r1, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	f007 faab 	bl	80115c8 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
 800a072:	79e2      	ldrb	r2, [r4, #7]
 800a074:	6821      	ldr	r1, [r4, #0]
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
 800a076:	f105 0941 	add.w	r9, r5, #65	; 0x41
 800a07a:	44c1      	add	r9, r8
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
 800a07c:	f002 0201 	and.w	r2, r2, #1
 800a080:	1a8a      	subs	r2, r1, r2
 800a082:	463b      	mov	r3, r7
 800a084:	4631      	mov	r1, r6
 800a086:	4648      	mov	r0, r9
 800a088:	f001 fef8 	bl	800be7c <bt_mesh_net_encrypt>
	if (err) {
 800a08c:	b960      	cbnz	r0, 800a0a8 <bt_mesh_net_encode+0xec>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 800a08e:	79e3      	ldrb	r3, [r4, #7]
 800a090:	6821      	ldr	r1, [r4, #0]
 800a092:	6830      	ldr	r0, [r6, #0]
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
 800a094:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	4442      	add	r2, r8
 800a09e:	1ac9      	subs	r1, r1, r3
}
 800a0a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 800a0a4:	f001 bec2 	b.w	800be2c <bt_mesh_net_obfuscate>
}
 800a0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	20005b88 	.word	0x20005b88

0800a0b0 <bt_mesh_net_send>:
{
 800a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a0b4:	6846      	ldr	r6, [r0, #4]
{
 800a0b6:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a0b8:	79f3      	ldrb	r3, [r6, #7]
 800a0ba:	2bff      	cmp	r3, #255	; 0xff
{
 800a0bc:	4605      	mov	r5, r0
 800a0be:	4688      	mov	r8, r1
 800a0c0:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a0c2:	d102      	bne.n	800a0ca <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
 800a0c4:	f004 fc44 	bl	800e950 <bt_mesh_default_ttl_get>
 800a0c8:	71f0      	strb	r0, [r6, #7]
	err = bt_mesh_net_encode(tx, &buf->b, false);
 800a0ca:	f108 0908 	add.w	r9, r8, #8
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f7ff ff72 	bl	8009fbc <bt_mesh_net_encode>
	if (err) {
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b9c8      	cbnz	r0, 800a110 <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1) {
 800a0dc:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a0de:	79da      	ldrb	r2, [r3, #7]
 800a0e0:	2a01      	cmp	r2, #1
 800a0e2:	d01b      	beq.n	800a11c <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
 800a0e4:	8899      	ldrh	r1, [r3, #4]
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	f006 ffd0 	bl	801108c <bt_mesh_proxy_relay>
 800a0ec:	b1b0      	cbz	r0, 800a11c <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800a0ee:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
 800a0f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd11      	ble.n	800a11c <bt_mesh_net_send+0x6c>
			if (cb) {
 800a0f8:	b154      	cbz	r4, 800a110 <bt_mesh_net_send+0x60>
				if (cb->start) {
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	b11b      	cbz	r3, 800a106 <bt_mesh_net_send+0x56>
					cb->start(0, 0, cb_data);
 800a0fe:	463a      	mov	r2, r7
 800a100:	4631      	mov	r1, r6
 800a102:	4630      	mov	r0, r6
 800a104:	4798      	blx	r3
				if (cb->end) {
 800a106:	6863      	ldr	r3, [r4, #4]
 800a108:	b113      	cbz	r3, 800a110 <bt_mesh_net_send+0x60>
					cb->end(0, cb_data);
 800a10a:	4639      	mov	r1, r7
 800a10c:	2000      	movs	r0, #0
 800a10e:	4798      	blx	r3
	net_buf_unref(buf);
 800a110:	4640      	mov	r0, r8
 800a112:	f007 f9d7 	bl	80114c4 <net_buf_unref>
}
 800a116:	4630      	mov	r0, r6
 800a118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
 800a11c:	686b      	ldr	r3, [r5, #4]
 800a11e:	8898      	ldrh	r0, [r3, #4]
 800a120:	f002 f9b2 	bl	800c488 <bt_mesh_fixed_group_match>
 800a124:	b318      	cbz	r0, 800a16e <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
 800a126:	bb94      	cbnz	r4, 800a18e <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
 800a128:	4640      	mov	r0, r8
 800a12a:	f007 f9e7 	bl	80114fc <net_buf_ref>
 800a12e:	4601      	mov	r1, r0
 800a130:	481b      	ldr	r0, [pc, #108]	; (800a1a0 <bt_mesh_net_send+0xf0>)
 800a132:	f007 f96f 	bl	8011414 <net_buf_slist_put>
		if (cb && cb->end) {
 800a136:	b124      	cbz	r4, 800a142 <bt_mesh_net_send+0x92>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	b113      	cbz	r3, 800a142 <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
 800a13c:	4639      	mov	r1, r7
 800a13e:	2000      	movs	r0, #0
 800a140:	4798      	blx	r3
 800a142:	f3bf 8f5b 	dmb	ish
 800a146:	4917      	ldr	r1, [pc, #92]	; (800a1a4 <bt_mesh_net_send+0xf4>)
 800a148:	e851 3f00 	ldrex	r3, [r1]
 800a14c:	f043 0201 	orr.w	r2, r3, #1
 800a150:	e841 2000 	strex	r0, r2, [r1]
 800a154:	2800      	cmp	r0, #0
 800a156:	d1f7      	bne.n	800a148 <bt_mesh_net_send+0x98>
 800a158:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800a15c:	f013 0401 	ands.w	r4, r3, #1
 800a160:	d1d6      	bne.n	800a110 <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
 800a162:	3908      	subs	r1, #8
 800a164:	4810      	ldr	r0, [pc, #64]	; (800a1a8 <bt_mesh_net_send+0xf8>)
 800a166:	f007 fb9e 	bl	80118a6 <k_queue_append>
 800a16a:	4626      	mov	r6, r4
 800a16c:	e7d0      	b.n	800a110 <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
 800a16e:	686b      	ldr	r3, [r5, #4]
 800a170:	8898      	ldrh	r0, [r3, #4]
 800a172:	f002 f95f 	bl	800c434 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
 800a176:	2800      	cmp	r0, #0
 800a178:	d1d5      	bne.n	800a126 <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1) {
 800a17a:	686b      	ldr	r3, [r5, #4]
 800a17c:	79db      	ldrb	r3, [r3, #7]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d0c6      	beq.n	800a110 <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
 800a182:	463a      	mov	r2, r7
 800a184:	4621      	mov	r1, r4
 800a186:	4640      	mov	r0, r8
 800a188:	f7ff f8ca 	bl	8009320 <bt_mesh_adv_send>
 800a18c:	e7c0      	b.n	800a110 <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c9      	beq.n	800a128 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
 800a194:	2100      	movs	r1, #0
 800a196:	463a      	mov	r2, r7
 800a198:	4608      	mov	r0, r1
 800a19a:	4798      	blx	r3
 800a19c:	e7c4      	b.n	800a128 <bt_mesh_net_send+0x78>
 800a19e:	bf00      	nop
 800a1a0:	20005ba4 	.word	0x20005ba4
 800a1a4:	20005ba0 	.word	0x20005ba0
 800a1a8:	20001498 	.word	0x20001498

0800a1ac <bt_mesh_subnet_find>:
{
 800a1ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a1b0:	4c28      	ldr	r4, [pc, #160]	; (800a254 <bt_mesh_subnet_find+0xa8>)
{
 800a1b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a1b6:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a1b8:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
{
 800a1bc:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a1be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1c2:	429a      	cmp	r2, r3
{
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	460e      	mov	r6, r1
 800a1c8:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a1ca:	d016      	beq.n	800a1fa <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
 800a1cc:	460a      	mov	r2, r1
 800a1ce:	f8cd 8000 	str.w	r8, [sp]
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800a1da:	f7ff fac9 	bl	8009770 <auth_match>
 800a1de:	bb58      	cbnz	r0, 800a238 <bt_mesh_subnet_find+0x8c>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a1e0:	f894 31d3 	ldrb.w	r3, [r4, #467]	; 0x1d3
 800a1e4:	b14b      	cbz	r3, 800a1fa <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
 800a1e6:	f8cd 8000 	str.w	r8, [sp]
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f204 203d 	addw	r0, r4, #573	; 0x23d
 800a1f4:	f7ff fabc 	bl	8009770 <auth_match>
 800a1f8:	bb30      	cbnz	r0, 800a248 <bt_mesh_subnet_find+0x9c>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a1fa:	f8ba 22b4 	ldrh.w	r2, [sl, #692]	; 0x2b4
 800a1fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a202:	429a      	cmp	r2, r3
 800a204:	d014      	beq.n	800a230 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
 800a206:	f8cd 8000 	str.w	r8, [sp]
 800a20a:	463b      	mov	r3, r7
 800a20c:	4632      	mov	r2, r6
 800a20e:	4629      	mov	r1, r5
 800a210:	4811      	ldr	r0, [pc, #68]	; (800a258 <bt_mesh_subnet_find+0xac>)
 800a212:	f7ff faad 	bl	8009770 <auth_match>
 800a216:	b9a8      	cbnz	r0, 800a244 <bt_mesh_subnet_find+0x98>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a218:	f89a 32b7 	ldrb.w	r3, [sl, #695]	; 0x2b7
 800a21c:	b143      	cbz	r3, 800a230 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
 800a21e:	f8cd 8000 	str.w	r8, [sp]
 800a222:	463b      	mov	r3, r7
 800a224:	4632      	mov	r2, r6
 800a226:	4629      	mov	r1, r5
 800a228:	480c      	ldr	r0, [pc, #48]	; (800a25c <bt_mesh_subnet_find+0xb0>)
 800a22a:	f7ff faa1 	bl	8009770 <auth_match>
 800a22e:	b978      	cbnz	r0, 800a250 <bt_mesh_subnet_find+0xa4>
	return NULL;
 800a230:	2000      	movs	r0, #0
}
 800a232:	b002      	add	sp, #8
 800a234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a238:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = false;
 800a23c:	2300      	movs	r3, #0
			*new_key = true;
 800a23e:	f889 3000 	strb.w	r3, [r9]
			return sub;
 800a242:	e7f6      	b.n	800a232 <bt_mesh_subnet_find+0x86>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a244:	4806      	ldr	r0, [pc, #24]	; (800a260 <bt_mesh_subnet_find+0xb4>)
 800a246:	e7f9      	b.n	800a23c <bt_mesh_subnet_find+0x90>
 800a248:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = true;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e7f6      	b.n	800a23e <bt_mesh_subnet_find+0x92>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a250:	4803      	ldr	r0, [pc, #12]	; (800a260 <bt_mesh_subnet_find+0xb4>)
 800a252:	e7fb      	b.n	800a24c <bt_mesh_subnet_find+0xa0>
 800a254:	20005b88 	.word	0x20005b88
 800a258:	20005e50 	.word	0x20005e50
 800a25c:	20005ea9 	.word	0x20005ea9
 800a260:	20005e20 	.word	0x20005e20

0800a264 <bt_mesh_net_decode>:
{
 800a264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
 800a268:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800a26c:	f1b8 0f11 	cmp.w	r8, #17
{
 800a270:	468b      	mov	fp, r1
 800a272:	4614      	mov	r4, r2
 800a274:	4699      	mov	r9, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
 800a276:	f240 811b 	bls.w	800a4b0 <bt_mesh_net_decode+0x24c>
 800a27a:	6806      	ldr	r6, [r0, #0]
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
 800a27c:	bb81      	cbnz	r1, 800a2e0 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
 800a27e:	eb06 0208 	add.w	r2, r6, r8
	return ((u16_t)src[0] << 8) | src[1];
 800a282:	f812 3c07 	ldrb.w	r3, [r2, #-7]
 800a286:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 800a28a:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a28e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 800a292:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a296:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a29a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
 800a29e:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800a2a2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a2a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 800a2aa:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 800a2ae:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a2b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a2b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		if (dup_cache[i] == val) {
 800a2ba:	487f      	ldr	r0, [pc, #508]	; (800a4b8 <bt_mesh_net_decode+0x254>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
 800a2bc:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
 800a2be:	465a      	mov	r2, fp
		if (dup_cache[i] == val) {
 800a2c0:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	f000 80f3 	beq.w	800a4b0 <bt_mesh_net_decode+0x24c>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	2a04      	cmp	r2, #4
 800a2ce:	d1f7      	bne.n	800a2c0 <bt_mesh_net_decode+0x5c>
	dup_cache[dup_cache_next++] = val;
 800a2d0:	497a      	ldr	r1, [pc, #488]	; (800a4bc <bt_mesh_net_decode+0x258>)
 800a2d2:	680a      	ldr	r2, [r1, #0]
 800a2d4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2d8:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
 800a2da:	f002 0203 	and.w	r2, r2, #3
 800a2de:	600a      	str	r2, [r1, #0]
	rx->net_if = net_if;
 800a2e0:	7ca3      	ldrb	r3, [r4, #18]
 800a2e2:	4d77      	ldr	r5, [pc, #476]	; (800a4c0 <bt_mesh_net_decode+0x25c>)
		if (cred->net_idx != sub->net_idx) {
 800a2e4:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800a4d8 <bt_mesh_net_decode+0x274>
	rx->net_if = net_if;
 800a2e8:	f36b 1305 	bfi	r3, fp, #4, #2
 800a2ec:	74a3      	strb	r3, [r4, #18]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800a2ee:	2700      	movs	r7, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a2f0:	8bab      	ldrh	r3, [r5, #28]
 800a2f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	f000 80ca 	beq.w	800a490 <bt_mesh_net_decode+0x22c>
		if (cred->net_idx != sub->net_idx) {
 800a2fc:	f8ba 2000 	ldrh.w	r2, [sl]
 800a300:	429a      	cmp	r2, r3
 800a302:	d126      	bne.n	800a352 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[0].nid &&
 800a304:	7833      	ldrb	r3, [r6, #0]
 800a306:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800a30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30e:	429a      	cmp	r2, r3
 800a310:	d10b      	bne.n	800a32a <bt_mesh_net_decode+0xc6>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
 800a312:	496c      	ldr	r1, [pc, #432]	; (800a4c4 <bt_mesh_net_decode+0x260>)
 800a314:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a318:	4643      	mov	r3, r8
 800a31a:	4632      	mov	r2, r6
 800a31c:	f1a1 0010 	sub.w	r0, r1, #16
 800a320:	f7ff fa4a 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
 800a324:	2800      	cmp	r0, #0
 800a326:	f000 8091 	beq.w	800a44c <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a32a:	7feb      	ldrb	r3, [r5, #31]
 800a32c:	b18b      	cbz	r3, 800a352 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[1].nid &&
 800a32e:	7833      	ldrb	r3, [r6, #0]
 800a330:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800a334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a338:	429a      	cmp	r2, r3
 800a33a:	d10a      	bne.n	800a352 <bt_mesh_net_decode+0xee>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
 800a33c:	4962      	ldr	r1, [pc, #392]	; (800a4c8 <bt_mesh_net_decode+0x264>)
 800a33e:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a342:	4643      	mov	r3, r8
 800a344:	4632      	mov	r2, r6
 800a346:	f1a1 0010 	sub.w	r0, r1, #16
 800a34a:	f7ff fa35 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
 800a34e:	2800      	cmp	r0, #0
 800a350:	d078      	beq.n	800a444 <bt_mesh_net_decode+0x1e0>
		if (cred->net_idx != sub->net_idx) {
 800a352:	f8ba 204a 	ldrh.w	r2, [sl, #74]	; 0x4a
 800a356:	8bab      	ldrh	r3, [r5, #28]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d125      	bne.n	800a3a8 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[0].nid &&
 800a35c:	7833      	ldrb	r3, [r6, #0]
 800a35e:	f89a 2052 	ldrb.w	r2, [sl, #82]	; 0x52
 800a362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a366:	429a      	cmp	r2, r3
 800a368:	d10a      	bne.n	800a380 <bt_mesh_net_decode+0x11c>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
 800a36a:	4958      	ldr	r1, [pc, #352]	; (800a4cc <bt_mesh_net_decode+0x268>)
 800a36c:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a370:	4643      	mov	r3, r8
 800a372:	4632      	mov	r2, r6
 800a374:	f1a1 0010 	sub.w	r0, r1, #16
 800a378:	f7ff fa1e 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d065      	beq.n	800a44c <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a380:	7feb      	ldrb	r3, [r5, #31]
 800a382:	b18b      	cbz	r3, 800a3a8 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[1].nid &&
 800a384:	7833      	ldrb	r3, [r6, #0]
 800a386:	f89a 2073 	ldrb.w	r2, [sl, #115]	; 0x73
 800a38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a38e:	429a      	cmp	r2, r3
 800a390:	d10a      	bne.n	800a3a8 <bt_mesh_net_decode+0x144>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
 800a392:	494f      	ldr	r1, [pc, #316]	; (800a4d0 <bt_mesh_net_decode+0x26c>)
 800a394:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a398:	4643      	mov	r3, r8
 800a39a:	4632      	mov	r2, r6
 800a39c:	f1a1 0010 	sub.w	r0, r1, #16
 800a3a0:	f7ff fa0a 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d04d      	beq.n	800a444 <bt_mesh_net_decode+0x1e0>
		if (NID(data) == sub->keys[0].nid &&
 800a3a8:	7833      	ldrb	r3, [r6, #0]
 800a3aa:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800a3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d153      	bne.n	800a45e <bt_mesh_net_decode+0x1fa>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
 800a3b6:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a3ba:	4643      	mov	r3, r8
 800a3bc:	4632      	mov	r2, r6
 800a3be:	f105 0169 	add.w	r1, r5, #105	; 0x69
 800a3c2:	f105 0041 	add.w	r0, r5, #65	; 0x41
 800a3c6:	f7ff f9f7 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == sub->keys[0].nid &&
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d147      	bne.n	800a45e <bt_mesh_net_decode+0x1fa>
			rx->ctx.net_idx = sub->net_idx;
 800a3ce:	4a41      	ldr	r2, [pc, #260]	; (800a4d4 <bt_mesh_net_decode+0x270>)
 800a3d0:	23e4      	movs	r3, #228	; 0xe4
 800a3d2:	fb03 2707 	mla	r7, r3, r7, r2
	rx->ctx.recv_ttl = TTL(buf->data);
 800a3d6:	f8d9 2000 	ldr.w	r2, [r9]
			rx->ctx.net_idx = sub->net_idx;
 800a3da:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800a3de:	80a3      	strh	r3, [r4, #4]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
 800a3e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a3e4:	80e1      	strh	r1, [r4, #6]
			rx->sub = sub;
 800a3e6:	6025      	str	r5, [r4, #0]
	rx->ctx.recv_ttl = TTL(buf->data);
 800a3e8:	7850      	ldrb	r0, [r2, #1]
 800a3ea:	7aa3      	ldrb	r3, [r4, #10]
 800a3ec:	f360 0306 	bfi	r3, r0, #0, #7
 800a3f0:	72a3      	strb	r3, [r4, #10]
		rx->ctx.send_ttl = BT_MESH_TTL_DEFAULT;
 800a3f2:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a3f6:	bf18      	it	ne
 800a3f8:	460b      	movne	r3, r1
 800a3fa:	72e3      	strb	r3, [r4, #11]
	rx->ctl = CTL(buf->data);
 800a3fc:	7853      	ldrb	r3, [r2, #1]
 800a3fe:	7ca1      	ldrb	r1, [r4, #18]
 800a400:	09db      	lsrs	r3, r3, #7
 800a402:	f363 01c3 	bfi	r1, r3, #3, #1
 800a406:	74a1      	strb	r1, [r4, #18]
	rx->seq = SEQ(buf->data);
 800a408:	78d3      	ldrb	r3, [r2, #3]
 800a40a:	7891      	ldrb	r1, [r2, #2]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a412:	7911      	ldrb	r1, [r2, #4]
 800a414:	430b      	orrs	r3, r1
 800a416:	60e3      	str	r3, [r4, #12]
	return ((u16_t)src[0] << 8) | src[1];
 800a418:	79d1      	ldrb	r1, [r2, #7]
 800a41a:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a41c:	f1bb 0f03 	cmp.w	fp, #3
 800a420:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->dst = DST(buf->data);
 800a424:	8223      	strh	r3, [r4, #16]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a426:	d13e      	bne.n	800a4a6 <bt_mesh_net_decode+0x242>
	if (BT_MESH_ADDR_IS_RFU(rx->dst)) {
 800a428:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	2bfb      	cmp	r3, #251	; 0xfb
 800a430:	d93b      	bls.n	800a4aa <bt_mesh_net_decode+0x246>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
 800a432:	f1bb 0f01 	cmp.w	fp, #1
 800a436:	d003      	beq.n	800a440 <bt_mesh_net_decode+0x1dc>
 800a438:	8920      	ldrh	r0, [r4, #8]
 800a43a:	f001 fffb 	bl	800c434 <bt_mesh_elem_find>
 800a43e:	bba0      	cbnz	r0, 800a4aa <bt_mesh_net_decode+0x246>
	return 0;
 800a440:	2000      	movs	r0, #0
 800a442:	e02d      	b.n	800a4a0 <bt_mesh_net_decode+0x23c>
			rx->new_key = 1;
 800a444:	7ca3      	ldrb	r3, [r4, #18]
 800a446:	f043 0302 	orr.w	r3, r3, #2
 800a44a:	74a3      	strb	r3, [r4, #18]
			rx->friend_cred = 1;
 800a44c:	7ca3      	ldrb	r3, [r4, #18]
 800a44e:	f043 0304 	orr.w	r3, r3, #4
 800a452:	74a3      	strb	r3, [r4, #18]
			rx->ctx.net_idx = sub->net_idx;
 800a454:	4b1f      	ldr	r3, [pc, #124]	; (800a4d4 <bt_mesh_net_decode+0x270>)
 800a456:	22e4      	movs	r2, #228	; 0xe4
 800a458:	fb02 3707 	mla	r7, r2, r7, r3
 800a45c:	e7bb      	b.n	800a3d6 <bt_mesh_net_decode+0x172>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a45e:	7feb      	ldrb	r3, [r5, #31]
 800a460:	b1b3      	cbz	r3, 800a490 <bt_mesh_net_decode+0x22c>
		if (NID(data) == sub->keys[1].nid &&
 800a462:	7833      	ldrb	r3, [r6, #0]
 800a464:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
 800a468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d10f      	bne.n	800a490 <bt_mesh_net_decode+0x22c>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
 800a470:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a474:	4643      	mov	r3, r8
 800a476:	4632      	mov	r2, r6
 800a478:	f105 01c2 	add.w	r1, r5, #194	; 0xc2
 800a47c:	f105 009a 	add.w	r0, r5, #154	; 0x9a
 800a480:	f7ff f99a 	bl	80097b8 <net_decrypt.isra.2>
		if (NID(data) == sub->keys[1].nid &&
 800a484:	b920      	cbnz	r0, 800a490 <bt_mesh_net_decode+0x22c>
			rx->new_key = 1;
 800a486:	7ca3      	ldrb	r3, [r4, #18]
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	74a3      	strb	r3, [r4, #18]
 800a48e:	e79e      	b.n	800a3ce <bt_mesh_net_decode+0x16a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800a490:	3701      	adds	r7, #1
 800a492:	2f02      	cmp	r7, #2
 800a494:	f105 05e4 	add.w	r5, r5, #228	; 0xe4
 800a498:	f47f af2a 	bne.w	800a2f0 <bt_mesh_net_decode+0x8c>
		return -ENOENT;
 800a49c:	f06f 0001 	mvn.w	r0, #1
}
 800a4a0:	b003      	add	sp, #12
 800a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1be      	bne.n	800a428 <bt_mesh_net_decode+0x1c4>
		return -EBADMSG;
 800a4aa:	f06f 004c 	mvn.w	r0, #76	; 0x4c
 800a4ae:	e7f7      	b.n	800a4a0 <bt_mesh_net_decode+0x23c>
		return -EINVAL;
 800a4b0:	f06f 0015 	mvn.w	r0, #21
 800a4b4:	e7f4      	b.n	800a4a0 <bt_mesh_net_decode+0x23c>
 800a4b6:	bf00      	nop
 800a4b8:	20000c00 	.word	0x20000c00
 800a4bc:	20000c10 	.word	0x20000c10
 800a4c0:	20005d3c 	.word	0x20005d3c
 800a4c4:	20000c2d 	.word	0x20000c2d
 800a4c8:	20000c4e 	.word	0x20000c4e
 800a4cc:	20000c77 	.word	0x20000c77
 800a4d0:	20000c98 	.word	0x20000c98
 800a4d4:	20005b88 	.word	0x20005b88
 800a4d8:	20000c14 	.word	0x20000c14

0800a4dc <bt_mesh_net_recv>:
{
 800a4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e0:	b090      	sub	sp, #64	; 0x40
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	4605      	mov	r5, r0
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a4e6:	2100      	movs	r1, #0
{
 800a4e8:	4616      	mov	r6, r2
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a4ea:	a806      	add	r0, sp, #24
 800a4ec:	2228      	movs	r2, #40	; 0x28
 800a4ee:	f7f6 f9f3 	bl	80008d8 <memset>
 800a4f2:	231d      	movs	r3, #29
	struct bt_mesh_net_rx rx = { .rssi = rssi };
 800a4f4:	2214      	movs	r2, #20
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	a801      	add	r0, sp, #4
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a4fa:	f8ad 301e 	strh.w	r3, [sp, #30]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
 800a4fe:	f7f6 f9eb 	bl	80008d8 <memset>
 800a502:	f88d 4017 	strb.w	r4, [sp, #23]
	if (!bt_mesh_is_provisioned()) {
 800a506:	f7fe fdc5 	bl	8009094 <bt_mesh_is_provisioned>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d059      	beq.n	800a5c2 <bt_mesh_net_recv+0xe6>
	if (bt_mesh_net_decode(data, net_if, &rx, buf)) {
 800a50e:	ab06      	add	r3, sp, #24
 800a510:	aa01      	add	r2, sp, #4
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fea5 	bl	800a264 <bt_mesh_net_decode>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d151      	bne.n	800a5c2 <bt_mesh_net_recv+0xe6>
	state->offset = net_buf_simple_headroom(buf);
 800a51e:	a806      	add	r0, sp, #24
 800a520:	f007 f890 	bl	8011644 <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a524:	2e02      	cmp	r6, #2
 800a526:	4604      	mov	r4, r0
	state->len = buf->len;
 800a528:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800a52c:	d104      	bne.n	800a538 <bt_mesh_net_recv+0x5c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
 800a52e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a532:	4628      	mov	r0, r5
 800a534:	f006 fd6a 	bl	801100c <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a538:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800a53c:	f001 ffa4 	bl	800c488 <bt_mesh_fixed_group_match>
 800a540:	bb88      	cbnz	r0, 800a5a6 <bt_mesh_net_recv+0xca>
			  bt_mesh_elem_find(rx.dst));
 800a542:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800a546:	f001 ff75 	bl	800c434 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a54a:	3000      	adds	r0, #0
 800a54c:	bf18      	it	ne
 800a54e:	2001      	movne	r0, #1
 800a550:	f89d 3016 	ldrb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
 800a554:	a901      	add	r1, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a556:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(buf, &rx);
 800a55a:	a806      	add	r0, sp, #24
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a55c:	f88d 3016 	strb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
 800a560:	f000 fe78 	bl	800b254 <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.dst) ||
 800a564:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a568:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dd02      	ble.n	800a576 <bt_mesh_net_recv+0x9a>
 800a570:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800a574:	d125      	bne.n	800a5c2 <bt_mesh_net_recv+0xe6>
	buf->data = buf->__buf + state->offset;
 800a576:	ab08      	add	r3, sp, #32
 800a578:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800a57c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a580:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a584:	9406      	str	r4, [sp, #24]
 800a586:	2a10      	cmp	r2, #16
	buf->len = state->len;
 800a588:	f8ad 701c 	strh.w	r7, [sp, #28]
		if (rx->ctx.recv_ttl == 1) {
 800a58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800a590:	d10b      	bne.n	800a5aa <bt_mesh_net_recv+0xce>
		if (rx->ctx.recv_ttl == 1) {
 800a592:	2b01      	cmp	r3, #1
 800a594:	d015      	beq.n	800a5c2 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
 800a596:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a59a:	f013 0f30 	tst.w	r3, #48	; 0x30
 800a59e:	d013      	beq.n	800a5c8 <bt_mesh_net_recv+0xec>
		transmit = bt_mesh_net_transmit_get();
 800a5a0:	f003 ff46 	bl	800e430 <bt_mesh_net_transmit_get>
 800a5a4:	e012      	b.n	800a5cc <bt_mesh_net_recv+0xf0>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7d2      	b.n	800a550 <bt_mesh_net_recv+0x74>
		if (rx->ctx.recv_ttl <= 1) {
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	dd09      	ble.n	800a5c2 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	d1f1      	bne.n	800a596 <bt_mesh_net_recv+0xba>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
 800a5b2:	f003 ff8b 	bl	800e4cc <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
 800a5b6:	2801      	cmp	r0, #1
 800a5b8:	d0ed      	beq.n	800a596 <bt_mesh_net_recv+0xba>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
 800a5ba:	f004 f825 	bl	800e608 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
 800a5be:	2801      	cmp	r0, #1
 800a5c0:	d0e9      	beq.n	800a596 <bt_mesh_net_recv+0xba>
}
 800a5c2:	b010      	add	sp, #64	; 0x40
 800a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		transmit = bt_mesh_relay_retransmit_get();
 800a5c8:	f003 ff94 	bl	800e4f4 <bt_mesh_relay_retransmit_get>
				 BT_MESH_TRANSMIT_INT(transmit), K_NO_WAIT);
 800a5cc:	f3c0 02c7 	ubfx	r2, r0, #3, #8
 800a5d0:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a5d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a5d6:	0052      	lsls	r2, r2, #1
 800a5d8:	f000 0107 	and.w	r1, r0, #7
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	f7fe fe8c 	bl	8009300 <bt_mesh_adv_create>
	if (!buf) {
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0e9      	beq.n	800a5c2 <bt_mesh_net_recv+0xe6>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
 800a5ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a5f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d00d      	beq.n	800a616 <bt_mesh_net_recv+0x13a>
		sbuf->data[1] &= 0x80;
 800a5fa:	9a06      	ldr	r2, [sp, #24]
 800a5fc:	7853      	ldrb	r3, [r2, #1]
 800a5fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a602:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
 800a604:	9a06      	ldr	r2, [sp, #24]
 800a606:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a60a:	7851      	ldrb	r1, [r2, #1]
 800a60c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a610:	3b01      	subs	r3, #1
 800a612:	430b      	orrs	r3, r1
 800a614:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
 800a616:	f104 0708 	add.w	r7, r4, #8
 800a61a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a61e:	9906      	ldr	r1, [sp, #24]
 800a620:	4638      	mov	r0, r7
 800a622:	f006 ff75 	bl	8011510 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a626:	9e01      	ldr	r6, [sp, #4]
	if (rx->friend_cred) {
 800a628:	f89d 3016 	ldrb.w	r3, [sp, #22]
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a62c:	7fb2      	ldrb	r2, [r6, #30]
 800a62e:	2559      	movs	r5, #89	; 0x59
 800a630:	4355      	muls	r5, r2
 800a632:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
 800a636:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a638:	4430      	add	r0, r6
	if (rx->friend_cred) {
 800a63a:	d50b      	bpl.n	800a654 <bt_mesh_net_recv+0x178>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a63c:	68a1      	ldr	r1, [r4, #8]
 800a63e:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
 800a640:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a642:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
 800a646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a64a:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
 800a64c:	68a2      	ldr	r2, [r4, #8]
 800a64e:	7811      	ldrb	r1, [r2, #0]
 800a650:	430b      	orrs	r3, r1
 800a652:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
 800a654:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800a6f4 <bt_mesh_net_recv+0x218>
 800a658:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800a65c:	f8d8 1000 	ldr.w	r1, [r8]
 800a660:	f002 0201 	and.w	r2, r2, #1
 800a664:	1a8a      	subs	r2, r1, r2
 800a666:	2300      	movs	r3, #0
 800a668:	4639      	mov	r1, r7
 800a66a:	f001 fc07 	bl	800be7c <bt_mesh_net_encrypt>
 800a66e:	bb00      	cbnz	r0, 800a6b2 <bt_mesh_net_recv+0x1d6>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 800a670:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a674:	f8d8 1000 	ldr.w	r1, [r8]
 800a678:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
 800a67a:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	4432      	add	r2, r6
 800a684:	1ac9      	subs	r1, r1, r3
 800a686:	f001 fbd1 	bl	800be2c <bt_mesh_net_obfuscate>
 800a68a:	b990      	cbnz	r0, 800a6b2 <bt_mesh_net_recv+0x1d6>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
 800a68c:	f003 ffbc 	bl	800e608 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a690:	2801      	cmp	r0, #1
 800a692:	d012      	beq.n	800a6ba <bt_mesh_net_recv+0x1de>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
 800a694:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a69c:	2b10      	cmp	r3, #16
 800a69e:	d00c      	beq.n	800a6ba <bt_mesh_net_recv+0x1de>
	if (relay_to_adv(rx->net_if)) {
 800a6a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
	switch (net_if) {
 800a6a4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d019      	beq.n	800a6e0 <bt_mesh_net_recv+0x204>
 800a6ac:	d311      	bcc.n	800a6d2 <bt_mesh_net_recv+0x1f6>
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d01c      	beq.n	800a6ec <bt_mesh_net_recv+0x210>
	net_buf_unref(buf);
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f006 ff06 	bl	80114c4 <net_buf_unref>
 800a6b8:	e783      	b.n	800a5c2 <bt_mesh_net_recv+0xe6>
		if (bt_mesh_proxy_relay(&buf->b, rx->dst) &&
 800a6ba:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f006 fce4 	bl	801108c <bt_mesh_proxy_relay>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d0eb      	beq.n	800a6a0 <bt_mesh_net_recv+0x1c4>
 800a6c8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dcf0      	bgt.n	800a6b2 <bt_mesh_net_recv+0x1d6>
 800a6d0:	e7e6      	b.n	800a6a0 <bt_mesh_net_recv+0x1c4>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
 800a6d2:	f003 fefb 	bl	800e4cc <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 800a6d6:	1e43      	subs	r3, r0, #1
 800a6d8:	4258      	negs	r0, r3
 800a6da:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d0e8      	beq.n	800a6b2 <bt_mesh_net_recv+0x1d6>
		bt_mesh_adv_send(buf, NULL, NULL);
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f7fe fe1b 	bl	8009320 <bt_mesh_adv_send>
 800a6ea:	e7e2      	b.n	800a6b2 <bt_mesh_net_recv+0x1d6>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 800a6ec:	f003 ff8c 	bl	800e608 <bt_mesh_gatt_proxy_get>
 800a6f0:	e7f1      	b.n	800a6d6 <bt_mesh_net_recv+0x1fa>
 800a6f2:	bf00      	nop
 800a6f4:	20005b88 	.word	0x20005b88

0800a6f8 <bt_mesh_net_local>:
{
 800a6f8:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
 800a6fa:	4d08      	ldr	r5, [pc, #32]	; (800a71c <bt_mesh_net_local+0x24>)
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f006 fea2 	bl	8011446 <net_buf_slist_get>
 800a702:	4604      	mov	r4, r0
 800a704:	b900      	cbnz	r0, 800a708 <bt_mesh_net_local+0x10>
}
 800a706:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
 800a708:	f104 0008 	add.w	r0, r4, #8
 800a70c:	2201      	movs	r2, #1
 800a70e:	2100      	movs	r1, #0
 800a710:	f7ff fee4 	bl	800a4dc <bt_mesh_net_recv>
		net_buf_unref(buf);
 800a714:	4620      	mov	r0, r4
 800a716:	f006 fed5 	bl	80114c4 <net_buf_unref>
 800a71a:	e7ef      	b.n	800a6fc <bt_mesh_net_local+0x4>
 800a71c:	20005ba4 	.word	0x20005ba4

0800a720 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
 800a720:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_complete, ivu_complete);
 800a722:	4c0b      	ldr	r4, [pc, #44]	; (800a750 <bt_mesh_net_init+0x30>)
 800a724:	490b      	ldr	r1, [pc, #44]	; (800a754 <bt_mesh_net_init+0x34>)
 800a726:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 800a72a:	f007 fe77 	bl	801241c <k_delayed_work_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a72e:	f3bf 8f5b 	dmb	ish
 800a732:	f104 0318 	add.w	r3, r4, #24
 800a736:	e853 2f00 	ldrex	r2, [r3]
 800a73a:	f022 0201 	bic.w	r2, r2, #1
 800a73e:	e843 2100 	strex	r1, r2, [r3]
 800a742:	2900      	cmp	r1, #0
 800a744:	d1f7      	bne.n	800a736 <bt_mesh_net_init+0x16>
 800a746:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
 800a74a:	4b03      	ldr	r3, [pc, #12]	; (800a758 <bt_mesh_net_init+0x38>)
 800a74c:	6163      	str	r3, [r4, #20]
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	20005b88 	.word	0x20005b88
 800a754:	08009ec1 	.word	0x08009ec1
 800a758:	0800a6f9 	.word	0x0800a6f9

0800a75c <seg_send_start>:

static void seg_send_start(u16_t duration, int err, void *user_data)
{
	struct seg_tx *tx = user_data;

	if (tx->cb && tx->cb->start) {
 800a75c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a75e:	b11b      	cbz	r3, 800a768 <seg_send_start+0xc>
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	b10b      	cbz	r3, 800a768 <seg_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
 800a764:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a766:	4718      	bx	r3
 800a768:	4770      	bx	lr
	...

0800a76c <is_replay>:

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
 800a76c:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <is_replay+0x70>)
{
 800a76e:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 800a770:	2300      	movs	r3, #0
 800a772:	4614      	mov	r4, r2
		if (!rpl->src) {
 800a774:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a778:	f8b1 137c 	ldrh.w	r1, [r1, #892]	; 0x37c
 800a77c:	b961      	cbnz	r1, 800a798 <is_replay+0x2c>
			rpl->src = rx->ctx.addr;
 800a77e:	336f      	adds	r3, #111	; 0x6f
 800a780:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a784:	8902      	ldrh	r2, [r0, #8]
 800a786:	809a      	strh	r2, [r3, #4]
			rpl->seq = rx->seq;
 800a788:	68c2      	ldr	r2, [r0, #12]
 800a78a:	609a      	str	r2, [r3, #8]
			rpl->old_iv = rx->old_iv;
 800a78c:	7c82      	ldrb	r2, [r0, #18]
 800a78e:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800a792:	719a      	strb	r2, [r3, #6]

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
				rpl->old_iv = rx->old_iv;
				return false;
 800a794:	2000      	movs	r0, #0
 800a796:	bd30      	pop	{r4, r5, pc}
		if (rpl->src == rx->ctx.addr) {
 800a798:	8905      	ldrh	r5, [r0, #8]
 800a79a:	428d      	cmp	r5, r1
 800a79c:	d119      	bne.n	800a7d2 <is_replay+0x66>
			if (rx->old_iv && !rpl->old_iv) {
 800a79e:	7c81      	ldrb	r1, [r0, #18]
 800a7a0:	336f      	adds	r3, #111	; 0x6f
 800a7a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a7a6:	f011 0f01 	tst.w	r1, #1
 800a7aa:	7992      	ldrb	r2, [r2, #6]
 800a7ac:	d002      	beq.n	800a7b4 <is_replay+0x48>
 800a7ae:	b912      	cbnz	r2, 800a7b6 <is_replay+0x4a>
				return true;
 800a7b0:	2001      	movs	r0, #1
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
 800a7b2:	bd30      	pop	{r4, r5, pc}
			if ((!rx->old_iv && rpl->old_iv) ||
 800a7b4:	b92a      	cbnz	r2, 800a7c2 <is_replay+0x56>
			    rpl->seq < rx->seq) {
 800a7b6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
 800a7ba:	6895      	ldr	r5, [r2, #8]
 800a7bc:	68c2      	ldr	r2, [r0, #12]
 800a7be:	4295      	cmp	r5, r2
 800a7c0:	d2f6      	bcs.n	800a7b0 <is_replay+0x44>
				rpl->seq = rx->seq;
 800a7c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a7c6:	68c2      	ldr	r2, [r0, #12]
 800a7c8:	609a      	str	r2, [r3, #8]
				rpl->old_iv = rx->old_iv;
 800a7ca:	f3c1 0100 	ubfx	r1, r1, #0, #1
 800a7ce:	7199      	strb	r1, [r3, #6]
 800a7d0:	e7e0      	b.n	800a794 <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	2b0a      	cmp	r3, #10
 800a7d6:	d1cd      	bne.n	800a774 <is_replay+0x8>
 800a7d8:	e7ea      	b.n	800a7b0 <is_replay+0x44>
 800a7da:	bf00      	nop
 800a7dc:	20005b88 	.word	0x20005b88

0800a7e0 <send_unseg>:
{
 800a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e4:	460d      	mov	r5, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
 800a7e6:	7a81      	ldrb	r1, [r0, #10]
{
 800a7e8:	4616      	mov	r6, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
 800a7ea:	08ca      	lsrs	r2, r1, #3
 800a7ec:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a7ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a7f2:	0052      	lsls	r2, r2, #1
{
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	461f      	mov	r7, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a7f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f001 0107 	and.w	r1, r1, #7
 800a802:	2001      	movs	r0, #1
 800a804:	f7fe fd7c 	bl	8009300 <bt_mesh_adv_create>
	if (!buf) {
 800a808:	4681      	mov	r9, r0
 800a80a:	b390      	cbz	r0, 800a872 <send_unseg+0x92>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
 800a80c:	2109      	movs	r1, #9
 800a80e:	f006 fdfc 	bl	801140a <net_buf_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	885a      	ldrh	r2, [r3, #2]
 800a816:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a81a:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
 800a81c:	bf18      	it	ne
 800a81e:	7ae1      	ldrbne	r1, [r4, #11]
 800a820:	f109 0808 	add.w	r8, r9, #8
 800a824:	bf16      	itet	ne
 800a826:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
 800a828:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
 800a82a:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
 800a82e:	4640      	mov	r0, r8
 800a830:	f006 fe77 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
 800a834:	88aa      	ldrh	r2, [r5, #4]
 800a836:	6829      	ldr	r1, [r5, #0]
 800a838:	4640      	mov	r0, r8
 800a83a:	f006 fe69 	bl	8011510 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
 800a83e:	2200      	movs	r2, #0
 800a840:	4643      	mov	r3, r8
 800a842:	4611      	mov	r1, r2
 800a844:	4620      	mov	r0, r4
 800a846:	f004 fff9 	bl	800f83c <bt_mesh_friend_enqueue_tx>
 800a84a:	b150      	cbz	r0, 800a862 <send_unseg+0x82>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800a84c:	6863      	ldr	r3, [r4, #4]
					      NULL, &buf->b) &&
 800a84e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <send_unseg+0x82>
			net_buf_unref(buf);
 800a856:	4648      	mov	r0, r9
 800a858:	f006 fe34 	bl	80114c4 <net_buf_unref>
			return 0;
 800a85c:	2000      	movs	r0, #0
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800a862:	463b      	mov	r3, r7
 800a864:	4632      	mov	r2, r6
 800a866:	4649      	mov	r1, r9
 800a868:	4620      	mov	r0, r4
}
 800a86a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800a86e:	f7ff bc1f 	b.w	800a0b0 <bt_mesh_net_send>
		return -ENOBUFS;
 800a872:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a87c <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u8_t hdr, u8_t aszmic,
		    struct net_buf_simple *buf)
{
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	b0eb      	sub	sp, #428	; 0x1ac
	struct net_buf_simple *sdu =
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a882:	ad09      	add	r5, sp, #36	; 0x24
{
 800a884:	461f      	mov	r7, r3
 800a886:	4691      	mov	r9, r2
 800a888:	4604      	mov	r4, r0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a88a:	f44f 72c2 	mov.w	r2, #388	; 0x184
{
 800a88e:	468b      	mov	fp, r1
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a890:	4628      	mov	r0, r5
 800a892:	2100      	movs	r1, #0
 800a894:	f7f6 f820 	bl	80008d8 <memset>
 800a898:	f44f 73be 	mov.w	r3, #380	; 0x17c
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
 800a89c:	f1b9 0f00 	cmp.w	r9, #0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a8a0:	80eb      	strh	r3, [r5, #6]
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
 800a8a2:	88bb      	ldrh	r3, [r7, #4]
 800a8a4:	bf14      	ite	ne
 800a8a6:	2209      	movne	r2, #9
 800a8a8:	2205      	moveq	r2, #5
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	dd05      	ble.n	800a8ba <sdu_recv+0x3e>
		BT_ERR("Too short SDU + MIC");
		return -EINVAL;
 800a8ae:	f06f 0315 	mvn.w	r3, #21
	}

	BT_WARN("No matching AppKey");

	return -EINVAL;
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	b06b      	add	sp, #428	; 0x1ac
 800a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
 800a8ba:	7ca3      	ldrb	r3, [r4, #18]
 800a8bc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a8c0:	d0f7      	beq.n	800a8b2 <sdu_recv+0x36>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->dst)) {
 800a8c2:	8a20      	ldrh	r0, [r4, #16]
 800a8c4:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800a8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8cc:	d232      	bcs.n	800a934 <sdu_recv+0xb8>
		ad = bt_mesh_label_uuid_get(rx->dst);
 800a8ce:	f004 f893 	bl	800e9f8 <bt_mesh_label_uuid_get>
 800a8d2:	4682      	mov	sl, r0
	buf->len -= APP_MIC_LEN(aszmic);
 800a8d4:	88bb      	ldrh	r3, [r7, #4]
 800a8d6:	f1b9 0f00 	cmp.w	r9, #0
 800a8da:	bf14      	ite	ne
 800a8dc:	2208      	movne	r2, #8
 800a8de:	2204      	moveq	r2, #4
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	80bb      	strh	r3, [r7, #4]
	if (!AKF(&hdr)) {
 800a8e4:	f3cb 1380 	ubfx	r3, fp, #6, #1
 800a8e8:	bb3b      	cbnz	r3, 800a93a <sdu_recv+0xbe>
	buf->len = 0;
 800a8ea:	80ab      	strh	r3, [r5, #4]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a8ec:	4835      	ldr	r0, [pc, #212]	; (800a9c4 <sdu_recv+0x148>)
 800a8ee:	7ca3      	ldrb	r3, [r4, #18]
	buf->data = buf->__buf + reserve_head;
 800a8f0:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8f2:	602a      	str	r2, [r5, #0]
 800a8f4:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
 800a8f8:	6803      	ldr	r3, [r0, #0]
 800a8fa:	1a9b      	subs	r3, r3, r2
 800a8fc:	9305      	str	r3, [sp, #20]
 800a8fe:	68e3      	ldr	r3, [r4, #12]
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	8a23      	ldrh	r3, [r4, #16]
 800a904:	9303      	str	r3, [sp, #12]
 800a906:	8923      	ldrh	r3, [r4, #8]
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	e88d 0420 	stmia.w	sp, {r5, sl}
 800a90e:	463b      	mov	r3, r7
 800a910:	464a      	mov	r2, r9
 800a912:	2101      	movs	r1, #1
 800a914:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 800a918:	f001 fb87 	bl	800c02a <bt_mesh_app_decrypt>
		if (err) {
 800a91c:	9007      	str	r0, [sp, #28]
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1c5      	bne.n	800a8ae <sdu_recv+0x32>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
 800a922:	f64f 72fe 	movw	r2, #65534	; 0xfffe
		rx->ctx.app_idx = key->app_idx;
 800a926:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, sdu);
 800a928:	4629      	mov	r1, r5
 800a92a:	4620      	mov	r0, r4
 800a92c:	f001 fdc4 	bl	800c4b8 <bt_mesh_model_recv>
		return 0;
 800a930:	9b07      	ldr	r3, [sp, #28]
 800a932:	e7be      	b.n	800a8b2 <sdu_recv+0x36>
		ad = NULL;
 800a934:	f04f 0a00 	mov.w	sl, #0
 800a938:	e7cc      	b.n	800a8d4 <sdu_recv+0x58>
 800a93a:	4e23      	ldr	r6, [pc, #140]	; (800a9c8 <sdu_recv+0x14c>)
		if (AID(&hdr) != keys->id) {
 800a93c:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
	if (!AKF(&hdr)) {
 800a940:	f04f 0800 	mov.w	r8, #0
		if (AID(&hdr) != keys->id) {
 800a944:	9307      	str	r3, [sp, #28]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a946:	f5a6 7bbd 	sub.w	fp, r6, #378	; 0x17a
		if (key->net_idx != rx->sub->net_idx) {
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	f836 2c16 	ldrh.w	r2, [r6, #-22]
 800a950:	8b9b      	ldrh	r3, [r3, #28]
 800a952:	429a      	cmp	r2, r3
 800a954:	d12d      	bne.n	800a9b2 <sdu_recv+0x136>
		if (rx->new_key && key->updated) {
 800a956:	7ca3      	ldrb	r3, [r4, #18]
 800a958:	079b      	lsls	r3, r3, #30
 800a95a:	d502      	bpl.n	800a962 <sdu_recv+0xe6>
 800a95c:	f816 3c12 	ldrb.w	r3, [r6, #-18]
 800a960:	bb2b      	cbnz	r3, 800a9ae <sdu_recv+0x132>
 800a962:	f1a6 0011 	sub.w	r0, r6, #17
		if (AID(&hdr) != keys->id) {
 800a966:	7803      	ldrb	r3, [r0, #0]
 800a968:	9a07      	ldr	r2, [sp, #28]
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d121      	bne.n	800a9b2 <sdu_recv+0x136>
 800a96e:	ab0b      	add	r3, sp, #44	; 0x2c
 800a970:	602b      	str	r3, [r5, #0]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a972:	7ca3      	ldrb	r3, [r4, #18]
 800a974:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
 800a978:	f8db 3000 	ldr.w	r3, [fp]
	buf->len = 0;
 800a97c:	2100      	movs	r1, #0
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	80a9      	strh	r1, [r5, #4]
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	68e3      	ldr	r3, [r4, #12]
 800a986:	9304      	str	r3, [sp, #16]
 800a988:	8a23      	ldrh	r3, [r4, #16]
 800a98a:	9303      	str	r3, [sp, #12]
 800a98c:	8923      	ldrh	r3, [r4, #8]
 800a98e:	9302      	str	r3, [sp, #8]
 800a990:	e88d 0420 	stmia.w	sp, {r5, sl}
 800a994:	463b      	mov	r3, r7
 800a996:	464a      	mov	r2, r9
 800a998:	3001      	adds	r0, #1
 800a99a:	f001 fb46 	bl	800c02a <bt_mesh_app_decrypt>
		if (err) {
 800a99e:	b940      	cbnz	r0, 800a9b2 <sdu_recv+0x136>
		rx->ctx.app_idx = key->app_idx;
 800a9a0:	2228      	movs	r2, #40	; 0x28
 800a9a2:	fb02 b808 	mla	r8, r2, r8, fp
 800a9a6:	9007      	str	r0, [sp, #28]
 800a9a8:	f8b8 2166 	ldrh.w	r2, [r8, #358]	; 0x166
 800a9ac:	e7bb      	b.n	800a926 <sdu_recv+0xaa>
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	e7d9      	b.n	800a966 <sdu_recv+0xea>
 800a9b2:	f108 0801 	add.w	r8, r8, #1
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
 800a9b6:	f1b8 0f02 	cmp.w	r8, #2
 800a9ba:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a9be:	f43f af76 	beq.w	800a8ae <sdu_recv+0x32>
 800a9c2:	e7c2      	b.n	800a94a <sdu_recv+0xce>
 800a9c4:	20005b88 	.word	0x20005b88
 800a9c8:	20005d02 	.word	0x20005d02

0800a9cc <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx)
{
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
 800a9d0:	3020      	adds	r0, #32
 800a9d2:	f007 fd41 	bl	8012458 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a9d6:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	da12      	bge.n	800aa04 <seg_rx_reset+0x38>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
 800a9de:	7c22      	ldrb	r2, [r4, #16]
 800a9e0:	f002 021f 	and.w	r2, r2, #31
 800a9e4:	3201      	adds	r2, #1
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	f7f5 fd27 	bl	800043c <__aeabi_llsl>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a9ee:	69a3      	ldr	r3, [r4, #24]
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
 800a9f0:	3801      	subs	r0, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a9f2:	4283      	cmp	r3, r0
 800a9f4:	d006      	beq.n	800aa04 <seg_rx_reset+0x38>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
 800a9f6:	f104 0308 	add.w	r3, r4, #8
 800a9fa:	8ae2      	ldrh	r2, [r4, #22]
 800a9fc:	8aa1      	ldrh	r1, [r4, #20]
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	f004 ff9e 	bl	800f940 <bt_mesh_friend_clear_incomplete>
	/* We don't reset rx->net and rx->seq_auth here since we need to
	 * be able to send an ack if we receive a segment after we've
	 * already received the full SDU.
	 */

	rx->in_use = 0;
 800aa04:	7c23      	ldrb	r3, [r4, #16]
 800aa06:	f36f 1386 	bfc	r3, #6, #1
 800aa0a:	7423      	strb	r3, [r4, #16]
 800aa0c:	bd10      	pop	{r4, pc}
	...

0800aa10 <seg_tx_reset>:
{
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
 800aa14:	305c      	adds	r0, #92	; 0x5c
 800aa16:	f007 fd1f 	bl	8012458 <k_delayed_work_cancel>
	if (!tx->nack_count) {
 800aa1a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tx->cb = NULL;
 800aa1e:	2500      	movs	r5, #0
	tx->seq_auth = 0;
 800aa20:	2000      	movs	r0, #0
 800aa22:	2100      	movs	r1, #0
	tx->cb = NULL;
 800aa24:	6565      	str	r5, [r4, #84]	; 0x54
	tx->cb_data = NULL;
 800aa26:	65a5      	str	r5, [r4, #88]	; 0x58
	tx->seq_auth = 0;
 800aa28:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
	tx->sub = NULL;
 800aa2c:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
 800aa2e:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
	if (!tx->nack_count) {
 800aa32:	b31a      	cbz	r2, 800aa7c <seg_tx_reset+0x6c>
 800aa34:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
 800aa36:	462f      	mov	r7, r5
	for (i = 0; i <= tx->seg_n; i++) {
 800aa38:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800aa3c:	f003 031f 	and.w	r3, r3, #31
 800aa40:	429d      	cmp	r5, r3
 800aa42:	dd13      	ble.n	800aa6c <seg_tx_reset+0x5c>
	tx->nack_count = 0;
 800aa44:	2500      	movs	r5, #0
	if (bt_mesh.pending_update) {
 800aa46:	4a0e      	ldr	r2, [pc, #56]	; (800aa80 <seg_tx_reset+0x70>)
	tx->nack_count = 0;
 800aa48:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	if (bt_mesh.pending_update) {
 800aa4c:	79d3      	ldrb	r3, [r2, #7]
 800aa4e:	0719      	lsls	r1, r3, #28
 800aa50:	d514      	bpl.n	800aa7c <seg_tx_reset+0x6c>
		bt_mesh.pending_update = 0;
 800aa52:	f365 03c3 	bfi	r3, r5, #3, #1
 800aa56:	71d3      	strb	r3, [r2, #7]
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
 800aa58:	4629      	mov	r1, r5
 800aa5a:	6810      	ldr	r0, [r2, #0]
 800aa5c:	f7ff f9b0 	bl	8009dc0 <bt_mesh_net_iv_update>
 800aa60:	b160      	cbz	r0, 800aa7c <seg_tx_reset+0x6c>
			bt_mesh_net_sec_update(NULL);
 800aa62:	4628      	mov	r0, r5
}
 800aa64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
 800aa68:	f7ff b994 	b.w	8009d94 <bt_mesh_net_sec_update>
		if (!tx->seg[i]) {
 800aa6c:	6830      	ldr	r0, [r6, #0]
 800aa6e:	b110      	cbz	r0, 800aa76 <seg_tx_reset+0x66>
		net_buf_unref(tx->seg[i]);
 800aa70:	f006 fd28 	bl	80114c4 <net_buf_unref>
		tx->seg[i] = NULL;
 800aa74:	6037      	str	r7, [r6, #0]
	for (i = 0; i <= tx->seg_n; i++) {
 800aa76:	3501      	adds	r5, #1
 800aa78:	3604      	adds	r6, #4
 800aa7a:	e7dd      	b.n	800aa38 <seg_tx_reset+0x28>
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20005b88 	.word	0x20005b88

0800aa84 <send_seg>:
{
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	4604      	mov	r4, r0
	if (sdu->len < 1) {
 800aa8a:	8888      	ldrh	r0, [r1, #4]
{
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	4689      	mov	r9, r1
	if (sdu->len < 1) {
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f000 80d6 	beq.w	800ac42 <send_seg+0x1be>
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
 800aa96:	28cc      	cmp	r0, #204	; 0xcc
 800aa98:	f200 80d6 	bhi.w	800ac48 <send_seg+0x1c4>
		if (!seg_tx[i].nack_count) {
 800aa9c:	4970      	ldr	r1, [pc, #448]	; (800ac60 <send_seg+0x1dc>)
 800aa9e:	f891 5053 	ldrb.w	r5, [r1, #83]	; 0x53
 800aaa2:	2d00      	cmp	r5, #0
 800aaa4:	f000 80d3 	beq.w	800ac4e <send_seg+0x1ca>
		return -EBUSY;
 800aaa8:	f06f 050f 	mvn.w	r5, #15
}
 800aaac:	4628      	mov	r0, r5
 800aaae:	b005      	add	sp, #20
 800aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		seg_hdr = SEG_HDR(1, net_tx->aid);
 800aab4:	7ae7      	ldrb	r7, [r4, #11]
 800aab6:	08bf      	lsrs	r7, r7, #2
 800aab8:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
	tx->dst = net_tx->ctx->addr;
 800aabc:	88ad      	ldrh	r5, [r5, #4]
 800aabe:	f8a1 5050 	strh.w	r5, [r1, #80]	; 0x50
	tx->seg_n = (sdu->len - 1) / 12;
 800aac2:	3801      	subs	r0, #1
 800aac4:	250c      	movs	r5, #12
 800aac6:	fb90 f0f5 	sdiv	r0, r0, r5
 800aaca:	f891 5052 	ldrb.w	r5, [r1, #82]	; 0x52
 800aace:	f360 0504 	bfi	r5, r0, #0, #5
 800aad2:	f881 5052 	strb.w	r5, [r1, #82]	; 0x52
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aad6:	4d63      	ldr	r5, [pc, #396]	; (800ac64 <send_seg+0x1e0>)
	tx->nack_count = tx->seg_n + 1;
 800aad8:	3001      	adds	r0, #1
 800aada:	f881 0053 	strb.w	r0, [r1, #83]	; 0x53
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aade:	79e8      	ldrb	r0, [r5, #7]
 800aae0:	f000 0601 	and.w	r6, r0, #1
 800aae4:	6828      	ldr	r0, [r5, #0]
 800aae6:	1b80      	subs	r0, r0, r6
 800aae8:	ea4f 2b10 	mov.w	fp, r0, lsr #8
 800aaec:	ea4f 6a00 	mov.w	sl, r0, lsl #24
 800aaf0:	6868      	ldr	r0, [r5, #4]
	tx->sub = net_tx->sub;
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	600d      	str	r5, [r1, #0]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aaf6:	f3c0 0017 	ubfx	r0, r0, #0, #24
 800aafa:	ea4a 0a00 	orr.w	sl, sl, r0
	tx->new_key = net_tx->sub->kr_flag;
 800aafe:	7fad      	ldrb	r5, [r5, #30]
 800ab00:	f891 0052 	ldrb.w	r0, [r1, #82]	; 0x52
	tx->cb_data = cb_data;
 800ab04:	658b      	str	r3, [r1, #88]	; 0x58
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800ab06:	e9c1 ab12 	strd	sl, fp, [r1, #72]	; 0x48
	seq_zero = tx->seq_auth & 0x1fff;
 800ab0a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800ab0e:	ea4f 139a 	mov.w	r3, sl, lsr #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800ab12:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
	tx->new_key = net_tx->sub->kr_flag;
 800ab16:	f365 1045 	bfi	r0, r5, #5, #1
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800ab1a:	9301      	str	r3, [sp, #4]
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
 800ab1c:	f8df b140 	ldr.w	fp, [pc, #320]	; 800ac60 <send_seg+0x1dc>
	tx->new_key = net_tx->sub->kr_flag;
 800ab20:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800ab24:	fa4f f38a 	sxtb.w	r3, sl
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800ab28:	2600      	movs	r6, #0
	tx->cb = cb;
 800ab2a:	654a      	str	r2, [r1, #84]	; 0x54
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800ab2c:	9302      	str	r3, [sp, #8]
	for (seg_o = 0; sdu->len; seg_o++) {
 800ab2e:	f8b9 5004 	ldrh.w	r5, [r9, #4]
 800ab32:	fa5f fa86 	uxtb.w	sl, r6
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	d0b8      	beq.n	800aaac <send_seg+0x28>
					 BT_MESH_TRANSMIT_COUNT(net_tx->xmit),
 800ab3a:	7aa1      	ldrb	r1, [r4, #10]
					 BT_MESH_TRANSMIT_INT(net_tx->xmit),
 800ab3c:	08ca      	lsrs	r2, r1, #3
 800ab3e:	3201      	adds	r2, #1
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800ab40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ab44:	0052      	lsls	r2, r2, #1
 800ab46:	2300      	movs	r3, #0
 800ab48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab4c:	f001 0107 	and.w	r1, r1, #7
 800ab50:	2001      	movs	r0, #1
 800ab52:	f7fe fbd5 	bl	8009300 <bt_mesh_adv_create>
		if (!seg) {
 800ab56:	4680      	mov	r8, r0
 800ab58:	b928      	cbnz	r0, 800ab66 <send_seg+0xe2>
			seg_tx_reset(tx);
 800ab5a:	4841      	ldr	r0, [pc, #260]	; (800ac60 <send_seg+0x1dc>)
 800ab5c:	f7ff ff58 	bl	800aa10 <seg_tx_reset>
			return -ENOBUFS;
 800ab60:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800ab64:	e7a2      	b.n	800aaac <send_seg+0x28>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800ab66:	89c3      	ldrh	r3, [r0, #14]
 800ab68:	4403      	add	r3, r0
 800ab6a:	3313      	adds	r3, #19
 800ab6c:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
 800ab70:	2204      	movs	r2, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
		net_buf_add_u8(seg, seg_hdr);
 800ab74:	f108 0508 	add.w	r5, r8, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
 800ab78:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
 800ab7a:	2109      	movs	r1, #9
 800ab7c:	f006 fc45 	bl	801140a <net_buf_reserve>
		net_buf_add_u8(seg, seg_hdr);
 800ab80:	4639      	mov	r1, r7
 800ab82:	4628      	mov	r0, r5
 800ab84:	f006 fccd 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800ab88:	7ae1      	ldrb	r1, [r4, #11]
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800ab90:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 800ab94:	4628      	mov	r0, r5
 800ab96:	f006 fcc4 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800ab9a:	9b02      	ldr	r3, [sp, #8]
 800ab9c:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
 800aba0:	b2c9      	uxtb	r1, r1
 800aba2:	4628      	mov	r0, r5
 800aba4:	f006 fcbd 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
 800aba8:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
 800abac:	f3c1 0104 	ubfx	r1, r1, #0, #5
 800abb0:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
 800abb4:	b2c9      	uxtb	r1, r1
 800abb6:	4628      	mov	r0, r5
 800abb8:	f006 fcb3 	bl	8011522 <net_buf_simple_add_u8>
		len = min(sdu->len, 12);
 800abbc:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		net_buf_add_mem(seg, sdu->data, len);
 800abc0:	f8d9 1000 	ldr.w	r1, [r9]
 800abc4:	2b0c      	cmp	r3, #12
 800abc6:	bf28      	it	cs
 800abc8:	230c      	movcs	r3, #12
 800abca:	461a      	mov	r2, r3
 800abcc:	4628      	mov	r0, r5
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	f006 fc9e 	bl	8011510 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	4648      	mov	r0, r9
 800abd8:	4619      	mov	r1, r3
 800abda:	f006 fcfe 	bl	80115da <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
 800abde:	4640      	mov	r0, r8
 800abe0:	f006 fc8c 	bl	80114fc <net_buf_ref>
			if (seg_o == tx->seg_n) {
 800abe4:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
 800abe8:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <send_seg+0x1e4>)
		tx->seg[seg_o] = net_buf_ref(seg);
 800abea:	eb0b 038a 	add.w	r3, fp, sl, lsl #2
			if (seg_o == tx->seg_n) {
 800abee:	f001 011f 	and.w	r1, r1, #31
		tx->seg[seg_o] = net_buf_ref(seg);
 800abf2:	6058      	str	r0, [r3, #4]
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
 800abf4:	4551      	cmp	r1, sl
 800abf6:	bf0c      	ite	eq
 800abf8:	2102      	moveq	r1, #2
 800abfa:	2101      	movne	r1, #1
 800abfc:	462b      	mov	r3, r5
 800abfe:	4620      	mov	r0, r4
 800ac00:	f004 fe1c 	bl	800f83c <bt_mesh_friend_enqueue_tx>
 800ac04:	b148      	cbz	r0, 800ac1a <send_seg+0x196>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
 800ac06:	6863      	ldr	r3, [r4, #4]
						      &seg->b) &&
 800ac08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd04      	ble.n	800ac1a <send_seg+0x196>
				net_buf_unref(seg);
 800ac10:	4640      	mov	r0, r8
 800ac12:	f006 fc57 	bl	80114c4 <net_buf_unref>
				return 0;
 800ac16:	2500      	movs	r5, #0
 800ac18:	e748      	b.n	800aaac <send_seg+0x28>
		err = bt_mesh_net_send(net_tx, seg,
 800ac1a:	4914      	ldr	r1, [pc, #80]	; (800ac6c <send_seg+0x1e8>)
 800ac1c:	4a14      	ldr	r2, [pc, #80]	; (800ac70 <send_seg+0x1ec>)
 800ac1e:	465b      	mov	r3, fp
 800ac20:	f1ba 0f00 	cmp.w	sl, #0
 800ac24:	bf18      	it	ne
 800ac26:	460a      	movne	r2, r1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	4641      	mov	r1, r8
 800ac2c:	f7ff fa40 	bl	800a0b0 <bt_mesh_net_send>
 800ac30:	3601      	adds	r6, #1
		if (err) {
 800ac32:	4605      	mov	r5, r0
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f43f af7a 	beq.w	800ab2e <send_seg+0xaa>
			seg_tx_reset(tx);
 800ac3a:	4809      	ldr	r0, [pc, #36]	; (800ac60 <send_seg+0x1dc>)
 800ac3c:	f7ff fee8 	bl	800aa10 <seg_tx_reset>
			return err;
 800ac40:	e734      	b.n	800aaac <send_seg+0x28>
		return -EINVAL;
 800ac42:	f06f 0515 	mvn.w	r5, #21
 800ac46:	e731      	b.n	800aaac <send_seg+0x28>
		return -EMSGSIZE;
 800ac48:	f06f 0523 	mvn.w	r5, #35	; 0x23
 800ac4c:	e72e      	b.n	800aaac <send_seg+0x28>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800ac4e:	6865      	ldr	r5, [r4, #4]
 800ac50:	886f      	ldrh	r7, [r5, #2]
 800ac52:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800ac56:	42b7      	cmp	r7, r6
 800ac58:	f47f af2c 	bne.w	800aab4 <send_seg+0x30>
		seg_hdr = SEG_HDR(0, 0);
 800ac5c:	2780      	movs	r7, #128	; 0x80
 800ac5e:	e72d      	b.n	800aabc <send_seg+0x38>
 800ac60:	20000d00 	.word	0x20000d00
 800ac64:	20005b88 	.word	0x20005b88
 800ac68:	20000d48 	.word	0x20000d48
 800ac6c:	0801387c 	.word	0x0801387c
 800ac70:	08013874 	.word	0x08013874

0800ac74 <seg_tx_complete>:
{
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
 800ac7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac7c:	b11b      	cbz	r3, 800ac86 <seg_tx_complete+0x12>
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	b10b      	cbz	r3, 800ac86 <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
 800ac82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ac84:	4798      	blx	r3
	seg_tx_reset(tx);
 800ac86:	4620      	mov	r0, r4
}
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
 800ac8c:	f7ff bec0 	b.w	800aa10 <seg_tx_reset>

0800ac90 <seg_tx_send_unacked>:
{
 800ac90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
 800ac92:	4f19      	ldr	r7, [pc, #100]	; (800acf8 <seg_tx_send_unacked+0x68>)
{
 800ac94:	4604      	mov	r4, r0
 800ac96:	1d06      	adds	r6, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
 800ac98:	2500      	movs	r5, #0
 800ac9a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800ac9e:	f003 031f 	and.w	r3, r3, #31
 800aca2:	429d      	cmp	r5, r3
 800aca4:	dd01      	ble.n	800acaa <seg_tx_send_unacked+0x1a>
}
 800aca6:	b003      	add	sp, #12
 800aca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct net_buf *seg = tx->seg[i];
 800acaa:	f856 1b04 	ldr.w	r1, [r6], #4
		if (!seg) {
 800acae:	b309      	cbz	r1, 800acf4 <seg_tx_send_unacked+0x64>
 800acb0:	89cb      	ldrh	r3, [r1, #14]
 800acb2:	440b      	add	r3, r1
 800acb4:	3313      	adds	r3, #19
 800acb6:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(seg)->busy) {
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	7a1a      	ldrb	r2, [r3, #8]
 800acbe:	0752      	lsls	r2, r2, #29
 800acc0:	d418      	bmi.n	800acf4 <seg_tx_send_unacked+0x64>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
 800acc2:	7a9a      	ldrb	r2, [r3, #10]
 800acc4:	1e50      	subs	r0, r2, #1
 800acc6:	7298      	strb	r0, [r3, #10]
 800acc8:	b93a      	cbnz	r2, 800acda <seg_tx_send_unacked+0x4a>
			seg_tx_complete(tx, -ETIMEDOUT);
 800acca:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
 800acce:	4620      	mov	r0, r4
}
 800acd0:	b003      	add	sp, #12
 800acd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			seg_tx_complete(tx, -EIO);
 800acd6:	f7ff bfcd 	b.w	800ac74 <seg_tx_complete>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
 800acda:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800acde:	9400      	str	r4, [sp, #0]
 800ace0:	463b      	mov	r3, r7
 800ace2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ace6:	6820      	ldr	r0, [r4, #0]
 800ace8:	f7ff f8f8 	bl	8009edc <bt_mesh_net_resend>
		if (err) {
 800acec:	b110      	cbz	r0, 800acf4 <seg_tx_send_unacked+0x64>
			seg_tx_complete(tx, -EIO);
 800acee:	f06f 0104 	mvn.w	r1, #4
 800acf2:	e7ec      	b.n	800acce <seg_tx_send_unacked+0x3e>
	for (i = 0; i <= tx->seg_n; i++) {
 800acf4:	3501      	adds	r5, #1
 800acf6:	e7d0      	b.n	800ac9a <seg_tx_send_unacked+0xa>
 800acf8:	0801387c 	.word	0x0801387c

0800acfc <ctl_recv>:
{
 800acfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
 800ad00:	f011 087f 	ands.w	r8, r1, #127	; 0x7f
{
 800ad04:	4604      	mov	r4, r0
 800ad06:	4615      	mov	r5, r2
 800ad08:	469b      	mov	fp, r3
	switch (ctl_op) {
 800ad0a:	d013      	beq.n	800ad34 <ctl_recv+0x38>
 800ad0c:	f1b8 0f0a 	cmp.w	r8, #10
 800ad10:	f000 809c 	beq.w	800ae4c <ctl_recv+0x150>
	if (!rx->local_match) {
 800ad14:	7c83      	ldrb	r3, [r0, #18]
 800ad16:	f013 0140 	ands.w	r1, r3, #64	; 0x40
 800ad1a:	d02c      	beq.n	800ad76 <ctl_recv+0x7a>
		switch (ctl_op) {
 800ad1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad20:	f1b8 0f07 	cmp.w	r8, #7
 800ad24:	f200 80cf 	bhi.w	800aec6 <ctl_recv+0x1ca>
 800ad28:	e8df f008 	tbb	[pc, r8]
 800ad2c:	cdb4cdaf 	.word	0xcdb4cdaf
 800ad30:	c8c3beb9 	.word	0xc8c3beb9
	if (buf->len < 6) {
 800ad34:	8893      	ldrh	r3, [r2, #4]
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d804      	bhi.n	800ad44 <ctl_recv+0x48>
		return -EINVAL;
 800ad3a:	f06f 0415 	mvn.w	r4, #21
}
 800ad3e:	4620      	mov	r0, r4
 800ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
 800ad44:	4610      	mov	r0, r2
 800ad46:	f006 fc60 	bl	801160a <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800ad4a:	f994 3012 	ldrsb.w	r3, [r4, #18]
	seq_zero = (seq_zero >> 2) & 0x1fff;
 800ad4e:	f3c0 068c 	ubfx	r6, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800ad52:	2b00      	cmp	r3, #0
	seq_zero = net_buf_simple_pull_be16(buf);
 800ad54:	4682      	mov	sl, r0
 800ad56:	b2b6      	uxth	r6, r6
 800ad58:	f04f 0700 	mov.w	r7, #0
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800ad5c:	da0d      	bge.n	800ad7a <ctl_recv+0x7e>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
 800ad5e:	7ca1      	ldrb	r1, [r4, #18]
 800ad60:	4a5a      	ldr	r2, [pc, #360]	; (800aecc <ctl_recv+0x1d0>)
 800ad62:	f001 0301 	and.w	r3, r1, #1
 800ad66:	6811      	ldr	r1, [r2, #0]
 800ad68:	1ac9      	subs	r1, r1, r3
 800ad6a:	0a0b      	lsrs	r3, r1, #8
 800ad6c:	060a      	lsls	r2, r1, #24
 800ad6e:	4316      	orrs	r6, r2
 800ad70:	431f      	orrs	r7, r3
 800ad72:	e9cb 6700 	strd	r6, r7, [fp]
		return 0;
 800ad76:	2400      	movs	r4, #0
 800ad78:	e7e1      	b.n	800ad3e <ctl_recv+0x42>
	ack = net_buf_simple_pull_be32(buf);
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f006 fc50 	bl	8011620 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
 800ad80:	4953      	ldr	r1, [pc, #332]	; (800aed0 <ctl_recv+0x1d4>)
 800ad82:	e9d1 8912 	ldrd	r8, r9, [r1, #72]	; 0x48
 800ad86:	2300      	movs	r3, #0
 800ad88:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800ad8c:	ea03 0309 	and.w	r3, r3, r9
 800ad90:	ea02 0208 	and.w	r2, r2, r8
 800ad94:	42bb      	cmp	r3, r7
 800ad96:	bf08      	it	eq
 800ad98:	42b2      	cmpeq	r2, r6
	ack = net_buf_simple_pull_be32(buf);
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	460e      	mov	r6, r1
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
 800ad9e:	d1cc      	bne.n	800ad3a <ctl_recv+0x3e>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
 800ada0:	8922      	ldrh	r2, [r4, #8]
		if (tx->dst == addr) {
 800ada2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00e      	beq.n	800adc8 <ctl_recv+0xcc>
		if (obo && tx->nack_count == tx->seg_n + 1) {
 800adaa:	f3ca 33cf 	ubfx	r3, sl, #15, #16
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0c3      	beq.n	800ad3a <ctl_recv+0x3e>
 800adb2:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
 800adb6:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 800adba:	f003 031f 	and.w	r3, r3, #31
 800adbe:	3301      	adds	r3, #1
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d1ba      	bne.n	800ad3a <ctl_recv+0x3e>
			tx->dst = addr;
 800adc4:	f8a6 2050 	strh.w	r2, [r6, #80]	; 0x50
	*seq_auth = tx->seq_auth;
 800adc8:	e9cb 8900 	strd	r8, r9, [fp]
	if (!ack) {
 800adcc:	b92d      	cbnz	r5, 800adda <ctl_recv+0xde>
		seg_tx_complete(tx, -ECANCELED);
 800adce:	f06f 0147 	mvn.w	r1, #71	; 0x47
 800add2:	483f      	ldr	r0, [pc, #252]	; (800aed0 <ctl_recv+0x1d4>)
 800add4:	f7ff ff4e 	bl	800ac74 <seg_tx_complete>
 800add8:	e7cd      	b.n	800ad76 <ctl_recv+0x7a>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
 800adda:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
	return 32 - __builtin_clz(op);
 800adde:	fab5 f285 	clz	r2, r5
 800ade2:	f1c2 021f 	rsb	r2, r2, #31
 800ade6:	f003 031f 	and.w	r3, r3, #31
 800adea:	429a      	cmp	r2, r3
 800adec:	d8a5      	bhi.n	800ad3a <ctl_recv+0x3e>
	k_delayed_work_cancel(&tx->retransmit);
 800adee:	4839      	ldr	r0, [pc, #228]	; (800aed4 <ctl_recv+0x1d8>)
 800adf0:	f007 fb32 	bl	8012458 <k_delayed_work_cancel>
			tx->seg[bit - 1] = NULL;
 800adf4:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
 800adf8:	f04f 0901 	mov.w	r9, #1
	return __builtin_ffs(op);
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	fa95 f7a5 	rbit	r7, r5
 800ae02:	fab7 f787 	clz	r7, r7
 800ae06:	bf08      	it	eq
 800ae08:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
 800ae0c:	1c7c      	adds	r4, r7, #1
 800ae0e:	d106      	bne.n	800ae1e <ctl_recv+0x122>
	if (tx->nack_count) {
 800ae10:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
 800ae14:	b1ab      	cbz	r3, 800ae42 <ctl_recv+0x146>
		seg_tx_send_unacked(tx);
 800ae16:	482e      	ldr	r0, [pc, #184]	; (800aed0 <ctl_recv+0x1d4>)
 800ae18:	f7ff ff3a 	bl	800ac90 <seg_tx_send_unacked>
 800ae1c:	e78f      	b.n	800ad3e <ctl_recv+0x42>
		if (tx->seg[bit - 1]) {
 800ae1e:	eb06 0487 	add.w	r4, r6, r7, lsl #2
 800ae22:	6860      	ldr	r0, [r4, #4]
 800ae24:	b140      	cbz	r0, 800ae38 <ctl_recv+0x13c>
			net_buf_unref(tx->seg[bit - 1]);
 800ae26:	f006 fb4d 	bl	80114c4 <net_buf_unref>
			tx->nack_count--;
 800ae2a:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
			tx->seg[bit - 1] = NULL;
 800ae2e:	f8c4 8004 	str.w	r8, [r4, #4]
			tx->nack_count--;
 800ae32:	3b01      	subs	r3, #1
 800ae34:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		ack &= ~BIT(bit - 1);
 800ae38:	fa09 f707 	lsl.w	r7, r9, r7
 800ae3c:	ea25 0507 	bic.w	r5, r5, r7
 800ae40:	e7dc      	b.n	800adfc <ctl_recv+0x100>
		seg_tx_complete(tx, 0);
 800ae42:	4621      	mov	r1, r4
 800ae44:	4822      	ldr	r0, [pc, #136]	; (800aed0 <ctl_recv+0x1d4>)
 800ae46:	f7ff ff15 	bl	800ac74 <seg_tx_complete>
 800ae4a:	e778      	b.n	800ad3e <ctl_recv+0x42>
	if (buf->len < 3) {
 800ae4c:	8893      	ldrh	r3, [r2, #4]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	f67f af73 	bls.w	800ad3a <ctl_recv+0x3e>
	if (rx->dst != hb_sub_dst) {
 800ae54:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <ctl_recv+0x1dc>)
 800ae56:	8a02      	ldrh	r2, [r0, #16]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d18b      	bne.n	800ad76 <ctl_recv+0x7a>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f006 fbc3 	bl	80115ea <net_buf_simple_pull_u8>
 800ae64:	4606      	mov	r6, r0
	feat = net_buf_simple_pull_be16(buf);
 800ae66:	4628      	mov	r0, r5
 800ae68:	f006 fbcf 	bl	801160a <net_buf_simple_pull_be16>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800ae6c:	7aa2      	ldrb	r2, [r4, #10]
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
 800ae6e:	8a21      	ldrh	r1, [r4, #16]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800ae70:	f3c2 0206 	ubfx	r2, r2, #0, #7
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
 800ae74:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800ae78:	f1c2 0201 	rsb	r2, r2, #1
 800ae7c:	4432      	add	r2, r6
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
 800ae7e:	4603      	mov	r3, r0
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	8920      	ldrh	r0, [r4, #8]
 800ae84:	f003 fa9e 	bl	800e3c4 <bt_mesh_heartbeat>
 800ae88:	e775      	b.n	800ad76 <ctl_recv+0x7a>
			return bt_mesh_friend_poll(rx, buf);
 800ae8a:	4611      	mov	r1, r2
}
 800ae8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
 800ae90:	f004 bab6 	b.w	800f400 <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
 800ae94:	4611      	mov	r1, r2
}
 800ae96:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
 800ae9a:	f004 bb29 	b.w	800f4f0 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
 800ae9e:	4611      	mov	r1, r2
}
 800aea0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
 800aea4:	f004 b9e8 	b.w	800f278 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
 800aea8:	4611      	mov	r1, r2
}
 800aeaa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
 800aeae:	f004 baed 	b.w	800f48c <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
 800aeb2:	4611      	mov	r1, r2
}
 800aeb4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
 800aeb8:	f004 ba29 	b.w	800f30e <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
 800aebc:	4611      	mov	r1, r2
}
 800aebe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
 800aec2:	f004 ba5e 	b.w	800f382 <bt_mesh_friend_sub_rem>
	return -ENOENT;
 800aec6:	f06f 0401 	mvn.w	r4, #1
 800aeca:	e738      	b.n	800ad3e <ctl_recv+0x42>
 800aecc:	20005b88 	.word	0x20005b88
 800aed0:	20000d00 	.word	0x20000d00
 800aed4:	20000d5c 	.word	0x20000d5c
 800aed8:	20000cfa 	.word	0x20000cfa

0800aedc <seg_retransmit>:
	seg_tx_send_unacked(tx);
 800aedc:	385c      	subs	r0, #92	; 0x5c
 800aede:	f7ff bed7 	b.w	800ac90 <seg_tx_send_unacked>
	...

0800aee4 <seg_sent>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800aee4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aee8:	315c      	adds	r1, #92	; 0x5c
 800aeea:	4801      	ldr	r0, [pc, #4]	; (800aef0 <seg_sent+0xc>)
 800aeec:	f007 bb00 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 800aef0:	20001498 	.word	0x20001498

0800aef4 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
 800aef4:	4b01      	ldr	r3, [pc, #4]	; (800aefc <bt_mesh_set_hb_sub_dst+0x8>)
 800aef6:	8018      	strh	r0, [r3, #0]
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	20000cfa 	.word	0x20000cfa

0800af00 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
 800af00:	4b03      	ldr	r3, [pc, #12]	; (800af10 <bt_mesh_tx_in_progress+0x10>)
 800af02:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
}
 800af06:	3000      	adds	r0, #0
 800af08:	bf18      	it	ne
 800af0a:	2001      	movne	r0, #1
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20000d00 	.word	0x20000d00

0800af14 <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <bt_mesh_app_key_find+0x40>)
 800af16:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
 800af1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af1e:	4291      	cmp	r1, r2
 800af20:	461a      	mov	r2, r3
 800af22:	d003      	beq.n	800af2c <bt_mesh_app_key_find+0x18>
 800af24:	f8b3 1166 	ldrh.w	r1, [r3, #358]	; 0x166
 800af28:	4281      	cmp	r1, r0
 800af2a:	d00d      	beq.n	800af48 <bt_mesh_app_key_find+0x34>
 800af2c:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
 800af30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af34:	4299      	cmp	r1, r3
 800af36:	d00a      	beq.n	800af4e <bt_mesh_app_key_find+0x3a>
 800af38:	f8b2 218e 	ldrh.w	r2, [r2, #398]	; 0x18e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <bt_mesh_app_key_find+0x44>)
 800af3e:	4282      	cmp	r2, r0
 800af40:	bf0c      	ite	eq
 800af42:	4618      	moveq	r0, r3
 800af44:	2000      	movne	r0, #0
 800af46:	4770      	bx	lr
 800af48:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800af4c:	4770      	bx	lr
	return NULL;
 800af4e:	2000      	movs	r0, #0
}
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20005b88 	.word	0x20005b88
 800af58:	20005d14 	.word	0x20005d14

0800af5c <bt_mesh_trans_send>:
{
 800af5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af60:	4604      	mov	r4, r0
 800af62:	b087      	sub	sp, #28
	if (net_buf_simple_tailroom(msg) < 4) {
 800af64:	4608      	mov	r0, r1
{
 800af66:	460d      	mov	r5, r1
 800af68:	4617      	mov	r7, r2
 800af6a:	4698      	mov	r8, r3
	if (net_buf_simple_tailroom(msg) < 4) {
 800af6c:	f006 fb6f 	bl	801164e <net_buf_simple_tailroom>
 800af70:	2803      	cmp	r0, #3
 800af72:	d804      	bhi.n	800af7e <bt_mesh_trans_send+0x22>
		return -EINVAL;
 800af74:	f06f 0015 	mvn.w	r0, #21
}
 800af78:	b007      	add	sp, #28
 800af7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > 11) {
 800af7e:	88ab      	ldrh	r3, [r5, #4]
 800af80:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800af84:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
 800af86:	bf88      	it	hi
 800af88:	f899 3006 	ldrbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800af8c:	f8b9 0002 	ldrh.w	r0, [r9, #2]
		tx->ctx->send_rel = 1;
 800af90:	bf84      	itt	hi
 800af92:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
 800af96:	f889 3006 	strbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800af9a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800af9e:	4298      	cmp	r0, r3
 800afa0:	d148      	bne.n	800b034 <bt_mesh_trans_send+0xd8>
		tx->aid = 0;
 800afa2:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
 800afa4:	4e36      	ldr	r6, [pc, #216]	; (800b080 <bt_mesh_trans_send+0x124>)
		tx->aid = 0;
 800afa6:	f36f 0387 	bfc	r3, #2, #6
 800afaa:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
 800afac:	f999 3006 	ldrsb.w	r3, [r9, #6]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	db54      	blt.n	800b05e <bt_mesh_trans_send+0x102>
		tx->aszmic = 0;
 800afb4:	7ae3      	ldrb	r3, [r4, #11]
 800afb6:	f36f 0341 	bfc	r3, #1, #1
		tx->aszmic = 1;
 800afba:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	8898      	ldrh	r0, [r3, #4]
 800afc0:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800afc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afc8:	d252      	bcs.n	800b070 <bt_mesh_trans_send+0x114>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
 800afca:	f003 fd15 	bl	800e9f8 <bt_mesh_label_uuid_get>
				  BT_MESH_NET_IVI_TX);
 800afce:	4b2d      	ldr	r3, [pc, #180]	; (800b084 <bt_mesh_trans_send+0x128>)
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800afd0:	f8d4 c004 	ldr.w	ip, [r4, #4]
				  BT_MESH_NET_IVI_TX);
 800afd4:	79da      	ldrb	r2, [r3, #7]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800afd6:	6819      	ldr	r1, [r3, #0]
 800afd8:	f8bc 9002 	ldrh.w	r9, [ip, #2]
				  tx->aszmic, msg, ad, tx->src,
 800afdc:	f894 e00b 	ldrb.w	lr, [r4, #11]
				  BT_MESH_NET_IVI_TX);
 800afe0:	f002 0201 	and.w	r2, r2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800afe4:	1a8a      	subs	r2, r1, r2
 800afe6:	9204      	str	r2, [sp, #16]
				  tx->ctx->addr, bt_mesh.seq,
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f3c3 0317 	ubfx	r3, r3, #0, #24
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800afee:	9303      	str	r3, [sp, #12]
 800aff0:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	8923      	ldrh	r3, [r4, #8]
 800aff8:	e88d 0009 	stmia.w	sp, {r0, r3}
 800affc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800b000:	eba9 0000 	sub.w	r0, r9, r0
 800b004:	4241      	negs	r1, r0
 800b006:	4141      	adcs	r1, r0
 800b008:	462b      	mov	r3, r5
 800b00a:	f3ce 0240 	ubfx	r2, lr, #1, #1
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 ffc6 	bl	800bfa0 <bt_mesh_app_encrypt>
	if (err) {
 800b014:	2800      	cmp	r0, #0
 800b016:	d1af      	bne.n	800af78 <bt_mesh_trans_send+0x1c>
	if (tx->ctx->send_rel) {
 800b018:	6863      	ldr	r3, [r4, #4]
 800b01a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b01e:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
 800b020:	463a      	mov	r2, r7
 800b022:	4643      	mov	r3, r8
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
 800b028:	da24      	bge.n	800b074 <bt_mesh_trans_send+0x118>
}
 800b02a:	b007      	add	sp, #28
 800b02c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_seg(tx, msg, cb, cb_data);
 800b030:	f7ff bd28 	b.w	800aa84 <send_seg>
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
 800b034:	f7ff ff6e 	bl	800af14 <bt_mesh_app_key_find>
		if (!app_key) {
 800b038:	2800      	cmp	r0, #0
 800b03a:	d09b      	beq.n	800af74 <bt_mesh_trans_send+0x18>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	7fdb      	ldrb	r3, [r3, #31]
 800b040:	2b02      	cmp	r3, #2
 800b042:	7ae3      	ldrb	r3, [r4, #11]
 800b044:	d108      	bne.n	800b058 <bt_mesh_trans_send+0xfc>
 800b046:	7902      	ldrb	r2, [r0, #4]
 800b048:	b132      	cbz	r2, 800b058 <bt_mesh_trans_send+0xfc>
			tx->aid = app_key->keys[1].id;
 800b04a:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
 800b04c:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
 800b050:	f362 0387 	bfi	r3, r2, #2, #6
 800b054:	72e3      	strb	r3, [r4, #11]
 800b056:	e7a9      	b.n	800afac <bt_mesh_trans_send+0x50>
			key = app_key->keys[0].val;
 800b058:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
 800b05a:	7942      	ldrb	r2, [r0, #5]
 800b05c:	e7f8      	b.n	800b050 <bt_mesh_trans_send+0xf4>
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
 800b05e:	4628      	mov	r0, r5
 800b060:	f006 faf5 	bl	801164e <net_buf_simple_tailroom>
 800b064:	2807      	cmp	r0, #7
 800b066:	d9a5      	bls.n	800afb4 <bt_mesh_trans_send+0x58>
		tx->aszmic = 1;
 800b068:	7ae3      	ldrb	r3, [r4, #11]
 800b06a:	f043 0302 	orr.w	r3, r3, #2
 800b06e:	e7a4      	b.n	800afba <bt_mesh_trans_send+0x5e>
		ad = NULL;
 800b070:	2000      	movs	r0, #0
 800b072:	e7ac      	b.n	800afce <bt_mesh_trans_send+0x72>
}
 800b074:	b007      	add	sp, #28
 800b076:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_unseg(tx, msg, cb, cb_data);
 800b07a:	f7ff bbb1 	b.w	800a7e0 <send_unseg>
 800b07e:	bf00      	nop
 800b080:	20005cdc 	.word	0x20005cdc
 800b084:	20005b88 	.word	0x20005b88

0800b088 <bt_mesh_ctl_send>:
{
 800b088:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	468a      	mov	sl, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
 800b08e:	7a81      	ldrb	r1, [r0, #10]
{
 800b090:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b092:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b094:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b096:	4690      	mov	r8, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
 800b098:	08ca      	lsrs	r2, r1, #3
 800b09a:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800b09c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b0a0:	0052      	lsls	r2, r2, #1
{
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800b0a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f001 0107 	and.w	r1, r1, #7
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7fe f925 	bl	8009300 <bt_mesh_adv_create>
	if (!buf) {
 800b0b6:	4683      	mov	fp, r0
 800b0b8:	b358      	cbz	r0, 800b112 <bt_mesh_ctl_send+0x8a>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
 800b0ba:	2109      	movs	r1, #9
 800b0bc:	f006 f9a5 	bl	801140a <net_buf_reserve>
	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
 800b0c0:	f10b 0308 	add.w	r3, fp, #8
 800b0c4:	f00a 017f 	and.w	r1, sl, #127	; 0x7f
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	469a      	mov	sl, r3
 800b0cc:	f006 fa29 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
 800b0d0:	464a      	mov	r2, r9
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	4650      	mov	r0, sl
 800b0d6:	f006 fa1b 	bl	8011510 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
 800b0da:	4653      	mov	r3, sl
 800b0dc:	463a      	mov	r2, r7
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f004 fbab 	bl	800f83c <bt_mesh_friend_enqueue_tx>
 800b0e6:	b158      	cbz	r0, 800b100 <bt_mesh_ctl_send+0x78>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800b0e8:	6863      	ldr	r3, [r4, #4]
					      seq_auth, &buf->b) &&
 800b0ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dd06      	ble.n	800b100 <bt_mesh_ctl_send+0x78>
			net_buf_unref(buf);
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f006 f9e6 	bl	80114c4 <net_buf_unref>
			return 0;
 800b0f8:	2000      	movs	r0, #0
}
 800b0fa:	b001      	add	sp, #4
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800b100:	4633      	mov	r3, r6
 800b102:	462a      	mov	r2, r5
 800b104:	4659      	mov	r1, fp
 800b106:	4620      	mov	r0, r4
}
 800b108:	b001      	add	sp, #4
 800b10a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800b10e:	f7fe bfcf 	b.w	800a0b0 <bt_mesh_net_send>
		return -ENOBUFS;
 800b112:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b116:	e7f0      	b.n	800b0fa <bt_mesh_ctl_send+0x72>

0800b118 <send_ack>:
{
 800b118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b11a:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
 800b11c:	f8b0 e01c 	ldrh.w	lr, [r0, #28]
{
 800b120:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
	struct bt_mesh_msg_ctx ctx = {
 800b124:	f8ad e01c 	strh.w	lr, [sp, #28]
 800b128:	2700      	movs	r7, #0
{
 800b12a:	460c      	mov	r4, r1
	struct bt_mesh_msg_ctx ctx = {
 800b12c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800b130:	a907      	add	r1, sp, #28
 800b132:	9708      	str	r7, [sp, #32]
{
 800b134:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	struct bt_mesh_msg_ctx ctx = {
 800b136:	f8ad e01e 	strh.w	lr, [sp, #30]
 800b13a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b13e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	struct bt_mesh_net_tx tx = {
 800b142:	970b      	str	r7, [sp, #44]	; 0x2c
 800b144:	9009      	str	r0, [sp, #36]	; 0x24
 800b146:	910a      	str	r1, [sp, #40]	; 0x28
 800b148:	b386      	cbz	r6, 800b1ac <send_ack+0x94>
 800b14a:	f001 f933 	bl	800c3b4 <bt_mesh_primary_addr>
 800b14e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
 800b152:	f003 f96d 	bl	800e430 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
 800b156:	b224      	sxth	r4, r4
 800b158:	2c00      	cmp	r4, #0
	struct bt_mesh_net_tx tx = {
 800b15a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
 800b15e:	dd27      	ble.n	800b1b0 <send_ack+0x98>
	u16_t seq_zero = *seq_auth & 0x1fff;
 800b160:	9b12      	ldr	r3, [sp, #72]	; 0x48
	dst[1] = val;
 800b162:	f88d 5019 	strb.w	r5, [sp, #25]
 800b166:	881a      	ldrh	r2, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
 800b168:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 800b16c:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800b170:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
 800b174:	b21b      	sxth	r3, r3
	dst[0] = val >> 8;
 800b176:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[1] = val;
 800b17a:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be16(val >> 16, dst);
 800b17e:	0c2b      	lsrs	r3, r5, #16
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
 800b180:	2100      	movs	r1, #0
	dst[0] = val >> 8;
 800b182:	f88d 2014 	strb.w	r2, [sp, #20]
	dst[1] = val;
 800b186:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[0] = val >> 8;
 800b18a:	0a1a      	lsrs	r2, r3, #8
 800b18c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b190:	f88d 2016 	strb.w	r2, [sp, #22]
 800b194:	f88d 3018 	strb.w	r3, [sp, #24]
 800b198:	9102      	str	r1, [sp, #8]
 800b19a:	9101      	str	r1, [sp, #4]
 800b19c:	9100      	str	r1, [sp, #0]
 800b19e:	2306      	movs	r3, #6
 800b1a0:	aa05      	add	r2, sp, #20
 800b1a2:	a809      	add	r0, sp, #36	; 0x24
 800b1a4:	f7ff ff70 	bl	800b088 <bt_mesh_ctl_send>
}
 800b1a8:	b00d      	add	sp, #52	; 0x34
 800b1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	e7ce      	b.n	800b14e <send_ack+0x36>
		return 0;
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	e7f9      	b.n	800b1a8 <send_ack+0x90>

0800b1b4 <seg_ack>:
}

static void seg_ack(struct k_work *work)
{
 800b1b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b1b6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 800b1b8:	f006 fe68 	bl	8011e8c <_impl_k_uptime_get_32>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
 800b1bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b1c0:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
 800b1c4:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
 800b1c8:	1ac0      	subs	r0, r0, r3
 800b1ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	f814 0c10 	ldrb.w	r0, [r4, #-16]
 800b1d4:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
		BT_WARN("Incomplete timer expired");
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
 800b1d8:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 800b1dc:	f1a4 0518 	sub.w	r5, r4, #24
 800b1e0:	9002      	str	r0, [sp, #8]
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
 800b1e2:	d90e      	bls.n	800b202 <seg_ack+0x4e>
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	9001      	str	r0, [sp, #4]
 800b1e8:	9500      	str	r5, [sp, #0]
 800b1ea:	f854 0c20 	ldr.w	r0, [r4, #-32]
 800b1ee:	f7ff ff93 	bl	800b118 <send_ack>
 800b1f2:	f1a4 0620 	sub.w	r6, r4, #32
			 &rx->seq_auth, 0, rx->obo);
		seg_rx_reset(rx);
 800b1f6:	4630      	mov	r0, r6

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
 800b1f8:	b004      	add	sp, #16
 800b1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx);
 800b1fe:	f7ff bbe5 	b.w	800a9cc <seg_rx_reset>
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
 800b202:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800b206:	9001      	str	r0, [sp, #4]
 800b208:	9500      	str	r5, [sp, #0]
 800b20a:	f854 0c20 	ldr.w	r0, [r4, #-32]
 800b20e:	f7ff ff83 	bl	800b118 <send_ack>
	to = K_MSEC(150 + (50 * rx->ttl));
 800b212:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b216:	f854 0c08 	ldr.w	r0, [r4, #-8]
	to = K_MSEC(150 + (50 * rx->ttl));
 800b21a:	2232      	movs	r2, #50	; 0x32
 800b21c:	2596      	movs	r5, #150	; 0x96
 800b21e:	fb12 5503 	smlabb	r5, r2, r3, r5
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b222:	f7f5 f97f 	bl	8000524 <__popcountsi2>
 800b226:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	1a18      	subs	r0, r3, r0
 800b230:	2364      	movs	r3, #100	; 0x64
 800b232:	fb00 3303 	mla	r3, r0, r3, r3
 800b236:	195a      	adds	r2, r3, r5
 800b238:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800b23c:	4804      	ldr	r0, [pc, #16]	; (800b250 <seg_ack+0x9c>)
 800b23e:	bfb8      	it	lt
 800b240:	f44f 72c8 	movlt.w	r2, #400	; 0x190
 800b244:	4621      	mov	r1, r4
}
 800b246:	b004      	add	sp, #16
 800b248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b24c:	f007 b950 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 800b250:	20001498 	.word	0x20001498

0800b254 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
 800b258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 800b25c:	b08d      	sub	sp, #52	; 0x34
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
 800b25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b262:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
	struct net_buf_simple_state state;
	int err;

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
 800b266:	680b      	ldr	r3, [r1, #0]
{
 800b268:	4605      	mov	r5, r0
 800b26a:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
 800b26c:	8b98      	ldrh	r0, [r3, #28]
 800b26e:	8a09      	ldrh	r1, [r1, #16]
 800b270:	f004 fa58 	bl	800f724 <bt_mesh_friend_match>
 800b274:	7ca3      	ldrb	r3, [r4, #18]
 800b276:	f360 13c7 	bfi	r3, r0, #7, #1
 800b27a:	74a3      	strb	r3, [r4, #18]

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
 800b27c:	2109      	movs	r1, #9
 800b27e:	4628      	mov	r0, r5
 800b280:	f006 f9ab 	bl	80115da <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
 800b284:	4628      	mov	r0, r5
 800b286:	f006 f9dd 	bl	8011644 <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
 800b28a:	682f      	ldr	r7, [r5, #0]
 800b28c:	9008      	str	r0, [sp, #32]
 800b28e:	f997 3000 	ldrsb.w	r3, [r7]
	state->len = buf->len;
 800b292:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	f280 816f 	bge.w	800b57a <bt_mesh_trans_recv+0x326>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
 800b29c:	7ca6      	ldrb	r6, [r4, #18]
 800b29e:	f016 06c0 	ands.w	r6, r6, #192	; 0xc0
 800b2a2:	f000 812d 	beq.w	800b500 <bt_mesh_trans_recv+0x2ac>
	if (buf->len < 5) {
 800b2a6:	f1bb 0f04 	cmp.w	fp, #4
 800b2aa:	d804      	bhi.n	800b2b6 <bt_mesh_trans_recv+0x62>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b2ac:	f04f 0a00 	mov.w	sl, #0
		return -EINVAL;
 800b2b0:	f06f 0615 	mvn.w	r6, #21
 800b2b4:	e108      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>
	net_buf_simple_pull(buf, 1);
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f006 f98e 	bl	80115da <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f006 f9a3 	bl	801160a <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
 800b2c4:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
 800b2c6:	f3c0 098c 	ubfx	r9, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f006 f98d 	bl	80115ea <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
 800b2d0:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
 800b2d4:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
 800b2d8:	b2f6      	uxtb	r6, r6
	seg_n &= 0x1f;
 800b2da:	f000 081f 	and.w	r8, r0, #31
	if (seg_o > seg_n) {
 800b2de:	4546      	cmp	r6, r8
	seg_n = net_buf_simple_pull_u8(buf);
 800b2e0:	4682      	mov	sl, r0
	if (seg_o > seg_n) {
 800b2e2:	d8e3      	bhi.n	800b2ac <bt_mesh_trans_recv+0x58>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b2e4:	4abd      	ldr	r2, [pc, #756]	; (800b5dc <bt_mesh_trans_recv+0x388>)
 800b2e6:	f894 c012 	ldrb.w	ip, [r4, #18]
 800b2ea:	6811      	ldr	r1, [r2, #0]
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b2ec:	f8b4 e008 	ldrh.w	lr, [r4, #8]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b2f0:	f00c 0301 	and.w	r3, ip, #1
 800b2f4:	1ac9      	subs	r1, r1, r3
 800b2f6:	0a0b      	lsrs	r3, r1, #8
 800b2f8:	9305      	str	r3, [sp, #20]
 800b2fa:	060b      	lsls	r3, r1, #24
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	68e1      	ldr	r1, [r4, #12]
 800b300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b304:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800b308:	f021 011f 	bic.w	r1, r1, #31
 800b30c:	ea42 0201 	orr.w	r2, r2, r1
 800b310:	ea42 0209 	orr.w	r2, r2, r9
 800b314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b318:	4619      	mov	r1, r3
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b31a:	4bb1      	ldr	r3, [pc, #708]	; (800b5e0 <bt_mesh_trans_recv+0x38c>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b31c:	4610      	mov	r0, r2
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b31e:	8a9a      	ldrh	r2, [r3, #20]
 800b320:	9204      	str	r2, [sp, #16]
 800b322:	4596      	cmp	lr, r2
 800b324:	4699      	mov	r9, r3
 800b326:	d113      	bne.n	800b350 <bt_mesh_trans_recv+0xfc>
 800b328:	8adb      	ldrh	r3, [r3, #22]
 800b32a:	9307      	str	r3, [sp, #28]
 800b32c:	9a07      	ldr	r2, [sp, #28]
 800b32e:	8a23      	ldrh	r3, [r4, #16]
 800b330:	4293      	cmp	r3, r2
 800b332:	d10d      	bne.n	800b350 <bt_mesh_trans_recv+0xfc>
		if (rx->seq_auth == *seq_auth) {
 800b334:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 800b338:	4299      	cmp	r1, r3
 800b33a:	bf08      	it	eq
 800b33c:	4290      	cmpeq	r0, r2
 800b33e:	f000 815b 	beq.w	800b5f8 <bt_mesh_trans_recv+0x3a4>
		if (rx->in_use) {
 800b342:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b346:	0659      	lsls	r1, r3, #25
 800b348:	d502      	bpl.n	800b350 <bt_mesh_trans_recv+0xfc>
			seg_rx_reset(rx);
 800b34a:	4648      	mov	r0, r9
 800b34c:	f7ff fb3e 	bl	800a9cc <seg_rx_reset>
		if (rx->in_use) {
 800b350:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b354:	f013 0140 	ands.w	r1, r3, #64	; 0x40
 800b358:	f040 813b 	bne.w	800b5d2 <bt_mesh_trans_recv+0x37e>
		rx->in_use = 1;
 800b35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b360:	f889 3010 	strb.w	r3, [r9, #16]
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
 800b364:	7ca2      	ldrb	r2, [r4, #18]
		rx->ctl = net_rx->ctl;
 800b366:	f899 0010 	ldrb.w	r0, [r9, #16]
	buf->data = buf->__buf + reserve_head;
 800b36a:	4b9e      	ldr	r3, [pc, #632]	; (800b5e4 <bt_mesh_trans_recv+0x390>)
 800b36c:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
 800b370:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		rx->sub = net_rx->sub;
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	f8c9 3000 	str.w	r3, [r9]
		rx->ctl = net_rx->ctl;
 800b37a:	f362 1045 	bfi	r0, r2, #5, #1
		rx->seq_auth = *seq_auth;
 800b37e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b382:	e9c9 2302 	strd	r2, r3, [r9, #8]
		rx->seg_n = seg_n;
 800b386:	4603      	mov	r3, r0
 800b388:	f36a 0304 	bfi	r3, sl, #0, #5
 800b38c:	f889 3010 	strb.w	r3, [r9, #16]
	buf->len = 0;
 800b390:	f8a9 104c 	strh.w	r1, [r9, #76]	; 0x4c
		rx->hdr = *hdr;
 800b394:	783b      	ldrb	r3, [r7, #0]
 800b396:	f889 3011 	strb.w	r3, [r9, #17]
		rx->ttl = net_rx->ctx.send_ttl;
 800b39a:	7ae3      	ldrb	r3, [r4, #11]
 800b39c:	f889 3012 	strb.w	r3, [r9, #18]
		rx->src = net_rx->ctx.addr;
 800b3a0:	8923      	ldrh	r3, [r4, #8]
 800b3a2:	f8a9 3014 	strh.w	r3, [r9, #20]
		rx->dst = net_rx->dst;
 800b3a6:	8a23      	ldrh	r3, [r4, #16]
 800b3a8:	f8a9 3016 	strh.w	r3, [r9, #22]
	rx->obo = net_rx->friend_match;
 800b3ac:	7ca3      	ldrb	r3, [r4, #18]
 800b3ae:	f899 2010 	ldrb.w	r2, [r9, #16]
		rx->block = 0;
 800b3b2:	f8c9 1018 	str.w	r1, [r9, #24]
	rx->obo = net_rx->friend_match;
 800b3b6:	09db      	lsrs	r3, r3, #7
 800b3b8:	f363 12c7 	bfi	r2, r3, #7, #1
 800b3bc:	f889 2010 	strb.w	r2, [r9, #16]
	if (BIT(seg_o) & rx->block) {
 800b3c0:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800b3c4:	fa21 fa06 	lsr.w	sl, r1, r6
 800b3c8:	f01a 0a01 	ands.w	sl, sl, #1
 800b3cc:	f040 80fc 	bne.w	800b5c8 <bt_mesh_trans_recv+0x374>
	if (seg_o == seg_n) {
 800b3d0:	4546      	cmp	r6, r8
 800b3d2:	f899 0010 	ldrb.w	r0, [r9, #16]
 800b3d6:	f040 8097 	bne.w	800b508 <bt_mesh_trans_recv+0x2b4>
		return 8;
 800b3da:	f010 0f20 	tst.w	r0, #32
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b3de:	88aa      	ldrh	r2, [r5, #4]
		return 8;
 800b3e0:	bf0c      	ite	eq
 800b3e2:	230c      	moveq	r3, #12
 800b3e4:	2308      	movne	r3, #8
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b3e6:	fb03 2306 	mla	r3, r3, r6, r2
 800b3ea:	b29b      	uxth	r3, r3
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
 800b3ec:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b3f0:	f8a9 304c 	strh.w	r3, [r9, #76]	; 0x4c
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
 800b3f4:	d857      	bhi.n	800b4a6 <bt_mesh_trans_recv+0x252>
 800b3f6:	f006 fd49 	bl	8011e8c <_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
 800b3fa:	f8c9 001c 	str.w	r0, [r9, #28]
 *
 * @return Remaining time (in milliseconds).
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return _timeout_remaining_get(&work->timeout);
 800b3fe:	487a      	ldr	r0, [pc, #488]	; (800b5e8 <bt_mesh_trans_recv+0x394>)
 800b400:	f007 f9aa 	bl	8012758 <_timeout_remaining_get>
	if (!k_delayed_work_remaining_get(&rx->ack) &&
 800b404:	b9e8      	cbnz	r0, 800b442 <bt_mesh_trans_recv+0x1ee>
	to = K_MSEC(150 + (50 * rx->ttl));
 800b406:	f899 2012 	ldrb.w	r2, [r9, #18]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b40a:	f8d9 0018 	ldr.w	r0, [r9, #24]
	to = K_MSEC(150 + (50 * rx->ttl));
 800b40e:	2196      	movs	r1, #150	; 0x96
 800b410:	f04f 0a32 	mov.w	sl, #50	; 0x32
 800b414:	fb1a 1a02 	smlabb	sl, sl, r2, r1
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b418:	f7f5 f884 	bl	8000524 <__popcountsi2>
 800b41c:	f899 3010 	ldrb.w	r3, [r9, #16]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800b420:	4972      	ldr	r1, [pc, #456]	; (800b5ec <bt_mesh_trans_recv+0x398>)
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	1a18      	subs	r0, r3, r0
 800b428:	2364      	movs	r3, #100	; 0x64
 800b42a:	fb00 3303 	mla	r3, r0, r3, r3
 800b42e:	eb03 020a 	add.w	r2, r3, sl
 800b432:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800b436:	bfb8      	it	lt
 800b438:	f44f 72c8 	movlt.w	r2, #400	; 0x190
 800b43c:	486c      	ldr	r0, [pc, #432]	; (800b5f0 <bt_mesh_trans_recv+0x39c>)
 800b43e:	f007 f857 	bl	80124f0 <k_delayed_work_submit_to_queue>
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b442:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b446:	88aa      	ldrh	r2, [r5, #4]
 800b448:	6829      	ldr	r1, [r5, #0]
		return 8;
 800b44a:	f013 0f20 	tst.w	r3, #32
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b44e:	4b65      	ldr	r3, [pc, #404]	; (800b5e4 <bt_mesh_trans_recv+0x390>)
		return 8;
 800b450:	bf0c      	ite	eq
 800b452:	200c      	moveq	r0, #12
 800b454:	2008      	movne	r0, #8
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b456:	fb06 3000 	mla	r0, r6, r0, r3
 800b45a:	f7f5 fa11 	bl	8000880 <memcpy>
	rx->block |= BIT(seg_o);
 800b45e:	f04f 0a01 	mov.w	sl, #1
 800b462:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b466:	fa0a f606 	lsl.w	r6, sl, r6
 800b46a:	4333      	orrs	r3, r6
 800b46c:	f8c9 3018 	str.w	r3, [r9, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
 800b470:	eb08 020a 	add.w	r2, r8, sl
 800b474:	2001      	movs	r0, #1
 800b476:	2100      	movs	r1, #0
	rx->block |= BIT(seg_o);
 800b478:	9304      	str	r3, [sp, #16]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
 800b47a:	f7f4 ffdf 	bl	800043c <__aeabi_llsl>
 800b47e:	9b04      	ldr	r3, [sp, #16]
 800b480:	3801      	subs	r0, #1
 800b482:	4283      	cmp	r3, r0
 800b484:	f040 80a3 	bne.w	800b5ce <bt_mesh_trans_recv+0x37a>
	if (net_rx->local_match && is_replay(net_rx)) {
 800b488:	7ca3      	ldrb	r3, [r4, #18]
 800b48a:	065a      	lsls	r2, r3, #25
 800b48c:	d546      	bpl.n	800b51c <bt_mesh_trans_recv+0x2c8>
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff f96c 	bl	800a76c <is_replay>
 800b494:	2800      	cmp	r0, #0
 800b496:	d041      	beq.n	800b51c <bt_mesh_trans_recv+0x2c8>
		rx->block &= ~BIT(seg_o);
 800b498:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b49c:	ea23 0606 	bic.w	r6, r3, r6
 800b4a0:	f8c9 6018 	str.w	r6, [r9, #24]
 800b4a4:	e702      	b.n	800b2ac <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b4a6:	09c0      	lsrs	r0, r0, #7
 800b4a8:	9002      	str	r0, [sp, #8]
 800b4aa:	a80a      	add	r0, sp, #40	; 0x28
 800b4ac:	7ae3      	ldrb	r3, [r4, #11]
 800b4ae:	8922      	ldrh	r2, [r4, #8]
 800b4b0:	8a21      	ldrh	r1, [r4, #16]
 800b4b2:	9000      	str	r0, [sp, #0]
 800b4b4:	f8cd a004 	str.w	sl, [sp, #4]
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	f7ff fe2d 	bl	800b118 <send_ack>
			seg_rx_reset(rx);
 800b4be:	4848      	ldr	r0, [pc, #288]	; (800b5e0 <bt_mesh_trans_recv+0x38c>)
 800b4c0:	f7ff fa84 	bl	800a9cc <seg_rx_reset>
			return -EMSGSIZE;
 800b4c4:	f06f 0623 	mvn.w	r6, #35	; 0x23
	buf->data = buf->__buf + state->offset;
 800b4c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	buf->len = state->len;
 800b4cc:	f8a5 b004 	strh.w	fp, [r5, #4]
	buf->data = buf->__buf + state->offset;
 800b4d0:	f105 0308 	add.w	r3, r5, #8
 800b4d4:	fa13 f382 	uxtah	r3, r3, r2
 800b4d8:	602b      	str	r3, [r5, #0]
		bt_mesh_lpn_msg_received(rx);
	}

	net_buf_simple_restore(buf, &state);

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
 800b4da:	f994 3012 	ldrsb.w	r3, [r4, #18]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	da0e      	bge.n	800b500 <bt_mesh_trans_recv+0x2ac>
 800b4e2:	b96e      	cbnz	r6, 800b500 <bt_mesh_trans_recv+0x2ac>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
 800b4e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b4e8:	3101      	adds	r1, #1
 800b4ea:	bf08      	it	eq
 800b4ec:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL, buf);
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	bf0c      	ite	eq
 800b4f4:	4632      	moveq	r2, r6
		} else {
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
 800b4f6:	aa0a      	addne	r2, sp, #40	; 0x28
 800b4f8:	4651      	mov	r1, sl
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f004 f928 	bl	800f750 <bt_mesh_friend_enqueue_rx>
		}
	}

	return err;
}
 800b500:	4630      	mov	r0, r6
 800b502:	b00d      	add	sp, #52	; 0x34
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
 800b508:	f010 0f20 	tst.w	r0, #32
		if (buf->len != seg_len(rx->ctl)) {
 800b50c:	88aa      	ldrh	r2, [r5, #4]
 800b50e:	bf0c      	ite	eq
 800b510:	230c      	moveq	r3, #12
 800b512:	2308      	movne	r3, #8
 800b514:	429a      	cmp	r2, r3
 800b516:	f43f af6e 	beq.w	800b3f6 <bt_mesh_trans_recv+0x1a2>
 800b51a:	e6c7      	b.n	800b2ac <bt_mesh_trans_recv+0x58>
	net_rx->seq = (rx->seq_auth & 0xffffff);
 800b51c:	f8d9 3008 	ldr.w	r3, [r9, #8]
	k_delayed_work_cancel(&rx->ack);
 800b520:	4832      	ldr	r0, [pc, #200]	; (800b5ec <bt_mesh_trans_recv+0x398>)
	net_rx->seq = (rx->seq_auth & 0xffffff);
 800b522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b526:	60e3      	str	r3, [r4, #12]
	k_delayed_work_cancel(&rx->ack);
 800b528:	f006 ff96 	bl	8012458 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
 800b52c:	f899 0010 	ldrb.w	r0, [r9, #16]
	send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b530:	7ae3      	ldrb	r3, [r4, #11]
 800b532:	8a21      	ldrh	r1, [r4, #16]
 800b534:	8922      	ldrh	r2, [r4, #8]
 800b536:	09c0      	lsrs	r0, r0, #7
 800b538:	9002      	str	r0, [sp, #8]
 800b53a:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800b53e:	9001      	str	r0, [sp, #4]
 800b540:	ae0a      	add	r6, sp, #40	; 0x28
 800b542:	9600      	str	r6, [sp, #0]
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	f7ff fde7 	bl	800b118 <send_ack>
	if (net_rx->ctl) {
 800b54a:	7ca3      	ldrb	r3, [r4, #18]
 800b54c:	7839      	ldrb	r1, [r7, #0]
 800b54e:	f013 0f08 	tst.w	r3, #8
 800b552:	d00b      	beq.n	800b56c <bt_mesh_trans_recv+0x318>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
 800b554:	4633      	mov	r3, r6
 800b556:	4a27      	ldr	r2, [pc, #156]	; (800b5f4 <bt_mesh_trans_recv+0x3a0>)
 800b558:	4620      	mov	r0, r4
 800b55a:	f7ff fbcf 	bl	800acfc <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
 800b55e:	4606      	mov	r6, r0
	seg_rx_reset(rx);
 800b560:	481f      	ldr	r0, [pc, #124]	; (800b5e0 <bt_mesh_trans_recv+0x38c>)
 800b562:	f7ff fa33 	bl	800a9cc <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
 800b566:	f04f 0a02 	mov.w	sl, #2
 800b56a:	e7ad      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
 800b56c:	787a      	ldrb	r2, [r7, #1]
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <bt_mesh_trans_recv+0x3a0>)
 800b570:	09d2      	lsrs	r2, r2, #7
 800b572:	4620      	mov	r0, r4
 800b574:	f7ff f982 	bl	800a87c <sdu_recv>
 800b578:	e7f1      	b.n	800b55e <bt_mesh_trans_recv+0x30a>
	if (buf->len < 1) {
 800b57a:	f1bb 0f00 	cmp.w	fp, #0
 800b57e:	f43f ae95 	beq.w	800b2ac <bt_mesh_trans_recv+0x58>
	if (rx->local_match && is_replay(rx)) {
 800b582:	7ca3      	ldrb	r3, [r4, #18]
 800b584:	065b      	lsls	r3, r3, #25
 800b586:	d410      	bmi.n	800b5aa <bt_mesh_trans_recv+0x356>
	hdr = net_buf_simple_pull_u8(buf);
 800b588:	4628      	mov	r0, r5
 800b58a:	f006 f82e 	bl	80115ea <net_buf_simple_pull_u8>
	if (rx->ctl) {
 800b58e:	7ca3      	ldrb	r3, [r4, #18]
 800b590:	f013 0708 	ands.w	r7, r3, #8
	hdr = net_buf_simple_pull_u8(buf);
 800b594:	4601      	mov	r1, r0
	if (rx->ctl) {
 800b596:	d00e      	beq.n	800b5b6 <bt_mesh_trans_recv+0x362>
		return ctl_recv(rx, hdr, buf, seq_auth);
 800b598:	ab0a      	add	r3, sp, #40	; 0x28
 800b59a:	462a      	mov	r2, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff fbad 	bl	800acfc <ctl_recv>
 800b5a2:	4606      	mov	r6, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b5a4:	f04f 0a00 	mov.w	sl, #0
 800b5a8:	e78e      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>
	if (rx->local_match && is_replay(rx)) {
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7ff f8de 	bl	800a76c <is_replay>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d0e9      	beq.n	800b588 <bt_mesh_trans_recv+0x334>
 800b5b4:	e67a      	b.n	800b2ac <bt_mesh_trans_recv+0x58>
		if (!rx->local_match && !rx->friend_match) {
 800b5b6:	f013 0ac0 	ands.w	sl, r3, #192	; 0xc0
 800b5ba:	d008      	beq.n	800b5ce <bt_mesh_trans_recv+0x37a>
		return sdu_recv(rx, hdr, 0, buf);
 800b5bc:	462b      	mov	r3, r5
 800b5be:	463a      	mov	r2, r7
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f7ff f95b 	bl	800a87c <sdu_recv>
 800b5c6:	e7ec      	b.n	800b5a2 <bt_mesh_trans_recv+0x34e>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b5c8:	f04f 0a00 	mov.w	sl, #0
 800b5cc:	e047      	b.n	800b65e <bt_mesh_trans_recv+0x40a>
		return 0;
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	e77a      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b5d2:	f04f 0a00 	mov.w	sl, #0
		return -ENOMEM;
 800b5d6:	f06f 060b 	mvn.w	r6, #11
 800b5da:	e775      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>
 800b5dc:	20005b88 	.word	0x20005b88
 800b5e0:	20005f58 	.word	0x20005f58
 800b5e4:	20005fa8 	.word	0x20005fa8
 800b5e8:	20005f84 	.word	0x20005f84
 800b5ec:	20005f78 	.word	0x20005f78
 800b5f0:	20001498 	.word	0x20001498
 800b5f4:	20005fa0 	.word	0x20005fa0
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
 800b5f8:	783a      	ldrb	r2, [r7, #0]
 800b5fa:	f899 3011 	ldrb.w	r3, [r9, #17]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	f47f ae54 	bne.w	800b2ac <bt_mesh_trans_recv+0x58>
 800b604:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b608:	f003 021f 	and.w	r2, r3, #31
 800b60c:	4542      	cmp	r2, r8
 800b60e:	f47f ae4d 	bne.w	800b2ac <bt_mesh_trans_recv+0x58>
	if (rx->ctl != net_rx->ctl) {
 800b612:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b616:	f3cc 00c0 	ubfx	r0, ip, #3, #1
 800b61a:	4283      	cmp	r3, r0
 800b61c:	f47f ae46 	bne.w	800b2ac <bt_mesh_trans_recv+0x58>
		if (rx->in_use) {
 800b620:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b624:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
 800b628:	f47f aeca 	bne.w	800b3c0 <bt_mesh_trans_recv+0x16c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
 800b62c:	3201      	adds	r2, #1
 800b62e:	2001      	movs	r0, #1
 800b630:	2100      	movs	r1, #0
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	f7f4 ff02 	bl	800043c <__aeabi_llsl>
 800b638:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63e:	3801      	subs	r0, #1
 800b640:	4286      	cmp	r6, r0
 800b642:	f47f ae33 	bne.w	800b2ac <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b646:	7ae2      	ldrb	r2, [r4, #11]
 800b648:	9601      	str	r6, [sp, #4]
 800b64a:	09db      	lsrs	r3, r3, #7
 800b64c:	9302      	str	r3, [sp, #8]
 800b64e:	ab0a      	add	r3, sp, #40	; 0x28
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	9907      	ldr	r1, [sp, #28]
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	4613      	mov	r3, r2
 800b658:	9a04      	ldr	r2, [sp, #16]
 800b65a:	f7ff fd5d 	bl	800b118 <send_ack>
		return -EALREADY;
 800b65e:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800b662:	e731      	b.n	800b4c8 <bt_mesh_trans_recv+0x274>

0800b664 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
 800b664:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i]);
 800b666:	4c04      	ldr	r4, [pc, #16]	; (800b678 <bt_mesh_rx_reset+0x14>)
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff f9af 	bl	800a9cc <seg_rx_reset>
		seg_rx[i].src = BT_MESH_ADDR_UNASSIGNED;
 800b66e:	2300      	movs	r3, #0
 800b670:	82a3      	strh	r3, [r4, #20]
		seg_rx[i].dst = BT_MESH_ADDR_UNASSIGNED;
 800b672:	82e3      	strh	r3, [r4, #22]
 800b674:	bd10      	pop	{r4, pc}
 800b676:	bf00      	nop
 800b678:	20005f58 	.word	0x20005f58

0800b67c <bt_mesh_tx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <bt_mesh_tx_reset+0x8>)
 800b67e:	f7ff b9c7 	b.w	800aa10 <seg_tx_reset>
 800b682:	bf00      	nop
 800b684:	20000d00 	.word	0x20000d00

0800b688 <bt_mesh_trans_init>:
	}
}

void bt_mesh_trans_init(void)
{
 800b688:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
 800b68a:	4905      	ldr	r1, [pc, #20]	; (800b6a0 <bt_mesh_trans_init+0x18>)
 800b68c:	4805      	ldr	r0, [pc, #20]	; (800b6a4 <bt_mesh_trans_init+0x1c>)
 800b68e:	f006 fec5 	bl	801241c <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
 800b692:	4905      	ldr	r1, [pc, #20]	; (800b6a8 <bt_mesh_trans_init+0x20>)
 800b694:	4805      	ldr	r0, [pc, #20]	; (800b6ac <bt_mesh_trans_init+0x24>)
	}
}
 800b696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
 800b69a:	f006 bebf 	b.w	801241c <k_delayed_work_init>
 800b69e:	bf00      	nop
 800b6a0:	0800aedd 	.word	0x0800aedd
 800b6a4:	20000d5c 	.word	0x20000d5c
 800b6a8:	0800b1b5 	.word	0x0800b1b5
 800b6ac:	20005f78 	.word	0x20005f78

0800b6b0 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
 800b6b0:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
 800b6b2:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
 800b6b4:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
 800b6b6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b6ba:	700a      	strb	r2, [r1, #0]
 800b6bc:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
 800b6be:	70c8      	strb	r0, [r1, #3]
 800b6c0:	4770      	bx	lr

0800b6c2 <bt_mesh_ccm_encrypt>:

static int bt_mesh_ccm_encrypt(const u8_t key[16], u8_t nonce[13],
			       const u8_t *msg, size_t msg_len,
			       const u8_t *aad, size_t aad_len,
			       u8_t *out_msg, size_t mic_size)
{
 800b6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c6:	b09b      	sub	sp, #108	; 0x6c
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b6ce:	9102      	str	r1, [sp, #8]
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00) {
 800b6d0:	f5b8 4f7f 	cmp.w	r8, #65280	; 0xff00
{
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	9301      	str	r3, [sp, #4]
	if (aad_len >= 0xff00) {
 800b6d8:	f080 8135 	bcs.w	800b946 <bt_mesh_ccm_encrypt+0x284>
		return -EINVAL;
	}

	/* C_mic = e(AppKey, 0x01 || nonce || 0x0000) */
	pmsg[0] = 0x01;
 800b6dc:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f809 3d50 	strb.w	r3, [r9, #-80]!
	memcpy(pmsg + 1, nonce, 13);
 800b6e6:	220d      	movs	r2, #13
 800b6e8:	f10d 0019 	add.w	r0, sp, #25
 800b6ec:	f7f5 f8c8 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b6f0:	2300      	movs	r3, #0
	sys_put_be16(0x0000, pmsg + 14);

	err = bt_encrypt_be(key, pmsg, cmic);
 800b6f2:	aa0a      	add	r2, sp, #40	; 0x28
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
 800b6fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b700:	f7fb f912 	bl	8006928 <bt_encrypt_be>
	if (err) {
 800b704:	4604      	mov	r4, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	d13e      	bne.n	800b788 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* X_0 = e(AppKey, 0x09 || nonce || length) */
	if (mic_size == sizeof(u64_t)) {
 800b70a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b70c:	2b08      	cmp	r3, #8
 800b70e:	d13f      	bne.n	800b790 <bt_mesh_ccm_encrypt+0xce>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
 800b710:	f1b8 0f00 	cmp.w	r8, #0
 800b714:	bf14      	ite	ne
 800b716:	2359      	movne	r3, #89	; 0x59
 800b718:	2319      	moveq	r3, #25
	} else {
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
	}

	memcpy(pmsg + 1, nonce, 13);
 800b71a:	220d      	movs	r2, #13
 800b71c:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b71e:	f88d 3018 	strb.w	r3, [sp, #24]
	memcpy(pmsg + 1, nonce, 13);
 800b722:	f10d 0019 	add.w	r0, sp, #25
 800b726:	f7f5 f8ab 	bl	8000880 <memcpy>
	sys_put_be16(msg_len, pmsg + 14);
 800b72a:	f8bd 5004 	ldrh.w	r5, [sp, #4]

	err = bt_encrypt_be(key, pmsg, Xn);
 800b72e:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
	dst[0] = val >> 8;
 800b732:	0a2b      	lsrs	r3, r5, #8
 800b734:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800b738:	465a      	mov	r2, fp
	dst[1] = val;
 800b73a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b73e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b742:	4649      	mov	r1, r9
 800b744:	4638      	mov	r0, r7
 800b746:	f7fb f8ef 	bl	8006928 <bt_encrypt_be>
	if (err) {
 800b74a:	4604      	mov	r4, r0
 800b74c:	b9e0      	cbnz	r0, 800b788 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* If AAD is being used to authenticate, include it here */
	if (aad_len) {
 800b74e:	f1b8 0f00 	cmp.w	r8, #0
 800b752:	d123      	bne.n	800b79c <bt_mesh_ccm_encrypt+0xda>
			return err;
		}
	}

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800b75a:	330f      	adds	r3, #15
 800b75c:	091b      	lsrs	r3, r3, #4
	if (!last_blk) {
		last_blk = 16;
 800b75e:	f015 050f 	ands.w	r5, r5, #15
 800b762:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
 800b766:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b76a:	bf08      	it	eq
 800b76c:	2510      	moveq	r5, #16
	}

	for (j = 0; j < blk_cnt; j++) {
 800b76e:	f04f 0800 	mov.w	r8, #0
 800b772:	9303      	str	r3, [sp, #12]
 800b774:	45d8      	cmp	r8, fp
 800b776:	d35e      	bcc.n	800b836 <bt_mesh_ccm_encrypt+0x174>
			}

		}
	}

	memcpy(out_msg + msg_len, mic, mic_size);
 800b778:	9b01      	ldr	r3, [sp, #4]
 800b77a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800b77c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b77e:	442b      	add	r3, r5
 800b780:	a912      	add	r1, sp, #72	; 0x48
 800b782:	4618      	mov	r0, r3
 800b784:	f7f5 f87c 	bl	8000880 <memcpy>

	return 0;
}
 800b788:	4620      	mov	r0, r4
 800b78a:	b01b      	add	sp, #108	; 0x6c
 800b78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b790:	f1b8 0f00 	cmp.w	r8, #0
 800b794:	bf14      	ite	ne
 800b796:	2349      	movne	r3, #73	; 0x49
 800b798:	2309      	moveq	r3, #9
 800b79a:	e7be      	b.n	800b71a <bt_mesh_ccm_encrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
 800b79c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800b7a0:	f3c8 2307 	ubfx	r3, r8, #8, #8
 800b7a4:	4053      	eors	r3, r2
 800b7a6:	f88d 3018 	strb.w	r3, [sp, #24]
 800b7aa:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800b7ae:	ea83 0308 	eor.w	r3, r3, r8
 800b7b2:	f88d 3019 	strb.w	r3, [sp, #25]
		aad_len += sizeof(u16_t);
 800b7b6:	f108 0802 	add.w	r8, r8, #2
		j = 0;
 800b7ba:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
 800b7bc:	2302      	movs	r3, #2
		while (aad_len > 16) {
 800b7be:	f1b8 0f10 	cmp.w	r8, #16
 800b7c2:	d815      	bhi.n	800b7f0 <bt_mesh_ccm_encrypt+0x12e>
			pmsg[i] = Xn[i] ^ aad[j];
 800b7c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4492      	add	sl, r2
 800b7ca:	aa16      	add	r2, sp, #88	; 0x58
 800b7cc:	5c98      	ldrb	r0, [r3, r2]
 800b7ce:	f81a 1003 	ldrb.w	r1, [sl, r3]
 800b7d2:	4041      	eors	r1, r0
 800b7d4:	a806      	add	r0, sp, #24
 800b7d6:	54c1      	strb	r1, [r0, r3]
		for (i = 0; i < aad_len; i++, j++) {
 800b7d8:	3301      	adds	r3, #1
 800b7da:	4598      	cmp	r8, r3
 800b7dc:	d1f6      	bne.n	800b7cc <bt_mesh_ccm_encrypt+0x10a>
		for (i = aad_len; i < 16; i++) {
 800b7de:	2b10      	cmp	r3, #16
 800b7e0:	d124      	bne.n	800b82c <bt_mesh_ccm_encrypt+0x16a>
		err = bt_encrypt_be(key, pmsg, Xn);
 800b7e2:	a906      	add	r1, sp, #24
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7fb f89f 	bl	8006928 <bt_encrypt_be>
		if (err) {
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0b2      	beq.n	800b754 <bt_mesh_ccm_encrypt+0x92>
 800b7ee:	e01b      	b.n	800b828 <bt_mesh_ccm_encrypt+0x166>
				pmsg[i] = Xn[i] ^ aad[j];
 800b7f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b7f2:	ebaa 0003 	sub.w	r0, sl, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4408      	add	r0, r1
 800b7fa:	5c81      	ldrb	r1, [r0, r2]
 800b7fc:	f812 e00b 	ldrb.w	lr, [r2, fp]
 800b800:	ea81 010e 	eor.w	r1, r1, lr
 800b804:	f802 1009 	strb.w	r1, [r2, r9]
				i++, j++;
 800b808:	3201      	adds	r2, #1
			} while (i < 16);
 800b80a:	2a10      	cmp	r2, #16
 800b80c:	d1f5      	bne.n	800b7fa <bt_mesh_ccm_encrypt+0x138>
 800b80e:	f1c3 0310 	rsb	r3, r3, #16
			err = bt_encrypt_be(key, pmsg, Xn);
 800b812:	465a      	mov	r2, fp
 800b814:	4649      	mov	r1, r9
 800b816:	4638      	mov	r0, r7
 800b818:	449a      	add	sl, r3
 800b81a:	f7fb f885 	bl	8006928 <bt_encrypt_be>
			aad_len -= 16;
 800b81e:	f1a8 0810 	sub.w	r8, r8, #16
			i = 0;
 800b822:	2300      	movs	r3, #0
			if (err) {
 800b824:	2800      	cmp	r0, #0
 800b826:	d0ca      	beq.n	800b7be <bt_mesh_ccm_encrypt+0xfc>
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b828:	4604      	mov	r4, r0
 800b82a:	e7ad      	b.n	800b788 <bt_mesh_ccm_encrypt+0xc6>
			pmsg[i] = Xn[i];
 800b82c:	a806      	add	r0, sp, #24
 800b82e:	5cd1      	ldrb	r1, [r2, r3]
 800b830:	54c1      	strb	r1, [r0, r3]
		for (i = aad_len; i < 16; i++) {
 800b832:	3301      	adds	r3, #1
 800b834:	e7d3      	b.n	800b7de <bt_mesh_ccm_encrypt+0x11c>
		if (j + 1 == blk_cnt) {
 800b836:	f108 0801 	add.w	r8, r8, #1
 800b83a:	45c3      	cmp	fp, r8
 800b83c:	f04f 0300 	mov.w	r3, #0
 800b840:	d14f      	bne.n	800b8e2 <bt_mesh_ccm_encrypt+0x220>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b842:	a916      	add	r1, sp, #88	; 0x58
			for (i = 0; i < last_blk; i++) {
 800b844:	42ab      	cmp	r3, r5
 800b846:	d33f      	bcc.n	800b8c8 <bt_mesh_ccm_encrypt+0x206>
 800b848:	462b      	mov	r3, r5
 800b84a:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
			for (i = last_blk; i < 16; i++) {
 800b84e:	2b10      	cmp	r3, #16
 800b850:	d141      	bne.n	800b8d6 <bt_mesh_ccm_encrypt+0x214>
			err = bt_encrypt_be(key, pmsg, Xn);
 800b852:	4652      	mov	r2, sl
 800b854:	a906      	add	r1, sp, #24
 800b856:	4638      	mov	r0, r7
 800b858:	f7fb f866 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1e3      	bne.n	800b828 <bt_mesh_ccm_encrypt+0x166>
				mic[i] = cmic[i] ^ Xn[i];
 800b860:	aa12      	add	r2, sp, #72	; 0x48
 800b862:	a90a      	add	r1, sp, #40	; 0x28
 800b864:	5c43      	ldrb	r3, [r0, r1]
 800b866:	f810 e00a 	ldrb.w	lr, [r0, sl]
 800b86a:	ea83 030e 	eor.w	r3, r3, lr
 800b86e:	5483      	strb	r3, [r0, r2]
			for (i = 0; i < sizeof(mic); i++) {
 800b870:	3001      	adds	r0, #1
 800b872:	2810      	cmp	r0, #16
 800b874:	d1f6      	bne.n	800b864 <bt_mesh_ccm_encrypt+0x1a2>
			pmsg[0] = 0x01;
 800b876:	ab1a      	add	r3, sp, #104	; 0x68
 800b878:	2201      	movs	r2, #1
 800b87a:	f803 2d50 	strb.w	r2, [r3, #-80]!
			memcpy(pmsg + 1, nonce, 13);
 800b87e:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
 800b880:	9304      	str	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
 800b882:	220d      	movs	r2, #13
 800b884:	f10d 0019 	add.w	r0, sp, #25
			pmsg[0] = 0x01;
 800b888:	9305      	str	r3, [sp, #20]
			memcpy(pmsg + 1, nonce, 13);
 800b88a:	f7f4 fff9 	bl	8000880 <memcpy>
 800b88e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b892:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b896:	9b04      	ldr	r3, [sp, #16]
	dst[1] = val;
 800b898:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 800b89c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b8a0:	4652      	mov	r2, sl
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7fb f83f 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d1bc      	bne.n	800b828 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
 800b8ae:	5c33      	ldrb	r3, [r6, r0]
 800b8b0:	f810 200a 	ldrb.w	r2, [r0, sl]
 800b8b4:	4053      	eors	r3, r2
 800b8b6:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < last_blk; i++) {
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	4285      	cmp	r5, r0
 800b8be:	d8f6      	bhi.n	800b8ae <bt_mesh_ccm_encrypt+0x1ec>
 800b8c0:	3610      	adds	r6, #16
 800b8c2:	f109 0910 	add.w	r9, r9, #16
 800b8c6:	e755      	b.n	800b774 <bt_mesh_ccm_encrypt+0xb2>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b8c8:	5cf0      	ldrb	r0, [r6, r3]
 800b8ca:	5c5a      	ldrb	r2, [r3, r1]
 800b8cc:	4042      	eors	r2, r0
 800b8ce:	a806      	add	r0, sp, #24
 800b8d0:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	e7b6      	b.n	800b844 <bt_mesh_ccm_encrypt+0x182>
				pmsg[i] = Xn[i] ^ 0x00;
 800b8d6:	a906      	add	r1, sp, #24
 800b8d8:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b8dc:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
 800b8de:	3301      	adds	r3, #1
 800b8e0:	e7b5      	b.n	800b84e <bt_mesh_ccm_encrypt+0x18c>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b8e2:	aa16      	add	r2, sp, #88	; 0x58
 800b8e4:	5cf0      	ldrb	r0, [r6, r3]
 800b8e6:	5c99      	ldrb	r1, [r3, r2]
 800b8e8:	4041      	eors	r1, r0
 800b8ea:	a806      	add	r0, sp, #24
 800b8ec:	54c1      	strb	r1, [r0, r3]
			for (i = 0; i < 16; i++) {
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	2b10      	cmp	r3, #16
 800b8f2:	d1f7      	bne.n	800b8e4 <bt_mesh_ccm_encrypt+0x222>
			err = bt_encrypt_be(key, pmsg, Xn);
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f7fb f816 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d193      	bne.n	800b828 <bt_mesh_ccm_encrypt+0x166>
			pmsg[0] = 0x01;
 800b900:	2301      	movs	r3, #1
			memcpy(pmsg + 1, nonce, 13);
 800b902:	220d      	movs	r2, #13
 800b904:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
 800b906:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(pmsg + 1, nonce, 13);
 800b90a:	f10d 0019 	add.w	r0, sp, #25
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b90e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
			memcpy(pmsg + 1, nonce, 13);
 800b912:	f7f4 ffb5 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b916:	f3c8 2307 	ubfx	r3, r8, #8, #8
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b91a:	4652      	mov	r2, sl
 800b91c:	a906      	add	r1, sp, #24
 800b91e:	4638      	mov	r0, r7
 800b920:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
 800b924:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
 800b928:	f7fa fffe 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f47f af7b 	bne.w	800b828 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
 800b932:	5c33      	ldrb	r3, [r6, r0]
 800b934:	f810 200a 	ldrb.w	r2, [r0, sl]
 800b938:	4053      	eors	r3, r2
 800b93a:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < 16; i++) {
 800b93e:	3001      	adds	r0, #1
 800b940:	2810      	cmp	r0, #16
 800b942:	d1f6      	bne.n	800b932 <bt_mesh_ccm_encrypt+0x270>
 800b944:	e7bc      	b.n	800b8c0 <bt_mesh_ccm_encrypt+0x1fe>
		return -EINVAL;
 800b946:	f06f 0415 	mvn.w	r4, #21
 800b94a:	e71d      	b.n	800b788 <bt_mesh_ccm_encrypt+0xc6>

0800b94c <bt_mesh_ccm_decrypt>:
{
 800b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	b09d      	sub	sp, #116	; 0x74
 800b952:	4605      	mov	r5, r0
 800b954:	e88d 0006 	stmia.w	sp, {r1, r2}
 800b958:	9c27      	ldr	r4, [sp, #156]	; 0x9c
	if (msg_len < 1 || aad_len >= 0xff00) {
 800b95a:	461f      	mov	r7, r3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8143 	beq.w	800bbe8 <bt_mesh_ccm_decrypt+0x29c>
 800b962:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800b966:	f080 813f 	bcs.w	800bbe8 <bt_mesh_ccm_decrypt+0x29c>
	pmsg[0] = 0x01;
 800b96a:	ae1c      	add	r6, sp, #112	; 0x70
 800b96c:	2301      	movs	r3, #1
 800b96e:	f806 3d50 	strb.w	r3, [r6, #-80]!
	memcpy(pmsg + 1, nonce, 13);
 800b972:	220d      	movs	r2, #13
 800b974:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800b978:	f7f4 ff82 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b97c:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
 800b97e:	aa0c      	add	r2, sp, #48	; 0x30
 800b980:	4631      	mov	r1, r6
 800b982:	4628      	mov	r0, r5
 800b984:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
 800b988:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800b98c:	f7fa ffcc 	bl	8006928 <bt_encrypt_be>
	if (err) {
 800b990:	2800      	cmp	r0, #0
 800b992:	f040 808a 	bne.w	800baaa <bt_mesh_ccm_decrypt+0x15e>
	if (mic_size == sizeof(u64_t)) {
 800b996:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d13c      	bne.n	800ba16 <bt_mesh_ccm_decrypt+0xca>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	bf14      	ite	ne
 800b9a0:	2359      	movne	r3, #89	; 0x59
 800b9a2:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
 800b9a4:	220d      	movs	r2, #13
 800b9a6:	9900      	ldr	r1, [sp, #0]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b9a8:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
 800b9ac:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	sys_put_be16(msg_len, pmsg + 14);
 800b9b0:	fa1f fb87 	uxth.w	fp, r7
	err = bt_encrypt_be(key, pmsg, Xn);
 800b9b4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
 800b9b8:	f7f4 ff62 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b9bc:	ea4f 231b 	mov.w	r3, fp, lsr #8
	err = bt_encrypt_be(key, pmsg, Xn);
 800b9c0:	4642      	mov	r2, r8
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
 800b9ca:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
 800b9ce:	f7fa ffab 	bl	8006928 <bt_encrypt_be>
	if (err) {
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d169      	bne.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
	if (aad_len) {
 800b9d6:	bb1c      	cbnz	r4, 800ba20 <bt_mesh_ccm_decrypt+0xd4>
	blk_cnt = (msg_len + 15) / 16;
 800b9d8:	f107 030f 	add.w	r3, r7, #15
 800b9dc:	091b      	lsrs	r3, r3, #4
		last_blk = 16;
 800b9de:	f01b 040f 	ands.w	r4, fp, #15
 800b9e2:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800b9e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b9ea:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
 800b9ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b9f2:	bf08      	it	eq
 800b9f4:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
 800b9f6:	2600      	movs	r6, #0
 800b9f8:	9302      	str	r3, [sp, #8]
 800b9fa:	455e      	cmp	r6, fp
 800b9fc:	d35c      	bcc.n	800bab8 <bt_mesh_ccm_decrypt+0x16c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ba02:	443b      	add	r3, r7
 800ba04:	4619      	mov	r1, r3
 800ba06:	a818      	add	r0, sp, #96	; 0x60
 800ba08:	f7f4 ff25 	bl	8000856 <memcmp>
		return -EBADMSG;
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	bf18      	it	ne
 800ba10:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
 800ba14:	e049      	b.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800ba16:	2c00      	cmp	r4, #0
 800ba18:	bf14      	ite	ne
 800ba1a:	2349      	movne	r3, #73	; 0x49
 800ba1c:	2309      	moveq	r3, #9
 800ba1e:	e7c1      	b.n	800b9a4 <bt_mesh_ccm_decrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
 800ba20:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800ba24:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800ba28:	4053      	eors	r3, r2
 800ba2a:	f88d 3020 	strb.w	r3, [sp, #32]
 800ba2e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 800ba32:	4063      	eors	r3, r4
 800ba34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		aad_len += sizeof(u16_t);
 800ba38:	3402      	adds	r4, #2
		j = 0;
 800ba3a:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
 800ba3c:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
 800ba3e:	46b1      	mov	r9, r6
		while (aad_len > 16) {
 800ba40:	2c10      	cmp	r4, #16
 800ba42:	d816      	bhi.n	800ba72 <bt_mesh_ccm_decrypt+0x126>
			pmsg[i] = Xn[i] ^ aad[j];
 800ba44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ba46:	2300      	movs	r3, #0
 800ba48:	eb02 090a 	add.w	r9, r2, sl
 800ba4c:	aa14      	add	r2, sp, #80	; 0x50
 800ba4e:	f819 1003 	ldrb.w	r1, [r9, r3]
 800ba52:	5c98      	ldrb	r0, [r3, r2]
 800ba54:	4041      	eors	r1, r0
 800ba56:	54f1      	strb	r1, [r6, r3]
		for (i = 0; i < aad_len; i++, j++) {
 800ba58:	3301      	adds	r3, #1
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	d1f7      	bne.n	800ba4e <bt_mesh_ccm_decrypt+0x102>
			pmsg[i] = Xn[i];
 800ba5e:	a908      	add	r1, sp, #32
		for (i = aad_len; i < 16; i++) {
 800ba60:	2b10      	cmp	r3, #16
 800ba62:	d125      	bne.n	800bab0 <bt_mesh_ccm_decrypt+0x164>
		err = bt_encrypt_be(key, pmsg, Xn);
 800ba64:	4631      	mov	r1, r6
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7fa ff5e 	bl	8006928 <bt_encrypt_be>
		if (err) {
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d0b3      	beq.n	800b9d8 <bt_mesh_ccm_decrypt+0x8c>
 800ba70:	e01b      	b.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
				pmsg[i] = Xn[i] ^ aad[j];
 800ba72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba74:	ebaa 0e02 	sub.w	lr, sl, r2
 800ba78:	4611      	mov	r1, r2
 800ba7a:	449e      	add	lr, r3
 800ba7c:	f81e 0001 	ldrb.w	r0, [lr, r1]
 800ba80:	f811 c008 	ldrb.w	ip, [r1, r8]
 800ba84:	ea80 000c 	eor.w	r0, r0, ip
 800ba88:	f801 0009 	strb.w	r0, [r1, r9]
				i++, j++;
 800ba8c:	3101      	adds	r1, #1
			} while (i < 16);
 800ba8e:	2910      	cmp	r1, #16
 800ba90:	d1f4      	bne.n	800ba7c <bt_mesh_ccm_decrypt+0x130>
 800ba92:	f1c2 0210 	rsb	r2, r2, #16
 800ba96:	4492      	add	sl, r2
			err = bt_encrypt_be(key, pmsg, Xn);
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4642      	mov	r2, r8
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f7fa ff43 	bl	8006928 <bt_encrypt_be>
			aad_len -= 16;
 800baa2:	3c10      	subs	r4, #16
			i = 0;
 800baa4:	2200      	movs	r2, #0
			if (err) {
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d0ca      	beq.n	800ba40 <bt_mesh_ccm_decrypt+0xf4>
}
 800baaa:	b01d      	add	sp, #116	; 0x74
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
 800bab0:	5cd0      	ldrb	r0, [r2, r3]
 800bab2:	5458      	strb	r0, [r3, r1]
		for (i = aad_len; i < 16; i++) {
 800bab4:	3301      	adds	r3, #1
 800bab6:	e7d3      	b.n	800ba60 <bt_mesh_ccm_decrypt+0x114>
		if (j + 1 == blk_cnt) {
 800bab8:	3601      	adds	r6, #1
 800baba:	2301      	movs	r3, #1
 800babc:	45b3      	cmp	fp, r6
			pmsg[0] = 0x01;
 800babe:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
 800bac2:	f04f 020d 	mov.w	r2, #13
 800bac6:	9900      	ldr	r1, [sp, #0]
 800bac8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
 800bacc:	d158      	bne.n	800bb80 <bt_mesh_ccm_decrypt+0x234>
			err = bt_encrypt_be(key, pmsg, cmsg);
 800bace:	f10d 0840 	add.w	r8, sp, #64	; 0x40
			memcpy(pmsg + 1, nonce, 13);
 800bad2:	f7f4 fed5 	bl	8000880 <memcpy>
 800bad6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bada:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
 800bade:	4642      	mov	r2, r8
 800bae0:	a908      	add	r1, sp, #32
 800bae2:	4628      	mov	r0, r5
	dst[1] = val;
 800bae4:	f88d b02f 	strb.w	fp, [sp, #47]	; 0x2f
 800bae8:	f7fa ff1e 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800baec:	2800      	cmp	r0, #0
 800baee:	d1dc      	bne.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
 800baf0:	ab04      	add	r3, sp, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800baf2:	4642      	mov	r2, r8
			for (i = 0; i < last_blk; i++) {
 800baf4:	42a0      	cmp	r0, r4
 800baf6:	46a0      	mov	r8, r4
 800baf8:	d332      	bcc.n	800bb60 <bt_mesh_ccm_decrypt+0x214>
			memcpy(out_msg + (j * 16), msg, last_blk);
 800bafa:	4619      	mov	r1, r3
 800bafc:	4622      	mov	r2, r4
 800bafe:	4650      	mov	r0, sl
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	f7f4 febd 	bl	8000880 <memcpy>
				pmsg[i] = Xn[i] ^ msg[i];
 800bb06:	9b03      	ldr	r3, [sp, #12]
			for (i = 0; i < last_blk; i++) {
 800bb08:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
 800bb0a:	a908      	add	r1, sp, #32
 800bb0c:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 800bb10:	f812 000e 	ldrb.w	r0, [r2, lr]
 800bb14:	f812 c003 	ldrb.w	ip, [r2, r3]
 800bb18:	ea80 000c 	eor.w	r0, r0, ip
 800bb1c:	5450      	strb	r0, [r2, r1]
			for (i = 0; i < last_blk; i++) {
 800bb1e:	3201      	adds	r2, #1
 800bb20:	4294      	cmp	r4, r2
 800bb22:	d8f5      	bhi.n	800bb10 <bt_mesh_ccm_decrypt+0x1c4>
 800bb24:	ab14      	add	r3, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
 800bb26:	f1b8 0f10 	cmp.w	r8, #16
 800bb2a:	d122      	bne.n	800bb72 <bt_mesh_ccm_decrypt+0x226>
			err = bt_encrypt_be(key, pmsg, Xn);
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4628      	mov	r0, r5
 800bb30:	9303      	str	r3, [sp, #12]
 800bb32:	f7fa fef9 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d1b7      	bne.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
				mic[i] = cmic[i] ^ Xn[i];
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	a918      	add	r1, sp, #96	; 0x60
 800bb3e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800bb42:	f810 200e 	ldrb.w	r2, [r0, lr]
 800bb46:	f810 c003 	ldrb.w	ip, [r0, r3]
 800bb4a:	ea82 020c 	eor.w	r2, r2, ip
 800bb4e:	5442      	strb	r2, [r0, r1]
			for (i = 0; i < sizeof(mic); i++) {
 800bb50:	3001      	adds	r0, #1
 800bb52:	2810      	cmp	r0, #16
 800bb54:	d1f5      	bne.n	800bb42 <bt_mesh_ccm_decrypt+0x1f6>
 800bb56:	f10a 0a10 	add.w	sl, sl, #16
 800bb5a:	f109 0910 	add.w	r9, r9, #16
 800bb5e:	e74c      	b.n	800b9fa <bt_mesh_ccm_decrypt+0xae>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800bb60:	f819 1000 	ldrb.w	r1, [r9, r0]
 800bb64:	f810 e002 	ldrb.w	lr, [r0, r2]
 800bb68:	ea81 010e 	eor.w	r1, r1, lr
 800bb6c:	5419      	strb	r1, [r3, r0]
			for (i = 0; i < last_blk; i++) {
 800bb6e:	3001      	adds	r0, #1
 800bb70:	e7c0      	b.n	800baf4 <bt_mesh_ccm_decrypt+0x1a8>
				pmsg[i] = Xn[i] ^ 0x00;
 800bb72:	f813 2008 	ldrb.w	r2, [r3, r8]
 800bb76:	f801 2008 	strb.w	r2, [r1, r8]
			for (i = last_blk; i < 16; i++) {
 800bb7a:	f108 0801 	add.w	r8, r8, #1
 800bb7e:	e7d2      	b.n	800bb26 <bt_mesh_ccm_decrypt+0x1da>
			memcpy(pmsg + 1, nonce, 13);
 800bb80:	f7f4 fe7e 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800bb84:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800bb88:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
 800bb8c:	ab10      	add	r3, sp, #64	; 0x40
 800bb8e:	461a      	mov	r2, r3
 800bb90:	a908      	add	r1, sp, #32
 800bb92:	4628      	mov	r0, r5
	dst[1] = val;
 800bb94:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 800bb98:	9303      	str	r3, [sp, #12]
 800bb9a:	f7fa fec5 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d183      	bne.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	4602      	mov	r2, r0
 800bba6:	f10d 0810 	add.w	r8, sp, #16
 800bbaa:	f819 1002 	ldrb.w	r1, [r9, r2]
 800bbae:	5cd0      	ldrb	r0, [r2, r3]
 800bbb0:	4041      	eors	r1, r0
 800bbb2:	f802 1008 	strb.w	r1, [r2, r8]
			for (i = 0; i < 16; i++) {
 800bbb6:	3201      	adds	r2, #1
 800bbb8:	2a10      	cmp	r2, #16
 800bbba:	d1f6      	bne.n	800bbaa <bt_mesh_ccm_decrypt+0x25e>
			memcpy(out_msg + (j * 16), msg, 16);
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	f7f4 fe5e 	bl	8000880 <memcpy>
			for (i = 0; i < 16; i++) {
 800bbc4:	2300      	movs	r3, #0
				pmsg[i] = Xn[i] ^ msg[i];
 800bbc6:	a908      	add	r1, sp, #32
 800bbc8:	aa14      	add	r2, sp, #80	; 0x50
 800bbca:	5c98      	ldrb	r0, [r3, r2]
 800bbcc:	f813 e008 	ldrb.w	lr, [r3, r8]
 800bbd0:	ea80 000e 	eor.w	r0, r0, lr
 800bbd4:	5458      	strb	r0, [r3, r1]
			for (i = 0; i < 16; i++) {
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d1f6      	bne.n	800bbca <bt_mesh_ccm_decrypt+0x27e>
			err = bt_encrypt_be(key, pmsg, Xn);
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f7fa fea3 	bl	8006928 <bt_encrypt_be>
			if (err) {
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d0b7      	beq.n	800bb56 <bt_mesh_ccm_decrypt+0x20a>
 800bbe6:	e760      	b.n	800baaa <bt_mesh_ccm_decrypt+0x15e>
		return -EINVAL;
 800bbe8:	f06f 0015 	mvn.w	r0, #21
 800bbec:	e75d      	b.n	800baaa <bt_mesh_ccm_decrypt+0x15e>

0800bbee <bt_mesh_aes_cmac>:
{
 800bbee:	b570      	push	{r4, r5, r6, lr}
 800bbf0:	b0c2      	sub	sp, #264	; 0x108
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	aa16      	add	r2, sp, #88	; 0x58
 800bbfa:	4668      	mov	r0, sp
{
 800bbfc:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 800bbfe:	f7f6 fabd 	bl	800217c <tc_cmac_setup>
 800bc02:	b140      	cbz	r0, 800bc16 <bt_mesh_aes_cmac+0x28>
 800bc04:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
 800bc06:	b954      	cbnz	r4, 800bc1e <bt_mesh_aes_cmac+0x30>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
 800bc08:	4669      	mov	r1, sp
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7f6 fb46 	bl	800229c <tc_cmac_final>
 800bc10:	b108      	cbz	r0, 800bc16 <bt_mesh_aes_cmac+0x28>
	return 0;
 800bc12:	4620      	mov	r0, r4
 800bc14:	e001      	b.n	800bc1a <bt_mesh_aes_cmac+0x2c>
		return -EIO;
 800bc16:	f06f 0004 	mvn.w	r0, #4
}
 800bc1a:	b042      	add	sp, #264	; 0x108
 800bc1c:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
 800bc1e:	e915 0006 	ldmdb	r5, {r1, r2}
 800bc22:	4668      	mov	r0, sp
 800bc24:	f7f6 fad6 	bl	80021d4 <tc_cmac_update>
 800bc28:	3508      	adds	r5, #8
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d0f3      	beq.n	800bc16 <bt_mesh_aes_cmac+0x28>
	for (; sg_len; sg_len--, sg++) {
 800bc2e:	3c01      	subs	r4, #1
 800bc30:	e7e9      	b.n	800bc06 <bt_mesh_aes_cmac+0x18>

0800bc32 <bt_mesh_aes_cmac_one>:
{
 800bc32:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
 800bc34:	e88d 0006 	stmia.w	sp, {r1, r2}
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
 800bc38:	2201      	movs	r2, #1
 800bc3a:	4669      	mov	r1, sp
 800bc3c:	f7ff ffd7 	bl	800bbee <bt_mesh_aes_cmac>
}
 800bc40:	b003      	add	sp, #12
 800bc42:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc46 <bt_mesh_s1>:
{
 800bc46:	b530      	push	{r4, r5, lr}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
 800bc4e:	2210      	movs	r2, #16
 800bc50:	2100      	movs	r1, #0
 800bc52:	4668      	mov	r0, sp
 800bc54:	f7f4 fe40 	bl	80008d8 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f7f4 fde7 	bl	800082c <strlen>
 800bc5e:	462b      	mov	r3, r5
 800bc60:	4602      	mov	r2, r0
 800bc62:	4621      	mov	r1, r4
 800bc64:	4668      	mov	r0, sp
 800bc66:	f7ff ffe4 	bl	800bc32 <bt_mesh_aes_cmac_one>
}
 800bc6a:	3000      	adds	r0, #0
 800bc6c:	bf18      	it	ne
 800bc6e:	2001      	movne	r0, #1
 800bc70:	b005      	add	sp, #20
 800bc72:	bd30      	pop	{r4, r5, pc}

0800bc74 <bt_mesh_k1>:
{
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	9d04      	ldr	r5, [sp, #16]
 800bc78:	4616      	mov	r6, r2
 800bc7a:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
 800bc7c:	460a      	mov	r2, r1
 800bc7e:	462b      	mov	r3, r5
 800bc80:	4601      	mov	r1, r0
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffd5 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err < 0) {
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	db0a      	blt.n	800bca2 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f7f4 fdcd 	bl	800082c <strlen>
 800bc92:	462b      	mov	r3, r5
 800bc94:	4602      	mov	r2, r0
 800bc96:	4621      	mov	r1, r4
 800bc98:	4628      	mov	r0, r5
}
 800bc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
 800bc9e:	f7ff bfc8 	b.w	800bc32 <bt_mesh_aes_cmac_one>
}
 800bca2:	bd70      	pop	{r4, r5, r6, pc}

0800bca4 <bt_mesh_k2>:
{
 800bca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca6:	b095      	sub	sp, #84	; 0x54
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460f      	mov	r7, r1
	err = bt_mesh_s1("smk2", salt);
 800bcac:	4828      	ldr	r0, [pc, #160]	; (800bd50 <bt_mesh_k2+0xac>)
 800bcae:	a902      	add	r1, sp, #8
{
 800bcb0:	4615      	mov	r5, r2
 800bcb2:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
 800bcb4:	f7ff ffc7 	bl	800bc46 <bt_mesh_s1>
	if (err) {
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d146      	bne.n	800bd4a <bt_mesh_k2+0xa6>
	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	ab0a      	add	r3, sp, #40	; 0x28
 800bcc0:	2210      	movs	r2, #16
 800bcc2:	a802      	add	r0, sp, #8
 800bcc4:	f7ff ffb5 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800bcc8:	4604      	mov	r4, r0
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d13a      	bne.n	800bd44 <bt_mesh_k2+0xa0>
	pad = 0x01;
 800bcce:	2301      	movs	r3, #1
	sg[1].len  = p_len;
 800bcd0:	9511      	str	r5, [sp, #68]	; 0x44
	sg[2].data = &pad;
 800bcd2:	f10d 0207 	add.w	r2, sp, #7
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bcd6:	ad06      	add	r5, sp, #24
	pad = 0x01;
 800bcd8:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].data = NULL;
 800bcdc:	900e      	str	r0, [sp, #56]	; 0x38
	sg[0].len  = 0;
 800bcde:	900f      	str	r0, [sp, #60]	; 0x3c
	sg[2].data = &pad;
 800bce0:	9212      	str	r2, [sp, #72]	; 0x48
	sg[2].len  = sizeof(pad);
 800bce2:	9313      	str	r3, [sp, #76]	; 0x4c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bce4:	2203      	movs	r2, #3
 800bce6:	462b      	mov	r3, r5
 800bce8:	a90e      	add	r1, sp, #56	; 0x38
 800bcea:	a80a      	add	r0, sp, #40	; 0x28
	sg[1].data = p;
 800bcec:	9710      	str	r7, [sp, #64]	; 0x40
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bcee:	f7ff ff7e 	bl	800bbee <bt_mesh_aes_cmac>
	if (err) {
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	bb30      	cbnz	r0, 800bd44 <bt_mesh_k2+0xa0>
	net_id[0] = out[15] & 0x7f;
 800bcf6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	sg[0].data = out;
 800bcfa:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
 800bcfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd00:	7033      	strb	r3, [r6, #0]
	pad = 0x02;
 800bd02:	2302      	movs	r3, #2
 800bd04:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
 800bd08:	2610      	movs	r6, #16
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	a90e      	add	r1, sp, #56	; 0x38
 800bd10:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
 800bd12:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bd14:	f7ff ff6b 	bl	800bbee <bt_mesh_aes_cmac>
	if (err) {
 800bd18:	4604      	mov	r4, r0
 800bd1a:	b998      	cbnz	r0, 800bd44 <bt_mesh_k2+0xa0>
	memcpy(enc_key, out, 16);
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	4629      	mov	r1, r5
 800bd20:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bd22:	f7f4 fdad 	bl	8000880 <memcpy>
	pad = 0x03;
 800bd26:	2203      	movs	r2, #3
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bd28:	462b      	mov	r3, r5
 800bd2a:	a90e      	add	r1, sp, #56	; 0x38
 800bd2c:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
 800bd2e:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bd32:	f7ff ff5c 	bl	800bbee <bt_mesh_aes_cmac>
	if (err) {
 800bd36:	4604      	mov	r4, r0
 800bd38:	b920      	cbnz	r0, 800bd44 <bt_mesh_k2+0xa0>
	memcpy(priv_key, out, 16);
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bd40:	f7f4 fd9e 	bl	8000880 <memcpy>
}
 800bd44:	4620      	mov	r0, r4
 800bd46:	b015      	add	sp, #84	; 0x54
 800bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4a:	2401      	movs	r4, #1
 800bd4c:	e7fa      	b.n	800bd44 <bt_mesh_k2+0xa0>
 800bd4e:	bf00      	nop
 800bd50:	0801388b 	.word	0x0801388b

0800bd54 <bt_mesh_k3>:
{
 800bd54:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bd56:	4b14      	ldr	r3, [pc, #80]	; (800bda8 <bt_mesh_k3+0x54>)
{
 800bd58:	b08b      	sub	sp, #44	; 0x2c
 800bd5a:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	9000      	str	r0, [sp, #0]
{
 800bd60:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bd62:	791b      	ldrb	r3, [r3, #4]
	err = bt_mesh_s1("smk3", tmp);
 800bd64:	4811      	ldr	r0, [pc, #68]	; (800bdac <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bd66:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
 800bd6a:	a902      	add	r1, sp, #8
 800bd6c:	f7ff ff6b 	bl	800bc46 <bt_mesh_s1>
	if (err) {
 800bd70:	b9b8      	cbnz	r0, 800bda2 <bt_mesh_k3+0x4e>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
 800bd72:	4621      	mov	r1, r4
 800bd74:	ab06      	add	r3, sp, #24
 800bd76:	2210      	movs	r2, #16
 800bd78:	a802      	add	r0, sp, #8
 800bd7a:	f7ff ff5a 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800bd7e:	4604      	mov	r4, r0
 800bd80:	b960      	cbnz	r0, 800bd9c <bt_mesh_k3+0x48>
	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
 800bd82:	ab02      	add	r3, sp, #8
 800bd84:	2205      	movs	r2, #5
 800bd86:	4669      	mov	r1, sp
 800bd88:	a806      	add	r0, sp, #24
 800bd8a:	f7ff ff52 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800bd8e:	4604      	mov	r4, r0
 800bd90:	b920      	cbnz	r0, 800bd9c <bt_mesh_k3+0x48>
	memcpy(out, tmp + 8, 8);
 800bd92:	2208      	movs	r2, #8
 800bd94:	a904      	add	r1, sp, #16
 800bd96:	4628      	mov	r0, r5
 800bd98:	f7f4 fd72 	bl	8000880 <memcpy>
}
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	b00b      	add	sp, #44	; 0x2c
 800bda0:	bd30      	pop	{r4, r5, pc}
 800bda2:	2401      	movs	r4, #1
 800bda4:	e7fa      	b.n	800bd9c <bt_mesh_k3+0x48>
 800bda6:	bf00      	nop
 800bda8:	08012c4a 	.word	0x08012c4a
 800bdac:	08013890 	.word	0x08013890

0800bdb0 <bt_mesh_k4>:
{
 800bdb0:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
 800bdb2:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <bt_mesh_k4+0x48>)
{
 800bdb4:	b08b      	sub	sp, #44	; 0x2c
 800bdb6:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	9001      	str	r0, [sp, #4]
{
 800bdbc:	460c      	mov	r4, r1
	err = bt_mesh_s1("smk4", tmp);
 800bdbe:	480f      	ldr	r0, [pc, #60]	; (800bdfc <bt_mesh_k4+0x4c>)
 800bdc0:	a902      	add	r1, sp, #8
 800bdc2:	f7ff ff40 	bl	800bc46 <bt_mesh_s1>
	if (err) {
 800bdc6:	b9a8      	cbnz	r0, 800bdf4 <bt_mesh_k4+0x44>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
 800bdc8:	ab06      	add	r3, sp, #24
 800bdca:	2210      	movs	r2, #16
 800bdcc:	4629      	mov	r1, r5
 800bdce:	a802      	add	r0, sp, #8
 800bdd0:	f7ff ff2f 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800bdd4:	b960      	cbnz	r0, 800bdf0 <bt_mesh_k4+0x40>
	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
 800bdd6:	2204      	movs	r2, #4
 800bdd8:	ab02      	add	r3, sp, #8
 800bdda:	eb0d 0102 	add.w	r1, sp, r2
 800bdde:	a806      	add	r0, sp, #24
 800bde0:	f7ff ff27 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800bde4:	b920      	cbnz	r0, 800bdf0 <bt_mesh_k4+0x40>
	out[0] = tmp[15] & BIT_MASK(6);
 800bde6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800bdea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdee:	7023      	strb	r3, [r4, #0]
}
 800bdf0:	b00b      	add	sp, #44	; 0x2c
 800bdf2:	bd30      	pop	{r4, r5, pc}
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	e7fb      	b.n	800bdf0 <bt_mesh_k4+0x40>
 800bdf8:	08012c4f 	.word	0x08012c4f
 800bdfc:	08013895 	.word	0x08013895

0800be00 <bt_mesh_id128>:
{
 800be00:	b530      	push	{r4, r5, lr}
 800be02:	b087      	sub	sp, #28
 800be04:	4604      	mov	r4, r0
 800be06:	4608      	mov	r0, r1
	err = bt_mesh_s1(s, salt);
 800be08:	a902      	add	r1, sp, #8
{
 800be0a:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
 800be0c:	f7ff ff1b 	bl	800bc46 <bt_mesh_s1>
	if (err) {
 800be10:	b940      	cbnz	r0, 800be24 <bt_mesh_id128+0x24>
	return bt_mesh_k1(n, 16, salt, id128, out);
 800be12:	9500      	str	r5, [sp, #0]
 800be14:	4b04      	ldr	r3, [pc, #16]	; (800be28 <bt_mesh_id128+0x28>)
 800be16:	aa02      	add	r2, sp, #8
 800be18:	2110      	movs	r1, #16
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7ff ff2a 	bl	800bc74 <bt_mesh_k1>
}
 800be20:	b007      	add	sp, #28
 800be22:	bd30      	pop	{r4, r5, pc}
 800be24:	2001      	movs	r0, #1
 800be26:	e7fb      	b.n	800be20 <bt_mesh_id128+0x20>
 800be28:	08013884 	.word	0x08013884

0800be2c <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(u8_t *pdu, u32_t iv_index,
			  const u8_t privacy_key[16])
{
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	460d      	mov	r5, r1
 800be32:	4604      	mov	r4, r0
 800be34:	4616      	mov	r6, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
 800be36:	2100      	movs	r1, #0
 800be38:	2210      	movs	r2, #16
 800be3a:	4668      	mov	r0, sp
 800be3c:	f7f4 fd4c 	bl	80008d8 <memset>
	u8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
 800be40:	4628      	mov	r0, r5
 800be42:	f10d 0105 	add.w	r1, sp, #5
 800be46:	f7ff fc33 	bl	800b6b0 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
 800be4a:	2207      	movs	r2, #7
 800be4c:	18a1      	adds	r1, r4, r2
 800be4e:	f10d 0009 	add.w	r0, sp, #9

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
 800be52:	ad04      	add	r5, sp, #16
	memcpy(&priv_rand[9], &pdu[7], 7);
 800be54:	f7f4 fd14 	bl	8000880 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
 800be58:	462a      	mov	r2, r5
 800be5a:	4669      	mov	r1, sp
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7fa fd63 	bl	8006928 <bt_encrypt_be>
	if (err) {
 800be62:	b948      	cbnz	r0, 800be78 <bt_mesh_net_obfuscate+0x4c>
 800be64:	4623      	mov	r3, r4
 800be66:	4602      	mov	r2, r0
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
 800be68:	7859      	ldrb	r1, [r3, #1]
 800be6a:	5cac      	ldrb	r4, [r5, r2]
 800be6c:	3201      	adds	r2, #1
 800be6e:	4061      	eors	r1, r4
	for (i = 0; i < 6; i++) {
 800be70:	2a06      	cmp	r2, #6
		pdu[1 + i] ^= tmp[i];
 800be72:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < 6; i++) {
 800be76:	d1f7      	bne.n	800be68 <bt_mesh_net_obfuscate+0x3c>
	}

	return 0;
}
 800be78:	b008      	add	sp, #32
 800be7a:	bd70      	pop	{r4, r5, r6, pc}

0800be7c <bt_mesh_net_encrypt>:

int bt_mesh_net_encrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
 800be7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be80:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800be82:	6809      	ldr	r1, [r1, #0]
 800be84:	f891 9001 	ldrb.w	r9, [r1, #1]
 800be88:	f891 8002 	ldrb.w	r8, [r1, #2]
 800be8c:	f891 c003 	ldrb.w	ip, [r1, #3]
 800be90:	f891 e004 	ldrb.w	lr, [r1, #4]
 800be94:	794f      	ldrb	r7, [r1, #5]
 800be96:	f019 0f80 	tst.w	r9, #128	; 0x80
{
 800be9a:	4605      	mov	r5, r0
 800be9c:	b089      	sub	sp, #36	; 0x24
 800be9e:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800bea0:	bf14      	ite	ne
 800bea2:	2608      	movne	r6, #8
 800bea4:	2604      	moveq	r6, #4
 800bea6:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("IVIndex %u EncKey %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);
	BT_DBG("PDU (len %u) %s", buf->len, bt_hex(buf->data, buf->len));

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
 800bea8:	b373      	cbz	r3, 800bf08 <bt_mesh_net_encrypt+0x8c>
	nonce[0] = 0x03;
 800beaa:	2303      	movs	r3, #3
 800beac:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
 800beb6:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
 800beba:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
 800bebe:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
 800bec2:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
 800bec6:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
 800beca:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
 800bece:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
 800bed2:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
 800bed6:	f7ff fbeb 	bl	800b6b0 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	88a3      	ldrh	r3, [r4, #4]
 800bede:	9603      	str	r6, [sp, #12]
 800bee0:	2100      	movs	r1, #0
 800bee2:	3207      	adds	r2, #7
 800bee4:	9101      	str	r1, [sp, #4]
 800bee6:	9100      	str	r1, [sp, #0]
 800bee8:	4628      	mov	r0, r5
 800beea:	9202      	str	r2, [sp, #8]
 800beec:	3b07      	subs	r3, #7
 800beee:	a904      	add	r1, sp, #16
 800bef0:	f7ff fbe7 	bl	800b6c2 <bt_mesh_ccm_encrypt>
				  NULL, 0, &buf->data[7], mic_len);
	if (!err) {
 800bef4:	4605      	mov	r5, r0
 800bef6:	b918      	cbnz	r0, 800bf00 <bt_mesh_net_encrypt+0x84>
		net_buf_simple_add(buf, mic_len);
 800bef8:	4631      	mov	r1, r6
 800befa:	4620      	mov	r0, r4
 800befc:	f005 fb02 	bl	8011504 <net_buf_simple_add>
	}

	return err;
}
 800bf00:	4628      	mov	r0, r5
 800bf02:	b009      	add	sp, #36	; 0x24
 800bf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
 800bf08:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
 800bf0c:	f88d 9011 	strb.w	r9, [sp, #17]
 800bf10:	e7d1      	b.n	800beb6 <bt_mesh_net_encrypt+0x3a>

0800bf12 <bt_mesh_net_decrypt>:

int bt_mesh_net_decrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
 800bf12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf16:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800bf18:	6809      	ldr	r1, [r1, #0]
 800bf1a:	f891 9001 	ldrb.w	r9, [r1, #1]
 800bf1e:	f891 8002 	ldrb.w	r8, [r1, #2]
 800bf22:	f891 c003 	ldrb.w	ip, [r1, #3]
 800bf26:	f891 e004 	ldrb.w	lr, [r1, #4]
 800bf2a:	794f      	ldrb	r7, [r1, #5]
 800bf2c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
 800bf30:	4605      	mov	r5, r0
 800bf32:	b089      	sub	sp, #36	; 0x24
 800bf34:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800bf36:	bf14      	ite	ne
 800bf38:	2408      	movne	r4, #8
 800bf3a:	2404      	moveq	r4, #4
 800bf3c:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("PDU (%u bytes) %s", buf->len, bt_hex(buf->data, buf->len));
	BT_DBG("iv_index %u, key %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
 800bf3e:	b353      	cbz	r3, 800bf96 <bt_mesh_net_decrypt+0x84>
	nonce[0] = 0x03;
 800bf40:	2303      	movs	r3, #3
 800bf42:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
 800bf4c:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
 800bf50:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
 800bf54:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
 800bf58:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
 800bf5c:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
 800bf60:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
 800bf64:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
 800bf68:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
 800bf6c:	f7ff fba0 	bl	800b6b0 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	buf->len -= mic_len;
 800bf70:	88b3      	ldrh	r3, [r6, #4]

	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bf72:	6832      	ldr	r2, [r6, #0]
 800bf74:	9403      	str	r4, [sp, #12]
	buf->len -= mic_len;
 800bf76:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bf78:	3207      	adds	r2, #7
 800bf7a:	2100      	movs	r1, #0
	buf->len -= mic_len;
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bf80:	9101      	str	r1, [sp, #4]
 800bf82:	9100      	str	r1, [sp, #0]
 800bf84:	9202      	str	r2, [sp, #8]
 800bf86:	3b07      	subs	r3, #7
 800bf88:	a904      	add	r1, sp, #16
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7ff fcde 	bl	800b94c <bt_mesh_ccm_decrypt>
				   NULL, 0, &buf->data[7], mic_len);
}
 800bf90:	b009      	add	sp, #36	; 0x24
 800bf92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
 800bf96:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
 800bf9a:	f88d 9011 	strb.w	r9, [sp, #17]
 800bf9e:	e7d5      	b.n	800bf4c <bt_mesh_net_decrypt+0x3a>

0800bfa0 <bt_mesh_app_encrypt>:
}

int bt_mesh_app_encrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, const u8_t *ad,
			u16_t src, u16_t dst, u32_t seq_num, u32_t iv_index)
{
 800bfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	b089      	sub	sp, #36	; 0x24
 800bfa6:	4681      	mov	r9, r0
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	461c      	mov	r4, r3
 800bfac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bfae:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 800bfb2:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
	if (dev_key) {
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	d035      	beq.n	800c026 <bt_mesh_app_encrypt+0x86>
		nonce[0] = 0x02;
 800bfba:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bfbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
		nonce[0] = 0x01;
 800bfbe:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bfc2:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
 800bfc6:	f10d 0111 	add.w	r1, sp, #17
 800bfca:	f7ff fb71 	bl	800b6b0 <sys_put_be32>
	dst[0] = val >> 8;
 800bfce:	ea4f 2318 	mov.w	r3, r8, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
 800bfd2:	f10d 0119 	add.w	r1, sp, #25
 800bfd6:	f88d 3015 	strb.w	r3, [sp, #21]
 800bfda:	9814      	ldr	r0, [sp, #80]	; 0x50
	dst[1] = val;
 800bfdc:	f88d 8016 	strb.w	r8, [sp, #22]
	dst[0] = val >> 8;
 800bfe0:	0a3b      	lsrs	r3, r7, #8
 800bfe2:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
 800bfe6:	f88d 7018 	strb.w	r7, [sp, #24]
 800bfea:	f7ff fb61 	bl	800b6b0 <sys_put_be32>

	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
 800bfee:	2d00      	cmp	r5, #0
 800bff0:	bf14      	ite	ne
 800bff2:	2110      	movne	r1, #16
 800bff4:	2100      	moveq	r1, #0
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	6822      	ldr	r2, [r4, #0]
 800bffa:	9101      	str	r1, [sp, #4]
 800bffc:	bf14      	ite	ne
 800bffe:	2608      	movne	r6, #8
 800c000:	2604      	moveq	r6, #4
 800c002:	9500      	str	r5, [sp, #0]
 800c004:	88a3      	ldrh	r3, [r4, #4]
 800c006:	9603      	str	r6, [sp, #12]
 800c008:	9202      	str	r2, [sp, #8]
 800c00a:	a904      	add	r1, sp, #16
 800c00c:	4648      	mov	r0, r9
 800c00e:	f7ff fb58 	bl	800b6c2 <bt_mesh_ccm_encrypt>
				  ad ? 16 : 0, buf->data, APP_MIC_LEN(aszmic));
	if (!err) {
 800c012:	4605      	mov	r5, r0
 800c014:	b918      	cbnz	r0, 800c01e <bt_mesh_app_encrypt+0x7e>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
 800c016:	4631      	mov	r1, r6
 800c018:	4620      	mov	r0, r4
 800c01a:	f005 fa73 	bl	8011504 <net_buf_simple_add>
		BT_DBG("Encr: %s", bt_hex(buf->data, buf->len));
	}

	return err;
}
 800c01e:	4628      	mov	r0, r5
 800c020:	b009      	add	sp, #36	; 0x24
 800c022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nonce[0] = 0x01;
 800c026:	2301      	movs	r3, #1
 800c028:	e7c8      	b.n	800bfbc <bt_mesh_app_encrypt+0x1c>

0800c02a <bt_mesh_app_decrypt>:

int bt_mesh_app_decrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, struct net_buf_simple *out,
			const u8_t *ad, u16_t src, u16_t dst, u32_t seq_num,
			u32_t iv_index)
{
 800c02a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	4682      	mov	sl, r0
 800c032:	4617      	mov	r7, r2
 800c034:	461c      	mov	r4, r3
 800c036:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c038:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c03a:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
 800c03e:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
 800c042:	2900      	cmp	r1, #0
 800c044:	d037      	beq.n	800c0b6 <bt_mesh_app_decrypt+0x8c>
		nonce[0] = 0x02;
 800c046:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800c048:	9814      	ldr	r0, [sp, #80]	; 0x50
		nonce[0] = 0x01;
 800c04a:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800c04e:	f10d 0111 	add.w	r1, sp, #17
 800c052:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
 800c056:	f7ff fb2b 	bl	800b6b0 <sys_put_be32>
	dst[0] = val >> 8;
 800c05a:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
 800c05e:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c060:	f88d 3015 	strb.w	r3, [sp, #21]
 800c064:	f10d 0119 	add.w	r1, sp, #25
 800c068:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800c06c:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
 800c070:	f88d 9016 	strb.w	r9, [sp, #22]
 800c074:	f88d 8018 	strb.w	r8, [sp, #24]
 800c078:	f7ff fb1a 	bl	800b6b0 <sys_put_be32>
	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("AppKey %s", bt_hex(key, 16));
	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	bf14      	ite	ne
 800c080:	2210      	movne	r2, #16
 800c082:	2200      	moveq	r2, #0
 800c084:	2f00      	cmp	r7, #0
 800c086:	6831      	ldr	r1, [r6, #0]
 800c088:	9102      	str	r1, [sp, #8]
 800c08a:	bf14      	ite	ne
 800c08c:	2008      	movne	r0, #8
 800c08e:	2004      	moveq	r0, #4
 800c090:	9003      	str	r0, [sp, #12]
 800c092:	9201      	str	r2, [sp, #4]
 800c094:	9500      	str	r5, [sp, #0]
 800c096:	88a3      	ldrh	r3, [r4, #4]
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	a904      	add	r1, sp, #16
 800c09c:	4650      	mov	r0, sl
 800c09e:	f7ff fc55 	bl	800b94c <bt_mesh_ccm_decrypt>
				  ad ? 16 : 0, out->data, APP_MIC_LEN(aszmic));
	if (!err) {
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	b918      	cbnz	r0, 800c0ae <bt_mesh_app_decrypt+0x84>
		net_buf_simple_add(out, buf->len);
 800c0a6:	88a1      	ldrh	r1, [r4, #4]
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f005 fa2b 	bl	8011504 <net_buf_simple_add>
	}

	return err;
}
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	b008      	add	sp, #32
 800c0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nonce[0] = 0x01;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e7c6      	b.n	800c048 <bt_mesh_app_decrypt+0x1e>
	...

0800c0bc <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
 800c0bc:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
 800c0be:	4a06      	ldr	r2, [pc, #24]	; (800c0d8 <bt_mesh_fcs_calc+0x1c>)
 800c0c0:	4401      	add	r1, r0
	u8_t fcs = 0xff;
 800c0c2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
 800c0c4:	4288      	cmp	r0, r1
 800c0c6:	d102      	bne.n	800c0ce <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
 800c0c8:	43d8      	mvns	r0, r3
}
 800c0ca:	b2c0      	uxtb	r0, r0
 800c0cc:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
 800c0ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 800c0d2:	4063      	eors	r3, r4
 800c0d4:	5cd3      	ldrb	r3, [r2, r3]
 800c0d6:	e7f5      	b.n	800c0c4 <bt_mesh_fcs_calc+0x8>
 800c0d8:	080138a4 	.word	0x080138a4

0800c0dc <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
 800c0dc:	6802      	ldr	r2, [r0, #0]
 800c0de:	8880      	ldrh	r0, [r0, #4]
{
 800c0e0:	b530      	push	{r4, r5, lr}
 800c0e2:	4c08      	ldr	r4, [pc, #32]	; (800c104 <bt_mesh_fcs_check+0x28>)
 800c0e4:	4410      	add	r0, r2
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;
 800c0e6:	23ff      	movs	r3, #255	; 0xff

	while (data_len--) {
 800c0e8:	4282      	cmp	r2, r0
 800c0ea:	d106      	bne.n	800c0fa <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
 800c0ec:	404b      	eors	r3, r1
 800c0ee:	5ce0      	ldrb	r0, [r4, r3]
}
 800c0f0:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
 800c0f4:	4258      	negs	r0, r3
 800c0f6:	4158      	adcs	r0, r3
 800c0f8:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
 800c0fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c0fe:	406b      	eors	r3, r5
 800c100:	5ce3      	ldrb	r3, [r4, r3]
 800c102:	e7f1      	b.n	800c0e8 <bt_mesh_fcs_check+0xc>
 800c104:	080138a4 	.word	0x080138a4

0800c108 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
 800c108:	b530      	push	{r4, r5, lr}
 800c10a:	b089      	sub	sp, #36	; 0x24
 800c10c:	4605      	mov	r5, r0
 800c10e:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
 800c110:	480e      	ldr	r0, [pc, #56]	; (800c14c <bt_mesh_virtual_addr+0x44>)
 800c112:	4669      	mov	r1, sp
 800c114:	f7ff fd97 	bl	800bc46 <bt_mesh_s1>
	if (err) {
 800c118:	b9a8      	cbnz	r0, 800c146 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
 800c11a:	ab04      	add	r3, sp, #16
 800c11c:	2210      	movs	r2, #16
 800c11e:	4629      	mov	r1, r5
 800c120:	4668      	mov	r0, sp
 800c122:	f7ff fd86 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (err) {
 800c126:	b960      	cbnz	r0, 800c142 <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
 800c128:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800c12c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800c130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
 800c134:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c13c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c140:	8023      	strh	r3, [r4, #0]

	return 0;
}
 800c142:	b009      	add	sp, #36	; 0x24
 800c144:	bd30      	pop	{r4, r5, pc}
 800c146:	2001      	movs	r0, #1
 800c148:	e7fb      	b.n	800c142 <bt_mesh_virtual_addr+0x3a>
 800c14a:	bf00      	nop
 800c14c:	0801389f 	.word	0x0801389f

0800c150 <bt_mesh_prov_conf_salt>:

int bt_mesh_prov_conf_salt(const u8_t conf_inputs[145], u8_t salt[16])
{
 800c150:	b530      	push	{r4, r5, lr}
 800c152:	b085      	sub	sp, #20
 800c154:	4604      	mov	r4, r0
 800c156:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
 800c158:	2210      	movs	r2, #16
 800c15a:	2100      	movs	r1, #0
 800c15c:	4668      	mov	r0, sp
 800c15e:	f7f4 fbbb 	bl	80008d8 <memset>

	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
 800c162:	462b      	mov	r3, r5
 800c164:	2291      	movs	r2, #145	; 0x91
 800c166:	4621      	mov	r1, r4
 800c168:	4668      	mov	r0, sp
 800c16a:	f7ff fd62 	bl	800bc32 <bt_mesh_aes_cmac_one>
}
 800c16e:	b005      	add	sp, #20
 800c170:	bd30      	pop	{r4, r5, pc}
	...

0800c174 <bt_mesh_prov_conf_key>:

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
 800c174:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
 800c176:	4b04      	ldr	r3, [pc, #16]	; (800c188 <bt_mesh_prov_conf_key+0x14>)
 800c178:	9200      	str	r2, [sp, #0]
 800c17a:	460a      	mov	r2, r1
 800c17c:	2120      	movs	r1, #32
 800c17e:	f7ff fd79 	bl	800bc74 <bt_mesh_k1>
}
 800c182:	b003      	add	sp, #12
 800c184:	f85d fb04 	ldr.w	pc, [sp], #4
 800c188:	0801389a 	.word	0x0801389a

0800c18c <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
 800c18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
 800c18e:	9100      	str	r1, [sp, #0]
 800c190:	2110      	movs	r1, #16
 800c192:	9101      	str	r1, [sp, #4]
 800c194:	9202      	str	r2, [sp, #8]
 800c196:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
 800c198:	2202      	movs	r2, #2
 800c19a:	4669      	mov	r1, sp
 800c19c:	f7ff fd27 	bl	800bbee <bt_mesh_aes_cmac>
}
 800c1a0:	b005      	add	sp, #20
 800c1a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800c1a6 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
 800c1a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
 800c1a8:	2408      	movs	r4, #8
 800c1aa:	9302      	str	r3, [sp, #8]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	9403      	str	r4, [sp, #12]
 800c1b4:	2319      	movs	r3, #25
 800c1b6:	f7ff fbc9 	bl	800b94c <bt_mesh_ccm_decrypt>
}
 800c1ba:	b004      	add	sp, #16
 800c1bc:	bd10      	pop	{r4, pc}

0800c1be <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
 800c1be:	b570      	push	{r4, r5, r6, lr}
 800c1c0:	b088      	sub	sp, #32

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
 800c1c2:	ac08      	add	r4, sp, #32
{
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	461e      	mov	r6, r3
	msg[0] = flags;
 800c1ca:	f804 1d20 	strb.w	r1, [r4, #-32]!
	memcpy(&msg[1], net_id, 8);
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	4601      	mov	r1, r0
 800c1d2:	f10d 0001 	add.w	r0, sp, #1
 800c1d6:	f7f4 fb53 	bl	8000880 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
 800c1da:	f10d 0109 	add.w	r1, sp, #9
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7ff fa66 	bl	800b6b0 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	ab04      	add	r3, sp, #16
 800c1e8:	220d      	movs	r2, #13
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f7ff fd21 	bl	800bc32 <bt_mesh_aes_cmac_one>
	if (!err) {
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	b920      	cbnz	r0, 800c1fe <bt_mesh_beacon_auth+0x40>
		memcpy(auth, tmp, 8);
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	a904      	add	r1, sp, #16
 800c1f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1fa:	f7f4 fb41 	bl	8000880 <memcpy>
	}

	return err;
}
 800c1fe:	4620      	mov	r0, r4
 800c200:	b008      	add	sp, #32
 800c202:	bd70      	pop	{r4, r5, r6, pc}

0800c204 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4604      	mov	r4, r0
	int i;

	mod->elem = elem;
 800c208:	6041      	str	r1, [r0, #4]

	if (mod->pub) {
 800c20a:	6880      	ldr	r0, [r0, #8]
{
 800c20c:	4616      	mov	r6, r2
 800c20e:	461d      	mov	r5, r3
	if (mod->pub) {
 800c210:	b120      	cbz	r0, 800c21c <mod_init+0x18>
		mod->pub->mod = mod;
 800c212:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
 800c216:	490b      	ldr	r1, [pc, #44]	; (800c244 <mod_init+0x40>)
 800c218:	f006 f900 	bl	801241c <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
 800c21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c220:	81a3      	strh	r3, [r4, #12]
	}

	if (vnd) {
 800c222:	b976      	cbnz	r6, 800c242 <mod_init+0x3e>
		return;
	}

	for (i = 0; i < ARRAY_SIZE(model_init); i++) {
		if (model_init[i].id == mod->id) {
 800c224:	8823      	ldrh	r3, [r4, #0]
 800c226:	b91b      	cbnz	r3, 800c230 <mod_init+0x2c>
			model_init[i].init(mod, primary);
 800c228:	4629      	mov	r1, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	f002 f850 	bl	800e2d0 <bt_mesh_cfg_srv_init>
		if (model_init[i].id == mod->id) {
 800c230:	8823      	ldrh	r3, [r4, #0]
 800c232:	2b02      	cmp	r3, #2
 800c234:	d105      	bne.n	800c242 <mod_init+0x3e>
			model_init[i].init(mod, primary);
 800c236:	4629      	mov	r1, r5
 800c238:	4620      	mov	r0, r4
		}
	}
}
 800c23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			model_init[i].init(mod, primary);
 800c23e:	f002 bc4d 	b.w	800eadc <bt_mesh_health_srv_init>
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	0800c799 	.word	0x0800c799

0800c248 <bt_mesh_model_foreach>:
{
 800c248:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c24c:	f8df a068 	ldr.w	sl, [pc, #104]	; 800c2b8 <bt_mesh_model_foreach+0x70>
{
 800c250:	4607      	mov	r7, r0
 800c252:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c254:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
 800c256:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c25a:	f8da 3000 	ldr.w	r3, [sl]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	42aa      	cmp	r2, r5
 800c262:	d802      	bhi.n	800c26a <bt_mesh_model_foreach+0x22>
}
 800c264:	b002      	add	sp, #8
 800c266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c26a:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
 800c26c:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c26e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
 800c272:	7923      	ldrb	r3, [r4, #4]
 800c274:	429e      	cmp	r6, r3
 800c276:	db05      	blt.n	800c284 <bt_mesh_model_foreach+0x3c>
 800c278:	2600      	movs	r6, #0
		for (j = 0; j < elem->vnd_model_count; j++) {
 800c27a:	7963      	ldrb	r3, [r4, #5]
 800c27c:	429e      	cmp	r6, r3
 800c27e:	db0e      	blt.n	800c29e <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c280:	3501      	adds	r5, #1
 800c282:	e7ea      	b.n	800c25a <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
 800c284:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
 800c286:	f8cd 8000 	str.w	r8, [sp]
 800c28a:	fab5 f385 	clz	r3, r5
 800c28e:	fb09 0006 	mla	r0, r9, r6, r0
 800c292:	095b      	lsrs	r3, r3, #5
 800c294:	2200      	movs	r2, #0
 800c296:	4621      	mov	r1, r4
 800c298:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
 800c29a:	3601      	adds	r6, #1
 800c29c:	e7e9      	b.n	800c272 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
 800c29e:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
 800c2a0:	f8cd 8000 	str.w	r8, [sp]
 800c2a4:	fab5 f385 	clz	r3, r5
 800c2a8:	fb09 0006 	mla	r0, r9, r6, r0
 800c2ac:	095b      	lsrs	r3, r3, #5
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
 800c2b4:	3601      	adds	r6, #1
 800c2b6:	e7e0      	b.n	800c27a <bt_mesh_model_foreach+0x32>
 800c2b8:	20000d88 	.word	0x20000d88

0800c2bc <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
 800c2bc:	6880      	ldr	r0, [r0, #8]
 800c2be:	b178      	cbz	r0, 800c2e0 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
 800c2c0:	7a83      	ldrb	r3, [r0, #10]
 800c2c2:	099a      	lsrs	r2, r3, #6
 800c2c4:	2a02      	cmp	r2, #2
 800c2c6:	d012      	beq.n	800c2ee <bt_mesh_model_pub_period_get+0x32>
 800c2c8:	2a03      	cmp	r2, #3
 800c2ca:	d015      	beq.n	800c2f8 <bt_mesh_model_pub_period_get+0x3c>
 800c2cc:	2a01      	cmp	r2, #1
 800c2ce:	d008      	beq.n	800c2e2 <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
 800c2d0:	2264      	movs	r2, #100	; 0x64
 800c2d2:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
 800c2d6:	7ac0      	ldrb	r0, [r0, #11]
 800c2d8:	f000 000f 	and.w	r0, r0, #15
 800c2dc:	fa43 f000 	asr.w	r0, r3, r0
}
 800c2e0:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
 800c2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
 800c2ea:	4353      	muls	r3, r2
		break;
 800c2ec:	e7f3      	b.n	800c2d6 <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
 800c2ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c2f6:	e7f8      	b.n	800c2ea <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
 800c2f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2fc:	4a00      	ldr	r2, [pc, #0]	; (800c300 <bt_mesh_model_pub_period_get+0x44>)
 800c2fe:	e7f4      	b.n	800c2ea <bt_mesh_model_pub_period_get+0x2e>
 800c300:	000927c0 	.word	0x000927c0

0800c304 <publish_sent>:
{
 800c304:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
 800c306:	688e      	ldr	r6, [r1, #8]
 800c308:	7af3      	ldrb	r3, [r6, #11]
 800c30a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
 800c30e:	460d      	mov	r5, r1
	if (mod->pub->count) {
 800c310:	d00b      	beq.n	800c32a <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
 800c312:	7a72      	ldrb	r2, [r6, #9]
 800c314:	08d4      	lsrs	r4, r2, #3
 800c316:	2232      	movs	r2, #50	; 0x32
 800c318:	fb04 2202 	mla	r2, r4, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
 800c31c:	68a9      	ldr	r1, [r5, #8]
 800c31e:	480b      	ldr	r0, [pc, #44]	; (800c34c <publish_sent+0x48>)
 800c320:	3118      	adds	r1, #24
}
 800c322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c326:	f006 b8e3 	b.w	80124f0 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
 800c32a:	4608      	mov	r0, r1
 800c32c:	f7ff ffc6 	bl	800c2bc <bt_mesh_model_pub_period_get>
	if (!period) {
 800c330:	4604      	mov	r4, r0
 800c332:	b138      	cbz	r0, 800c344 <publish_sent+0x40>
 800c334:	f005 fdaa 	bl	8011e8c <_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
 800c338:	68f2      	ldr	r2, [r6, #12]
 800c33a:	1a82      	subs	r2, r0, r2
	if (elapsed > period) {
 800c33c:	4294      	cmp	r4, r2
 800c33e:	d302      	bcc.n	800c346 <publish_sent+0x42>
	if (delay) {
 800c340:	1aa2      	subs	r2, r4, r2
 800c342:	d1eb      	bne.n	800c31c <publish_sent+0x18>
 800c344:	bd70      	pop	{r4, r5, r6, pc}
		return K_MSEC(1);
 800c346:	2201      	movs	r2, #1
 800c348:	e7e8      	b.n	800c31c <publish_sent+0x18>
 800c34a:	bf00      	nop
 800c34c:	20001498 	.word	0x20001498

0800c350 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
 800c350:	b508      	push	{r3, lr}
	/* There must be at least one element */
	if (!comp->elem_count) {
 800c352:	6883      	ldr	r3, [r0, #8]
 800c354:	b13b      	cbz	r3, 800c366 <bt_mesh_comp_register+0x16>
		return -EINVAL;
	}

	dev_comp = comp;
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <bt_mesh_comp_register+0x1c>)

	bt_mesh_model_foreach(mod_init, NULL);
 800c358:	2100      	movs	r1, #0
	dev_comp = comp;
 800c35a:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
 800c35c:	4804      	ldr	r0, [pc, #16]	; (800c370 <bt_mesh_comp_register+0x20>)
 800c35e:	f7ff ff73 	bl	800c248 <bt_mesh_model_foreach>

	return 0;
 800c362:	2000      	movs	r0, #0
 800c364:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800c366:	f06f 0015 	mvn.w	r0, #21
}
 800c36a:	bd08      	pop	{r3, pc}
 800c36c:	20000d88 	.word	0x20000d88
 800c370:	0800c205 	.word	0x0800c205

0800c374 <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(u16_t addr)
{
	int i;

	dev_primary_addr = addr;
 800c374:	4b08      	ldr	r3, [pc, #32]	; (800c398 <bt_mesh_comp_provision+0x24>)
{
 800c376:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
 800c378:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <bt_mesh_comp_provision+0x28>)
 800c37c:	6819      	ldr	r1, [r3, #0]
 800c37e:	688c      	ldr	r4, [r1, #8]
 800c380:	2300      	movs	r3, #0
 800c382:	18c2      	adds	r2, r0, r3
 800c384:	42a3      	cmp	r3, r4
 800c386:	b292      	uxth	r2, r2
 800c388:	d100      	bne.n	800c38c <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
 800c38c:	011d      	lsls	r5, r3, #4
 800c38e:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c390:	3301      	adds	r3, #1
		elem->addr = addr++;
 800c392:	5372      	strh	r2, [r6, r5]
 800c394:	e7f5      	b.n	800c382 <bt_mesh_comp_provision+0xe>
 800c396:	bf00      	nop
 800c398:	20000d8c 	.word	0x20000d8c
 800c39c:	20000d88 	.word	0x20000d88

0800c3a0 <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
 800c3a0:	4b02      	ldr	r3, [pc, #8]	; (800c3ac <bt_mesh_comp_unprovision+0xc>)

	bt_mesh_model_foreach(mod_init, NULL);
 800c3a2:	4803      	ldr	r0, [pc, #12]	; (800c3b0 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
 800c3a8:	f7ff bf4e 	b.w	800c248 <bt_mesh_model_foreach>
 800c3ac:	20000d8c 	.word	0x20000d8c
 800c3b0:	0800c205 	.word	0x0800c205

0800c3b4 <bt_mesh_primary_addr>:
}

u16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
 800c3b4:	4b01      	ldr	r3, [pc, #4]	; (800c3bc <bt_mesh_primary_addr+0x8>)
 800c3b6:	8818      	ldrh	r0, [r3, #0]
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20000d8c 	.word	0x20000d8c

0800c3c0 <bt_mesh_model_find_group>:
u16_t *bt_mesh_model_find_group(struct bt_mesh_model *mod, u16_t addr)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] == addr) {
 800c3c0:	89c3      	ldrh	r3, [r0, #14]
 800c3c2:	428b      	cmp	r3, r1
 800c3c4:	d007      	beq.n	800c3d6 <bt_mesh_model_find_group+0x16>
 800c3c6:	8a03      	ldrh	r3, [r0, #16]
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	d106      	bne.n	800c3da <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800c3cc:	2301      	movs	r3, #1
			return &mod->groups[i];
 800c3ce:	3307      	adds	r3, #7
 800c3d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c3d4:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e7f9      	b.n	800c3ce <bt_mesh_model_find_group+0xe>
		}
	}

	return NULL;
 800c3da:	2000      	movs	r0, #0
}
 800c3dc:	4770      	bx	lr

0800c3de <bt_mesh_elem_find_group>:

static struct bt_mesh_model *bt_mesh_elem_find_group(struct bt_mesh_elem *elem,
						     u16_t group_addr)
{
 800c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model *model;
	u16_t *match;
	int i;

	for (i = 0; i < elem->model_count; i++) {
 800c3e2:	7907      	ldrb	r7, [r0, #4]
{
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460e      	mov	r6, r1
	for (i = 0; i < elem->model_count; i++) {
 800c3e8:	2400      	movs	r4, #0
		model = &elem->models[i];
 800c3ea:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->model_count; i++) {
 800c3ee:	42bc      	cmp	r4, r7
 800c3f0:	db09      	blt.n	800c406 <bt_mesh_elem_find_group+0x28>
		if (match) {
			return model;
		}
	}

	for (i = 0; i < elem->vnd_model_count; i++) {
 800c3f2:	796f      	ldrb	r7, [r5, #5]
 800c3f4:	2400      	movs	r4, #0
		model = &elem->vnd_models[i];
 800c3f6:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c3fa:	42bc      	cmp	r4, r7
 800c3fc:	db0e      	blt.n	800c41c <bt_mesh_elem_find_group+0x3e>
		if (match) {
			return model;
		}
	}

	return NULL;
 800c3fe:	2200      	movs	r2, #0
}
 800c400:	4610      	mov	r0, r2
 800c402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		model = &elem->models[i];
 800c406:	68aa      	ldr	r2, [r5, #8]
 800c408:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
 800c40c:	4631      	mov	r1, r6
 800c40e:	4610      	mov	r0, r2
 800c410:	f7ff ffd6 	bl	800c3c0 <bt_mesh_model_find_group>
		if (match) {
 800c414:	2800      	cmp	r0, #0
 800c416:	d1f3      	bne.n	800c400 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->model_count; i++) {
 800c418:	3401      	adds	r4, #1
 800c41a:	e7e8      	b.n	800c3ee <bt_mesh_elem_find_group+0x10>
		model = &elem->vnd_models[i];
 800c41c:	68ea      	ldr	r2, [r5, #12]
 800c41e:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
 800c422:	4631      	mov	r1, r6
 800c424:	4610      	mov	r0, r2
 800c426:	f7ff ffcb 	bl	800c3c0 <bt_mesh_model_find_group>
		if (match) {
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d1e8      	bne.n	800c400 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c42e:	3401      	adds	r4, #1
 800c430:	e7e3      	b.n	800c3fa <bt_mesh_elem_find_group+0x1c>
	...

0800c434 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(u16_t addr)
{
 800c434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;

	for (i = 0; i < dev_comp->elem_count; i++) {
 800c438:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <bt_mesh_elem_find+0x44>)
 800c43a:	681f      	ldr	r7, [r3, #0]
 800c43c:	f8d7 8008 	ldr.w	r8, [r7, #8]
{
 800c440:	4606      	mov	r6, r0
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c442:	2400      	movs	r4, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];

		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c444:	f480 4900 	eor.w	r9, r0, #32768	; 0x8000
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c448:	4544      	cmp	r4, r8
 800c44a:	d101      	bne.n	800c450 <bt_mesh_elem_find+0x1c>
		} else if (elem->addr == addr) {
			return elem;
		}
	}

	return NULL;
 800c44c:	2500      	movs	r5, #0
 800c44e:	e00b      	b.n	800c468 <bt_mesh_elem_find+0x34>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	0123      	lsls	r3, r4, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c454:	f5b9 4ffe 	cmp.w	r9, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c458:	eb02 0503 	add.w	r5, r2, r3
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c45c:	d807      	bhi.n	800c46e <bt_mesh_elem_find+0x3a>
			if (bt_mesh_elem_find_group(elem, addr)) {
 800c45e:	4631      	mov	r1, r6
 800c460:	4628      	mov	r0, r5
 800c462:	f7ff ffbc 	bl	800c3de <bt_mesh_elem_find_group>
 800c466:	b128      	cbz	r0, 800c474 <bt_mesh_elem_find+0x40>
}
 800c468:	4628      	mov	r0, r5
 800c46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (elem->addr == addr) {
 800c46e:	5ad3      	ldrh	r3, [r2, r3]
 800c470:	42b3      	cmp	r3, r6
 800c472:	d0f9      	beq.n	800c468 <bt_mesh_elem_find+0x34>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c474:	3401      	adds	r4, #1
 800c476:	e7e7      	b.n	800c448 <bt_mesh_elem_find+0x14>
 800c478:	20000d88 	.word	0x20000d88

0800c47c <bt_mesh_elem_count>:

u8_t bt_mesh_elem_count(void)
{
	return dev_comp->elem_count;
 800c47c:	4b01      	ldr	r3, [pc, #4]	; (800c484 <bt_mesh_elem_count+0x8>)
 800c47e:	681b      	ldr	r3, [r3, #0]
}
 800c480:	7a18      	ldrb	r0, [r3, #8]
 800c482:	4770      	bx	lr
 800c484:	20000d88 	.word	0x20000d88

0800c488 <bt_mesh_fixed_group_match>:

	CODE_UNREACHABLE;
}

bool bt_mesh_fixed_group_match(u16_t addr)
{
 800c488:	b508      	push	{r3, lr}
	/* Check for fixed group addresses */
	switch (addr) {
 800c48a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c48e:	4298      	cmp	r0, r3
 800c490:	d00c      	beq.n	800c4ac <bt_mesh_fixed_group_match+0x24>
 800c492:	d80e      	bhi.n	800c4b2 <bt_mesh_fixed_group_match+0x2a>
 800c494:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800c498:	4298      	cmp	r0, r3
 800c49a:	d001      	beq.n	800c4a0 <bt_mesh_fixed_group_match+0x18>
	case BT_MESH_ADDR_ALL_NODES:
		return true;
	case BT_MESH_ADDR_PROXIES:
		/* TODO: Proxy not yet supported */
		return false;
 800c49c:	2000      	movs	r0, #0
 800c49e:	bd08      	pop	{r3, pc}
	case BT_MESH_ADDR_FRIENDS:
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
 800c4a0:	f002 f81e 	bl	800e4e0 <bt_mesh_friend_get>
	case BT_MESH_ADDR_RELAYS:
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
 800c4a4:	1e43      	subs	r3, r0, #1
 800c4a6:	4258      	negs	r0, r3
 800c4a8:	4158      	adcs	r0, r3
 800c4aa:	bd08      	pop	{r3, pc}
 800c4ac:	f002 f80e 	bl	800e4cc <bt_mesh_relay_get>
 800c4b0:	e7f8      	b.n	800c4a4 <bt_mesh_fixed_group_match+0x1c>
		return true;
 800c4b2:	2001      	movs	r0, #1
	default:
		return false;
	}
}
 800c4b4:	bd08      	pop	{r3, pc}
	...

0800c4b8 <bt_mesh_model_recv>:

void bt_mesh_model_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
 800c4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
 800c4bc:	680b      	ldr	r3, [r1, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	099a      	lsrs	r2, r3, #6
 800c4c2:	2a02      	cmp	r2, #2
{
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
 800c4c8:	d00e      	beq.n	800c4e8 <bt_mesh_model_recv+0x30>
 800c4ca:	2a03      	cmp	r2, #3
 800c4cc:	d013      	beq.n	800c4f6 <bt_mesh_model_recv+0x3e>
		if (buf->data[0] == 0x7f) {
 800c4ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d0:	d044      	beq.n	800c55c <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf);
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	f005 f889 	bl	80115ea <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
 800c4d8:	4606      	mov	r6, r0
			/* The callback will likely parse the buffer, so
			 * store the parsing state in case multiple models
			 * receive the message.
			 */
			net_buf_simple_save(buf, &state);
			op->func(model, &rx->ctx, buf);
 800c4da:	f108 0304 	add.w	r3, r8, #4
			models = elem->models;
 800c4de:	2700      	movs	r7, #0
			op->func(model, &rx->ctx, buf);
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	f104 0a08 	add.w	sl, r4, #8
 800c4e6:	e034      	b.n	800c552 <bt_mesh_model_recv+0x9a>
		if (buf->len < 2) {
 800c4e8:	888b      	ldrh	r3, [r1, #4]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d936      	bls.n	800c55c <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_be16(buf);
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	f005 f88b 	bl	801160a <net_buf_simple_pull_be16>
 800c4f4:	e7f0      	b.n	800c4d8 <bt_mesh_model_recv+0x20>
		if (buf->len < 3) {
 800c4f6:	888b      	ldrh	r3, [r1, #4]
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d92f      	bls.n	800c55c <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	f005 f874 	bl	80115ea <net_buf_simple_pull_u8>
 800c502:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
 800c504:	4620      	mov	r0, r4
 800c506:	f005 f878 	bl	80115fa <net_buf_simple_pull_le16>
 800c50a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c50e:	e7e4      	b.n	800c4da <bt_mesh_model_recv+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c510:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c514:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c516:	b208      	sxth	r0, r1
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c518:	013a      	lsls	r2, r7, #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c51a:	2800      	cmp	r0, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c51c:	eb03 0902 	add.w	r9, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c520:	dd0c      	ble.n	800c53c <bt_mesh_model_recv+0x84>
			if (elem->addr != rx->dst) {
 800c522:	5a9b      	ldrh	r3, [r3, r2]
 800c524:	428b      	cmp	r3, r1
 800c526:	d113      	bne.n	800c550 <bt_mesh_model_recv+0x98>
		if (opcode < 0x10000) {
 800c528:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			models = elem->models;
 800c52c:	f8d9 2008 	ldr.w	r2, [r9, #8]
			models = elem->vnd_models;
 800c530:	f8d9 500c 	ldr.w	r5, [r9, #12]
		if (opcode < 0x10000) {
 800c534:	d31b      	bcc.n	800c56e <bt_mesh_model_recv+0xb6>
			count = elem->vnd_model_count;
 800c536:	f899 3005 	ldrb.w	r3, [r9, #5]
 800c53a:	e01b      	b.n	800c574 <bt_mesh_model_recv+0xbc>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->dst) ||
 800c53c:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
 800c540:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 800c544:	d80d      	bhi.n	800c562 <bt_mesh_model_recv+0xaa>
			if (!bt_mesh_elem_find_group(elem, rx->dst)) {
 800c546:	4648      	mov	r0, r9
 800c548:	f7ff ff49 	bl	800c3de <bt_mesh_elem_find_group>
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d1eb      	bne.n	800c528 <bt_mesh_model_recv+0x70>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c550:	3701      	adds	r7, #1
 800c552:	4b1f      	ldr	r3, [pc, #124]	; (800c5d0 <bt_mesh_model_recv+0x118>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	42ba      	cmp	r2, r7
 800c55a:	d8d9      	bhi.n	800c510 <bt_mesh_model_recv+0x58>

		} else {
			BT_DBG("No OpCode 0x%08x for elem %d", opcode, i);
		}
	}
}
 800c55c:	b003      	add	sp, #12
 800c55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
 800c562:	2f00      	cmp	r7, #0
 800c564:	d1f4      	bne.n	800c550 <bt_mesh_model_recv+0x98>
 800c566:	4608      	mov	r0, r1
 800c568:	f7ff ff8e 	bl	800c488 <bt_mesh_fixed_group_match>
 800c56c:	e7ee      	b.n	800c54c <bt_mesh_model_recv+0x94>
			count = elem->model_count;
 800c56e:	f899 3004 	ldrb.w	r3, [r9, #4]
			models = elem->models;
 800c572:	4615      	mov	r5, r2
 800c574:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		op = find_op(models, count, rx->ctx.app_idx, opcode, &model);
 800c578:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800c57c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	for (i = 0; i < model_count; i++) {
 800c580:	42ab      	cmp	r3, r5
 800c582:	d0e5      	beq.n	800c550 <bt_mesh_model_recv+0x98>
		if (mod->keys[i] == key) {
 800c584:	89aa      	ldrh	r2, [r5, #12]
 800c586:	4282      	cmp	r2, r0
 800c588:	d108      	bne.n	800c59c <bt_mesh_model_recv+0xe4>
		for (op = (*model)->op; op->func; op++) {
 800c58a:	696a      	ldr	r2, [r5, #20]
 800c58c:	e003      	b.n	800c596 <bt_mesh_model_recv+0xde>
			if (op->opcode == opcode) {
 800c58e:	6811      	ldr	r1, [r2, #0]
 800c590:	42b1      	cmp	r1, r6
 800c592:	d005      	beq.n	800c5a0 <bt_mesh_model_recv+0xe8>
		for (op = (*model)->op; op->func; op++) {
 800c594:	320c      	adds	r2, #12
 800c596:	6891      	ldr	r1, [r2, #8]
 800c598:	2900      	cmp	r1, #0
 800c59a:	d1f8      	bne.n	800c58e <bt_mesh_model_recv+0xd6>
 800c59c:	351c      	adds	r5, #28
 800c59e:	e7ef      	b.n	800c580 <bt_mesh_model_recv+0xc8>
			if (buf->len < op->min_len) {
 800c5a0:	88a1      	ldrh	r1, [r4, #4]
 800c5a2:	6853      	ldr	r3, [r2, #4]
 800c5a4:	4299      	cmp	r1, r3
 800c5a6:	d3d3      	bcc.n	800c550 <bt_mesh_model_recv+0x98>
	state->offset = net_buf_simple_headroom(buf);
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	9201      	str	r2, [sp, #4]
 800c5ac:	f005 f84a 	bl	8011644 <net_buf_simple_headroom>
			op->func(model, &rx->ctx, buf);
 800c5b0:	9a01      	ldr	r2, [sp, #4]
 800c5b2:	9900      	ldr	r1, [sp, #0]
 800c5b4:	6893      	ldr	r3, [r2, #8]
	state->len = buf->len;
 800c5b6:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
 800c5ba:	4681      	mov	r9, r0
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4628      	mov	r0, r5
 800c5c0:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
 800c5c2:	fa1a f389 	uxtah	r3, sl, r9
 800c5c6:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
 800c5c8:	f8a4 b004 	strh.w	fp, [r4, #4]
 800c5cc:	e7c0      	b.n	800c550 <bt_mesh_model_recv+0x98>
 800c5ce:	bf00      	nop
 800c5d0:	20000d88 	.word	0x20000d88

0800c5d4 <bt_mesh_model_msg_init>:

void bt_mesh_model_msg_init(struct net_buf_simple *msg, u32_t opcode)
{
 800c5d4:	b538      	push	{r3, r4, r5, lr}
	buf->data = buf->__buf + reserve_head;
 800c5d6:	f100 0308 	add.w	r3, r0, #8
 800c5da:	6003      	str	r3, [r0, #0]
	net_buf_simple_init(msg, 0);

	if (opcode < 0x100) {
 800c5dc:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
 800c5de:	f04f 0300 	mov.w	r3, #0
{
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	8083      	strh	r3, [r0, #4]
	if (opcode < 0x100) {
 800c5e6:	d804      	bhi.n	800c5f2 <bt_mesh_model_msg_init+0x1e>
		/* 1-byte OpCode */
		net_buf_simple_add_u8(msg, opcode);
 800c5e8:	b2c9      	uxtb	r1, r1
	}

	/* 3-byte OpCode */
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
	net_buf_simple_add_le16(msg, opcode & 0xffff);
}
 800c5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
 800c5ee:	f004 bf98 	b.w	8011522 <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
 800c5f2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c5f6:	b28d      	uxth	r5, r1
 800c5f8:	d204      	bcs.n	800c604 <bt_mesh_model_msg_init+0x30>
		net_buf_simple_add_be16(msg, opcode);
 800c5fa:	4629      	mov	r1, r5
}
 800c5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
 800c600:	f004 bfa6 	b.w	8011550 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
 800c604:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c608:	f004 ff8b 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
 800c60c:	4629      	mov	r1, r5
 800c60e:	4620      	mov	r0, r4
}
 800c610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
 800c614:	f004 bf8d 	b.w	8011532 <net_buf_simple_add_le16>

0800c618 <bt_mesh_model_send>:

int bt_mesh_model_send(struct bt_mesh_model *model,
		       struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *msg,
		       const struct bt_mesh_send_cb *cb, void *cb_data)
{
 800c618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61a:	4605      	mov	r5, r0
 800c61c:	b085      	sub	sp, #20
	struct bt_mesh_net_tx tx = {
		.sub = bt_mesh_subnet_get(ctx->net_idx),
 800c61e:	8808      	ldrh	r0, [r1, #0]
{
 800c620:	461f      	mov	r7, r3
	struct bt_mesh_net_tx tx = {
 800c622:	2300      	movs	r3, #0
{
 800c624:	460e      	mov	r6, r1
 800c626:	4614      	mov	r4, r2
	struct bt_mesh_net_tx tx = {
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	9302      	str	r3, [sp, #8]
 800c62c:	9303      	str	r3, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
 800c62e:	f7fd f951 	bl	80098d4 <bt_mesh_subnet_get>
		.ctx = ctx,
		.src = model->elem->addr,
 800c632:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
 800c634:	9001      	str	r0, [sp, #4]
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	9602      	str	r6, [sp, #8]
 800c63a:	f8ad 300c 	strh.w	r3, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
 800c63e:	f001 fef7 	bl	800e430 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
 800c642:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!bt_mesh_is_provisioned()) {
 800c646:	f7fc fd25 	bl	8009094 <bt_mesh_is_provisioned>
 800c64a:	b178      	cbz	r0, 800c66c <bt_mesh_model_send+0x54>
	if (net_buf_simple_tailroom(msg) < 4) {
 800c64c:	4620      	mov	r0, r4
 800c64e:	f004 fffe 	bl	801164e <net_buf_simple_tailroom>
 800c652:	2803      	cmp	r0, #3
 800c654:	d907      	bls.n	800c666 <bt_mesh_model_send+0x4e>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
 800c656:	88a3      	ldrh	r3, [r4, #4]
 800c658:	2bc8      	cmp	r3, #200	; 0xc8
 800c65a:	d80b      	bhi.n	800c674 <bt_mesh_model_send+0x5c>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
 800c65c:	9b02      	ldr	r3, [sp, #8]
		if (mod->keys[i] == key) {
 800c65e:	885a      	ldrh	r2, [r3, #2]
 800c660:	89ab      	ldrh	r3, [r5, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	d009      	beq.n	800c67a <bt_mesh_model_send+0x62>
		return -EINVAL;
 800c666:	f06f 0015 	mvn.w	r0, #21
 800c66a:	e001      	b.n	800c670 <bt_mesh_model_send+0x58>
		return -EAGAIN;
 800c66c:	f06f 000a 	mvn.w	r0, #10
		.friend_cred = 0,
	};

	return model_send(model, &tx, false, msg, cb, cb_data);
}
 800c670:	b005      	add	sp, #20
 800c672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
 800c674:	f06f 0023 	mvn.w	r0, #35	; 0x23
	return model_send(model, &tx, false, msg, cb, cb_data);
 800c678:	e7fa      	b.n	800c670 <bt_mesh_model_send+0x58>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
 800c67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c67c:	463a      	mov	r2, r7
 800c67e:	4621      	mov	r1, r4
 800c680:	a801      	add	r0, sp, #4
 800c682:	f7fe fc6b 	bl	800af5c <bt_mesh_trans_send>
 800c686:	e7f3      	b.n	800c670 <bt_mesh_model_send+0x58>

0800c688 <bt_mesh_model_publish>:

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	b0ba      	sub	sp, #232	; 0xe8
 800c68c:	4605      	mov	r5, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c68e:	22d4      	movs	r2, #212	; 0xd4
 800c690:	2100      	movs	r1, #0
 800c692:	a805      	add	r0, sp, #20
 800c694:	f7f4 f920 	bl	80008d8 <memset>
 800c698:	23cc      	movs	r3, #204	; 0xcc
 800c69a:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
 800c69e:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
 800c6a0:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_tx tx = {
 800c6a6:	9302      	str	r3, [sp, #8]
		.ctx = &ctx,
		.src = model->elem->addr,
 800c6a8:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_model_pub *pub = model->pub;
 800c6aa:	68ac      	ldr	r4, [r5, #8]
	struct bt_mesh_net_tx tx = {
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	f8cd d00c 	str.w	sp, [sp, #12]
 800c6b2:	f8ad 3010 	strh.w	r3, [sp, #16]
		.xmit = bt_mesh_net_transmit_get(),
 800c6b6:	f001 febb 	bl	800e430 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
 800c6ba:	f88d 0012 	strb.w	r0, [sp, #18]
	};
	int err;

	BT_DBG("");

	if (!pub) {
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	d062      	beq.n	800c788 <bt_mesh_model_publish+0x100>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
 800c6c2:	88a3      	ldrh	r3, [r4, #4]
 800c6c4:	b91b      	cbnz	r3, 800c6ce <bt_mesh_model_publish+0x46>
		return -EADDRNOTAVAIL;
 800c6c6:	f06f 0030 	mvn.w	r0, #48	; 0x30
		pub->count = 0;
		return err;
	}

	return 0;
}
 800c6ca:	b03a      	add	sp, #232	; 0xe8
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
 800c6ce:	88e0      	ldrh	r0, [r4, #6]
 800c6d0:	f7fe fc20 	bl	800af14 <bt_mesh_app_key_find>
	if (!key) {
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d0f5      	beq.n	800c6c6 <bt_mesh_model_publish+0x3e>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	889b      	ldrh	r3, [r3, #4]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	2bcc      	cmp	r3, #204	; 0xcc
 800c6e2:	dc54      	bgt.n	800c78e <bt_mesh_model_publish+0x106>
	if (pub->count) {
 800c6e4:	7ae3      	ldrb	r3, [r4, #11]
 800c6e6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800c6ea:	d003      	beq.n	800c6f4 <bt_mesh_model_publish+0x6c>
		k_delayed_work_cancel(&pub->timer);
 800c6ec:	f104 0018 	add.w	r0, r4, #24
 800c6f0:	f005 feb2 	bl	8012458 <k_delayed_work_cancel>
	buf->data = buf->__buf + reserve_head;
 800c6f4:	ab07      	add	r3, sp, #28
 800c6f6:	9305      	str	r3, [sp, #20]
	buf->len = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f8ad 3018 	strh.w	r3, [sp, #24]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	a805      	add	r0, sp, #20
 800c702:	889a      	ldrh	r2, [r3, #4]
 800c704:	6819      	ldr	r1, [r3, #0]
 800c706:	f004 ff03 	bl	8011510 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
 800c70a:	88a3      	ldrh	r3, [r4, #4]
 800c70c:	f8ad 3004 	strh.w	r3, [sp, #4]
	ctx.send_ttl = pub->ttl;
 800c710:	7a23      	ldrb	r3, [r4, #8]
 800c712:	f88d 3007 	strb.w	r3, [sp, #7]
	ctx.app_idx = key->app_idx;
 800c716:	8873      	ldrh	r3, [r6, #2]
	ctx.net_idx = key->net_idx;
 800c718:	8830      	ldrh	r0, [r6, #0]
	ctx.app_idx = key->app_idx;
 800c71a:	f8ad 3002 	strh.w	r3, [sp, #2]
	tx.friend_cred = pub->cred;
 800c71e:	7ae3      	ldrb	r3, [r4, #11]
 800c720:	f89d 2013 	ldrb.w	r2, [sp, #19]
	ctx.net_idx = key->net_idx;
 800c724:	f8ad 0000 	strh.w	r0, [sp]
	tx.friend_cred = pub->cred;
 800c728:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c72c:	f363 0200 	bfi	r2, r3, #0, #1
 800c730:	f88d 2013 	strb.w	r2, [sp, #19]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
 800c734:	f7fd f8ce 	bl	80098d4 <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
 800c738:	7ae3      	ldrb	r3, [r4, #11]
 800c73a:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
 800c73c:	9002      	str	r0, [sp, #8]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
 800c73e:	f362 1347 	bfi	r3, r2, #5, #3
 800c742:	72e3      	strb	r3, [r4, #11]
	if (!bt_mesh_is_provisioned()) {
 800c744:	f7fc fca6 	bl	8009094 <bt_mesh_is_provisioned>
 800c748:	b1a8      	cbz	r0, 800c776 <bt_mesh_model_publish+0xee>
	if (net_buf_simple_tailroom(msg) < 4) {
 800c74a:	a805      	add	r0, sp, #20
 800c74c:	f004 ff7f 	bl	801164e <net_buf_simple_tailroom>
 800c750:	2803      	cmp	r0, #3
 800c752:	d913      	bls.n	800c77c <bt_mesh_model_publish+0xf4>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
 800c754:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c758:	2bc8      	cmp	r3, #200	; 0xc8
 800c75a:	d812      	bhi.n	800c782 <bt_mesh_model_publish+0xfa>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
 800c75c:	462b      	mov	r3, r5
 800c75e:	4a0d      	ldr	r2, [pc, #52]	; (800c794 <bt_mesh_model_publish+0x10c>)
 800c760:	a905      	add	r1, sp, #20
 800c762:	a802      	add	r0, sp, #8
 800c764:	f7fe fbfa 	bl	800af5c <bt_mesh_trans_send>
	if (err) {
 800c768:	2800      	cmp	r0, #0
 800c76a:	d0ae      	beq.n	800c6ca <bt_mesh_model_publish+0x42>
		pub->count = 0;
 800c76c:	7ae3      	ldrb	r3, [r4, #11]
 800c76e:	f36f 1347 	bfc	r3, #5, #3
 800c772:	72e3      	strb	r3, [r4, #11]
		return err;
 800c774:	e7a9      	b.n	800c6ca <bt_mesh_model_publish+0x42>
		return -EAGAIN;
 800c776:	f06f 000a 	mvn.w	r0, #10
 800c77a:	e7f7      	b.n	800c76c <bt_mesh_model_publish+0xe4>
		return -EINVAL;
 800c77c:	f06f 0015 	mvn.w	r0, #21
 800c780:	e7f4      	b.n	800c76c <bt_mesh_model_publish+0xe4>
		return -EMSGSIZE;
 800c782:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800c786:	e7f1      	b.n	800c76c <bt_mesh_model_publish+0xe4>
		return -ENOTSUP;
 800c788:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800c78c:	e79d      	b.n	800c6ca <bt_mesh_model_publish+0x42>
		return -EMSGSIZE;
 800c78e:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800c792:	e79a      	b.n	800c6ca <bt_mesh_model_publish+0x42>
 800c794:	080139a4 	.word	0x080139a4

0800c798 <mod_publish>:
{
 800c798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c79c:	f850 7c18 	ldr.w	r7, [r0, #-24]
{
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	b0bb      	sub	sp, #236	; 0xec
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fd89 	bl	800c2bc <bt_mesh_model_pub_period_get>
	if (pub->count) {
 800c7aa:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c7ae:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c7b2:	4681      	mov	r9, r0
	if (pub->count) {
 800c7b4:	d05c      	beq.n	800c870 <mod_publish+0xd8>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c7b6:	22d4      	movs	r2, #212	; 0xd4
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	a805      	add	r0, sp, #20
 800c7bc:	f7f4 f88c 	bl	80008d8 <memset>
	struct bt_mesh_model_pub *pub = mod->pub;
 800c7c0:	68bd      	ldr	r5, [r7, #8]
	struct bt_mesh_msg_ctx ctx = {
 800c7c2:	2600      	movs	r6, #0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c7c4:	23cc      	movs	r3, #204	; 0xcc
	struct bt_mesh_msg_ctx ctx = {
 800c7c6:	9601      	str	r6, [sp, #4]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c7c8:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_msg_ctx ctx = {
 800c7cc:	88ab      	ldrh	r3, [r5, #4]
 800c7ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c7d2:	7a2b      	ldrb	r3, [r5, #8]
 800c7d4:	f88d 3007 	strb.w	r3, [sp, #7]
		.src = mod->elem->addr,
 800c7d8:	687b      	ldr	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
 800c7da:	9604      	str	r6, [sp, #16]
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
 800c7e2:	9600      	str	r6, [sp, #0]
	struct bt_mesh_net_tx tx = {
 800c7e4:	9602      	str	r6, [sp, #8]
 800c7e6:	f8cd d00c 	str.w	sp, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
 800c7ea:	f001 fe21 	bl	800e430 <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
 800c7ee:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
 800c7f0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c7f4:	f88d 0012 	strb.w	r0, [sp, #18]
 800c7f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c7fc:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
 800c800:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
 800c802:	f88d 2013 	strb.w	r2, [sp, #19]
	key = bt_mesh_app_key_find(pub->key);
 800c806:	f7fe fb85 	bl	800af14 <bt_mesh_app_key_find>
	if (!key) {
 800c80a:	4680      	mov	r8, r0
 800c80c:	b1f8      	cbz	r0, 800c84e <mod_publish+0xb6>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
 800c80e:	8800      	ldrh	r0, [r0, #0]
 800c810:	f7fd f860 	bl	80098d4 <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
 800c814:	f8b8 3000 	ldrh.w	r3, [r8]
 800c818:	f8ad 3000 	strh.w	r3, [sp]
	ctx.app_idx = key->app_idx;
 800c81c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c820:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf->data = buf->__buf + reserve_head;
 800c824:	ab07      	add	r3, sp, #28
 800c826:	9305      	str	r3, [sp, #20]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c828:	692b      	ldr	r3, [r5, #16]
	buf->len = 0;
 800c82a:	f8ad 6018 	strh.w	r6, [sp, #24]
 800c82e:	889a      	ldrh	r2, [r3, #4]
 800c830:	6819      	ldr	r1, [r3, #0]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
 800c832:	9002      	str	r0, [sp, #8]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c834:	a805      	add	r0, sp, #20
 800c836:	f004 fe6b 	bl	8011510 <net_buf_simple_add_mem>
	pub->count--;
 800c83a:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
 800c83c:	4a19      	ldr	r2, [pc, #100]	; (800c8a4 <mod_publish+0x10c>)
	pub->count--;
 800c83e:	33e0      	adds	r3, #224	; 0xe0
 800c840:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
 800c842:	a905      	add	r1, sp, #20
 800c844:	463b      	mov	r3, r7
 800c846:	a802      	add	r0, sp, #8
 800c848:	f7fe fb88 	bl	800af5c <bt_mesh_trans_send>
		if (err) {
 800c84c:	b168      	cbz	r0, 800c86a <mod_publish+0xd2>
			pub->count = 0;
 800c84e:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c852:	f36f 1347 	bfc	r3, #5, #3
 800c856:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
 800c85a:	f1b9 0f00 	cmp.w	r9, #0
 800c85e:	d004      	beq.n	800c86a <mod_publish+0xd2>
 800c860:	464a      	mov	r2, r9
 800c862:	4621      	mov	r1, r4
 800c864:	4810      	ldr	r0, [pc, #64]	; (800c8a8 <mod_publish+0x110>)
 800c866:	f005 fe43 	bl	80124f0 <k_delayed_work_submit_to_queue>
}
 800c86a:	b03b      	add	sp, #236	; 0xec
 800c86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!period_ms) {
 800c870:	2800      	cmp	r0, #0
 800c872:	d0fa      	beq.n	800c86a <mod_publish+0xd2>
 800c874:	f005 fb0a 	bl	8011e8c <_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
 800c878:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
 800c87c:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
 800c880:	f854 0c18 	ldr.w	r0, [r4, #-24]
 800c884:	4798      	blx	r3
	if (err) {
 800c886:	2800      	cmp	r0, #0
 800c888:	d1ef      	bne.n	800c86a <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
 800c88a:	f854 0c18 	ldr.w	r0, [r4, #-24]
 800c88e:	f7ff fefb 	bl	800c688 <bt_mesh_model_publish>
	if (pub->count) {
 800c892:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c896:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800c89a:	d0e6      	beq.n	800c86a <mod_publish+0xd2>
		k_delayed_work_cancel(&pub->timer);
 800c89c:	4620      	mov	r0, r4
 800c89e:	f005 fddb 	bl	8012458 <k_delayed_work_cancel>
 800c8a2:	e7e2      	b.n	800c86a <mod_publish+0xd2>
 800c8a4:	080139a4 	.word	0x080139a4
 800c8a8:	20001498 	.word	0x20001498

0800c8ac <bt_mesh_model_find_vnd>:

struct bt_mesh_model *bt_mesh_model_find_vnd(struct bt_mesh_elem *elem,
					     u16_t company, u16_t id)
{
 800c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->vnd_model_count; i++) {
 800c8ae:	7947      	ldrb	r7, [r0, #5]
{
 800c8b0:	4605      	mov	r5, r0
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c8b2:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
 800c8b4:	f04f 0e1c 	mov.w	lr, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c8b8:	b2d8      	uxtb	r0, r3
 800c8ba:	4287      	cmp	r7, r0
 800c8bc:	d801      	bhi.n	800c8c2 <bt_mesh_model_find_vnd+0x16>
		    elem->vnd_models[i].vnd.id == id) {
			return &elem->vnd_models[i];
		}
	}

	return NULL;
 800c8be:	2000      	movs	r0, #0
}
 800c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
 800c8c2:	fb0e f403 	mul.w	r4, lr, r3
 800c8c6:	68ee      	ldr	r6, [r5, #12]
 800c8c8:	1930      	adds	r0, r6, r4
 800c8ca:	5b34      	ldrh	r4, [r6, r4]
 800c8cc:	428c      	cmp	r4, r1
 800c8ce:	d102      	bne.n	800c8d6 <bt_mesh_model_find_vnd+0x2a>
 800c8d0:	8844      	ldrh	r4, [r0, #2]
 800c8d2:	4294      	cmp	r4, r2
 800c8d4:	d0f4      	beq.n	800c8c0 <bt_mesh_model_find_vnd+0x14>
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	e7ee      	b.n	800c8b8 <bt_mesh_model_find_vnd+0xc>

0800c8da <bt_mesh_model_find>:

struct bt_mesh_model *bt_mesh_model_find(struct bt_mesh_elem *elem,
					 u16_t id)
{
 800c8da:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->model_count; i++) {
 800c8dc:	7906      	ldrb	r6, [r0, #4]
 800c8de:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
 800c8e0:	271c      	movs	r7, #28
	for (i = 0; i < elem->model_count; i++) {
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	4296      	cmp	r6, r2
 800c8e6:	d801      	bhi.n	800c8ec <bt_mesh_model_find+0x12>
			return &elem->models[i];
		}
	}

	return NULL;
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	e008      	b.n	800c8fe <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
 800c8ec:	fb07 f403 	mul.w	r4, r7, r3
 800c8f0:	6885      	ldr	r5, [r0, #8]
 800c8f2:	192a      	adds	r2, r5, r4
 800c8f4:	5b2c      	ldrh	r4, [r5, r4]
 800c8f6:	428c      	cmp	r4, r1
 800c8f8:	f103 0301 	add.w	r3, r3, #1
 800c8fc:	d1f1      	bne.n	800c8e2 <bt_mesh_model_find+0x8>
}
 800c8fe:	4610      	mov	r0, r2
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c904 <bt_mesh_comp_get>:

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
 800c904:	4b01      	ldr	r3, [pc, #4]	; (800c90c <bt_mesh_comp_get+0x8>)
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	20000d88 	.word	0x20000d88

0800c910 <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
 800c910:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
 800c912:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
 800c916:	4605      	mov	r5, r0
 800c918:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
 800c91a:	b289      	uxth	r1, r1
 800c91c:	f004 fe09 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
 800c920:	f3c4 1107 	ubfx	r1, r4, #4, #8
 800c924:	4628      	mov	r0, r5
}
 800c926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
 800c92a:	f004 bdfa 	b.w	8011522 <net_buf_simple_add_u8>

0800c92e <send_krp_status>:
}

static void send_krp_status(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    u16_t idx, u8_t phase, u8_t status)
{
 800c92e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c930:	b089      	sub	sp, #36	; 0x24
 800c932:	4604      	mov	r4, r0
 800c934:	460d      	mov	r5, r1
 800c936:	4617      	mov	r7, r2
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c938:	2100      	movs	r1, #0
 800c93a:	2214      	movs	r2, #20
 800c93c:	a803      	add	r0, sp, #12
{
 800c93e:	461e      	mov	r6, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c940:	f7f3 ffca 	bl	80008d8 <memset>
 800c944:	230a      	movs	r3, #10

	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
 800c946:	a803      	add	r0, sp, #12
 800c948:	f248 0117 	movw	r1, #32791	; 0x8017
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c94c:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
 800c950:	f7ff fe40 	bl	800c5d4 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800c954:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c958:	a803      	add	r0, sp, #12
 800c95a:	f004 fde2 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800c95e:	4639      	mov	r1, r7
 800c960:	a803      	add	r0, sp, #12
 800c962:	f004 fde6 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, phase);
 800c966:	4631      	mov	r1, r6
 800c968:	a803      	add	r0, sp, #12
 800c96a:	f004 fdda 	bl	8011522 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c96e:	2300      	movs	r3, #0
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	aa03      	add	r2, sp, #12
 800c974:	4629      	mov	r1, r5
 800c976:	4620      	mov	r0, r4
 800c978:	f7ff fe4e 	bl	800c618 <bt_mesh_model_send>
		BT_ERR("Unable to send Key Refresh State Status");
	}
}
 800c97c:	b009      	add	sp, #36	; 0x24
 800c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c980 <lpn_timeout_get>:
{
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	4614      	mov	r4, r2
 800c986:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c988:	2214      	movs	r2, #20
{
 800c98a:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c98c:	a803      	add	r0, sp, #12
 800c98e:	2100      	movs	r1, #0
 800c990:	f7f3 ffa2 	bl	80008d8 <memset>
 800c994:	230b      	movs	r3, #11
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c996:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c998:	f8ad 3012 	strh.w	r3, [sp, #18]
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c99c:	f004 fe2d 	bl	80115fa <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
 800c9a0:	b203      	sxth	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c9a4:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
 800c9a6:	dd1b      	ble.n	800c9e0 <lpn_timeout_get+0x60>
	bt_mesh_model_msg_init(msg, OP_LPN_TIMEOUT_STATUS);
 800c9a8:	f248 012e 	movw	r1, #32814	; 0x802e
 800c9ac:	a803      	add	r0, sp, #12
 800c9ae:	f7ff fe11 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, lpn_addr);
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	a803      	add	r0, sp, #12
 800c9b6:	f004 fdbc 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, timeout);
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	a803      	add	r0, sp, #12
 800c9be:	f004 fdb0 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 8);
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	a803      	add	r0, sp, #12
 800c9c6:	f004 fdac 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 16);
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	a803      	add	r0, sp, #12
 800c9ce:	f004 fda8 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	aa03      	add	r2, sp, #12
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f7ff fe1c 	bl	800c618 <bt_mesh_model_send>
}
 800c9e0:	b008      	add	sp, #32
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}

0800c9e4 <send_friend_status>:
{
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	b086      	sub	sp, #24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c9ea:	2210      	movs	r2, #16
{
 800c9ec:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c9ee:	a802      	add	r0, sp, #8
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	f7f3 ff71 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800c9f6:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c9f8:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
 800c9fa:	a802      	add	r0, sp, #8
 800c9fc:	f248 0111 	movw	r1, #32785	; 0x8011
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800ca00:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
 800ca04:	f7ff fde6 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, cfg->frnd);
 800ca08:	7a71      	ldrb	r1, [r6, #9]
 800ca0a:	a802      	add	r0, sp, #8
 800ca0c:	f004 fd89 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ca10:	2300      	movs	r3, #0
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	aa02      	add	r2, sp, #8
 800ca16:	4629      	mov	r1, r5
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7ff fdfd 	bl	800c618 <bt_mesh_model_send>
}
 800ca1e:	b006      	add	sp, #24
 800ca20:	bd70      	pop	{r4, r5, r6, pc}

0800ca22 <friend_get>:
	send_friend_status(model, ctx);
 800ca22:	f7ff bfdf 	b.w	800c9e4 <send_friend_status>
	...

0800ca28 <net_key_get>:
{
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	b088      	sub	sp, #32
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800ca2c:	2214      	movs	r2, #20
{
 800ca2e:	4605      	mov	r5, r0
 800ca30:	460e      	mov	r6, r1
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800ca32:	a803      	add	r0, sp, #12
 800ca34:	2100      	movs	r1, #0
 800ca36:	f7f3 ff4f 	bl	80008d8 <memset>
 800ca3a:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
 800ca3c:	f248 0143 	movw	r1, #32835	; 0x8043
 800ca40:	a803      	add	r0, sp, #12
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800ca42:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
 800ca46:	f7ff fdc5 	bl	800c5d4 <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800ca4a:	4b10      	ldr	r3, [pc, #64]	; (800ca8c <net_key_get+0x64>)
 800ca4c:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
 800ca50:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 800ca54:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ca58:	42a2      	cmp	r2, r4
 800ca5a:	d005      	beq.n	800ca68 <net_key_get+0x40>
		if (prev == BT_MESH_KEY_UNUSED) {
 800ca5c:	42a1      	cmp	r1, r4
 800ca5e:	d013      	beq.n	800ca88 <net_key_get+0x60>
		key_idx_pack(msg, prev, sub->net_idx);
 800ca60:	a803      	add	r0, sp, #12
 800ca62:	f7ff ff55 	bl	800c910 <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
 800ca66:	4621      	mov	r1, r4
	if (prev != BT_MESH_KEY_UNUSED) {
 800ca68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	d002      	beq.n	800ca76 <net_key_get+0x4e>
		net_buf_simple_add_le16(msg, prev);
 800ca70:	a803      	add	r0, sp, #12
 800ca72:	f004 fd5e 	bl	8011532 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ca76:	2300      	movs	r3, #0
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	aa03      	add	r2, sp, #12
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f7ff fdca 	bl	800c618 <bt_mesh_model_send>
}
 800ca84:	b008      	add	sp, #32
 800ca86:	bd70      	pop	{r4, r5, r6, pc}
 800ca88:	4611      	mov	r1, r2
 800ca8a:	e7ed      	b.n	800ca68 <net_key_get+0x40>
 800ca8c:	20005b88 	.word	0x20005b88

0800ca90 <send_net_key_status>:
{
 800ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca92:	b089      	sub	sp, #36	; 0x24
 800ca94:	4604      	mov	r4, r0
 800ca96:	460d      	mov	r5, r1
 800ca98:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	2214      	movs	r2, #20
 800ca9e:	a803      	add	r0, sp, #12
{
 800caa0:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800caa2:	f7f3 ff19 	bl	80008d8 <memset>
 800caa6:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
 800caa8:	a803      	add	r0, sp, #12
 800caaa:	f248 0144 	movw	r1, #32836	; 0x8044
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800caae:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
 800cab2:	f7ff fd8f 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800cab6:	4639      	mov	r1, r7
 800cab8:	a803      	add	r0, sp, #12
 800caba:	f004 fd32 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800cabe:	4631      	mov	r1, r6
 800cac0:	a803      	add	r0, sp, #12
 800cac2:	f004 fd36 	bl	8011532 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	aa03      	add	r2, sp, #12
 800cacc:	4629      	mov	r1, r5
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff fda2 	bl	800c618 <bt_mesh_model_send>
}
 800cad4:	b009      	add	sp, #36	; 0x24
 800cad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cad8 <krp_get>:

static void krp_get(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		    struct net_buf_simple *buf)
{
 800cad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cada:	4605      	mov	r5, r0
	struct bt_mesh_subnet *sub;
	u16_t idx;

	idx = net_buf_simple_pull_le16(buf);
 800cadc:	4610      	mov	r0, r2
{
 800cade:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
 800cae0:	f004 fd8b 	bl	80115fa <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800cae4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800cae8:	4604      	mov	r4, r0
	if (idx > 0xfff) {
 800caea:	d20a      	bcs.n	800cb02 <krp_get+0x2a>
		return;
	}

	BT_DBG("idx 0x%04x", idx);

	sub = bt_mesh_subnet_get(idx);
 800caec:	f7fc fef2 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800caf0:	4603      	mov	r3, r0
 800caf2:	b940      	cbnz	r0, 800cb06 <krp_get+0x2e>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
 800caf4:	2204      	movs	r2, #4
	} else {
		send_krp_status(model, ctx, idx, sub->kr_phase,
 800caf6:	9200      	str	r2, [sp, #0]
 800caf8:	4631      	mov	r1, r6
 800cafa:	4622      	mov	r2, r4
 800cafc:	4628      	mov	r0, r5
 800cafe:	f7ff ff16 	bl	800c92e <send_krp_status>
				STATUS_SUCCESS);
	}
}
 800cb02:	b002      	add	sp, #8
 800cb04:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
 800cb06:	7fc3      	ldrb	r3, [r0, #31]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	e7f4      	b.n	800caf6 <krp_get+0x1e>

0800cb0c <node_identity_get>:
{
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	b089      	sub	sp, #36	; 0x24
 800cb10:	4614      	mov	r4, r2
 800cb12:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800cb14:	2214      	movs	r2, #20
{
 800cb16:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800cb18:	a803      	add	r0, sp, #12
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	f7f3 fedc 	bl	80008d8 <memset>
 800cb20:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
 800cb22:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800cb24:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
 800cb28:	f004 fd67 	bl	80115fa <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800cb2c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800cb30:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800cb32:	d21c      	bcs.n	800cb6e <node_identity_get+0x62>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
 800cb34:	f248 0148 	movw	r1, #32840	; 0x8048
 800cb38:	a803      	add	r0, sp, #12
 800cb3a:	f7ff fd4b 	bl	800c5d4 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f7fc fec8 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800cb44:	4604      	mov	r4, r0
 800cb46:	b9a0      	cbnz	r0, 800cb72 <node_identity_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
 800cb48:	2104      	movs	r1, #4
 800cb4a:	a803      	add	r0, sp, #12
 800cb4c:	f004 fce9 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800cb50:	4629      	mov	r1, r5
 800cb52:	a803      	add	r0, sp, #12
 800cb54:	f004 fced 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, node_id);
 800cb58:	4621      	mov	r1, r4
 800cb5a:	a803      	add	r0, sp, #12
 800cb5c:	f004 fce1 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cb60:	2300      	movs	r3, #0
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	aa03      	add	r2, sp, #12
 800cb66:	4639      	mov	r1, r7
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7ff fd55 	bl	800c618 <bt_mesh_model_send>
}
 800cb6e:	b009      	add	sp, #36	; 0x24
 800cb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800cb72:	2100      	movs	r1, #0
 800cb74:	a803      	add	r0, sp, #12
 800cb76:	f004 fcd4 	bl	8011522 <net_buf_simple_add_u8>
		node_id = sub->node_id;
 800cb7a:	f894 4020 	ldrb.w	r4, [r4, #32]
 800cb7e:	e7e7      	b.n	800cb50 <node_identity_get+0x44>

0800cb80 <app_key_get>:
{
 800cb80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb84:	b089      	sub	sp, #36	; 0x24
 800cb86:	4614      	mov	r4, r2
 800cb88:	4606      	mov	r6, r0
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800cb8a:	2214      	movs	r2, #20
{
 800cb8c:	460f      	mov	r7, r1
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800cb8e:	a803      	add	r0, sp, #12
 800cb90:	2100      	movs	r1, #0
 800cb92:	f7f3 fea1 	bl	80008d8 <memset>
 800cb96:	230c      	movs	r3, #12
	get_idx = net_buf_simple_pull_le16(buf);
 800cb98:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800cb9a:	f8ad 3012 	strh.w	r3, [sp, #18]
	get_idx = net_buf_simple_pull_le16(buf);
 800cb9e:	f004 fd2c 	bl	80115fa <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
 800cba2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
 800cba6:	4605      	mov	r5, r0
	if (get_idx > 0xfff) {
 800cba8:	d234      	bcs.n	800cc14 <app_key_get+0x94>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_LIST);
 800cbaa:	f248 0102 	movw	r1, #32770	; 0x8002
 800cbae:	a803      	add	r0, sp, #12
 800cbb0:	f7ff fd10 	bl	800c5d4 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f7fc fe8d 	bl	80098d4 <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	bf0c      	ite	eq
 800cbbe:	2404      	moveq	r4, #4
 800cbc0:	2400      	movne	r4, #0
	net_buf_simple_add_u8(msg, status);
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	a803      	add	r0, sp, #12
 800cbc6:	f004 fcac 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, get_idx);
 800cbca:	4629      	mov	r1, r5
 800cbcc:	a803      	add	r0, sp, #12
 800cbce:	f004 fcb0 	bl	8011532 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
 800cbd2:	b9c4      	cbnz	r4, 800cc06 <app_key_get+0x86>
 800cbd4:	4c14      	ldr	r4, [pc, #80]	; (800cc28 <app_key_get+0xa8>)
 800cbd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cbda:	f104 0850 	add.w	r8, r4, #80	; 0x50
		if (prev == BT_MESH_KEY_UNUSED) {
 800cbde:	4689      	mov	r9, r1
		if (key->net_idx != get_idx) {
 800cbe0:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	d104      	bne.n	800cbf2 <app_key_get+0x72>
		if (prev == BT_MESH_KEY_UNUSED) {
 800cbe8:	4549      	cmp	r1, r9
 800cbea:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
 800cbee:	d114      	bne.n	800cc1a <app_key_get+0x9a>
			prev = key->app_idx;
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	3428      	adds	r4, #40	; 0x28
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
 800cbf4:	45a0      	cmp	r8, r4
 800cbf6:	d1f3      	bne.n	800cbe0 <app_key_get+0x60>
	if (prev != BT_MESH_KEY_UNUSED) {
 800cbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	d002      	beq.n	800cc06 <app_key_get+0x86>
		net_buf_simple_add_le16(msg, prev);
 800cc00:	a803      	add	r0, sp, #12
 800cc02:	f004 fc96 	bl	8011532 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cc06:	2300      	movs	r3, #0
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	aa03      	add	r2, sp, #12
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f7ff fd02 	bl	800c618 <bt_mesh_model_send>
}
 800cc14:	b009      	add	sp, #36	; 0x24
 800cc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		key_idx_pack(msg, prev, key->app_idx);
 800cc1a:	a803      	add	r0, sp, #12
 800cc1c:	f7ff fe78 	bl	800c910 <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
 800cc20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc24:	e7e5      	b.n	800cbf2 <app_key_get+0x72>
 800cc26:	bf00      	nop
 800cc28:	20005b88 	.word	0x20005b88

0800cc2c <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	b088      	sub	sp, #32
 800cc32:	4605      	mov	r5, r0
 800cc34:	4690      	mov	r8, r2
 800cc36:	460e      	mov	r6, r1
	/* Needed size: opcode (1 byte) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cc38:	2218      	movs	r2, #24
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	a802      	add	r0, sp, #8
{
 800cc3e:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cc40:	f7f3 fe4a 	bl	80008d8 <memset>
 800cc44:	230f      	movs	r3, #15
	struct bt_mesh_cfg_srv *cfg = model->user_data;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
 800cc46:	2106      	movs	r1, #6
 800cc48:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cc4a:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800cc4e:	69ac      	ldr	r4, [r5, #24]
	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
 800cc50:	f7ff fcc0 	bl	800c5d4 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800cc54:	4641      	mov	r1, r8
 800cc56:	a802      	add	r0, sp, #8
 800cc58:	f004 fc63 	bl	8011522 <net_buf_simple_add_u8>

	if (orig_msg) {
 800cc5c:	b18f      	cbz	r7, 800cc82 <hb_pub_send_status+0x56>
		memcpy(net_buf_simple_add(msg, sizeof(*orig_msg)), orig_msg,
 800cc5e:	2109      	movs	r1, #9
 800cc60:	a802      	add	r0, sp, #8
 800cc62:	f004 fc4f 	bl	8011504 <net_buf_simple_add>
 800cc66:	2209      	movs	r2, #9
 800cc68:	4639      	mov	r1, r7
 800cc6a:	f7f3 fe09 	bl	8000880 <memcpy>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	aa02      	add	r2, sp, #8
 800cc74:	4631      	mov	r1, r6
 800cc76:	4628      	mov	r0, r5
 800cc78:	f7ff fcce 	bl	800c618 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Publication Status");
	}
}
 800cc7c:	b008      	add	sp, #32
 800cc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(msg, cfg->hb_pub.dst);
 800cc82:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800cc84:	a802      	add	r0, sp, #8
 800cc86:	f004 fc54 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
 800cc8a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	if (!val) {
 800cc8c:	b171      	cbz	r1, 800ccac <hb_pub_send_status+0x80>
	} else if (val == 0x01) {
 800cc8e:	2901      	cmp	r1, #1
 800cc90:	d00c      	beq.n	800ccac <hb_pub_send_status+0x80>
	} else if (val == 0xffff) {
 800cc92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc96:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
 800cc98:	bf1f      	itttt	ne
 800cc9a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800cc9e:	fab1 f181 	clzne	r1, r1
 800cca2:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
 800cca6:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800cca8:	bf08      	it	eq
 800ccaa:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
 800ccac:	a802      	add	r0, sp, #8
 800ccae:	f004 fc38 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.period);
 800ccb2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800ccb6:	a802      	add	r0, sp, #8
 800ccb8:	f004 fc33 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
 800ccbc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800ccc0:	a802      	add	r0, sp, #8
 800ccc2:	f004 fc2e 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
 800ccc6:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800ccc8:	a802      	add	r0, sp, #8
 800ccca:	f004 fc32 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);
 800ccce:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800ccd0:	a802      	add	r0, sp, #8
 800ccd2:	f004 fc2e 	bl	8011532 <net_buf_simple_add_le16>
 800ccd6:	e7ca      	b.n	800cc6e <hb_pub_send_status+0x42>

0800ccd8 <heartbeat_pub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
 800ccd8:	2300      	movs	r3, #0
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7ff bfa6 	b.w	800cc2c <hb_pub_send_status>

0800cce0 <send_mod_sub_status>:
{
 800cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce4:	b088      	sub	sp, #32
 800cce6:	4690      	mov	r8, r2
 800cce8:	4604      	mov	r4, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800ccea:	2218      	movs	r2, #24
{
 800ccec:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800ccee:	a802      	add	r0, sp, #8
 800ccf0:	2100      	movs	r1, #0
{
 800ccf2:	461f      	mov	r7, r3
 800ccf4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800ccf8:	f7f3 fdee 	bl	80008d8 <memset>
 800ccfc:	230f      	movs	r3, #15
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
 800ccfe:	f248 011f 	movw	r1, #32799	; 0x801f
 800cd02:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800cd04:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
 800cd08:	f7ff fc64 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800cd0c:	4641      	mov	r1, r8
 800cd0e:	a802      	add	r0, sp, #8
 800cd10:	f004 fc07 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800cd14:	4639      	mov	r1, r7
 800cd16:	a802      	add	r0, sp, #8
 800cd18:	f004 fc0b 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, sub_addr);
 800cd1c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800cd20:	a802      	add	r0, sp, #8
 800cd22:	f004 fc06 	bl	8011532 <net_buf_simple_add_le16>
	if (vnd) {
 800cd26:	b18e      	cbz	r6, 800cd4c <send_mod_sub_status+0x6c>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800cd28:	2104      	movs	r1, #4
 800cd2a:	a802      	add	r0, sp, #8
 800cd2c:	f004 fbea 	bl	8011504 <net_buf_simple_add>
 800cd30:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800cd32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cd34:	f7f3 fda4 	bl	8000880 <memcpy>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	aa02      	add	r2, sp, #8
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4620      	mov	r0, r4
 800cd42:	f7ff fc69 	bl	800c618 <bt_mesh_model_send>
}
 800cd46:	b008      	add	sp, #32
 800cd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800cd4c:	2102      	movs	r1, #2
 800cd4e:	a802      	add	r0, sp, #8
 800cd50:	f004 fbd8 	bl	8011504 <net_buf_simple_add>
 800cd54:	2202      	movs	r2, #2
 800cd56:	e7ec      	b.n	800cd32 <send_mod_sub_status+0x52>

0800cd58 <krp_set>:
{
 800cd58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd5c:	4680      	mov	r8, r0
	idx = net_buf_simple_pull_le16(buf);
 800cd5e:	4610      	mov	r0, r2
{
 800cd60:	4614      	mov	r4, r2
 800cd62:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
 800cd64:	f004 fc49 	bl	80115fa <net_buf_simple_pull_le16>
 800cd68:	4606      	mov	r6, r0
	phase = net_buf_simple_pull_u8(buf);
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f004 fc3d 	bl	80115ea <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
 800cd70:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
 800cd74:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800cd76:	d215      	bcs.n	800cda4 <krp_set+0x4c>
	sub = bt_mesh_subnet_get(idx);
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7fc fdab 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800cd7e:	4604      	mov	r4, r0
 800cd80:	b940      	cbnz	r0, 800cd94 <krp_set+0x3c>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
 800cd82:	2304      	movs	r3, #4
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
 800cd88:	4632      	mov	r2, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	f7ff fdce 	bl	800c92e <send_krp_status>
 800cd92:	e007      	b.n	800cda4 <krp_set+0x4c>
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
 800cd94:	1eab      	subs	r3, r5, #2
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d803      	bhi.n	800cda4 <krp_set+0x4c>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
 800cd9c:	7fc3      	ldrb	r3, [r0, #31]
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
 800cd9e:	b923      	cbnz	r3, 800cdaa <krp_set+0x52>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
 800cda0:	2d02      	cmp	r5, #2
 800cda2:	d10e      	bne.n	800cdc2 <krp_set+0x6a>
}
 800cda4:	b002      	add	sp, #8
 800cda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d109      	bne.n	800cdc2 <krp_set+0x6a>
 800cdae:	2d02      	cmp	r5, #2
 800cdb0:	d107      	bne.n	800cdc2 <krp_set+0x6a>
		sub->kr_phase = BT_MESH_KR_PHASE_2;
 800cdb2:	77c5      	strb	r5, [r0, #31]
		sub->kr_flag = 1;
 800cdb4:	7783      	strb	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
 800cdb6:	f7fc ff0f 	bl	8009bd8 <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	7fe3      	ldrb	r3, [r4, #31]
 800cdbe:	9200      	str	r2, [sp, #0]
 800cdc0:	e7e2      	b.n	800cd88 <krp_set+0x30>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d8f8      	bhi.n	800cdba <krp_set+0x62>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
 800cdc8:	2d03      	cmp	r5, #3
 800cdca:	d1f6      	bne.n	800cdba <krp_set+0x62>
		bt_mesh_net_revoke_keys(sub);
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7fc ff71 	bl	8009cb4 <bt_mesh_net_revoke_keys>
			friend_cred_refresh(ctx->net_idx);
 800cdd2:	8838      	ldrh	r0, [r7, #0]
 800cdd4:	f7fc fe06 	bl	80099e4 <friend_cred_refresh>
		sub->kr_phase = BT_MESH_KR_NORMAL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	77e3      	strb	r3, [r4, #31]
		sub->kr_flag = 0;
 800cddc:	77a3      	strb	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
 800cdde:	4620      	mov	r0, r4
 800cde0:	e7e9      	b.n	800cdb6 <krp_set+0x5e>

0800cde2 <node_reset>:
{
 800cde2:	b530      	push	{r4, r5, lr}
 800cde4:	b087      	sub	sp, #28
 800cde6:	4604      	mov	r4, r0
 800cde8:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
 800cdea:	2210      	movs	r2, #16
 800cdec:	2100      	movs	r1, #0
 800cdee:	a802      	add	r0, sp, #8
 800cdf0:	f7f3 fd72 	bl	80008d8 <memset>
 800cdf4:	2306      	movs	r3, #6
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
 800cdf6:	a802      	add	r0, sp, #8
 800cdf8:	f248 014a 	movw	r1, #32842	; 0x804a
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
 800cdfc:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
 800ce00:	f7ff fbe8 	bl	800c5d4 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ce04:	2300      	movs	r3, #0
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	aa02      	add	r2, sp, #8
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7ff fc03 	bl	800c618 <bt_mesh_model_send>
	bt_mesh_reset();
 800ce12:	f7fc f8fd 	bl	8009010 <bt_mesh_reset>
}
 800ce16:	b007      	add	sp, #28
 800ce18:	bd30      	pop	{r4, r5, pc}

0800ce1a <mod_sub_get>:
{
 800ce1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1e:	b088      	sub	sp, #32
 800ce20:	4614      	mov	r4, r2
 800ce22:	4607      	mov	r7, r0
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800ce24:	2218      	movs	r2, #24
{
 800ce26:	4688      	mov	r8, r1
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800ce28:	a802      	add	r0, sp, #8
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	f7f3 fd54 	bl	80008d8 <memset>
 800ce30:	230f      	movs	r3, #15
	addr = net_buf_simple_pull_le16(buf);
 800ce32:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800ce34:	f8ad 300e 	strh.w	r3, [sp, #14]
	addr = net_buf_simple_pull_le16(buf);
 800ce38:	f004 fbdf 	bl	80115fa <net_buf_simple_pull_le16>
 800ce3c:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f004 fbdb 	bl	80115fa <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
 800ce44:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
 800ce48:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
 800ce4a:	a802      	add	r0, sp, #8
 800ce4c:	f7ff fbc2 	bl	800c5d4 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
 800ce50:	4628      	mov	r0, r5
 800ce52:	f7ff faef 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800ce56:	b960      	cbnz	r0, 800ce72 <mod_sub_get+0x58>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
 800ce58:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800ce5a:	a802      	add	r0, sp, #8
 800ce5c:	f004 fb61 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
 800ce60:	4629      	mov	r1, r5
 800ce62:	a802      	add	r0, sp, #8
 800ce64:	f004 fb65 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
 800ce68:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800ce6a:	a802      	add	r0, sp, #8
 800ce6c:	f004 fb61 	bl	8011532 <net_buf_simple_add_le16>
 800ce70:	e01a      	b.n	800cea8 <mod_sub_get+0x8e>
	mod = bt_mesh_model_find(elem, id);
 800ce72:	4621      	mov	r1, r4
 800ce74:	f7ff fd31 	bl	800c8da <bt_mesh_model_find>
	if (!mod) {
 800ce78:	4606      	mov	r6, r0
 800ce7a:	b908      	cbnz	r0, 800ce80 <mod_sub_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800ce7c:	2102      	movs	r1, #2
 800ce7e:	e7ec      	b.n	800ce5a <mod_sub_get+0x40>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800ce80:	2100      	movs	r1, #0
 800ce82:	a802      	add	r0, sp, #8
 800ce84:	f004 fb4d 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
 800ce88:	4629      	mov	r1, r5
 800ce8a:	a802      	add	r0, sp, #8
 800ce8c:	f004 fb51 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
 800ce90:	4621      	mov	r1, r4
 800ce92:	a802      	add	r0, sp, #8
 800ce94:	f004 fb4d 	bl	8011532 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800ce98:	89f1      	ldrh	r1, [r6, #14]
 800ce9a:	b111      	cbz	r1, 800cea2 <mod_sub_get+0x88>
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800ce9c:	a802      	add	r0, sp, #8
 800ce9e:	f004 fb48 	bl	8011532 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800cea2:	8a31      	ldrh	r1, [r6, #16]
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d1e0      	bne.n	800ce6a <mod_sub_get+0x50>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cea8:	2300      	movs	r3, #0
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	aa02      	add	r2, sp, #8
 800ceae:	4641      	mov	r1, r8
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	f7ff fbb1 	bl	800c618 <bt_mesh_model_send>
}
 800ceb6:	b008      	add	sp, #32
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cebc <mod_sub_get_vnd>:
{
 800cebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec0:	b08b      	sub	sp, #44	; 0x2c
 800cec2:	4614      	mov	r4, r2
 800cec4:	4680      	mov	r8, r0
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800cec6:	221c      	movs	r2, #28
{
 800cec8:	4689      	mov	r9, r1
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800ceca:	a803      	add	r0, sp, #12
 800cecc:	2100      	movs	r1, #0
 800cece:	f7f3 fd03 	bl	80008d8 <memset>
 800ced2:	2311      	movs	r3, #17
	addr = net_buf_simple_pull_le16(buf);
 800ced4:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800ced6:	f8ad 3012 	strh.w	r3, [sp, #18]
	addr = net_buf_simple_pull_le16(buf);
 800ceda:	f004 fb8e 	bl	80115fa <net_buf_simple_pull_le16>
 800cede:	4606      	mov	r6, r0
	company = net_buf_simple_pull_le16(buf);
 800cee0:	4620      	mov	r0, r4
 800cee2:	f004 fb8a 	bl	80115fa <net_buf_simple_pull_le16>
 800cee6:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
 800cee8:	4620      	mov	r0, r4
 800ceea:	f004 fb86 	bl	80115fa <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
 800ceee:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
 800cef2:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
 800cef4:	a803      	add	r0, sp, #12
 800cef6:	f7ff fb6d 	bl	800c5d4 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
 800cefa:	4630      	mov	r0, r6
 800cefc:	f7ff fa9a 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800cf00:	b980      	cbnz	r0, 800cf24 <mod_sub_get_vnd+0x68>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
 800cf02:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800cf04:	a803      	add	r0, sp, #12
 800cf06:	f004 fb0c 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	a803      	add	r0, sp, #12
 800cf0e:	f004 fb10 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, company);
 800cf12:	4629      	mov	r1, r5
 800cf14:	a803      	add	r0, sp, #12
 800cf16:	f004 fb0c 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
 800cf1a:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800cf1c:	a803      	add	r0, sp, #12
 800cf1e:	f004 fb08 	bl	8011532 <net_buf_simple_add_le16>
 800cf22:	e01f      	b.n	800cf64 <mod_sub_get_vnd+0xa8>
	mod = bt_mesh_model_find_vnd(elem, company, id);
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	f7ff fcc0 	bl	800c8ac <bt_mesh_model_find_vnd>
	if (!mod) {
 800cf2c:	4607      	mov	r7, r0
 800cf2e:	b908      	cbnz	r0, 800cf34 <mod_sub_get_vnd+0x78>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800cf30:	2102      	movs	r1, #2
 800cf32:	e7e7      	b.n	800cf04 <mod_sub_get_vnd+0x48>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800cf34:	2100      	movs	r1, #0
 800cf36:	a803      	add	r0, sp, #12
 800cf38:	f004 faf3 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	a803      	add	r0, sp, #12
 800cf40:	f004 faf7 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, company);
 800cf44:	4629      	mov	r1, r5
 800cf46:	a803      	add	r0, sp, #12
 800cf48:	f004 faf3 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	a803      	add	r0, sp, #12
 800cf50:	f004 faef 	bl	8011532 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800cf54:	89f9      	ldrh	r1, [r7, #14]
 800cf56:	b111      	cbz	r1, 800cf5e <mod_sub_get_vnd+0xa2>
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800cf58:	a803      	add	r0, sp, #12
 800cf5a:	f004 faea 	bl	8011532 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800cf5e:	8a39      	ldrh	r1, [r7, #16]
 800cf60:	2900      	cmp	r1, #0
 800cf62:	d1db      	bne.n	800cf1c <mod_sub_get_vnd+0x60>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	aa03      	add	r2, sp, #12
 800cf6a:	4649      	mov	r1, r9
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	f7ff fb53 	bl	800c618 <bt_mesh_model_send>
}
 800cf72:	b00b      	add	sp, #44	; 0x2c
 800cf74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf78 <_app_key_del>:
{
 800cf78:	b510      	push	{r4, lr}
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
 800cf7a:	1c81      	adds	r1, r0, #2
{
 800cf7c:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
 800cf7e:	4807      	ldr	r0, [pc, #28]	; (800cf9c <_app_key_del+0x24>)
 800cf80:	f7ff f962 	bl	800c248 <bt_mesh_model_foreach>
	key->net_idx = BT_MESH_KEY_UNUSED;
 800cf84:	4620      	mov	r0, r4
 800cf86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf8a:	f820 3b05 	strh.w	r3, [r0], #5
	memset(key->keys, 0, sizeof(key->keys));
 800cf8e:	2222      	movs	r2, #34	; 0x22
 800cf90:	2100      	movs	r1, #0
}
 800cf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(key->keys, 0, sizeof(key->keys));
 800cf96:	f7f3 bc9f 	b.w	80008d8 <memset>
 800cf9a:	bf00      	nop
 800cf9c:	0800dae1 	.word	0x0800dae1

0800cfa0 <net_key_update>:
{
 800cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa4:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
 800cfa6:	4610      	mov	r0, r2
{
 800cfa8:	460f      	mov	r7, r1
 800cfaa:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
 800cfac:	f004 fb25 	bl	80115fa <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800cfb0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800cfb4:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800cfb6:	d23e      	bcs.n	800d036 <net_key_update+0x96>
	sub = bt_mesh_subnet_get(idx);
 800cfb8:	f7fc fc8c 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	b938      	cbnz	r0, 800cfd0 <net_key_update+0x30>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
 800cfc0:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	4630      	mov	r0, r6
}
 800cfc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800cfcc:	f7ff bd60 	b.w	800ca90 <send_net_key_status>
	switch (sub->kr_phase) {
 800cfd0:	7fc3      	ldrb	r3, [r0, #31]
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d819      	bhi.n	800d00a <net_key_update+0x6a>
 800cfd6:	e8df f003 	tbb	[pc, r3]
 800cfda:	0c02      	.short	0x0c02
 800cfdc:	1616      	.short	0x1616
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
 800cfde:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800cfe2:	2210      	movs	r2, #16
 800cfe4:	f8d8 0000 	ldr.w	r0, [r8]
 800cfe8:	f7f3 fc35 	bl	8000856 <memcmp>
 800cfec:	b968      	cbnz	r0, 800d00a <net_key_update+0x6a>
 800cfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
 800cff2:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800cff6:	2210      	movs	r2, #16
 800cff8:	f8d8 0000 	ldr.w	r0, [r8]
 800cffc:	f7f3 fc2b 	bl	8000856 <memcmp>
 800d000:	4603      	mov	r3, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d0dd      	beq.n	800cfc2 <net_key_update+0x22>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
 800d006:	230b      	movs	r3, #11
 800d008:	e7db      	b.n	800cfc2 <net_key_update+0x22>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
 800d00a:	f8d8 1000 	ldr.w	r1, [r8]
 800d00e:	f104 0089 	add.w	r0, r4, #137	; 0x89
 800d012:	f7fc fc7d 	bl	8009910 <bt_mesh_net_keys_create>
	if (!err && (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) ||
 800d016:	b108      	cbz	r0, 800d01c <net_key_update+0x7c>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
 800d018:	2310      	movs	r3, #16
 800d01a:	e7d2      	b.n	800cfc2 <net_key_update+0x22>
		err = friend_cred_update(sub);
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7fc fd05 	bl	8009a2c <friend_cred_update>
	if (err) {
 800d022:	4680      	mov	r8, r0
 800d024:	2800      	cmp	r0, #0
 800d026:	d1f7      	bne.n	800d018 <net_key_update+0x78>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
 800d028:	2301      	movs	r3, #1
 800d02a:	77e3      	strb	r3, [r4, #31]
	bt_mesh_net_beacon_update(sub);
 800d02c:	4620      	mov	r0, r4
 800d02e:	f7fc fdd3 	bl	8009bd8 <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800d032:	4643      	mov	r3, r8
 800d034:	e7c5      	b.n	800cfc2 <net_key_update+0x22>
 800d036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d03c <net_key_add>:
{
 800d03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d040:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
 800d042:	4610      	mov	r0, r2
{
 800d044:	460f      	mov	r7, r1
 800d046:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
 800d048:	f004 fad7 	bl	80115fa <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800d04c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800d050:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800d052:	d241      	bcs.n	800d0d8 <net_key_add+0x9c>
	sub = bt_mesh_subnet_get(idx);
 800d054:	f7fc fc3e 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800d058:	4604      	mov	r4, r0
 800d05a:	b980      	cbnz	r0, 800d07e <net_key_add+0x42>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
 800d05c:	4b1f      	ldr	r3, [pc, #124]	; (800d0dc <net_key_add+0xa0>)
 800d05e:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 800d062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d066:	4291      	cmp	r1, r2
 800d068:	d004      	beq.n	800d074 <net_key_add+0x38>
 800d06a:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
 800d06e:	4291      	cmp	r1, r2
 800d070:	d130      	bne.n	800d0d4 <net_key_add+0x98>
		for (sub = NULL, i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800d072:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
 800d074:	22e4      	movs	r2, #228	; 0xe4
 800d076:	fb02 3404 	mla	r4, r2, r4, r3
 800d07a:	f504 74da 	add.w	r4, r4, #436	; 0x1b4
	if (sub->net_idx == idx) {
 800d07e:	8ba3      	ldrh	r3, [r4, #28]
 800d080:	42ab      	cmp	r3, r5
 800d082:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d086:	d110      	bne.n	800d0aa <net_key_add+0x6e>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
 800d088:	4601      	mov	r1, r0
 800d08a:	2210      	movs	r2, #16
 800d08c:	f8d8 0000 	ldr.w	r0, [r8]
 800d090:	f7f3 fbe1 	bl	8000856 <memcmp>
			status = STATUS_SUCCESS;
 800d094:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
 800d096:	bf14      	ite	ne
 800d098:	2306      	movne	r3, #6
 800d09a:	2300      	moveq	r3, #0
			send_net_key_status(model, ctx, idx,
 800d09c:	462a      	mov	r2, r5
 800d09e:	4639      	mov	r1, r7
 800d0a0:	4630      	mov	r0, r6
}
 800d0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			send_net_key_status(model, ctx, idx,
 800d0a6:	f7ff bcf3 	b.w	800ca90 <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
 800d0aa:	f8d8 1000 	ldr.w	r1, [r8]
 800d0ae:	f7fc fc2f 	bl	8009910 <bt_mesh_net_keys_create>
	if (err) {
 800d0b2:	4680      	mov	r8, r0
 800d0b4:	b108      	cbz	r0, 800d0ba <net_key_add+0x7e>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
 800d0b6:	2310      	movs	r3, #16
 800d0b8:	e7f0      	b.n	800d09c <net_key_add+0x60>
	sub->net_idx = idx;
 800d0ba:	83a5      	strh	r5, [r4, #28]
	bt_mesh_net_beacon_update(sub);
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f7fc fd8b 	bl	8009bd8 <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
 800d0c2:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 800d0c4:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
 800d0c8:	f003 fef0 	bl	8010eac <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
 800d0cc:	f7fc f8ec 	bl	80092a8 <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800d0d0:	4643      	mov	r3, r8
 800d0d2:	e7e3      	b.n	800d09c <net_key_add+0x60>
			send_net_key_status(model, ctx, idx,
 800d0d4:	2305      	movs	r3, #5
 800d0d6:	e7e1      	b.n	800d09c <net_key_add+0x60>
 800d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0dc:	20005b88 	.word	0x20005b88

0800d0e0 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
 800d0e0:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
 800d0e2:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
 800d0e4:	7865      	ldrb	r5, [r4, #1]
 800d0e6:	7823      	ldrb	r3, [r4, #0]
 800d0e8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d0ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0f0:	800b      	strh	r3, [r1, #0]
 800d0f2:	78a1      	ldrb	r1, [r4, #2]
 800d0f4:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
 800d0f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d0fa:	091b      	lsrs	r3, r3, #4
 800d0fc:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
 800d0fe:	2103      	movs	r1, #3
}
 800d100:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
 800d102:	f004 ba6a 	b.w	80115da <net_buf_simple_pull>

0800d106 <app_key_del>:
{
 800d106:	b570      	push	{r4, r5, r6, lr}
 800d108:	b088      	sub	sp, #32
 800d10a:	4614      	mov	r4, r2
 800d10c:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d10e:	2214      	movs	r2, #20
{
 800d110:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d112:	a803      	add	r0, sp, #12
 800d114:	2100      	movs	r1, #0
 800d116:	f7f3 fbdf 	bl	80008d8 <memset>
 800d11a:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d11c:	4620      	mov	r0, r4
 800d11e:	eb0d 0203 	add.w	r2, sp, r3
 800d122:	a902      	add	r1, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d124:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d128:	f7ff ffda 	bl	800d0e0 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
 800d12c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d130:	f7fc fbd0 	bl	80098d4 <bt_mesh_subnet_get>
 800d134:	b330      	cbz	r0, 800d184 <app_key_del+0x7e>
	key = bt_mesh_app_key_find(key_app_idx);
 800d136:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800d13a:	f7fd feeb 	bl	800af14 <bt_mesh_app_key_find>
	if (!key) {
 800d13e:	4604      	mov	r4, r0
 800d140:	b138      	cbz	r0, 800d152 <app_key_del+0x4c>
	if (key->net_idx != key_net_idx) {
 800d142:	8802      	ldrh	r2, [r0, #0]
 800d144:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d11d      	bne.n	800d188 <app_key_del+0x82>
	_app_key_del(key);
 800d14c:	f7ff ff14 	bl	800cf78 <_app_key_del>
	status = STATUS_SUCCESS;
 800d150:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d152:	a803      	add	r0, sp, #12
 800d154:	f248 0103 	movw	r1, #32771	; 0x8003
 800d158:	f7ff fa3c 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d15c:	4621      	mov	r1, r4
 800d15e:	a803      	add	r0, sp, #12
 800d160:	f004 f9df 	bl	8011522 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d164:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d168:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d16c:	a803      	add	r0, sp, #12
 800d16e:	f7ff fbcf 	bl	800c910 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d172:	2300      	movs	r3, #0
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	aa03      	add	r2, sp, #12
 800d178:	4631      	mov	r1, r6
 800d17a:	4628      	mov	r0, r5
 800d17c:	f7ff fa4c 	bl	800c618 <bt_mesh_model_send>
}
 800d180:	b008      	add	sp, #32
 800d182:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
 800d184:	2404      	movs	r4, #4
 800d186:	e7e4      	b.n	800d152 <app_key_del+0x4c>
		status = STATUS_INVALID_BINDING;
 800d188:	2411      	movs	r4, #17
 800d18a:	e7e2      	b.n	800d152 <app_key_del+0x4c>

0800d18c <app_key_set>:
{
 800d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d190:	4606      	mov	r6, r0
 800d192:	4689      	mov	r9, r1
 800d194:	4617      	mov	r7, r2
 800d196:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
 800d198:	f7fc fb9c 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800d19c:	4605      	mov	r5, r0
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d04d      	beq.n	800d23e <app_key_set+0xb2>
	key = bt_mesh_app_key_find(app_idx);
 800d1a2:	4648      	mov	r0, r9
 800d1a4:	f7fd feb6 	bl	800af14 <bt_mesh_app_key_find>
 800d1a8:	4604      	mov	r4, r0
	if (update) {
 800d1aa:	f1ba 0f00 	cmp.w	sl, #0
 800d1ae:	d026      	beq.n	800d1fe <app_key_set+0x72>
		if (!key) {
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d051      	beq.n	800d258 <app_key_set+0xcc>
		if (key->net_idx != net_idx) {
 800d1b4:	8803      	ldrh	r3, [r0, #0]
 800d1b6:	42b3      	cmp	r3, r6
 800d1b8:	d151      	bne.n	800d25e <app_key_set+0xd2>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
 800d1ba:	7feb      	ldrb	r3, [r5, #31]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d002      	beq.n	800d1c6 <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
 800d1c0:	200b      	movs	r0, #11
 800d1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
 800d1c6:	7902      	ldrb	r2, [r0, #4]
 800d1c8:	b14a      	cbz	r2, 800d1de <app_key_set+0x52>
			if (memcmp(keys->val, val, 16)) {
 800d1ca:	2210      	movs	r2, #16
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	3017      	adds	r0, #23
 800d1d0:	f7f3 fb41 	bl	8000856 <memcmp>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d1f3      	bne.n	800d1c0 <app_key_set+0x34>
				return STATUS_SUCCESS;
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		keys = &key->keys[1];
 800d1de:	f100 0816 	add.w	r8, r0, #22
		key->updated = true;
 800d1e2:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f7fe fde2 	bl	800bdb0 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
 800d1ec:	b350      	cbz	r0, 800d244 <app_key_set+0xb8>
		if (update) {
 800d1ee:	f1ba 0f00 	cmp.w	sl, #0
 800d1f2:	d001      	beq.n	800d1f8 <app_key_set+0x6c>
			key->updated = false;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
 800d1f8:	2009      	movs	r0, #9
 800d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key) {
 800d1fe:	b968      	cbnz	r0, 800d21c <app_key_set+0x90>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
 800d200:	4c1c      	ldr	r4, [pc, #112]	; (800d274 <app_key_set+0xe8>)
 800d202:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 800d206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d02a      	beq.n	800d264 <app_key_set+0xd8>
 800d20e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 800d212:	429a      	cmp	r2, r3
 800d214:	d02b      	beq.n	800d26e <app_key_set+0xe2>
			return STATUS_INSUFF_RESOURCES;
 800d216:	2005      	movs	r0, #5
 800d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (key->net_idx == net_idx &&
 800d21c:	8803      	ldrh	r3, [r0, #0]
 800d21e:	42b3      	cmp	r3, r6
 800d220:	d005      	beq.n	800d22e <app_key_set+0xa2>
			if (key->net_idx == net_idx) {
 800d222:	8823      	ldrh	r3, [r4, #0]
 800d224:	42b3      	cmp	r3, r6
 800d226:	d10a      	bne.n	800d23e <app_key_set+0xb2>
				return STATUS_IDX_ALREADY_STORED;
 800d228:	2006      	movs	r0, #6
 800d22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			    !memcmp(key->keys[0].val, val, 16)) {
 800d22e:	2210      	movs	r2, #16
 800d230:	4639      	mov	r1, r7
 800d232:	3006      	adds	r0, #6
 800d234:	f7f3 fb0f 	bl	8000856 <memcmp>
			if (key->net_idx == net_idx &&
 800d238:	2800      	cmp	r0, #0
 800d23a:	d1f2      	bne.n	800d222 <app_key_set+0x96>
 800d23c:	e7cc      	b.n	800d1d8 <app_key_set+0x4c>
				return STATUS_INVALID_NETKEY;
 800d23e:	2004      	movs	r0, #4
 800d240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	key->net_idx = net_idx;
 800d244:	8026      	strh	r6, [r4, #0]
	key->app_idx = app_idx;
 800d246:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
 800d24a:	2210      	movs	r2, #16
 800d24c:	4639      	mov	r1, r7
 800d24e:	f108 0001 	add.w	r0, r8, #1
 800d252:	f7f3 fb15 	bl	8000880 <memcpy>
 800d256:	e7bf      	b.n	800d1d8 <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
 800d258:	2003      	movs	r0, #3
 800d25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return STATUS_INVALID_BINDING;
 800d25e:	2011      	movs	r0, #17
 800d260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800d264:	f504 74b2 	add.w	r4, r4, #356	; 0x164
		keys = &key->keys[0];
 800d268:	f104 0805 	add.w	r8, r4, #5
 800d26c:	e7ba      	b.n	800d1e4 <app_key_set+0x58>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800d26e:	f504 74c6 	add.w	r4, r4, #396	; 0x18c
 800d272:	e7f9      	b.n	800d268 <app_key_set+0xdc>
 800d274:	20005b88 	.word	0x20005b88

0800d278 <app_key_update>:
{
 800d278:	b570      	push	{r4, r5, r6, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	4614      	mov	r4, r2
 800d27e:	4605      	mov	r5, r0
 800d280:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d282:	2214      	movs	r2, #20
 800d284:	2100      	movs	r1, #0
 800d286:	a803      	add	r0, sp, #12
 800d288:	f7f3 fb26 	bl	80008d8 <memset>
 800d28c:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d28e:	eb0d 0203 	add.w	r2, sp, r3
 800d292:	a902      	add	r1, sp, #8
 800d294:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d296:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d29a:	f7ff ff21 	bl	800d0e0 <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d29e:	a803      	add	r0, sp, #12
 800d2a0:	f248 0103 	movw	r1, #32771	; 0x8003
 800d2a4:	f7ff f996 	bl	800c5d4 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	6822      	ldr	r2, [r4, #0]
 800d2ac:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d2b0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d2b4:	f7ff ff6a 	bl	800d18c <app_key_set>
	net_buf_simple_add_u8(msg, status);
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	a803      	add	r0, sp, #12
 800d2bc:	f004 f931 	bl	8011522 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d2c0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d2c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d2c8:	a803      	add	r0, sp, #12
 800d2ca:	f7ff fb21 	bl	800c910 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	aa03      	add	r2, sp, #12
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	f7ff f99e 	bl	800c618 <bt_mesh_model_send>
}
 800d2dc:	b008      	add	sp, #32
 800d2de:	bd70      	pop	{r4, r5, r6, pc}

0800d2e0 <app_key_add>:
{
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	4614      	mov	r4, r2
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d2ea:	2214      	movs	r2, #20
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	a803      	add	r0, sp, #12
 800d2f0:	f7f3 faf2 	bl	80008d8 <memset>
 800d2f4:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d2f6:	eb0d 0203 	add.w	r2, sp, r3
 800d2fa:	a902      	add	r1, sp, #8
 800d2fc:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d2fe:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d302:	f7ff feed 	bl	800d0e0 <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d306:	a803      	add	r0, sp, #12
 800d308:	f248 0103 	movw	r1, #32771	; 0x8003
 800d30c:	f7ff f962 	bl	800c5d4 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
 800d310:	2300      	movs	r3, #0
 800d312:	6822      	ldr	r2, [r4, #0]
 800d314:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d318:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d31c:	f7ff ff36 	bl	800d18c <app_key_set>
	net_buf_simple_add_u8(msg, status);
 800d320:	4601      	mov	r1, r0
 800d322:	a803      	add	r0, sp, #12
 800d324:	f004 f8fd 	bl	8011522 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d328:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d32c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d330:	a803      	add	r0, sp, #12
 800d332:	f7ff faed 	bl	800c910 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d336:	2300      	movs	r3, #0
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	aa03      	add	r2, sp, #12
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	f7ff f96a 	bl	800c618 <bt_mesh_model_send>
}
 800d344:	b008      	add	sp, #32
 800d346:	bd70      	pop	{r4, r5, r6, pc}

0800d348 <create_mod_app_status.isra.4>:
static void create_mod_app_status(struct net_buf_simple *msg,
 800d348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d34c:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800d350:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d352:	4604      	mov	r4, r0
 800d354:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
 800d356:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
 800d35a:	4690      	mov	r8, r2
 800d35c:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
 800d35e:	f7ff f939 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d362:	4649      	mov	r1, r9
 800d364:	4620      	mov	r0, r4
 800d366:	f004 f8dc 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d36a:	4641      	mov	r1, r8
 800d36c:	4620      	mov	r0, r4
 800d36e:	f004 f8e0 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
 800d372:	4639      	mov	r1, r7
 800d374:	4620      	mov	r0, r4
 800d376:	f004 f8dc 	bl	8011532 <net_buf_simple_add_le16>
	if (vnd) {
 800d37a:	b14e      	cbz	r6, 800d390 <create_mod_app_status.isra.4+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800d37c:	2104      	movs	r1, #4
 800d37e:	4620      	mov	r0, r4
 800d380:	f004 f8c0 	bl	8011504 <net_buf_simple_add>
 800d384:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d386:	4629      	mov	r1, r5
}
 800d388:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d38c:	f7f3 ba78 	b.w	8000880 <memcpy>
 800d390:	2102      	movs	r1, #2
 800d392:	4620      	mov	r0, r4
 800d394:	f004 f8b6 	bl	8011504 <net_buf_simple_add>
 800d398:	2202      	movs	r2, #2
 800d39a:	e7f4      	b.n	800d386 <create_mod_app_status.isra.4+0x3e>

0800d39c <send_mod_pub_status.isra.6>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	b08a      	sub	sp, #40	; 0x28
 800d3a2:	4692      	mov	sl, r2
 800d3a4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800d3a8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 800d3ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d3ae:	221c      	movs	r2, #28
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d3b4:	a803      	add	r0, sp, #12
 800d3b6:	2100      	movs	r1, #0
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d3b8:	4699      	mov	r9, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d3ba:	f7f3 fa8d 	bl	80008d8 <memset>
 800d3be:	2314      	movs	r3, #20
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
 800d3c0:	f248 0119 	movw	r1, #32793	; 0x8019
 800d3c4:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d3c6:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
 800d3ca:	f7ff f903 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	a803      	add	r0, sp, #12
 800d3d2:	f004 f8a6 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d3d6:	4651      	mov	r1, sl
 800d3d8:	a803      	add	r0, sp, #12
 800d3da:	f004 f8aa 	bl	8011532 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
 800d3de:	b1e5      	cbz	r5, 800d41a <send_mod_pub_status.isra.6+0x7e>
		memset(net_buf_simple_add(msg, 7), 0, 7);
 800d3e0:	2107      	movs	r1, #7
 800d3e2:	a803      	add	r0, sp, #12
 800d3e4:	f004 f88e 	bl	8011504 <net_buf_simple_add>
 800d3e8:	2207      	movs	r2, #7
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	f7f3 fa74 	bl	80008d8 <memset>
	if (vnd) {
 800d3f0:	f1b8 0f00 	cmp.w	r8, #0
 800d3f4:	d02f      	beq.n	800d456 <send_mod_pub_status.isra.6+0xba>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800d3f6:	2104      	movs	r1, #4
 800d3f8:	a803      	add	r0, sp, #12
 800d3fa:	f004 f883 	bl	8011504 <net_buf_simple_add>
 800d3fe:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d400:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d402:	f7f3 fa3d 	bl	8000880 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, msg, NULL, NULL)) {
 800d406:	2300      	movs	r3, #0
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	aa03      	add	r2, sp, #12
 800d40c:	4639      	mov	r1, r7
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff f902 	bl	800c618 <bt_mesh_model_send>
}
 800d414:	b00a      	add	sp, #40	; 0x28
 800d416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(msg, pub_addr);
 800d41a:	4649      	mov	r1, r9
 800d41c:	a803      	add	r0, sp, #12
 800d41e:	f004 f888 	bl	8011532 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
 800d422:	6822      	ldr	r2, [r4, #0]
 800d424:	7ad3      	ldrb	r3, [r2, #11]
 800d426:	88d1      	ldrh	r1, [r2, #6]
 800d428:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(msg, idx_cred);
 800d42c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800d430:	a803      	add	r0, sp, #12
 800d432:	f004 f87e 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, mod->pub->ttl);
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	a803      	add	r0, sp, #12
 800d43a:	7a19      	ldrb	r1, [r3, #8]
 800d43c:	f004 f871 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->period);
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	a803      	add	r0, sp, #12
 800d444:	7a99      	ldrb	r1, [r3, #10]
 800d446:	f004 f86c 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->retransmit);
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	a803      	add	r0, sp, #12
 800d44e:	7a59      	ldrb	r1, [r3, #9]
 800d450:	f004 f867 	bl	8011522 <net_buf_simple_add_u8>
 800d454:	e7cc      	b.n	800d3f0 <send_mod_pub_status.isra.6+0x54>
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d456:	2102      	movs	r1, #2
 800d458:	a803      	add	r0, sp, #12
 800d45a:	f004 f853 	bl	8011504 <net_buf_simple_add>
 800d45e:	2202      	movs	r2, #2
 800d460:	e7ce      	b.n	800d400 <send_mod_pub_status.isra.6+0x64>

0800d462 <get_model>:
{
 800d462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
 800d464:	888b      	ldrh	r3, [r1, #4]
 800d466:	2b03      	cmp	r3, #3
{
 800d468:	4605      	mov	r5, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
 800d46e:	4608      	mov	r0, r1
	if (buf->len < 4) {
 800d470:	d809      	bhi.n	800d486 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
 800d472:	f004 f8c2 	bl	80115fa <net_buf_simple_pull_le16>
		*vnd = false;
 800d476:	2300      	movs	r3, #0
 800d478:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
 800d47a:	4601      	mov	r1, r0
 800d47c:	4628      	mov	r0, r5
}
 800d47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
 800d482:	f7ff ba2a 	b.w	800c8da <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
 800d486:	f004 f8b8 	bl	80115fa <net_buf_simple_pull_le16>
 800d48a:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
 800d48c:	4620      	mov	r0, r4
 800d48e:	f004 f8b4 	bl	80115fa <net_buf_simple_pull_le16>
		*vnd = true;
 800d492:	2301      	movs	r3, #1
 800d494:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
 800d496:	4602      	mov	r2, r0
 800d498:	4639      	mov	r1, r7
 800d49a:	4628      	mov	r0, r5
}
 800d49c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
 800d4a0:	f7ff ba04 	b.w	800c8ac <bt_mesh_model_find_vnd>

0800d4a4 <mod_app_get>:
{
 800d4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4a8:	b08b      	sub	sp, #44	; 0x2c
 800d4aa:	4615      	mov	r5, r2
 800d4ac:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d4ae:	221c      	movs	r2, #28
{
 800d4b0:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d4b2:	a803      	add	r0, sp, #12
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	f7f3 fa0f 	bl	80008d8 <memset>
 800d4ba:	2311      	movs	r3, #17
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4bc:	4628      	mov	r0, r5
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d4be:	f8ad 3012 	strh.w	r3, [sp, #18]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4c2:	f004 f89a 	bl	80115fa <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d4c6:	682e      	ldr	r6, [r5, #0]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4c8:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d4ca:	f7fe ffb3 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	bb88      	cbnz	r0, 800d536 <mod_app_get+0x92>
		vnd = (buf->len == 4);
 800d4d2:	88ab      	ldrh	r3, [r5, #4]
 800d4d4:	1f1a      	subs	r2, r3, #4
 800d4d6:	4253      	negs	r3, r2
 800d4d8:	4153      	adcs	r3, r2
 800d4da:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
 800d4de:	2501      	movs	r5, #1
	if (vnd) {
 800d4e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d4e4:	b393      	cbz	r3, 800d54c <mod_app_get+0xa8>
		bt_mesh_model_msg_init(msg, OP_VND_MOD_APP_LIST);
 800d4e6:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
 800d4ea:	a803      	add	r0, sp, #12
 800d4ec:	f7ff f872 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	a803      	add	r0, sp, #12
 800d4f4:	f004 f815 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	a803      	add	r0, sp, #12
 800d4fc:	f004 f819 	bl	8011532 <net_buf_simple_add_le16>
	if (vnd) {
 800d500:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d504:	b32b      	cbz	r3, 800d552 <mod_app_get+0xae>
		net_buf_simple_add_mem(msg, mod_id, 4);
 800d506:	2204      	movs	r2, #4
		net_buf_simple_add_mem(msg, mod_id, 2);
 800d508:	4631      	mov	r1, r6
 800d50a:	a803      	add	r0, sp, #12
 800d50c:	f004 f800 	bl	8011510 <net_buf_simple_add_mem>
	if (mod) {
 800d510:	b13c      	cbz	r4, 800d522 <mod_app_get+0x7e>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
 800d512:	89a1      	ldrh	r1, [r4, #12]
 800d514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d518:	4299      	cmp	r1, r3
 800d51a:	d002      	beq.n	800d522 <mod_app_get+0x7e>
				net_buf_simple_add_le16(msg, mod->keys[i]);
 800d51c:	a803      	add	r0, sp, #12
 800d51e:	f004 f808 	bl	8011532 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d522:	2300      	movs	r3, #0
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	aa03      	add	r2, sp, #12
 800d528:	4641      	mov	r1, r8
 800d52a:	4638      	mov	r0, r7
 800d52c:	f7ff f874 	bl	800c618 <bt_mesh_model_send>
}
 800d530:	b00b      	add	sp, #44	; 0x2c
 800d532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800d536:	4629      	mov	r1, r5
 800d538:	f10d 020b 	add.w	r2, sp, #11
 800d53c:	f7ff ff91 	bl	800d462 <get_model>
	status = STATUS_SUCCESS;
 800d540:	4604      	mov	r4, r0
 800d542:	2800      	cmp	r0, #0
 800d544:	bf0c      	ite	eq
 800d546:	2502      	moveq	r5, #2
 800d548:	2500      	movne	r5, #0
 800d54a:	e7c9      	b.n	800d4e0 <mod_app_get+0x3c>
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
 800d54c:	f248 014c 	movw	r1, #32844	; 0x804c
 800d550:	e7cb      	b.n	800d4ea <mod_app_get+0x46>
		net_buf_simple_add_mem(msg, mod_id, 2);
 800d552:	2202      	movs	r2, #2
 800d554:	e7d8      	b.n	800d508 <mod_app_get+0x64>

0800d556 <mod_sub_del_all>:
{
 800d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55a:	4605      	mov	r5, r0
 800d55c:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d55e:	4610      	mov	r0, r2
{
 800d560:	4614      	mov	r4, r2
 800d562:	460e      	mov	r6, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d564:	f004 f849 	bl	80115fa <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d568:	f8d4 8000 	ldr.w	r8, [r4]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d56c:	4607      	mov	r7, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d56e:	f7fe ff61 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d572:	b9a8      	cbnz	r0, 800d5a0 <mod_sub_del_all+0x4a>
		vnd = (buf->len == 4);
 800d574:	88a3      	ldrh	r3, [r4, #4]
 800d576:	1f1a      	subs	r2, r3, #4
 800d578:	4253      	negs	r3, r2
 800d57a:	4153      	adcs	r3, r2
 800d57c:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d580:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
 800d582:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	2300      	movs	r3, #0
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d590:	463b      	mov	r3, r7
 800d592:	4631      	mov	r1, r6
 800d594:	4628      	mov	r0, r5
 800d596:	f7ff fba3 	bl	800cce0 <send_mod_sub_status>
}
 800d59a:	b006      	add	sp, #24
 800d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
 800d5a0:	f10d 0217 	add.w	r2, sp, #23
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f7ff ff5c 	bl	800d462 <get_model>
	if (!mod) {
 800d5aa:	b130      	cbz	r0, 800d5ba <mod_sub_del_all+0x64>
	memset(mod->groups, 0, sizeof(mod->groups));
 800d5ac:	2204      	movs	r2, #4
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	300e      	adds	r0, #14
 800d5b2:	f7f3 f991 	bl	80008d8 <memset>
	status = STATUS_SUCCESS;
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	e7e3      	b.n	800d582 <mod_sub_del_all+0x2c>
		status = STATUS_INVALID_MODEL;
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	e7e1      	b.n	800d582 <mod_sub_del_all+0x2c>

0800d5be <mod_sub_overwrite>:
{
 800d5be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5c2:	4607      	mov	r7, r0
 800d5c4:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d5c6:	4610      	mov	r0, r2
{
 800d5c8:	4614      	mov	r4, r2
 800d5ca:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d5cc:	f004 f815 	bl	80115fa <net_buf_simple_pull_le16>
 800d5d0:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f004 f811 	bl	80115fa <net_buf_simple_pull_le16>
 800d5d8:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d5da:	4630      	mov	r0, r6
	mod_id = buf->data;
 800d5dc:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800d5e0:	f7fe ff28 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d5e4:	b938      	cbnz	r0, 800d5f6 <mod_sub_overwrite+0x38>
		vnd = (buf->len == 4);
 800d5e6:	88a3      	ldrh	r3, [r4, #4]
 800d5e8:	1f1a      	subs	r2, r3, #4
 800d5ea:	4253      	negs	r3, r2
 800d5ec:	4153      	adcs	r3, r2
 800d5ee:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	e013      	b.n	800d61e <mod_sub_overwrite+0x60>
	mod = get_model(elem, buf, &vnd);
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	f10d 0217 	add.w	r2, sp, #23
 800d5fc:	f7ff ff31 	bl	800d462 <get_model>
	if (!mod) {
 800d600:	4604      	mov	r4, r0
 800d602:	b1c8      	cbz	r0, 800d638 <mod_sub_overwrite+0x7a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d604:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
 800d608:	b29b      	uxth	r3, r3
 800d60a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d60e:	d8f0      	bhi.n	800d5f2 <mod_sub_overwrite+0x34>
	memset(mod->groups, 0, sizeof(mod->groups));
 800d610:	2204      	movs	r2, #4
 800d612:	2100      	movs	r1, #0
 800d614:	300e      	adds	r0, #14
 800d616:	f7f3 f95f 	bl	80008d8 <memset>
		mod->groups[0] = sub_addr;
 800d61a:	81e5      	strh	r5, [r4, #14]
		status = STATUS_SUCCESS;
 800d61c:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d61e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d622:	9302      	str	r3, [sp, #8]
 800d624:	e88d 0220 	stmia.w	sp, {r5, r9}
 800d628:	4633      	mov	r3, r6
 800d62a:	4641      	mov	r1, r8
 800d62c:	4638      	mov	r0, r7
 800d62e:	f7ff fb57 	bl	800cce0 <send_mod_sub_status>
}
 800d632:	b007      	add	sp, #28
 800d634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
 800d638:	2202      	movs	r2, #2
 800d63a:	e7f0      	b.n	800d61e <mod_sub_overwrite+0x60>

0800d63c <mod_pub_get>:
{
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	4604      	mov	r4, r0
 800d642:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d644:	4610      	mov	r0, r2
{
 800d646:	4690      	mov	r8, r2
 800d648:	460d      	mov	r5, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d64a:	f003 ffd6 	bl	80115fa <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d64e:	f8d8 7000 	ldr.w	r7, [r8]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d652:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d654:	f7fe feee 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d658:	4603      	mov	r3, r0
 800d65a:	b9b0      	cbnz	r0, 800d68a <mod_pub_get+0x4e>
		vnd = (buf->len == 4);
 800d65c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d660:	1f11      	subs	r1, r2, #4
 800d662:	424a      	negs	r2, r1
 800d664:	414a      	adcs	r2, r1
 800d666:	f88d 2017 	strb.w	r2, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d66a:	2201      	movs	r2, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800d66c:	9202      	str	r2, [sp, #8]
 800d66e:	3008      	adds	r0, #8
 800d670:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d674:	9001      	str	r0, [sp, #4]
 800d676:	9200      	str	r2, [sp, #0]
 800d678:	9703      	str	r7, [sp, #12]
 800d67a:	4632      	mov	r2, r6
 800d67c:	4629      	mov	r1, r5
 800d67e:	4620      	mov	r0, r4
 800d680:	f7ff fe8c 	bl	800d39c <send_mod_pub_status.isra.6>
}
 800d684:	b006      	add	sp, #24
 800d686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
 800d68a:	f10d 0217 	add.w	r2, sp, #23
 800d68e:	4641      	mov	r1, r8
 800d690:	f7ff fee7 	bl	800d462 <get_model>
	if (!mod) {
 800d694:	b120      	cbz	r0, 800d6a0 <mod_pub_get+0x64>
	if (!mod->pub) {
 800d696:	6883      	ldr	r3, [r0, #8]
 800d698:	b12b      	cbz	r3, 800d6a6 <mod_pub_get+0x6a>
	pub_addr = mod->pub->addr;
 800d69a:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
 800d69c:	2200      	movs	r2, #0
 800d69e:	e7e5      	b.n	800d66c <mod_pub_get+0x30>
		status = STATUS_INVALID_MODEL;
 800d6a0:	2202      	movs	r2, #2
	u16_t elem_addr, pub_addr = 0;
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	e7e2      	b.n	800d66c <mod_pub_get+0x30>
		status = STATUS_NVAL_PUB_PARAM;
 800d6a6:	2207      	movs	r2, #7
 800d6a8:	e7e0      	b.n	800d66c <mod_pub_get+0x30>
	...

0800d6ac <mod_sub_va_del>:
{
 800d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	4607      	mov	r7, r0
 800d6b2:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d6b4:	4610      	mov	r0, r2
{
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d6ba:	f003 ff9e 	bl	80115fa <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800d6be:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800d6c0:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
 800d6c2:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800d6c4:	f8d4 a000 	ldr.w	sl, [r4]
	net_buf_simple_pull(buf, 16);
 800d6c8:	f003 ff87 	bl	80115da <net_buf_simple_pull>
	mod_id = buf->data;
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7fe feaf 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	b9a0      	cbnz	r0, 800d704 <mod_sub_va_del+0x58>
		vnd = (buf->len == 4);
 800d6da:	88a3      	ldrh	r3, [r4, #4]
 800d6dc:	1f1a      	subs	r2, r3, #4
 800d6de:	4253      	negs	r3, r2
 800d6e0:	4153      	adcs	r3, r2
 800d6e2:	f88d 301f 	strb.w	r3, [sp, #31]
		status = STATUS_INVALID_ADDRESS;
 800d6e6:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d6e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d6ec:	9302      	str	r3, [sp, #8]
 800d6ee:	9b05      	ldr	r3, [sp, #20]
 800d6f0:	9301      	str	r3, [sp, #4]
 800d6f2:	9500      	str	r5, [sp, #0]
 800d6f4:	4633      	mov	r3, r6
 800d6f6:	4641      	mov	r1, r8
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff faf1 	bl	800cce0 <send_mod_sub_status>
}
 800d6fe:	b009      	add	sp, #36	; 0x24
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800d704:	f10d 021f 	add.w	r2, sp, #31
 800d708:	4621      	mov	r1, r4
 800d70a:	f7ff feaa 	bl	800d462 <get_model>
	if (!mod) {
 800d70e:	4683      	mov	fp, r0
 800d710:	b330      	cbz	r0, 800d760 <mod_sub_va_del+0xb4>
 800d712:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800d76c <mod_sub_va_del+0xc0>
 800d716:	2500      	movs	r5, #0
		if (!BT_MESH_ADDR_IS_VIRTUAL(labels[i].addr)) {
 800d718:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 800d71c:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 800d720:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d724:	d20e      	bcs.n	800d744 <mod_sub_va_del+0x98>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
 800d726:	2210      	movs	r2, #16
 800d728:	4651      	mov	r1, sl
 800d72a:	4648      	mov	r0, r9
 800d72c:	f7f3 f893 	bl	8000856 <memcmp>
 800d730:	4604      	mov	r4, r0
 800d732:	b938      	cbnz	r0, 800d744 <mod_sub_va_del+0x98>
			return labels[i].addr;
 800d734:	2312      	movs	r3, #18
 800d736:	435d      	muls	r5, r3
 800d738:	4b0b      	ldr	r3, [pc, #44]	; (800d768 <mod_sub_va_del+0xbc>)
 800d73a:	5b5d      	ldrh	r5, [r3, r5]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d73c:	b945      	cbnz	r5, 800d750 <mod_sub_va_del+0xa4>
		status = STATUS_CANNOT_REMOVE;
 800d73e:	220c      	movs	r2, #12
 800d740:	2500      	movs	r5, #0
 800d742:	e7d1      	b.n	800d6e8 <mod_sub_va_del+0x3c>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800d744:	3501      	adds	r5, #1
 800d746:	2d03      	cmp	r5, #3
 800d748:	f109 0912 	add.w	r9, r9, #18
 800d74c:	d1e4      	bne.n	800d718 <mod_sub_va_del+0x6c>
 800d74e:	e7f6      	b.n	800d73e <mod_sub_va_del+0x92>
	match = bt_mesh_model_find_group(mod, sub_addr);
 800d750:	4629      	mov	r1, r5
 800d752:	4658      	mov	r0, fp
 800d754:	f7fe fe34 	bl	800c3c0 <bt_mesh_model_find_group>
	if (match) {
 800d758:	b120      	cbz	r0, 800d764 <mod_sub_va_del+0xb8>
		*match = BT_MESH_ADDR_UNASSIGNED;
 800d75a:	8004      	strh	r4, [r0, #0]
		status = STATUS_SUCCESS;
 800d75c:	4622      	mov	r2, r4
 800d75e:	e7c3      	b.n	800d6e8 <mod_sub_va_del+0x3c>
		status = STATUS_INVALID_MODEL;
 800d760:	2202      	movs	r2, #2
 800d762:	e7ed      	b.n	800d740 <mod_sub_va_del+0x94>
		status = STATUS_CANNOT_REMOVE;
 800d764:	220c      	movs	r2, #12
 800d766:	e7bf      	b.n	800d6e8 <mod_sub_va_del+0x3c>
 800d768:	20000d94 	.word	0x20000d94
 800d76c:	20000d96 	.word	0x20000d96

0800d770 <mod_sub_del>:
{
 800d770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d774:	4607      	mov	r7, r0
 800d776:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d778:	4610      	mov	r0, r2
{
 800d77a:	4614      	mov	r4, r2
 800d77c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d77e:	f003 ff3c 	bl	80115fa <net_buf_simple_pull_le16>
 800d782:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d784:	4620      	mov	r0, r4
 800d786:	f003 ff38 	bl	80115fa <net_buf_simple_pull_le16>
 800d78a:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d78c:	4630      	mov	r0, r6
	mod_id = buf->data;
 800d78e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800d792:	f7fe fe4f 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d796:	b938      	cbnz	r0, 800d7a8 <mod_sub_del+0x38>
		vnd = (buf->len == 4);
 800d798:	88a3      	ldrh	r3, [r4, #4]
 800d79a:	1f1a      	subs	r2, r3, #4
 800d79c:	4253      	negs	r3, r2
 800d79e:	4153      	adcs	r3, r2
 800d7a0:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	e011      	b.n	800d7cc <mod_sub_del+0x5c>
	mod = get_model(elem, buf, &vnd);
 800d7a8:	f10d 0217 	add.w	r2, sp, #23
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f7ff fe58 	bl	800d462 <get_model>
	if (!mod) {
 800d7b2:	b1c0      	cbz	r0, 800d7e6 <mod_sub_del+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d7b4:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d7be:	d8f1      	bhi.n	800d7a4 <mod_sub_del+0x34>
	match = bt_mesh_model_find_group(mod, sub_addr);
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7fe fdfd 	bl	800c3c0 <bt_mesh_model_find_group>
 800d7c6:	2200      	movs	r2, #0
	if (match) {
 800d7c8:	b178      	cbz	r0, 800d7ea <mod_sub_del+0x7a>
		*match = BT_MESH_ADDR_UNASSIGNED;
 800d7ca:	8002      	strh	r2, [r0, #0]
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d7cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d7d0:	9302      	str	r3, [sp, #8]
 800d7d2:	e88d 0220 	stmia.w	sp, {r5, r9}
 800d7d6:	4633      	mov	r3, r6
 800d7d8:	4641      	mov	r1, r8
 800d7da:	4638      	mov	r0, r7
 800d7dc:	f7ff fa80 	bl	800cce0 <send_mod_sub_status>
}
 800d7e0:	b007      	add	sp, #28
 800d7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	e7f0      	b.n	800d7cc <mod_sub_del+0x5c>
	status = STATUS_SUCCESS;
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	e7ee      	b.n	800d7cc <mod_sub_del+0x5c>

0800d7ee <mod_sub_add>:
{
 800d7ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d7f6:	4610      	mov	r0, r2
{
 800d7f8:	4691      	mov	r9, r2
 800d7fa:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d7fc:	f003 fefd 	bl	80115fa <net_buf_simple_pull_le16>
 800d800:	4605      	mov	r5, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d802:	4648      	mov	r0, r9
 800d804:	f003 fef9 	bl	80115fa <net_buf_simple_pull_le16>
 800d808:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d80a:	4628      	mov	r0, r5
	mod_id = buf->data;
 800d80c:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
 800d810:	f7fe fe10 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d814:	b940      	cbnz	r0, 800d828 <mod_sub_add+0x3a>
		vnd = (buf->len == 4);
 800d816:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800d81a:	1f1a      	subs	r2, r3, #4
 800d81c:	4253      	negs	r3, r2
 800d81e:	4153      	adcs	r3, r2
 800d820:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d824:	2201      	movs	r2, #1
 800d826:	e01e      	b.n	800d866 <mod_sub_add+0x78>
	mod = get_model(elem, buf, &vnd);
 800d828:	4649      	mov	r1, r9
 800d82a:	f10d 0217 	add.w	r2, sp, #23
 800d82e:	f7ff fe18 	bl	800d462 <get_model>
	if (!mod) {
 800d832:	4681      	mov	r9, r0
 800d834:	b1b0      	cbz	r0, 800d864 <mod_sub_add+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d836:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d840:	d8f0      	bhi.n	800d824 <mod_sub_add+0x36>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
 800d842:	4621      	mov	r1, r4
 800d844:	f7fe fdbc 	bl	800c3c0 <bt_mesh_model_find_group>
 800d848:	b950      	cbnz	r0, 800d860 <mod_sub_add+0x72>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800d84a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800d84e:	b11b      	cbz	r3, 800d858 <mod_sub_add+0x6a>
 800d850:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800d854:	b9a3      	cbnz	r3, 800d880 <mod_sub_add+0x92>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800d856:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
 800d858:	3304      	adds	r3, #4
 800d85a:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 800d85e:	80dc      	strh	r4, [r3, #6]
		status = STATUS_SUCCESS;
 800d860:	2200      	movs	r2, #0
 800d862:	e000      	b.n	800d866 <mod_sub_add+0x78>
		status = STATUS_INVALID_MODEL;
 800d864:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d866:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d86a:	9302      	str	r3, [sp, #8]
 800d86c:	e88d 0110 	stmia.w	sp, {r4, r8}
 800d870:	462b      	mov	r3, r5
 800d872:	4639      	mov	r1, r7
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff fa33 	bl	800cce0 <send_mod_sub_status>
}
 800d87a:	b007      	add	sp, #28
 800d87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
 800d880:	2205      	movs	r2, #5
 800d882:	e7f0      	b.n	800d866 <mod_sub_add+0x78>

0800d884 <_mod_pub_set>:
{
 800d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	4605      	mov	r5, r0
	if (!model->pub) {
 800d88a:	6880      	ldr	r0, [r0, #8]
{
 800d88c:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800d890:	460e      	mov	r6, r1
 800d892:	4617      	mov	r7, r2
 800d894:	461c      	mov	r4, r3
	if (!model->pub) {
 800d896:	b380      	cbz	r0, 800d8fa <_mod_pub_set+0x76>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
 800d898:	bb6b      	cbnz	r3, 800d8f6 <_mod_pub_set+0x72>
	if (!model->pub->update && period) {
 800d89a:	6943      	ldr	r3, [r0, #20]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d13c      	bne.n	800d91a <_mod_pub_set+0x96>
 800d8a0:	f1b8 0f00 	cmp.w	r8, #0
 800d8a4:	d129      	bne.n	800d8fa <_mod_pub_set+0x76>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d8a6:	b361      	cbz	r1, 800d902 <_mod_pub_set+0x7e>
	if (!bt_mesh_app_key_find(app_idx)) {
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	f7fd fb33 	bl	800af14 <bt_mesh_app_key_find>
 800d8ae:	b330      	cbz	r0, 800d8fe <_mod_pub_set+0x7a>
	model->pub->addr = pub_addr;
 800d8b0:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
 800d8b2:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
 800d8b4:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
 800d8b6:	f36f 1204 	bfc	r2, #4, #1
 800d8ba:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
 800d8bc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800d8c0:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
 800d8c2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->key = app_idx;
 800d8c6:	80df      	strh	r7, [r3, #6]
	model->pub->period = period;
 800d8c8:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
 800d8cc:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	b14b      	cbz	r3, 800d8e6 <_mod_pub_set+0x62>
		period_ms = bt_mesh_model_pub_period_get(model);
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f7fe fcf2 	bl	800c2bc <bt_mesh_model_pub_period_get>
 800d8d8:	68a9      	ldr	r1, [r5, #8]
		if (period_ms) {
 800d8da:	4602      	mov	r2, r0
 800d8dc:	b130      	cbz	r0, 800d8ec <_mod_pub_set+0x68>
 800d8de:	3118      	adds	r1, #24
 800d8e0:	4815      	ldr	r0, [pc, #84]	; (800d938 <_mod_pub_set+0xb4>)
 800d8e2:	f004 fe05 	bl	80124f0 <k_delayed_work_submit_to_queue>
}
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			k_delayed_work_cancel(&model->pub->timer);
 800d8ec:	f101 0018 	add.w	r0, r1, #24
			k_delayed_work_cancel(&model->pub->timer);
 800d8f0:	f004 fdb2 	bl	8012458 <k_delayed_work_cancel>
 800d8f4:	e7f7      	b.n	800d8e6 <_mod_pub_set+0x62>
		return STATUS_FEAT_NOT_SUPP;
 800d8f6:	240a      	movs	r4, #10
 800d8f8:	e7f5      	b.n	800d8e6 <_mod_pub_set+0x62>
		return STATUS_NVAL_PUB_PARAM;
 800d8fa:	2407      	movs	r4, #7
 800d8fc:	e7f3      	b.n	800d8e6 <_mod_pub_set+0x62>
		return STATUS_INVALID_APPKEY;
 800d8fe:	2403      	movs	r4, #3
 800d900:	e7f1      	b.n	800d8e6 <_mod_pub_set+0x62>
		model->pub->cred = 0;
 800d902:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
 800d904:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
 800d906:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
 800d90a:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
 800d90e:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
 800d910:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
 800d912:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
 800d914:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
 800d916:	72c3      	strb	r3, [r0, #11]
 800d918:	e7e5      	b.n	800d8e6 <_mod_pub_set+0x62>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d91a:	2900      	cmp	r1, #0
 800d91c:	d1c4      	bne.n	800d8a8 <_mod_pub_set+0x24>
		model->pub->cred = 0;
 800d91e:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
 800d920:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
 800d922:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
 800d926:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
 800d92a:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
 800d92c:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
 800d92e:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
 800d930:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
 800d932:	72c3      	strb	r3, [r0, #11]
			k_delayed_work_cancel(&model->pub->timer);
 800d934:	3018      	adds	r0, #24
 800d936:	e7db      	b.n	800d8f0 <_mod_pub_set+0x6c>
 800d938:	20001498 	.word	0x20001498

0800d93c <mod_pub_set>:
{
 800d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	4681      	mov	r9, r0
 800d942:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d944:	4610      	mov	r0, r2
{
 800d946:	4614      	mov	r4, r2
 800d948:	468a      	mov	sl, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d94a:	f003 fe56 	bl	80115fa <net_buf_simple_pull_le16>
 800d94e:	4605      	mov	r5, r0
	pub_addr = net_buf_simple_pull_le16(buf);
 800d950:	4620      	mov	r0, r4
 800d952:	f003 fe52 	bl	80115fa <net_buf_simple_pull_le16>
 800d956:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
 800d958:	4620      	mov	r0, r4
 800d95a:	f003 fe4e 	bl	80115fa <net_buf_simple_pull_le16>
 800d95e:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
 800d960:	4620      	mov	r0, r4
 800d962:	f003 fe42 	bl	80115ea <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800d966:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
 800d96e:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800d970:	d923      	bls.n	800d9ba <mod_pub_set+0x7e>
	pub_period = net_buf_simple_pull_u8(buf);
 800d972:	4620      	mov	r0, r4
 800d974:	f003 fe39 	bl	80115ea <net_buf_simple_pull_u8>
 800d978:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
 800d97a:	4620      	mov	r0, r4
 800d97c:	f003 fe35 	bl	80115ea <net_buf_simple_pull_u8>
	mod_id = buf->data;
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
 800d984:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d986:	4628      	mov	r0, r5
 800d988:	f7fe fd54 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800d98c:	b9c0      	cbnz	r0, 800d9c0 <mod_pub_set+0x84>
		vnd = (buf->len == 4);
 800d98e:	88a3      	ldrh	r3, [r4, #4]
 800d990:	1f19      	subs	r1, r3, #4
 800d992:	424b      	negs	r3, r1
 800d994:	414b      	adcs	r3, r1
		mod = NULL;
 800d996:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
 800d998:	f88d 301f 	strb.w	r3, [sp, #31]
		status = STATUS_INVALID_ADDRESS;
 800d99c:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800d99e:	9b04      	ldr	r3, [sp, #16]
 800d9a0:	9303      	str	r3, [sp, #12]
 800d9a2:	3408      	adds	r4, #8
 800d9a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d9a8:	9002      	str	r0, [sp, #8]
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	9401      	str	r4, [sp, #4]
 800d9ae:	4633      	mov	r3, r6
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4651      	mov	r1, sl
 800d9b4:	4648      	mov	r0, r9
 800d9b6:	f7ff fcf1 	bl	800d39c <send_mod_pub_status.isra.6>
}
 800d9ba:	b009      	add	sp, #36	; 0x24
 800d9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	f10d 021f 	add.w	r2, sp, #31
 800d9c6:	f7ff fd4c 	bl	800d462 <get_model>
	if (!mod) {
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b168      	cbz	r0, 800d9ea <mod_pub_set+0xae>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
 800d9ce:	9b05      	ldr	r3, [sp, #20]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d9d6:	f8cd 8000 	str.w	r8, [sp]
 800d9da:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800d9de:	f3c7 020b 	ubfx	r2, r7, #0, #12
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	f7ff ff4e 	bl	800d884 <_mod_pub_set>
 800d9e8:	e7d9      	b.n	800d99e <mod_pub_set+0x62>
		status = STATUS_INVALID_MODEL;
 800d9ea:	2002      	movs	r0, #2
 800d9ec:	e7d7      	b.n	800d99e <mod_pub_set+0x62>
	...

0800d9f0 <mod_unbind>:
{
 800d9f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800d9f2:	4b19      	ldr	r3, [pc, #100]	; (800da58 <mod_unbind+0x68>)
 800d9f4:	f8b3 4164 	ldrh.w	r4, [r3, #356]	; 0x164
 800d9f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9fc:	4294      	cmp	r4, r2
 800d9fe:	d003      	beq.n	800da08 <mod_unbind+0x18>
 800da00:	f8b3 2166 	ldrh.w	r2, [r3, #358]	; 0x166
 800da04:	428a      	cmp	r2, r1
 800da06:	d010      	beq.n	800da2a <mod_unbind+0x3a>
 800da08:	f8b3 418c 	ldrh.w	r4, [r3, #396]	; 0x18c
 800da0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da10:	4294      	cmp	r4, r2
 800da12:	d003      	beq.n	800da1c <mod_unbind+0x2c>
 800da14:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 800da18:	428b      	cmp	r3, r1
 800da1a:	d006      	beq.n	800da2a <mod_unbind+0x3a>
		return STATUS_INVALID_APPKEY;
 800da1c:	2003      	movs	r0, #3
}
 800da1e:	b004      	add	sp, #16
 800da20:	bd10      	pop	{r4, pc}
		return STATUS_SUCCESS;
 800da22:	4618      	mov	r0, r3
 800da24:	e7fb      	b.n	800da1e <mod_unbind+0x2e>
	return STATUS_CANNOT_BIND;
 800da26:	200d      	movs	r0, #13
 800da28:	e7f9      	b.n	800da1e <mod_unbind+0x2e>
		if (model->keys[i] != key_idx) {
 800da2a:	8983      	ldrh	r3, [r0, #12]
 800da2c:	428b      	cmp	r3, r1
 800da2e:	d1fa      	bne.n	800da26 <mod_unbind+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
 800da30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da34:	8183      	strh	r3, [r0, #12]
		if (model->pub && model->pub->key == key_idx) {
 800da36:	6883      	ldr	r3, [r0, #8]
 800da38:	2400      	movs	r4, #0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0f1      	beq.n	800da22 <mod_unbind+0x32>
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	428b      	cmp	r3, r1
 800da42:	d107      	bne.n	800da54 <mod_unbind+0x64>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
 800da44:	9402      	str	r4, [sp, #8]
 800da46:	9401      	str	r4, [sp, #4]
 800da48:	9400      	str	r4, [sp, #0]
 800da4a:	4623      	mov	r3, r4
 800da4c:	4622      	mov	r2, r4
 800da4e:	4621      	mov	r1, r4
 800da50:	f7ff ff18 	bl	800d884 <_mod_pub_set>
		return STATUS_SUCCESS;
 800da54:	4620      	mov	r0, r4
 800da56:	e7e2      	b.n	800da1e <mod_unbind+0x2e>
 800da58:	20005b88 	.word	0x20005b88

0800da5c <mod_app_unbind>:
{
 800da5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da60:	b08b      	sub	sp, #44	; 0x2c
 800da62:	4614      	mov	r4, r2
 800da64:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800da66:	2218      	movs	r2, #24
{
 800da68:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800da6a:	a804      	add	r0, sp, #16
 800da6c:	2100      	movs	r1, #0
 800da6e:	f7f2 ff33 	bl	80008d8 <memset>
 800da72:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
 800da74:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800da76:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800da7a:	f003 fdbe 	bl	80115fa <net_buf_simple_pull_le16>
 800da7e:	4605      	mov	r5, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
 800da80:	4620      	mov	r0, r4
 800da82:	f003 fdba 	bl	80115fa <net_buf_simple_pull_le16>
 800da86:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
 800da88:	4628      	mov	r0, r5
	mod_id = buf->data;
 800da8a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800da8e:	f7fe fcd1 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800da92:	b9c8      	cbnz	r0, 800dac8 <mod_app_unbind+0x6c>
		vnd = (buf->len == 4);
 800da94:	88a3      	ldrh	r3, [r4, #4]
 800da96:	1f1a      	subs	r2, r3, #4
 800da98:	4253      	negs	r3, r2
 800da9a:	4153      	adcs	r3, r2
 800da9c:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
 800daa0:	2001      	movs	r0, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
 800daa2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800daa6:	e88d 0201 	stmia.w	sp, {r0, r9}
 800daaa:	4633      	mov	r3, r6
 800daac:	462a      	mov	r2, r5
 800daae:	a804      	add	r0, sp, #16
 800dab0:	f7ff fc4a 	bl	800d348 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800dab4:	2300      	movs	r3, #0
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	aa04      	add	r2, sp, #16
 800daba:	4641      	mov	r1, r8
 800dabc:	4638      	mov	r0, r7
 800dabe:	f7fe fdab 	bl	800c618 <bt_mesh_model_send>
}
 800dac2:	b00b      	add	sp, #44	; 0x2c
 800dac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800dac8:	f10d 020f 	add.w	r2, sp, #15
 800dacc:	4621      	mov	r1, r4
 800dace:	f7ff fcc8 	bl	800d462 <get_model>
	if (!mod) {
 800dad2:	b118      	cbz	r0, 800dadc <mod_app_unbind+0x80>
	status = mod_unbind(mod, key_app_idx);
 800dad4:	4631      	mov	r1, r6
 800dad6:	f7ff ff8b 	bl	800d9f0 <mod_unbind>
 800dada:	e7e2      	b.n	800daa2 <mod_app_unbind+0x46>
		status = STATUS_INVALID_MODEL;
 800dadc:	2002      	movs	r0, #2
 800dade:	e7e0      	b.n	800daa2 <mod_app_unbind+0x46>

0800dae0 <_mod_unbind>:
	mod_unbind(mod, *key_idx);
 800dae0:	9b00      	ldr	r3, [sp, #0]
 800dae2:	8819      	ldrh	r1, [r3, #0]
 800dae4:	f7ff bf84 	b.w	800d9f0 <mod_unbind>

0800dae8 <dev_comp_data_get>:
{
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	b0b9      	sub	sp, #228	; 0xe4
 800daee:	4614      	mov	r4, r2
 800daf0:	4680      	mov	r8, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800daf2:	22d4      	movs	r2, #212	; 0xd4
{
 800daf4:	4689      	mov	r9, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800daf6:	a803      	add	r0, sp, #12
 800daf8:	2100      	movs	r1, #0
 800dafa:	f7f2 feed 	bl	80008d8 <memset>
 800dafe:	23cc      	movs	r3, #204	; 0xcc
	page = net_buf_simple_pull_u8(buf);
 800db00:	4620      	mov	r0, r4
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800db02:	f8ad 3012 	strh.w	r3, [sp, #18]
	page = net_buf_simple_pull_u8(buf);
 800db06:	f003 fd70 	bl	80115ea <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(sdu, OP_DEV_COMP_DATA_STATUS);
 800db0a:	2102      	movs	r1, #2
 800db0c:	a803      	add	r0, sp, #12
 800db0e:	f7fe fd61 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(sdu, page);
 800db12:	2100      	movs	r1, #0
 800db14:	a803      	add	r0, sp, #12
 800db16:	f003 fd04 	bl	8011522 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
 800db1a:	f7fe fef3 	bl	800c904 <bt_mesh_comp_get>
 800db1e:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
 800db20:	8801      	ldrh	r1, [r0, #0]
 800db22:	a803      	add	r0, sp, #12
 800db24:	f003 fd05 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
 800db28:	8869      	ldrh	r1, [r5, #2]
 800db2a:	a803      	add	r0, sp, #12
 800db2c:	f003 fd01 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
 800db30:	88a9      	ldrh	r1, [r5, #4]
 800db32:	a803      	add	r0, sp, #12
 800db34:	f003 fcfd 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
 800db38:	210a      	movs	r1, #10
 800db3a:	a803      	add	r0, sp, #12
 800db3c:	f003 fcf9 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
 800db40:	2107      	movs	r1, #7
 800db42:	a803      	add	r0, sp, #12
 800db44:	f003 fcf5 	bl	8011532 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
 800db48:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
 800db4a:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
 800db4c:	68ab      	ldr	r3, [r5, #8]
 800db4e:	429e      	cmp	r6, r3
 800db50:	d309      	bcc.n	800db66 <dev_comp_data_get+0x7e>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
 800db52:	2300      	movs	r3, #0
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	aa03      	add	r2, sp, #12
 800db58:	4649      	mov	r1, r9
 800db5a:	4640      	mov	r0, r8
 800db5c:	f7fe fd5c 	bl	800c618 <bt_mesh_model_send>
}
 800db60:	b039      	add	sp, #228	; 0xe4
 800db62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
 800db66:	68ec      	ldr	r4, [r5, #12]
 800db68:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
 800db6c:	a803      	add	r0, sp, #12
 800db6e:	f003 fd6e 	bl	801164e <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
 800db72:	7923      	ldrb	r3, [r4, #4]
 800db74:	7962      	ldrb	r2, [r4, #5]
 800db76:	3302      	adds	r3, #2
 800db78:	4413      	add	r3, r2
	if (net_buf_simple_tailroom(buf) <
 800db7a:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800db7e:	d3ef      	bcc.n	800db60 <dev_comp_data_get+0x78>
	net_buf_simple_add_le16(buf, elem->loc);
 800db80:	8861      	ldrh	r1, [r4, #2]
 800db82:	a803      	add	r0, sp, #12
 800db84:	f003 fcd5 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
 800db88:	7921      	ldrb	r1, [r4, #4]
 800db8a:	a803      	add	r0, sp, #12
 800db8c:	f003 fcc9 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
 800db90:	7961      	ldrb	r1, [r4, #5]
 800db92:	a803      	add	r0, sp, #12
 800db94:	f003 fcc5 	bl	8011522 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
 800db98:	f04f 0a00 	mov.w	sl, #0
 800db9c:	7923      	ldrb	r3, [r4, #4]
 800db9e:	459a      	cmp	sl, r3
 800dba0:	db06      	blt.n	800dbb0 <dev_comp_data_get+0xc8>
 800dba2:	f04f 0a00 	mov.w	sl, #0
	for (i = 0; i < elem->vnd_model_count; i++) {
 800dba6:	7963      	ldrb	r3, [r4, #5]
 800dba8:	459a      	cmp	sl, r3
 800dbaa:	db0b      	blt.n	800dbc4 <dev_comp_data_get+0xdc>
	for (i = 0; i < comp->elem_count; i++) {
 800dbac:	3601      	adds	r6, #1
 800dbae:	e7cd      	b.n	800db4c <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
 800dbb0:	fb07 f30a 	mul.w	r3, r7, sl
 800dbb4:	68a2      	ldr	r2, [r4, #8]
 800dbb6:	a803      	add	r0, sp, #12
 800dbb8:	5ad1      	ldrh	r1, [r2, r3]
 800dbba:	f003 fcba 	bl	8011532 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
 800dbbe:	f10a 0a01 	add.w	sl, sl, #1
 800dbc2:	e7eb      	b.n	800db9c <dev_comp_data_get+0xb4>
		mod = &elem->vnd_models[i];
 800dbc4:	68e2      	ldr	r2, [r4, #12]
 800dbc6:	fb07 f30a 	mul.w	r3, r7, sl
 800dbca:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
 800dbce:	5ad1      	ldrh	r1, [r2, r3]
 800dbd0:	a803      	add	r0, sp, #12
 800dbd2:	f003 fcae 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
 800dbd6:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 800dbda:	a803      	add	r0, sp, #12
 800dbdc:	f003 fca9 	bl	8011532 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
 800dbe0:	f10a 0a01 	add.w	sl, sl, #1
 800dbe4:	e7df      	b.n	800dba6 <dev_comp_data_get+0xbe>
	...

0800dbe8 <mod_app_bind>:
{
 800dbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbec:	b08b      	sub	sp, #44	; 0x2c
 800dbee:	4691      	mov	r9, r2
 800dbf0:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800dbf2:	2218      	movs	r2, #24
{
 800dbf4:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800dbf6:	a804      	add	r0, sp, #16
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	f7f2 fe6d 	bl	80008d8 <memset>
 800dbfe:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
 800dc00:	4648      	mov	r0, r9
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800dc02:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800dc06:	f003 fcf8 	bl	80115fa <net_buf_simple_pull_le16>
 800dc0a:	4605      	mov	r5, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
 800dc0c:	4648      	mov	r0, r9
 800dc0e:	f003 fcf4 	bl	80115fa <net_buf_simple_pull_le16>
 800dc12:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
 800dc14:	4628      	mov	r0, r5
	mod_id = buf->data;
 800dc16:	f8d9 7000 	ldr.w	r7, [r9]
	elem = bt_mesh_elem_find(elem_addr);
 800dc1a:	f7fe fc0b 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800dc1e:	b9d0      	cbnz	r0, 800dc56 <mod_app_bind+0x6e>
		vnd = (buf->len == 4);
 800dc20:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800dc24:	1f1a      	subs	r2, r3, #4
 800dc26:	4253      	negs	r3, r2
 800dc28:	4153      	adcs	r3, r2
 800dc2a:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
 800dc2e:	2201      	movs	r2, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
 800dc30:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800dc34:	e88d 0084 	stmia.w	sp, {r2, r7}
 800dc38:	4623      	mov	r3, r4
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	a804      	add	r0, sp, #16
 800dc3e:	f7ff fb83 	bl	800d348 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800dc42:	2300      	movs	r3, #0
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	aa04      	add	r2, sp, #16
 800dc48:	4641      	mov	r1, r8
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7fe fce4 	bl	800c618 <bt_mesh_model_send>
}
 800dc50:	b00b      	add	sp, #44	; 0x2c
 800dc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800dc56:	f10d 020f 	add.w	r2, sp, #15
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f7ff fc01 	bl	800d462 <get_model>
	if (!mod) {
 800dc60:	b1c0      	cbz	r0, 800dc94 <mod_app_bind+0xac>
	if (model == mod) {
 800dc62:	42b0      	cmp	r0, r6
 800dc64:	d018      	beq.n	800dc98 <mod_app_bind+0xb0>
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800dc66:	4a13      	ldr	r2, [pc, #76]	; (800dcb4 <mod_app_bind+0xcc>)
 800dc68:	f8b2 1164 	ldrh.w	r1, [r2, #356]	; 0x164
 800dc6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc70:	4299      	cmp	r1, r3
 800dc72:	d003      	beq.n	800dc7c <mod_app_bind+0x94>
 800dc74:	f8b2 3166 	ldrh.w	r3, [r2, #358]	; 0x166
 800dc78:	42a3      	cmp	r3, r4
 800dc7a:	d011      	beq.n	800dca0 <mod_app_bind+0xb8>
 800dc7c:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
 800dc80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d003      	beq.n	800dc90 <mod_app_bind+0xa8>
 800dc88:	f8b2 318e 	ldrh.w	r3, [r2, #398]	; 0x18e
 800dc8c:	42a3      	cmp	r3, r4
 800dc8e:	d007      	beq.n	800dca0 <mod_app_bind+0xb8>
		return STATUS_INVALID_APPKEY;
 800dc90:	2203      	movs	r2, #3
 800dc92:	e7cd      	b.n	800dc30 <mod_app_bind+0x48>
		status = STATUS_INVALID_MODEL;
 800dc94:	2202      	movs	r2, #2
 800dc96:	e7cb      	b.n	800dc30 <mod_app_bind+0x48>
		status = STATUS_CANNOT_BIND;
 800dc98:	220d      	movs	r2, #13
 800dc9a:	e7c9      	b.n	800dc30 <mod_app_bind+0x48>
	return STATUS_INSUFF_RESOURCES;
 800dc9c:	2205      	movs	r2, #5
 800dc9e:	e7c7      	b.n	800dc30 <mod_app_bind+0x48>
		if (model->keys[i] == key_idx) {
 800dca0:	8983      	ldrh	r3, [r0, #12]
 800dca2:	429c      	cmp	r4, r3
 800dca4:	d004      	beq.n	800dcb0 <mod_app_bind+0xc8>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
 800dca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d1f6      	bne.n	800dc9c <mod_app_bind+0xb4>
			model->keys[i] = key_idx;
 800dcae:	8184      	strh	r4, [r0, #12]
			return STATUS_SUCCESS;
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	e7bd      	b.n	800dc30 <mod_app_bind+0x48>
 800dcb4:	20005b88 	.word	0x20005b88

0800dcb8 <va_add>:
{
 800dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*free_slot = NULL;
 800dcbc:	2500      	movs	r5, #0
 800dcbe:	4c1d      	ldr	r4, [pc, #116]	; (800dd34 <va_add+0x7c>)
{
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	4688      	mov	r8, r1
		*free_slot = NULL;
 800dcc4:	462e      	mov	r6, r5
		if (!BT_MESH_ADDR_IS_VIRTUAL(labels[i].addr)) {
 800dcc6:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 800dcca:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800dcce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcd2:	d307      	bcc.n	800dce4 <va_add+0x2c>
 800dcd4:	1ea5      	subs	r5, r4, #2
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800dcd6:	3601      	adds	r6, #1
 800dcd8:	2e03      	cmp	r6, #3
 800dcda:	f104 0412 	add.w	r4, r4, #18
 800dcde:	d1f2      	bne.n	800dcc6 <va_add+0xe>
	return BT_MESH_ADDR_UNASSIGNED;
 800dce0:	2400      	movs	r4, #0
 800dce2:	e00a      	b.n	800dcfa <va_add+0x42>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
 800dce4:	2210      	movs	r2, #16
 800dce6:	4639      	mov	r1, r7
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7f2 fdb4 	bl	8000856 <memcmp>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d1f1      	bne.n	800dcd6 <va_add+0x1e>
			return labels[i].addr;
 800dcf2:	2312      	movs	r3, #18
 800dcf4:	435e      	muls	r6, r3
 800dcf6:	4b10      	ldr	r3, [pc, #64]	; (800dd38 <va_add+0x80>)
 800dcf8:	5b9c      	ldrh	r4, [r3, r6]
	*addr = va_find(label_uuid, &free_slot);
 800dcfa:	f8a8 4000 	strh.w	r4, [r8]
	if (*addr != BT_MESH_ADDR_UNASSIGNED) {
 800dcfe:	b97c      	cbnz	r4, 800dd20 <va_add+0x68>
	if (!free_slot) {
 800dd00:	b18d      	cbz	r5, 800dd26 <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
 800dd02:	4641      	mov	r1, r8
 800dd04:	4638      	mov	r0, r7
 800dd06:	f7fe f9ff 	bl	800c108 <bt_mesh_virtual_addr>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	db0e      	blt.n	800dd2c <va_add+0x74>
	free_slot->addr = *addr;
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f8b8 3000 	ldrh.w	r3, [r8]
 800dd14:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(free_slot->uuid, label_uuid, 16);
 800dd18:	2210      	movs	r2, #16
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	f7f2 fdb0 	bl	8000880 <memcpy>
		return STATUS_SUCCESS;
 800dd20:	2000      	movs	r0, #0
 800dd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_INSUFF_RESOURCES;
 800dd26:	2005      	movs	r0, #5
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_UNSPECIFIED;
 800dd2c:	2010      	movs	r0, #16
}
 800dd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd32:	bf00      	nop
 800dd34:	20000d96 	.word	0x20000d96
 800dd38:	20000d94 	.word	0x20000d94

0800dd3c <mod_sub_va_overwrite>:
{
 800dd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd40:	b086      	sub	sp, #24
 800dd42:	4606      	mov	r6, r0
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800dd44:	f04f 0900 	mov.w	r9, #0
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd48:	4610      	mov	r0, r2
{
 800dd4a:	4614      	mov	r4, r2
 800dd4c:	460f      	mov	r7, r1
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800dd4e:	f8ad 9016 	strh.w	r9, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd52:	f003 fc52 	bl	80115fa <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800dd56:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd58:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
 800dd5a:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800dd5c:	f8d4 a000 	ldr.w	sl, [r4]
	net_buf_simple_pull(buf, 16);
 800dd60:	f003 fc3b 	bl	80115da <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
 800dd64:	4628      	mov	r0, r5
	mod_id = buf->data;
 800dd66:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800dd6a:	f7fe fb63 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800dd6e:	b9b0      	cbnz	r0, 800dd9e <mod_sub_va_overwrite+0x62>
		vnd = (buf->len == 4);
 800dd70:	88a3      	ldrh	r3, [r4, #4]
 800dd72:	1f1a      	subs	r2, r3, #4
 800dd74:	4253      	negs	r3, r2
 800dd76:	4153      	adcs	r3, r2
 800dd78:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
 800dd7c:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800dd7e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	f8cd 8004 	str.w	r8, [sp, #4]
 800dd8e:	462b      	mov	r3, r5
 800dd90:	4639      	mov	r1, r7
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7fe ffa4 	bl	800cce0 <send_mod_sub_status>
}
 800dd98:	b006      	add	sp, #24
 800dd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
 800dd9e:	4621      	mov	r1, r4
 800dda0:	f10d 0215 	add.w	r2, sp, #21
 800dda4:	f7ff fb5d 	bl	800d462 <get_model>
	if (!mod) {
 800dda8:	4604      	mov	r4, r0
 800ddaa:	b180      	cbz	r0, 800ddce <mod_sub_va_overwrite+0x92>
	memset(mod->groups, 0, sizeof(mod->groups));
 800ddac:	2204      	movs	r2, #4
 800ddae:	4649      	mov	r1, r9
 800ddb0:	300e      	adds	r0, #14
 800ddb2:	f7f2 fd91 	bl	80008d8 <memset>
		status = va_add(label_uuid, &sub_addr);
 800ddb6:	f10d 0116 	add.w	r1, sp, #22
 800ddba:	4650      	mov	r0, sl
 800ddbc:	f7ff ff7c 	bl	800dcb8 <va_add>
		if (status == STATUS_SUCCESS) {
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d1db      	bne.n	800dd7e <mod_sub_va_overwrite+0x42>
			mod->groups[0] = sub_addr;
 800ddc6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ddca:	81e3      	strh	r3, [r4, #14]
 800ddcc:	e7d7      	b.n	800dd7e <mod_sub_va_overwrite+0x42>
		status = STATUS_INVALID_MODEL;
 800ddce:	2202      	movs	r2, #2
 800ddd0:	e7d5      	b.n	800dd7e <mod_sub_va_overwrite+0x42>

0800ddd2 <mod_pub_va_set>:
{
 800ddd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd6:	4680      	mov	r8, r0
 800ddd8:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800ddda:	4610      	mov	r0, r2
{
 800dddc:	4614      	mov	r4, r2
 800ddde:	4689      	mov	r9, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800dde0:	f003 fc0b 	bl	80115fa <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800dde4:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800dde6:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
 800dde8:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800ddea:	f8d4 b000 	ldr.w	fp, [r4]
	net_buf_simple_pull(buf, 16);
 800ddee:	f003 fbf4 	bl	80115da <net_buf_simple_pull>
	pub_app_idx = net_buf_simple_pull_le16(buf);
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f003 fc01 	bl	80115fa <net_buf_simple_pull_le16>
 800ddf8:	4606      	mov	r6, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f003 fbf5 	bl	80115ea <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800de00:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 800de04:	b2db      	uxtb	r3, r3
 800de06:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
 800de08:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800de0a:	d926      	bls.n	800de5a <mod_pub_va_set+0x88>
	pub_period = net_buf_simple_pull_u8(buf);
 800de0c:	4620      	mov	r0, r4
 800de0e:	f003 fbec 	bl	80115ea <net_buf_simple_pull_u8>
 800de12:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
 800de14:	4620      	mov	r0, r4
 800de16:	f003 fbe8 	bl	80115ea <net_buf_simple_pull_u8>
	mod_id = buf->data;
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
 800de1e:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
 800de20:	4628      	mov	r0, r5
 800de22:	f7fe fb07 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800de26:	b9d8      	cbnz	r0, 800de60 <mod_pub_va_set+0x8e>
		vnd = (buf->len == 4);
 800de28:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0;
 800de2a:	f8ad 001e 	strh.w	r0, [sp, #30]
		vnd = (buf->len == 4);
 800de2e:	1f19      	subs	r1, r3, #4
 800de30:	424b      	negs	r3, r1
 800de32:	414b      	adcs	r3, r1
		mod = NULL;
 800de34:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
 800de36:	f88d 301d 	strb.w	r3, [sp, #29]
		status = STATUS_INVALID_ADDRESS;
 800de3a:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800de3c:	9a04      	ldr	r2, [sp, #16]
 800de3e:	9203      	str	r2, [sp, #12]
 800de40:	3408      	adds	r4, #8
 800de42:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800de46:	9002      	str	r0, [sp, #8]
 800de48:	9200      	str	r2, [sp, #0]
 800de4a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800de4e:	9401      	str	r4, [sp, #4]
 800de50:	462a      	mov	r2, r5
 800de52:	4649      	mov	r1, r9
 800de54:	4640      	mov	r0, r8
 800de56:	f7ff faa1 	bl	800d39c <send_mod_pub_status.isra.6>
}
 800de5a:	b009      	add	sp, #36	; 0x24
 800de5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800de60:	4621      	mov	r1, r4
 800de62:	f10d 021d 	add.w	r2, sp, #29
 800de66:	f7ff fafc 	bl	800d462 <get_model>
	if (!mod) {
 800de6a:	4604      	mov	r4, r0
 800de6c:	b918      	cbnz	r0, 800de76 <mod_pub_va_set+0xa4>
		pub_addr = 0;
 800de6e:	f8ad 001e 	strh.w	r0, [sp, #30]
		status = STATUS_INVALID_MODEL;
 800de72:	2002      	movs	r0, #2
		goto send_status;
 800de74:	e7e2      	b.n	800de3c <mod_pub_va_set+0x6a>
	status = va_add(label_uuid, &pub_addr);
 800de76:	f10d 011e 	add.w	r1, sp, #30
 800de7a:	4658      	mov	r0, fp
 800de7c:	f7ff ff1c 	bl	800dcb8 <va_add>
	if (status == STATUS_SUCCESS) {
 800de80:	2800      	cmp	r0, #0
 800de82:	d1db      	bne.n	800de3c <mod_pub_va_set+0x6a>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
 800de84:	9b05      	ldr	r3, [sp, #20]
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800de8c:	f8cd a008 	str.w	sl, [sp, #8]
 800de90:	9700      	str	r7, [sp, #0]
 800de92:	f3c6 3300 	ubfx	r3, r6, #12, #1
 800de96:	f3c6 020b 	ubfx	r2, r6, #0, #12
 800de9a:	4620      	mov	r0, r4
 800de9c:	f7ff fcf2 	bl	800d884 <_mod_pub_set>
 800dea0:	e7cc      	b.n	800de3c <mod_pub_va_set+0x6a>

0800dea2 <mod_sub_va_add>:
{
 800dea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dea6:	4607      	mov	r7, r0
 800dea8:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800deaa:	4610      	mov	r0, r2
{
 800deac:	4614      	mov	r4, r2
 800deae:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800deb0:	f003 fba3 	bl	80115fa <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800deb4:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800deb6:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
 800deb8:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800deba:	6825      	ldr	r5, [r4, #0]
	net_buf_simple_pull(buf, 16);
 800debc:	f003 fb8d 	bl	80115da <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
 800dec0:	4630      	mov	r0, r6
	mod_id = buf->data;
 800dec2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800dec6:	f7fe fab5 	bl	800c434 <bt_mesh_elem_find>
	if (!elem) {
 800deca:	b9c8      	cbnz	r0, 800df00 <mod_sub_va_add+0x5e>
		vnd = (buf->len == 4);
 800decc:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800dece:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
 800ded2:	1f19      	subs	r1, r3, #4
 800ded4:	424b      	negs	r3, r1
 800ded6:	414b      	adcs	r3, r1
 800ded8:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
 800dedc:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800dede:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800dee2:	9302      	str	r3, [sp, #8]
 800dee4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	f8cd 9004 	str.w	r9, [sp, #4]
 800deee:	4633      	mov	r3, r6
 800def0:	462a      	mov	r2, r5
 800def2:	4641      	mov	r1, r8
 800def4:	4638      	mov	r0, r7
 800def6:	f7fe fef3 	bl	800cce0 <send_mod_sub_status>
}
 800defa:	b007      	add	sp, #28
 800defc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800df00:	4621      	mov	r1, r4
 800df02:	f10d 0215 	add.w	r2, sp, #21
 800df06:	f7ff faac 	bl	800d462 <get_model>
	if (!mod) {
 800df0a:	4604      	mov	r4, r0
 800df0c:	b918      	cbnz	r0, 800df16 <mod_sub_va_add+0x74>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800df0e:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
 800df12:	2502      	movs	r5, #2
		goto send_status;
 800df14:	e7e3      	b.n	800dede <mod_sub_va_add+0x3c>
	status = va_add(label_uuid, &sub_addr);
 800df16:	4628      	mov	r0, r5
 800df18:	f10d 0116 	add.w	r1, sp, #22
 800df1c:	f7ff fecc 	bl	800dcb8 <va_add>
	if (status != STATUS_SUCCESS) {
 800df20:	4605      	mov	r5, r0
 800df22:	2800      	cmp	r0, #0
 800df24:	d1db      	bne.n	800dede <mod_sub_va_add+0x3c>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
 800df26:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7fe fa48 	bl	800c3c0 <bt_mesh_model_find_group>
 800df30:	2800      	cmp	r0, #0
 800df32:	d1d4      	bne.n	800dede <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800df34:	89e3      	ldrh	r3, [r4, #14]
 800df36:	b14b      	cbz	r3, 800df4c <mod_sub_va_add+0xaa>
 800df38:	8a23      	ldrh	r3, [r4, #16]
 800df3a:	b94b      	cbnz	r3, 800df50 <mod_sub_va_add+0xae>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800df3c:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
 800df3e:	3304      	adds	r3, #4
 800df40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800df44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800df48:	80e3      	strh	r3, [r4, #6]
 800df4a:	e7c8      	b.n	800dede <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800df4c:	462b      	mov	r3, r5
 800df4e:	e7f6      	b.n	800df3e <mod_sub_va_add+0x9c>
		status = STATUS_INSUFF_RESOURCES;
 800df50:	2505      	movs	r5, #5
 800df52:	e7c4      	b.n	800dede <mod_sub_va_add+0x3c>

0800df54 <hb_sub_send_status.constprop.12>:

failed:
	hb_pub_send_status(model, ctx, status, param);
}

static void hb_sub_send_status(struct bt_mesh_model *model,
 800df54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df58:	4606      	mov	r6, r0
 800df5a:	b089      	sub	sp, #36	; 0x24
			       struct bt_mesh_msg_ctx *ctx, u8_t status)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800df5c:	2218      	movs	r2, #24
static void hb_sub_send_status(struct bt_mesh_model *model,
 800df5e:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800df60:	a802      	add	r0, sp, #8
 800df62:	2100      	movs	r1, #0
 800df64:	f7f2 fcb8 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800df68:	69b5      	ldr	r5, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800df6a:	230f      	movs	r3, #15
 800df6c:	f8ad 300e 	strh.w	r3, [sp, #14]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 800df70:	f003 ffa0 	bl	8011eb4 <_impl_k_uptime_get>
	s64_t uptime;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	uptime = k_uptime_get();
	if (uptime > cfg->hb_sub.expiry) {
 800df74:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
 800df78:	4580      	cmp	r8, r0
 800df7a:	eb79 0301 	sbcs.w	r3, r9, r1
 800df7e:	db35      	blt.n	800dfec <hb_sub_send_status.constprop.12+0x98>
		period = 0;
	} else {
		period = (cfg->hb_sub.expiry - uptime) / 1000;
 800df80:	ebb8 0000 	subs.w	r0, r8, r0
 800df84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df88:	f04f 0300 	mov.w	r3, #0
 800df8c:	eb69 0101 	sbc.w	r1, r9, r1
 800df90:	f7f2 fa60 	bl	8000454 <__aeabi_ldivmod>
 800df94:	4604      	mov	r4, r0
	}

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_SUB_STATUS);
 800df96:	f248 013c 	movw	r1, #32828	; 0x803c
 800df9a:	a802      	add	r0, sp, #8
 800df9c:	f7fe fb1a 	bl	800c5d4 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	a802      	add	r0, sp, #8
 800dfa4:	f003 fabd 	bl	8011522 <net_buf_simple_add_u8>

	net_buf_simple_add_le16(msg, cfg->hb_sub.src);
 800dfa8:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
 800dfac:	a802      	add	r0, sp, #8
 800dfae:	f003 fac0 	bl	8011532 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_sub.dst);
 800dfb2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
 800dfb6:	a802      	add	r0, sp, #8
 800dfb8:	f003 fabb 	bl	8011532 <net_buf_simple_add_le16>

	if (cfg->hb_sub.src == BT_MESH_ADDR_UNASSIGNED ||
 800dfbc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800dfc0:	b113      	cbz	r3, 800dfc8 <hb_sub_send_status.constprop.12+0x74>
 800dfc2:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 800dfc6:	b99b      	cbnz	r3, 800dff0 <hb_sub_send_status.constprop.12+0x9c>
	    cfg->hb_sub.dst == BT_MESH_ADDR_UNASSIGNED) {
		memset(net_buf_simple_add(msg, 4), 0, 4);
 800dfc8:	2104      	movs	r1, #4
 800dfca:	a802      	add	r0, sp, #8
 800dfcc:	f003 fa9a 	bl	8011504 <net_buf_simple_add>
 800dfd0:	2204      	movs	r2, #4
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	f7f2 fc80 	bl	80008d8 <memset>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
	}

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	aa02      	add	r2, sp, #8
 800dfde:	4639      	mov	r1, r7
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7fe fb19 	bl	800c618 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Subscription Status");
	}
}
 800dfe6:	b009      	add	sp, #36	; 0x24
 800dfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (uptime > cfg->hb_sub.expiry) {
 800dfec:	2400      	movs	r4, #0
 800dfee:	e7d2      	b.n	800df96 <hb_sub_send_status.constprop.12+0x42>
 800dff0:	b2a1      	uxth	r1, r4
	if (!val) {
 800dff2:	b149      	cbz	r1, 800e008 <hb_sub_send_status.constprop.12+0xb4>
	} else if (val == 0xffff) {
 800dff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dff8:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
 800dffa:	bf1d      	ittte	ne
 800dffc:	fab1 f181 	clzne	r1, r1
 800e000:	f1c1 0120 	rsbne	r1, r1, #32
 800e004:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800e006:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(period));
 800e008:	a802      	add	r0, sp, #8
 800e00a:	f003 fa8a 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
 800e00e:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if (!val) {
 800e012:	b149      	cbz	r1, 800e028 <hb_sub_send_status.constprop.12+0xd4>
	} else if (val == 0xffff) {
 800e014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e018:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
 800e01a:	bf1d      	ittte	ne
 800e01c:	fab1 f181 	clzne	r1, r1
 800e020:	f1c1 0120 	rsbne	r1, r1, #32
 800e024:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800e026:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
 800e028:	a802      	add	r0, sp, #8
 800e02a:	f003 fa7a 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
 800e02e:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
 800e032:	a802      	add	r0, sp, #8
 800e034:	f003 fa75 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
 800e038:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
 800e03c:	a802      	add	r0, sp, #8
 800e03e:	f003 fa70 	bl	8011522 <net_buf_simple_add_u8>
 800e042:	e7c9      	b.n	800dfd8 <hb_sub_send_status.constprop.12+0x84>

0800e044 <heartbeat_sub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800e044:	f7ff bf86 	b.w	800df54 <hb_sub_send_status.constprop.12>

0800e048 <heartbeat_sub_set>:
}

static void heartbeat_sub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e04c:	6984      	ldr	r4, [r0, #24]
{
 800e04e:	4607      	mov	r7, r0
	u8_t sub_period;
	s32_t period_ms;

	BT_DBG("src 0x%04x", ctx->addr);

	sub_src = net_buf_simple_pull_le16(buf);
 800e050:	4610      	mov	r0, r2
{
 800e052:	4615      	mov	r5, r2
 800e054:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
 800e056:	f003 fad0 	bl	80115fa <net_buf_simple_pull_le16>
 800e05a:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
 800e05c:	4628      	mov	r0, r5
 800e05e:	f003 facc 	bl	80115fa <net_buf_simple_pull_le16>
 800e062:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
 800e064:	4628      	mov	r0, r5
 800e066:	f003 fac0 	bl	80115ea <net_buf_simple_pull_u8>

	BT_DBG("sub_src 0x%04x sub_dst 0x%04x period 0x%02x",
	       sub_src, sub_dst, sub_period);

	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
 800e06a:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
 800e06e:	4605      	mov	r5, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
 800e070:	d115      	bne.n	800e09e <heartbeat_sub_set+0x56>
	    !BT_MESH_ADDR_IS_UNICAST(sub_src)) {
		BT_WARN("Prohibited source address");
		return;
	}

	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
 800e072:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
 800e076:	b29b      	uxth	r3, r3
 800e078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e07c:	d30f      	bcc.n	800e09e <heartbeat_sub_set+0x56>
 800e07e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 800e082:	b29b      	uxth	r3, r3
 800e084:	2bfb      	cmp	r3, #251	; 0xfb
 800e086:	d90a      	bls.n	800e09e <heartbeat_sub_set+0x56>
 800e088:	b233      	sxth	r3, r6
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	dc03      	bgt.n	800e096 <heartbeat_sub_set+0x4e>
	     sub_dst != bt_mesh_primary_addr())) {
		BT_WARN("Prohibited destination address");
		return;
	}

	if (sub_period > 0x11) {
 800e08e:	2d11      	cmp	r5, #17
 800e090:	d907      	bls.n	800e0a2 <heartbeat_sub_set+0x5a>
 800e092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     sub_dst != bt_mesh_primary_addr())) {
 800e096:	f7fe f98d 	bl	800c3b4 <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
 800e09a:	4286      	cmp	r6, r0
 800e09c:	d0f7      	beq.n	800e08e <heartbeat_sub_set+0x46>
 800e09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
		return;
	}

	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
 800e0a2:	f1b9 0f00 	cmp.w	r9, #0
 800e0a6:	d001      	beq.n	800e0ac <heartbeat_sub_set+0x64>
 800e0a8:	b106      	cbz	r6, 800e0ac <heartbeat_sub_set+0x64>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
 800e0aa:	bb05      	cbnz	r5, 800e0ee <heartbeat_sub_set+0xa6>
	    sub_period == 0x00) {
		/* Setting the same addresses with zero period should retain
		 * the addresses according to MESH/NODE/CFG/HBS/BV-02-C.
		 */
		if (cfg->hb_sub.src != sub_src || cfg->hb_sub.dst != sub_dst) {
 800e0ac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e0b0:	454b      	cmp	r3, r9
 800e0b2:	f04f 0500 	mov.w	r5, #0
 800e0b6:	d103      	bne.n	800e0c0 <heartbeat_sub_set+0x78>
 800e0b8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800e0bc:	42b3      	cmp	r3, r6
 800e0be:	d004      	beq.n	800e0ca <heartbeat_sub_set+0x82>
			cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e0c0:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
			cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e0c4:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
		}

		period_ms = 0;
 800e0c8:	2500      	movs	r5, #0
		cfg->hb_sub.count = 0;
		period_ms = hb_pwr2(sub_period, 1) * 1000;
	}

	/* Let the transport layer know it needs to handle this address */
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
 800e0ca:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 800e0ce:	f7fc ff11 	bl	800aef4 <bt_mesh_set_hb_sub_dst>

	BT_DBG("period_ms %u", period_ms);

	if (period_ms) {
 800e0d2:	b32d      	cbz	r5, 800e120 <heartbeat_sub_set+0xd8>
 800e0d4:	f003 feee 	bl	8011eb4 <_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
 800e0d8:	1940      	adds	r0, r0, r5
 800e0da:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
 800e0de:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	} else {
		cfg->hb_sub.expiry = 0;
	}

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800e0e2:	4641      	mov	r1, r8
 800e0e4:	4638      	mov	r0, r7
}
 800e0e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800e0ea:	f7ff bf33 	b.w	800df54 <hb_sub_send_status.constprop.12>
		cfg->hb_sub.min_hops = BT_MESH_TTL_MAX;
 800e0ee:	237f      	movs	r3, #127	; 0x7f
	} else if (val == 0xff || val == 0x11) {
 800e0f0:	2d11      	cmp	r5, #17
		cfg->hb_sub.min_hops = BT_MESH_TTL_MAX;
 800e0f2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		cfg->hb_sub.max_hops = 0;
 800e0f6:	f04f 0300 	mov.w	r3, #0
 800e0fa:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
		cfg->hb_sub.count = 0;
 800e0fe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		return (1 << (val - sub));
 800e102:	bf1d      	ittte	ne
 800e104:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
 800e108:	2301      	movne	r3, #1
 800e10a:	40ab      	lslne	r3, r5
	} else if (val == 0xff || val == 0x11) {
 800e10c:	f64f 73ff 	movweq	r3, #65535	; 0xffff
		period_ms = hb_pwr2(sub_period, 1) * 1000;
 800e110:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		cfg->hb_sub.src = sub_src;
 800e114:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
		cfg->hb_sub.dst = sub_dst;
 800e118:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
		period_ms = hb_pwr2(sub_period, 1) * 1000;
 800e11c:	435d      	muls	r5, r3
 800e11e:	e7d4      	b.n	800e0ca <heartbeat_sub_set+0x82>
		cfg->hb_sub.expiry = 0;
 800e120:	2200      	movs	r2, #0
 800e122:	2300      	movs	r3, #0
 800e124:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 800e128:	e7db      	b.n	800e0e2 <heartbeat_sub_set+0x9a>
	...

0800e12c <net_key_del>:
{
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e130:	6986      	ldr	r6, [r0, #24]
{
 800e132:	4607      	mov	r7, r0
	del_idx = net_buf_simple_pull_le16(buf);
 800e134:	4610      	mov	r0, r2
{
 800e136:	4688      	mov	r8, r1
	del_idx = net_buf_simple_pull_le16(buf);
 800e138:	f003 fa5f 	bl	80115fa <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
 800e13c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
 800e140:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
 800e142:	d23a      	bcs.n	800e1ba <net_key_del+0x8e>
	sub = bt_mesh_subnet_get(del_idx);
 800e144:	f7fb fbc6 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800e148:	4604      	mov	r4, r0
 800e14a:	b360      	cbz	r0, 800e1a6 <net_key_del+0x7a>
	if (ctx->net_idx == del_idx) {
 800e14c:	f8b8 3000 	ldrh.w	r3, [r8]
 800e150:	42ab      	cmp	r3, r5
 800e152:	d030      	beq.n	800e1b6 <net_key_del+0x8a>
	if (cfg->hb_pub.net_idx == del_idx) {
 800e154:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 800e156:	42ab      	cmp	r3, r5
 800e158:	d10a      	bne.n	800e170 <net_key_del+0x44>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e15a:	2300      	movs	r3, #0
 800e15c:	86b3      	strh	r3, [r6, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e15e:	86f3      	strh	r3, [r6, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e160:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e164:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e168:	f106 000c 	add.w	r0, r6, #12
 800e16c:	f004 f974 	bl	8012458 <k_delayed_work_cancel>
		if (key->net_idx == del_idx) {
 800e170:	4e13      	ldr	r6, [pc, #76]	; (800e1c0 <net_key_del+0x94>)
 800e172:	f8b6 3164 	ldrh.w	r3, [r6, #356]	; 0x164
 800e176:	42ab      	cmp	r3, r5
 800e178:	d103      	bne.n	800e182 <net_key_del+0x56>
			_app_key_del(key);
 800e17a:	f506 70b2 	add.w	r0, r6, #356	; 0x164
 800e17e:	f7fe fefb 	bl	800cf78 <_app_key_del>
		if (key->net_idx == del_idx) {
 800e182:	f8b6 318c 	ldrh.w	r3, [r6, #396]	; 0x18c
 800e186:	42ab      	cmp	r3, r5
 800e188:	d102      	bne.n	800e190 <net_key_del+0x64>
			_app_key_del(key);
 800e18a:	480e      	ldr	r0, [pc, #56]	; (800e1c4 <net_key_del+0x98>)
 800e18c:	f7fe fef4 	bl	800cf78 <_app_key_del>
		bt_mesh_friend_clear_net_idx(del_idx);
 800e190:	4628      	mov	r0, r5
 800e192:	f001 f825 	bl	800f1e0 <bt_mesh_friend_clear_net_idx>
	memset(sub, 0, sizeof(*sub));
 800e196:	22e4      	movs	r2, #228	; 0xe4
 800e198:	2100      	movs	r1, #0
 800e19a:	4620      	mov	r0, r4
 800e19c:	f7f2 fb9c 	bl	80008d8 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
 800e1a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1a4:	83a3      	strh	r3, [r4, #28]
	status = STATUS_SUCCESS;
 800e1a6:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4641      	mov	r1, r8
 800e1ac:	4638      	mov	r0, r7
}
 800e1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, del_idx, status);
 800e1b2:	f7fe bc6d 	b.w	800ca90 <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
 800e1b6:	230c      	movs	r3, #12
 800e1b8:	e7f6      	b.n	800e1a8 <net_key_del+0x7c>
 800e1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1be:	bf00      	nop
 800e1c0:	20005b88 	.word	0x20005b88
 800e1c4:	20005d14 	.word	0x20005d14

0800e1c8 <heartbeat_pub_set>:
{
 800e1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
 800e1cc:	6815      	ldr	r5, [r2, #0]
	dst = sys_le16_to_cpu(param->dst);
 800e1ce:	f8b5 9000 	ldrh.w	r9, [r5]
 800e1d2:	fa1f fa89 	uxth.w	sl, r9
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
 800e1d6:	f48a 4300 	eor.w	r3, sl, #32768	; 0x8000
 800e1da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 800e1de:	4606      	mov	r6, r0
 800e1e0:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
 800e1e2:	d368      	bcc.n	800e2b6 <heartbeat_pub_set+0xee>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
 800e1e4:	78ab      	ldrb	r3, [r5, #2]
 800e1e6:	3b12      	subs	r3, #18
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2bec      	cmp	r3, #236	; 0xec
 800e1ec:	d966      	bls.n	800e2bc <heartbeat_pub_set+0xf4>
	if (param->period_log > 0x10) {
 800e1ee:	78eb      	ldrb	r3, [r5, #3]
 800e1f0:	2b10      	cmp	r3, #16
 800e1f2:	d863      	bhi.n	800e2bc <heartbeat_pub_set+0xf4>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
 800e1f4:	792b      	ldrb	r3, [r5, #4]
 800e1f6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800e1fa:	2b7e      	cmp	r3, #126	; 0x7e
 800e1fc:	d962      	bls.n	800e2c4 <heartbeat_pub_set+0xfc>
	idx = sys_le16_to_cpu(param->net_idx);
 800e1fe:	f8b5 b007 	ldrh.w	fp, [r5, #7]
	if (idx > 0xfff) {
 800e202:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
	idx = sys_le16_to_cpu(param->net_idx);
 800e206:	4658      	mov	r0, fp
	if (idx > 0xfff) {
 800e208:	d25c      	bcs.n	800e2c4 <heartbeat_pub_set+0xfc>
	feat = sys_le16_to_cpu(param->feat);
 800e20a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e20e:	69b4      	ldr	r4, [r6, #24]
	feat = sys_le16_to_cpu(param->feat);
 800e210:	9301      	str	r3, [sp, #4]
	if (!bt_mesh_subnet_get(idx)) {
 800e212:	f7fb fb5f 	bl	80098d4 <bt_mesh_subnet_get>
 800e216:	2800      	cmp	r0, #0
 800e218:	d052      	beq.n	800e2c0 <heartbeat_pub_set+0xf8>
	cfg->hb_pub.dst = dst;
 800e21a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.period = param->period_log;
 800e21e:	78e9      	ldrb	r1, [r5, #3]
	cfg->hb_pub.feat = feat;
 800e220:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
 800e222:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	cfg->hb_pub.feat = feat;
 800e226:	8763      	strh	r3, [r4, #58]	; 0x3a
	cfg->hb_pub.net_idx = idx;
 800e228:	f8a4 b03c 	strh.w	fp, [r4, #60]	; 0x3c
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
 800e22c:	f1ba 0f00 	cmp.w	sl, #0
 800e230:	d10c      	bne.n	800e24c <heartbeat_pub_set+0x84>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e232:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e236:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e23a:	f884 9039 	strb.w	r9, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e23e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
			k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e242:	f104 000c 	add.w	r0, r4, #12
 800e246:	f004 f907 	bl	8012458 <k_delayed_work_cancel>
 800e24a:	e026      	b.n	800e29a <heartbeat_pub_set+0xd2>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
 800e24c:	78aa      	ldrb	r2, [r5, #2]
	if (!val) {
 800e24e:	b36a      	cbz	r2, 800e2ac <heartbeat_pub_set+0xe4>
	} else if (val == 0xff || val == 0x11) {
 800e250:	2aff      	cmp	r2, #255	; 0xff
 800e252:	d02d      	beq.n	800e2b0 <heartbeat_pub_set+0xe8>
 800e254:	2a11      	cmp	r2, #17
 800e256:	d02b      	beq.n	800e2b0 <heartbeat_pub_set+0xe8>
		return (1 << (val - sub));
 800e258:	1e50      	subs	r0, r2, #1
 800e25a:	2301      	movs	r3, #1
 800e25c:	4083      	lsls	r3, r0
 800e25e:	b29b      	uxth	r3, r3
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
 800e260:	86e3      	strh	r3, [r4, #54]	; 0x36
		cfg->hb_pub.ttl = param->ttl;
 800e262:	792b      	ldrb	r3, [r5, #4]
 800e264:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if (param->period_log && param->count_log) {
 800e268:	2900      	cmp	r1, #0
 800e26a:	d0ea      	beq.n	800e242 <heartbeat_pub_set+0x7a>
 800e26c:	2a00      	cmp	r2, #0
 800e26e:	d0e8      	beq.n	800e242 <heartbeat_pub_set+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800e270:	f3bf 8f5b 	dmb	ish
 800e274:	f104 0314 	add.w	r3, r4, #20
 800e278:	e853 2f00 	ldrex	r2, [r3]
 800e27c:	f042 0101 	orr.w	r1, r2, #1
 800e280:	e843 1000 	strex	r0, r1, [r3]
 800e284:	2800      	cmp	r0, #0
 800e286:	d1f7      	bne.n	800e278 <heartbeat_pub_set+0xb0>
 800e288:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800e28c:	07d3      	lsls	r3, r2, #31
 800e28e:	d404      	bmi.n	800e29a <heartbeat_pub_set+0xd2>
		k_queue_append(&work_q->queue, work);
 800e290:	f104 010c 	add.w	r1, r4, #12
 800e294:	480d      	ldr	r0, [pc, #52]	; (800e2cc <heartbeat_pub_set+0x104>)
 800e296:	f003 fb06 	bl	80118a6 <k_queue_append>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
 800e29a:	2300      	movs	r3, #0
 800e29c:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
 800e29e:	4639      	mov	r1, r7
 800e2a0:	4630      	mov	r0, r6
}
 800e2a2:	b003      	add	sp, #12
 800e2a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
 800e2a8:	f7fe bcc0 	b.w	800cc2c <hb_pub_send_status>
		return 0x0000;
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	e7d7      	b.n	800e260 <heartbeat_pub_set+0x98>
		return 0xffff;
 800e2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b4:	e7d4      	b.n	800e260 <heartbeat_pub_set+0x98>
		status = STATUS_INVALID_ADDRESS;
 800e2b6:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
 800e2b8:	462b      	mov	r3, r5
 800e2ba:	e7f0      	b.n	800e29e <heartbeat_pub_set+0xd6>
		status = STATUS_CANNOT_SET;
 800e2bc:	220f      	movs	r2, #15
 800e2be:	e7fb      	b.n	800e2b8 <heartbeat_pub_set+0xf0>
		status = STATUS_INVALID_NETKEY;
 800e2c0:	2204      	movs	r2, #4
 800e2c2:	e7f9      	b.n	800e2b8 <heartbeat_pub_set+0xf0>
}
 800e2c4:	b003      	add	sp, #12
 800e2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20001498 	.word	0x20001498

0800e2d0 <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
 800e2d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e2d2:	6984      	ldr	r4, [r0, #24]
{
 800e2d4:	4605      	mov	r5, r0

	if (!cfg) {
 800e2d6:	b14c      	cbz	r4, 800e2ec <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->relay > 0x02) {
 800e2d8:	7963      	ldrb	r3, [r4, #5]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d806      	bhi.n	800e2ec <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->beacon > 0x01) {
 800e2de:	79e3      	ldrb	r3, [r4, #7]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d803      	bhi.n	800e2ec <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
 800e2e4:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da02      	bge.n	800e2f2 <bt_mesh_cfg_srv_init+0x22>
		BT_ERR("No Configuration Server context provided");
		return -EINVAL;
 800e2ec:	f06f 0015 	mvn.w	r0, #21
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid values in configuration");
		return -EINVAL;
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
 800e2f2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800e2f6:	8183      	strh	r3, [r0, #12]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
 800e2f8:	4906      	ldr	r1, [pc, #24]	; (800e314 <bt_mesh_cfg_srv_init+0x44>)
 800e2fa:	f104 000c 	add.w	r0, r4, #12
 800e2fe:	f004 f88d 	bl	801241c <k_delayed_work_init>
	cfg->hb_sub.expiry = 0;
 800e302:	2200      	movs	r2, #0
 800e304:	2300      	movs	r3, #0
 800e306:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40

	cfg->model = model;

	conf = cfg;
 800e30a:	4b03      	ldr	r3, [pc, #12]	; (800e318 <bt_mesh_cfg_srv_init+0x48>)
	cfg->model = model;
 800e30c:	6025      	str	r5, [r4, #0]
	conf = cfg;
 800e30e:	601c      	str	r4, [r3, #0]

	return 0;
 800e310:	2000      	movs	r0, #0
}
 800e312:	bd38      	pop	{r3, r4, r5, pc}
 800e314:	0800e779 	.word	0x0800e779
 800e318:	20000d90 	.word	0x20000d90

0800e31c <bt_mesh_cfg_reset>:

void bt_mesh_cfg_reset(void)
{
 800e31c:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
 800e31e:	4b23      	ldr	r3, [pc, #140]	; (800e3ac <bt_mesh_cfg_reset+0x90>)
 800e320:	681c      	ldr	r4, [r3, #0]
	int i;

	if (!cfg) {
 800e322:	2c00      	cmp	r4, #0
 800e324:	d040      	beq.n	800e3a8 <bt_mesh_cfg_reset+0x8c>
		return;
	}

	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
 800e326:	2000      	movs	r0, #0
 800e328:	f7fc fde4 	bl	800aef4 <bt_mesh_set_hb_sub_dst>

	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e32c:	2300      	movs	r3, #0
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
	cfg->hb_sub.expiry = 0;
 800e32e:	2000      	movs	r0, #0
 800e330:	2100      	movs	r1, #0
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e332:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e336:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	cfg->hb_sub.expiry = 0;
 800e33a:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e33e:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e340:	86e3      	strh	r3, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e342:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e346:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e34a:	f104 000c 	add.w	r0, r4, #12

	/* Delete all app keys */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e34e:	4c18      	ldr	r4, [pc, #96]	; (800e3b0 <bt_mesh_cfg_reset+0x94>)
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e350:	f004 f882 	bl	8012458 <k_delayed_work_cancel>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e354:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 800e358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d003      	beq.n	800e368 <bt_mesh_cfg_reset+0x4c>
			_app_key_del(key);
 800e360:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800e364:	f7fe fe08 	bl	800cf78 <_app_key_del>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e368:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 800e36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e370:	429a      	cmp	r2, r3
 800e372:	d002      	beq.n	800e37a <bt_mesh_cfg_reset+0x5e>
			_app_key_del(key);
 800e374:	480f      	ldr	r0, [pc, #60]	; (800e3b4 <bt_mesh_cfg_reset+0x98>)
 800e376:	f7fe fdff 	bl	800cf78 <_app_key_del>

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		memset(sub, 0, sizeof(*sub));
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e37a:	f64f 75ff 	movw	r5, #65535	; 0xffff
		memset(sub, 0, sizeof(*sub));
 800e37e:	22e4      	movs	r2, #228	; 0xe4
 800e380:	2100      	movs	r1, #0
 800e382:	480d      	ldr	r0, [pc, #52]	; (800e3b8 <bt_mesh_cfg_reset+0x9c>)
 800e384:	f7f2 faa8 	bl	80008d8 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e388:	f8a4 51d0 	strh.w	r5, [r4, #464]	; 0x1d0
		memset(sub, 0, sizeof(*sub));
 800e38c:	22e4      	movs	r2, #228	; 0xe4
 800e38e:	2100      	movs	r1, #0
 800e390:	480a      	ldr	r0, [pc, #40]	; (800e3bc <bt_mesh_cfg_reset+0xa0>)
 800e392:	f7f2 faa1 	bl	80008d8 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e396:	f8a4 52b4 	strh.w	r5, [r4, #692]	; 0x2b4
	}

	memset(labels, 0, sizeof(labels));
 800e39a:	2236      	movs	r2, #54	; 0x36
 800e39c:	2100      	movs	r1, #0
 800e39e:	4808      	ldr	r0, [pc, #32]	; (800e3c0 <bt_mesh_cfg_reset+0xa4>)
}
 800e3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(labels, 0, sizeof(labels));
 800e3a4:	f7f2 ba98 	b.w	80008d8 <memset>
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20000d90 	.word	0x20000d90
 800e3b0:	20005b88 	.word	0x20005b88
 800e3b4:	20005d14 	.word	0x20005d14
 800e3b8:	20005d3c 	.word	0x20005d3c
 800e3bc:	20005e20 	.word	0x20005e20
 800e3c0:	20000d94 	.word	0x20000d94

0800e3c4 <bt_mesh_heartbeat>:

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
 800e3c8:	4b18      	ldr	r3, [pc, #96]	; (800e42c <bt_mesh_heartbeat+0x68>)
 800e3ca:	681c      	ldr	r4, [r3, #0]
{
 800e3cc:	4615      	mov	r5, r2

	if (!cfg) {
 800e3ce:	b364      	cbz	r4, 800e42a <bt_mesh_heartbeat+0x66>
		BT_WARN("No configuaration server context available");
		return;
	}

	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
 800e3d0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e3d4:	4283      	cmp	r3, r0
 800e3d6:	d128      	bne.n	800e42a <bt_mesh_heartbeat+0x66>
 800e3d8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800e3dc:	428b      	cmp	r3, r1
 800e3de:	d124      	bne.n	800e42a <bt_mesh_heartbeat+0x66>
 800e3e0:	f003 fd68 	bl	8011eb4 <_impl_k_uptime_get>
		BT_WARN("No subscription for received heartbeat");
		return;
	}

	if (k_uptime_get() > cfg->hb_sub.expiry) {
 800e3e4:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 800e3e8:	4282      	cmp	r2, r0
 800e3ea:	418b      	sbcs	r3, r1
 800e3ec:	db1d      	blt.n	800e42a <bt_mesh_heartbeat+0x66>
		BT_WARN("Heartbeat subscription period expired");
		return;
	}

	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
 800e3ee:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);

	if (cfg->hb_sub.count < 0xffff) {
 800e3f2:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
 800e3f6:	42aa      	cmp	r2, r5
 800e3f8:	bf28      	it	cs
 800e3fa:	462a      	movcs	r2, r5
 800e3fc:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e400:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
	if (cfg->hb_sub.count < 0xffff) {
 800e404:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e408:	42aa      	cmp	r2, r5
 800e40a:	bf38      	it	cc
 800e40c:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
 800e40e:	4299      	cmp	r1, r3

	BT_DBG("src 0x%04x dst 0x%04x hops %u min %u max %u count %u", src,
	       dst, hops, cfg->hb_sub.min_hops, cfg->hb_sub.max_hops,
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
 800e410:	6d23      	ldr	r3, [r4, #80]	; 0x50
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e412:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
		cfg->hb_sub.count++;
 800e416:	bf1c      	itt	ne
 800e418:	3101      	addne	r1, #1
 800e41a:	f8a4 104c 	strhne.w	r1, [r4, #76]	; 0x4c
	if (cfg->hb_sub.func) {
 800e41e:	b123      	cbz	r3, 800e42a <bt_mesh_heartbeat+0x66>
		cfg->hb_sub.func(hops, feat);
 800e420:	4631      	mov	r1, r6
 800e422:	4628      	mov	r0, r5
	}
}
 800e424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
 800e428:	4718      	bx	r3
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	20000d90 	.word	0x20000d90

0800e430 <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
 800e430:	4b02      	ldr	r3, [pc, #8]	; (800e43c <bt_mesh_net_transmit_get+0xc>)
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	b100      	cbz	r0, 800e438 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
 800e436:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	20000d90 	.word	0x20000d90

0800e440 <net_transmit_set>:
{
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	4604      	mov	r4, r0
 800e446:	460d      	mov	r5, r1
 800e448:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e44a:	2100      	movs	r1, #0
 800e44c:	2210      	movs	r2, #16
 800e44e:	a802      	add	r0, sp, #8
 800e450:	f7f2 fa42 	bl	80008d8 <memset>
 800e454:	2307      	movs	r3, #7
 800e456:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e45a:	69a3      	ldr	r3, [r4, #24]
	if (!cfg) {
 800e45c:	b113      	cbz	r3, 800e464 <net_transmit_set+0x24>
		cfg->net_transmit = buf->data[0];
 800e45e:	6832      	ldr	r2, [r6, #0]
 800e460:	7812      	ldrb	r2, [r2, #0]
 800e462:	711a      	strb	r2, [r3, #4]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e464:	f248 0125 	movw	r1, #32805	; 0x8025
 800e468:	a802      	add	r0, sp, #8
 800e46a:	f7fe f8b3 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
 800e46e:	f7ff ffdf 	bl	800e430 <bt_mesh_net_transmit_get>
 800e472:	4601      	mov	r1, r0
 800e474:	a802      	add	r0, sp, #8
 800e476:	f003 f854 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e47a:	2300      	movs	r3, #0
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	aa02      	add	r2, sp, #8
 800e480:	4629      	mov	r1, r5
 800e482:	4620      	mov	r0, r4
 800e484:	f7fe f8c8 	bl	800c618 <bt_mesh_model_send>
}
 800e488:	b006      	add	sp, #24
 800e48a:	bd70      	pop	{r4, r5, r6, pc}

0800e48c <net_transmit_get>:
{
 800e48c:	b530      	push	{r4, r5, lr}
 800e48e:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e490:	2210      	movs	r2, #16
{
 800e492:	4604      	mov	r4, r0
 800e494:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e496:	a802      	add	r0, sp, #8
 800e498:	2100      	movs	r1, #0
 800e49a:	f7f2 fa1d 	bl	80008d8 <memset>
 800e49e:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e4a0:	f248 0125 	movw	r1, #32805	; 0x8025
 800e4a4:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e4a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e4aa:	f7fe f893 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
 800e4ae:	f7ff ffbf 	bl	800e430 <bt_mesh_net_transmit_get>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	a802      	add	r0, sp, #8
 800e4b6:	f003 f834 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	aa02      	add	r2, sp, #8
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f7fe f8a8 	bl	800c618 <bt_mesh_model_send>
}
 800e4c8:	b007      	add	sp, #28
 800e4ca:	bd30      	pop	{r4, r5, pc}

0800e4cc <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
 800e4cc:	4b03      	ldr	r3, [pc, #12]	; (800e4dc <bt_mesh_relay_get+0x10>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	b10b      	cbz	r3, 800e4d6 <bt_mesh_relay_get+0xa>
		return conf->relay;
 800e4d2:	7958      	ldrb	r0, [r3, #5]
 800e4d4:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
 800e4d6:	2002      	movs	r0, #2
}
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	20000d90 	.word	0x20000d90

0800e4e0 <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
 800e4e0:	4b03      	ldr	r3, [pc, #12]	; (800e4f0 <bt_mesh_friend_get+0x10>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	b10b      	cbz	r3, 800e4ea <bt_mesh_friend_get+0xa>
		return conf->frnd;
 800e4e6:	7a58      	ldrb	r0, [r3, #9]
 800e4e8:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
 800e4ea:	2002      	movs	r0, #2
}
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	20000d90 	.word	0x20000d90

0800e4f4 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
 800e4f4:	4b02      	ldr	r3, [pc, #8]	; (800e500 <bt_mesh_relay_retransmit_get+0xc>)
 800e4f6:	6818      	ldr	r0, [r3, #0]
 800e4f8:	b100      	cbz	r0, 800e4fc <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
 800e4fa:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000d90 	.word	0x20000d90

0800e504 <relay_get>:
{
 800e504:	b530      	push	{r4, r5, lr}
 800e506:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e508:	2210      	movs	r2, #16
{
 800e50a:	4604      	mov	r4, r0
 800e50c:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e50e:	a802      	add	r0, sp, #8
 800e510:	2100      	movs	r1, #0
 800e512:	f7f2 f9e1 	bl	80008d8 <memset>
 800e516:	2308      	movs	r3, #8
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e518:	eb0d 0003 	add.w	r0, sp, r3
 800e51c:	f248 0128 	movw	r1, #32808	; 0x8028
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e520:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e524:	f7fe f856 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
 800e528:	f7ff ffd0 	bl	800e4cc <bt_mesh_relay_get>
 800e52c:	4601      	mov	r1, r0
 800e52e:	a802      	add	r0, sp, #8
 800e530:	f002 fff7 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
 800e534:	f7ff ffde 	bl	800e4f4 <bt_mesh_relay_retransmit_get>
 800e538:	4601      	mov	r1, r0
 800e53a:	a802      	add	r0, sp, #8
 800e53c:	f002 fff1 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e540:	2300      	movs	r3, #0
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	aa02      	add	r2, sp, #8
 800e546:	4629      	mov	r1, r5
 800e548:	4620      	mov	r0, r4
 800e54a:	f7fe f865 	bl	800c618 <bt_mesh_model_send>
}
 800e54e:	b007      	add	sp, #28
 800e550:	bd30      	pop	{r4, r5, pc}
	...

0800e554 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
 800e554:	4b02      	ldr	r3, [pc, #8]	; (800e560 <bt_mesh_beacon_get+0xc>)
 800e556:	6818      	ldr	r0, [r3, #0]
 800e558:	b100      	cbz	r0, 800e55c <bt_mesh_beacon_get+0x8>
		return conf->beacon;
 800e55a:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	20000d90 	.word	0x20000d90

0800e564 <beacon_set>:
{
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	4604      	mov	r4, r0
 800e568:	b086      	sub	sp, #24
 800e56a:	460d      	mov	r5, r1
 800e56c:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e56e:	2100      	movs	r1, #0
 800e570:	2210      	movs	r2, #16
 800e572:	a802      	add	r0, sp, #8
 800e574:	f7f2 f9b0 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e578:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e57a:	2307      	movs	r3, #7
 800e57c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e580:	b152      	cbz	r2, 800e598 <beacon_set+0x34>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
 800e582:	6833      	ldr	r3, [r6, #0]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d818      	bhi.n	800e5bc <beacon_set+0x58>
		if (buf->data[0] != cfg->beacon) {
 800e58a:	79d1      	ldrb	r1, [r2, #7]
 800e58c:	4299      	cmp	r1, r3
 800e58e:	d003      	beq.n	800e598 <beacon_set+0x34>
			cfg->beacon = buf->data[0];
 800e590:	71d3      	strb	r3, [r2, #7]
			if (cfg->beacon) {
 800e592:	b1ab      	cbz	r3, 800e5c0 <beacon_set+0x5c>
				bt_mesh_beacon_enable();
 800e594:	f7fb f8b6 	bl	8009704 <bt_mesh_beacon_enable>
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e598:	f248 010b 	movw	r1, #32779	; 0x800b
 800e59c:	a802      	add	r0, sp, #8
 800e59e:	f7fe f819 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
 800e5a2:	f7ff ffd7 	bl	800e554 <bt_mesh_beacon_get>
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	a802      	add	r0, sp, #8
 800e5aa:	f002 ffba 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	aa02      	add	r2, sp, #8
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f7fe f82e 	bl	800c618 <bt_mesh_model_send>
}
 800e5bc:	b006      	add	sp, #24
 800e5be:	bd70      	pop	{r4, r5, r6, pc}
				bt_mesh_beacon_disable();
 800e5c0:	f7fb f8ca 	bl	8009758 <bt_mesh_beacon_disable>
 800e5c4:	e7e8      	b.n	800e598 <beacon_set+0x34>

0800e5c6 <beacon_get>:
{
 800e5c6:	b530      	push	{r4, r5, lr}
 800e5c8:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e5ca:	2210      	movs	r2, #16
{
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e5d0:	a802      	add	r0, sp, #8
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	f7f2 f980 	bl	80008d8 <memset>
 800e5d8:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e5da:	f248 010b 	movw	r1, #32779	; 0x800b
 800e5de:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e5e0:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e5e4:	f7fd fff6 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
 800e5e8:	f7ff ffb4 	bl	800e554 <bt_mesh_beacon_get>
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	a802      	add	r0, sp, #8
 800e5f0:	f002 ff97 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	aa02      	add	r2, sp, #8
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f7fe f80b 	bl	800c618 <bt_mesh_model_send>
}
 800e602:	b007      	add	sp, #28
 800e604:	bd30      	pop	{r4, r5, pc}
	...

0800e608 <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
 800e608:	4b03      	ldr	r3, [pc, #12]	; (800e618 <bt_mesh_gatt_proxy_get+0x10>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	b10b      	cbz	r3, 800e612 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
 800e60e:	7a18      	ldrb	r0, [r3, #8]
 800e610:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
 800e612:	2002      	movs	r0, #2
}
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	20000d90 	.word	0x20000d90

0800e61c <hb_send>:
{
 800e61c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e61e:	6984      	ldr	r4, [r0, #24]
{
 800e620:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
 800e622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e626:	2300      	movs	r3, #0
{
 800e628:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
 800e62a:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e62e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800e630:	9306      	str	r3, [sp, #24]
		.net_idx = cfg->hb_pub.net_idx,
 800e632:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
	struct bt_mesh_msg_ctx ctx = {
 800e634:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e638:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800e63c:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
 800e640:	9307      	str	r3, [sp, #28]
 800e642:	9308      	str	r3, [sp, #32]
 800e644:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
 800e646:	f8ad 0014 	strh.w	r0, [sp, #20]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
 800e64a:	f7fb f943 	bl	80098d4 <bt_mesh_subnet_get>
		.src = model->elem->addr,
 800e64e:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
 800e650:	9007      	str	r0, [sp, #28]
 800e652:	881b      	ldrh	r3, [r3, #0]
 800e654:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
 800e658:	ae05      	add	r6, sp, #20
	struct bt_mesh_net_tx tx = {
 800e65a:	9608      	str	r6, [sp, #32]
		.xmit = bt_mesh_net_transmit_get(),
 800e65c:	f7ff fee8 	bl	800e430 <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
 800e660:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800e664:	f88d 3010 	strb.w	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
 800e668:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
 800e66c:	f7ff ff2e 	bl	800e4cc <bt_mesh_relay_get>
	u16_t feat = 0;
 800e670:	1e43      	subs	r3, r0, #1
 800e672:	425a      	negs	r2, r3
 800e674:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 800e676:	f7ff ffc7 	bl	800e608 <bt_mesh_gatt_proxy_get>
 800e67a:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
 800e67c:	bf08      	it	eq
 800e67e:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
 800e682:	f7ff ff2d 	bl	800e4e0 <bt_mesh_friend_get>
 800e686:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
 800e688:	bf08      	it	eq
 800e68a:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
 800e68e:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
 800e690:	0212      	lsls	r2, r2, #8
 800e692:	f8ad 2011 	strh.w	r2, [sp, #17]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
 800e696:	9302      	str	r3, [sp, #8]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	aa04      	add	r2, sp, #16
 800e69e:	2303      	movs	r3, #3
 800e6a0:	210a      	movs	r1, #10
 800e6a2:	a807      	add	r0, sp, #28
 800e6a4:	f7fc fcf0 	bl	800b088 <bt_mesh_ctl_send>
}
 800e6a8:	b00a      	add	sp, #40	; 0x28
 800e6aa:	bd70      	pop	{r4, r5, r6, pc}

0800e6ac <friend_set>:
{
 800e6ac:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e6ae:	6813      	ldr	r3, [r2, #0]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b01      	cmp	r3, #1
{
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e6b8:	d81a      	bhi.n	800e6f0 <friend_set+0x44>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e6ba:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
 800e6bc:	b194      	cbz	r4, 800e6e4 <friend_set+0x38>
	if (cfg->frnd == buf->data[0]) {
 800e6be:	7a62      	ldrb	r2, [r4, #9]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d00f      	beq.n	800e6e4 <friend_set+0x38>
		cfg->frnd = buf->data[0];
 800e6c4:	7263      	strb	r3, [r4, #9]
		if (cfg->frnd == BT_MESH_FRIEND_DISABLED) {
 800e6c6:	b91b      	cbnz	r3, 800e6d0 <friend_set+0x24>
			bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
 800e6c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e6cc:	f000 fd88 	bl	800f1e0 <bt_mesh_friend_clear_net_idx>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e6d0:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e6d2:	f7fb f8ff 	bl	80098d4 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
 800e6d6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e6d8:	075b      	lsls	r3, r3, #29
 800e6da:	d503      	bpl.n	800e6e4 <friend_set+0x38>
 800e6dc:	b110      	cbz	r0, 800e6e4 <friend_set+0x38>
		hb_send(model);
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f7ff ff9c 	bl	800e61c <hb_send>
	send_friend_status(model, ctx);
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4628      	mov	r0, r5
}
 800e6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
 800e6ec:	f7fe b97a 	b.w	800c9e4 <send_friend_status>
 800e6f0:	bd70      	pop	{r4, r5, r6, pc}

0800e6f2 <relay_set>:
{
 800e6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	b087      	sub	sp, #28
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	4615      	mov	r5, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	2210      	movs	r2, #16
 800e700:	a802      	add	r0, sp, #8
 800e702:	f7f2 f8e9 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e706:	69b4      	ldr	r4, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e708:	2308      	movs	r3, #8
 800e70a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e70e:	b1bc      	cbz	r4, 800e740 <relay_set+0x4e>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
 800e710:	682a      	ldr	r2, [r5, #0]
 800e712:	7813      	ldrb	r3, [r2, #0]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d82b      	bhi.n	800e770 <relay_set+0x7e>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
 800e718:	7965      	ldrb	r5, [r4, #5]
 800e71a:	2d02      	cmp	r5, #2
 800e71c:	d02a      	beq.n	800e774 <relay_set+0x82>
			cfg->relay = buf->data[0];
 800e71e:	7163      	strb	r3, [r4, #5]
			change = (cfg->relay != buf->data[0]);
 800e720:	1b5d      	subs	r5, r3, r5
			cfg->relay_retransmit = buf->data[1];
 800e722:	7853      	ldrb	r3, [r2, #1]
 800e724:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
 800e726:	bf18      	it	ne
 800e728:	2501      	movne	r5, #1
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e72a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e72c:	f7fb f8d2 	bl	80098d4 <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
 800e730:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e732:	07db      	lsls	r3, r3, #31
 800e734:	d504      	bpl.n	800e740 <relay_set+0x4e>
 800e736:	b118      	cbz	r0, 800e740 <relay_set+0x4e>
 800e738:	b115      	cbz	r5, 800e740 <relay_set+0x4e>
			hb_send(model);
 800e73a:	4630      	mov	r0, r6
 800e73c:	f7ff ff6e 	bl	800e61c <hb_send>
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e740:	f248 0128 	movw	r1, #32808	; 0x8028
 800e744:	a802      	add	r0, sp, #8
 800e746:	f7fd ff45 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
 800e74a:	f7ff febf 	bl	800e4cc <bt_mesh_relay_get>
 800e74e:	4601      	mov	r1, r0
 800e750:	a802      	add	r0, sp, #8
 800e752:	f002 fee6 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
 800e756:	f7ff fecd 	bl	800e4f4 <bt_mesh_relay_retransmit_get>
 800e75a:	4601      	mov	r1, r0
 800e75c:	a802      	add	r0, sp, #8
 800e75e:	f002 fee0 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e762:	2300      	movs	r3, #0
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	aa02      	add	r2, sp, #8
 800e768:	4639      	mov	r1, r7
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7fd ff54 	bl	800c618 <bt_mesh_model_send>
}
 800e770:	b007      	add	sp, #28
 800e772:	bdf0      	pop	{r4, r5, r6, r7, pc}
			change = false;
 800e774:	2500      	movs	r5, #0
 800e776:	e7d8      	b.n	800e72a <relay_set+0x38>

0800e778 <hb_publish>:
{
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4604      	mov	r4, r0
	struct bt_mesh_model *model = cfg->model;
 800e77c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e780:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800e782:	f7fb f8a7 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800e786:	b908      	cbnz	r0, 800e78c <hb_publish+0x14>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e788:	8520      	strh	r0, [r4, #40]	; 0x28
		return;
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
	hb_send(model);
 800e78c:	4628      	mov	r0, r5
 800e78e:	f7ff ff45 	bl	800e61c <hb_send>
	if (cfg->hb_pub.count == 0) {
 800e792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e794:	b313      	cbz	r3, 800e7dc <hb_publish+0x64>
	if (cfg->hb_pub.count != 0xffff) {
 800e796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e79a:	4293      	cmp	r3, r2
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
 800e79c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
		cfg->hb_pub.count--;
 800e7a0:	bf1c      	itt	ne
 800e7a2:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800e7a6:	8563      	strhne	r3, [r4, #42]	; 0x2a
	if (!val) {
 800e7a8:	b142      	cbz	r2, 800e7bc <hb_publish+0x44>
	} else if (val == 0xff || val == 0x11) {
 800e7aa:	2aff      	cmp	r2, #255	; 0xff
 800e7ac:	d013      	beq.n	800e7d6 <hb_publish+0x5e>
 800e7ae:	2a11      	cmp	r2, #17
 800e7b0:	d011      	beq.n	800e7d6 <hb_publish+0x5e>
		return (1 << (val - sub));
 800e7b2:	3a01      	subs	r2, #1
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	fa03 f202 	lsl.w	r2, r3, r2
 800e7ba:	b292      	uxth	r2, r2
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
 800e7bc:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 800e7c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e7c4:	00d2      	lsls	r2, r2, #3
 800e7c6:	b292      	uxth	r2, r2
	if (period_ms) {
 800e7c8:	b142      	cbz	r2, 800e7dc <hb_publish+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	4804      	ldr	r0, [pc, #16]	; (800e7e0 <hb_publish+0x68>)
}
 800e7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7d2:	f003 be8d 	b.w	80124f0 <k_delayed_work_submit_to_queue>
		return 0xffff;
 800e7d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7da:	e7ef      	b.n	800e7bc <hb_publish+0x44>
 800e7dc:	bd38      	pop	{r3, r4, r5, pc}
 800e7de:	bf00      	nop
 800e7e0:	20001498 	.word	0x20001498

0800e7e4 <node_identity_set>:
{
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	b088      	sub	sp, #32
 800e7ea:	4614      	mov	r4, r2
 800e7ec:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e7ee:	2214      	movs	r2, #20
{
 800e7f0:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e7f2:	a803      	add	r0, sp, #12
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	f7f2 f86f 	bl	80008d8 <memset>
 800e7fa:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
 800e7fc:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e7fe:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
 800e802:	f002 fefa 	bl	80115fa <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800e806:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800e80a:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800e80c:	d222      	bcs.n	800e854 <node_identity_set+0x70>
	node_id = net_buf_simple_pull_u8(buf);
 800e80e:	4620      	mov	r0, r4
 800e810:	f002 feeb 	bl	80115ea <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
 800e814:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
 800e816:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
 800e818:	d81c      	bhi.n	800e854 <node_identity_set+0x70>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
 800e81a:	f248 0148 	movw	r1, #32840	; 0x8048
 800e81e:	a803      	add	r0, sp, #12
 800e820:	f7fd fed8 	bl	800c5d4 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
 800e824:	4628      	mov	r0, r5
 800e826:	f7fb f855 	bl	80098d4 <bt_mesh_subnet_get>
	if (!sub) {
 800e82a:	4604      	mov	r4, r0
 800e82c:	b9a8      	cbnz	r0, 800e85a <node_identity_set+0x76>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
 800e82e:	2104      	movs	r1, #4
 800e830:	a803      	add	r0, sp, #12
 800e832:	f002 fe76 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
 800e836:	4629      	mov	r1, r5
 800e838:	a803      	add	r0, sp, #12
 800e83a:	f002 fe7a 	bl	8011532 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, node_id);
 800e83e:	4631      	mov	r1, r6
		net_buf_simple_add_u8(msg, sub->node_id);
 800e840:	a803      	add	r0, sp, #12
 800e842:	f002 fe6e 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e846:	2300      	movs	r3, #0
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	aa03      	add	r2, sp, #12
 800e84c:	4641      	mov	r1, r8
 800e84e:	4638      	mov	r0, r7
 800e850:	f7fd fee2 	bl	800c618 <bt_mesh_model_send>
}
 800e854:	b008      	add	sp, #32
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800e85a:	2100      	movs	r1, #0
 800e85c:	a803      	add	r0, sp, #12
 800e85e:	f002 fe60 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
 800e862:	4629      	mov	r1, r5
 800e864:	a803      	add	r0, sp, #12
 800e866:	f002 fe64 	bl	8011532 <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 800e86a:	f7ff fecd 	bl	800e608 <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800e86e:	2801      	cmp	r0, #1
 800e870:	d105      	bne.n	800e87e <node_identity_set+0x9a>
				bt_mesh_proxy_identity_start(sub);
 800e872:	4620      	mov	r0, r4
			if (node_id) {
 800e874:	b136      	cbz	r6, 800e884 <node_identity_set+0xa0>
				bt_mesh_proxy_identity_start(sub);
 800e876:	f002 fb3d 	bl	8010ef4 <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
 800e87a:	f7fa fd15 	bl	80092a8 <bt_mesh_adv_update>
		net_buf_simple_add_u8(msg, sub->node_id);
 800e87e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800e882:	e7dd      	b.n	800e840 <node_identity_set+0x5c>
				bt_mesh_proxy_identity_stop(sub);
 800e884:	f002 fb50 	bl	8010f28 <bt_mesh_proxy_identity_stop>
 800e888:	e7f7      	b.n	800e87a <node_identity_set+0x96>

0800e88a <send_gatt_proxy_status>:
{
 800e88a:	b530      	push	{r4, r5, lr}
 800e88c:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e88e:	2210      	movs	r2, #16
{
 800e890:	4604      	mov	r4, r0
 800e892:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e894:	a802      	add	r0, sp, #8
 800e896:	2100      	movs	r1, #0
 800e898:	f7f2 f81e 	bl	80008d8 <memset>
 800e89c:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
 800e89e:	f248 0114 	movw	r1, #32788	; 0x8014
 800e8a2:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e8a4:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
 800e8a8:	f7fd fe94 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_gatt_proxy_get());
 800e8ac:	f7ff feac 	bl	800e608 <bt_mesh_gatt_proxy_get>
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	a802      	add	r0, sp, #8
 800e8b4:	f002 fe35 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	aa02      	add	r2, sp, #8
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f7fd fea9 	bl	800c618 <bt_mesh_model_send>
}
 800e8c6:	b007      	add	sp, #28
 800e8c8:	bd30      	pop	{r4, r5, pc}

0800e8ca <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
 800e8ca:	f7ff bfde 	b.w	800e88a <send_gatt_proxy_status>
	...

0800e8d0 <gatt_proxy_set>:
{
 800e8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e8d2:	6813      	ldr	r3, [r2, #0]
 800e8d4:	781a      	ldrb	r2, [r3, #0]
 800e8d6:	2a01      	cmp	r2, #1
{
 800e8d8:	4606      	mov	r6, r0
 800e8da:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e8dc:	d832      	bhi.n	800e944 <gatt_proxy_set+0x74>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
 800e8de:	f7ff fe93 	bl	800e608 <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
 800e8e2:	2802      	cmp	r0, #2
 800e8e4:	d028      	beq.n	800e938 <gatt_proxy_set+0x68>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e8e6:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
 800e8e8:	b334      	cbz	r4, 800e938 <gatt_proxy_set+0x68>
	if (cfg->gatt_proxy == buf->data[0]) {
 800e8ea:	7a23      	ldrb	r3, [r4, #8]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d023      	beq.n	800e938 <gatt_proxy_set+0x68>
	cfg->gatt_proxy = buf->data[0];
 800e8f0:	7222      	strb	r2, [r4, #8]
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
 800e8f2:	b9aa      	cbnz	r2, 800e920 <gatt_proxy_set+0x50>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 800e8f4:	4d14      	ldr	r5, [pc, #80]	; (800e948 <gatt_proxy_set+0x78>)
 800e8f6:	f8b5 21d0 	ldrh.w	r2, [r5, #464]	; 0x1d0
 800e8fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d003      	beq.n	800e90a <gatt_proxy_set+0x3a>
				bt_mesh_proxy_identity_stop(sub);
 800e902:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
 800e906:	f002 fb0f 	bl	8010f28 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 800e90a:	f8b5 22b4 	ldrh.w	r2, [r5, #692]	; 0x2b4
 800e90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e912:	429a      	cmp	r2, r3
 800e914:	d002      	beq.n	800e91c <gatt_proxy_set+0x4c>
				bt_mesh_proxy_identity_stop(sub);
 800e916:	480d      	ldr	r0, [pc, #52]	; (800e94c <gatt_proxy_set+0x7c>)
 800e918:	f002 fb06 	bl	8010f28 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
 800e91c:	f002 fb58 	bl	8010fd0 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
 800e920:	f7fa fcc2 	bl	80092a8 <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e924:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e926:	f7fa ffd5 	bl	80098d4 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
 800e92a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e92c:	079b      	lsls	r3, r3, #30
 800e92e:	d503      	bpl.n	800e938 <gatt_proxy_set+0x68>
 800e930:	b110      	cbz	r0, 800e938 <gatt_proxy_set+0x68>
		hb_send(model);
 800e932:	4630      	mov	r0, r6
 800e934:	f7ff fe72 	bl	800e61c <hb_send>
	send_gatt_proxy_status(model, ctx);
 800e938:	4639      	mov	r1, r7
 800e93a:	4630      	mov	r0, r6
}
 800e93c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
 800e940:	f7ff bfa3 	b.w	800e88a <send_gatt_proxy_status>
 800e944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e946:	bf00      	nop
 800e948:	20005b88 	.word	0x20005b88
 800e94c:	20005e20 	.word	0x20005e20

0800e950 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
 800e950:	4b03      	ldr	r3, [pc, #12]	; (800e960 <bt_mesh_default_ttl_get+0x10>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	b10b      	cbz	r3, 800e95a <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
 800e956:	7a98      	ldrb	r0, [r3, #10]
 800e958:	4770      	bx	lr
	}

	return DEFAULT_TTL;
 800e95a:	2007      	movs	r0, #7
}
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20000d90 	.word	0x20000d90

0800e964 <default_ttl_set>:
{
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4604      	mov	r4, r0
 800e968:	b086      	sub	sp, #24
 800e96a:	460d      	mov	r5, r1
 800e96c:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e96e:	2100      	movs	r1, #0
 800e970:	2210      	movs	r2, #16
 800e972:	a802      	add	r0, sp, #8
 800e974:	f7f1 ffb0 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e978:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e97a:	2307      	movs	r3, #7
 800e97c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e980:	b132      	cbz	r2, 800e990 <default_ttl_set+0x2c>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
 800e982:	6833      	ldr	r3, [r6, #0]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	0619      	lsls	r1, r3, #24
 800e988:	d414      	bmi.n	800e9b4 <default_ttl_set+0x50>
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d012      	beq.n	800e9b4 <default_ttl_set+0x50>
		cfg->default_ttl = buf->data[0];
 800e98e:	7293      	strb	r3, [r2, #10]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e990:	f248 010e 	movw	r1, #32782	; 0x800e
 800e994:	a802      	add	r0, sp, #8
 800e996:	f7fd fe1d 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
 800e99a:	f7ff ffd9 	bl	800e950 <bt_mesh_default_ttl_get>
 800e99e:	4601      	mov	r1, r0
 800e9a0:	a802      	add	r0, sp, #8
 800e9a2:	f002 fdbe 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	aa02      	add	r2, sp, #8
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f7fd fe32 	bl	800c618 <bt_mesh_model_send>
}
 800e9b4:	b006      	add	sp, #24
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}

0800e9b8 <default_ttl_get>:
{
 800e9b8:	b530      	push	{r4, r5, lr}
 800e9ba:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9bc:	2210      	movs	r2, #16
{
 800e9be:	4604      	mov	r4, r0
 800e9c0:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9c2:	a802      	add	r0, sp, #8
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	f7f1 ff87 	bl	80008d8 <memset>
 800e9ca:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e9cc:	f248 010e 	movw	r1, #32782	; 0x800e
 800e9d0:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e9d6:	f7fd fdfd 	bl	800c5d4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
 800e9da:	f7ff ffb9 	bl	800e950 <bt_mesh_default_ttl_get>
 800e9de:	4601      	mov	r1, r0
 800e9e0:	a802      	add	r0, sp, #8
 800e9e2:	f002 fd9e 	bl	8011522 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	aa02      	add	r2, sp, #8
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7fd fe12 	bl	800c618 <bt_mesh_model_send>
}
 800e9f4:	b007      	add	sp, #28
 800e9f6:	bd30      	pop	{r4, r5, pc}

0800e9f8 <bt_mesh_label_uuid_get>:
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <bt_mesh_label_uuid_get+0x2c>)
 800e9fa:	881a      	ldrh	r2, [r3, #0]
 800e9fc:	4282      	cmp	r2, r0
 800e9fe:	d00b      	beq.n	800ea18 <bt_mesh_label_uuid_get+0x20>
 800ea00:	8a5a      	ldrh	r2, [r3, #18]
 800ea02:	4282      	cmp	r2, r0
 800ea04:	d00a      	beq.n	800ea1c <bt_mesh_label_uuid_get+0x24>
 800ea06:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800ea08:	4282      	cmp	r2, r0
 800ea0a:	d109      	bne.n	800ea20 <bt_mesh_label_uuid_get+0x28>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800ea0c:	2002      	movs	r0, #2
			BT_DBG("Found Label UUID for 0x%04x: %s", addr,
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
 800ea0e:	2212      	movs	r2, #18
 800ea10:	fb02 3000 	mla	r0, r2, r0, r3
 800ea14:	3002      	adds	r0, #2
 800ea16:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800ea18:	2000      	movs	r0, #0
 800ea1a:	e7f8      	b.n	800ea0e <bt_mesh_label_uuid_get+0x16>
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	e7f6      	b.n	800ea0e <bt_mesh_label_uuid_get+0x16>
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
 800ea20:	2000      	movs	r0, #0
}
 800ea22:	4770      	bx	lr
 800ea24:	20000d94 	.word	0x20000d94

0800ea28 <attention_off>:
	struct bt_mesh_health_srv *srv = CONTAINER_OF(work,
						      struct bt_mesh_health_srv,
						      attn_timer.work);
	BT_DBG("");

	if (srv->cb && srv->cb->attn_off) {
 800ea28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ea2c:	b123      	cbz	r3, 800ea38 <attention_off+0x10>
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	b113      	cbz	r3, 800ea38 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
 800ea32:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800ea36:	4718      	bx	r3
 800ea38:	4770      	bx	lr

0800ea3a <health_pub_update>:
{
 800ea3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
 800ea3e:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
 800ea40:	f8d0 a018 	ldr.w	sl, [r0, #24]
	count = health_get_current(mod, pub->msg);
 800ea44:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
 800ea46:	2104      	movs	r1, #4
{
 800ea48:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f7fd fdc2 	bl	800c5d4 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
 800ea50:	2101      	movs	r1, #1
 800ea52:	4620      	mov	r0, r4
 800ea54:	f002 fd56 	bl	8011504 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
 800ea58:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
 800ea5a:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f002 fd51 	bl	8011504 <net_buf_simple_add>
 800ea62:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
 800ea64:	f7fd ff4e 	bl	800c904 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
 800ea68:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
 800ea6c:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
 800ea6e:	b1b3      	cbz	r3, 800ea9e <health_pub_update+0x64>
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	b1a3      	cbz	r3, 800ea9e <health_pub_update+0x64>
		fault_count = net_buf_simple_tailroom(msg);
 800ea74:	4620      	mov	r0, r4
 800ea76:	f002 fdea 	bl	801164e <net_buf_simple_tailroom>
 800ea7a:	f88d 000d 	strb.w	r0, [sp, #13]
	return buf->data + buf->len;
 800ea7e:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
 800ea80:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ea84:	88a3      	ldrh	r3, [r4, #4]
 800ea86:	f10d 000d 	add.w	r0, sp, #13
 800ea8a:	9000      	str	r0, [sp, #0]
 800ea8c:	f8d1 a000 	ldr.w	sl, [r1]
 800ea90:	4413      	add	r3, r2
 800ea92:	4639      	mov	r1, r7
 800ea94:	f10d 020e 	add.w	r2, sp, #14
 800ea98:	4640      	mov	r0, r8
 800ea9a:	47d0      	blx	sl
		if (err) {
 800ea9c:	b148      	cbz	r0, 800eab2 <health_pub_update+0x78>
		sys_put_le16(comp->cid, company_ptr);
 800ea9e:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
 800eaa2:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
 800eaa4:	0a1b      	lsrs	r3, r3, #8
 800eaa6:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	703b      	strb	r3, [r7, #0]
		fault_count = 0;
 800eaac:	f88d 300d 	strb.w	r3, [sp, #13]
 800eab0:	e009      	b.n	800eac6 <health_pub_update+0x8c>
			sys_put_le16(company_id, company_ptr);
 800eab2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
 800eab6:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
 800eab8:	0a1b      	lsrs	r3, r3, #8
 800eaba:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
 800eabc:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800eac0:	4620      	mov	r0, r4
 800eac2:	f002 fd1f 	bl	8011504 <net_buf_simple_add>
	return fault_count;
 800eac6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
 800eaca:	b91a      	cbnz	r2, 800ead4 <health_pub_update+0x9a>
		pub->period_div = 0;
 800eacc:	7af3      	ldrb	r3, [r6, #11]
 800eace:	f362 0303 	bfi	r3, r2, #0, #4
 800ead2:	72f3      	strb	r3, [r6, #11]
}
 800ead4:	2000      	movs	r0, #0
 800ead6:	b004      	add	sp, #16
 800ead8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eadc <bt_mesh_health_srv_init>:
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
 800eadc:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
 800eade:	6984      	ldr	r4, [r0, #24]
{
 800eae0:	4605      	mov	r5, r0
 800eae2:	460e      	mov	r6, r1

	if (!srv) {
 800eae4:	b914      	cbnz	r4, 800eaec <bt_mesh_health_srv_init+0x10>
		if (!primary) {
 800eae6:	b981      	cbnz	r1, 800eb0a <bt_mesh_health_srv_init+0x2e>

	if (primary) {
		health_srv = srv;
	}

	return 0;
 800eae8:	2000      	movs	r0, #0
 800eaea:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
 800eaec:	6883      	ldr	r3, [r0, #8]
 800eaee:	b163      	cbz	r3, 800eb0a <bt_mesh_health_srv_init+0x2e>
	model->pub->update = health_pub_update,
 800eaf0:	4a07      	ldr	r2, [pc, #28]	; (800eb10 <bt_mesh_health_srv_init+0x34>)
 800eaf2:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
 800eaf4:	4907      	ldr	r1, [pc, #28]	; (800eb14 <bt_mesh_health_srv_init+0x38>)
 800eaf6:	f104 0008 	add.w	r0, r4, #8
 800eafa:	f003 fc8f 	bl	801241c <k_delayed_work_init>
	srv->model = model;
 800eafe:	6025      	str	r5, [r4, #0]
	if (primary) {
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	d0f1      	beq.n	800eae8 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
 800eb04:	4b04      	ldr	r3, [pc, #16]	; (800eb18 <bt_mesh_health_srv_init+0x3c>)
 800eb06:	601c      	str	r4, [r3, #0]
 800eb08:	e7ee      	b.n	800eae8 <bt_mesh_health_srv_init+0xc>
		return -EINVAL;
 800eb0a:	f06f 0015 	mvn.w	r0, #21
}
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	0800ea3b 	.word	0x0800ea3b
 800eb14:	0800ea29 	.word	0x0800ea29
 800eb18:	20001480 	.word	0x20001480

0800eb1c <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
 800eb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb20:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
 800eb22:	4605      	mov	r5, r0
 800eb24:	b9a8      	cbnz	r0, 800eb52 <bt_mesh_attention+0x36>
		srv = health_srv;
 800eb26:	4b12      	ldr	r3, [pc, #72]	; (800eb70 <bt_mesh_attention+0x54>)
 800eb28:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
 800eb2a:	b1fc      	cbz	r4, 800eb6c <bt_mesh_attention+0x50>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
 800eb2c:	6825      	ldr	r5, [r4, #0]
 800eb2e:	f104 0608 	add.w	r6, r4, #8
	} else {
		srv = model->user_data;
	}

	if (time) {
 800eb32:	b187      	cbz	r7, 800eb56 <bt_mesh_attention+0x3a>
		if (srv->cb && srv->cb->attn_on) {
 800eb34:	6863      	ldr	r3, [r4, #4]
 800eb36:	b11b      	cbz	r3, 800eb40 <bt_mesh_attention+0x24>
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	b10b      	cbz	r3, 800eb40 <bt_mesh_attention+0x24>
			srv->cb->attn_on(model);
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	4798      	blx	r3
 800eb40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb44:	437a      	muls	r2, r7
 800eb46:	4631      	mov	r1, r6
 800eb48:	480a      	ldr	r0, [pc, #40]	; (800eb74 <bt_mesh_attention+0x58>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
 800eb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	f003 bccf 	b.w	80124f0 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
 800eb52:	6984      	ldr	r4, [r0, #24]
 800eb54:	e7eb      	b.n	800eb2e <bt_mesh_attention+0x12>
		k_delayed_work_cancel(&srv->attn_timer);
 800eb56:	4630      	mov	r0, r6
 800eb58:	f003 fc7e 	bl	8012458 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
 800eb5c:	6863      	ldr	r3, [r4, #4]
 800eb5e:	b12b      	cbz	r3, 800eb6c <bt_mesh_attention+0x50>
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	b11b      	cbz	r3, 800eb6c <bt_mesh_attention+0x50>
			srv->cb->attn_off(model);
 800eb64:	4628      	mov	r0, r5
}
 800eb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
 800eb6a:	4718      	bx	r3
 800eb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb70:	20001480 	.word	0x20001480
 800eb74:	20001498 	.word	0x20001498

0800eb78 <net_buf_user_data>:
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800eb78:	89c3      	ldrh	r3, [r0, #14]
 800eb7a:	4418      	add	r0, r3
 800eb7c:	3013      	adds	r0, #19
}
 800eb7e:	f020 0003 	bic.w	r0, r0, #3
 800eb82:	4770      	bx	lr

0800eb84 <adv_alloc>:
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id].adv;
}
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <adv_alloc+0xc>)
 800eb86:	2218      	movs	r2, #24
 800eb88:	fb02 3000 	mla	r0, r2, r0, r3
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	20000dd0 	.word	0x20000dd0

0800eb94 <friend_purge_old_ack>:
	return 0;
}

static void friend_purge_old_ack(struct bt_mesh_friend *frnd, u64_t *seq_auth,
				 u16_t src)
{
 800eb94:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800eb98:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800eb9a:	4605      	mov	r5, r0
	sys_snode_t *cur, *prev = NULL;
 800eb9c:	2600      	movs	r6, #0

	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);

	for (cur = sys_slist_peek_head(&frnd->queue);
 800eb9e:	b90c      	cbnz	r4, 800eba4 <friend_purge_old_ack+0x10>

			net_buf_unref(buf);
			break;
		}
	}
}
 800eba0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
		if (BT_MESH_ADV(buf)->addr == src &&
 800eba4:	4620      	mov	r0, r4
 800eba6:	f7ff ffe7 	bl	800eb78 <net_buf_user_data>
 800ebaa:	6800      	ldr	r0, [r0, #0]
 800ebac:	8943      	ldrh	r3, [r0, #10]
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	d11c      	bne.n	800ebee <friend_purge_old_ack+0x5a>
 800ebb4:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
 800ebb8:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800ebbc:	45d9      	cmp	r9, fp
 800ebbe:	bf08      	it	eq
 800ebc0:	45d0      	cmpeq	r8, sl
 800ebc2:	d114      	bne.n	800ebee <friend_purge_old_ack+0x5a>
 800ebc4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
	if (!prev_node) {
 800ebc6:	b96e      	cbnz	r6, 800ebe4 <friend_purge_old_ack+0x50>
		if (list->tail == node) {
 800ebc8:	4294      	cmp	r4, r2
		list->head = node->next;
 800ebca:	64ab      	str	r3, [r5, #72]	; 0x48
		if (list->tail == node) {
 800ebcc:	d100      	bne.n	800ebd0 <friend_purge_old_ack+0x3c>
			list->tail = list->head;
 800ebce:	64eb      	str	r3, [r5, #76]	; 0x4c
			frnd->queue_size--;
 800ebd0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	652b      	str	r3, [r5, #80]	; 0x50
			buf->frags = NULL;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
 800ebda:	4620      	mov	r0, r4
}
 800ebdc:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
 800ebe0:	f002 bc70 	b.w	80114c4 <net_buf_unref>
		if (list->tail == node) {
 800ebe4:	4294      	cmp	r4, r2
		prev_node->next = node->next;
 800ebe6:	6033      	str	r3, [r6, #0]
			list->tail = prev_node;
 800ebe8:	bf08      	it	eq
 800ebea:	64ee      	streq	r6, [r5, #76]	; 0x4c
 800ebec:	e7f0      	b.n	800ebd0 <friend_purge_old_ack+0x3c>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
 800ebee:	4626      	mov	r6, r4
 800ebf0:	461c      	mov	r4, r3
 800ebf2:	e7d4      	b.n	800eb9e <friend_purge_old_ack+0xa>

0800ebf4 <friend_clear>:
{
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
 800ebf8:	3014      	adds	r0, #20
 800ebfa:	f003 fc2d 	bl	8012458 <k_delayed_work_cancel>
	friend_cred_del(frnd->net_idx, frnd->lpn);
 800ebfe:	8821      	ldrh	r1, [r4, #0]
 800ec00:	89a0      	ldrh	r0, [r4, #12]
 800ec02:	f7fa ff81 	bl	8009b08 <friend_cred_del>
	if (frnd->last) {
 800ec06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ec08:	b17a      	cbz	r2, 800ec2a <friend_clear+0x36>
		if (frnd->pending_buf) {
 800ec0a:	78e3      	ldrb	r3, [r4, #3]
 800ec0c:	06db      	lsls	r3, r3, #27
 800ec0e:	d507      	bpl.n	800ec20 <friend_clear+0x2c>
			BT_MESH_ADV(frnd->last)->busy = 0;
 800ec10:	4610      	mov	r0, r2
 800ec12:	f7ff ffb1 	bl	800eb78 <net_buf_user_data>
 800ec16:	6803      	ldr	r3, [r0, #0]
 800ec18:	7a19      	ldrb	r1, [r3, #8]
 800ec1a:	f36f 0182 	bfc	r1, #2, #1
 800ec1e:	7219      	strb	r1, [r3, #8]
		net_buf_unref(frnd->last);
 800ec20:	4610      	mov	r0, r2
 800ec22:	f002 fc4f 	bl	80114c4 <net_buf_unref>
		frnd->last = NULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	6463      	str	r3, [r4, #68]	; 0x44
		net_buf_unref(net_buf_slist_get(&frnd->queue));
 800ec2a:	f104 0548 	add.w	r5, r4, #72	; 0x48
	while (!sys_slist_is_empty(&frnd->queue)) {
 800ec2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec30:	b9bb      	cbnz	r3, 800ec62 <friend_clear+0x6e>
		while (!sys_slist_is_empty(&seg->queue)) {
 800ec32:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 800ec36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec38:	b9c9      	cbnz	r1, 800ec6e <friend_clear+0x7a>
	frnd->valid = 0;
 800ec3a:	78e3      	ldrb	r3, [r4, #3]
	frnd->queue_size = 0;
 800ec3c:	6521      	str	r1, [r4, #80]	; 0x50
	frnd->valid = 0;
 800ec3e:	f361 1345 	bfi	r3, r1, #5, #1
	frnd->established = 0;
 800ec42:	f361 1386 	bfi	r3, r1, #6, #1
	frnd->pending_buf = 0;
 800ec46:	f361 1304 	bfi	r3, r1, #4, #1
	frnd->fsn = 0;
 800ec4a:	f361 0300 	bfi	r3, r1, #0, #1
	frnd->pending_req = 0;
 800ec4e:	f361 0382 	bfi	r3, r1, #2, #1
 800ec52:	70e3      	strb	r3, [r4, #3]
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
 800ec54:	f104 000e 	add.w	r0, r4, #14
 800ec58:	2206      	movs	r2, #6
}
 800ec5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
 800ec5e:	f7f1 be3b 	b.w	80008d8 <memset>
		net_buf_unref(net_buf_slist_get(&frnd->queue));
 800ec62:	4628      	mov	r0, r5
 800ec64:	f002 fbef 	bl	8011446 <net_buf_slist_get>
 800ec68:	f002 fc2c 	bl	80114c4 <net_buf_unref>
 800ec6c:	e7df      	b.n	800ec2e <friend_clear+0x3a>
			net_buf_unref(net_buf_slist_get(&seg->queue));
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f002 fbe9 	bl	8011446 <net_buf_slist_get>
 800ec74:	f002 fc26 	bl	80114c4 <net_buf_unref>
 800ec78:	e7dd      	b.n	800ec36 <friend_clear+0x42>
	...

0800ec7c <send_friend_clear>:
{
 800ec7c:	b530      	push	{r4, r5, lr}
 800ec7e:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
 800ec80:	8982      	ldrh	r2, [r0, #12]
 800ec82:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ec86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec8a:	2500      	movs	r5, #0
 800ec8c:	f8ad 2016 	strh.w	r2, [sp, #22]
 800ec90:	f8b0 2058 	ldrh.w	r2, [r0, #88]	; 0x58
 800ec94:	9506      	str	r5, [sp, #24]
 800ec96:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ec9a:	227f      	movs	r2, #127	; 0x7f
 800ec9c:	ab05      	add	r3, sp, #20
 800ec9e:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
 800eca2:	4a12      	ldr	r2, [pc, #72]	; (800ecec <send_friend_clear+0x70>)
 800eca4:	9207      	str	r2, [sp, #28]
{
 800eca6:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
 800eca8:	9308      	str	r3, [sp, #32]
 800ecaa:	9509      	str	r5, [sp, #36]	; 0x24
		.src  = bt_mesh_primary_addr(),
 800ecac:	f7fd fb82 	bl	800c3b4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
 800ecb0:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
 800ecb4:	f7ff fbbc 	bl	800e430 <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
 800ecb8:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
 800ecba:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
 800ecbe:	0213      	lsls	r3, r2, #8
 800ecc0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
 800ecc4:	8922      	ldrh	r2, [r4, #8]
	struct bt_mesh_ctl_friend_clear req = {
 800ecc6:	f8ad 3010 	strh.w	r3, [sp, #16]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
 800ecca:	0213      	lsls	r3, r2, #8
 800eccc:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
 800ecd0:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
 800ecd4:	4b06      	ldr	r3, [pc, #24]	; (800ecf0 <send_friend_clear+0x74>)
 800ecd6:	9301      	str	r3, [sp, #4]
 800ecd8:	9402      	str	r4, [sp, #8]
 800ecda:	9500      	str	r5, [sp, #0]
 800ecdc:	2304      	movs	r3, #4
 800ecde:	aa04      	add	r2, sp, #16
 800ece0:	2105      	movs	r1, #5
 800ece2:	a807      	add	r0, sp, #28
 800ece4:	f7fc f9d0 	bl	800b088 <bt_mesh_ctl_send>
}
 800ece8:	b00b      	add	sp, #44	; 0x2c
 800ecea:	bd30      	pop	{r4, r5, pc}
 800ecec:	20005d3c 	.word	0x20005d3c
 800ecf0:	08013bf4 	.word	0x08013bf4

0800ecf4 <k_delayed_work_submit>:
 800ecf4:	460a      	mov	r2, r1
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	4801      	ldr	r0, [pc, #4]	; (800ed00 <k_delayed_work_submit+0xc>)
 800ecfa:	f003 bbf9 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 800ecfe:	bf00      	nop
 800ed00:	20001498 	.word	0x20001498

0800ed04 <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
 800ed04:	f8b1 305a 	ldrh.w	r3, [r1, #90]	; 0x5a
{
 800ed08:	b510      	push	{r4, lr}
 800ed0a:	460c      	mov	r4, r1
	k_delayed_work_submit(&frnd->clear.timer,
 800ed0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ed10:	4359      	muls	r1, r3
 800ed12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed16:	f7ff ffed 	bl	800ecf4 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2;
 800ed1a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ed24:	bd10      	pop	{r4, pc}
	...

0800ed28 <create_friend_pdu>:
{
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	4681      	mov	r9, r0
 800ed2e:	b089      	sub	sp, #36	; 0x24
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ed30:	8980      	ldrh	r0, [r0, #12]
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
 800ed32:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ee8c <create_friend_pdu+0x164>
{
 800ed36:	460c      	mov	r4, r1
 800ed38:	4690      	mov	r8, r2
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ed3a:	f7fa fdcb 	bl	80098d4 <bt_mesh_subnet_get>
	buf = friend_buf_alloc(info->src);
 800ed3e:	f8b4 a000 	ldrh.w	sl, [r4]
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ed42:	4606      	mov	r6, r0
	u8_t xmit = bt_mesh_net_transmit_get();
 800ed44:	f7ff fb74 	bl	800e430 <bt_mesh_net_transmit_get>
						   BT_MESH_TRANSMIT_INT(xmit),
 800ed48:	f3c0 03c7 	ubfx	r3, r0, #3, #8
 800ed4c:	3301      	adds	r3, #1
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
 800ed4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ed52:	005b      	lsls	r3, r3, #1
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	9303      	str	r3, [sp, #12]
 800ed58:	f000 0707 	and.w	r7, r0, #7
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	9301      	str	r3, [sp, #4]
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	2201      	movs	r2, #1
 800ed66:	463b      	mov	r3, r7
 800ed68:	4946      	ldr	r1, [pc, #280]	; (800ee84 <create_friend_pdu+0x15c>)
 800ed6a:	4658      	mov	r0, fp
 800ed6c:	f7fa faa2 	bl	80092b4 <bt_mesh_adv_create_from_pool>
		if (!buf) {
 800ed70:	4605      	mov	r5, r0
 800ed72:	bb10      	cbnz	r0, 800edba <create_friend_pdu+0x92>
		if (bt_mesh.frnd[i].queue_size > frnd->queue_size) {
 800ed74:	4b44      	ldr	r3, [pc, #272]	; (800ee88 <create_friend_pdu+0x160>)
 800ed76:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 800ed7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ed7c:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 800ed80:	3324      	adds	r3, #36	; 0x24
 800ed82:	4291      	cmp	r1, r2
 800ed84:	bf98      	it	ls
 800ed86:	4618      	movls	r0, r3
	buf = net_buf_slist_get(&frnd->queue);
 800ed88:	3048      	adds	r0, #72	; 0x48
 800ed8a:	f002 fb5c 	bl	8011446 <net_buf_slist_get>
	net_buf_unref(buf);
 800ed8e:	f002 fb99 	bl	80114c4 <net_buf_unref>
 800ed92:	e7e3      	b.n	800ed5c <create_friend_pdu+0x34>
		if (friend_cred_get(sub, frnd->lpn, &nid, &enc, &priv)) {
 800ed94:	ab07      	add	r3, sp, #28
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	f8b9 1000 	ldrh.w	r1, [r9]
 800ed9c:	ab06      	add	r3, sp, #24
 800ed9e:	f10d 0217 	add.w	r2, sp, #23
 800eda2:	4630      	mov	r0, r6
 800eda4:	f7fa fed0 	bl	8009b48 <friend_cred_get>
 800eda8:	b388      	cbz	r0, 800ee0e <create_friend_pdu+0xe6>
	net_buf_unref(buf);
 800edaa:	4628      	mov	r0, r5
 800edac:	f002 fb8a 	bl	80114c4 <net_buf_unref>
	return NULL;
 800edb0:	2500      	movs	r5, #0
}
 800edb2:	4628      	mov	r0, r5
 800edb4:	b009      	add	sp, #36	; 0x24
 800edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BT_MESH_ADV(buf)->addr = src;
 800edba:	f7ff fedd 	bl	800eb78 <net_buf_user_data>
 800edbe:	6803      	ldr	r3, [r0, #0]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800edc0:	4628      	mov	r0, r5
	BT_MESH_ADV(buf)->addr = src;
 800edc2:	f8a3 a00a 	strh.w	sl, [r3, #10]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800edc6:	f7ff fed7 	bl	800eb78 <net_buf_user_data>
 800edca:	6803      	ldr	r3, [r0, #0]
 800edcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edd4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	if (info->ctl && TRANS_CTL_OP(sdu->data) == TRANS_CTL_OP_FRIEND_OFFER) {
 800edd8:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	dad9      	bge.n	800ed94 <create_friend_pdu+0x6c>
 800ede0:	f8d8 3000 	ldr.w	r3, [r8]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edea:	2b04      	cmp	r3, #4
 800edec:	d1d2      	bne.n	800ed94 <create_friend_pdu+0x6c>
		enc = sub->keys[sub->kr_flag].enc;
 800edee:	7fb2      	ldrb	r2, [r6, #30]
 800edf0:	2359      	movs	r3, #89	; 0x59
 800edf2:	4353      	muls	r3, r2
 800edf4:	f103 0241 	add.w	r2, r3, #65	; 0x41
 800edf8:	4432      	add	r2, r6
 800edfa:	9206      	str	r2, [sp, #24]
		priv = sub->keys[sub->kr_flag].privacy;
 800edfc:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800ee00:	4432      	add	r2, r6
		nid = sub->keys[sub->kr_flag].nid;
 800ee02:	441e      	add	r6, r3
		priv = sub->keys[sub->kr_flag].privacy;
 800ee04:	9207      	str	r2, [sp, #28]
		nid = sub->keys[sub->kr_flag].nid;
 800ee06:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800ee0a:	f88d 3017 	strb.w	r3, [sp, #23]
	net_buf_add_u8(buf, (nid | (info->iv_index & 1) << 7));
 800ee0e:	68a3      	ldr	r3, [r4, #8]
 800ee10:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800ee14:	f105 0608 	add.w	r6, r5, #8
 800ee18:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800ee1c:	b2c9      	uxtb	r1, r1
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f002 fb7f 	bl	8011522 <net_buf_simple_add_u8>
	if (info->ctl) {
 800ee24:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800ee28:	79e1      	ldrb	r1, [r4, #7]
 800ee2a:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
 800ee2c:	bfb4      	ite	lt
 800ee2e:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
		net_buf_add_u8(buf, info->ttl);
 800ee32:	f001 017f 	andge.w	r1, r1, #127	; 0x7f
 800ee36:	4630      	mov	r0, r6
 800ee38:	f002 fb73 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, info->seq, sizeof(info->seq));
 800ee3c:	2203      	movs	r2, #3
 800ee3e:	1d21      	adds	r1, r4, #4
 800ee40:	4630      	mov	r0, r6
 800ee42:	f002 fb65 	bl	8011510 <net_buf_simple_add_mem>
	net_buf_add_be16(buf, info->src);
 800ee46:	8821      	ldrh	r1, [r4, #0]
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f002 fb81 	bl	8011550 <net_buf_simple_add_be16>
	net_buf_add_be16(buf, info->dst);
 800ee4e:	8861      	ldrh	r1, [r4, #2]
 800ee50:	4630      	mov	r0, r6
 800ee52:	f002 fb7d 	bl	8011550 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, sdu->data, sdu->len);
 800ee56:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ee5a:	f8d8 1000 	ldr.w	r1, [r8]
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f002 fb56 	bl	8011510 <net_buf_simple_add_mem>
	if (bt_mesh_net_encrypt(enc, &buf->b, info->iv_index, false)) {
 800ee64:	2300      	movs	r3, #0
 800ee66:	68a2      	ldr	r2, [r4, #8]
 800ee68:	9806      	ldr	r0, [sp, #24]
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	f7fd f806 	bl	800be7c <bt_mesh_net_encrypt>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d19a      	bne.n	800edaa <create_friend_pdu+0x82>
	if (bt_mesh_net_obfuscate(buf->data, info->iv_index, priv)) {
 800ee74:	9a07      	ldr	r2, [sp, #28]
 800ee76:	68a1      	ldr	r1, [r4, #8]
 800ee78:	68a8      	ldr	r0, [r5, #8]
 800ee7a:	f7fc ffd7 	bl	800be2c <bt_mesh_net_obfuscate>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d097      	beq.n	800edb2 <create_friend_pdu+0x8a>
 800ee82:	e792      	b.n	800edaa <create_friend_pdu+0x82>
 800ee84:	0800eb85 	.word	0x0800eb85
 800ee88:	20005b88 	.word	0x20005b88
 800ee8c:	200064fc 	.word	0x200064fc

0800ee90 <encode_friend_ctl>:
{
 800ee90:	b530      	push	{r4, r5, lr}
 800ee92:	4604      	mov	r4, r0
 800ee94:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
 800ee96:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ee9a:	4610      	mov	r0, r2
{
 800ee9c:	4615      	mov	r5, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
 800ee9e:	f002 fb93 	bl	80115c8 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
 800eea2:	f7fd fa87 	bl	800c3b4 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
 800eea6:	8823      	ldrh	r3, [r4, #0]
 800eea8:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ctl = 1;
 800eeac:	f89d 300b 	ldrb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
 800eeb0:	4a11      	ldr	r2, [pc, #68]	; (800eef8 <encode_friend_ctl+0x68>)
	info.src = bt_mesh_primary_addr();
 800eeb2:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.ttl = 0;
 800eeb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eeba:	f36f 0306 	bfc	r3, #0, #7
 800eebe:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
 800eec2:	6853      	ldr	r3, [r2, #4]
 800eec4:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800eec8:	1408      	asrs	r0, r1, #16
 800eeca:	f88d 0008 	strb.w	r0, [sp, #8]
	info.seq[1] = (bt_mesh.seq >> 8);
 800eece:	1208      	asrs	r0, r1, #8
 800eed0:	f88d 0009 	strb.w	r0, [sp, #9]
	info.seq[2] = bt_mesh.seq++;
 800eed4:	1c48      	adds	r0, r1, #1
 800eed6:	f360 0317 	bfi	r3, r0, #0, #24
 800eeda:	6053      	str	r3, [r2, #4]
 800eedc:	f88d 100a 	strb.w	r1, [sp, #10]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800eee0:	6811      	ldr	r1, [r2, #0]
 800eee2:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800eee6:	1acb      	subs	r3, r1, r3
	return create_friend_pdu(frnd, &info, sdu);
 800eee8:	462a      	mov	r2, r5
 800eeea:	a901      	add	r1, sp, #4
 800eeec:	4620      	mov	r0, r4
	info.iv_index = BT_MESH_NET_IVI_TX;
 800eeee:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
 800eef0:	f7ff ff1a 	bl	800ed28 <create_friend_pdu>
}
 800eef4:	b005      	add	sp, #20
 800eef6:	bd30      	pop	{r4, r5, pc}
 800eef8:	20005b88 	.word	0x20005b88

0800eefc <enqueue_sub_cfm>:
{
 800eefc:	b530      	push	{r4, r5, lr}
 800eefe:	b085      	sub	sp, #20
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
 800ef00:	2300      	movs	r3, #0
 800ef02:	9302      	str	r3, [sp, #8]
 800ef04:	9303      	str	r3, [sp, #12]
 800ef06:	2302      	movs	r3, #2
{
 800ef08:	460d      	mov	r5, r1
 800ef0a:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
 800ef0c:	f8ad 300a 	strh.w	r3, [sp, #10]
	cfm = net_buf_simple_add(sdu, sizeof(*cfm));
 800ef10:	2101      	movs	r1, #1
	buf->data = buf->__buf + reserve_head;
 800ef12:	f10d 030d 	add.w	r3, sp, #13
 800ef16:	a801      	add	r0, sp, #4
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	f002 faf3 	bl	8011504 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
 800ef1e:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
 800ef20:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
 800ef22:	2109      	movs	r1, #9
 800ef24:	4620      	mov	r0, r4
 800ef26:	f7ff ffb3 	bl	800ee90 <encode_friend_ctl>
	if (!buf) {
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	b140      	cbz	r0, 800ef40 <enqueue_sub_cfm+0x44>
	if (frnd->last) {
 800ef2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ef30:	b108      	cbz	r0, 800ef36 <enqueue_sub_cfm+0x3a>
		net_buf_unref(frnd->last);
 800ef32:	f002 fac7 	bl	80114c4 <net_buf_unref>
	frnd->send_last = 1;
 800ef36:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
 800ef38:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
 800ef3a:	f043 0302 	orr.w	r3, r3, #2
 800ef3e:	70e3      	strb	r3, [r4, #3]
}
 800ef40:	b005      	add	sp, #20
 800ef42:	bd30      	pop	{r4, r5, pc}

0800ef44 <clear_timeout>:
{
 800ef44:	b510      	push	{r4, lr}
 800ef46:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 800ef48:	f002 ffa0 	bl	8011e8c <_impl_k_uptime_get_32>
	duration = k_uptime_get_32() - frnd->clear.start;
 800ef4c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800ef50:	1ac0      	subs	r0, r0, r3
	if (duration > 2 * frnd->poll_to) {
 800ef52:	f854 3c58 	ldr.w	r3, [r4, #-88]
 800ef56:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800ef5a:	d903      	bls.n	800ef64 <clear_timeout+0x20>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f824 3c04 	strh.w	r3, [r4, #-4]
		return;
 800ef62:	bd10      	pop	{r4, pc}
	send_friend_clear(frnd);
 800ef64:	f1a4 005c 	sub.w	r0, r4, #92	; 0x5c
}
 800ef68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_friend_clear(frnd);
 800ef6c:	f7ff be86 	b.w	800ec7c <send_friend_clear>

0800ef70 <friend_timeout>:
{
 800ef70:	b538      	push	{r3, r4, r5, lr}
	if (frnd->send_last && frnd->last) {
 800ef72:	f810 3c11 	ldrb.w	r3, [r0, #-17]
 800ef76:	079a      	lsls	r2, r3, #30
{
 800ef78:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
 800ef7a:	f1a0 0514 	sub.w	r5, r0, #20
	if (frnd->send_last && frnd->last) {
 800ef7e:	d514      	bpl.n	800efaa <friend_timeout+0x3a>
 800ef80:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ef82:	b192      	cbz	r2, 800efaa <friend_timeout+0x3a>
		frnd->send_last = 0;
 800ef84:	f36f 0341 	bfc	r3, #1, #1
 800ef88:	f800 3c11 	strb.w	r3, [r0, #-17]
	frnd->pending_req = 0;
 800ef8c:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800ef90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ef92:	4910      	ldr	r1, [pc, #64]	; (800efd4 <friend_timeout+0x64>)
	frnd->pending_buf = 1;
 800ef94:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800ef98:	f043 0310 	orr.w	r3, r3, #16
 800ef9c:	f804 3c11 	strb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800efa0:	462a      	mov	r2, r5
}
 800efa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800efa6:	f7fa b9bb 	b.w	8009320 <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
 800efaa:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800efae:	2b40      	cmp	r3, #64	; 0x40
 800efb0:	d104      	bne.n	800efbc <friend_timeout+0x4c>
		friend_clear(frnd);
 800efb2:	4628      	mov	r0, r5
}
 800efb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		friend_clear(frnd);
 800efb8:	f7ff be1c 	b.w	800ebf4 <friend_clear>
	frnd->last = net_buf_slist_get(&frnd->queue);
 800efbc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800efc0:	f002 fa41 	bl	8011446 <net_buf_slist_get>
 800efc4:	6320      	str	r0, [r4, #48]	; 0x30
	if (!frnd->last) {
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d0f3      	beq.n	800efb2 <friend_timeout+0x42>
	frnd->queue_size--;
 800efca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800efcc:	3b01      	subs	r3, #1
 800efce:	63e3      	str	r3, [r4, #60]	; 0x3c
 800efd0:	e7dc      	b.n	800ef8c <friend_timeout+0x1c>
 800efd2:	bf00      	nop
 800efd4:	08013bec 	.word	0x08013bec

0800efd8 <friend_lpn_matches>:
static bool friend_lpn_matches(struct bt_mesh_friend *frnd, u16_t net_idx,
			       u16_t addr)
{
	int i;

	if (!frnd->established) {
 800efd8:	78c3      	ldrb	r3, [r0, #3]
 800efda:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800efde:	d012      	beq.n	800f006 <friend_lpn_matches+0x2e>
		return false;
	}

	if (net_idx != frnd->net_idx) {
 800efe0:	8983      	ldrh	r3, [r0, #12]
 800efe2:	428b      	cmp	r3, r1
 800efe4:	d10f      	bne.n	800f006 <friend_lpn_matches+0x2e>
		return false;
	}

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
 800efe6:	b213      	sxth	r3, r2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dc0a      	bgt.n	800f002 <friend_lpn_matches+0x2a>

		return false;
	}

	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
		if (frnd->sub_list[i] == addr) {
 800efec:	89c3      	ldrh	r3, [r0, #14]
 800efee:	4293      	cmp	r3, r2
 800eff0:	d00b      	beq.n	800f00a <friend_lpn_matches+0x32>
 800eff2:	8a03      	ldrh	r3, [r0, #16]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d008      	beq.n	800f00a <friend_lpn_matches+0x32>
 800eff8:	8a40      	ldrh	r0, [r0, #18]
		if (addr == frnd->lpn) {
 800effa:	1a83      	subs	r3, r0, r2
 800effc:	4258      	negs	r0, r3
 800effe:	4158      	adcs	r0, r3
 800f000:	4770      	bx	lr
 800f002:	8800      	ldrh	r0, [r0, #0]
 800f004:	e7f9      	b.n	800effa <friend_lpn_matches+0x22>
		return false;
 800f006:	2000      	movs	r0, #0
 800f008:	4770      	bx	lr
			return true;
 800f00a:	2001      	movs	r0, #1
		}
	}

	return false;
}
 800f00c:	4770      	bx	lr

0800f00e <buf_send_start>:
{
 800f00e:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0;
 800f010:	78d3      	ldrb	r3, [r2, #3]
 800f012:	f36f 1304 	bfc	r3, #4, #1
	if (!frnd->established) {
 800f016:	f013 0440 	ands.w	r4, r3, #64	; 0x40
{
 800f01a:	4615      	mov	r5, r2
	frnd->pending_buf = 0;
 800f01c:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established) {
 800f01e:	d103      	bne.n	800f028 <buf_send_start+0x1a>
		net_buf_unref(frnd->last);
 800f020:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800f022:	f002 fa4f 	bl	80114c4 <net_buf_unref>
		frnd->last = NULL;
 800f026:	646c      	str	r4, [r5, #68]	; 0x44
 800f028:	bd38      	pop	{r3, r4, r5, pc}

0800f02a <buf_send_end>:
	if (frnd->pending_req) {
 800f02a:	78cb      	ldrb	r3, [r1, #3]
 800f02c:	075a      	lsls	r2, r3, #29
 800f02e:	d409      	bmi.n	800f044 <buf_send_end+0x1a>
	if (frnd->established) {
 800f030:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f034:	f101 0014 	add.w	r0, r1, #20
		k_delayed_work_submit(&frnd->timer, frnd->poll_to);
 800f038:	bf14      	ite	ne
 800f03a:	6849      	ldrne	r1, [r1, #4]
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
 800f03c:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
 800f040:	f7ff be58 	b.w	800ecf4 <k_delayed_work_submit>
 800f044:	4770      	bx	lr
	...

0800f048 <enqueue_update>:
{
 800f048:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f04c:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f04e:	2210      	movs	r2, #16
{
 800f050:	460f      	mov	r7, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f052:	4668      	mov	r0, sp
 800f054:	2100      	movs	r1, #0
 800f056:	f7f1 fc3f 	bl	80008d8 <memset>
 800f05a:	2307      	movs	r3, #7
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f05c:	89a0      	ldrh	r0, [r4, #12]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f05e:	f8ad 3006 	strh.w	r3, [sp, #6]
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f062:	f7fa fc37 	bl	80098d4 <bt_mesh_subnet_get>
	buf->len = 0;
 800f066:	2600      	movs	r6, #0
	buf->data = buf->__buf + reserve_head;
 800f068:	f10d 0309 	add.w	r3, sp, #9
	upd = net_buf_simple_add(sdu, sizeof(*upd));
 800f06c:	2106      	movs	r1, #6
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f06e:	4680      	mov	r8, r0
	upd = net_buf_simple_add(sdu, sizeof(*upd));
 800f070:	4668      	mov	r0, sp
 800f072:	9300      	str	r3, [sp, #0]
	buf->len = 0;
 800f074:	f8ad 6004 	strh.w	r6, [sp, #4]
 800f078:	f002 fa44 	bl	8011504 <net_buf_simple_add>
 800f07c:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(sub);
 800f07e:	4640      	mov	r0, r8
 800f080:	f7fa fd9e 	bl	8009bc0 <bt_mesh_net_flags>
 800f084:	4b0d      	ldr	r3, [pc, #52]	; (800f0bc <enqueue_update+0x74>)
 800f086:	7028      	strb	r0, [r5, #0]
 800f088:	681b      	ldr	r3, [r3, #0]
	upd->md = md;
 800f08a:	716f      	strb	r7, [r5, #5]
 800f08c:	ba1b      	rev	r3, r3
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
 800f08e:	2102      	movs	r1, #2
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
 800f090:	f8c5 3001 	str.w	r3, [r5, #1]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
 800f094:	466a      	mov	r2, sp
 800f096:	4620      	mov	r0, r4
 800f098:	f7ff fefa 	bl	800ee90 <encode_friend_ctl>
	if (!buf) {
 800f09c:	4601      	mov	r1, r0
 800f09e:	b150      	cbz	r0, 800f0b6 <enqueue_update+0x6e>
	frnd->sec_update = 0;
 800f0a0:	78e3      	ldrb	r3, [r4, #3]
 800f0a2:	f366 03c3 	bfi	r3, r6, #3, #1
 800f0a6:	70e3      	strb	r3, [r4, #3]
	net_buf_slist_put(&frnd->queue, buf);
 800f0a8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f0ac:	f002 f9b2 	bl	8011414 <net_buf_slist_put>
	frnd->queue_size++;
 800f0b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	6523      	str	r3, [r4, #80]	; 0x50
}
 800f0b6:	b004      	add	sp, #16
 800f0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0bc:	20005b88 	.word	0x20005b88

0800f0c0 <enqueue_friend_pdu>:
{
 800f0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	4615      	mov	r5, r2
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	b979      	cbnz	r1, 800f0ec <enqueue_friend_pdu+0x2c>
		if (frnd->sec_update) {
 800f0cc:	78c3      	ldrb	r3, [r0, #3]
 800f0ce:	071a      	lsls	r2, r3, #28
 800f0d0:	d502      	bpl.n	800f0d8 <enqueue_friend_pdu+0x18>
			enqueue_update(frnd, 1);
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	f7ff ffb8 	bl	800f048 <enqueue_update>
	net_buf_slist_put(&frnd->queue, buf);
 800f0d8:	4629      	mov	r1, r5
 800f0da:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f0de:	f002 f999 	bl	8011414 <net_buf_slist_put>
	frnd->queue_size++;
 800f0e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	6523      	str	r3, [r4, #80]	; 0x50
 800f0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	adv = FRIEND_ADV(buf);
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	f7ff fd43 	bl	800eb78 <net_buf_user_data>
 800f0f2:	6801      	ldr	r1, [r0, #0]
 800f0f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	seg = get_seg(frnd, BT_MESH_ADV(buf)->addr, &adv->seq_auth);
 800f0f6:	894f      	ldrh	r7, [r1, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
 800f0f8:	f104 023c 	add.w	r2, r4, #60	; 0x3c
		if (buf && BT_MESH_ADV(buf)->addr == src &&
 800f0fc:	b358      	cbz	r0, 800f156 <enqueue_friend_pdu+0x96>
 800f0fe:	f7ff fd3b 	bl	800eb78 <net_buf_user_data>
 800f102:	6803      	ldr	r3, [r0, #0]
 800f104:	8958      	ldrh	r0, [r3, #10]
 800f106:	42b8      	cmp	r0, r7
 800f108:	d127      	bne.n	800f15a <enqueue_friend_pdu+0x9a>
 800f10a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800f10e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800f112:	4589      	cmp	r9, r1
 800f114:	bf08      	it	eq
 800f116:	4580      	cmpeq	r8, r0
 800f118:	d11f      	bne.n	800f15a <enqueue_friend_pdu+0x9a>
	net_buf_slist_put(&seg->queue, buf);
 800f11a:	4629      	mov	r1, r5
 800f11c:	4610      	mov	r0, r2
 800f11e:	f002 f979 	bl	8011414 <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
 800f122:	2e02      	cmp	r6, #2
 800f124:	d115      	bne.n	800f152 <enqueue_friend_pdu+0x92>
		if (frnd->sec_update) {
 800f126:	78e3      	ldrb	r3, [r4, #3]
 800f128:	071b      	lsls	r3, r3, #28
 800f12a:	d503      	bpl.n	800f134 <enqueue_friend_pdu+0x74>
			enqueue_update(frnd, 1);
 800f12c:	2101      	movs	r1, #1
 800f12e:	4620      	mov	r0, r4
 800f130:	f7ff ff8a 	bl	800f048 <enqueue_update>
 800f134:	6be1      	ldr	r1, [r4, #60]	; 0x3c
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f136:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
{
 800f13a:	460a      	mov	r2, r1
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f13c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		SYS_SLIST_FOR_EACH_CONTAINER(&seg->queue, buf, node) {
 800f140:	b982      	cbnz	r2, 800f164 <enqueue_friend_pdu+0xa4>
	if (!list->tail) {
 800f142:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				    list_to_append->tail);
 800f144:	6c23      	ldr	r3, [r4, #64]	; 0x40
	if (!list->tail) {
 800f146:	b9c2      	cbnz	r2, 800f17a <enqueue_friend_pdu+0xba>
		list->head = (sys_snode_t *)head;
 800f148:	64a1      	str	r1, [r4, #72]	; 0x48
		list->tail = (sys_snode_t *)tail;
 800f14a:	64e3      	str	r3, [r4, #76]	; 0x4c
	list->head = NULL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
 800f150:	6423      	str	r3, [r4, #64]	; 0x40
 800f152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!seg) {
 800f156:	2a00      	cmp	r2, #0
 800f158:	d1df      	bne.n	800f11a <enqueue_friend_pdu+0x5a>
		net_buf_unref(buf);
 800f15a:	4628      	mov	r0, r5
}
 800f15c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
 800f160:	f002 b9b0 	b.w	80114c4 <net_buf_unref>
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f164:	4610      	mov	r0, r2
 800f166:	f7ff fd07 	bl	800eb78 <net_buf_user_data>
 800f16a:	6803      	ldr	r3, [r0, #0]
	return node->next;
 800f16c:	6812      	ldr	r2, [r2, #0]
 800f16e:	e9c3 6704 	strd	r6, r7, [r3, #16]
			frnd->queue_size++;
 800f172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f174:	3301      	adds	r3, #1
 800f176:	6523      	str	r3, [r4, #80]	; 0x50
 800f178:	e7e2      	b.n	800f140 <enqueue_friend_pdu+0x80>
		list->tail->next = (sys_snode_t *)head;
 800f17a:	6011      	str	r1, [r2, #0]
 800f17c:	e7e5      	b.n	800f14a <enqueue_friend_pdu+0x8a>
	...

0800f180 <bt_mesh_friend_find>:
{
 800f180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f182:	4d16      	ldr	r5, [pc, #88]	; (800f1dc <bt_mesh_friend_find+0x5c>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f184:	2400      	movs	r4, #0
 800f186:	462e      	mov	r6, r5
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
 800f188:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
 800f18c:	2784      	movs	r7, #132	; 0x84
		if (valid && !frnd->valid) {
 800f18e:	b132      	cbz	r2, 800f19e <bt_mesh_friend_find+0x1e>
 800f190:	fb07 6c04 	mla	ip, r7, r4, r6
 800f194:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
 800f198:	f01c 0f20 	tst.w	ip, #32
 800f19c:	d016      	beq.n	800f1cc <bt_mesh_friend_find+0x4c>
		if (established && !frnd->established) {
 800f19e:	b133      	cbz	r3, 800f1ae <bt_mesh_friend_find+0x2e>
 800f1a0:	fb07 6c04 	mla	ip, r7, r4, r6
 800f1a4:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
 800f1a8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f1ac:	d00e      	beq.n	800f1cc <bt_mesh_friend_find+0x4c>
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
 800f1ae:	4570      	cmp	r0, lr
 800f1b0:	d003      	beq.n	800f1ba <bt_mesh_friend_find+0x3a>
 800f1b2:	f8b5 c030 	ldrh.w	ip, [r5, #48]	; 0x30
 800f1b6:	4584      	cmp	ip, r0
 800f1b8:	d108      	bne.n	800f1cc <bt_mesh_friend_find+0x4c>
		if (frnd->lpn == lpn_addr) {
 800f1ba:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
 800f1be:	458c      	cmp	ip, r1
 800f1c0:	d104      	bne.n	800f1cc <bt_mesh_friend_find+0x4c>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f1c2:	2084      	movs	r0, #132	; 0x84
 800f1c4:	fb00 6004 	mla	r0, r0, r4, r6
 800f1c8:	3024      	adds	r0, #36	; 0x24
 800f1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f1cc:	3401      	adds	r4, #1
 800f1ce:	2c02      	cmp	r4, #2
 800f1d0:	f105 0584 	add.w	r5, r5, #132	; 0x84
 800f1d4:	d1db      	bne.n	800f18e <bt_mesh_friend_find+0xe>
	return NULL;
 800f1d6:	2000      	movs	r0, #0
}
 800f1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	20005b88 	.word	0x20005b88

0800f1e0 <bt_mesh_friend_clear_net_idx>:
{
 800f1e0:	b538      	push	{r3, r4, r5, lr}
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f1e2:	4d0f      	ldr	r5, [pc, #60]	; (800f220 <bt_mesh_friend_clear_net_idx+0x40>)
 800f1e4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800f1e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1ea:	428a      	cmp	r2, r1
{
 800f1ec:	4604      	mov	r4, r0
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f1ee:	d004      	beq.n	800f1fa <bt_mesh_friend_clear_net_idx+0x1a>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f1f0:	4288      	cmp	r0, r1
 800f1f2:	d10f      	bne.n	800f214 <bt_mesh_friend_clear_net_idx+0x34>
			friend_clear(frnd);
 800f1f4:	480b      	ldr	r0, [pc, #44]	; (800f224 <bt_mesh_friend_clear_net_idx+0x44>)
 800f1f6:	f7ff fcfd 	bl	800ebf4 <friend_clear>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f1fa:	f8b5 30b4 	ldrh.w	r3, [r5, #180]	; 0xb4
 800f1fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f202:	4293      	cmp	r3, r2
 800f204:	d00b      	beq.n	800f21e <bt_mesh_friend_clear_net_idx+0x3e>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f206:	4294      	cmp	r4, r2
 800f208:	d107      	bne.n	800f21a <bt_mesh_friend_clear_net_idx+0x3a>
			friend_clear(frnd);
 800f20a:	4807      	ldr	r0, [pc, #28]	; (800f228 <bt_mesh_friend_clear_net_idx+0x48>)
}
 800f20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			friend_clear(frnd);
 800f210:	f7ff bcf0 	b.w	800ebf4 <friend_clear>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f214:	4290      	cmp	r0, r2
 800f216:	d1f0      	bne.n	800f1fa <bt_mesh_friend_clear_net_idx+0x1a>
 800f218:	e7ec      	b.n	800f1f4 <bt_mesh_friend_clear_net_idx+0x14>
 800f21a:	429c      	cmp	r4, r3
 800f21c:	d0f5      	beq.n	800f20a <bt_mesh_friend_clear_net_idx+0x2a>
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	20005b88 	.word	0x20005b88
 800f224:	20005bac 	.word	0x20005bac
 800f228:	20005c30 	.word	0x20005c30

0800f22c <bt_mesh_friend_sec_update>:
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f22c:	4b11      	ldr	r3, [pc, #68]	; (800f274 <bt_mesh_friend_sec_update+0x48>)
 800f22e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f230:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f234:	428a      	cmp	r2, r1
 800f236:	d007      	beq.n	800f248 <bt_mesh_friend_sec_update+0x1c>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f238:	4288      	cmp	r0, r1
 800f23a:	d114      	bne.n	800f266 <bt_mesh_friend_sec_update+0x3a>
			frnd->sec_update = 1;
 800f23c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f240:	f042 0208 	orr.w	r2, r2, #8
 800f244:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f248:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 800f24c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f250:	428a      	cmp	r2, r1
 800f252:	d00d      	beq.n	800f270 <bt_mesh_friend_sec_update+0x44>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f254:	4288      	cmp	r0, r1
 800f256:	d109      	bne.n	800f26c <bt_mesh_friend_sec_update+0x40>
			frnd->sec_update = 1;
 800f258:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800f25c:	f042 0208 	orr.w	r2, r2, #8
 800f260:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800f264:	4770      	bx	lr
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f266:	4290      	cmp	r0, r2
 800f268:	d1ee      	bne.n	800f248 <bt_mesh_friend_sec_update+0x1c>
 800f26a:	e7e7      	b.n	800f23c <bt_mesh_friend_sec_update+0x10>
 800f26c:	4290      	cmp	r0, r2
 800f26e:	d0f3      	beq.n	800f258 <bt_mesh_friend_sec_update+0x2c>
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20005b88 	.word	0x20005b88

0800f278 <bt_mesh_friend_clear>:
{
 800f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_net_tx tx = {
 800f27c:	4603      	mov	r3, r0
{
 800f27e:	b088      	sub	sp, #32
	struct bt_mesh_net_tx tx = {
 800f280:	f853 2b04 	ldr.w	r2, [r3], #4
 800f284:	9306      	str	r3, [sp, #24]
 800f286:	2400      	movs	r4, #0
{
 800f288:	460f      	mov	r7, r1
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
 800f28a:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
 800f28c:	9205      	str	r2, [sp, #20]
{
 800f28e:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
 800f290:	9407      	str	r4, [sp, #28]
		.src  = bt_mesh_primary_addr(),
 800f292:	f7fd f88f 	bl	800c3b4 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
 800f296:	f8ad 001c 	strh.w	r0, [sp, #28]
		.xmit = bt_mesh_net_transmit_get(),
 800f29a:	f7ff f8c9 	bl	800e430 <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
 800f29e:	88bb      	ldrh	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
 800f2a0:	f88d 001e 	strb.w	r0, [sp, #30]
	if (buf->len < sizeof(*msg)) {
 800f2a4:	2b03      	cmp	r3, #3
 800f2a6:	d92c      	bls.n	800f302 <bt_mesh_friend_clear+0x8a>
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f2a8:	f8b5 8000 	ldrh.w	r8, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f2ac:	6830      	ldr	r0, [r6, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f2ae:	886f      	ldrh	r7, [r5, #2]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f2b0:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f2b2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800f2b6:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f2ba:	4623      	mov	r3, r4
 800f2bc:	4622      	mov	r2, r4
 800f2be:	b289      	uxth	r1, r1
 800f2c0:	f7ff ff5e 	bl	800f180 <bt_mesh_friend_find>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f2c4:	023d      	lsls	r5, r7, #8
 800f2c6:	ea45 2517 	orr.w	r5, r5, r7, lsr #8
 800f2ca:	b2ad      	uxth	r5, r5
	if (!frnd) {
 800f2cc:	4606      	mov	r6, r0
 800f2ce:	b1e8      	cbz	r0, 800f30c <bt_mesh_friend_clear+0x94>
	if (lpn_counter - frnd->lpn_counter > 255) {
 800f2d0:	8903      	ldrh	r3, [r0, #8]
 800f2d2:	1aed      	subs	r5, r5, r3
 800f2d4:	2dff      	cmp	r5, #255	; 0xff
 800f2d6:	dc12      	bgt.n	800f2fe <bt_mesh_friend_clear+0x86>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
 800f2d8:	9b06      	ldr	r3, [sp, #24]
	cfm.lpn_addr    = msg->lpn_addr;
 800f2da:	f8ad 8010 	strh.w	r8, [sp, #16]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
 800f2de:	227f      	movs	r2, #127	; 0x7f
 800f2e0:	71da      	strb	r2, [r3, #7]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
 800f2e2:	2106      	movs	r1, #6
 800f2e4:	9402      	str	r4, [sp, #8]
 800f2e6:	9401      	str	r4, [sp, #4]
 800f2e8:	9400      	str	r4, [sp, #0]
 800f2ea:	2304      	movs	r3, #4
 800f2ec:	aa04      	add	r2, sp, #16
 800f2ee:	a805      	add	r0, sp, #20
	cfm.lpn_counter = msg->lpn_counter;
 800f2f0:	f8ad 7012 	strh.w	r7, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
 800f2f4:	f7fb fec8 	bl	800b088 <bt_mesh_ctl_send>
	friend_clear(frnd);
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f7ff fc7b 	bl	800ebf4 <friend_clear>
		return 0;
 800f2fe:	4620      	mov	r0, r4
 800f300:	e001      	b.n	800f306 <bt_mesh_friend_clear+0x8e>
		return -EINVAL;
 800f302:	f06f 0015 	mvn.w	r0, #21
}
 800f306:	b008      	add	sp, #32
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30c:	e7fb      	b.n	800f306 <bt_mesh_friend_clear+0x8e>

0800f30e <bt_mesh_friend_sub_add>:
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f30e:	888b      	ldrh	r3, [r1, #4]
 800f310:	2b02      	cmp	r3, #2
{
 800f312:	b570      	push	{r4, r5, r6, lr}
 800f314:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f316:	d931      	bls.n	800f37c <bt_mesh_friend_sub_add+0x6e>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
 800f318:	6804      	ldr	r4, [r0, #0]
 800f31a:	8901      	ldrh	r1, [r0, #8]
 800f31c:	8ba0      	ldrh	r0, [r4, #28]
 800f31e:	2301      	movs	r3, #1
 800f320:	461a      	mov	r2, r3
 800f322:	f7ff ff2d 	bl	800f180 <bt_mesh_friend_find>
	if (!frnd) {
 800f326:	4604      	mov	r4, r0
 800f328:	b1a8      	cbz	r0, 800f356 <bt_mesh_friend_sub_add+0x48>
	if (frnd->pending_buf) {
 800f32a:	78c3      	ldrb	r3, [r0, #3]
 800f32c:	06da      	lsls	r2, r3, #27
 800f32e:	d412      	bmi.n	800f356 <bt_mesh_friend_sub_add+0x48>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f330:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f332:	f043 0304 	orr.w	r3, r3, #4
 800f336:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f338:	3133      	adds	r1, #51	; 0x33
 800f33a:	3014      	adds	r0, #20
 800f33c:	f7ff fcda 	bl	800ecf4 <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
 800f340:	4628      	mov	r0, r5
 800f342:	f002 f952 	bl	80115ea <net_buf_simple_pull_u8>
 800f346:	4606      	mov	r6, r0
	while (buf->len >= 2) {
 800f348:	88ab      	ldrh	r3, [r5, #4]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d805      	bhi.n	800f35a <bt_mesh_friend_sub_add+0x4c>
	enqueue_sub_cfm(frnd, xact);
 800f34e:	4631      	mov	r1, r6
 800f350:	4620      	mov	r0, r4
 800f352:	f7ff fdd3 	bl	800eefc <enqueue_sub_cfm>
		return 0;
 800f356:	2000      	movs	r0, #0
}
 800f358:	bd70      	pop	{r4, r5, r6, pc}
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
 800f35a:	4628      	mov	r0, r5
 800f35c:	f002 f955 	bl	801160a <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
 800f360:	89e3      	ldrh	r3, [r4, #14]
 800f362:	b12b      	cbz	r3, 800f370 <bt_mesh_friend_sub_add+0x62>
 800f364:	8a23      	ldrh	r3, [r4, #16]
 800f366:	b13b      	cbz	r3, 800f378 <bt_mesh_friend_sub_add+0x6a>
 800f368:	8a63      	ldrh	r3, [r4, #18]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1ec      	bne.n	800f348 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f36e:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
 800f370:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f374:	81d8      	strh	r0, [r3, #14]
 800f376:	e7e7      	b.n	800f348 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f378:	2301      	movs	r3, #1
 800f37a:	e7f9      	b.n	800f370 <bt_mesh_friend_sub_add+0x62>
		return -EINVAL;
 800f37c:	f06f 0015 	mvn.w	r0, #21
 800f380:	bd70      	pop	{r4, r5, r6, pc}

0800f382 <bt_mesh_friend_sub_rem>:
{
 800f382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f384:	888b      	ldrh	r3, [r1, #4]
 800f386:	2b02      	cmp	r3, #2
{
 800f388:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f38a:	d936      	bls.n	800f3fa <bt_mesh_friend_sub_rem+0x78>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
 800f38c:	6804      	ldr	r4, [r0, #0]
 800f38e:	8901      	ldrh	r1, [r0, #8]
 800f390:	8ba0      	ldrh	r0, [r4, #28]
 800f392:	2301      	movs	r3, #1
 800f394:	461a      	mov	r2, r3
 800f396:	f7ff fef3 	bl	800f180 <bt_mesh_friend_find>
	if (!frnd) {
 800f39a:	4604      	mov	r4, r0
 800f39c:	b1b0      	cbz	r0, 800f3cc <bt_mesh_friend_sub_rem+0x4a>
	if (frnd->pending_buf) {
 800f39e:	78c3      	ldrb	r3, [r0, #3]
 800f3a0:	f013 0610 	ands.w	r6, r3, #16
 800f3a4:	d112      	bne.n	800f3cc <bt_mesh_friend_sub_rem+0x4a>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f3a6:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f3a8:	f043 0304 	orr.w	r3, r3, #4
 800f3ac:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f3ae:	3133      	adds	r1, #51	; 0x33
 800f3b0:	3014      	adds	r0, #20
 800f3b2:	f7ff fc9f 	bl	800ecf4 <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f002 f917 	bl	80115ea <net_buf_simple_pull_u8>
 800f3bc:	4607      	mov	r7, r0
	while (buf->len >= 2) {
 800f3be:	88ab      	ldrh	r3, [r5, #4]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d805      	bhi.n	800f3d0 <bt_mesh_friend_sub_rem+0x4e>
	enqueue_sub_cfm(frnd, xact);
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f7ff fd98 	bl	800eefc <enqueue_sub_cfm>
		return 0;
 800f3cc:	2000      	movs	r0, #0
}
 800f3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f002 f91a 	bl	801160a <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
 800f3d6:	89e3      	ldrh	r3, [r4, #14]
 800f3d8:	4283      	cmp	r3, r0
 800f3da:	d00a      	beq.n	800f3f2 <bt_mesh_friend_sub_rem+0x70>
 800f3dc:	8a23      	ldrh	r3, [r4, #16]
 800f3de:	4283      	cmp	r3, r0
 800f3e0:	d009      	beq.n	800f3f6 <bt_mesh_friend_sub_rem+0x74>
 800f3e2:	8a63      	ldrh	r3, [r4, #18]
 800f3e4:	4283      	cmp	r3, r0
 800f3e6:	d1ea      	bne.n	800f3be <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f3e8:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
 800f3ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f3ee:	81de      	strh	r6, [r3, #14]
 800f3f0:	e7e5      	b.n	800f3be <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e7f9      	b.n	800f3ea <bt_mesh_friend_sub_rem+0x68>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e7f7      	b.n	800f3ea <bt_mesh_friend_sub_rem+0x68>
		return -EINVAL;
 800f3fa:	f06f 0015 	mvn.w	r0, #21
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f400 <bt_mesh_friend_poll>:
	if (buf->len < sizeof(*msg)) {
 800f400:	888b      	ldrh	r3, [r1, #4]
{
 800f402:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
 800f404:	680e      	ldr	r6, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f406:	2b00      	cmp	r3, #0
 800f408:	d03d      	beq.n	800f486 <bt_mesh_friend_poll+0x86>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
 800f40a:	6804      	ldr	r4, [r0, #0]
 800f40c:	8901      	ldrh	r1, [r0, #8]
 800f40e:	8ba0      	ldrh	r0, [r4, #28]
 800f410:	2300      	movs	r3, #0
 800f412:	2201      	movs	r2, #1
 800f414:	f7ff feb4 	bl	800f180 <bt_mesh_friend_find>
	if (!frnd) {
 800f418:	4604      	mov	r4, r0
 800f41a:	b910      	cbnz	r0, 800f422 <bt_mesh_friend_poll+0x22>
		return 0;
 800f41c:	2500      	movs	r5, #0
}
 800f41e:	4628      	mov	r0, r5
 800f420:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->fsn & ~1) {
 800f422:	7835      	ldrb	r5, [r6, #0]
 800f424:	f035 0501 	bics.w	r5, r5, #1
 800f428:	d12d      	bne.n	800f486 <bt_mesh_friend_poll+0x86>
	if (frnd->pending_buf) {
 800f42a:	78c3      	ldrb	r3, [r0, #3]
 800f42c:	06d9      	lsls	r1, r3, #27
 800f42e:	d4f5      	bmi.n	800f41c <bt_mesh_friend_poll+0x1c>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f430:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f432:	f043 0304 	orr.w	r3, r3, #4
 800f436:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f438:	3133      	adds	r1, #51	; 0x33
 800f43a:	3014      	adds	r0, #20
 800f43c:	f7ff fc5a 	bl	800ecf4 <k_delayed_work_submit>
	if (!frnd->established) {
 800f440:	78e3      	ldrb	r3, [r4, #3]
 800f442:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f444:	065a      	lsls	r2, r3, #25
		frnd->established = 1;
 800f446:	bf5c      	itt	pl
 800f448:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800f44c:	70e3      	strbpl	r3, [r4, #3]
	if (msg->fsn == frnd->fsn && frnd->last) {
 800f44e:	78e3      	ldrb	r3, [r4, #3]
 800f450:	7831      	ldrb	r1, [r6, #0]
 800f452:	f003 0201 	and.w	r2, r3, #1
 800f456:	4291      	cmp	r1, r2
 800f458:	d104      	bne.n	800f464 <bt_mesh_friend_poll+0x64>
 800f45a:	b140      	cbz	r0, 800f46e <bt_mesh_friend_poll+0x6e>
		frnd->send_last = 1;
 800f45c:	f043 0302 	orr.w	r3, r3, #2
 800f460:	70e3      	strb	r3, [r4, #3]
 800f462:	e7dc      	b.n	800f41e <bt_mesh_friend_poll+0x1e>
		if (frnd->last) {
 800f464:	b118      	cbz	r0, 800f46e <bt_mesh_friend_poll+0x6e>
			net_buf_unref(frnd->last);
 800f466:	f002 f82d 	bl	80114c4 <net_buf_unref>
			frnd->last = NULL;
 800f46a:	2300      	movs	r3, #0
 800f46c:	6463      	str	r3, [r4, #68]	; 0x44
		frnd->fsn = msg->fsn;
 800f46e:	78e3      	ldrb	r3, [r4, #3]
 800f470:	7832      	ldrb	r2, [r6, #0]
		if (sys_slist_is_empty(&frnd->queue)) {
 800f472:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		frnd->fsn = msg->fsn;
 800f474:	f362 0300 	bfi	r3, r2, #0, #1
 800f478:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
 800f47a:	2900      	cmp	r1, #0
 800f47c:	d1ce      	bne.n	800f41c <bt_mesh_friend_poll+0x1c>
			enqueue_update(frnd, 0);
 800f47e:	4620      	mov	r0, r4
 800f480:	f7ff fde2 	bl	800f048 <enqueue_update>
 800f484:	e7cb      	b.n	800f41e <bt_mesh_friend_poll+0x1e>
		return -EINVAL;
 800f486:	f06f 0515 	mvn.w	r5, #21
 800f48a:	e7c8      	b.n	800f41e <bt_mesh_friend_poll+0x1e>

0800f48c <bt_mesh_friend_clear_cfm>:
{
 800f48c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
 800f48e:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
 800f490:	680a      	ldr	r2, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f492:	2b03      	cmp	r3, #3
 800f494:	d90b      	bls.n	800f4ae <bt_mesh_friend_clear_cfm+0x22>
		if (frnd->clear.frnd == prev_friend) {
 800f496:	4c15      	ldr	r4, [pc, #84]	; (800f4ec <bt_mesh_friend_clear_cfm+0x60>)
	frnd = find_clear(rx->ctx.addr);
 800f498:	8903      	ldrh	r3, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
 800f49a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
 800f49e:	4299      	cmp	r1, r3
 800f4a0:	d008      	beq.n	800f4b4 <bt_mesh_friend_clear_cfm+0x28>
 800f4a2:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
 800f4a6:	4299      	cmp	r1, r3
 800f4a8:	d01e      	beq.n	800f4e8 <bt_mesh_friend_clear_cfm+0x5c>
		return 0;
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800f4ae:	f06f 0015 	mvn.w	r0, #21
 800f4b2:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f4b4:	3424      	adds	r4, #36	; 0x24
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f4b6:	8811      	ldrh	r1, [r2, #0]
 800f4b8:	020b      	lsls	r3, r1, #8
 800f4ba:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
	if (lpn_addr != frnd->lpn) {
 800f4be:	8821      	ldrh	r1, [r4, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	4299      	cmp	r1, r3
 800f4c4:	d1f1      	bne.n	800f4aa <bt_mesh_friend_clear_cfm+0x1e>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f4c6:	8852      	ldrh	r2, [r2, #2]
 800f4c8:	0213      	lsls	r3, r2, #8
 800f4ca:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
 800f4ce:	8922      	ldrh	r2, [r4, #8]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	f04f 0500 	mov.w	r5, #0
 800f4d8:	d1e7      	bne.n	800f4aa <bt_mesh_friend_clear_cfm+0x1e>
	k_delayed_work_cancel(&frnd->clear.timer);
 800f4da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4de:	f002 ffbb 	bl	8012458 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
 800f4e2:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
 800f4e6:	e7e0      	b.n	800f4aa <bt_mesh_friend_clear_cfm+0x1e>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f4e8:	34a8      	adds	r4, #168	; 0xa8
 800f4ea:	e7e4      	b.n	800f4b6 <bt_mesh_friend_clear_cfm+0x2a>
 800f4ec:	20005b88 	.word	0x20005b88

0800f4f0 <bt_mesh_friend_req>:
{
 800f4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*msg)) {
 800f4f4:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
 800f4f6:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f4f8:	2b09      	cmp	r3, #9
{
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	4607      	mov	r7, r0
	if (buf->len < sizeof(*msg)) {
 800f4fe:	f240 80ce 	bls.w	800f69e <bt_mesh_friend_req+0x1ae>
	if (msg->recv_delay <= 0x09) {
 800f502:	786b      	ldrb	r3, [r5, #1]
 800f504:	2b09      	cmp	r3, #9
 800f506:	f240 80ca 	bls.w	800f69e <bt_mesh_friend_req+0x1ae>
		   ((u32_t)msg->poll_to[1] << 8) |
 800f50a:	78ee      	ldrb	r6, [r5, #3]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f50c:	78ab      	ldrb	r3, [r5, #2]
		   ((u32_t)msg->poll_to[1] << 8) |
 800f50e:	0236      	lsls	r6, r6, #8
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f510:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
		   ((u32_t)msg->poll_to[2]));
 800f514:	792b      	ldrb	r3, [r5, #4]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f516:	431e      	orrs	r6, r3
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
 800f518:	4b64      	ldr	r3, [pc, #400]	; (800f6ac <bt_mesh_friend_req+0x1bc>)
 800f51a:	f1a6 020a 	sub.w	r2, r6, #10
 800f51e:	429a      	cmp	r2, r3
 800f520:	f200 80bd 	bhi.w	800f69e <bt_mesh_friend_req+0x1ae>
	if (msg->num_elem == 0x00) {
 800f524:	79eb      	ldrb	r3, [r5, #7]
 800f526:	2b00      	cmp	r3, #0
 800f528:	f000 80b9 	beq.w	800f69e <bt_mesh_friend_req+0x1ae>
 800f52c:	782b      	ldrb	r3, [r5, #0]
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
 800f52e:	f013 0307 	ands.w	r3, r3, #7
 800f532:	f000 80b4 	beq.w	800f69e <bt_mesh_friend_req+0x1ae>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
 800f536:	2201      	movs	r2, #1
 800f538:	fa02 f303 	lsl.w	r3, r2, r3
 800f53c:	2b10      	cmp	r3, #16
 800f53e:	d903      	bls.n	800f548 <bt_mesh_friend_req+0x58>
	return 0;
 800f540:	2000      	movs	r0, #0
}
 800f542:	b005      	add	sp, #20
 800f544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	old_friend = sys_be16_to_cpu(msg->prev_addr);
 800f548:	f8b5 3005 	ldrh.w	r3, [r5, #5]
 800f54c:	6800      	ldr	r0, [r0, #0]
 800f54e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800f552:	ea48 2813 	orr.w	r8, r8, r3, lsr #8
 800f556:	fa0f f888 	sxth.w	r8, r8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend)) {
 800f55a:	f1b8 0f00 	cmp.w	r8, #0
	old_friend = sys_be16_to_cpu(msg->prev_addr);
 800f55e:	fa1f f988 	uxth.w	r9, r8
		frnd = bt_mesh_friend_find(rx->sub->net_idx, old_friend,
 800f562:	f04f 0300 	mov.w	r3, #0
 800f566:	bfcc      	ite	gt
 800f568:	4649      	movgt	r1, r9
		frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr,
 800f56a:	8939      	ldrhle	r1, [r7, #8]
 800f56c:	8b80      	ldrh	r0, [r0, #28]
 800f56e:	f7ff fe07 	bl	800f180 <bt_mesh_friend_find>
 800f572:	4604      	mov	r4, r0
	if (frnd) {
 800f574:	b9b8      	cbnz	r0, 800f5a6 <bt_mesh_friend_req+0xb6>
		if (!bt_mesh.frnd[i].valid) {
 800f576:	4b4e      	ldr	r3, [pc, #312]	; (800f6b0 <bt_mesh_friend_req+0x1c0>)
 800f578:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f57c:	0691      	lsls	r1, r2, #26
 800f57e:	d505      	bpl.n	800f58c <bt_mesh_friend_req+0x9c>
 800f580:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800f584:	0692      	lsls	r2, r2, #26
 800f586:	f100 808d 	bmi.w	800f6a4 <bt_mesh_friend_req+0x1b4>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f58a:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
 800f58c:	2284      	movs	r2, #132	; 0x84
 800f58e:	4362      	muls	r2, r4
 800f590:	f102 0424 	add.w	r4, r2, #36	; 0x24
 800f594:	441c      	add	r4, r3
			frnd->valid = 1;
 800f596:	4413      	add	r3, r2
 800f598:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f59c:	f042 0220 	orr.w	r2, r2, #32
 800f5a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800f5a4:	e001      	b.n	800f5aa <bt_mesh_friend_req+0xba>
		friend_clear(frnd);
 800f5a6:	f7ff fb25 	bl	800ebf4 <friend_clear>
	frnd->lpn = rx->ctx.addr;
 800f5aa:	893b      	ldrh	r3, [r7, #8]
 800f5ac:	8023      	strh	r3, [r4, #0]
	frnd->net_idx = rx->sub->net_idx;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	8b9b      	ldrh	r3, [r3, #28]
 800f5b2:	81a3      	strh	r3, [r4, #12]
	frnd->recv_delay = msg->recv_delay;
 800f5b4:	786b      	ldrb	r3, [r5, #1]
 800f5b6:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100;
 800f5b8:	2364      	movs	r3, #100	; 0x64
 800f5ba:	435e      	muls	r6, r3
 800f5bc:	6066      	str	r6, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f5be:	892a      	ldrh	r2, [r5, #8]
 800f5c0:	0213      	lsls	r3, r2, #8
 800f5c2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800f5c6:	8123      	strh	r3, [r4, #8]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
 800f5c8:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 800f5cc:	0213      	lsls	r3, r2, #8
 800f5ce:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f5d2:	f1b8 0f00 	cmp.w	r8, #0
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
 800f5d6:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f5da:	dd0f      	ble.n	800f5fc <bt_mesh_friend_req+0x10c>
	    !bt_mesh_elem_find(old_friend)) {
 800f5dc:	4648      	mov	r0, r9
 800f5de:	f7fc ff29 	bl	800c434 <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f5e2:	b958      	cbnz	r0, 800f5fc <bt_mesh_friend_req+0x10c>
 800f5e4:	f002 fc52 	bl	8011e8c <_impl_k_uptime_get_32>
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	frnd->clear.repeat_sec = 1;
 800f5ee:	2301      	movs	r3, #1
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
 800f5f0:	6560      	str	r0, [r4, #84]	; 0x54
	frnd->clear.repeat_sec = 1;
 800f5f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	send_friend_clear(frnd);
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f7ff fb40 	bl	800ec7c <send_friend_clear>
	k_delayed_work_submit(&frnd->timer,
 800f5fc:	782a      	ldrb	r2, [r5, #0]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f5fe:	482d      	ldr	r0, [pc, #180]	; (800f6b4 <bt_mesh_friend_req+0x1c4>)
 800f600:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f604:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f608:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f60a:	5c82      	ldrb	r2, [r0, r2]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f60c:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f610:	f997 1013 	ldrsb.w	r1, [r7, #19]
 800f614:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
 800f618:	230a      	movs	r3, #10
 800f61a:	fb91 f1f3 	sdiv	r1, r1, r3
	k_delayed_work_submit(&frnd->timer,
 800f61e:	2964      	cmp	r1, #100	; 0x64
 800f620:	bfb8      	it	lt
 800f622:	2164      	movlt	r1, #100	; 0x64
 800f624:	f104 0014 	add.w	r0, r4, #20
 800f628:	f7ff fb64 	bl	800ecf4 <k_delayed_work_submit>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f62c:	2510      	movs	r5, #16
	friend_cred_create(rx->sub, frnd->lpn, frnd->lpn_counter,
 800f62e:	8963      	ldrh	r3, [r4, #10]
 800f630:	8922      	ldrh	r2, [r4, #8]
 800f632:	8821      	ldrh	r1, [r4, #0]
 800f634:	6838      	ldr	r0, [r7, #0]
 800f636:	f7fa fa2b 	bl	8009a90 <friend_cred_create>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f63a:	462a      	mov	r2, r5
 800f63c:	2100      	movs	r1, #0
 800f63e:	4668      	mov	r0, sp
	enqueue_offer(frnd, rx->rssi);
 800f640:	f997 6013 	ldrsb.w	r6, [r7, #19]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f644:	f7f1 f948 	bl	80008d8 <memset>
 800f648:	2307      	movs	r3, #7
 800f64a:	f8ad 3006 	strh.w	r3, [sp, #6]
	off = net_buf_simple_add(sdu, sizeof(*off));
 800f64e:	2106      	movs	r1, #6
	buf->data = buf->__buf + reserve_head;
 800f650:	f10d 0309 	add.w	r3, sp, #9
 800f654:	4668      	mov	r0, sp
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	f001 ff54 	bl	8011504 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
 800f65c:	23ff      	movs	r3, #255	; 0xff
 800f65e:	7003      	strb	r3, [r0, #0]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
 800f660:	2303      	movs	r3, #3
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
 800f662:	7045      	strb	r5, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
 800f664:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
 800f666:	70c6      	strb	r6, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
 800f668:	8962      	ldrh	r2, [r4, #10]
 800f66a:	0213      	lsls	r3, r2, #8
 800f66c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800f670:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, sdu);
 800f672:	466a      	mov	r2, sp
 800f674:	2104      	movs	r1, #4
 800f676:	4620      	mov	r0, r4
 800f678:	f7ff fc0a 	bl	800ee90 <encode_friend_ctl>
	if (!buf) {
 800f67c:	4605      	mov	r5, r0
 800f67e:	2800      	cmp	r0, #0
 800f680:	f43f af5e 	beq.w	800f540 <bt_mesh_friend_req+0x50>
	frnd->counter++;
 800f684:	8963      	ldrh	r3, [r4, #10]
	if (frnd->last) {
 800f686:	6c60      	ldr	r0, [r4, #68]	; 0x44
	frnd->counter++;
 800f688:	3301      	adds	r3, #1
 800f68a:	8163      	strh	r3, [r4, #10]
	if (frnd->last) {
 800f68c:	b108      	cbz	r0, 800f692 <bt_mesh_friend_req+0x1a2>
		net_buf_unref(frnd->last);
 800f68e:	f001 ff19 	bl	80114c4 <net_buf_unref>
	frnd->send_last = 1;
 800f692:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
 800f694:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
 800f696:	f043 0302 	orr.w	r3, r3, #2
 800f69a:	70e3      	strb	r3, [r4, #3]
 800f69c:	e750      	b.n	800f540 <bt_mesh_friend_req+0x50>
		return -EINVAL;
 800f69e:	f06f 0015 	mvn.w	r0, #21
 800f6a2:	e74e      	b.n	800f542 <bt_mesh_friend_req+0x52>
		return -ENOMEM;
 800f6a4:	f06f 000b 	mvn.w	r0, #11
 800f6a8:	e74b      	b.n	800f542 <bt_mesh_friend_req+0x52>
 800f6aa:	bf00      	nop
 800f6ac:	0034bbf5 	.word	0x0034bbf5
 800f6b0:	20005b88 	.word	0x20005b88
 800f6b4:	08013bfc 	.word	0x08013bfc

0800f6b8 <bt_mesh_friend_init>:
{
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f6bc:	4c16      	ldr	r4, [pc, #88]	; (800f718 <bt_mesh_friend_init+0x60>)
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f6be:	4f17      	ldr	r7, [pc, #92]	; (800f71c <bt_mesh_friend_init+0x64>)
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f6c0:	4e17      	ldr	r6, [pc, #92]	; (800f720 <bt_mesh_friend_init+0x68>)
	list->head = NULL;
 800f6c2:	2500      	movs	r5, #0
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f6c4:	f64f 78ff 	movw	r8, #65535	; 0xffff
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f6ce:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
 800f6d2:	66e5      	str	r5, [r4, #108]	; 0x6c
	list->tail = NULL;
 800f6d4:	6725      	str	r5, [r4, #112]	; 0x70
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f6d6:	f002 fea1 	bl	801241c <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f6da:	4631      	mov	r1, r6
 800f6dc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f6e0:	f002 fe9c 	bl	801241c <k_delayed_work_init>
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
	list->head = NULL;
 800f6ea:	6625      	str	r5, [r4, #96]	; 0x60
	list->tail = NULL;
 800f6ec:	6665      	str	r5, [r4, #100]	; 0x64
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f6ee:	f8a4 80b4 	strh.w	r8, [r4, #180]	; 0xb4
	list->head = NULL;
 800f6f2:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
	list->tail = NULL;
 800f6f6:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f6fa:	f002 fe8f 	bl	801241c <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f6fe:	f504 7082 	add.w	r0, r4, #260	; 0x104
 800f702:	4631      	mov	r1, r6
 800f704:	f002 fe8a 	bl	801241c <k_delayed_work_init>
	list->head = NULL;
 800f708:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
	list->tail = NULL;
 800f70c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
}
 800f710:	4628      	mov	r0, r5
 800f712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f716:	bf00      	nop
 800f718:	20005b88 	.word	0x20005b88
 800f71c:	0800ef71 	.word	0x0800ef71
 800f720:	0800ef45 	.word	0x0800ef45

0800f724 <bt_mesh_friend_match>:

bool bt_mesh_friend_match(u16_t net_idx, u16_t addr)
{
 800f724:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f726:	460a      	mov	r2, r1
{
 800f728:	4604      	mov	r4, r0
 800f72a:	460d      	mov	r5, r1
		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f72c:	4601      	mov	r1, r0
 800f72e:	4806      	ldr	r0, [pc, #24]	; (800f748 <bt_mesh_friend_match+0x24>)
 800f730:	f7ff fc52 	bl	800efd8 <friend_lpn_matches>
 800f734:	b930      	cbnz	r0, 800f744 <bt_mesh_friend_match+0x20>
 800f736:	462a      	mov	r2, r5
 800f738:	4621      	mov	r1, r4
 800f73a:	4804      	ldr	r0, [pc, #16]	; (800f74c <bt_mesh_friend_match+0x28>)
	}

	BT_DBG("No matching LPN for address 0x%04x", addr);

	return false;
}
 800f73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f740:	f7ff bc4a 	b.w	800efd8 <friend_lpn_matches>
}
 800f744:	bd38      	pop	{r3, r4, r5, pc}
 800f746:	bf00      	nop
 800f748:	20005bac 	.word	0x20005bac
 800f74c:	20005c30 	.word	0x20005c30

0800f750 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
 800f756:	7c83      	ldrb	r3, [r0, #18]
{
 800f758:	4616      	mov	r6, r2
	if (!rx->friend_match ||
 800f75a:	061a      	lsls	r2, r3, #24
{
 800f75c:	b085      	sub	sp, #20
 800f75e:	4604      	mov	r4, r0
 800f760:	460f      	mov	r7, r1
	if (!rx->friend_match ||
 800f762:	d513      	bpl.n	800f78c <bt_mesh_friend_enqueue_rx+0x3c>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f764:	7a82      	ldrb	r2, [r0, #10]
 800f766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (!rx->friend_match ||
 800f76a:	2a01      	cmp	r2, #1
 800f76c:	dc03      	bgt.n	800f776 <bt_mesh_friend_enqueue_rx+0x26>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f76e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f772:	2b10      	cmp	r3, #16
 800f774:	d10a      	bne.n	800f78c <bt_mesh_friend_enqueue_rx+0x3c>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
 800f776:	f7fe feb3 	bl	800e4e0 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f77a:	2801      	cmp	r0, #1
 800f77c:	d106      	bne.n	800f78c <bt_mesh_friend_enqueue_rx+0x3c>
 800f77e:	4d2e      	ldr	r5, [pc, #184]	; (800f838 <bt_mesh_friend_enqueue_rx+0xe8>)
 800f780:	f505 7884 	add.w	r8, r5, #264	; 0x108
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800f784:	f1a5 0a24 	sub.w	sl, r5, #36	; 0x24
	}

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr, rx->dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f788:	45a8      	cmp	r8, r5
 800f78a:	d102      	bne.n	800f792 <bt_mesh_friend_enqueue_rx+0x42>

		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
			friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, sbuf);
		}
	}
}
 800f78c:	b005      	add	sp, #20
 800f78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	8a22      	ldrh	r2, [r4, #16]
 800f796:	8b99      	ldrh	r1, [r3, #28]
 800f798:	4628      	mov	r0, r5
 800f79a:	f7ff fc1d 	bl	800efd8 <friend_lpn_matches>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d048      	beq.n	800f834 <bt_mesh_friend_enqueue_rx+0xe4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
 800f7a2:	b92f      	cbnz	r7, 800f7b0 <bt_mesh_friend_enqueue_rx+0x60>
 800f7a4:	b126      	cbz	r6, 800f7b0 <bt_mesh_friend_enqueue_rx+0x60>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
 800f7a6:	8922      	ldrh	r2, [r4, #8]
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f7ff f9f2 	bl	800eb94 <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800f7b0:	7ca1      	ldrb	r1, [r4, #18]
	info.src = rx->ctx.addr;
 800f7b2:	8923      	ldrh	r3, [r4, #8]
 800f7b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	info.dst = rx->dst;
 800f7b8:	8a23      	ldrh	r3, [r4, #16]
 800f7ba:	7aa2      	ldrb	r2, [r4, #10]
 800f7bc:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800f7c0:	f001 0330 	and.w	r3, r1, #48	; 0x30
 800f7c4:	2b10      	cmp	r3, #16
		info.ttl = rx->ctx.recv_ttl - 1;
 800f7c6:	bf18      	it	ne
 800f7c8:	f3c2 0206 	ubfxne	r2, r2, #0, #7
 800f7cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f7d0:	bf18      	it	ne
 800f7d2:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800f7d6:	f362 0306 	bfi	r3, r2, #0, #7
 800f7da:	f88d 300b 	strb.w	r3, [sp, #11]
	info.ctl = rx->ctl;
 800f7de:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f7e2:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 800f7e6:	f362 13c7 	bfi	r3, r2, #7, #1
 800f7ea:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (rx->seq >> 16);
 800f7ee:	68e3      	ldr	r3, [r4, #12]
	info.seq[2] = rx->seq;
 800f7f0:	f88d 300a 	strb.w	r3, [sp, #10]
	info.seq[0] = (rx->seq >> 16);
 800f7f4:	0c1a      	lsrs	r2, r3, #16
 800f7f6:	f88d 2008 	strb.w	r2, [sp, #8]
	info.seq[1] = (rx->seq >> 8);
 800f7fa:	0a1a      	lsrs	r2, r3, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800f7fc:	f8da 3000 	ldr.w	r3, [sl]
	info.seq[1] = (rx->seq >> 8);
 800f800:	f88d 2009 	strb.w	r2, [sp, #9]
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800f804:	f001 0101 	and.w	r1, r1, #1
 800f808:	1a59      	subs	r1, r3, r1
 800f80a:	9103      	str	r1, [sp, #12]
	buf = create_friend_pdu(frnd, &info, sbuf);
 800f80c:	464a      	mov	r2, r9
 800f80e:	a901      	add	r1, sp, #4
 800f810:	4628      	mov	r0, r5
 800f812:	f7ff fa89 	bl	800ed28 <create_friend_pdu>
	if (!buf) {
 800f816:	4683      	mov	fp, r0
 800f818:	b160      	cbz	r0, 800f834 <bt_mesh_friend_enqueue_rx+0xe4>
	if (seq_auth) {
 800f81a:	b136      	cbz	r6, 800f82a <bt_mesh_friend_enqueue_rx+0xda>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
 800f81c:	f7ff f9ac 	bl	800eb78 <net_buf_user_data>
 800f820:	e9d6 1200 	ldrd	r1, r2, [r6]
 800f824:	6803      	ldr	r3, [r0, #0]
 800f826:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
 800f82a:	465a      	mov	r2, fp
 800f82c:	4639      	mov	r1, r7
 800f82e:	4628      	mov	r0, r5
 800f830:	f7ff fc46 	bl	800f0c0 <enqueue_friend_pdu>
 800f834:	3584      	adds	r5, #132	; 0x84
 800f836:	e7a7      	b.n	800f788 <bt_mesh_friend_enqueue_rx+0x38>
 800f838:	20005bac 	.word	0x20005bac

0800f83c <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
 800f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	b087      	sub	sp, #28
 800f842:	4617      	mov	r7, r2
 800f844:	9301      	str	r3, [sp, #4]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800f846:	6842      	ldr	r2, [r0, #4]
 800f848:	6803      	ldr	r3, [r0, #0]
{
 800f84a:	4604      	mov	r4, r0
 800f84c:	468a      	mov	sl, r1
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800f84e:	8b98      	ldrh	r0, [r3, #28]
 800f850:	8891      	ldrh	r1, [r2, #4]
 800f852:	f7ff ff67 	bl	800f724 <bt_mesh_friend_match>
 800f856:	b920      	cbnz	r0, 800f862 <bt_mesh_friend_enqueue_tx+0x26>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
 800f858:	2300      	movs	r3, #0
			matched = true;
		}
	}

	return matched;
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	b007      	add	sp, #28
 800f85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
 800f862:	f7fe fe3d 	bl	800e4e0 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800f866:	2801      	cmp	r0, #1
 800f868:	d1f6      	bne.n	800f858 <bt_mesh_friend_enqueue_tx+0x1c>
 800f86a:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800f93c <bt_mesh_friend_enqueue_tx+0x100>
 800f86e:	2600      	movs	r6, #0
 800f870:	4633      	mov	r3, r6
 800f872:	46d8      	mov	r8, fp
		if (friend_lpn_matches(frnd, tx->sub->net_idx, tx->ctx->addr)) {
 800f874:	e894 0006 	ldmia.w	r4, {r1, r2}
 800f878:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800f87c:	445d      	add	r5, fp
 800f87e:	8892      	ldrh	r2, [r2, #4]
 800f880:	8b89      	ldrh	r1, [r1, #28]
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	4628      	mov	r0, r5
 800f886:	f7ff fba7 	bl	800efd8 <friend_lpn_matches>
 800f88a:	9b00      	ldr	r3, [sp, #0]
 800f88c:	4681      	mov	r9, r0
 800f88e:	2800      	cmp	r0, #0
 800f890:	d04e      	beq.n	800f930 <bt_mesh_friend_enqueue_tx+0xf4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
 800f892:	f1ba 0f00 	cmp.w	sl, #0
 800f896:	d105      	bne.n	800f8a4 <bt_mesh_friend_enqueue_tx+0x68>
 800f898:	b127      	cbz	r7, 800f8a4 <bt_mesh_friend_enqueue_tx+0x68>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
 800f89a:	8922      	ldrh	r2, [r4, #8]
 800f89c:	4639      	mov	r1, r7
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f7ff f978 	bl	800eb94 <friend_purge_old_ack>
	info.src = tx->src;
 800f8a4:	8923      	ldrh	r3, [r4, #8]
 800f8a6:	f8ad 300c 	strh.w	r3, [sp, #12]
	info.dst = tx->ctx->addr;
 800f8aa:	6863      	ldr	r3, [r4, #4]
 800f8ac:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
 800f8ae:	79d9      	ldrb	r1, [r3, #7]
	info.dst = tx->ctx->addr;
 800f8b0:	f8ad 200e 	strh.w	r2, [sp, #14]
	info.ttl = tx->ctx->send_ttl;
 800f8b4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f8b8:	f361 0206 	bfi	r2, r1, #0, #7
 800f8bc:	f88d 2013 	strb.w	r2, [sp, #19]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 800f8c0:	885b      	ldrh	r3, [r3, #2]
 800f8c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8c6:	1a9a      	subs	r2, r3, r2
 800f8c8:	4253      	negs	r3, r2
 800f8ca:	4153      	adcs	r3, r2
 800f8cc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f8d0:	f363 12c7 	bfi	r2, r3, #7, #1
	info.seq[0] = (bt_mesh.seq >> 16);
 800f8d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 800f8d8:	f88d 2013 	strb.w	r2, [sp, #19]
	info.seq[0] = (bt_mesh.seq >> 16);
 800f8dc:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800f8e0:	1411      	asrs	r1, r2, #16
 800f8e2:	f88d 1010 	strb.w	r1, [sp, #16]
	info.seq[1] = (bt_mesh.seq >> 8);
 800f8e6:	1211      	asrs	r1, r2, #8
 800f8e8:	f88d 1011 	strb.w	r1, [sp, #17]
	info.seq[2] = bt_mesh.seq++;
 800f8ec:	1c51      	adds	r1, r2, #1
 800f8ee:	f361 0317 	bfi	r3, r1, #0, #24
 800f8f2:	f8c8 3004 	str.w	r3, [r8, #4]
 800f8f6:	f88d 2012 	strb.w	r2, [sp, #18]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800f8fa:	f8d8 2000 	ldr.w	r2, [r8]
 800f8fe:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800f902:	1ad3      	subs	r3, r2, r3
	buf = create_friend_pdu(frnd, &info, sbuf);
 800f904:	a903      	add	r1, sp, #12
 800f906:	9a01      	ldr	r2, [sp, #4]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800f908:	9305      	str	r3, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
 800f90a:	4628      	mov	r0, r5
 800f90c:	f7ff fa0c 	bl	800ed28 <create_friend_pdu>
	if (!buf) {
 800f910:	9000      	str	r0, [sp, #0]
 800f912:	b160      	cbz	r0, 800f92e <bt_mesh_friend_enqueue_tx+0xf2>
	if (seq_auth) {
 800f914:	b137      	cbz	r7, 800f924 <bt_mesh_friend_enqueue_tx+0xe8>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
 800f916:	f7ff f92f 	bl	800eb78 <net_buf_user_data>
 800f91a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f91e:	6803      	ldr	r3, [r0, #0]
 800f920:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
 800f924:	9a00      	ldr	r2, [sp, #0]
 800f926:	4651      	mov	r1, sl
 800f928:	4628      	mov	r0, r5
 800f92a:	f7ff fbc9 	bl	800f0c0 <enqueue_friend_pdu>
			matched = true;
 800f92e:	464b      	mov	r3, r9
 800f930:	3684      	adds	r6, #132	; 0x84
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f932:	f5b6 7f84 	cmp.w	r6, #264	; 0x108
 800f936:	d19d      	bne.n	800f874 <bt_mesh_friend_enqueue_tx+0x38>
 800f938:	e78f      	b.n	800f85a <bt_mesh_friend_enqueue_tx+0x1e>
 800f93a:	bf00      	nop
 800f93c:	20005b88 	.word	0x20005b88

0800f940 <bt_mesh_friend_clear_incomplete>:

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, u16_t src,
				     u16_t dst, u64_t *seq_auth)
{
 800f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f944:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800f9ac <bt_mesh_friend_clear_incomplete+0x6c>
 800f948:	4604      	mov	r4, r0
 800f94a:	460d      	mov	r5, r1
 800f94c:	4616      	mov	r6, r2
 800f94e:	461f      	mov	r7, r3
 800f950:	f508 7a84 	add.w	sl, r8, #264	; 0x108
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f954:	45c2      	cmp	sl, r8
 800f956:	d101      	bne.n	800f95c <bt_mesh_friend_clear_incomplete+0x1c>
			while (!sys_slist_is_empty(&seg->queue)) {
				net_buf_unref(net_buf_slist_get(&seg->queue));
			}
		}
	}
}
 800f958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
 800f95c:	4632      	mov	r2, r6
 800f95e:	8ba1      	ldrh	r1, [r4, #28]
 800f960:	4640      	mov	r0, r8
 800f962:	f7ff fb39 	bl	800efd8 <friend_lpn_matches>
 800f966:	b910      	cbnz	r0, 800f96e <bt_mesh_friend_clear_incomplete+0x2e>
 800f968:	f108 0884 	add.w	r8, r8, #132	; 0x84
 800f96c:	e7f2      	b.n	800f954 <bt_mesh_friend_clear_incomplete+0x14>
 800f96e:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800f972:	f108 093c 	add.w	r9, r8, #60	; 0x3c
			if (!buf) {
 800f976:	2800      	cmp	r0, #0
 800f978:	d0f6      	beq.n	800f968 <bt_mesh_friend_clear_incomplete+0x28>
			if (BT_MESH_ADV(buf)->addr != src) {
 800f97a:	f7ff f8fd 	bl	800eb78 <net_buf_user_data>
 800f97e:	6803      	ldr	r3, [r0, #0]
 800f980:	895a      	ldrh	r2, [r3, #10]
 800f982:	42aa      	cmp	r2, r5
 800f984:	d1f0      	bne.n	800f968 <bt_mesh_friend_clear_incomplete+0x28>
			if (FRIEND_ADV(buf)->seq_auth != *seq_auth) {
 800f986:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f98e:	4299      	cmp	r1, r3
 800f990:	bf08      	it	eq
 800f992:	4290      	cmpeq	r0, r2
 800f994:	d1e8      	bne.n	800f968 <bt_mesh_friend_clear_incomplete+0x28>
			while (!sys_slist_is_empty(&seg->queue)) {
 800f996:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0e4      	beq.n	800f968 <bt_mesh_friend_clear_incomplete+0x28>
				net_buf_unref(net_buf_slist_get(&seg->queue));
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f001 fd51 	bl	8011446 <net_buf_slist_get>
 800f9a4:	f001 fd8e 	bl	80114c4 <net_buf_unref>
 800f9a8:	e7f5      	b.n	800f996 <bt_mesh_friend_clear_incomplete+0x56>
 800f9aa:	bf00      	nop
 800f9ac:	20005bac 	.word	0x20005bac

0800f9b0 <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
 800f9b0:	4b01      	ldr	r3, [pc, #4]	; (800f9b8 <ack_complete+0x8>)
 800f9b2:	22ff      	movs	r2, #255	; 0xff
 800f9b4:	701a      	strb	r2, [r3, #0]
 800f9b6:	4770      	bx	lr
 800f9b8:	20006130 	.word	0x20006130

0800f9bc <prov_failed>:
{
	BT_DBG("");
}

static void prov_failed(const u8_t *data)
{
 800f9bc:	4770      	bx	lr

0800f9be <adv_buf_create>:
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT_COUNT,
 800f9be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f9c2:	2214      	movs	r2, #20
 800f9c4:	2102      	movs	r1, #2
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	f7f9 bc9a 	b.w	8009300 <bt_mesh_adv_create>

0800f9cc <send_reliable>:
{
 800f9cc:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 800f9ce:	f002 fa71 	bl	8011eb4 <_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
 800f9d2:	4c0c      	ldr	r4, [pc, #48]	; (800fa04 <send_reliable+0x38>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800f9d4:	4e0c      	ldr	r6, [pc, #48]	; (800fa08 <send_reliable+0x3c>)
	link.tx.start = k_uptime_get();
 800f9d6:	e9c4 0100 	strd	r0, r1, [r4]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800f9da:	2500      	movs	r5, #0
 800f9dc:	340c      	adds	r4, #12
		struct net_buf *buf = link.tx.buf[i];
 800f9de:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
 800f9e2:	b158      	cbz	r0, 800f9fc <send_reliable+0x30>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 800f9e4:	3501      	adds	r5, #1
 800f9e6:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
 800f9e8:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 800f9ec:	d007      	beq.n	800f9fe <send_reliable+0x32>
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	b12b      	cbz	r3, 800f9fe <send_reliable+0x32>
			bt_mesh_adv_send(buf, NULL, NULL);
 800f9f2:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800f9f4:	f7f9 fc94 	bl	8009320 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800f9f8:	2d03      	cmp	r5, #3
 800f9fa:	d1f0      	bne.n	800f9de <send_reliable+0x12>
 800f9fc:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800f9fe:	4631      	mov	r1, r6
 800fa00:	e7f8      	b.n	800f9f4 <send_reliable+0x28>
 800fa02:	bf00      	nop
 800fa04:	20001230 	.word	0x20001230
 800fa08:	20006128 	.word	0x20006128

0800fa0c <atomic_or>:
{
 800fa0c:	b500      	push	{lr}
}
 800fa0e:	f3bf 8f5b 	dmb	ish
 800fa12:	e850 3f00 	ldrex	r3, [r0]
 800fa16:	ea43 0201 	orr.w	r2, r3, r1
 800fa1a:	e840 2e00 	strex	lr, r2, [r0]
 800fa1e:	f1be 0f00 	cmp.w	lr, #0
 800fa22:	d1f6      	bne.n	800fa12 <atomic_or+0x6>
 800fa24:	f3bf 8f5b 	dmb	ish
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fa30 <gen_prov_ack_send>:
{
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
 800fa32:	4d16      	ldr	r5, [pc, #88]	; (800fa8c <gen_prov_ack_send+0x5c>)
 800fa34:	782b      	ldrb	r3, [r5, #0]
 800fa36:	4283      	cmp	r3, r0
{
 800fa38:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
 800fa3a:	d025      	beq.n	800fa88 <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
 800fa3c:	f7ff ffbf 	bl	800f9be <adv_buf_create>
	if (!buf) {
 800fa40:	4604      	mov	r4, r0
 800fa42:	b308      	cbz	r0, 800fa88 <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
 800fa44:	782b      	ldrb	r3, [r5, #0]
 800fa46:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
 800fa48:	4b11      	ldr	r3, [pc, #68]	; (800fa90 <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
 800fa4a:	bf08      	it	eq
 800fa4c:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
 800fa4e:	f100 0508 	add.w	r5, r0, #8
 800fa52:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
 800fa56:	bf08      	it	eq
 800fa58:	4f0e      	ldreq	r7, [pc, #56]	; (800fa94 <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
 800fa5a:	4628      	mov	r0, r5
		complete = NULL;
 800fa5c:	bf18      	it	ne
 800fa5e:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
 800fa60:	f001 fd87 	bl	8011572 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
 800fa64:	4631      	mov	r1, r6
 800fa66:	4628      	mov	r0, r5
 800fa68:	f001 fd5b 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f001 fd57 	bl	8011522 <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
 800fa74:	4620      	mov	r0, r4
 800fa76:	4639      	mov	r1, r7
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f7f9 fc51 	bl	8009320 <bt_mesh_adv_send>
	net_buf_unref(buf);
 800fa7e:	4620      	mov	r0, r4
}
 800fa80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
 800fa84:	f001 bd1e 	b.w	80114c4 <net_buf_unref>
 800fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	20006130 	.word	0x20006130
 800fa90:	20001100 	.word	0x20001100
 800fa94:	08013c0c 	.word	0x08013c0c

0800fa98 <prov_input_complete>:
 800fa98:	4770      	bx	lr

0800fa9a <sys_memcpy_swap.constprop.19>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
 800fa9a:	f101 0320 	add.w	r3, r1, #32
 800fa9e:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
 800faa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800faa4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
 800faa8:	428b      	cmp	r3, r1
 800faaa:	d1f9      	bne.n	800faa0 <sys_memcpy_swap.constprop.19+0x6>
}
 800faac:	4770      	bx	lr
	...

0800fab0 <buf_sent>:
	if (!link.tx.buf[0]) {
 800fab0:	4905      	ldr	r1, [pc, #20]	; (800fac8 <buf_sent+0x18>)
 800fab2:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
 800fab6:	b133      	cbz	r3, 800fac6 <buf_sent+0x16>
 800fab8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800fabc:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 800fac0:	4802      	ldr	r0, [pc, #8]	; (800facc <buf_sent+0x1c>)
 800fac2:	f002 bd15 	b.w	80124f0 <k_delayed_work_submit_to_queue>
 800fac6:	4770      	bx	lr
 800fac8:	20001100 	.word	0x20001100
 800facc:	20001498 	.word	0x20001498

0800fad0 <atomic_test_bit.constprop.24>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 800fad0:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800fad2:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <atomic_test_bit.constprop.24+0x20>)
 800fad4:	f3bf 8f5b 	dmb	ish
 800fad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fadc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
 800fae0:	f000 001f 	and.w	r0, r0, #31
 800fae4:	fa43 f000 	asr.w	r0, r3, r0
}
 800fae8:	f000 0001 	and.w	r0, r0, #1
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	20001100 	.word	0x20001100

0800faf4 <prov_complete>:
 800faf4:	4770      	bx	lr

0800faf6 <prov_capabilities>:
 800faf6:	4770      	bx	lr

0800faf8 <free_segments>:
{
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	4c0c      	ldr	r4, [pc, #48]	; (800fb2c <free_segments+0x34>)
		link.tx.buf[i] = NULL;
 800fafc:	2500      	movs	r5, #0
 800fafe:	f104 060c 	add.w	r6, r4, #12
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800fb02:	42b4      	cmp	r4, r6
 800fb04:	d100      	bne.n	800fb08 <free_segments+0x10>
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
		struct net_buf *buf = link.tx.buf[i];
 800fb08:	f854 0f04 	ldr.w	r0, [r4, #4]!
		if (!buf) {
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0fa      	beq.n	800fb06 <free_segments+0xe>
		link.tx.buf[i] = NULL;
 800fb10:	6025      	str	r5, [r4, #0]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800fb12:	89c3      	ldrh	r3, [r0, #14]
 800fb14:	4403      	add	r3, r0
 800fb16:	3313      	adds	r3, #19
 800fb18:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(buf)->busy = 0;
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	7a1a      	ldrb	r2, [r3, #8]
 800fb20:	f365 0282 	bfi	r2, r5, #2, #1
 800fb24:	721a      	strb	r2, [r3, #8]
		net_buf_unref(buf);
 800fb26:	f001 fccd 	bl	80114c4 <net_buf_unref>
 800fb2a:	e7ea      	b.n	800fb02 <free_segments+0xa>
 800fb2c:	20001238 	.word	0x20001238

0800fb30 <prov_clear_tx>:
{
 800fb30:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
 800fb32:	4803      	ldr	r0, [pc, #12]	; (800fb40 <prov_clear_tx+0x10>)
 800fb34:	f002 fc90 	bl	8012458 <k_delayed_work_cancel>
}
 800fb38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
 800fb3c:	f7ff bfdc 	b.w	800faf8 <free_segments>
 800fb40:	20001248 	.word	0x20001248

0800fb44 <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
 800fb44:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <gen_prov_ack+0x18>)
 800fb46:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fb4a:	b132      	cbz	r2, 800fb5a <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
 800fb4c:	7902      	ldrb	r2, [r0, #4]
 800fb4e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d101      	bne.n	800fb5a <gen_prov_ack+0x16>
		prov_clear_tx();
 800fb56:	f7ff bfeb 	b.w	800fb30 <prov_clear_tx>
 800fb5a:	4770      	bx	lr
 800fb5c:	20001100 	.word	0x20001100

0800fb60 <bearer_ctl_send>:
{
 800fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb64:	4604      	mov	r4, r0
 800fb66:	4688      	mov	r8, r1
 800fb68:	4691      	mov	r9, r2
	prov_clear_tx();
 800fb6a:	f7ff ffe1 	bl	800fb30 <prov_clear_tx>
	buf = adv_buf_create();
 800fb6e:	f7ff ff26 	bl	800f9be <adv_buf_create>
	if (!buf) {
 800fb72:	4606      	mov	r6, r0
 800fb74:	b1f0      	cbz	r0, 800fbb4 <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
 800fb76:	4f11      	ldr	r7, [pc, #68]	; (800fbbc <bearer_ctl_send+0x5c>)
 800fb78:	f100 0508 	add.w	r5, r0, #8
 800fb7c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800fb80:	4628      	mov	r0, r5
 800fb82:	f001 fcf6 	bl	8011572 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
 800fb86:	2100      	movs	r1, #0
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f001 fcca 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
 800fb8e:	00a1      	lsls	r1, r4, #2
 800fb90:	f041 0103 	orr.w	r1, r1, #3
 800fb94:	b2c9      	uxtb	r1, r1
 800fb96:	4628      	mov	r0, r5
 800fb98:	f001 fcc3 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
 800fb9c:	464a      	mov	r2, r9
 800fb9e:	4641      	mov	r1, r8
 800fba0:	4628      	mov	r0, r5
 800fba2:	f001 fcb5 	bl	8011510 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
 800fba6:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
 800fbaa:	f7ff ff0f 	bl	800f9cc <send_reliable>
	return 0;
 800fbae:	2000      	movs	r0, #0
 800fbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
 800fbb4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800fbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbbc:	20001100 	.word	0x20001100

0800fbc0 <prov_send>:
{
 800fbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
 800fbc4:	4e4e      	ldr	r6, [pc, #312]	; (800fd00 <prov_send+0x140>)
{
 800fbc6:	4604      	mov	r4, r0
	if (link.conn) {
 800fbc8:	6870      	ldr	r0, [r6, #4]
 800fbca:	b128      	cbz	r0, 800fbd8 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
 800fbcc:	4622      	mov	r2, r4
 800fbce:	2103      	movs	r1, #3
}
 800fbd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
 800fbd4:	f001 ba3b 	b.w	801104e <bt_mesh_proxy_send>
	prov_clear_tx();
 800fbd8:	f7ff ffaa 	bl	800fb30 <prov_clear_tx>
	start = adv_buf_create();
 800fbdc:	f7ff feef 	bl	800f9be <adv_buf_create>
	if (!start) {
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d060      	beq.n	800fca8 <prov_send+0xe8>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
 800fbe6:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
 800fbea:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
 800fbee:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800fd04 <prov_send+0x144>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
 800fbf2:	1e6b      	subs	r3, r5, #1
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
 800fbf8:	bf98      	it	ls
 800fbfa:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
 800fbfc:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
 800fc00:	bf94      	ite	ls
 800fc02:	b2ed      	uxtbls	r5, r5
	link.tx.id = 0x80;
 800fc04:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
 800fc06:	4638      	mov	r0, r7
	link.tx.id = 0x80;
 800fc08:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
 800fc0c:	f001 fcb1 	bl	8011572 <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
 800fc10:	4629      	mov	r1, r5
 800fc12:	4638      	mov	r0, r7
 800fc14:	f001 fc85 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
 800fc18:	7923      	ldrb	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
 800fc1a:	2b14      	cmp	r3, #20
	len -= START_PAYLOAD_MAX;
 800fc1c:	bf81      	itttt	hi
 800fc1e:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
 800fc22:	b2c9      	uxtbhi	r1, r1
 800fc24:	2317      	movhi	r3, #23
 800fc26:	fbb1 f1f3 	udivhi	r1, r1, r3
 800fc2a:	bf86      	itte	hi
 800fc2c:	3101      	addhi	r1, #1
 800fc2e:	b2c9      	uxtbhi	r1, r1
		return 0;
 800fc30:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
 800fc32:	0089      	lsls	r1, r1, #2
 800fc34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800fc38:	4638      	mov	r0, r7
 800fc3a:	f001 fc72 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
 800fc3e:	88a1      	ldrh	r1, [r4, #4]
 800fc40:	4638      	mov	r0, r7
 800fc42:	f001 fc85 	bl	8011550 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
 800fc46:	7921      	ldrb	r1, [r4, #4]
 800fc48:	6820      	ldr	r0, [r4, #0]
 800fc4a:	f7fc fa37 	bl	800c0bc <bt_mesh_fcs_calc>
 800fc4e:	4601      	mov	r1, r0
 800fc50:	4638      	mov	r0, r7
 800fc52:	f001 fc66 	bl	8011522 <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
 800fc56:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = min(msg->len, START_PAYLOAD_MAX);
 800fc5a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
 800fc5e:	6821      	ldr	r1, [r4, #0]
	seg_len = min(msg->len, START_PAYLOAD_MAX);
 800fc60:	f1b8 0f14 	cmp.w	r8, #20
 800fc64:	bf28      	it	cs
 800fc66:	f04f 0814 	movcs.w	r8, #20
	net_buf_add_mem(start, msg->data, seg_len);
 800fc6a:	4642      	mov	r2, r8
 800fc6c:	4638      	mov	r0, r7
 800fc6e:	f001 fc4f 	bl	8011510 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
 800fc72:	4641      	mov	r1, r8
 800fc74:	4620      	mov	r0, r4
 800fc76:	f001 fcb0 	bl	80115da <net_buf_simple_pull>
 800fc7a:	f04f 0804 	mov.w	r8, #4
	for (seg_id = 1; msg->len > 0; seg_id++) {
 800fc7e:	88a7      	ldrh	r7, [r4, #4]
 800fc80:	b927      	cbnz	r7, 800fc8c <prov_send+0xcc>
	send_reliable();
 800fc82:	f7ff fea3 	bl	800f9cc <send_reliable>
	return 0;
 800fc86:	4638      	mov	r0, r7
 800fc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
 800fc8c:	f1b8 0f0c 	cmp.w	r8, #12
 800fc90:	d105      	bne.n	800fc9e <prov_send+0xde>
			free_segments();
 800fc92:	f7ff ff31 	bl	800faf8 <free_segments>
			return -E2BIG;
 800fc96:	f06f 0006 	mvn.w	r0, #6
 800fc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
 800fc9e:	f7ff fe8e 	bl	800f9be <adv_buf_create>
		if (!buf) {
 800fca2:	b928      	cbnz	r0, 800fcb0 <prov_send+0xf0>
			free_segments();
 800fca4:	f7ff ff28 	bl	800faf8 <free_segments>
		return -ENOBUFS;
 800fca8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800fcb0:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
 800fcb4:	f849 0f04 	str.w	r0, [r9, #4]!
		net_buf_add_be32(buf, link.id);
 800fcb8:	f100 0708 	add.w	r7, r0, #8
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800fcbc:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
 800fcc0:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
 800fcc4:	4638      	mov	r0, r7
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800fcc6:	bf28      	it	cs
 800fcc8:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
 800fccc:	f001 fc51 	bl	8011572 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f001 fc25 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
 800fcd8:	f048 0102 	orr.w	r1, r8, #2
 800fcdc:	4638      	mov	r0, r7
 800fcde:	f001 fc20 	bl	8011522 <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
 800fce2:	4652      	mov	r2, sl
 800fce4:	6821      	ldr	r1, [r4, #0]
 800fce6:	4638      	mov	r0, r7
 800fce8:	f001 fc12 	bl	8011510 <net_buf_simple_add_mem>
 800fcec:	f108 0804 	add.w	r8, r8, #4
		net_buf_simple_pull(msg, seg_len);
 800fcf0:	4651      	mov	r1, sl
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f001 fc71 	bl	80115da <net_buf_simple_pull>
 800fcf8:	fa5f f888 	uxtb.w	r8, r8
 800fcfc:	e7bf      	b.n	800fc7e <prov_send+0xbe>
 800fcfe:	bf00      	nop
 800fd00:	20001100 	.word	0x20001100
 800fd04:	2000123c 	.word	0x2000123c

0800fd08 <atomic_test_and_clear_bit.constprop.23>:
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
 800fd08:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
 800fd0a:	f000 021f 	and.w	r2, r0, #31
 800fd0e:	2301      	movs	r3, #1
 800fd10:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800fd12:	0942      	lsrs	r2, r0, #5
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800fd14:	480b      	ldr	r0, [pc, #44]	; (800fd44 <atomic_test_and_clear_bit.constprop.23+0x3c>)
 800fd16:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800fd1a:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800fd1c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800fd20:	e850 2f00 	ldrex	r2, [r0]
 800fd24:	ea02 0e01 	and.w	lr, r2, r1
 800fd28:	e840 ec00 	strex	ip, lr, [r0]
 800fd2c:	f1bc 0f00 	cmp.w	ip, #0
 800fd30:	d1f6      	bne.n	800fd20 <atomic_test_and_clear_bit.constprop.23+0x18>
 800fd32:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
 800fd36:	421a      	tst	r2, r3
}
 800fd38:	bf14      	ite	ne
 800fd3a:	2001      	movne	r0, #1
 800fd3c:	2000      	moveq	r0, #0
 800fd3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd42:	bf00      	nop
 800fd44:	20001100 	.word	0x20001100

0800fd48 <prov_send_fail_msg>:
{
 800fd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_buf_simple *buf = PROV_BUF(2);
 800fd4a:	2210      	movs	r2, #16
{
 800fd4c:	4604      	mov	r4, r0
	struct net_buf_simple *buf = PROV_BUF(2);
 800fd4e:	2100      	movs	r1, #0
 800fd50:	4668      	mov	r0, sp
 800fd52:	f7f0 fdc1 	bl	80008d8 <memset>
 800fd56:	2307      	movs	r3, #7
 800fd58:	f8ad 3006 	strh.w	r3, [sp, #6]
	net_buf_simple_add_u8(buf, type);
 800fd5c:	2109      	movs	r1, #9
	buf->data = buf->__buf + reserve_head;
 800fd5e:	f10d 030d 	add.w	r3, sp, #13
 800fd62:	4668      	mov	r0, sp
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	f001 fbdc 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, err);
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4668      	mov	r0, sp
 800fd6e:	f001 fbd8 	bl	8011522 <net_buf_simple_add_u8>
	prov_send(buf);
 800fd72:	4668      	mov	r0, sp
 800fd74:	f7ff ff24 	bl	800fbc0 <prov_send>
}
 800fd78:	b004      	add	sp, #16
 800fd7a:	bd10      	pop	{r4, pc}

0800fd7c <prov_start>:
{
 800fd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (data[0] != PROV_ALG_P256) {
 800fd80:	7803      	ldrb	r3, [r0, #0]
{
 800fd82:	b08b      	sub	sp, #44	; 0x2c
 800fd84:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
 800fd86:	b11b      	cbz	r3, 800fd90 <prov_start+0x14>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
 800fd88:	2002      	movs	r0, #2
 800fd8a:	f7ff ffdd 	bl	800fd48 <prov_send_fail_msg>
 800fd8e:	e01e      	b.n	800fdce <prov_start+0x52>
	if (data[1] > 0x01) {
 800fd90:	7843      	ldrb	r3, [r0, #1]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	d8f8      	bhi.n	800fd88 <prov_start+0xc>
	memcpy(&link.conf_inputs[12], data, 5);
 800fd96:	4f65      	ldr	r7, [pc, #404]	; (800ff2c <prov_start+0x1b0>)
 800fd98:	2205      	movs	r2, #5
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800fda0:	f7f0 fd6e 	bl	8000880 <memcpy>
	link.expect = PROV_PUB_KEY;
 800fda4:	2303      	movs	r3, #3
 800fda6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	switch (method) {
 800fdaa:	78a2      	ldrb	r2, [r4, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
 800fdac:	78e3      	ldrb	r3, [r4, #3]
 800fdae:	7925      	ldrb	r5, [r4, #4]
	switch (method) {
 800fdb0:	2a03      	cmp	r2, #3
 800fdb2:	d8e9      	bhi.n	800fd88 <prov_start+0xc>
 800fdb4:	e8df f002 	tbb	[pc, r2]
 800fdb8:	9c230e02 	.word	0x9c230e02
		if (action || size) {
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e3      	bne.n	800fd88 <prov_start+0xc>
 800fdc0:	2d00      	cmp	r5, #0
 800fdc2:	d1e1      	bne.n	800fd88 <prov_start+0xc>
		memset(link.auth, 0, sizeof(link.auth));
 800fdc4:	485a      	ldr	r0, [pc, #360]	; (800ff30 <prov_start+0x1b4>)
 800fdc6:	2210      	movs	r2, #16
 800fdc8:	4629      	mov	r1, r5
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
 800fdca:	f7f0 fd85 	bl	80008d8 <memset>
}
 800fdce:	b00b      	add	sp, #44	; 0x2c
 800fdd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (action || size) {
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1d7      	bne.n	800fd88 <prov_start+0xc>
 800fdd8:	2d00      	cmp	r5, #0
 800fdda:	d1d5      	bne.n	800fd88 <prov_start+0xc>
		memcpy(link.auth + 16 - prov->static_val_len,
 800fddc:	4e55      	ldr	r6, [pc, #340]	; (800ff34 <prov_start+0x1b8>)
 800fdde:	4c54      	ldr	r4, [pc, #336]	; (800ff30 <prov_start+0x1b4>)
 800fde0:	6833      	ldr	r3, [r6, #0]
 800fde2:	7a1a      	ldrb	r2, [r3, #8]
 800fde4:	6859      	ldr	r1, [r3, #4]
 800fde6:	f1c2 0010 	rsb	r0, r2, #16
 800fdea:	4420      	add	r0, r4
 800fdec:	f7f0 fd48 	bl	8000880 <memcpy>
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
 800fdf0:	6833      	ldr	r3, [r6, #0]
 800fdf2:	7a1a      	ldrb	r2, [r3, #8]
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	f1c2 0210 	rsb	r2, r2, #16
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	e7e5      	b.n	800fdca <prov_start+0x4e>
 800fdfe:	2b04      	cmp	r3, #4
 800fe00:	d8c2      	bhi.n	800fd88 <prov_start+0xc>
 800fe02:	4a4d      	ldr	r2, [pc, #308]	; (800ff38 <prov_start+0x1bc>)
 800fe04:	f812 8003 	ldrb.w	r8, [r2, r3]
		if (!output) {
 800fe08:	f1b8 0f00 	cmp.w	r8, #0
 800fe0c:	d0bc      	beq.n	800fd88 <prov_start+0xc>
		if (!(prov->output_actions & output)) {
 800fe0e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800ff34 <prov_start+0x1b8>
 800fe12:	f8d9 3000 	ldr.w	r3, [r9]
 800fe16:	895a      	ldrh	r2, [r3, #10]
 800fe18:	ea12 0f08 	tst.w	r2, r8
 800fe1c:	464e      	mov	r6, r9
 800fe1e:	d0b3      	beq.n	800fd88 <prov_start+0xc>
		if (size > prov->output_size) {
 800fe20:	7a5b      	ldrb	r3, [r3, #9]
 800fe22:	42ab      	cmp	r3, r5
 800fe24:	d3b0      	bcc.n	800fd88 <prov_start+0xc>
		if (output == BT_MESH_DISPLAY_STRING) {
 800fe26:	f1b8 0f10 	cmp.w	r8, #16
 800fe2a:	ac02      	add	r4, sp, #8
 800fe2c:	d131      	bne.n	800fe92 <prov_start+0x116>
			bt_rand(str, size);
 800fe2e:	4629      	mov	r1, r5
 800fe30:	4620      	mov	r0, r4
 800fe32:	f7f6 fd61 	bl	80068f8 <bt_rand>
 800fe36:	4622      	mov	r2, r4
				str[i] %= 36;
 800fe38:	2124      	movs	r1, #36	; 0x24
			for (i = 0; i < size; i++) {
 800fe3a:	1b13      	subs	r3, r2, r4
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	429d      	cmp	r5, r3
 800fe40:	d818      	bhi.n	800fe74 <prov_start+0xf8>
			memcpy(link.auth, str, size);
 800fe42:	4f3b      	ldr	r7, [pc, #236]	; (800ff30 <prov_start+0x1b4>)
			str[size] = '\0';
 800fe44:	ab0a      	add	r3, sp, #40	; 0x28
 800fe46:	442b      	add	r3, r5
 800fe48:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
 800fe4c:	462a      	mov	r2, r5
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4638      	mov	r0, r7
			str[size] = '\0';
 800fe52:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
 800fe56:	f7f0 fd13 	bl	8000880 <memcpy>
			memset(link.auth + size, 0, sizeof(link.auth) - size);
 800fe5a:	f1c5 0210 	rsb	r2, r5, #16
 800fe5e:	4641      	mov	r1, r8
 800fe60:	1978      	adds	r0, r7, r5
 800fe62:	f7f0 fd39 	bl	80008d8 <memset>
			return prov->output_string((char *)str);
 800fe66:	6833      	ldr	r3, [r6, #0]
 800fe68:	4620      	mov	r0, r4
 800fe6a:	695b      	ldr	r3, [r3, #20]
 800fe6c:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	daad      	bge.n	800fdce <prov_start+0x52>
 800fe72:	e789      	b.n	800fd88 <prov_start+0xc>
				str[i] %= 36;
 800fe74:	7810      	ldrb	r0, [r2, #0]
 800fe76:	fbb0 f3f1 	udiv	r3, r0, r1
 800fe7a:	fb01 0313 	mls	r3, r1, r3, r0
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	f802 3b01 	strb.w	r3, [r2], #1
				if (str[i] < 10) {
 800fe84:	2b09      	cmp	r3, #9
					str[i] += '0';
 800fe86:	bf94      	ite	ls
 800fe88:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
 800fe8a:	3337      	addhi	r3, #55	; 0x37
 800fe8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fe90:	e7d3      	b.n	800fe3a <prov_start+0xbe>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
 800fe92:	4e2a      	ldr	r6, [pc, #168]	; (800ff3c <prov_start+0x1c0>)
 800fe94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fe96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800fe9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
 800fea0:	2104      	movs	r1, #4
 800fea2:	eb0d 0001 	add.w	r0, sp, r1
 800fea6:	f7f6 fd27 	bl	80068f8 <bt_rand>
			num %= div[size - 1];
 800feaa:	ab0a      	add	r3, sp, #40	; 0x28
 800feac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800feb0:	9901      	ldr	r1, [sp, #4]
 800feb2:	f855 2c24 	ldr.w	r2, [r5, #-36]
 800feb6:	fbb1 f3f2 	udiv	r3, r1, r2
 800feba:	fb02 1313 	mls	r3, r2, r3, r1
	sys_put_be16(val >> 16, dst);
 800febe:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
 800fec0:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
 800fec2:	f887 2059 	strb.w	r2, [r7, #89]	; 0x59
	dst[0] = val >> 8;
 800fec6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800feca:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
 800fece:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	dst[1] = val;
 800fed2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			memset(link.auth, 0, 12);
 800fed6:	220c      	movs	r2, #12
 800fed8:	2100      	movs	r1, #0
 800feda:	4815      	ldr	r0, [pc, #84]	; (800ff30 <prov_start+0x1b4>)
			num %= div[size - 1];
 800fedc:	9301      	str	r3, [sp, #4]
			memset(link.auth, 0, 12);
 800fede:	f7f0 fcfb 	bl	80008d8 <memset>
			return prov->output_number(output, num);
 800fee2:	f8d9 3000 	ldr.w	r3, [r9]
 800fee6:	9901      	ldr	r1, [sp, #4]
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	4640      	mov	r0, r8
 800feec:	4798      	blx	r3
 800feee:	e7be      	b.n	800fe6e <prov_start+0xf2>
 800fef0:	2b03      	cmp	r3, #3
 800fef2:	f63f af49 	bhi.w	800fd88 <prov_start+0xc>
 800fef6:	4a12      	ldr	r2, [pc, #72]	; (800ff40 <prov_start+0x1c4>)
 800fef8:	5cd4      	ldrb	r4, [r2, r3]
		if (!input) {
 800fefa:	2c00      	cmp	r4, #0
 800fefc:	f43f af44 	beq.w	800fd88 <prov_start+0xc>
		if (!(prov->input_actions & input)) {
 800ff00:	4b0c      	ldr	r3, [pc, #48]	; (800ff34 <prov_start+0x1b8>)
 800ff02:	681e      	ldr	r6, [r3, #0]
 800ff04:	89f3      	ldrh	r3, [r6, #14]
 800ff06:	4223      	tst	r3, r4
 800ff08:	f43f af3e 	beq.w	800fd88 <prov_start+0xc>
		if (size > prov->input_size) {
 800ff0c:	7b33      	ldrb	r3, [r6, #12]
 800ff0e:	42ab      	cmp	r3, r5
 800ff10:	f4ff af3a 	bcc.w	800fd88 <prov_start+0xc>
		if (input == BT_MESH_ENTER_STRING) {
 800ff14:	2c08      	cmp	r4, #8
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800ff16:	bf0c      	ite	eq
 800ff18:	2140      	moveq	r1, #64	; 0x40
 800ff1a:	2120      	movne	r1, #32
 800ff1c:	4803      	ldr	r0, [pc, #12]	; (800ff2c <prov_start+0x1b0>)
 800ff1e:	f7ff fd75 	bl	800fa0c <atomic_or>
		return prov->input(input, size);
 800ff22:	69b3      	ldr	r3, [r6, #24]
 800ff24:	4629      	mov	r1, r5
 800ff26:	4620      	mov	r0, r4
 800ff28:	4798      	blx	r3
 800ff2a:	e7a0      	b.n	800fe6e <prov_start+0xf2>
 800ff2c:	20001100 	.word	0x20001100
 800ff30:	2000114c 	.word	0x2000114c
 800ff34:	20001270 	.word	0x20001270
 800ff38:	08013c00 	.word	0x08013c00
 800ff3c:	08012c54 	.word	0x08012c54
 800ff40:	08013c05 	.word	0x08013c05

0800ff44 <reset_link>:
{
 800ff44:	b510      	push	{r4, lr}
	prov_clear_tx();
 800ff46:	f7ff fdf3 	bl	800fb30 <prov_clear_tx>
	if (prov->link_close) {
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <reset_link+0x50>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	b10b      	cbz	r3, 800ff56 <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
 800ff52:	2001      	movs	r0, #1
 800ff54:	4798      	blx	r3
	memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
 800ff56:	4c10      	ldr	r4, [pc, #64]	; (800ff98 <reset_link+0x54>)
 800ff58:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	4620      	mov	r0, r4
 800ff60:	f7f0 fcba 	bl	80008d8 <memset>
	link.rx.prev_id = XACT_NVAL;
 800ff64:	23ff      	movs	r3, #255	; 0xff
 800ff66:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
 800ff6a:	f7f6 fc27 	bl	80067bc <bt_pub_key_get>
 800ff6e:	b118      	cbz	r0, 800ff78 <reset_link+0x34>
 800ff70:	2102      	movs	r1, #2
 800ff72:	4620      	mov	r0, r4
 800ff74:	f7ff fd4a 	bl	800fa0c <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
 800ff78:	f000 ffdc 	bl	8010f34 <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
 800ff7c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
 800ff80:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
 800ff84:	b12b      	cbz	r3, 800ff92 <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
 800ff86:	2100      	movs	r1, #0
 800ff88:	4608      	mov	r0, r1
}
 800ff8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
 800ff8e:	f7fe bdc5 	b.w	800eb1c <bt_mesh_attention>
 800ff92:	bd10      	pop	{r4, pc}
 800ff94:	20001270 	.word	0x20001270
 800ff98:	20001100 	.word	0x20001100

0800ff9c <gen_prov_ctl>:
{
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
 800ffa0:	7940      	ldrb	r0, [r0, #5]
 800ffa2:	0880      	lsrs	r0, r0, #2
 800ffa4:	2801      	cmp	r0, #1
{
 800ffa6:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
 800ffa8:	d02e      	beq.n	8010008 <gen_prov_ctl+0x6c>
 800ffaa:	d302      	bcc.n	800ffb2 <gen_prov_ctl+0x16>
 800ffac:	2802      	cmp	r0, #2
 800ffae:	d030      	beq.n	8010012 <gen_prov_ctl+0x76>
 800ffb0:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len < 16) {
 800ffb2:	888b      	ldrh	r3, [r1, #4]
 800ffb4:	2b0f      	cmp	r3, #15
 800ffb6:	d933      	bls.n	8010020 <gen_prov_ctl+0x84>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
 800ffb8:	2002      	movs	r0, #2
 800ffba:	f7ff fd89 	bl	800fad0 <atomic_test_bit.constprop.24>
 800ffbe:	bb78      	cbnz	r0, 8010020 <gen_prov_ctl+0x84>
	if (memcmp(buf->data, prov->uuid, 16)) {
 800ffc0:	4d18      	ldr	r5, [pc, #96]	; (8010024 <gen_prov_ctl+0x88>)
 800ffc2:	6830      	ldr	r0, [r6, #0]
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	2210      	movs	r2, #16
 800ffc8:	6819      	ldr	r1, [r3, #0]
 800ffca:	f7f0 fc44 	bl	8000856 <memcmp>
 800ffce:	bb38      	cbnz	r0, 8010020 <gen_prov_ctl+0x84>
	if (prov->link_open) {
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	69db      	ldr	r3, [r3, #28]
 800ffd4:	b10b      	cbz	r3, 800ffda <gen_prov_ctl+0x3e>
		prov->link_open(BT_MESH_PROV_ADV);
 800ffd6:	2001      	movs	r0, #1
 800ffd8:	4798      	blx	r3
	link.id = rx->link_id;
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	4c12      	ldr	r4, [pc, #72]	; (8010028 <gen_prov_ctl+0x8c>)
 800ffde:	2104      	movs	r1, #4
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800ffe6:	f7ff fd11 	bl	800fa0c <atomic_or>
	net_buf_simple_init(link.rx.buf, 0);
 800ffea:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len = 0;
 800ffee:	2500      	movs	r5, #0
	buf->data = buf->__buf + reserve_head;
 800fff0:	f103 0208 	add.w	r2, r3, #8
 800fff4:	601a      	str	r2, [r3, #0]
	buf->len = 0;
 800fff6:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
 800fff8:	462a      	mov	r2, r5
 800fffa:	4629      	mov	r1, r5
 800fffc:	2001      	movs	r0, #1
 800fffe:	f7ff fdaf 	bl	800fb60 <bearer_ctl_send>
	link.expect = PROV_INVITE;
 8010002:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8010006:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 8010008:	2002      	movs	r0, #2
}
 801000a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 801000e:	f7ff bd5f 	b.w	800fad0 <atomic_test_bit.constprop.24>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 8010012:	f7ff fd5d 	bl	800fad0 <atomic_test_bit.constprop.24>
 8010016:	b118      	cbz	r0, 8010020 <gen_prov_ctl+0x84>
}
 8010018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
 801001c:	f7ff bf92 	b.w	800ff44 <reset_link>
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	bf00      	nop
 8010024:	20001270 	.word	0x20001270
 8010028:	20001100 	.word	0x20001100

0801002c <prov_retransmit>:
{
 801002c:	b570      	push	{r4, r5, r6, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 801002e:	2002      	movs	r0, #2
 8010030:	f7ff fd4e 	bl	800fad0 <atomic_test_bit.constprop.24>
 8010034:	b378      	cbz	r0, 8010096 <prov_retransmit+0x6a>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
 8010036:	4c18      	ldr	r4, [pc, #96]	; (8010098 <prov_retransmit+0x6c>)
 8010038:	f001 ff3c 	bl	8011eb4 <_impl_k_uptime_get>
 801003c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010040:	1a80      	subs	r0, r0, r2
 8010042:	f247 5230 	movw	r2, #30000	; 0x7530
 8010046:	eb61 0103 	sbc.w	r1, r1, r3
 801004a:	2300      	movs	r3, #0
 801004c:	4282      	cmp	r2, r0
 801004e:	418b      	sbcs	r3, r1
 8010050:	db1d      	blt.n	801008e <prov_retransmit+0x62>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 8010052:	4e12      	ldr	r6, [pc, #72]	; (801009c <prov_retransmit+0x70>)
 8010054:	340c      	adds	r4, #12
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
 8010056:	2501      	movs	r5, #1
		struct net_buf *buf = link.tx.buf[i];
 8010058:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
 801005c:	b1d8      	cbz	r0, 8010096 <prov_retransmit+0x6a>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 801005e:	89c3      	ldrh	r3, [r0, #14]
 8010060:	4403      	add	r3, r0
 8010062:	3313      	adds	r3, #19
 8010064:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	7a1a      	ldrb	r2, [r3, #8]
 801006c:	f012 0204 	ands.w	r2, r2, #4
 8010070:	d106      	bne.n	8010080 <prov_retransmit+0x54>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 8010072:	2d03      	cmp	r5, #3
 8010074:	d008      	beq.n	8010088 <prov_retransmit+0x5c>
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	b133      	cbz	r3, 8010088 <prov_retransmit+0x5c>
			bt_mesh_adv_send(buf, NULL, NULL);
 801007a:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 801007c:	f7f9 f950 	bl	8009320 <bt_mesh_adv_send>
 8010080:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 8010082:	2d04      	cmp	r5, #4
 8010084:	d1e8      	bne.n	8010058 <prov_retransmit+0x2c>
 8010086:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 8010088:	2200      	movs	r2, #0
 801008a:	4631      	mov	r1, r6
 801008c:	e7f6      	b.n	801007c <prov_retransmit+0x50>
}
 801008e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_link();
 8010092:	f7ff bf57 	b.w	800ff44 <reset_link>
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	20001230 	.word	0x20001230
 801009c:	20006128 	.word	0x20006128

080100a0 <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
 80100a0:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
 80100a2:	4d12      	ldr	r5, [pc, #72]	; (80100ec <bt_mesh_pb_gatt_recv+0x4c>)
 80100a4:	686b      	ldr	r3, [r5, #4]
 80100a6:	4283      	cmp	r3, r0
{
 80100a8:	460c      	mov	r4, r1
	if (link.conn != conn) {
 80100aa:	d11c      	bne.n	80100e6 <bt_mesh_pb_gatt_recv+0x46>
		BT_WARN("Data for unexpected connection");
		return -ENOTCONN;
	}

	if (buf->len < 1) {
 80100ac:	888b      	ldrh	r3, [r1, #4]
 80100ae:	b913      	cbnz	r3, 80100b6 <bt_mesh_pb_gatt_recv+0x16>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
		return -EINVAL;
 80100b0:	f06f 0015 	mvn.w	r0, #21
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
	}

	type = net_buf_simple_pull_u8(buf);
 80100b6:	4608      	mov	r0, r1
 80100b8:	f001 fa97 	bl	80115ea <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
 80100bc:	2809      	cmp	r0, #9
 80100be:	d005      	beq.n	80100cc <bt_mesh_pb_gatt_recv+0x2c>
 80100c0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80100c4:	4283      	cmp	r3, r0
 80100c6:	d1f3      	bne.n	80100b0 <bt_mesh_pb_gatt_recv+0x10>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
		return -EINVAL;
	}

	if (type >= ARRAY_SIZE(prov_handlers)) {
 80100c8:	2809      	cmp	r0, #9
 80100ca:	d8f1      	bhi.n	80100b0 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
		return -EINVAL;
	}

	if (prov_handlers[type].len != buf->len) {
 80100cc:	4b08      	ldr	r3, [pc, #32]	; (80100f0 <bt_mesh_pb_gatt_recv+0x50>)
 80100ce:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80100d2:	8891      	ldrh	r1, [r2, #4]
 80100d4:	88a2      	ldrh	r2, [r4, #4]
 80100d6:	4291      	cmp	r1, r2
 80100d8:	d1ea      	bne.n	80100b0 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
		return -EINVAL;
	}

	prov_handlers[type].func(buf->data);
 80100da:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80100de:	6820      	ldr	r0, [r4, #0]
 80100e0:	4798      	blx	r3

	return 0;
 80100e2:	2000      	movs	r0, #0
 80100e4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
 80100e6:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	20001100 	.word	0x20001100
 80100f0:	08013c44 	.word	0x08013c44

080100f4 <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
 80100f4:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 80100f6:	4c0e      	ldr	r4, [pc, #56]	; (8010130 <bt_mesh_pb_gatt_open+0x3c>)
 80100f8:	4606      	mov	r6, r0
 80100fa:	2104      	movs	r1, #4
 80100fc:	4620      	mov	r0, r4
 80100fe:	f7ff fc85 	bl	800fa0c <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
 8010102:	f010 0504 	ands.w	r5, r0, #4
 8010106:	d10d      	bne.n	8010124 <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
 8010108:	4630      	mov	r0, r6
 801010a:	f7f6 ff49 	bl	8006fa0 <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
 801010e:	4b09      	ldr	r3, [pc, #36]	; (8010134 <bt_mesh_pb_gatt_open+0x40>)
	link.expect = PROV_INVITE;
 8010110:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	if (prov->link_open) {
 8010114:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
 8010116:	6060      	str	r0, [r4, #4]
	if (prov->link_open) {
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	b133      	cbz	r3, 801012a <bt_mesh_pb_gatt_open+0x36>
		prov->link_open(BT_MESH_PROV_GATT);
 801011c:	2002      	movs	r0, #2
 801011e:	4798      	blx	r3
	}

	return 0;
 8010120:	4628      	mov	r0, r5
 8010122:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8010124:	f06f 000f 	mvn.w	r0, #15
 8010128:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 801012a:	4618      	mov	r0, r3
}
 801012c:	bd70      	pop	{r4, r5, r6, pc}
 801012e:	bf00      	nop
 8010130:	20001100 	.word	0x20001100
 8010134:	20001270 	.word	0x20001270

08010138 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
 8010138:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
 801013a:	4c14      	ldr	r4, [pc, #80]	; (801018c <bt_mesh_pb_gatt_close+0x54>)
 801013c:	6863      	ldr	r3, [r4, #4]
 801013e:	4283      	cmp	r3, r0
 8010140:	d121      	bne.n	8010186 <bt_mesh_pb_gatt_close+0x4e>
		BT_ERR("Not connected");
		return -ENOTCONN;
	}

	/* Disable Attention Timer if it was set */
	if (link.conf_inputs[0]) {
 8010142:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8010146:	b11b      	cbz	r3, 8010150 <bt_mesh_pb_gatt_close+0x18>
		bt_mesh_attention(NULL, 0);
 8010148:	2100      	movs	r1, #0
 801014a:	4608      	mov	r0, r1
 801014c:	f7fe fce6 	bl	800eb1c <bt_mesh_attention>
	}

	if (prov->link_close) {
 8010150:	4b0f      	ldr	r3, [pc, #60]	; (8010190 <bt_mesh_pb_gatt_close+0x58>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	b10b      	cbz	r3, 801015c <bt_mesh_pb_gatt_close+0x24>
		prov->link_close(BT_MESH_PROV_GATT);
 8010158:	2002      	movs	r0, #2
 801015a:	4798      	blx	r3
	}

	bt_conn_unref(link.conn);
 801015c:	6860      	ldr	r0, [r4, #4]
 801015e:	f7f6 ff26 	bl	8006fae <bt_conn_unref>

	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
 8010162:	2001      	movs	r0, #1
 8010164:	f7ff fcb4 	bl	800fad0 <atomic_test_bit.constprop.24>
	memset(&link, 0, sizeof(link));
 8010168:	f44f 72b8 	mov.w	r2, #368	; 0x170
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
 801016c:	4604      	mov	r4, r0
	memset(&link, 0, sizeof(link));
 801016e:	2100      	movs	r1, #0
 8010170:	4806      	ldr	r0, [pc, #24]	; (801018c <bt_mesh_pb_gatt_close+0x54>)
 8010172:	f7f0 fbb1 	bl	80008d8 <memset>

	if (pub_key) {
 8010176:	b124      	cbz	r4, 8010182 <bt_mesh_pb_gatt_close+0x4a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8010178:	2102      	movs	r1, #2
 801017a:	4804      	ldr	r0, [pc, #16]	; (801018c <bt_mesh_pb_gatt_close+0x54>)
 801017c:	f7ff fc46 	bl	800fa0c <atomic_or>
 8010180:	2400      	movs	r4, #0
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
 8010182:	4620      	mov	r0, r4
 8010184:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
 8010186:	f06f 0438 	mvn.w	r4, #56	; 0x38
 801018a:	e7fa      	b.n	8010182 <bt_mesh_pb_gatt_close+0x4a>
 801018c:	20001100 	.word	0x20001100
 8010190:	20001270 	.word	0x20001270

08010194 <close_link.constprop.21>:
static void close_link(u8_t err, u8_t reason)
 8010194:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (link.conn) {
 8010196:	4c16      	ldr	r4, [pc, #88]	; (80101f0 <close_link.constprop.21+0x5c>)
 8010198:	2302      	movs	r3, #2
 801019a:	f88d 3007 	strb.w	r3, [sp, #7]
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	b123      	cbz	r3, 80101ac <close_link.constprop.21+0x18>
		bt_mesh_pb_gatt_close(link.conn);
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff ffc8 	bl	8010138 <bt_mesh_pb_gatt_close>
}
 80101a8:	b003      	add	sp, #12
 80101aa:	bd30      	pop	{r4, r5, pc}
	if (err) {
 80101ac:	b108      	cbz	r0, 80101b2 <close_link.constprop.21+0x1e>
		prov_send_fail_msg(err);
 80101ae:	f7ff fdcb 	bl	800fd48 <prov_send_fail_msg>
	link.rx.seg = 0;
 80101b2:	2500      	movs	r5, #0
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
 80101b4:	2201      	movs	r2, #1
 80101b6:	f10d 0107 	add.w	r1, sp, #7
 80101ba:	2002      	movs	r0, #2
	link.rx.seg = 0;
 80101bc:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
 80101c0:	f7ff fcce 	bl	800fb60 <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80101c4:	f3bf 8f5b 	dmb	ish
 80101c8:	e854 3f00 	ldrex	r3, [r4]
 80101cc:	f023 0304 	bic.w	r3, r3, #4
 80101d0:	e844 3200 	strex	r2, r3, [r4]
 80101d4:	2a00      	cmp	r2, #0
 80101d6:	d1f7      	bne.n	80101c8 <close_link.constprop.21+0x34>
 80101d8:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
 80101dc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d0e1      	beq.n	80101a8 <close_link.constprop.21+0x14>
		bt_mesh_attention(NULL, 0);
 80101e4:	4629      	mov	r1, r5
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7fe fc98 	bl	800eb1c <bt_mesh_attention>
 80101ec:	e7dc      	b.n	80101a8 <close_link.constprop.21+0x14>
 80101ee:	bf00      	nop
 80101f0:	20001100 	.word	0x20001100

080101f4 <prov_invite>:
{
 80101f4:	b530      	push	{r4, r5, lr}
 80101f6:	4604      	mov	r4, r0
 80101f8:	b089      	sub	sp, #36	; 0x24
	struct net_buf_simple *buf = PROV_BUF(12);
 80101fa:	2100      	movs	r1, #0
 80101fc:	221c      	movs	r2, #28
 80101fe:	a801      	add	r0, sp, #4
 8010200:	f7f0 fb6a 	bl	80008d8 <memset>
	if (data[0]) {
 8010204:	7821      	ldrb	r1, [r4, #0]
	struct net_buf_simple *buf = PROV_BUF(12);
 8010206:	2311      	movs	r3, #17
 8010208:	f8ad 300a 	strh.w	r3, [sp, #10]
	if (data[0]) {
 801020c:	b111      	cbz	r1, 8010214 <prov_invite+0x20>
		bt_mesh_attention(NULL, data[0]);
 801020e:	2000      	movs	r0, #0
 8010210:	f7fe fc84 	bl	800eb1c <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
 8010214:	4d26      	ldr	r5, [pc, #152]	; (80102b0 <prov_invite+0xbc>)
 8010216:	7823      	ldrb	r3, [r4, #0]
 8010218:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	buf->len = 0;
 801021c:	2400      	movs	r4, #0
	buf->data = buf->__buf + reserve_head;
 801021e:	f10d 0311 	add.w	r3, sp, #17
	net_buf_simple_add_u8(buf, type);
 8010222:	2101      	movs	r1, #1
 8010224:	a801      	add	r0, sp, #4
 8010226:	9301      	str	r3, [sp, #4]
	buf->len = 0;
 8010228:	f8ad 4008 	strh.w	r4, [sp, #8]
 801022c:	f001 f979 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, bt_mesh_elem_count());
 8010230:	f7fc f924 	bl	800c47c <bt_mesh_elem_count>
 8010234:	4601      	mov	r1, r0
 8010236:	a801      	add	r0, sp, #4
 8010238:	f001 f973 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, BIT(PROV_ALG_P256));
 801023c:	2101      	movs	r1, #1
 801023e:	a801      	add	r0, sp, #4
 8010240:	f001 f986 	bl	8011550 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, 0x00);
 8010244:	4621      	mov	r1, r4
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
 8010246:	4c1b      	ldr	r4, [pc, #108]	; (80102b4 <prov_invite+0xc0>)
	net_buf_simple_add_u8(buf, 0x00);
 8010248:	a801      	add	r0, sp, #4
 801024a:	f001 f96a 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	6859      	ldr	r1, [r3, #4]
 8010252:	3100      	adds	r1, #0
 8010254:	bf18      	it	ne
 8010256:	2101      	movne	r1, #1
 8010258:	a801      	add	r0, sp, #4
 801025a:	f001 f962 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->output_size);
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	a801      	add	r0, sp, #4
 8010262:	7a59      	ldrb	r1, [r3, #9]
 8010264:	f001 f95d 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->output_actions);
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	a801      	add	r0, sp, #4
 801026c:	8959      	ldrh	r1, [r3, #10]
 801026e:	f001 f96f 	bl	8011550 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, prov->input_size);
 8010272:	6823      	ldr	r3, [r4, #0]
 8010274:	a801      	add	r0, sp, #4
 8010276:	7b19      	ldrb	r1, [r3, #12]
 8010278:	f001 f953 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->input_actions);
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	a801      	add	r0, sp, #4
 8010280:	89d9      	ldrh	r1, [r3, #14]
 8010282:	f001 f965 	bl	8011550 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf->data[1], 11);
 8010286:	9901      	ldr	r1, [sp, #4]
 8010288:	220b      	movs	r2, #11
 801028a:	3101      	adds	r1, #1
 801028c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8010290:	f7f0 faf6 	bl	8000880 <memcpy>
	if (prov_send(buf)) {
 8010294:	a801      	add	r0, sp, #4
 8010296:	f7ff fc93 	bl	800fbc0 <prov_send>
 801029a:	b120      	cbz	r0, 80102a6 <prov_invite+0xb2>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 801029c:	2005      	movs	r0, #5
 801029e:	f7ff ff79 	bl	8010194 <close_link.constprop.21>
}
 80102a2:	b009      	add	sp, #36	; 0x24
 80102a4:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
 80102a6:	2302      	movs	r3, #2
 80102a8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80102ac:	e7f9      	b.n	80102a2 <prov_invite+0xae>
 80102ae:	bf00      	nop
 80102b0:	20001100 	.word	0x20001100
 80102b4:	20001270 	.word	0x20001270

080102b8 <send_pub_key>:
{
 80102b8:	b530      	push	{r4, r5, lr}
 80102ba:	b095      	sub	sp, #84	; 0x54
	struct net_buf_simple *buf = PROV_BUF(65);
 80102bc:	2250      	movs	r2, #80	; 0x50
 80102be:	2100      	movs	r1, #0
 80102c0:	4668      	mov	r0, sp
 80102c2:	f7f0 fb09 	bl	80008d8 <memset>
 80102c6:	2346      	movs	r3, #70	; 0x46
 80102c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	key = bt_pub_key_get();
 80102cc:	f7f6 fa76 	bl	80067bc <bt_pub_key_get>
	if (!key) {
 80102d0:	4604      	mov	r4, r0
 80102d2:	b920      	cbnz	r0, 80102de <send_pub_key+0x26>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80102d4:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80102d6:	f7ff ff5d 	bl	8010194 <close_link.constprop.21>
}
 80102da:	b015      	add	sp, #84	; 0x54
 80102dc:	bd30      	pop	{r4, r5, pc}
	buf->data = buf->__buf + reserve_head;
 80102de:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
 80102e2:	2500      	movs	r5, #0
	net_buf_simple_add_u8(buf, type);
 80102e4:	2103      	movs	r1, #3
 80102e6:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
 80102e8:	9300      	str	r3, [sp, #0]
	buf->len = 0;
 80102ea:	f8ad 5004 	strh.w	r5, [sp, #4]
 80102ee:	f001 f918 	bl	8011522 <net_buf_simple_add_u8>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), key, 32);
 80102f2:	2120      	movs	r1, #32
 80102f4:	4668      	mov	r0, sp
 80102f6:	f001 f905 	bl	8011504 <net_buf_simple_add>
 80102fa:	4621      	mov	r1, r4
 80102fc:	f7ff fbcd 	bl	800fa9a <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), &key[32], 32);
 8010300:	2120      	movs	r1, #32
 8010302:	4668      	mov	r0, sp
 8010304:	f001 f8fe 	bl	8011504 <net_buf_simple_add>
 8010308:	f104 0120 	add.w	r1, r4, #32
 801030c:	f7ff fbc5 	bl	800fa9a <sys_memcpy_swap.constprop.19>
	memcpy(&link.conf_inputs[81], &buf->data[1], 64);
 8010310:	4c11      	ldr	r4, [pc, #68]	; (8010358 <send_pub_key+0xa0>)
 8010312:	9900      	ldr	r1, [sp, #0]
 8010314:	2240      	movs	r2, #64	; 0x40
 8010316:	3101      	adds	r1, #1
 8010318:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 801031c:	f7f0 fab0 	bl	8000880 <memcpy>
	prov_send(buf);
 8010320:	4668      	mov	r0, sp
 8010322:	f7ff fc4d 	bl	800fbc0 <prov_send>
	buf->data = buf->__buf + reserve_head;
 8010326:	a802      	add	r0, sp, #8
	sys_memcpy_swap(buf->data, &link.conf_inputs[17], 32);
 8010328:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 801032c:	9000      	str	r0, [sp, #0]
	buf->len = 0;
 801032e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010332:	f7ff fbb2 	bl	800fa9a <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(&buf->data[32], &link.conf_inputs[49], 32);
 8010336:	9800      	ldr	r0, [sp, #0]
 8010338:	f104 01ad 	add.w	r1, r4, #173	; 0xad
 801033c:	3020      	adds	r0, #32
 801033e:	f7ff fbac 	bl	800fa9a <sys_memcpy_swap.constprop.19>
	if (bt_dh_key_gen(buf->data, prov_dh_key_cb)) {
 8010342:	4906      	ldr	r1, [pc, #24]	; (801035c <send_pub_key+0xa4>)
 8010344:	9800      	ldr	r0, [sp, #0]
 8010346:	f7f6 fa47 	bl	80067d8 <bt_dh_key_gen>
 801034a:	b108      	cbz	r0, 8010350 <send_pub_key+0x98>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 801034c:	2007      	movs	r0, #7
 801034e:	e7c2      	b.n	80102d6 <send_pub_key+0x1e>
	link.expect = PROV_CONFIRM;
 8010350:	2305      	movs	r3, #5
 8010352:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010356:	e7c0      	b.n	80102da <send_pub_key+0x22>
 8010358:	20001100 	.word	0x20001100
 801035c:	080107fd 	.word	0x080107fd

08010360 <prov_pub_key>:
{
 8010360:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
 8010362:	4601      	mov	r1, r0
 8010364:	2240      	movs	r2, #64	; 0x40
 8010366:	4809      	ldr	r0, [pc, #36]	; (801038c <prov_pub_key+0x2c>)
 8010368:	f7f0 fa8a 	bl	8000880 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
 801036c:	2001      	movs	r0, #1
 801036e:	f7ff fbaf 	bl	800fad0 <atomic_test_bit.constprop.24>
 8010372:	b938      	cbnz	r0, 8010384 <prov_pub_key+0x24>
		prov_clear_tx();
 8010374:	f7ff fbdc 	bl	800fb30 <prov_clear_tx>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8010378:	2101      	movs	r1, #1
 801037a:	4805      	ldr	r0, [pc, #20]	; (8010390 <prov_pub_key+0x30>)
}
 801037c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010380:	f7ff bb44 	b.w	800fa0c <atomic_or>
 8010384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
 8010388:	f7ff bf96 	b.w	80102b8 <send_pub_key>
 801038c:	2000118d 	.word	0x2000118d
 8010390:	20001100 	.word	0x20001100

08010394 <pub_key_ready>:
{
 8010394:	b508      	push	{r3, lr}
	if (!pkey) {
 8010396:	b158      	cbz	r0, 80103b0 <pub_key_ready+0x1c>
 8010398:	2102      	movs	r1, #2
 801039a:	4806      	ldr	r0, [pc, #24]	; (80103b4 <pub_key_ready+0x20>)
 801039c:	f7ff fb36 	bl	800fa0c <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
 80103a0:	2000      	movs	r0, #0
 80103a2:	f7ff fcb1 	bl	800fd08 <atomic_test_and_clear_bit.constprop.23>
 80103a6:	b118      	cbz	r0, 80103b0 <pub_key_ready+0x1c>
}
 80103a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
 80103ac:	f7ff bf84 	b.w	80102b8 <send_pub_key>
 80103b0:	bd08      	pop	{r3, pc}
 80103b2:	bf00      	nop
 80103b4:	20001100 	.word	0x20001100

080103b8 <prov_random>:
{
 80103b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ba:	b097      	sub	sp, #92	; 0x5c
 80103bc:	4607      	mov	r7, r0
	struct net_buf_simple *rnd = PROV_BUF(16);
 80103be:	2220      	movs	r2, #32
 80103c0:	2100      	movs	r1, #0
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
 80103c2:	4c28      	ldr	r4, [pc, #160]	; (8010464 <prov_random+0xac>)
	struct net_buf_simple *rnd = PROV_BUF(16);
 80103c4:	a80e      	add	r0, sp, #56	; 0x38
 80103c6:	f7f0 fa87 	bl	80008d8 <memset>
 80103ca:	2315      	movs	r3, #21
 80103cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
 80103d0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80103d4:	466b      	mov	r3, sp
 80103d6:	4639      	mov	r1, r7
 80103d8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80103dc:	f7fb fed6 	bl	800c18c <bt_mesh_prov_conf>
 80103e0:	b120      	cbz	r0, 80103ec <prov_random+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80103e2:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80103e4:	f7ff fed6 	bl	8010194 <close_link.constprop.21>
}
 80103e8:	b017      	add	sp, #92	; 0x5c
 80103ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (memcmp(conf_verify, link.conf, 16)) {
 80103ec:	2210      	movs	r2, #16
 80103ee:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80103f2:	4668      	mov	r0, sp
 80103f4:	f7f0 fa2f 	bl	8000856 <memcmp>
 80103f8:	b108      	cbz	r0, 80103fe <prov_random+0x46>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
 80103fa:	2004      	movs	r0, #4
 80103fc:	e7f2      	b.n	80103e4 <prov_random+0x2c>
	buf->data = buf->__buf + reserve_head;
 80103fe:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	buf->len = 0;
 8010402:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
	net_buf_simple_add_u8(buf, type);
 8010406:	2106      	movs	r1, #6
 8010408:	a80e      	add	r0, sp, #56	; 0x38
	net_buf_simple_add_mem(rnd, link.rand, 16);
 801040a:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	buf->data = buf->__buf + reserve_head;
 801040e:	930e      	str	r3, [sp, #56]	; 0x38
	net_buf_simple_add_u8(buf, type);
 8010410:	f001 f887 	bl	8011522 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(rnd, link.rand, 16);
 8010414:	4631      	mov	r1, r6
 8010416:	2210      	movs	r2, #16
 8010418:	a80e      	add	r0, sp, #56	; 0x38
 801041a:	f001 f879 	bl	8011510 <net_buf_simple_add_mem>
	if (prov_send(rnd)) {
 801041e:	a80e      	add	r0, sp, #56	; 0x38
 8010420:	f7ff fbce 	bl	800fbc0 <prov_send>
 8010424:	4601      	mov	r1, r0
 8010426:	b108      	cbz	r0, 801042c <prov_random+0x74>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 8010428:	2005      	movs	r0, #5
 801042a:	e7db      	b.n	80103e4 <prov_random+0x2c>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
 801042c:	2510      	movs	r5, #16
 801042e:	462a      	mov	r2, r5
 8010430:	eb0d 0005 	add.w	r0, sp, r5
 8010434:	f7f0 fa50 	bl	80008d8 <memset>
	struct bt_mesh_sg sg[] = {
 8010438:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801043c:	9308      	str	r3, [sp, #32]
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
 801043e:	2203      	movs	r2, #3
 8010440:	f204 130d 	addw	r3, r4, #269	; 0x10d
 8010444:	a908      	add	r1, sp, #32
 8010446:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
 801044a:	9509      	str	r5, [sp, #36]	; 0x24
 801044c:	970a      	str	r7, [sp, #40]	; 0x28
 801044e:	950b      	str	r5, [sp, #44]	; 0x2c
 8010450:	960c      	str	r6, [sp, #48]	; 0x30
 8010452:	950d      	str	r5, [sp, #52]	; 0x34
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
 8010454:	f7fb fbcb 	bl	800bbee <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
 8010458:	2800      	cmp	r0, #0
 801045a:	d1c2      	bne.n	80103e2 <prov_random+0x2a>
	link.expect = PROV_DATA;
 801045c:	2307      	movs	r3, #7
 801045e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010462:	e7c1      	b.n	80103e8 <prov_random+0x30>
 8010464:	20001100 	.word	0x20001100

08010468 <prov_data>:
{
 8010468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
 801046c:	4c3d      	ldr	r4, [pc, #244]	; (8010564 <prov_data+0xfc>)
 801046e:	b09d      	sub	sp, #116	; 0x74
	struct net_buf_simple *msg = PROV_BUF(1);
 8010470:	2210      	movs	r2, #16
 8010472:	2100      	movs	r1, #0
{
 8010474:	4607      	mov	r7, r0
 8010476:	ae0d      	add	r6, sp, #52	; 0x34
	struct net_buf_simple *msg = PROV_BUF(1);
 8010478:	a809      	add	r0, sp, #36	; 0x24
 801047a:	f7f0 fa2d 	bl	80008d8 <memset>
 801047e:	2506      	movs	r5, #6
 8010480:	9600      	str	r6, [sp, #0]
 8010482:	4b39      	ldr	r3, [pc, #228]	; (8010568 <prov_data+0x100>)
 8010484:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 8010488:	f204 120d 	addw	r2, r4, #269	; 0x10d
 801048c:	2120      	movs	r1, #32
 801048e:	f104 0008 	add.w	r0, r4, #8
 8010492:	f7fb fbef 	bl	800bc74 <bt_mesh_k1>
	if (err) {
 8010496:	b108      	cbz	r0, 801049c <prov_data+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010498:	2007      	movs	r0, #7
 801049a:	e01b      	b.n	80104d4 <prov_data+0x6c>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
 801049c:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 80104a0:	f8cd 8000 	str.w	r8, [sp]
 80104a4:	4b31      	ldr	r3, [pc, #196]	; (801056c <prov_data+0x104>)
 80104a6:	f204 120d 	addw	r2, r4, #269	; 0x10d
 80104aa:	2120      	movs	r1, #32
 80104ac:	f104 0008 	add.w	r0, r4, #8
 80104b0:	f7fb fbe0 	bl	800bc74 <bt_mesh_k1>
	if (!err) {
 80104b4:	2800      	cmp	r0, #0
 80104b6:	d1ef      	bne.n	8010498 <prov_data+0x30>
		memcpy(nonce, tmp + 3, 13);
 80104b8:	220d      	movs	r2, #13
 80104ba:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 80104be:	a805      	add	r0, sp, #20
 80104c0:	f7f0 f9de 	bl	8000880 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
 80104c4:	4643      	mov	r3, r8
 80104c6:	463a      	mov	r2, r7
 80104c8:	a905      	add	r1, sp, #20
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7fb fe6b 	bl	800c1a6 <bt_mesh_prov_decrypt>
	if (err) {
 80104d0:	b118      	cbz	r0, 80104da <prov_data+0x72>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
 80104d2:	4628      	mov	r0, r5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80104d4:	f7ff fe5e 	bl	8010194 <close_link.constprop.21>
		return;
 80104d8:	e040      	b.n	801055c <prov_data+0xf4>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
 80104da:	af11      	add	r7, sp, #68	; 0x44
 80104dc:	9700      	str	r7, [sp, #0]
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <prov_data+0x108>)
 80104e0:	f204 120d 	addw	r2, r4, #269	; 0x10d
 80104e4:	2120      	movs	r1, #32
 80104e6:	f104 0008 	add.w	r0, r4, #8
 80104ea:	f7fb fbc3 	bl	800bc74 <bt_mesh_k1>
	if (err) {
 80104ee:	4683      	mov	fp, r0
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d1d1      	bne.n	8010498 <prov_data+0x30>
	return ((u16_t)src[0] << 8) | src[1];
 80104f4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80104f8:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
 80104fc:	f89d 5067 	ldrb.w	r5, [sp, #103]	; 0x67
 8010500:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8010504:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
	flags = pdu[18];
 8010508:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
	buf->len = 0;
 801050c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8010510:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 8010514:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 8010518:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 801051c:	f89d 506a 	ldrb.w	r5, [sp, #106]	; 0x6a
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 8010520:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8010524:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
 8010528:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
	net_buf_simple_add_u8(buf, type);
 801052c:	2108      	movs	r1, #8
 801052e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8010532:	a809      	add	r0, sp, #36	; 0x24
	buf->data = buf->__buf + reserve_head;
 8010534:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8010538:	9309      	str	r3, [sp, #36]	; 0x24
 801053a:	f000 fff2 	bl	8011522 <net_buf_simple_add_u8>
	prov_send(msg);
 801053e:	a809      	add	r0, sp, #36	; 0x24
 8010540:	f7ff fb3e 	bl	800fbc0 <prov_send>
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
 8010544:	9702      	str	r7, [sp, #8]
 8010546:	9601      	str	r6, [sp, #4]
 8010548:	f8cd b000 	str.w	fp, [sp]
 801054c:	462b      	mov	r3, r5
 801054e:	4652      	mov	r2, sl
 8010550:	4649      	mov	r1, r9
 8010552:	4640      	mov	r0, r8
	link.expect = 0;
 8010554:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
 8010558:	f7f8 fd12 	bl	8008f80 <bt_mesh_provision>
}
 801055c:	b01d      	add	sp, #116	; 0x74
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	bf00      	nop
 8010564:	20001100 	.word	0x20001100
 8010568:	08013c34 	.word	0x08013c34
 801056c:	08013c39 	.word	0x08013c39
 8010570:	08013c3e 	.word	0x08013c3e

08010574 <prov_msg_recv>:
{
 8010574:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
 8010576:	4c1e      	ldr	r4, [pc, #120]	; (80105f0 <prov_msg_recv+0x7c>)
 8010578:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
 801057c:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
 8010580:	6803      	ldr	r3, [r0, #0]
 8010582:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
 8010584:	f7fb fdaa 	bl	800c0dc <bt_mesh_fcs_check>
 8010588:	4626      	mov	r6, r4
 801058a:	b380      	cbz	r0, 80105ee <prov_msg_recv+0x7a>
	gen_prov_ack_send(link.rx.id);
 801058c:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
 8010590:	f7ff fa4e 	bl	800fa30 <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
 8010594:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8010598:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
 801059c:	2d09      	cmp	r5, #9
	link.rx.id = 0;
 801059e:	f04f 0300 	mov.w	r3, #0
 80105a2:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
 80105a6:	d00f      	beq.n	80105c8 <prov_msg_recv+0x54>
 80105a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80105ac:	42ab      	cmp	r3, r5
 80105ae:	d004      	beq.n	80105ba <prov_msg_recv+0x46>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
 80105b0:	2003      	movs	r0, #3
}
 80105b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
 80105b6:	f7ff bbc7 	b.w	800fd48 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
 80105ba:	2b09      	cmp	r3, #9
 80105bc:	d904      	bls.n	80105c8 <prov_msg_recv+0x54>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
 80105be:	2001      	movs	r0, #1
}
 80105c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80105c4:	f7ff bde6 	b.w	8010194 <close_link.constprop.21>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
 80105c8:	4a0a      	ldr	r2, [pc, #40]	; (80105f4 <prov_msg_recv+0x80>)
 80105ca:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
 80105ce:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 80105d2:	8888      	ldrh	r0, [r1, #4]
 80105d4:	889b      	ldrh	r3, [r3, #4]
 80105d6:	3301      	adds	r3, #1
 80105d8:	4283      	cmp	r3, r0
 80105da:	d001      	beq.n	80105e0 <prov_msg_recv+0x6c>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80105dc:	2002      	movs	r0, #2
 80105de:	e7ef      	b.n	80105c0 <prov_msg_recv+0x4c>
	prov_handlers[type].func(&link.rx.buf->data[1]);
 80105e0:	6808      	ldr	r0, [r1, #0]
 80105e2:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 80105e6:	3001      	adds	r0, #1
}
 80105e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
 80105ec:	4718      	bx	r3
 80105ee:	bd70      	pop	{r4, r5, r6, pc}
 80105f0:	20001100 	.word	0x20001100
 80105f4:	08013c44 	.word	0x08013c44

080105f8 <gen_prov_cont>:
{
 80105f8:	b570      	push	{r4, r5, r6, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
 80105fa:	4a26      	ldr	r2, [pc, #152]	; (8010694 <gen_prov_cont+0x9c>)
 80105fc:	7903      	ldrb	r3, [r0, #4]
 80105fe:	f892 6126 	ldrb.w	r6, [r2, #294]	; 0x126
 8010602:	4615      	mov	r5, r2
 8010604:	b946      	cbnz	r6, 8010618 <gen_prov_cont+0x20>
 8010606:	f892 2125 	ldrb.w	r2, [r2, #293]	; 0x125
 801060a:	4293      	cmp	r3, r2
 801060c:	d104      	bne.n	8010618 <gen_prov_cont+0x20>
		gen_prov_ack_send(rx->xact_id);
 801060e:	4618      	mov	r0, r3
}
 8010610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gen_prov_ack_send(rx->xact_id);
 8010614:	f7ff ba0c 	b.w	800fa30 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
 8010618:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
 801061c:	4293      	cmp	r3, r2
 801061e:	d137      	bne.n	8010690 <gen_prov_cont+0x98>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
 8010620:	7944      	ldrb	r4, [r0, #5]
	if (seg > link.rx.last_seg) {
 8010622:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
 8010626:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
 8010628:	429c      	cmp	r4, r3
 801062a:	d904      	bls.n	8010636 <gen_prov_cont+0x3e>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 801062c:	2002      	movs	r0, #2
}
 801062e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 8010632:	f7ff bdaf 	b.w	8010194 <close_link.constprop.21>
	} else if (seg == link.rx.last_seg) {
 8010636:	d10f      	bne.n	8010658 <gen_prov_cont+0x60>
		expect_len = (link.rx.buf->len - 20 -
 8010638:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
			      (23 * (link.rx.last_seg - 1)));
 801063c:	1e62      	subs	r2, r4, #1
		expect_len = (link.rx.buf->len - 20 -
 801063e:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 8010642:	791b      	ldrb	r3, [r3, #4]
 8010644:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010648:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801064c:	3b14      	subs	r3, #20
 801064e:	4413      	add	r3, r2
		if (expect_len != buf->len) {
 8010650:	888a      	ldrh	r2, [r1, #4]
 8010652:	b2db      	uxtb	r3, r3
 8010654:	4293      	cmp	r3, r2
 8010656:	d1e9      	bne.n	801062c <gen_prov_cont+0x34>
	if (!(link.rx.seg & BIT(seg))) {
 8010658:	40e6      	lsrs	r6, r4
 801065a:	07f3      	lsls	r3, r6, #31
 801065c:	d518      	bpl.n	8010690 <gen_prov_cont+0x98>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
 801065e:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
 8010662:	1e60      	subs	r0, r4, #1
 8010664:	2317      	movs	r3, #23
 8010666:	4343      	muls	r3, r0
 8010668:	6810      	ldr	r0, [r2, #0]
 801066a:	888a      	ldrh	r2, [r1, #4]
 801066c:	6809      	ldr	r1, [r1, #0]
 801066e:	3314      	adds	r3, #20
 8010670:	4418      	add	r0, r3
 8010672:	f7f0 f905 	bl	8000880 <memcpy>
	XACT_SEG_RECV(seg);
 8010676:	2301      	movs	r3, #1
 8010678:	40a3      	lsls	r3, r4
 801067a:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
 801067e:	ea24 0403 	bic.w	r4, r4, r3
 8010682:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
 8010686:	b91c      	cbnz	r4, 8010690 <gen_prov_cont+0x98>
}
 8010688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_msg_recv();
 801068c:	f7ff bf72 	b.w	8010574 <prov_msg_recv>
 8010690:	bd70      	pop	{r4, r5, r6, pc}
 8010692:	bf00      	nop
 8010694:	20001100 	.word	0x20001100

08010698 <gen_prov_start>:
{
 8010698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (link.rx.seg) {
 801069a:	4b24      	ldr	r3, [pc, #144]	; (801072c <gen_prov_start+0x94>)
 801069c:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
{
 80106a0:	4606      	mov	r6, r0
 80106a2:	460d      	mov	r5, r1
 80106a4:	461c      	mov	r4, r3
	if (link.rx.seg) {
 80106a6:	2a00      	cmp	r2, #0
 80106a8:	d13f      	bne.n	801072a <gen_prov_start+0x92>
	if (link.rx.prev_id == rx->xact_id) {
 80106aa:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80106ae:	7900      	ldrb	r0, [r0, #4]
 80106b0:	4298      	cmp	r0, r3
 80106b2:	d103      	bne.n	80106bc <gen_prov_start+0x24>
}
 80106b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_prov_ack_send(rx->xact_id);
 80106b8:	f7ff b9ba 	b.w	800fa30 <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
 80106bc:	4608      	mov	r0, r1
 80106be:	f8d4 712c 	ldr.w	r7, [r4, #300]	; 0x12c
 80106c2:	f000 ffa2 	bl	801160a <net_buf_simple_pull_be16>
 80106c6:	80b8      	strh	r0, [r7, #4]
	link.rx.id  = rx->xact_id;
 80106c8:	7933      	ldrb	r3, [r6, #4]
 80106ca:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
 80106ce:	4628      	mov	r0, r5
 80106d0:	f000 ff8b 	bl	80115ea <net_buf_simple_pull_u8>
 80106d4:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
 80106d8:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80106dc:	8882      	ldrh	r2, [r0, #4]
 80106de:	b922      	cbnz	r2, 80106ea <gen_prov_start+0x52>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80106e0:	2002      	movs	r0, #2
}
 80106e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80106e6:	f7ff bd55 	b.w	8010194 <close_link.constprop.21>
	if (link.rx.buf->len > link.rx.buf->size) {
 80106ea:	88c3      	ldrh	r3, [r0, #6]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d3f7      	bcc.n	80106e0 <gen_prov_start+0x48>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
 80106f0:	7973      	ldrb	r3, [r6, #5]
 80106f2:	089b      	lsrs	r3, r3, #2
 80106f4:	d001      	beq.n	80106fa <gen_prov_start+0x62>
 80106f6:	2a14      	cmp	r2, #20
 80106f8:	d9f2      	bls.n	80106e0 <gen_prov_start+0x48>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
 80106fa:	1c59      	adds	r1, r3, #1
 80106fc:	2201      	movs	r2, #1
 80106fe:	408a      	lsls	r2, r1
 8010700:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
 8010702:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
 8010706:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
 801070a:	88aa      	ldrh	r2, [r5, #4]
 801070c:	6829      	ldr	r1, [r5, #0]
 801070e:	6800      	ldr	r0, [r0, #0]
 8010710:	f7f0 f8b6 	bl	8000880 <memcpy>
	XACT_SEG_RECV(0);
 8010714:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8010718:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801071c:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	if (!link.rx.seg) {
 8010720:	b91b      	cbnz	r3, 801072a <gen_prov_start+0x92>
}
 8010722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
 8010726:	f7ff bf25 	b.w	8010574 <prov_msg_recv>
 801072a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801072c:	20001100 	.word	0x20001100

08010730 <send_confirm>:
{
 8010730:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 8010732:	4c24      	ldr	r4, [pc, #144]	; (80107c4 <send_confirm+0x94>)
{
 8010734:	b088      	sub	sp, #32
	struct net_buf_simple *cfm = PROV_BUF(17);
 8010736:	2100      	movs	r1, #0
 8010738:	2220      	movs	r2, #32
 801073a:	4668      	mov	r0, sp
 801073c:	f7f0 f8cc 	bl	80008d8 <memset>
 8010740:	2316      	movs	r3, #22
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 8010742:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 8010746:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	struct net_buf_simple *cfm = PROV_BUF(17);
 801074a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 801074e:	f7fb fcff 	bl	800c150 <bt_mesh_prov_conf_salt>
 8010752:	b120      	cbz	r0, 801075e <send_confirm+0x2e>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010754:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 8010756:	f7ff fd1d 	bl	8010194 <close_link.constprop.21>
}
 801075a:	b008      	add	sp, #32
 801075c:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
 801075e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8010762:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 8010766:	f104 0008 	add.w	r0, r4, #8
 801076a:	f7fb fd03 	bl	800c174 <bt_mesh_prov_conf_key>
 801076e:	2800      	cmp	r0, #0
 8010770:	d1f0      	bne.n	8010754 <send_confirm+0x24>
	if (bt_rand(link.rand, 16)) {
 8010772:	2110      	movs	r1, #16
 8010774:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8010778:	f7f6 f8be 	bl	80068f8 <bt_rand>
 801077c:	2800      	cmp	r0, #0
 801077e:	d1e9      	bne.n	8010754 <send_confirm+0x24>
 8010780:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
 8010784:	f8ad 0004 	strh.w	r0, [sp, #4]
	net_buf_simple_add_u8(buf, type);
 8010788:	2105      	movs	r1, #5
 801078a:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	f000 fec8 	bl	8011522 <net_buf_simple_add_u8>
			      net_buf_simple_add(cfm, 16))) {
 8010792:	2110      	movs	r1, #16
 8010794:	4668      	mov	r0, sp
 8010796:	f000 feb5 	bl	8011504 <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
 801079a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801079e:	4603      	mov	r3, r0
 80107a0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80107a4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80107a8:	f7fb fcf0 	bl	800c18c <bt_mesh_prov_conf>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d1d1      	bne.n	8010754 <send_confirm+0x24>
	if (prov_send(cfm)) {
 80107b0:	4668      	mov	r0, sp
 80107b2:	f7ff fa05 	bl	800fbc0 <prov_send>
 80107b6:	b108      	cbz	r0, 80107bc <send_confirm+0x8c>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80107b8:	2005      	movs	r0, #5
 80107ba:	e7cc      	b.n	8010756 <send_confirm+0x26>
	link.expect = PROV_RANDOM;
 80107bc:	2306      	movs	r3, #6
 80107be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80107c2:	e7ca      	b.n	801075a <send_confirm+0x2a>
 80107c4:	20001100 	.word	0x20001100

080107c8 <prov_confirm>:
{
 80107c8:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
 80107ca:	4601      	mov	r1, r0
 80107cc:	2210      	movs	r2, #16
 80107ce:	4809      	ldr	r0, [pc, #36]	; (80107f4 <prov_confirm+0x2c>)
 80107d0:	f7f0 f856 	bl	8000880 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
 80107d4:	2003      	movs	r0, #3
 80107d6:	f7ff f97b 	bl	800fad0 <atomic_test_bit.constprop.24>
 80107da:	b938      	cbnz	r0, 80107ec <prov_confirm+0x24>
		prov_clear_tx();
 80107dc:	f7ff f9a8 	bl	800fb30 <prov_clear_tx>
 80107e0:	2110      	movs	r1, #16
 80107e2:	4805      	ldr	r0, [pc, #20]	; (80107f8 <prov_confirm+0x30>)
}
 80107e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80107e8:	f7ff b910 	b.w	800fa0c <atomic_or>
 80107ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
 80107f0:	f7ff bf9e 	b.w	8010730 <send_confirm>
 80107f4:	2000112c 	.word	0x2000112c
 80107f8:	20001100 	.word	0x20001100

080107fc <prov_dh_key_cb>:
{
 80107fc:	b508      	push	{r3, lr}
	if (!key) {
 80107fe:	4601      	mov	r1, r0
 8010800:	b920      	cbnz	r0, 801080c <prov_dh_key_cb+0x10>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010802:	2007      	movs	r0, #7
}
 8010804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010808:	f7ff bcc4 	b.w	8010194 <close_link.constprop.21>
	sys_memcpy_swap(link.dhkey, key, 32);
 801080c:	480b      	ldr	r0, [pc, #44]	; (801083c <prov_dh_key_cb+0x40>)
 801080e:	f7ff f944 	bl	800fa9a <sys_memcpy_swap.constprop.19>
 8010812:	2108      	movs	r1, #8
 8010814:	480a      	ldr	r0, [pc, #40]	; (8010840 <prov_dh_key_cb+0x44>)
 8010816:	f7ff f8f9 	bl	800fa0c <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
 801081a:	2005      	movs	r0, #5
 801081c:	f7ff f958 	bl	800fad0 <atomic_test_bit.constprop.24>
 8010820:	b958      	cbnz	r0, 801083a <prov_dh_key_cb+0x3e>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
 8010822:	2006      	movs	r0, #6
 8010824:	f7ff f954 	bl	800fad0 <atomic_test_bit.constprop.24>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
 8010828:	b938      	cbnz	r0, 801083a <prov_dh_key_cb+0x3e>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
 801082a:	2004      	movs	r0, #4
 801082c:	f7ff fa6c 	bl	800fd08 <atomic_test_and_clear_bit.constprop.23>
 8010830:	b118      	cbz	r0, 801083a <prov_dh_key_cb+0x3e>
}
 8010832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
 8010836:	f7ff bf7b 	b.w	8010730 <send_confirm>
 801083a:	bd08      	pop	{r3, pc}
 801083c:	20001108 	.word	0x20001108
 8010840:	20001100 	.word	0x20001100

08010844 <bt_mesh_prov_get_uuid>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const u8_t *bt_mesh_prov_get_uuid(void)
{
	return prov->uuid;
 8010844:	4b01      	ldr	r3, [pc, #4]	; (801084c <bt_mesh_prov_get_uuid+0x8>)
 8010846:	681b      	ldr	r3, [r3, #0]
}
 8010848:	6818      	ldr	r0, [r3, #0]
 801084a:	4770      	bx	lr
 801084c:	20001270 	.word	0x20001270

08010850 <bt_prov_active>:

bool bt_prov_active(void)
{
 8010850:	b508      	push	{r3, lr}
	return atomic_test_bit(link.flags, LINK_ACTIVE);
 8010852:	2002      	movs	r0, #2
 8010854:	f7ff f93c 	bl	800fad0 <atomic_test_bit.constprop.24>
}
 8010858:	3000      	adds	r0, #0
 801085a:	bf18      	it	ne
 801085c:	2001      	movne	r0, #1
 801085e:	bd08      	pop	{r3, pc}

08010860 <bt_mesh_pb_adv_recv>:
{
 8010860:	b513      	push	{r0, r1, r4, lr}
 8010862:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
 8010864:	f7ff fff4 	bl	8010850 <bt_prov_active>
 8010868:	2800      	cmp	r0, #0
 801086a:	d039      	beq.n	80108e0 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
 801086c:	88a3      	ldrh	r3, [r4, #4]
 801086e:	2b05      	cmp	r3, #5
 8010870:	d93a      	bls.n	80108e8 <bt_mesh_pb_adv_recv+0x88>
	rx.link_id = net_buf_simple_pull_be32(buf);
 8010872:	4620      	mov	r0, r4
 8010874:	f000 fed4 	bl	8011620 <net_buf_simple_pull_be32>
 8010878:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
 801087a:	4620      	mov	r0, r4
 801087c:	f000 feb5 	bl	80115ea <net_buf_simple_pull_u8>
 8010880:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
 8010884:	4620      	mov	r0, r4
 8010886:	f000 feb0 	bl	80115ea <net_buf_simple_pull_u8>
 801088a:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
 801088e:	2002      	movs	r0, #2
 8010890:	f7ff f91e 	bl	800fad0 <atomic_test_bit.constprop.24>
 8010894:	b128      	cbz	r0, 80108a2 <bt_mesh_pb_adv_recv+0x42>
 8010896:	4b15      	ldr	r3, [pc, #84]	; (80108ec <bt_mesh_pb_adv_recv+0x8c>)
 8010898:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 801089c:	9b00      	ldr	r3, [sp, #0]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d122      	bne.n	80108e8 <bt_mesh_pb_adv_recv+0x88>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
 80108a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80108a6:	4912      	ldr	r1, [pc, #72]	; (80108f0 <bt_mesh_pb_adv_recv+0x90>)
 80108a8:	88a2      	ldrh	r2, [r4, #4]
 80108aa:	f003 0303 	and.w	r3, r3, #3
 80108ae:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80108b2:	795b      	ldrb	r3, [r3, #5]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d317      	bcc.n	80108e8 <bt_mesh_pb_adv_recv+0x88>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
 80108b8:	2002      	movs	r0, #2
 80108ba:	f7ff f909 	bl	800fad0 <atomic_test_bit.constprop.24>
 80108be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80108c2:	b928      	cbnz	r0, 80108d0 <bt_mesh_pb_adv_recv+0x70>
	    gen_prov[GPCF(rx->gpc)].require_link) {
 80108c4:	f003 0203 	and.w	r2, r3, #3
 80108c8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
 80108cc:	7912      	ldrb	r2, [r2, #4]
 80108ce:	b95a      	cbnz	r2, 80108e8 <bt_mesh_pb_adv_recv+0x88>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
 80108d0:	f003 0303 	and.w	r3, r3, #3
 80108d4:	4668      	mov	r0, sp
 80108d6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80108da:	4621      	mov	r1, r4
 80108dc:	4798      	blx	r3
 80108de:	e003      	b.n	80108e8 <bt_mesh_pb_adv_recv+0x88>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
 80108e0:	f7f8 fbd8 	bl	8009094 <bt_mesh_is_provisioned>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d0c1      	beq.n	801086c <bt_mesh_pb_adv_recv+0xc>
}
 80108e8:	b002      	add	sp, #8
 80108ea:	bd10      	pop	{r4, pc}
 80108ec:	20001100 	.word	0x20001100
 80108f0:	08013c14 	.word	0x08013c14

080108f4 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
 80108f4:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
 80108f6:	4605      	mov	r5, r0
 80108f8:	b1a8      	cbz	r0, 8010926 <bt_mesh_prov_init+0x32>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	err = bt_pub_key_gen(&pub_key_cb);
 80108fa:	480c      	ldr	r0, [pc, #48]	; (801092c <bt_mesh_prov_init+0x38>)
 80108fc:	f7f5 ff1c 	bl	8006738 <bt_pub_key_gen>
	if (err) {
 8010900:	4604      	mov	r4, r0
 8010902:	b970      	cbnz	r0, 8010922 <bt_mesh_prov_init+0x2e>
		BT_ERR("Failed to generate public key (%d)", err);
		return err;
	}

	prov = prov_info;
 8010904:	4b0a      	ldr	r3, [pc, #40]	; (8010930 <bt_mesh_prov_init+0x3c>)

#if defined(CONFIG_BT_MESH_PB_ADV)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
 8010906:	490b      	ldr	r1, [pc, #44]	; (8010934 <bt_mesh_prov_init+0x40>)
	prov = prov_info;
 8010908:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
 801090a:	4d0b      	ldr	r5, [pc, #44]	; (8010938 <bt_mesh_prov_init+0x44>)
 801090c:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8010910:	f001 fd84 	bl	801241c <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
 8010914:	23ff      	movs	r3, #255	; 0xff
 8010916:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125

#if defined(CONFIG_BT_MESH_PB_GATT)
	link.rx.buf = bt_mesh_proxy_get_buf();
 801091a:	f000 fb0b 	bl	8010f34 <bt_mesh_proxy_get_buf>
 801091e:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
		memcpy(uuid.val, prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	return 0;
}
 8010922:	4620      	mov	r0, r4
 8010924:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8010926:	f06f 0415 	mvn.w	r4, #21
 801092a:	e7fa      	b.n	8010922 <bt_mesh_prov_init+0x2e>
 801092c:	20006134 	.word	0x20006134
 8010930:	20001270 	.word	0x20001270
 8010934:	0801002d 	.word	0x0801002d
 8010938:	20001100 	.word	0x20001100

0801093c <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
 801093c:	4b02      	ldr	r3, [pc, #8]	; (8010948 <bt_mesh_prov_complete+0xc>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010942:	b103      	cbz	r3, 8010946 <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
 8010944:	4718      	bx	r3
 8010946:	4770      	bx	lr
 8010948:	20001270 	.word	0x20001270

0801094c <bt_mesh_prov_reset>:
	}
}

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
 801094c:	4b02      	ldr	r3, [pc, #8]	; (8010958 <bt_mesh_prov_reset+0xc>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010952:	b103      	cbz	r3, 8010956 <bt_mesh_prov_reset+0xa>
		prov->reset();
 8010954:	4718      	bx	r3
 8010956:	4770      	bx	lr
 8010958:	20001270 	.word	0x20001270

0801095c <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
 801095c:	4b03      	ldr	r3, [pc, #12]	; (801096c <find_client+0x10>)
 801095e:	681a      	ldr	r2, [r3, #0]
			return &clients[i];
		}
	}

	return NULL;
}
 8010960:	4282      	cmp	r2, r0
 8010962:	bf0c      	ite	eq
 8010964:	4618      	moveq	r0, r3
 8010966:	2000      	movne	r0, #0
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	200061b0 	.word	0x200061b0

08010970 <proxy_ccc_read>:
}

static ssize_t proxy_ccc_read(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr,
			      void *buf, u16_t len, u16_t offset)
{
 8010970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u16_t *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
 8010972:	2402      	movs	r4, #2
 8010974:	9402      	str	r4, [sp, #8]
 8010976:	68cc      	ldr	r4, [r1, #12]
 8010978:	9401      	str	r4, [sp, #4]
 801097a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801097e:	9400      	str	r4, [sp, #0]
 8010980:	f7f8 f9b0 	bl	8008ce4 <bt_gatt_attr_read>
				 sizeof(*value));
}
 8010984:	b004      	add	sp, #16
 8010986:	bd10      	pop	{r4, pc}

08010988 <prov_ccc_read>:
 8010988:	b410      	push	{r4}
 801098a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801098e:	9401      	str	r4, [sp, #4]
 8010990:	bc10      	pop	{r4}
 8010992:	f7ff bfed 	b.w	8010970 <proxy_ccc_read>
	...

08010998 <next_sub>:
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
{
 8010998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 801099c:	4f15      	ldr	r7, [pc, #84]	; (80109f4 <next_sub+0x5c>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 801099e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80109f8 <next_sub+0x60>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 80109a2:	2500      	movs	r5, #0
 80109a4:	463e      	mov	r6, r7
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 80109a6:	683c      	ldr	r4, [r7, #0]
 80109a8:	442c      	add	r4, r5
 80109aa:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80109ae:	23e4      	movs	r3, #228	; 0xe4
 80109b0:	fb03 8304 	mla	r3, r3, r4, r8
 80109b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109b8:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 80109bc:	4291      	cmp	r1, r2
 80109be:	d013      	beq.n	80109e8 <next_sub+0x50>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
 80109c0:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d003      	beq.n	80109d0 <next_sub+0x38>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 80109c8:	f7fd fe1e 	bl	800e608 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
 80109cc:	2801      	cmp	r0, #1
 80109ce:	d10b      	bne.n	80109e8 <next_sub+0x50>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 80109d0:	6833      	ldr	r3, [r6, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 80109d2:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 80109d4:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 80109d6:	fb00 8004 	mla	r0, r0, r4, r8
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 80109da:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 80109de:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 80109e2:	6033      	str	r3, [r6, #0]
			return sub;
 80109e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 80109e8:	3501      	adds	r5, #1
 80109ea:	2d02      	cmp	r5, #2
 80109ec:	d1db      	bne.n	80109a6 <next_sub+0xe>
		}
	}

	return NULL;
 80109ee:	2000      	movs	r0, #0
}
 80109f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f4:	2000127c 	.word	0x2000127c
 80109f8:	20005b88 	.word	0x20005b88

080109fc <proxy_disconnected>:
	conn_count--;
 80109fc:	4a0b      	ldr	r2, [pc, #44]	; (8010a2c <proxy_disconnected+0x30>)
 80109fe:	6813      	ldr	r3, [r2, #0]
{
 8010a00:	b510      	push	{r4, lr}
		if (client->conn == conn) {
 8010a02:	4c0b      	ldr	r4, [pc, #44]	; (8010a30 <proxy_disconnected+0x34>)
	conn_count--;
 8010a04:	3b01      	subs	r3, #1
 8010a06:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
 8010a08:	6823      	ldr	r3, [r4, #0]
 8010a0a:	4283      	cmp	r3, r0
 8010a0c:	d109      	bne.n	8010a22 <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
 8010a0e:	7aa3      	ldrb	r3, [r4, #10]
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d101      	bne.n	8010a18 <proxy_disconnected+0x1c>
				bt_mesh_pb_gatt_close(conn);
 8010a14:	f7ff fb90 	bl	8010138 <bt_mesh_pb_gatt_close>
			bt_conn_unref(client->conn);
 8010a18:	6820      	ldr	r0, [r4, #0]
 8010a1a:	f7f6 fac8 	bl	8006fae <bt_conn_unref>
			client->conn = NULL;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	6023      	str	r3, [r4, #0]
}
 8010a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
 8010a26:	f7f8 bc3f 	b.w	80092a8 <bt_mesh_adv_update>
 8010a2a:	bf00      	nop
 8010a2c:	20001274 	.word	0x20001274
 8010a30:	200061b0 	.word	0x200061b0

08010a34 <proxy_connected>:
	conn_count++;
 8010a34:	4a0f      	ldr	r2, [pc, #60]	; (8010a74 <proxy_connected+0x40>)
 8010a36:	6813      	ldr	r3, [r2, #0]
 8010a38:	3301      	adds	r3, #1
{
 8010a3a:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
 8010a3c:	2100      	movs	r1, #0
	conn_count++;
 8010a3e:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
 8010a40:	4a0d      	ldr	r2, [pc, #52]	; (8010a78 <proxy_connected+0x44>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
 8010a42:	428b      	cmp	r3, r1
{
 8010a44:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
 8010a46:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
 8010a48:	dc01      	bgt.n	8010a4e <proxy_connected+0x1a>
		bt_mesh_adv_update();
 8010a4a:	f7f8 fc2d 	bl	80092a8 <bt_mesh_adv_update>
		if (!clients[i].conn) {
 8010a4e:	4c0b      	ldr	r4, [pc, #44]	; (8010a7c <proxy_connected+0x48>)
 8010a50:	6825      	ldr	r5, [r4, #0]
 8010a52:	b96d      	cbnz	r5, 8010a70 <proxy_connected+0x3c>
	client->conn = bt_conn_ref(conn);
 8010a54:	4630      	mov	r0, r6
 8010a56:	f7f6 faa3 	bl	8006fa0 <bt_conn_ref>
	client->filter_type = NONE;
 8010a5a:	72a5      	strb	r5, [r4, #10]
	client->conn = bt_conn_ref(conn);
 8010a5c:	6020      	str	r0, [r4, #0]
	memset(client->filter, 0, sizeof(client->filter));
 8010a5e:	2206      	movs	r2, #6
 8010a60:	4629      	mov	r1, r5
 8010a62:	1d20      	adds	r0, r4, #4
 8010a64:	f7ef ff38 	bl	80008d8 <memset>
 8010a68:	f104 0320 	add.w	r3, r4, #32
 8010a6c:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
 8010a6e:	83a5      	strh	r5, [r4, #28]
 8010a70:	bd70      	pop	{r4, r5, r6, pc}
 8010a72:	bf00      	nop
 8010a74:	20001274 	.word	0x20001274
 8010a78:	20001283 	.word	0x20001283
 8010a7c:	200061b0 	.word	0x200061b0

08010a80 <filter_add>:
{
 8010a80:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8010a82:	b179      	cbz	r1, 8010aa4 <filter_add+0x24>
		if (client->filter[i] == addr) {
 8010a84:	8883      	ldrh	r3, [r0, #4]
 8010a86:	428b      	cmp	r3, r1
 8010a88:	d00c      	beq.n	8010aa4 <filter_add+0x24>
 8010a8a:	88c4      	ldrh	r4, [r0, #6]
 8010a8c:	428c      	cmp	r4, r1
 8010a8e:	d009      	beq.n	8010aa4 <filter_add+0x24>
 8010a90:	8902      	ldrh	r2, [r0, #8]
 8010a92:	428a      	cmp	r2, r1
 8010a94:	d006      	beq.n	8010aa4 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
 8010a96:	b113      	cbz	r3, 8010a9e <filter_add+0x1e>
 8010a98:	b12c      	cbz	r4, 8010aa6 <filter_add+0x26>
 8010a9a:	b91a      	cbnz	r2, 8010aa4 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010a9c:	2302      	movs	r3, #2
			client->filter[i] = addr;
 8010a9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010aa2:	8081      	strh	r1, [r0, #4]
 8010aa4:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e7f9      	b.n	8010a9e <filter_add+0x1e>
	...

08010aac <proxy_send>:
{
 8010aac:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
 8010aae:	4a07      	ldr	r2, [pc, #28]	; (8010acc <proxy_send+0x20>)
 8010ab0:	7812      	ldrb	r2, [r2, #0]
 8010ab2:	2a02      	cmp	r2, #2
 8010ab4:	d103      	bne.n	8010abe <proxy_send+0x12>
		return bt_gatt_notify(conn, &proxy_attrs[4], data, len);
 8010ab6:	460a      	mov	r2, r1
 8010ab8:	4905      	ldr	r1, [pc, #20]	; (8010ad0 <proxy_send+0x24>)
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
 8010aba:	f7f8 b9f5 	b.w	8008ea8 <bt_gatt_notify>
	if (gatt_svc == MESH_GATT_PROV) {
 8010abe:	2a01      	cmp	r2, #1
 8010ac0:	d102      	bne.n	8010ac8 <proxy_send+0x1c>
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
 8010ac2:	460a      	mov	r2, r1
 8010ac4:	4903      	ldr	r1, [pc, #12]	; (8010ad4 <proxy_send+0x28>)
 8010ac6:	e7f8      	b.n	8010aba <proxy_send+0xe>
}
 8010ac8:	2000      	movs	r0, #0
 8010aca:	4770      	bx	lr
 8010acc:	20001278 	.word	0x20001278
 8010ad0:	20006310 	.word	0x20006310
 8010ad4:	20006278 	.word	0x20006278

08010ad8 <proxy_segment_and_send>:
{
 8010ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010adc:	4688      	mov	r8, r1
 8010ade:	4614      	mov	r4, r2
 8010ae0:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
 8010ae2:	f7f8 fa01 	bl	8008ee8 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
 8010ae6:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
 8010ae8:	3803      	subs	r0, #3
 8010aea:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
 8010aec:	42ab      	cmp	r3, r5
 8010aee:	f008 013f 	and.w	r1, r8, #63	; 0x3f
 8010af2:	d209      	bcs.n	8010b08 <proxy_segment_and_send+0x30>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
 8010af4:	4620      	mov	r0, r4
 8010af6:	f000 fd67 	bl	80115c8 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
 8010afa:	88a2      	ldrh	r2, [r4, #4]
 8010afc:	6821      	ldr	r1, [r4, #0]
 8010afe:	4638      	mov	r0, r7
}
 8010b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
 8010b04:	f7ff bfd2 	b.w	8010aac <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
 8010b08:	b2ce      	uxtb	r6, r1
 8010b0a:	f046 0140 	orr.w	r1, r6, #64	; 0x40
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f000 fd5a 	bl	80115c8 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
 8010b14:	462a      	mov	r2, r5
 8010b16:	6821      	ldr	r1, [r4, #0]
 8010b18:	4638      	mov	r0, r7
 8010b1a:	f7ff ffc7 	bl	8010aac <proxy_send>
	net_buf_simple_pull(msg, mtu);
 8010b1e:	4629      	mov	r1, r5
 8010b20:	4620      	mov	r0, r4
 8010b22:	f000 fd5a 	bl	80115da <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
 8010b26:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
 8010b2a:	88a3      	ldrh	r3, [r4, #4]
 8010b2c:	b163      	cbz	r3, 8010b48 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
 8010b2e:	3301      	adds	r3, #1
 8010b30:	42ab      	cmp	r3, r5
 8010b32:	da0c      	bge.n	8010b4e <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
 8010b34:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f000 fd45 	bl	80115c8 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
 8010b3e:	88a2      	ldrh	r2, [r4, #4]
 8010b40:	6821      	ldr	r1, [r4, #0]
 8010b42:	4638      	mov	r0, r7
 8010b44:	f7ff ffb2 	bl	8010aac <proxy_send>
}
 8010b48:	2000      	movs	r0, #0
 8010b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
 8010b4e:	4631      	mov	r1, r6
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 fd39 	bl	80115c8 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
 8010b56:	6821      	ldr	r1, [r4, #0]
 8010b58:	462a      	mov	r2, r5
 8010b5a:	4638      	mov	r0, r7
 8010b5c:	f7ff ffa6 	bl	8010aac <proxy_send>
		net_buf_simple_pull(msg, mtu);
 8010b60:	4629      	mov	r1, r5
 8010b62:	4620      	mov	r0, r4
 8010b64:	f000 fd39 	bl	80115da <net_buf_simple_pull>
 8010b68:	e7df      	b.n	8010b2a <proxy_segment_and_send+0x52>

08010b6a <beacon_send>:
{
 8010b6a:	b530      	push	{r4, r5, lr}
 8010b6c:	b089      	sub	sp, #36	; 0x24
 8010b6e:	4604      	mov	r4, r0
 8010b70:	460d      	mov	r5, r1
	struct net_buf_simple *buf = NET_BUF_SIMPLE(23);
 8010b72:	2220      	movs	r2, #32
 8010b74:	2100      	movs	r1, #0
 8010b76:	4668      	mov	r0, sp
 8010b78:	f7ef feae 	bl	80008d8 <memset>
 8010b7c:	2317      	movs	r3, #23
 8010b7e:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_mesh_beacon_create(sub, buf);
 8010b82:	4669      	mov	r1, sp
	buf->data = buf->__buf + reserve_head;
 8010b84:	f10d 0309 	add.w	r3, sp, #9
 8010b88:	4628      	mov	r0, r5
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	f7f8 fc38 	bl	8009400 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, buf);
 8010b90:	466a      	mov	r2, sp
 8010b92:	2101      	movs	r1, #1
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7ff ff9f 	bl	8010ad8 <proxy_segment_and_send>
}
 8010b9a:	b009      	add	sp, #36	; 0x24
 8010b9c:	bd30      	pop	{r4, r5, pc}
	...

08010ba0 <proxy_send_beacons>:
{
 8010ba0:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010ba2:	4c0e      	ldr	r4, [pc, #56]	; (8010bdc <proxy_send_beacons+0x3c>)
 8010ba4:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8010ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bac:	429a      	cmp	r2, r3
{
 8010bae:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010bb0:	d005      	beq.n	8010bbe <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
 8010bb2:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
 8010bb6:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 8010bba:	f7ff ffd6 	bl	8010b6a <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010bbe:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8010bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d006      	beq.n	8010bd8 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
 8010bca:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8010bce:	4904      	ldr	r1, [pc, #16]	; (8010be0 <proxy_send_beacons+0x40>)
}
 8010bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
 8010bd4:	f7ff bfc9 	b.w	8010b6a <beacon_send>
 8010bd8:	bd38      	pop	{r3, r4, r5, pc}
 8010bda:	bf00      	nop
 8010bdc:	20005b88 	.word	0x20005b88
 8010be0:	20005e20 	.word	0x20005e20

08010be4 <send_filter_status>:
{
 8010be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
 8010be6:	f851 3b04 	ldr.w	r3, [r1], #4
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	2600      	movs	r6, #0
{
 8010bee:	4614      	mov	r4, r2
 8010bf0:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
 8010bf2:	9102      	str	r1, [sp, #8]
 8010bf4:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
 8010bf6:	f7fb fbdd 	bl	800c3b4 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
 8010bfa:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
 8010bfc:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
 8010c00:	809e      	strh	r6, [r3, #4]
 8010c02:	f104 0312 	add.w	r3, r4, #18
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
 8010c06:	2103      	movs	r1, #3
 8010c08:	6023      	str	r3, [r4, #0]
	buf->len = 0;
 8010c0a:	80a6      	strh	r6, [r4, #4]
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f000 fc88 	bl	8011522 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
 8010c12:	7aab      	ldrb	r3, [r5, #10]
 8010c14:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
 8010c16:	bf0c      	ite	eq
 8010c18:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
 8010c1a:	2101      	movne	r1, #1
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 fc80 	bl	8011522 <net_buf_simple_add_u8>
 8010c22:	1d2b      	adds	r3, r5, #4
 8010c24:	f105 020a 	add.w	r2, r5, #10
	for (filter_size = 0, i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010c28:	2100      	movs	r1, #0
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d10f      	bne.n	8010c4e <send_filter_status+0x6a>
	net_buf_simple_add_be16(buf, filter_size);
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 fc8e 	bl	8011550 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
 8010c34:	2201      	movs	r2, #1
 8010c36:	4621      	mov	r1, r4
 8010c38:	a801      	add	r0, sp, #4
 8010c3a:	f7f9 f9bf 	bl	8009fbc <bt_mesh_net_encode>
	if (err) {
 8010c3e:	b920      	cbnz	r0, 8010c4a <send_filter_status+0x66>
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
 8010c40:	4622      	mov	r2, r4
 8010c42:	2102      	movs	r1, #2
 8010c44:	6828      	ldr	r0, [r5, #0]
 8010c46:	f7ff ff47 	bl	8010ad8 <proxy_segment_and_send>
}
 8010c4a:	b004      	add	sp, #16
 8010c4c:	bd70      	pop	{r4, r5, r6, pc}
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
 8010c4e:	f833 0b02 	ldrh.w	r0, [r3], #2
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d0e9      	beq.n	8010c2a <send_filter_status+0x46>
			filter_size++;
 8010c56:	3101      	adds	r1, #1
 8010c58:	b289      	uxth	r1, r1
 8010c5a:	e7e6      	b.n	8010c2a <send_filter_status+0x46>

08010c5c <proxy_complete_pdu>:
{
 8010c5c:	b530      	push	{r4, r5, lr}
	switch (client->msg_type) {
 8010c5e:	7ac3      	ldrb	r3, [r0, #11]
{
 8010c60:	b091      	sub	sp, #68	; 0x44
 8010c62:	4604      	mov	r4, r0
	switch (client->msg_type) {
 8010c64:	2b03      	cmp	r3, #3
 8010c66:	d808      	bhi.n	8010c7a <proxy_complete_pdu+0x1e>
 8010c68:	e8df f003 	tbb	[pc, r3]
 8010c6c:	79120e02 	.word	0x79120e02
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
 8010c70:	2202      	movs	r2, #2
 8010c72:	2100      	movs	r1, #0
 8010c74:	3018      	adds	r0, #24
 8010c76:	f7f9 fc31 	bl	800a4dc <bt_mesh_net_recv>
	buf->data = buf->__buf + reserve_head;
 8010c7a:	f104 0320 	add.w	r3, r4, #32
 8010c7e:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	83a3      	strh	r3, [r4, #28]
}
 8010c84:	b011      	add	sp, #68	; 0x44
 8010c86:	bd30      	pop	{r4, r5, pc}
		bt_mesh_beacon_recv(&client->buf);
 8010c88:	3018      	adds	r0, #24
 8010c8a:	f7f8 fc8f 	bl	80095ac <bt_mesh_beacon_recv>
		break;
 8010c8e:	e7f4      	b.n	8010c7a <proxy_complete_pdu+0x1e>
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 8010c90:	2228      	movs	r2, #40	; 0x28
 8010c92:	2100      	movs	r1, #0
 8010c94:	a806      	add	r0, sp, #24
 8010c96:	f7ef fe1f 	bl	80008d8 <memset>
 8010c9a:	231d      	movs	r3, #29
 8010c9c:	f8ad 301e 	strh.w	r3, [sp, #30]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
 8010ca0:	aa01      	add	r2, sp, #4
 8010ca2:	ab06      	add	r3, sp, #24
 8010ca4:	2103      	movs	r1, #3
 8010ca6:	f104 0018 	add.w	r0, r4, #24
 8010caa:	f7f9 fadb 	bl	800a264 <bt_mesh_net_decode>
	if (err) {
 8010cae:	4605      	mov	r5, r0
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d1e2      	bne.n	8010c7a <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
 8010cb4:	2109      	movs	r1, #9
 8010cb6:	a806      	add	r0, sp, #24
 8010cb8:	f000 fc8f 	bl	80115da <net_buf_simple_pull>
	if (buf->len < 1) {
 8010cbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d0da      	beq.n	8010c7a <proxy_complete_pdu+0x1e>
	opcode = net_buf_simple_pull_u8(buf);
 8010cc4:	a806      	add	r0, sp, #24
 8010cc6:	f000 fc90 	bl	80115ea <net_buf_simple_pull_u8>
	switch (opcode) {
 8010cca:	2801      	cmp	r0, #1
 8010ccc:	d03e      	beq.n	8010d4c <proxy_complete_pdu+0xf0>
 8010cce:	d318      	bcc.n	8010d02 <proxy_complete_pdu+0xa6>
 8010cd0:	2802      	cmp	r0, #2
 8010cd2:	d1d2      	bne.n	8010c7a <proxy_complete_pdu+0x1e>
		while (buf->len >= 2) {
 8010cd4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d91c      	bls.n	8010d16 <proxy_complete_pdu+0xba>
			addr = net_buf_simple_pull_be16(buf);
 8010cdc:	a806      	add	r0, sp, #24
 8010cde:	f000 fc94 	bl	801160a <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d0f6      	beq.n	8010cd4 <proxy_complete_pdu+0x78>
		if (client->filter[i] == addr) {
 8010ce6:	88a3      	ldrh	r3, [r4, #4]
 8010ce8:	4283      	cmp	r3, r0
 8010cea:	d034      	beq.n	8010d56 <proxy_complete_pdu+0xfa>
 8010cec:	88e3      	ldrh	r3, [r4, #6]
 8010cee:	4283      	cmp	r3, r0
 8010cf0:	d033      	beq.n	8010d5a <proxy_complete_pdu+0xfe>
 8010cf2:	8923      	ldrh	r3, [r4, #8]
 8010cf4:	4283      	cmp	r3, r0
 8010cf6:	d1ed      	bne.n	8010cd4 <proxy_complete_pdu+0x78>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010cf8:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
 8010cfa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010cfe:	809d      	strh	r5, [r3, #4]
 8010d00:	e7e8      	b.n	8010cd4 <proxy_complete_pdu+0x78>
	if (buf->len < 1) {
 8010d02:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010d06:	b133      	cbz	r3, 8010d16 <proxy_complete_pdu+0xba>
	type = net_buf_simple_pull_u8(buf);
 8010d08:	a806      	add	r0, sp, #24
 8010d0a:	f000 fc6e 	bl	80115ea <net_buf_simple_pull_u8>
	switch (type) {
 8010d0e:	4601      	mov	r1, r0
 8010d10:	b138      	cbz	r0, 8010d22 <proxy_complete_pdu+0xc6>
 8010d12:	2801      	cmp	r0, #1
 8010d14:	d00c      	beq.n	8010d30 <proxy_complete_pdu+0xd4>
		send_filter_status(client, &rx, buf);
 8010d16:	aa06      	add	r2, sp, #24
 8010d18:	a901      	add	r1, sp, #4
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f7ff ff62 	bl	8010be4 <send_filter_status>
 8010d20:	e7ab      	b.n	8010c7a <proxy_complete_pdu+0x1e>
		memset(client->filter, 0, sizeof(client->filter));
 8010d22:	2206      	movs	r2, #6
 8010d24:	1d20      	adds	r0, r4, #4
 8010d26:	f7ef fdd7 	bl	80008d8 <memset>
		client->filter_type = WHITELIST;
 8010d2a:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
 8010d2c:	72a3      	strb	r3, [r4, #10]
 8010d2e:	e7f2      	b.n	8010d16 <proxy_complete_pdu+0xba>
		memset(client->filter, 0, sizeof(client->filter));
 8010d30:	2206      	movs	r2, #6
 8010d32:	4629      	mov	r1, r5
 8010d34:	1d20      	adds	r0, r4, #4
 8010d36:	f7ef fdcf 	bl	80008d8 <memset>
		client->filter_type = BLACKLIST;
 8010d3a:	2302      	movs	r3, #2
 8010d3c:	e7f6      	b.n	8010d2c <proxy_complete_pdu+0xd0>
			addr = net_buf_simple_pull_be16(buf);
 8010d3e:	a806      	add	r0, sp, #24
 8010d40:	f000 fc63 	bl	801160a <net_buf_simple_pull_be16>
			filter_add(client, addr);
 8010d44:	4601      	mov	r1, r0
 8010d46:	4620      	mov	r0, r4
 8010d48:	f7ff fe9a 	bl	8010a80 <filter_add>
		while (buf->len >= 2) {
 8010d4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d8f4      	bhi.n	8010d3e <proxy_complete_pdu+0xe2>
 8010d54:	e7df      	b.n	8010d16 <proxy_complete_pdu+0xba>
		if (client->filter[i] == addr) {
 8010d56:	2300      	movs	r3, #0
 8010d58:	e7cf      	b.n	8010cfa <proxy_complete_pdu+0x9e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e7cd      	b.n	8010cfa <proxy_complete_pdu+0x9e>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
 8010d5e:	f100 0118 	add.w	r1, r0, #24
 8010d62:	6800      	ldr	r0, [r0, #0]
 8010d64:	f7ff f99c 	bl	80100a0 <bt_mesh_pb_gatt_recv>
		break;
 8010d68:	e787      	b.n	8010c7a <proxy_complete_pdu+0x1e>

08010d6a <proxy_recv>:
{
 8010d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6e:	4616      	mov	r6, r2
 8010d70:	461d      	mov	r5, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
 8010d72:	f7ff fdf3 	bl	801095c <find_client>
	if (!client) {
 8010d76:	4604      	mov	r4, r0
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d04b      	beq.n	8010e14 <proxy_recv+0xaa>
	if (len < 1) {
 8010d7c:	b925      	cbnz	r5, 8010d88 <proxy_recv+0x1e>
		return -EINVAL;
 8010d7e:	f06f 0515 	mvn.w	r5, #21
}
 8010d82:	4628      	mov	r0, r5
 8010d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
 8010d88:	7832      	ldrb	r2, [r6, #0]
 8010d8a:	68c9      	ldr	r1, [r1, #12]
 8010d8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010d90:	3100      	adds	r1, #0
 8010d92:	f1a2 0303 	sub.w	r3, r2, #3
 8010d96:	bf18      	it	ne
 8010d98:	2101      	movne	r1, #1
 8010d9a:	425a      	negs	r2, r3
 8010d9c:	415a      	adcs	r2, r3
 8010d9e:	4291      	cmp	r1, r2
 8010da0:	d1ed      	bne.n	8010d7e <proxy_recv+0x14>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
 8010da2:	f100 0718 	add.w	r7, r0, #24
 8010da6:	4638      	mov	r0, r7
 8010da8:	f000 fc51 	bl	801164e <net_buf_simple_tailroom>
 8010dac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8010db0:	4580      	cmp	r8, r0
 8010db2:	d8e4      	bhi.n	8010d7e <proxy_recv+0x14>
	switch (PDU_SAR(data)) {
 8010db4:	7830      	ldrb	r0, [r6, #0]
 8010db6:	8ba3      	ldrh	r3, [r4, #28]
 8010db8:	0982      	lsrs	r2, r0, #6
 8010dba:	2a02      	cmp	r2, #2
 8010dbc:	d01a      	beq.n	8010df4 <proxy_recv+0x8a>
 8010dbe:	2a03      	cmp	r2, #3
 8010dc0:	d020      	beq.n	8010e04 <proxy_recv+0x9a>
 8010dc2:	2a01      	cmp	r2, #1
 8010dc4:	d00b      	beq.n	8010dde <proxy_recv+0x74>
		if (client->buf.len) {
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1d9      	bne.n	8010d7e <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
 8010dca:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
 8010dcc:	4642      	mov	r2, r8
 8010dce:	1c71      	adds	r1, r6, #1
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f000 fb9d 	bl	8011510 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f7ff ff40 	bl	8010c5c <proxy_complete_pdu>
		break;
 8010ddc:	e7d1      	b.n	8010d82 <proxy_recv+0x18>
		if (client->buf.len) {
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1cd      	bne.n	8010d7e <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
 8010de2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010de6:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
 8010de8:	4642      	mov	r2, r8
 8010dea:	1c71      	adds	r1, r6, #1
 8010dec:	4638      	mov	r0, r7
 8010dee:	f000 fb8f 	bl	8011510 <net_buf_simple_add_mem>
		break;
 8010df2:	e7c6      	b.n	8010d82 <proxy_recv+0x18>
		if (!client->buf.len) {
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0c2      	beq.n	8010d7e <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
 8010df8:	7ae3      	ldrb	r3, [r4, #11]
 8010dfa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010dfe:	4283      	cmp	r3, r0
 8010e00:	d0f2      	beq.n	8010de8 <proxy_recv+0x7e>
 8010e02:	e7bc      	b.n	8010d7e <proxy_recv+0x14>
		if (!client->buf.len) {
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d0ba      	beq.n	8010d7e <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
 8010e08:	7ae3      	ldrb	r3, [r4, #11]
 8010e0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010e0e:	4283      	cmp	r3, r0
 8010e10:	d0dc      	beq.n	8010dcc <proxy_recv+0x62>
 8010e12:	e7b4      	b.n	8010d7e <proxy_recv+0x14>
		return -ENOTCONN;
 8010e14:	f06f 0538 	mvn.w	r5, #56	; 0x38
 8010e18:	e7b3      	b.n	8010d82 <proxy_recv+0x18>

08010e1a <prov_ccc_write>:
	if (len != sizeof(*value)) {
 8010e1a:	2b02      	cmp	r3, #2
{
 8010e1c:	b570      	push	{r4, r5, r6, lr}
	u16_t *value = attr->user_data;
 8010e1e:	68c9      	ldr	r1, [r1, #12]
{
 8010e20:	4605      	mov	r5, r0
 8010e22:	461c      	mov	r4, r3
	if (len != sizeof(*value)) {
 8010e24:	d111      	bne.n	8010e4a <prov_ccc_write+0x30>
	return ((u16_t)src[1] << 8) | src[0];
 8010e26:	7856      	ldrb	r6, [r2, #1]
 8010e28:	7813      	ldrb	r3, [r2, #0]
 8010e2a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (*value != BT_GATT_CCC_NOTIFY) {
 8010e2e:	2b01      	cmp	r3, #1
	*value = sys_get_le16(buf);
 8010e30:	800b      	strh	r3, [r1, #0]
	if (*value != BT_GATT_CCC_NOTIFY) {
 8010e32:	d108      	bne.n	8010e46 <prov_ccc_write+0x2c>
	client = find_client(conn);
 8010e34:	f7ff fd92 	bl	801095c <find_client>
	if (client->filter_type == NONE) {
 8010e38:	7a83      	ldrb	r3, [r0, #10]
 8010e3a:	b923      	cbnz	r3, 8010e46 <prov_ccc_write+0x2c>
		client->filter_type = PROV;
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	7283      	strb	r3, [r0, #10]
		bt_mesh_pb_gatt_open(conn);
 8010e40:	4628      	mov	r0, r5
 8010e42:	f7ff f957 	bl	80100f4 <bt_mesh_pb_gatt_open>
}
 8010e46:	4620      	mov	r0, r4
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 8010e4a:	f06f 040c 	mvn.w	r4, #12
 8010e4e:	e7fa      	b.n	8010e46 <prov_ccc_write+0x2c>

08010e50 <proxy_ccc_write>:
	if (len != sizeof(value)) {
 8010e50:	2b02      	cmp	r3, #2
{
 8010e52:	b538      	push	{r3, r4, r5, lr}
	if (len != sizeof(value)) {
 8010e54:	d124      	bne.n	8010ea0 <proxy_ccc_write+0x50>
 8010e56:	7853      	ldrb	r3, [r2, #1]
 8010e58:	7815      	ldrb	r5, [r2, #0]
 8010e5a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (value != BT_GATT_CCC_NOTIFY) {
 8010e5e:	b22d      	sxth	r5, r5
 8010e60:	2d01      	cmp	r5, #1
 8010e62:	d001      	beq.n	8010e68 <proxy_ccc_write+0x18>
		return len;
 8010e64:	2002      	movs	r0, #2
 8010e66:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
 8010e68:	f7ff fd78 	bl	801095c <find_client>
	if (client->filter_type == NONE) {
 8010e6c:	7a83      	ldrb	r3, [r0, #10]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1f8      	bne.n	8010e64 <proxy_ccc_write+0x14>
		client->filter_type = WHITELIST;
 8010e72:	7285      	strb	r5, [r0, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8010e74:	f100 0314 	add.w	r3, r0, #20
 8010e78:	f3bf 8f5b 	dmb	ish
 8010e7c:	e853 2f00 	ldrex	r2, [r3]
 8010e80:	f042 0101 	orr.w	r1, r2, #1
 8010e84:	e843 1500 	strex	r5, r1, [r3]
 8010e88:	2d00      	cmp	r5, #0
 8010e8a:	d1f7      	bne.n	8010e7c <proxy_ccc_write+0x2c>
 8010e8c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8010e90:	07d3      	lsls	r3, r2, #31
 8010e92:	d4e7      	bmi.n	8010e64 <proxy_ccc_write+0x14>
		k_queue_append(&work_q->queue, work);
 8010e94:	f100 010c 	add.w	r1, r0, #12
 8010e98:	4803      	ldr	r0, [pc, #12]	; (8010ea8 <proxy_ccc_write+0x58>)
 8010e9a:	f000 fd04 	bl	80118a6 <k_queue_append>
 8010e9e:	e7e1      	b.n	8010e64 <proxy_ccc_write+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 8010ea0:	f06f 000c 	mvn.w	r0, #12
}
 8010ea4:	bd38      	pop	{r3, r4, r5, pc}
 8010ea6:	bf00      	nop
 8010ea8:	20001498 	.word	0x20001498

08010eac <bt_mesh_proxy_beacon_send>:
{
 8010eac:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8010eae:	4c0e      	ldr	r4, [pc, #56]	; (8010ee8 <bt_mesh_proxy_beacon_send+0x3c>)
{
 8010eb0:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 8010eb2:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
	if (!sub) {
 8010eb6:	b131      	cbz	r1, 8010ec6 <bt_mesh_proxy_beacon_send+0x1a>
		if (clients[i].conn) {
 8010eb8:	4b0c      	ldr	r3, [pc, #48]	; (8010eec <bt_mesh_proxy_beacon_send+0x40>)
 8010eba:	6818      	ldr	r0, [r3, #0]
 8010ebc:	b198      	cbz	r0, 8010ee6 <bt_mesh_proxy_beacon_send+0x3a>
}
 8010ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
 8010ec2:	f7ff be52 	b.w	8010b6a <beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8010ec6:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8010eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d002      	beq.n	8010ed8 <bt_mesh_proxy_beacon_send+0x2c>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f7ff ffea 	bl	8010eac <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8010ed8:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 8010edc:	4904      	ldr	r1, [pc, #16]	; (8010ef0 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8010ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d1e7      	bne.n	8010eb6 <bt_mesh_proxy_beacon_send+0xa>
 8010ee6:	bd38      	pop	{r3, r4, r5, pc}
 8010ee8:	20005b88 	.word	0x20005b88
 8010eec:	200061b0 	.word	0x200061b0
 8010ef0:	20005e20 	.word	0x20005e20

08010ef4 <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 8010ef4:	2301      	movs	r3, #1
{
 8010ef6:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 8010ef8:	f880 3020 	strb.w	r3, [r0, #32]
{
 8010efc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 8010efe:	f000 ffc5 	bl	8011e8c <_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
 8010f02:	4b07      	ldr	r3, [pc, #28]	; (8010f20 <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
 8010f04:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
 8010f06:	1ae4      	subs	r4, r4, r3
 8010f08:	10a4      	asrs	r4, r4, #2
 8010f0a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8010f0e:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
 8010f12:	eb04 4484 	add.w	r4, r4, r4, lsl #18
 8010f16:	4b03      	ldr	r3, [pc, #12]	; (8010f24 <bt_mesh_proxy_identity_start+0x30>)
 8010f18:	4264      	negs	r4, r4
 8010f1a:	601c      	str	r4, [r3, #0]
 8010f1c:	bd10      	pop	{r4, pc}
 8010f1e:	bf00      	nop
 8010f20:	20005d3c 	.word	0x20005d3c
 8010f24:	2000127c 	.word	0x2000127c

08010f28 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0;
 8010f2e:	6243      	str	r3, [r0, #36]	; 0x24
 8010f30:	4770      	bx	lr
	...

08010f34 <bt_mesh_proxy_get_buf>:
	buf->data = buf->__buf + reserve_head;
 8010f34:	4803      	ldr	r0, [pc, #12]	; (8010f44 <bt_mesh_proxy_get_buf+0x10>)
 8010f36:	f100 0320 	add.w	r3, r0, #32
 8010f3a:	6183      	str	r3, [r0, #24]
	buf->len = 0;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	8383      	strh	r3, [r0, #28]
}
 8010f40:	3018      	adds	r0, #24
 8010f42:	4770      	bx	lr
 8010f44:	200061b0 	.word	0x200061b0

08010f48 <bt_mesh_proxy_prov_enable>:
{
 8010f48:	b508      	push	{r3, lr}
	bt_gatt_service_register(&prov_svc);
 8010f4a:	4807      	ldr	r0, [pc, #28]	; (8010f68 <bt_mesh_proxy_prov_enable+0x20>)
 8010f4c:	f7f7 fe6c 	bl	8008c28 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROV;
 8010f50:	4a06      	ldr	r2, [pc, #24]	; (8010f6c <bt_mesh_proxy_prov_enable+0x24>)
 8010f52:	2301      	movs	r3, #1
 8010f54:	7013      	strb	r3, [r2, #0]
	prov_fast_adv = true;
 8010f56:	4a06      	ldr	r2, [pc, #24]	; (8010f70 <bt_mesh_proxy_prov_enable+0x28>)
 8010f58:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
 8010f5a:	4b06      	ldr	r3, [pc, #24]	; (8010f74 <bt_mesh_proxy_prov_enable+0x2c>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	b10a      	cbz	r2, 8010f64 <bt_mesh_proxy_prov_enable+0x1c>
			clients[i].filter_type = PROV;
 8010f60:	2203      	movs	r2, #3
 8010f62:	729a      	strb	r2, [r3, #10]
}
 8010f64:	2000      	movs	r0, #0
 8010f66:	bd08      	pop	{r3, pc}
 8010f68:	200062a0 	.word	0x200062a0
 8010f6c:	20001278 	.word	0x20001278
 8010f70:	20001282 	.word	0x20001282
 8010f74:	200061b0 	.word	0x200061b0

08010f78 <bt_mesh_proxy_prov_disable>:
{
 8010f78:	b538      	push	{r3, r4, r5, lr}
		if (client->conn && client->filter_type == PROV) {
 8010f7a:	4c08      	ldr	r4, [pc, #32]	; (8010f9c <bt_mesh_proxy_prov_disable+0x24>)
	bt_gatt_service_unregister(&prov_svc);
 8010f7c:	4808      	ldr	r0, [pc, #32]	; (8010fa0 <bt_mesh_proxy_prov_disable+0x28>)
 8010f7e:	f7f7 fe85 	bl	8008c8c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
 8010f82:	4b08      	ldr	r3, [pc, #32]	; (8010fa4 <bt_mesh_proxy_prov_disable+0x2c>)
		if (client->conn && client->filter_type == PROV) {
 8010f84:	6820      	ldr	r0, [r4, #0]
	gatt_svc = MESH_GATT_NONE;
 8010f86:	2500      	movs	r5, #0
 8010f88:	701d      	strb	r5, [r3, #0]
		if (client->conn && client->filter_type == PROV) {
 8010f8a:	b128      	cbz	r0, 8010f98 <bt_mesh_proxy_prov_disable+0x20>
 8010f8c:	7aa3      	ldrb	r3, [r4, #10]
 8010f8e:	2b03      	cmp	r3, #3
 8010f90:	d102      	bne.n	8010f98 <bt_mesh_proxy_prov_disable+0x20>
			bt_mesh_pb_gatt_close(client->conn);
 8010f92:	f7ff f8d1 	bl	8010138 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
 8010f96:	72a5      	strb	r5, [r4, #10]
}
 8010f98:	2000      	movs	r0, #0
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	200061b0 	.word	0x200061b0
 8010fa0:	200062a0 	.word	0x200062a0
 8010fa4:	20001278 	.word	0x20001278

08010fa8 <bt_mesh_proxy_gatt_enable>:
{
 8010fa8:	b508      	push	{r3, lr}
	bt_gatt_service_register(&proxy_svc);
 8010faa:	4806      	ldr	r0, [pc, #24]	; (8010fc4 <bt_mesh_proxy_gatt_enable+0x1c>)
 8010fac:	f7f7 fe3c 	bl	8008c28 <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
 8010fb0:	4b05      	ldr	r3, [pc, #20]	; (8010fc8 <bt_mesh_proxy_gatt_enable+0x20>)
 8010fb2:	2202      	movs	r2, #2
 8010fb4:	701a      	strb	r2, [r3, #0]
		if (clients[i].conn) {
 8010fb6:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <bt_mesh_proxy_gatt_enable+0x24>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	b10a      	cbz	r2, 8010fc0 <bt_mesh_proxy_gatt_enable+0x18>
			clients[i].filter_type = WHITELIST;
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	729a      	strb	r2, [r3, #10]
}
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	bd08      	pop	{r3, pc}
 8010fc4:	20006338 	.word	0x20006338
 8010fc8:	20001278 	.word	0x20001278
 8010fcc:	200061b0 	.word	0x200061b0

08010fd0 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
 8010fd0:	4b06      	ldr	r3, [pc, #24]	; (8010fec <bt_mesh_proxy_gatt_disconnect+0x1c>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	b140      	cbz	r0, 8010fe8 <bt_mesh_proxy_gatt_disconnect+0x18>
 8010fd6:	7a9a      	ldrb	r2, [r3, #10]
 8010fd8:	3a01      	subs	r2, #1
 8010fda:	2a01      	cmp	r2, #1
 8010fdc:	d804      	bhi.n	8010fe8 <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
 8010fde:	2200      	movs	r2, #0
 8010fe0:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
 8010fe2:	2113      	movs	r1, #19
 8010fe4:	f7f5 bfe6 	b.w	8006fb4 <bt_conn_disconnect>
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	200061b0 	.word	0x200061b0

08010ff0 <bt_mesh_proxy_gatt_disable>:
{
 8010ff0:	b508      	push	{r3, lr}
	bt_mesh_proxy_gatt_disconnect();
 8010ff2:	f7ff ffed 	bl	8010fd0 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
 8010ff6:	4803      	ldr	r0, [pc, #12]	; (8011004 <bt_mesh_proxy_gatt_disable+0x14>)
 8010ff8:	f7f7 fe48 	bl	8008c8c <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
 8010ffc:	4b02      	ldr	r3, [pc, #8]	; (8011008 <bt_mesh_proxy_gatt_disable+0x18>)
 8010ffe:	2000      	movs	r0, #0
 8011000:	7018      	strb	r0, [r3, #0]
}
 8011002:	bd08      	pop	{r3, pc}
 8011004:	20006338 	.word	0x20006338
 8011008:	20001278 	.word	0x20001278

0801100c <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
 801100c:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
 8011010:	2b01      	cmp	r3, #1
{
 8011012:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
 8011014:	d102      	bne.n	801101c <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
 8011016:	3818      	subs	r0, #24
 8011018:	f7ff bd32 	b.w	8010a80 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
 801101c:	2b02      	cmp	r3, #2
 801101e:	d111      	bne.n	8011044 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8011020:	b181      	cbz	r1, 8011044 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
 8011022:	f830 1c14 	ldrh.w	r1, [r0, #-20]
 8011026:	4291      	cmp	r1, r2
 8011028:	d00d      	beq.n	8011046 <bt_mesh_proxy_addr_add+0x3a>
 801102a:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801102e:	4291      	cmp	r1, r2
 8011030:	d00b      	beq.n	801104a <bt_mesh_proxy_addr_add+0x3e>
 8011032:	f830 1c10 	ldrh.w	r1, [r0, #-16]
 8011036:	4291      	cmp	r1, r2
 8011038:	d104      	bne.n	8011044 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
 801103a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801103e:	2300      	movs	r3, #0
 8011040:	f820 3c14 	strh.w	r3, [r0, #-20]
 8011044:	4770      	bx	lr
		if (client->filter[i] == addr) {
 8011046:	2300      	movs	r3, #0
 8011048:	e7f7      	b.n	801103a <bt_mesh_proxy_addr_add+0x2e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 801104a:	2301      	movs	r3, #1
 801104c:	e7f5      	b.n	801103a <bt_mesh_proxy_addr_add+0x2e>

0801104e <bt_mesh_proxy_send>:
{
 801104e:	b538      	push	{r3, r4, r5, lr}
 8011050:	4604      	mov	r4, r0
 8011052:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
 8011054:	f7ff fc82 	bl	801095c <find_client>
	if (!client) {
 8011058:	b188      	cbz	r0, 801107e <bt_mesh_proxy_send+0x30>
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
 801105a:	7a83      	ldrb	r3, [r0, #10]
 801105c:	1ed8      	subs	r0, r3, #3
 801105e:	4243      	negs	r3, r0
 8011060:	f1a1 0c03 	sub.w	ip, r1, #3
 8011064:	4143      	adcs	r3, r0
 8011066:	f1dc 0200 	rsbs	r2, ip, #0
 801106a:	eb42 020c 	adc.w	r2, r2, ip
 801106e:	4293      	cmp	r3, r2
 8011070:	d108      	bne.n	8011084 <bt_mesh_proxy_send+0x36>
	return proxy_segment_and_send(conn, type, msg);
 8011072:	462a      	mov	r2, r5
 8011074:	4620      	mov	r0, r4
}
 8011076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
 801107a:	f7ff bd2d 	b.w	8010ad8 <proxy_segment_and_send>
		return -ENOTCONN;
 801107e:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8011082:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8011084:	f06f 0015 	mvn.w	r0, #21
}
 8011088:	bd38      	pop	{r3, r4, r5, pc}
	...

0801108c <bt_mesh_proxy_relay>:
{
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	b08a      	sub	sp, #40	; 0x28
 8011090:	4605      	mov	r5, r0
 8011092:	460c      	mov	r4, r1
		struct net_buf_simple *msg = NET_BUF_SIMPLE(32);
 8011094:	2228      	movs	r2, #40	; 0x28
 8011096:	2100      	movs	r1, #0
 8011098:	4668      	mov	r0, sp
 801109a:	f7ef fc1d 	bl	80008d8 <memset>
 801109e:	2320      	movs	r3, #32
 80110a0:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (!client->conn) {
 80110a4:	4b16      	ldr	r3, [pc, #88]	; (8011100 <bt_mesh_proxy_relay+0x74>)
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	461e      	mov	r6, r3
 80110aa:	b160      	cbz	r0, 80110c6 <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == WHITELIST) {
 80110ac:	7a9a      	ldrb	r2, [r3, #10]
 80110ae:	2a01      	cmp	r2, #1
 80110b0:	d10b      	bne.n	80110ca <bt_mesh_proxy_relay+0x3e>
			if (client->filter[i] == addr) {
 80110b2:	889a      	ldrh	r2, [r3, #4]
 80110b4:	42a2      	cmp	r2, r4
 80110b6:	d013      	beq.n	80110e0 <bt_mesh_proxy_relay+0x54>
 80110b8:	88da      	ldrh	r2, [r3, #6]
 80110ba:	42a2      	cmp	r2, r4
 80110bc:	d010      	beq.n	80110e0 <bt_mesh_proxy_relay+0x54>
 80110be:	891b      	ldrh	r3, [r3, #8]
 80110c0:	42a3      	cmp	r3, r4
 80110c2:	d00d      	beq.n	80110e0 <bt_mesh_proxy_relay+0x54>
			if (client->filter[i] == addr) {
 80110c4:	2000      	movs	r0, #0
}
 80110c6:	b00a      	add	sp, #40	; 0x28
 80110c8:	bd70      	pop	{r4, r5, r6, pc}
	if (client->filter_type == BLACKLIST) {
 80110ca:	2a02      	cmp	r2, #2
 80110cc:	d1fa      	bne.n	80110c4 <bt_mesh_proxy_relay+0x38>
			if (client->filter[i] == addr) {
 80110ce:	889a      	ldrh	r2, [r3, #4]
 80110d0:	42a2      	cmp	r2, r4
 80110d2:	d0f7      	beq.n	80110c4 <bt_mesh_proxy_relay+0x38>
 80110d4:	88da      	ldrh	r2, [r3, #6]
 80110d6:	42a2      	cmp	r2, r4
 80110d8:	d0f4      	beq.n	80110c4 <bt_mesh_proxy_relay+0x38>
 80110da:	891b      	ldrh	r3, [r3, #8]
 80110dc:	42a3      	cmp	r3, r4
 80110de:	d0f1      	beq.n	80110c4 <bt_mesh_proxy_relay+0x38>
	buf->data = buf->__buf + reserve_head;
 80110e0:	f10d 0309 	add.w	r3, sp, #9
		net_buf_simple_add_mem(msg, buf->data, buf->len);
 80110e4:	88aa      	ldrh	r2, [r5, #4]
 80110e6:	6829      	ldr	r1, [r5, #0]
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	4668      	mov	r0, sp
 80110ec:	f000 fa10 	bl	8011510 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, msg);
 80110f0:	466a      	mov	r2, sp
 80110f2:	2100      	movs	r1, #0
 80110f4:	6830      	ldr	r0, [r6, #0]
 80110f6:	f7ff ffaa 	bl	801104e <bt_mesh_proxy_send>
		relayed = true;
 80110fa:	2001      	movs	r0, #1
	return relayed;
 80110fc:	e7e3      	b.n	80110c6 <bt_mesh_proxy_relay+0x3a>
 80110fe:	bf00      	nop
 8011100:	200061b0 	.word	0x200061b0

08011104 <bt_mesh_proxy_adv_start>:
	return remaining;
}
#endif /* GATT_PROXY */

s32_t bt_mesh_proxy_adv_start(void)
{
 8011104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
 8011108:	4b68      	ldr	r3, [pc, #416]	; (80112ac <bt_mesh_proxy_adv_start+0x1a8>)
 801110a:	781b      	ldrb	r3, [r3, #0]
{
 801110c:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
 801110e:	b92b      	cbnz	r3, 801111c <bt_mesh_proxy_adv_start+0x18>
		return K_FOREVER;
 8011110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
 8011114:	4620      	mov	r0, r4
 8011116:	b006      	add	sp, #24
 8011118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!bt_mesh_is_provisioned()) {
 801111c:	f7f7 ffba 	bl	8009094 <bt_mesh_is_provisioned>
 8011120:	b9b0      	cbnz	r0, 8011150 <bt_mesh_proxy_adv_start+0x4c>
		if (prov_fast_adv) {
 8011122:	4c63      	ldr	r4, [pc, #396]	; (80112b0 <bt_mesh_proxy_adv_start+0x1ac>)
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
 8011124:	4e63      	ldr	r6, [pc, #396]	; (80112b4 <bt_mesh_proxy_adv_start+0x1b0>)
		if (prov_fast_adv) {
 8011126:	7827      	ldrb	r7, [r4, #0]
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
 8011128:	4863      	ldr	r0, [pc, #396]	; (80112b8 <bt_mesh_proxy_adv_start+0x1b4>)
 801112a:	4b64      	ldr	r3, [pc, #400]	; (80112bc <bt_mesh_proxy_adv_start+0x1b8>)
 801112c:	4964      	ldr	r1, [pc, #400]	; (80112c0 <bt_mesh_proxy_adv_start+0x1bc>)
 801112e:	2501      	movs	r5, #1
 8011130:	9500      	str	r5, [sp, #0]
 8011132:	2203      	movs	r2, #3
 8011134:	2f00      	cmp	r7, #0
 8011136:	bf08      	it	eq
 8011138:	4630      	moveq	r0, r6
 801113a:	f7f5 f94d 	bl	80063d8 <bt_le_adv_start>
 801113e:	b938      	cbnz	r0, 8011150 <bt_mesh_proxy_adv_start+0x4c>
			proxy_adv_enabled = true;
 8011140:	4b60      	ldr	r3, [pc, #384]	; (80112c4 <bt_mesh_proxy_adv_start+0x1c0>)
 8011142:	701d      	strb	r5, [r3, #0]
			if (prov_fast_adv) {
 8011144:	7823      	ldrb	r3, [r4, #0]
 8011146:	b11b      	cbz	r3, 8011150 <bt_mesh_proxy_adv_start+0x4c>
				prov_fast_adv = false;
 8011148:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
 801114a:	f64e 2460 	movw	r4, #60000	; 0xea60
 801114e:	e7e1      	b.n	8011114 <bt_mesh_proxy_adv_start+0x10>
	if (bt_mesh_is_provisioned()) {
 8011150:	f7f7 ffa0 	bl	8009094 <bt_mesh_is_provisioned>
 8011154:	2800      	cmp	r0, #0
 8011156:	d0db      	beq.n	8011110 <bt_mesh_proxy_adv_start+0xc>
		return gatt_proxy_advertise(next_sub());
 8011158:	f7ff fc1e 	bl	8010998 <next_sub>
	proxy_svc_data[2] = ID_TYPE_NODE;
 801115c:	4f5a      	ldr	r7, [pc, #360]	; (80112c8 <bt_mesh_proxy_adv_start+0x1c4>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
 801115e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80112e0 <bt_mesh_proxy_adv_start+0x1dc>
		return gatt_proxy_advertise(next_sub());
 8011162:	4605      	mov	r5, r0
	err = bt_rand(proxy_svc_data + 11, 8);
 8011164:	f107 090b 	add.w	r9, r7, #11
	if (conn_count == CONFIG_BT_MAX_CONN) {
 8011168:	f8d8 3000 	ldr.w	r3, [r8]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d0cf      	beq.n	8011110 <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
 8011170:	2d00      	cmp	r5, #0
 8011172:	d0cd      	beq.n	8011110 <bt_mesh_proxy_adv_start+0xc>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
 8011174:	f895 6020 	ldrb.w	r6, [r5, #32]
 8011178:	2e01      	cmp	r6, #1
 801117a:	f040 808e 	bne.w	801129a <bt_mesh_proxy_adv_start+0x196>
 801117e:	f000 fe85 	bl	8011e8c <_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
 8011182:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
 8011184:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
 8011188:	1b04      	subs	r4, r0, r4
		if (active < NODE_ID_TIMEOUT) {
 801118a:	429c      	cmp	r4, r3
 801118c:	f200 8081 	bhi.w	8011292 <bt_mesh_proxy_adv_start+0x18e>
	err = bt_rand(proxy_svc_data + 11, 8);
 8011190:	2108      	movs	r1, #8
 8011192:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
 8011194:	70be      	strb	r6, [r7, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
 8011196:	f7f5 fbaf 	bl	80068f8 <bt_rand>
			remaining = NODE_ID_TIMEOUT - active;
 801119a:	f5c4 446a 	rsb	r4, r4, #59904	; 0xea00
 801119e:	3460      	adds	r4, #96	; 0x60
	if (err) {
 80111a0:	4601      	mov	r1, r0
 80111a2:	bb58      	cbnz	r0, 80111fc <bt_mesh_proxy_adv_start+0xf8>
	memset(tmp, 0, 6);
 80111a4:	2206      	movs	r2, #6
 80111a6:	a802      	add	r0, sp, #8
 80111a8:	f7ef fb96 	bl	80008d8 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
 80111ac:	2208      	movs	r2, #8
 80111ae:	4947      	ldr	r1, [pc, #284]	; (80112cc <bt_mesh_proxy_adv_start+0x1c8>)
 80111b0:	f10d 000e 	add.w	r0, sp, #14
 80111b4:	f7ef fb64 	bl	8000880 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
 80111b8:	f7fb f8fc 	bl	800c3b4 <bt_mesh_primary_addr>
	dst[0] = val >> 8;
 80111bc:	0a03      	lsrs	r3, r0, #8
 80111be:	f88d 3016 	strb.w	r3, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
 80111c2:	7fab      	ldrb	r3, [r5, #30]
	dst[1] = val;
 80111c4:	f88d 0017 	strb.w	r0, [sp, #23]
 80111c8:	2059      	movs	r0, #89	; 0x59
 80111ca:	fb03 0000 	mla	r0, r3, r0, r0
 80111ce:	aa02      	add	r2, sp, #8
 80111d0:	4611      	mov	r1, r2
 80111d2:	4428      	add	r0, r5
 80111d4:	f7f5 fba8 	bl	8006928 <bt_encrypt_be>
	if (err) {
 80111d8:	4682      	mov	sl, r0
 80111da:	b978      	cbnz	r0, 80111fc <bt_mesh_proxy_adv_start+0xf8>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
 80111dc:	2208      	movs	r2, #8
 80111de:	a904      	add	r1, sp, #16
 80111e0:	483b      	ldr	r0, [pc, #236]	; (80112d0 <bt_mesh_proxy_adv_start+0x1cc>)
 80111e2:	f7ef fb4d 	bl	8000880 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
 80111e6:	f8cd a000 	str.w	sl, [sp]
 80111ea:	4653      	mov	r3, sl
 80111ec:	2203      	movs	r2, #3
 80111ee:	4939      	ldr	r1, [pc, #228]	; (80112d4 <bt_mesh_proxy_adv_start+0x1d0>)
 80111f0:	4831      	ldr	r0, [pc, #196]	; (80112b8 <bt_mesh_proxy_adv_start+0x1b4>)
 80111f2:	f7f5 f8f1 	bl	80063d8 <bt_le_adv_start>
	if (err) {
 80111f6:	b908      	cbnz	r0, 80111fc <bt_mesh_proxy_adv_start+0xf8>
	proxy_adv_enabled = true;
 80111f8:	4b32      	ldr	r3, [pc, #200]	; (80112c4 <bt_mesh_proxy_adv_start+0x1c0>)
 80111fa:	701e      	strb	r6, [r3, #0]
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
 80111fc:	f895 6020 	ldrb.w	r6, [r5, #32]
 8011200:	b9d6      	cbnz	r6, 8011238 <bt_mesh_proxy_adv_start+0x134>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 8011202:	f7fd fa01 	bl	800e608 <bt_mesh_gatt_proxy_get>
 8011206:	2801      	cmp	r0, #1
 8011208:	4682      	mov	sl, r0
 801120a:	d149      	bne.n	80112a0 <bt_mesh_proxy_adv_start+0x19c>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 801120c:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
 801120e:	482e      	ldr	r0, [pc, #184]	; (80112c8 <bt_mesh_proxy_adv_start+0x1c4>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 8011210:	2359      	movs	r3, #89	; 0x59
 8011212:	fb03 5101 	mla	r1, r3, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
 8011216:	7086      	strb	r6, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 8011218:	2208      	movs	r2, #8
 801121a:	3151      	adds	r1, #81	; 0x51
 801121c:	3003      	adds	r0, #3
 801121e:	f7ef fb2f 	bl	8000880 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
 8011222:	9600      	str	r6, [sp, #0]
 8011224:	4633      	mov	r3, r6
 8011226:	2203      	movs	r2, #3
 8011228:	492b      	ldr	r1, [pc, #172]	; (80112d8 <bt_mesh_proxy_adv_start+0x1d4>)
 801122a:	4822      	ldr	r0, [pc, #136]	; (80112b4 <bt_mesh_proxy_adv_start+0x1b0>)
 801122c:	f7f5 f8d4 	bl	80063d8 <bt_le_adv_start>
	if (err) {
 8011230:	b910      	cbnz	r0, 8011238 <bt_mesh_proxy_adv_start+0x134>
	proxy_adv_enabled = true;
 8011232:	4b24      	ldr	r3, [pc, #144]	; (80112c4 <bt_mesh_proxy_adv_start+0x1c0>)
 8011234:	f883 a000 	strb.w	sl, [r3]
	s32_t remaining = K_FOREVER;
 8011238:	2600      	movs	r6, #0
 801123a:	4f28      	ldr	r7, [pc, #160]	; (80112dc <bt_mesh_proxy_adv_start+0x1d8>)
 801123c:	4635      	mov	r5, r6
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 801123e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8011242:	19f3      	adds	r3, r6, r7
 8011244:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
 8011248:	4542      	cmp	r2, r8
 801124a:	d008      	beq.n	801125e <bt_mesh_proxy_adv_start+0x15a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
 801124c:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8011250:	2b01      	cmp	r3, #1
 8011252:	d003      	beq.n	801125c <bt_mesh_proxy_adv_start+0x158>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 8011254:	f7fd f9d8 	bl	800e608 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
 8011258:	2801      	cmp	r0, #1
 801125a:	d100      	bne.n	801125e <bt_mesh_proxy_adv_start+0x15a>
			count++;
 801125c:	3501      	adds	r5, #1
 801125e:	36e4      	adds	r6, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8011260:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
 8011264:	d1ed      	bne.n	8011242 <bt_mesh_proxy_adv_start+0x13e>
	if (subnet_count > 1) {
 8011266:	2d01      	cmp	r5, #1
 8011268:	f77f af54 	ble.w	8011114 <bt_mesh_proxy_adv_start+0x10>
		max_timeout = NODE_ID_TIMEOUT / max(subnet_count, 6);
 801126c:	2d06      	cmp	r5, #6
 801126e:	bfb8      	it	lt
 8011270:	2506      	movlt	r5, #6
 8011272:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011276:	fb93 f3f5 	sdiv	r3, r3, r5
		max_timeout = max(max_timeout, K_SECONDS(1));
 801127a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801127e:	bfb8      	it	lt
 8011280:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
		if (remaining > max_timeout || remaining < 0) {
 8011284:	42a3      	cmp	r3, r4
 8011286:	db0f      	blt.n	80112a8 <bt_mesh_proxy_adv_start+0x1a4>
 8011288:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801128c:	bf08      	it	eq
 801128e:	461c      	moveq	r4, r3
 8011290:	e740      	b.n	8011114 <bt_mesh_proxy_adv_start+0x10>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 8011292:	2300      	movs	r3, #0
 8011294:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0;
 8011298:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
 801129a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801129e:	e7ad      	b.n	80111fc <bt_mesh_proxy_adv_start+0xf8>
			return gatt_proxy_advertise(next_sub());
 80112a0:	f7ff fb7a 	bl	8010998 <next_sub>
 80112a4:	4605      	mov	r5, r0
 80112a6:	e75f      	b.n	8011168 <bt_mesh_proxy_adv_start+0x64>
		if (remaining > max_timeout || remaining < 0) {
 80112a8:	461c      	mov	r4, r3
 80112aa:	e733      	b.n	8011114 <bt_mesh_proxy_adv_start+0x10>
 80112ac:	20001278 	.word	0x20001278
 80112b0:	20001282 	.word	0x20001282
 80112b4:	08013cf0 	.word	0x08013cf0
 80112b8:	08013c94 	.word	0x08013c94
 80112bc:	08013ce8 	.word	0x08013ce8
 80112c0:	08013cd0 	.word	0x08013cd0
 80112c4:	20001283 	.word	0x20001283
 80112c8:	20006344 	.word	0x20006344
 80112cc:	2000634f 	.word	0x2000634f
 80112d0:	20006347 	.word	0x20006347
 80112d4:	08013cb8 	.word	0x08013cb8
 80112d8:	08013ca0 	.word	0x08013ca0
 80112dc:	20005b88 	.word	0x20005b88
 80112e0:	20001274 	.word	0x20001274

080112e4 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
 80112e4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
 80112e6:	4c04      	ldr	r4, [pc, #16]	; (80112f8 <bt_mesh_proxy_adv_stop+0x14>)
 80112e8:	7823      	ldrb	r3, [r4, #0]
 80112ea:	b11b      	cbz	r3, 80112f4 <bt_mesh_proxy_adv_stop+0x10>
		return;
	}

	err = bt_le_adv_stop();
 80112ec:	f7f5 f910 	bl	8006510 <bt_le_adv_stop>
	if (err) {
 80112f0:	b900      	cbnz	r0, 80112f4 <bt_mesh_proxy_adv_stop+0x10>
		BT_ERR("Failed to stop advertising (err %d)", err);
	} else {
		proxy_adv_enabled = false;
 80112f2:	7020      	strb	r0, [r4, #0]
 80112f4:	bd10      	pop	{r4, pc}
 80112f6:	bf00      	nop
 80112f8:	20001283 	.word	0x20001283

080112fc <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
 80112fc:	b508      	push	{r3, lr}
	bt_conn_cb_register(&conn_callbacks);
 80112fe:	4806      	ldr	r0, [pc, #24]	; (8011318 <bt_mesh_proxy_init+0x1c>)
 8011300:	f7f5 fb9c 	bl	8006a3c <bt_conn_cb_register>

#if defined(CONFIG_BT_MESH_PB_GATT)
	memcpy(prov_svc_data + 2, bt_mesh_prov_get_uuid(), 16);
 8011304:	f7ff fa9e 	bl	8010844 <bt_mesh_prov_get_uuid>
 8011308:	2210      	movs	r2, #16
 801130a:	4601      	mov	r1, r0
 801130c:	4803      	ldr	r0, [pc, #12]	; (801131c <bt_mesh_proxy_init+0x20>)
 801130e:	f7ef fab7 	bl	8000880 <memcpy>
#endif

	return 0;
}
 8011312:	2000      	movs	r0, #0
 8011314:	bd08      	pop	{r3, pc}
 8011316:	bf00      	nop
 8011318:	20006214 	.word	0x20006214
 801131c:	200062ae 	.word	0x200062ae

08011320 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
 8011320:	4b01      	ldr	r3, [pc, #4]	; (8011328 <net_buf_pool_get+0x8>)
 8011322:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8011326:	4770      	bx	lr
 8011328:	2000649c 	.word	0x2000649c

0801132c <net_buf_id>:
#define UNINIT_BUF(pool, n) (struct net_buf *)(((u8_t *)(pool->__bufs)) + \
					       ((n) * BUF_SIZE(pool)))

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801132c:	7983      	ldrb	r3, [r0, #6]
	u8_t *pool_start = (u8_t *)pool->__bufs;
 801132e:	4a09      	ldr	r2, [pc, #36]	; (8011354 <net_buf_id+0x28>)
 8011330:	eb02 1243 	add.w	r2, r2, r3, lsl #5
	u8_t *buf_ptr = (u8_t *)buf;

	return (buf_ptr - pool_start) / BUF_SIZE(pool);
 8011334:	69d3      	ldr	r3, [r2, #28]
 8011336:	1ac0      	subs	r0, r0, r3
 8011338:	8a93      	ldrh	r3, [r2, #20]
 801133a:	8ad2      	ldrh	r2, [r2, #22]
 801133c:	3303      	adds	r3, #3
 801133e:	3203      	adds	r2, #3
 8011340:	f022 0203 	bic.w	r2, r2, #3
 8011344:	f023 0303 	bic.w	r3, r3, #3
 8011348:	4413      	add	r3, r2
 801134a:	3310      	adds	r3, #16
}
 801134c:	fbb0 f0f3 	udiv	r0, r0, r3
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop
 8011354:	2000649c 	.word	0x2000649c

08011358 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
 8011358:	b570      	push	{r4, r5, r6, lr}
 801135a:	4604      	mov	r4, r0
	__asm__ volatile(
 801135c:	f04f 0310 	mov.w	r3, #16
 8011360:	f3ef 8511 	mrs	r5, BASEPRI
 8011364:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 8011368:	8a43      	ldrh	r3, [r0, #18]
 801136a:	b363      	cbz	r3, 80113c6 <net_buf_alloc+0x6e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 801136c:	8a02      	ldrh	r2, [r0, #16]
 801136e:	429a      	cmp	r2, r3
 8011370:	d90f      	bls.n	8011392 <net_buf_alloc+0x3a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
 8011372:	2100      	movs	r1, #0
 8011374:	f000 fabb 	bl	80118ee <k_queue_get>
			if (buf) {
 8011378:	b158      	cbz	r0, 8011392 <net_buf_alloc+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801137a:	f385 8811 	msr	BASEPRI, r5
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
 801137e:	2301      	movs	r3, #1
 8011380:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
 8011382:	2300      	movs	r3, #0
 8011384:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
 8011386:	6003      	str	r3, [r0, #0]
	buf->len   = 0;
 8011388:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
 801138a:	f100 0310 	add.w	r3, r0, #16
 801138e:	6083      	str	r3, [r0, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
 8011390:	e01f      	b.n	80113d2 <net_buf_alloc+0x7a>
		uninit_count = pool->uninit_count--;
 8011392:	8a66      	ldrh	r6, [r4, #18]
 8011394:	1e73      	subs	r3, r6, #1
 8011396:	8263      	strh	r3, [r4, #18]
 8011398:	f385 8811 	msr	BASEPRI, r5
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
 801139c:	8aa1      	ldrh	r1, [r4, #20]
 801139e:	8ae0      	ldrh	r0, [r4, #22]
 80113a0:	8a23      	ldrh	r3, [r4, #16]
 80113a2:	3003      	adds	r0, #3
 80113a4:	1cca      	adds	r2, r1, #3
 80113a6:	f022 0203 	bic.w	r2, r2, #3
 80113aa:	f020 0003 	bic.w	r0, r0, #3
 80113ae:	4410      	add	r0, r2
 80113b0:	69e2      	ldr	r2, [r4, #28]
 80113b2:	1b9b      	subs	r3, r3, r6
 80113b4:	3010      	adds	r0, #16
 80113b6:	fb03 2000 	mla	r0, r3, r0, r2
	return pool - _net_buf_pool_list;
 80113ba:	4b06      	ldr	r3, [pc, #24]	; (80113d4 <net_buf_alloc+0x7c>)
	buf->size = pool->buf_size;
 80113bc:	81c1      	strh	r1, [r0, #14]
	return pool - _net_buf_pool_list;
 80113be:	1ae4      	subs	r4, r4, r3
 80113c0:	1164      	asrs	r4, r4, #5
	buf->pool_id = pool_id(pool);
 80113c2:	7184      	strb	r4, [r0, #6]
		goto success;
 80113c4:	e7db      	b.n	801137e <net_buf_alloc+0x26>
 80113c6:	f385 8811 	msr	BASEPRI, r5
	buf = k_lifo_get(&pool->free, timeout);
 80113ca:	f000 fa90 	bl	80118ee <k_queue_get>
	if (!buf) {
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d1d5      	bne.n	801137e <net_buf_alloc+0x26>
}
 80113d2:	bd70      	pop	{r4, r5, r6, pc}
 80113d4:	2000649c 	.word	0x2000649c

080113d8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
 80113dc:	f000 fa87 	bl	80118ee <k_queue_get>
	if (!buf) {
 80113e0:	4605      	mov	r5, r0
 80113e2:	b128      	cbz	r0, 80113f0 <net_buf_get+0x18>
 80113e4:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 80113e6:	7963      	ldrb	r3, [r4, #5]
 80113e8:	f013 0301 	ands.w	r3, r3, #1
 80113ec:	d102      	bne.n	80113f4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 80113ee:	6023      	str	r3, [r4, #0]

	return buf;
}
 80113f0:	4628      	mov	r0, r5
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 80113f4:	2100      	movs	r1, #0
 80113f6:	4630      	mov	r0, r6
 80113f8:	f000 fa79 	bl	80118ee <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
 80113fc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 80113fe:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
 8011400:	f023 0301 	bic.w	r3, r3, #1
 8011404:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 8011406:	4604      	mov	r4, r0
 8011408:	e7ed      	b.n	80113e6 <net_buf_get+0xe>

0801140a <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
 801140a:	f100 0310 	add.w	r3, r0, #16
 801140e:	4419      	add	r1, r3
 8011410:	6081      	str	r1, [r0, #8]
 8011412:	4770      	bx	lr

08011414 <net_buf_slist_put>:
}

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
 8011414:	b510      	push	{r4, lr}
	unsigned int key;

	NET_BUF_ASSERT(list);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 8011416:	460b      	mov	r3, r1
 8011418:	681c      	ldr	r4, [r3, #0]
 801141a:	b964      	cbnz	r4, 8011436 <net_buf_slist_put+0x22>
	__asm__ volatile(
 801141c:	f04f 0210 	mov.w	r2, #16
 8011420:	f3ef 8411 	mrs	r4, BASEPRI
 8011424:	f382 8811 	msr	BASEPRI, r2
	if (!list->tail) {
 8011428:	6842      	ldr	r2, [r0, #4]
 801142a:	b952      	cbnz	r2, 8011442 <net_buf_slist_put+0x2e>
		list->head = (sys_snode_t *)head;
 801142c:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
 801142e:	6043      	str	r3, [r0, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011430:	f384 8811 	msr	BASEPRI, r4
 8011434:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
 8011436:	795a      	ldrb	r2, [r3, #5]
 8011438:	f042 0201 	orr.w	r2, r2, #1
 801143c:	715a      	strb	r2, [r3, #5]
 801143e:	4623      	mov	r3, r4
 8011440:	e7ea      	b.n	8011418 <net_buf_slist_put+0x4>
		list->tail->next = (sys_snode_t *)head;
 8011442:	6011      	str	r1, [r2, #0]
 8011444:	e7f3      	b.n	801142e <net_buf_slist_put+0x1a>

08011446 <net_buf_slist_get>:
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
 8011446:	b570      	push	{r4, r5, r6, lr}
 8011448:	4603      	mov	r3, r0
	__asm__ volatile(
 801144a:	f04f 0210 	mov.w	r2, #16
 801144e:	f3ef 8111 	mrs	r1, BASEPRI
 8011452:	f382 8811 	msr	BASEPRI, r2
 8011456:	6800      	ldr	r0, [r0, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8011458:	b128      	cbz	r0, 8011466 <net_buf_slist_get+0x20>
	if (list->tail == node) {
 801145a:	685c      	ldr	r4, [r3, #4]
	list->head = node->next;
 801145c:	6802      	ldr	r2, [r0, #0]
 801145e:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
 8011460:	42a0      	cmp	r0, r4
		list->tail = list->head;
 8011462:	bf08      	it	eq
 8011464:	605a      	streq	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011466:	f381 8811 	msr	BASEPRI, r1

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
 801146a:	b128      	cbz	r0, 8011478 <net_buf_slist_get+0x32>
 801146c:	4602      	mov	r2, r0
		return NULL;
	}

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 801146e:	7951      	ldrb	r1, [r2, #5]
 8011470:	f011 0101 	ands.w	r1, r1, #1
 8011474:	d101      	bne.n	801147a <net_buf_slist_get+0x34>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 8011476:	6011      	str	r1, [r2, #0]

	return buf;
}
 8011478:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 801147a:	f04f 0110 	mov.w	r1, #16
 801147e:	f3ef 8511 	mrs	r5, BASEPRI
 8011482:	f381 8811 	msr	BASEPRI, r1
 8011486:	6819      	ldr	r1, [r3, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8011488:	b129      	cbz	r1, 8011496 <net_buf_slist_get+0x50>
	if (list->tail == node) {
 801148a:	685e      	ldr	r6, [r3, #4]
	list->head = node->next;
 801148c:	680c      	ldr	r4, [r1, #0]
 801148e:	601c      	str	r4, [r3, #0]
	if (list->tail == node) {
 8011490:	42b1      	cmp	r1, r6
		list->tail = list->head;
 8011492:	bf08      	it	eq
 8011494:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
 8011496:	6011      	str	r1, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011498:	f385 8811 	msr	BASEPRI, r5
		frag->flags &= ~NET_BUF_FRAGS;
 801149c:	7951      	ldrb	r1, [r2, #5]
 801149e:	f021 0101 	bic.w	r1, r1, #1
 80114a2:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 80114a4:	6812      	ldr	r2, [r2, #0]
 80114a6:	e7e2      	b.n	801146e <net_buf_slist_get+0x28>

080114a8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
 80114a8:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 80114aa:	460a      	mov	r2, r1
 80114ac:	6814      	ldr	r4, [r2, #0]
 80114ae:	b914      	cbnz	r4, 80114b6 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
 80114b0:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
 80114b2:	f000 ba00 	b.w	80118b6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
 80114b6:	7953      	ldrb	r3, [r2, #5]
 80114b8:	f043 0301 	orr.w	r3, r3, #1
 80114bc:	7153      	strb	r3, [r2, #5]
 80114be:	4622      	mov	r2, r4
 80114c0:	e7f4      	b.n	80114ac <net_buf_put+0x4>
	...

080114c4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 80114c4:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
 80114c6:	4c0c      	ldr	r4, [pc, #48]	; (80114f8 <net_buf_unref+0x34>)
	while (buf) {
 80114c8:	b900      	cbnz	r0, 80114cc <net_buf_unref+0x8>
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
		if (--buf->ref > 0) {
 80114cc:	7903      	ldrb	r3, [r0, #4]
		struct net_buf *frags = buf->frags;
 80114ce:	6805      	ldr	r5, [r0, #0]
		if (--buf->ref > 0) {
 80114d0:	3b01      	subs	r3, #1
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	7103      	strb	r3, [r0, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1f7      	bne.n	80114ca <net_buf_unref+0x6>
		buf->frags = NULL;
 80114da:	6003      	str	r3, [r0, #0]
		pool = net_buf_pool_get(buf->pool_id);
 80114dc:	7983      	ldrb	r3, [r0, #6]
		if (pool->destroy) {
 80114de:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80114e2:	6992      	ldr	r2, [r2, #24]
 80114e4:	b112      	cbz	r2, 80114ec <net_buf_unref+0x28>
			pool->destroy(buf);
 80114e6:	4790      	blx	r2
{
 80114e8:	4628      	mov	r0, r5
 80114ea:	e7ed      	b.n	80114c8 <net_buf_unref+0x4>
	k_lifo_put(&pool->free, buf);
 80114ec:	4601      	mov	r1, r0
 80114ee:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 80114f2:	f000 f9dc 	bl	80118ae <k_queue_prepend>
 80114f6:	e7f7      	b.n	80114e8 <net_buf_unref+0x24>
 80114f8:	2000649c 	.word	0x2000649c

080114fc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
 80114fc:	7903      	ldrb	r3, [r0, #4]
 80114fe:	3301      	adds	r3, #1
 8011500:	7103      	strb	r3, [r0, #4]
	return buf;
}
 8011502:	4770      	bx	lr

08011504 <net_buf_simple_add>:
	return buf->data + buf->len;
 8011504:	8883      	ldrh	r3, [r0, #4]
 8011506:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 8011508:	4419      	add	r1, r3
 801150a:	8081      	strh	r1, [r0, #4]
	return tail;
}
 801150c:	18d0      	adds	r0, r2, r3
 801150e:	4770      	bx	lr

08011510 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
 8011510:	b430      	push	{r4, r5}
 8011512:	8883      	ldrh	r3, [r0, #4]
 8011514:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
 8011516:	189d      	adds	r5, r3, r2
 8011518:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
 801151a:	18e0      	adds	r0, r4, r3
}
 801151c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
 801151e:	f7ef b9af 	b.w	8000880 <memcpy>

08011522 <net_buf_simple_add_u8>:
 8011522:	8883      	ldrh	r3, [r0, #4]
 8011524:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
 8011526:	b510      	push	{r4, lr}
	buf->len += len;
 8011528:	1c5c      	adds	r4, r3, #1
 801152a:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
 801152c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
 801152e:	18d0      	adds	r0, r2, r3
 8011530:	bd10      	pop	{r4, pc}

08011532 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
 8011532:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011534:	ab02      	add	r3, sp, #8
 8011536:	8884      	ldrh	r4, [r0, #4]
 8011538:	f823 1d02 	strh.w	r1, [r3, #-2]!
 801153c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
 801153e:	1ca2      	adds	r2, r4, #2
 8011540:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 8011542:	4619      	mov	r1, r3
 8011544:	2202      	movs	r2, #2
 8011546:	1928      	adds	r0, r5, r4
 8011548:	f7ef f99a 	bl	8000880 <memcpy>
}
 801154c:	b003      	add	sp, #12
 801154e:	bd30      	pop	{r4, r5, pc}

08011550 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
 8011550:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
 8011552:	020b      	lsls	r3, r1, #8
 8011554:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8011558:	a902      	add	r1, sp, #8
 801155a:	6804      	ldr	r4, [r0, #0]
 801155c:	f821 3d02 	strh.w	r3, [r1, #-2]!
 8011560:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
 8011562:	1c9a      	adds	r2, r3, #2
 8011564:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 8011566:	2202      	movs	r2, #2
 8011568:	18e0      	adds	r0, r4, r3
 801156a:	f7ef f989 	bl	8000880 <memcpy>
}
 801156e:	b002      	add	sp, #8
 8011570:	bd10      	pop	{r4, pc}

08011572 <net_buf_simple_add_be32>:
	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
 8011572:	b513      	push	{r0, r1, r4, lr}
 8011574:	ba0b      	rev	r3, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
 8011576:	a902      	add	r1, sp, #8
 8011578:	6804      	ldr	r4, [r0, #0]
 801157a:	f841 3d04 	str.w	r3, [r1, #-4]!
 801157e:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
 8011580:	1d1a      	adds	r2, r3, #4
 8011582:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 8011584:	2204      	movs	r2, #4
 8011586:	18e0      	adds	r0, r4, r3
 8011588:	f7ef f97a 	bl	8000880 <memcpy>
}
 801158c:	b002      	add	sp, #8
 801158e:	bd10      	pop	{r4, pc}

08011590 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
 8011590:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
 8011592:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
 8011594:	1a5b      	subs	r3, r3, r1
	buf->len += len;
 8011596:	4411      	add	r1, r2
	buf->data -= len;
 8011598:	6003      	str	r3, [r0, #0]
	buf->len += len;
 801159a:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
 801159c:	4618      	mov	r0, r3
 801159e:	4770      	bx	lr

080115a0 <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
 80115a0:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
 80115a2:	020b      	lsls	r3, r1, #8
 80115a4:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 80115a8:	a902      	add	r1, sp, #8
	buf->len += len;
 80115aa:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
 80115ac:	f821 3d02 	strh.w	r3, [r1, #-2]!
	buf->data -= len;
 80115b0:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
 80115b2:	3202      	adds	r2, #2
	buf->data -= len;
 80115b4:	3b02      	subs	r3, #2
 80115b6:	6003      	str	r3, [r0, #0]
	buf->len += len;
 80115b8:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
 80115ba:	2202      	movs	r2, #2
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ef f95f 	bl	8000880 <memcpy>
}
 80115c2:	b003      	add	sp, #12
 80115c4:	f85d fb04 	ldr.w	pc, [sp], #4

080115c8 <net_buf_simple_push_u8>:
	buf->data -= len;
 80115c8:	6802      	ldr	r2, [r0, #0]
 80115ca:	1e53      	subs	r3, r2, #1
 80115cc:	6003      	str	r3, [r0, #0]
	buf->len += len;
 80115ce:	8883      	ldrh	r3, [r0, #4]
 80115d0:	3301      	adds	r3, #1
 80115d2:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
 80115d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80115d8:	4770      	bx	lr

080115da <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
 80115da:	8883      	ldrh	r3, [r0, #4]
 80115dc:	1a5b      	subs	r3, r3, r1
 80115de:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
 80115e0:	6803      	ldr	r3, [r0, #0]
 80115e2:	4419      	add	r1, r3
 80115e4:	6001      	str	r1, [r0, #0]
}
 80115e6:	4608      	mov	r0, r1
 80115e8:	4770      	bx	lr

080115ea <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
 80115ea:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
 80115ec:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
 80115ee:	2101      	movs	r1, #1
	val = buf->data[0];
 80115f0:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
 80115f2:	f7ff fff2 	bl	80115da <net_buf_simple_pull>

	return val;
}
 80115f6:	4610      	mov	r0, r2
 80115f8:	bd08      	pop	{r3, pc}

080115fa <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
 80115fa:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
 80115fc:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 80115fe:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
 8011600:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011602:	f7ff ffea 	bl	80115da <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
 8011606:	4610      	mov	r0, r2
 8011608:	bd08      	pop	{r3, pc}

0801160a <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
 801160a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
 801160c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 801160e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
 8011610:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011612:	f7ff ffe2 	bl	80115da <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
 8011616:	0210      	lsls	r0, r2, #8
 8011618:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
 801161c:	b280      	uxth	r0, r0
 801161e:	bd08      	pop	{r3, pc}

08011620 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
 8011620:	b508      	push	{r3, lr}
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
 8011622:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011624:	2104      	movs	r1, #4
	val = UNALIGNED_GET((u32_t *)buf->data);
 8011626:	681a      	ldr	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011628:	f7ff ffd7 	bl	80115da <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
 801162c:	0610      	lsls	r0, r2, #24
 801162e:	0a13      	lsrs	r3, r2, #8
 8011630:	ea40 6012 	orr.w	r0, r0, r2, lsr #24
 8011634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011638:	0212      	lsls	r2, r2, #8
 801163a:	4318      	orrs	r0, r3
 801163c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
}
 8011640:	4310      	orrs	r0, r2
 8011642:	bd08      	pop	{r3, pc}

08011644 <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 8011644:	f100 0308 	add.w	r3, r0, #8
 8011648:	6800      	ldr	r0, [r0, #0]
}
 801164a:	1ac0      	subs	r0, r0, r3
 801164c:	4770      	bx	lr

0801164e <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
 801164e:	6802      	ldr	r2, [r0, #0]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8011650:	88c3      	ldrh	r3, [r0, #6]
	return buf->data - buf->__buf;
 8011652:	f100 0108 	add.w	r1, r0, #8
 8011656:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8011658:	8880      	ldrh	r0, [r0, #4]
 801165a:	1a9b      	subs	r3, r3, r2
}
 801165c:	1a18      	subs	r0, r3, r0
 801165e:	4770      	bx	lr

08011660 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
 8011660:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
 8011662:	4b08      	ldr	r3, [pc, #32]	; (8011684 <_sys_device_do_config_level+0x24>)
 8011664:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8011668:	3001      	adds	r0, #1
 801166a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801166e:	4620      	mov	r0, r4
 8011670:	42a8      	cmp	r0, r5
 8011672:	f104 040c 	add.w	r4, r4, #12
 8011676:	d300      	bcc.n	801167a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
 8011678:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
 801167a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	4798      	blx	r3
 8011682:	e7f4      	b.n	801166e <_sys_device_do_config_level+0xe>
 8011684:	08013cfc 	.word	0x08013cfc

08011688 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
 8011688:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
 801168a:	4c0b      	ldr	r4, [pc, #44]	; (80116b8 <device_get_binding+0x30>)
 801168c:	4e0b      	ldr	r6, [pc, #44]	; (80116bc <device_get_binding+0x34>)
{
 801168e:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011690:	42b4      	cmp	r4, r6
 8011692:	d101      	bne.n	8011698 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
 8011694:	2400      	movs	r4, #0
 8011696:	e00c      	b.n	80116b2 <device_get_binding+0x2a>
		if (!info->driver_api) {
 8011698:	6863      	ldr	r3, [r4, #4]
 801169a:	b90b      	cbnz	r3, 80116a0 <device_get_binding+0x18>
	for (info = __device_init_start; info != __device_init_end; info++) {
 801169c:	340c      	adds	r4, #12
 801169e:	e7f7      	b.n	8011690 <device_get_binding+0x8>
		if (name == info->config->name) {
 80116a0:	6823      	ldr	r3, [r4, #0]
 80116a2:	6819      	ldr	r1, [r3, #0]
 80116a4:	42a9      	cmp	r1, r5
 80116a6:	d004      	beq.n	80116b2 <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
 80116a8:	4628      	mov	r0, r5
 80116aa:	f7ef f8c7 	bl	800083c <strcmp>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	d1f4      	bne.n	801169c <device_get_binding+0x14>
}
 80116b2:	4620      	mov	r0, r4
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	bf00      	nop
 80116b8:	20006360 	.word	0x20006360
 80116bc:	2000642c 	.word	0x2000642c

080116c0 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
 80116c0:	4770      	bx	lr
	...

080116c4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
 80116c4:	4802      	ldr	r0, [pc, #8]	; (80116d0 <_bss_zero+0xc>)
 80116c6:	4a03      	ldr	r2, [pc, #12]	; (80116d4 <_bss_zero+0x10>)
 80116c8:	2100      	movs	r1, #0
 80116ca:	1a12      	subs	r2, r2, r0
 80116cc:	f7ef b904 	b.w	80008d8 <memset>
 80116d0:	20000000 	.word	0x20000000
 80116d4:	20001510 	.word	0x20001510

080116d8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
 80116d8:	4802      	ldr	r0, [pc, #8]	; (80116e4 <_data_copy+0xc>)
 80116da:	4a03      	ldr	r2, [pc, #12]	; (80116e8 <_data_copy+0x10>)
 80116dc:	4903      	ldr	r1, [pc, #12]	; (80116ec <_data_copy+0x14>)
 80116de:	1a12      	subs	r2, r2, r0
 80116e0:	f7ef b8ce 	b.w	8000880 <memcpy>
 80116e4:	20005680 	.word	0x20005680
 80116e8:	2000655c 	.word	0x2000655c
 80116ec:	08013d18 	.word	0x08013d18

080116f0 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
 80116f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80116f2:	2002      	movs	r0, #2
 80116f4:	f7ff ffb4 	bl	8011660 <_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 80116f8:	2003      	movs	r0, #3
 80116fa:	f7ff ffb1 	bl	8011660 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
 80116fe:	f000 fde1 	bl	80122c4 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8011702:	f7ef f99f 	bl	8000a44 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 8011706:	4a03      	ldr	r2, [pc, #12]	; (8011714 <_main+0x24>)
 8011708:	7a13      	ldrb	r3, [r2, #8]
 801170a:	f023 0301 	bic.w	r3, r3, #1
 801170e:	7213      	strb	r3, [r2, #8]
 8011710:	bd08      	pop	{r3, pc}
 8011712:	bf00      	nop
 8011714:	200012f0 	.word	0x200012f0

08011718 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	4d32      	ldr	r5, [pc, #200]	; (80117e8 <_Cstart+0xd0>)
 801171e:	af06      	add	r7, sp, #24
	_IntLibInit();
 8011720:	f7f1 fae0 	bl	8002ce4 <_IntLibInit>
 8011724:	231c      	movs	r3, #28
 8011726:	195a      	adds	r2, r3, r5
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8011728:	515a      	str	r2, [r3, r5]
 801172a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
 801172c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
	list->tail = (sys_dnode_t *)list;
 8011730:	6052      	str	r2, [r2, #4]
 8011732:	d1f8      	bne.n	8011726 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
 8011734:	4e2d      	ldr	r6, [pc, #180]	; (80117ec <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
 8011736:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8011814 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
 801173a:	616e      	str	r6, [r5, #20]
	_setup_new_thread(_main_thread, _main_stack,
 801173c:	2400      	movs	r4, #0
 801173e:	f04f 0901 	mov.w	r9, #1
 8011742:	4643      	mov	r3, r8
 8011744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011748:	4929      	ldr	r1, [pc, #164]	; (80117f0 <_Cstart+0xd8>)
 801174a:	f8cd 9010 	str.w	r9, [sp, #16]
 801174e:	4630      	mov	r0, r6
 8011750:	9403      	str	r4, [sp, #12]
 8011752:	9402      	str	r4, [sp, #8]
 8011754:	9401      	str	r4, [sp, #4]
 8011756:	9400      	str	r4, [sp, #0]
 8011758:	f000 fd0a 	bl	8012170 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801175c:	7a73      	ldrb	r3, [r6, #9]
	_add_thread_to_ready_q(_main_thread);
 801175e:	4630      	mov	r0, r6
 8011760:	f023 0304 	bic.w	r3, r3, #4
 8011764:	7273      	strb	r3, [r6, #9]
 8011766:	f000 f909 	bl	801197c <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
 801176a:	230f      	movs	r3, #15
 801176c:	9303      	str	r3, [sp, #12]
 801176e:	4921      	ldr	r1, [pc, #132]	; (80117f4 <_Cstart+0xdc>)
 8011770:	f8cd 9010 	str.w	r9, [sp, #16]
 8011774:	9402      	str	r4, [sp, #8]
 8011776:	9401      	str	r4, [sp, #4]
 8011778:	9400      	str	r4, [sp, #0]
 801177a:	4b1f      	ldr	r3, [pc, #124]	; (80117f8 <_Cstart+0xe0>)
 801177c:	481f      	ldr	r0, [pc, #124]	; (80117fc <_Cstart+0xe4>)
 801177e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011782:	f000 fcf5 	bl	8012170 <_setup_new_thread>
 8011786:	4b1d      	ldr	r3, [pc, #116]	; (80117fc <_Cstart+0xe4>)
 8011788:	4a1c      	ldr	r2, [pc, #112]	; (80117fc <_Cstart+0xe4>)
 801178a:	7a5b      	ldrb	r3, [r3, #9]
 801178c:	f023 0304 	bic.w	r3, r3, #4
 8011790:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(_idle_thread);
 8011792:	4610      	mov	r0, r2
 8011794:	f000 f8f2 	bl	801197c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
 8011798:	4b19      	ldr	r3, [pc, #100]	; (8011800 <_Cstart+0xe8>)
 801179a:	60eb      	str	r3, [r5, #12]
	list->tail = (sys_dnode_t *)list;
 801179c:	612b      	str	r3, [r5, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
 801179e:	4b19      	ldr	r3, [pc, #100]	; (8011804 <_Cstart+0xec>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
 80117a0:	f383 8808 	msr	MSP, r3
 80117a4:	4b18      	ldr	r3, [pc, #96]	; (8011808 <_Cstart+0xf0>)
 80117a6:	22f0      	movs	r2, #240	; 0xf0
 80117a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80117ac:	77dc      	strb	r4, [r3, #31]
 80117ae:	761c      	strb	r4, [r3, #24]
 80117b0:	765c      	strb	r4, [r3, #25]
 80117b2:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80117b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117b6:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 80117ba:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
 80117bc:	f7f1 fc32 	bl	8003024 <_FaultInit>
	_CpuIdleInit();
 80117c0:	f7f1 fc88 	bl	80030d4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7ff ff4b 	bl	8011660 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80117ca:	4648      	mov	r0, r9
 80117cc:	f7ff ff48 	bl	8011660 <_sys_device_do_config_level>
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 80117d0:	4b0e      	ldr	r3, [pc, #56]	; (801180c <_Cstart+0xf4>)

	_current = main_thread;
 80117d2:	60ae      	str	r6, [r5, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 80117d4:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
 80117d8:	4a0d      	ldr	r2, [pc, #52]	; (8011810 <_Cstart+0xf8>)
 80117da:	f383 8809 	msr	PSP, r3
 80117de:	2100      	movs	r1, #0
 80117e0:	f381 8811 	msr	BASEPRI, r1
 80117e4:	4640      	mov	r0, r8
 80117e6:	4710      	bx	r2
 80117e8:	20001358 	.word	0x20001358
 80117ec:	200012f0 	.word	0x200012f0
 80117f0:	20004340 	.word	0x20004340
 80117f4:	20004540 	.word	0x20004540
 80117f8:	08012aff 	.word	0x08012aff
 80117fc:	20001288 	.word	0x20001288
 8011800:	20001364 	.word	0x20001364
 8011804:	20004e80 	.word	0x20004e80
 8011808:	e000ed00 	.word	0xe000ed00
 801180c:	20004540 	.word	0x20004540
 8011810:	08012109 	.word	0x08012109
 8011814:	080116f1 	.word	0x080116f1

08011818 <k_queue_init>:
	list->head = NULL;
 8011818:	2300      	movs	r3, #0
 801181a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 801181c:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
 801181e:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
 8011822:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8011824:	60c3      	str	r3, [r0, #12]
 8011826:	4770      	bx	lr

08011828 <k_queue_cancel_wait>:
	return 0;
#endif
}

void k_queue_cancel_wait(struct k_queue *queue)
{
 8011828:	b510      	push	{r4, lr}
	__asm__ volatile(
 801182a:	f04f 0310 	mov.w	r3, #16
 801182e:	f3ef 8411 	mrs	r4, BASEPRI
 8011832:	f383 8811 	msr	BASEPRI, r3
	return _handle_obj_poll_events(&queue->poll_events, state);
 8011836:	2100      	movs	r1, #0
 8011838:	3008      	adds	r0, #8
 801183a:	f001 f925 	bl	8012a88 <_handle_obj_poll_events>
			(void)_Swap(key);
			return;
		}
	}
#else
	if (handle_poll_events(queue, K_POLL_STATE_NOT_READY)) {
 801183e:	b130      	cbz	r0, 801184e <k_queue_cancel_wait+0x26>
	_update_time_slice_before_swap();
 8011840:	f000 fa68 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8011844:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
 8011846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801184a:	f7f1 ba97 	b.w	8002d7c <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801184e:	f384 8811 	msr	BASEPRI, r4
 8011852:	bd10      	pop	{r4, pc}

08011854 <k_queue_insert>:

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
 8011854:	b510      	push	{r4, lr}
	__asm__ volatile(
 8011856:	f04f 0310 	mov.w	r3, #16
 801185a:	f3ef 8411 	mrs	r4, BASEPRI
 801185e:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
 8011862:	b931      	cbnz	r1, 8011872 <k_queue_insert+0x1e>
	node->next = list->head;
 8011864:	6803      	ldr	r3, [r0, #0]
 8011866:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
 8011868:	6843      	ldr	r3, [r0, #4]
	list->head = node;
 801186a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
 801186c:	b943      	cbnz	r3, 8011880 <k_queue_insert+0x2c>
		list->tail = node;
 801186e:	6042      	str	r2, [r0, #4]
 8011870:	e006      	b.n	8011880 <k_queue_insert+0x2c>
	} else if (!prev->next) {
 8011872:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
 8011874:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
 8011876:	b98b      	cbnz	r3, 801189c <k_queue_insert+0x48>
	if (!list->tail) {
 8011878:	6843      	ldr	r3, [r0, #4]
 801187a:	b96b      	cbnz	r3, 8011898 <k_queue_insert+0x44>
		list->tail = node;
 801187c:	6042      	str	r2, [r0, #4]
		list->head = node;
 801187e:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
 8011880:	2104      	movs	r1, #4
 8011882:	3008      	adds	r0, #8
 8011884:	f001 f900 	bl	8012a88 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
 8011888:	b150      	cbz	r0, 80118a0 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
 801188a:	f000 fa43 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 801188e:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
 8011890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011894:	f7f1 ba72 	b.w	8002d7c <__swap>
		list->tail->next = node;
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	e7e8      	b.n	801186e <k_queue_insert+0x1a>
		prev->next = node;
 801189c:	600a      	str	r2, [r1, #0]
 801189e:	e7ef      	b.n	8011880 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80118a0:	f384 8811 	msr	BASEPRI, r4
 80118a4:	bd10      	pop	{r4, pc}

080118a6 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
 80118a6:	460a      	mov	r2, r1
 80118a8:	6841      	ldr	r1, [r0, #4]
 80118aa:	f7ff bfd3 	b.w	8011854 <k_queue_insert>

080118ae <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
 80118ae:	460a      	mov	r2, r1
 80118b0:	2100      	movs	r1, #0
 80118b2:	f7ff bfcf 	b.w	8011854 <k_queue_insert>

080118b6 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
 80118b6:	b510      	push	{r4, lr}
	__asm__ volatile(
 80118b8:	f04f 0310 	mov.w	r3, #16
 80118bc:	f3ef 8411 	mrs	r4, BASEPRI
 80118c0:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
 80118c4:	6843      	ldr	r3, [r0, #4]
 80118c6:	b96b      	cbnz	r3, 80118e4 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
 80118c8:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
 80118ca:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
 80118cc:	2104      	movs	r1, #4
 80118ce:	3008      	adds	r0, #8
 80118d0:	f001 f8da 	bl	8012a88 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
 80118d4:	b140      	cbz	r0, 80118e8 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
 80118d6:	f000 fa1d 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 80118da:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
 80118dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e0:	f7f1 ba4c 	b.w	8002d7c <__swap>
		list->tail->next = (sys_snode_t *)head;
 80118e4:	6019      	str	r1, [r3, #0]
 80118e6:	e7f0      	b.n	80118ca <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80118e8:	f384 8811 	msr	BASEPRI, r4
 80118ec:	bd10      	pop	{r4, pc}

080118ee <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
 80118ee:	b530      	push	{r4, r5, lr}
 80118f0:	4604      	mov	r4, r0
 80118f2:	b087      	sub	sp, #28
 80118f4:	460d      	mov	r5, r1
	__asm__ volatile(
 80118f6:	f04f 0210 	mov.w	r2, #16
 80118fa:	f3ef 8311 	mrs	r3, BASEPRI
 80118fe:	f382 8811 	msr	BASEPRI, r2
 8011902:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
 8011904:	b152      	cbz	r2, 801191c <k_queue_get+0x2e>
	list->head = node->next;
 8011906:	6811      	ldr	r1, [r2, #0]
 8011908:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
 801190a:	6840      	ldr	r0, [r0, #4]
 801190c:	4282      	cmp	r2, r0
		list->tail = list->head;
 801190e:	bf08      	it	eq
 8011910:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011912:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 8011916:	4610      	mov	r0, r2
 8011918:	b007      	add	sp, #28
 801191a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
 801191c:	b919      	cbnz	r1, 8011926 <k_queue_get+0x38>
 801191e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
 8011922:	2200      	movs	r2, #0
 8011924:	e7f7      	b.n	8011916 <k_queue_get+0x28>
 8011926:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
 801192a:	2104      	movs	r1, #4
 801192c:	4603      	mov	r3, r0
 801192e:	eb0d 0001 	add.w	r0, sp, r1
 8011932:	f000 fff1 	bl	8012918 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
 8011936:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
 801193a:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
 801193c:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
 8011940:	2101      	movs	r1, #1
 8011942:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
 8011944:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
 8011948:	f000 fffa 	bl	8012940 <k_poll>
		if (err) {
 801194c:	2800      	cmp	r0, #0
 801194e:	d1e8      	bne.n	8011922 <k_queue_get+0x34>
	__asm__ volatile(
 8011950:	f04f 0310 	mov.w	r3, #16
 8011954:	f3ef 8111 	mrs	r1, BASEPRI
 8011958:	f383 8811 	msr	BASEPRI, r3
 801195c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 801195e:	b12a      	cbz	r2, 801196c <k_queue_get+0x7e>
	if (list->tail == node) {
 8011960:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
 8011962:	6813      	ldr	r3, [r2, #0]
 8011964:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
 8011966:	4282      	cmp	r2, r0
		list->tail = list->head;
 8011968:	bf08      	it	eq
 801196a:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801196c:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
 8011970:	2a00      	cmp	r2, #0
 8011972:	d1d0      	bne.n	8011916 <k_queue_get+0x28>
 8011974:	1c6b      	adds	r3, r5, #1
 8011976:	d0de      	beq.n	8011936 <k_queue_get+0x48>
 8011978:	e7d3      	b.n	8011922 <k_queue_get+0x34>
	...

0801197c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
 801197c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
 801197e:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
 8011982:	4911      	ldr	r1, [pc, #68]	; (80119c8 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
 8011984:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
 8011988:	1162      	asrs	r2, r4, #5
 801198a:	3204      	adds	r2, #4
 801198c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
 8011990:	f004 051f 	and.w	r5, r4, #31
 8011994:	2401      	movs	r4, #1
 8011996:	40ac      	lsls	r4, r5
 8011998:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
 801199a:	3313      	adds	r3, #19
	*bmap |= _get_ready_q_prio_bit(prio);
 801199c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
 801199e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
 80119a0:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
 80119a2:	1d1a      	adds	r2, r3, #4
 80119a4:	440a      	add	r2, r1
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
	node->prev = list->tail;
 80119a6:	440b      	add	r3, r1
	node->next = list;
 80119a8:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
 80119ae:	689a      	ldr	r2, [r3, #8]
 80119b0:	6010      	str	r0, [r2, #0]
	list->tail = node;
 80119b2:	6098      	str	r0, [r3, #8]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
 80119b4:	694b      	ldr	r3, [r1, #20]
 80119b6:	f990 400a 	ldrsb.w	r4, [r0, #10]
 80119ba:	f993 200a 	ldrsb.w	r2, [r3, #10]
 80119be:	4294      	cmp	r4, r2
 80119c0:	bfa8      	it	ge
 80119c2:	4618      	movge	r0, r3
 80119c4:	6148      	str	r0, [r1, #20]
 80119c6:	bd30      	pop	{r4, r5, pc}
 80119c8:	20001358 	.word	0x20001358

080119cc <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80119cc:	7a42      	ldrb	r2, [r0, #9]
 80119ce:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 80119d2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80119d6:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 80119d8:	d104      	bne.n	80119e4 <_ready_thread+0x18>
 80119da:	6a03      	ldr	r3, [r0, #32]
 80119dc:	3301      	adds	r3, #1
 80119de:	d101      	bne.n	80119e4 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
 80119e0:	f7ff bfcc 	b.w	801197c <_add_thread_to_ready_q>
 80119e4:	4770      	bx	lr
	...

080119e8 <_add_timeout>:

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
 80119e8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(timeout_in_ticks >= 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
 80119ea:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
 80119ec:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 80119ee:	60ca      	str	r2, [r1, #12]
	/* If timer is submitted to expire ASAP with
	 * timeout_in_ticks (duration) as zero value,
	 * then handle timeout immedately without going
	 * through timeout queue.
	 */
	if (!timeout_in_ticks) {
 80119f0:	bb13      	cbnz	r3, 8011a38 <_add_timeout+0x50>
	__asm__ volatile(
 80119f2:	f04f 0210 	mov.w	r2, #16
 80119f6:	f3ef 8411 	mrs	r4, BASEPRI
 80119fa:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 80119fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a02:	610a      	str	r2, [r1, #16]
	if (thread) {
 8011a04:	b180      	cbz	r0, 8011a28 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
 8011a06:	68ca      	ldr	r2, [r1, #12]
 8011a08:	b14a      	cbz	r2, 8011a1e <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8011a0a:	e890 0006 	ldmia.w	r0, {r1, r2}
 8011a0e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
 8011a10:	6801      	ldr	r1, [r0, #0]
 8011a12:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8011a14:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
 8011a16:	61c3      	str	r3, [r0, #28]
 8011a18:	f022 0202 	bic.w	r2, r2, #2
 8011a1c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
 8011a1e:	f7ff ffd5 	bl	80119cc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011a22:	f384 8811 	msr	BASEPRI, r4
 8011a26:	bd70      	pop	{r4, r5, r6, pc}
 8011a28:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
 8011a2c:	694b      	ldr	r3, [r1, #20]
 8011a2e:	b32b      	cbz	r3, 8011a7c <_add_timeout+0x94>
			timeout->func(timeout);
 8011a30:	4608      	mov	r0, r1
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
 8011a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
 8011a36:	4718      	bx	r3
	return list->head == list;
 8011a38:	4a11      	ldr	r2, [pc, #68]	; (8011a80 <_add_timeout+0x98>)
 8011a3a:	4610      	mov	r0, r2
 8011a3c:	f850 3f0c 	ldr.w	r3, [r0, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011a40:	4283      	cmp	r3, r0
 8011a42:	d10c      	bne.n	8011a5e <_add_timeout+0x76>
	node->next = list;
 8011a44:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 8011a46:	6913      	ldr	r3, [r2, #16]
 8011a48:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 8011a4a:	6913      	ldr	r3, [r2, #16]
 8011a4c:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8011a4e:	6111      	str	r1, [r2, #16]
 8011a50:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
 8011a52:	1b64      	subs	r4, r4, r5
 8011a54:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
 8011a56:	6914      	ldr	r4, [r2, #16]
 8011a58:	42a3      	cmp	r3, r4
 8011a5a:	d0f3      	beq.n	8011a44 <_add_timeout+0x5c>
 8011a5c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d0f0      	beq.n	8011a44 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
 8011a62:	690c      	ldr	r4, [r1, #16]
 8011a64:	691d      	ldr	r5, [r3, #16]
 8011a66:	42ac      	cmp	r4, r5
 8011a68:	dcf3      	bgt.n	8011a52 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
 8011a6a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 8011a6c:	1b2c      	subs	r4, r5, r4
 8011a6e:	611c      	str	r4, [r3, #16]
 8011a70:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 8011a72:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 8011a78:	6059      	str	r1, [r3, #4]
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	bd70      	pop	{r4, r5, r6, pc}
 8011a7e:	bf00      	nop
 8011a80:	20001358 	.word	0x20001358

08011a84 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
 8011a84:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
 8011a88:	b510      	push	{r4, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
 8011a8a:	f990 200a 	ldrsb.w	r2, [r0, #10]
 8011a8e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
 8011a90:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011a92:	3213      	adds	r2, #19
 8011a94:	604b      	str	r3, [r1, #4]
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <_remove_thread_from_ready_q+0x64>)
 8011a98:	00d2      	lsls	r2, r2, #3
 8011a9a:	1d11      	adds	r1, r2, #4
	return list->head == list;
 8011a9c:	441a      	add	r2, r3
 8011a9e:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
 8011aa0:	6852      	ldr	r2, [r2, #4]
 8011aa2:	428a      	cmp	r2, r1
 8011aa4:	d10f      	bne.n	8011ac6 <_remove_thread_from_ready_q+0x42>
		_clear_ready_q_prio_bit(thread->base.prio);
 8011aa6:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
 8011aaa:	3110      	adds	r1, #16
 8011aac:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
 8011aae:	3204      	adds	r2, #4
 8011ab0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
 8011ab4:	2401      	movs	r4, #1
 8011ab6:	f001 011f 	and.w	r1, r1, #31
 8011aba:	fa04 f101 	lsl.w	r1, r4, r1
 8011abe:	6894      	ldr	r4, [r2, #8]
 8011ac0:	ea24 0401 	bic.w	r4, r4, r1
 8011ac4:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
 8011ac6:	695a      	ldr	r2, [r3, #20]
 8011ac8:	4290      	cmp	r0, r2
 8011aca:	d10b      	bne.n	8011ae4 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
 8011acc:	6999      	ldr	r1, [r3, #24]
 8011ace:	fa91 f2a1 	rbit	r2, r1
 8011ad2:	2900      	cmp	r1, #0
 8011ad4:	fab2 f282 	clz	r2, r2
 8011ad8:	bf08      	it	eq
 8011ada:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8011ade:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011ae2:	69d2      	ldr	r2, [r2, #28]
 8011ae4:	615a      	str	r2, [r3, #20]
 8011ae6:	bd10      	pop	{r4, pc}
 8011ae8:	20001358 	.word	0x20001358

08011aec <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
 8011aec:	b430      	push	{r4, r5}
 8011aee:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
 8011af0:	42a1      	cmp	r1, r4
 8011af2:	bf08      	it	eq
 8011af4:	2400      	moveq	r4, #0
 8011af6:	b1f4      	cbz	r4, 8011b36 <_pend_thread+0x4a>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
 8011af8:	f990 500a 	ldrsb.w	r5, [r0, #10]
 8011afc:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8011b00:	429d      	cmp	r5, r3
 8011b02:	da12      	bge.n	8011b2a <_pend_thread+0x3e>
		node->prev = insert_point->prev;
 8011b04:	6863      	ldr	r3, [r4, #4]
 8011b06:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
 8011b08:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
 8011b0a:	6863      	ldr	r3, [r4, #4]
 8011b0c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
 8011b0e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
 8011b10:	7a44      	ldrb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
 8011b12:	1c53      	adds	r3, r2, #1
 8011b14:	f044 0402 	orr.w	r4, r4, #2
 8011b18:	7244      	strb	r4, [r0, #9]
 8011b1a:	d013      	beq.n	8011b44 <_pend_thread+0x58>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
 8011b1c:	1c53      	adds	r3, r2, #1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
 8011b1e:	bc30      	pop	{r4, r5}
 8011b20:	460a      	mov	r2, r1
 8011b22:	f100 0110 	add.w	r1, r0, #16
 8011b26:	f7ff bf5f 	b.w	80119e8 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 8011b2a:	684b      	ldr	r3, [r1, #4]
 8011b2c:	429c      	cmp	r4, r3
 8011b2e:	d002      	beq.n	8011b36 <_pend_thread+0x4a>
 8011b30:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
 8011b32:	2c00      	cmp	r4, #0
 8011b34:	d1df      	bne.n	8011af6 <_pend_thread+0xa>
	node->next = list;
 8011b36:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 8011b38:	684b      	ldr	r3, [r1, #4]
 8011b3a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8011b3c:	684b      	ldr	r3, [r1, #4]
 8011b3e:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8011b40:	6048      	str	r0, [r1, #4]
 8011b42:	e7e5      	b.n	8011b10 <_pend_thread+0x24>
}
 8011b44:	bc30      	pop	{r4, r5}
 8011b46:	4770      	bx	lr

08011b48 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
 8011b48:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
 8011b4a:	4c06      	ldr	r4, [pc, #24]	; (8011b64 <_pend_current_thread+0x1c>)
{
 8011b4c:	460e      	mov	r6, r1
 8011b4e:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
 8011b50:	68a0      	ldr	r0, [r4, #8]
 8011b52:	f7ff ff97 	bl	8011a84 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
 8011b56:	4632      	mov	r2, r6
 8011b58:	4629      	mov	r1, r5
 8011b5a:	68a0      	ldr	r0, [r4, #8]
}
 8011b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
 8011b60:	f7ff bfc4 	b.w	8011aec <_pend_thread>
 8011b64:	20001358 	.word	0x20001358

08011b68 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
 8011b68:	4a09      	ldr	r2, [pc, #36]	; (8011b90 <__must_switch_threads+0x28>)
 8011b6a:	6991      	ldr	r1, [r2, #24]

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
 8011b6c:	6892      	ldr	r2, [r2, #8]
 8011b6e:	2900      	cmp	r1, #0
 8011b70:	fa91 f3a1 	rbit	r3, r1
 8011b74:	f992 000a 	ldrsb.w	r0, [r2, #10]
 8011b78:	fab3 f383 	clz	r3, r3
 8011b7c:	bf08      	it	eq
 8011b7e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
 8011b82:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
 8011b84:	4298      	cmp	r0, r3
 8011b86:	bfd4      	ite	le
 8011b88:	2000      	movle	r0, #0
 8011b8a:	2001      	movgt	r0, #1
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	20001358 	.word	0x20001358

08011b94 <_reschedule_threads>:
{
 8011b94:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
 8011b96:	4b0a      	ldr	r3, [pc, #40]	; (8011bc0 <_reschedule_threads+0x2c>)
 8011b98:	689b      	ldr	r3, [r3, #8]
 8011b9a:	895b      	ldrh	r3, [r3, #10]
 8011b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	d802      	bhi.n	8011ba8 <_reschedule_threads+0x14>
 8011ba2:	f7ff ffe1 	bl	8011b68 <__must_switch_threads>
 8011ba6:	b910      	cbnz	r0, 8011bae <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011ba8:	f384 8811 	msr	BASEPRI, r4
 8011bac:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
 8011bae:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <_reschedule_threads+0x30>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	4620      	mov	r0, r4
}
 8011bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	f7f1 b8df 	b.w	8002d7c <__swap>
 8011bbe:	bf00      	nop
 8011bc0:	20001358 	.word	0x20001358
 8011bc4:	2000148c 	.word	0x2000148c

08011bc8 <k_sched_unlock>:
	__asm__ volatile(
 8011bc8:	f04f 0310 	mov.w	r3, #16
 8011bcc:	f3ef 8011 	mrs	r0, BASEPRI
 8011bd0:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
 8011bd4:	4b03      	ldr	r3, [pc, #12]	; (8011be4 <k_sched_unlock+0x1c>)
 8011bd6:	689a      	ldr	r2, [r3, #8]
 8011bd8:	7ad3      	ldrb	r3, [r2, #11]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
 8011bde:	f7ff bfd9 	b.w	8011b94 <_reschedule_threads>
 8011be2:	bf00      	nop
 8011be4:	20001358 	.word	0x20001358

08011be8 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
 8011be8:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011bec:	4a12      	ldr	r2, [pc, #72]	; (8011c38 <_move_thread_to_end_of_prio_q+0x50>)
{
 8011bee:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011bf0:	3313      	adds	r3, #19
 8011bf2:	00db      	lsls	r3, r3, #3
 8011bf4:	1d19      	adds	r1, r3, #4
 8011bf6:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
 8011bf8:	684c      	ldr	r4, [r1, #4]
 8011bfa:	42a0      	cmp	r0, r4
 8011bfc:	d01b      	beq.n	8011c36 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
 8011bfe:	6844      	ldr	r4, [r0, #4]
 8011c00:	6805      	ldr	r5, [r0, #0]
 8011c02:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
 8011c04:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
 8011c06:	4413      	add	r3, r2
	node->next->prev = node->prev;
 8011c08:	606c      	str	r4, [r5, #4]
	node->next = list;
 8011c0a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 8011c0c:	6899      	ldr	r1, [r3, #8]
 8011c0e:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
 8011c10:	6899      	ldr	r1, [r3, #8]
 8011c12:	6008      	str	r0, [r1, #0]
	list->tail = node;
 8011c14:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
 8011c16:	6953      	ldr	r3, [r2, #20]
 8011c18:	4298      	cmp	r0, r3
 8011c1a:	d10b      	bne.n	8011c34 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
 8011c1c:	6991      	ldr	r1, [r2, #24]
 8011c1e:	fa91 f3a1 	rbit	r3, r1
 8011c22:	2900      	cmp	r1, #0
 8011c24:	fab3 f383 	clz	r3, r3
 8011c28:	bf08      	it	eq
 8011c2a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8011c2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c32:	69db      	ldr	r3, [r3, #28]
 8011c34:	6153      	str	r3, [r2, #20]
 8011c36:	bd30      	pop	{r4, r5, pc}
 8011c38:	20001358 	.word	0x20001358

08011c3c <_impl_k_yield>:
{
 8011c3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8011c3e:	f04f 0310 	mov.w	r3, #16
 8011c42:	f3ef 8511 	mrs	r5, BASEPRI
 8011c46:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
 8011c4a:	4c09      	ldr	r4, [pc, #36]	; (8011c70 <_impl_k_yield+0x34>)
 8011c4c:	68a0      	ldr	r0, [r4, #8]
 8011c4e:	f7ff ffcb 	bl	8011be8 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
 8011c52:	68a2      	ldr	r2, [r4, #8]
 8011c54:	6963      	ldr	r3, [r4, #20]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d102      	bne.n	8011c60 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011c5a:	f385 8811 	msr	BASEPRI, r5
 8011c5e:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
 8011c60:	4b04      	ldr	r3, [pc, #16]	; (8011c74 <_impl_k_yield+0x38>)
 8011c62:	2200      	movs	r2, #0
 8011c64:	601a      	str	r2, [r3, #0]
 8011c66:	4628      	mov	r0, r5
}
 8011c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c6c:	f7f1 b886 	b.w	8002d7c <__swap>
 8011c70:	20001358 	.word	0x20001358
 8011c74:	2000148c 	.word	0x2000148c

08011c78 <_impl_k_sleep>:
{
 8011c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
 8011c7a:	b918      	cbnz	r0, 8011c84 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 8011c7c:	f7ff ffde 	bl	8011c3c <_impl_k_yield>
}
 8011c80:	b003      	add	sp, #12
 8011c82:	bd30      	pop	{r4, r5, pc}
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
 8011c84:	3001      	adds	r0, #1
 8011c86:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 8011c88:	f04f 0310 	mov.w	r3, #16
 8011c8c:	f3ef 8511 	mrs	r5, BASEPRI
 8011c90:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
 8011c94:	4c08      	ldr	r4, [pc, #32]	; (8011cb8 <_impl_k_sleep+0x40>)
 8011c96:	68a0      	ldr	r0, [r4, #8]
 8011c98:	f7ff fef4 	bl	8011a84 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
 8011c9c:	68a0      	ldr	r0, [r4, #8]
 8011c9e:	9b01      	ldr	r3, [sp, #4]
 8011ca0:	f100 0110 	add.w	r1, r0, #16
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f7ff fe9f 	bl	80119e8 <_add_timeout>
	_time_slice_elapsed = 0;
 8011caa:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <_impl_k_sleep+0x44>)
 8011cac:	2200      	movs	r2, #0
 8011cae:	4628      	mov	r0, r5
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	f7f1 f863 	bl	8002d7c <__swap>
 8011cb6:	e7e3      	b.n	8011c80 <_impl_k_sleep+0x8>
 8011cb8:	20001358 	.word	0x20001358
 8011cbc:	2000148c 	.word	0x2000148c

08011cc0 <_impl_k_current_get>:
}
 8011cc0:	4b01      	ldr	r3, [pc, #4]	; (8011cc8 <_impl_k_current_get+0x8>)
 8011cc2:	6898      	ldr	r0, [r3, #8]
 8011cc4:	4770      	bx	lr
 8011cc6:	bf00      	nop
 8011cc8:	20001358 	.word	0x20001358

08011ccc <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
 8011ccc:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <_is_thread_time_slicing+0x38>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dd14      	ble.n	8011cfe <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
 8011cd4:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <_is_thread_time_slicing+0x3c>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4298      	cmp	r0, r3
 8011cda:	d010      	beq.n	8011cfe <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
 8011cdc:	4a0b      	ldr	r2, [pc, #44]	; (8011d0c <_is_thread_time_slicing+0x40>)
 8011cde:	f990 300a 	ldrsb.w	r3, [r0, #10]
 8011ce2:	6812      	ldr	r2, [r2, #0]
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	db0a      	blt.n	8011cfe <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
 8011ce8:	f103 0213 	add.w	r2, r3, #19
 8011cec:	4b08      	ldr	r3, [pc, #32]	; (8011d10 <_is_thread_time_slicing+0x44>)
 8011cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cf2:	6858      	ldr	r0, [r3, #4]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	1ac0      	subs	r0, r0, r3
 8011cf8:	bf18      	it	ne
 8011cfa:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
 8011cfc:	4770      	bx	lr
		return 0;
 8011cfe:	2000      	movs	r0, #0
}
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop
 8011d04:	20001474 	.word	0x20001474
 8011d08:	08013d14 	.word	0x08013d14
 8011d0c:	20001478 	.word	0x20001478
 8011d10:	20001358 	.word	0x20001358

08011d14 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
 8011d14:	4b01      	ldr	r3, [pc, #4]	; (8011d1c <_update_time_slice_before_swap+0x8>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	4770      	bx	lr
 8011d1c:	2000148c 	.word	0x2000148c

08011d20 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011d20:	7a42      	ldrb	r2, [r0, #9]
 8011d22:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 8011d26:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011d2a:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 8011d2c:	d104      	bne.n	8011d38 <_ready_thread+0x18>
 8011d2e:	6a03      	ldr	r3, [r0, #32]
 8011d30:	3301      	adds	r3, #1
 8011d32:	d101      	bne.n	8011d38 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
 8011d34:	f7ff be22 	b.w	801197c <_add_thread_to_ready_q>
 8011d38:	4770      	bx	lr
	...

08011d3c <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
 8011d3c:	4a10      	ldr	r2, [pc, #64]	; (8011d80 <_unpend_first_thread+0x44>)
 8011d3e:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
 8011d40:	4603      	mov	r3, r0
 8011d42:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
 8011d44:	b16a      	cbz	r2, 8011d62 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011d46:	4283      	cmp	r3, r0
 8011d48:	bf08      	it	eq
 8011d4a:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
 8011d4c:	b908      	cbnz	r0, 8011d52 <_unpend_first_thread+0x16>
 8011d4e:	2000      	movs	r0, #0
 8011d50:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
 8011d52:	6a02      	ldr	r2, [r0, #32]
 8011d54:	3202      	adds	r2, #2
 8011d56:	d107      	bne.n	8011d68 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	4290      	cmp	r0, r2
 8011d5c:	d0f7      	beq.n	8011d4e <_unpend_first_thread+0x12>
 8011d5e:	6800      	ldr	r0, [r0, #0]
 8011d60:	e7f4      	b.n	8011d4c <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011d62:	4283      	cmp	r3, r0
 8011d64:	d00a      	beq.n	8011d7c <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
 8011d66:	b150      	cbz	r0, 8011d7e <_unpend_first_thread+0x42>
	node->prev->next = node->next;
 8011d68:	e890 000c 	ldmia.w	r0, {r2, r3}
 8011d6c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8011d6e:	6802      	ldr	r2, [r0, #0]
 8011d70:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8011d72:	7a43      	ldrb	r3, [r0, #9]
 8011d74:	f023 0302 	bic.w	r3, r3, #2
 8011d78:	7243      	strb	r3, [r0, #9]
 8011d7a:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011d7c:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
 8011d7e:	4770      	bx	lr
 8011d80:	20001488 	.word	0x20001488

08011d84 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8011d84:	6903      	ldr	r3, [r0, #16]
 8011d86:	1c5a      	adds	r2, r3, #1
 8011d88:	d011      	beq.n	8011dae <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 8011d8a:	4a0a      	ldr	r2, [pc, #40]	; (8011db4 <_abort_timeout+0x30>)
 8011d8c:	6912      	ldr	r2, [r2, #16]
 8011d8e:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
 8011d90:	bf1f      	itttt	ne
 8011d92:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 8011d94:	690a      	ldrne	r2, [r1, #16]
 8011d96:	189b      	addne	r3, r3, r2
 8011d98:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
 8011d9a:	e890 000c 	ldmia.w	r0, {r2, r3}
 8011d9e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8011da0:	6802      	ldr	r2, [r0, #0]
 8011da2:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 8011da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011da8:	6103      	str	r3, [r0, #16]
	return 0;
 8011daa:	2000      	movs	r0, #0
 8011dac:	4770      	bx	lr
		return _INACTIVE;
 8011dae:	4618      	mov	r0, r3
}
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	20001358 	.word	0x20001358

08011db8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
 8011db8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
 8011dbc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8011dbe:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8011dc0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8011dc2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
 8011dc4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8011dc6:	6143      	str	r3, [r0, #20]
 8011dc8:	4770      	bx	lr
	...

08011dcc <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	4605      	mov	r5, r0
 8011dd0:	f04f 0310 	mov.w	r3, #16
 8011dd4:	f3ef 8611 	mrs	r6, BASEPRI
 8011dd8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
 8011ddc:	f7ff ffae 	bl	8011d3c <_unpend_first_thread>
	if (!thread) {
 8011de0:	4604      	mov	r4, r0
 8011de2:	b990      	cbnz	r0, 8011e0a <_impl_k_sem_give+0x3e>
	sem->count += (sem->count != sem->limit);
 8011de4:	68ab      	ldr	r3, [r5, #8]
 8011de6:	68ea      	ldr	r2, [r5, #12]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	bf18      	it	ne
 8011dec:	3301      	addne	r3, #1
 8011dee:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
 8011df0:	2102      	movs	r1, #2
 8011df2:	f105 0010 	add.w	r0, r5, #16
 8011df6:	f000 fe47 	bl	8012a88 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
 8011dfa:	b310      	cbz	r0, 8011e42 <_impl_k_sem_give+0x76>
	_update_time_slice_before_swap();
 8011dfc:	f7ff ff8a 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8011e00:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
 8011e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e06:	f7f0 bfb9 	b.w	8002d7c <__swap>
	return _abort_timeout(&thread->base.timeout);
 8011e0a:	3010      	adds	r0, #16
 8011e0c:	f7ff ffba 	bl	8011d84 <_abort_timeout>
	_ready_thread(thread);
 8011e10:	4620      	mov	r0, r4
 8011e12:	f7ff ff85 	bl	8011d20 <_ready_thread>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8011e16:	2300      	movs	r3, #0
 8011e18:	6663      	str	r3, [r4, #100]	; 0x64
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
 8011e1a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 8011e1e:	2b0d      	cmp	r3, #13
 8011e20:	d80f      	bhi.n	8011e42 <_impl_k_sem_give+0x76>
 8011e22:	b11b      	cbz	r3, 8011e2c <_impl_k_sem_give+0x60>
 8011e24:	4b08      	ldr	r3, [pc, #32]	; (8011e48 <_impl_k_sem_give+0x7c>)
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	051b      	lsls	r3, r3, #20
 8011e2a:	d50a      	bpl.n	8011e42 <_impl_k_sem_give+0x76>
	return _is_preempt(_current) && __must_switch_threads();
 8011e2c:	4b07      	ldr	r3, [pc, #28]	; (8011e4c <_impl_k_sem_give+0x80>)
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	895b      	ldrh	r3, [r3, #10]
 8011e32:	2b7f      	cmp	r3, #127	; 0x7f
 8011e34:	d805      	bhi.n	8011e42 <_impl_k_sem_give+0x76>
 8011e36:	f7ff fe97 	bl	8011b68 <__must_switch_threads>
 8011e3a:	3000      	adds	r0, #0
 8011e3c:	bf18      	it	ne
 8011e3e:	2001      	movne	r0, #1
 8011e40:	e7db      	b.n	8011dfa <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011e42:	f386 8811 	msr	BASEPRI, r6
}
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	e000ed00 	.word	0xe000ed00
 8011e4c:	20001358 	.word	0x20001358

08011e50 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 8011e50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8011e52:	f04f 0310 	mov.w	r3, #16
 8011e56:	f3ef 8411 	mrs	r4, BASEPRI
 8011e5a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
 8011e5e:	6883      	ldr	r3, [r0, #8]
 8011e60:	b12b      	cbz	r3, 8011e6e <_impl_k_sem_take+0x1e>
		sem->count--;
 8011e62:	3b01      	subs	r3, #1
 8011e64:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011e66:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
 8011e6e:	b921      	cbnz	r1, 8011e7a <_impl_k_sem_take+0x2a>
 8011e70:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
 8011e74:	f06f 000f 	mvn.w	r0, #15
 8011e78:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
 8011e7a:	f7ff fe65 	bl	8011b48 <_pend_current_thread>
	_update_time_slice_before_swap();
 8011e7e:	f7ff ff49 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8011e82:	4620      	mov	r0, r4

	return _Swap(key);
}
 8011e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e88:	f7f0 bf78 	b.w	8002d7c <__swap>

08011e8c <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
 8011e8c:	4b01      	ldr	r3, [pc, #4]	; (8011e94 <_impl_k_uptime_get_32+0x8>)
 8011e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
 8011e92:	4770      	bx	lr
 8011e94:	20001490 	.word	0x20001490

08011e98 <_tick_get>:
	__asm__ volatile(
 8011e98:	f04f 0210 	mov.w	r2, #16
 8011e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8011ea0:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
 8011ea4:	4a02      	ldr	r2, [pc, #8]	; (8011eb0 <_tick_get+0x18>)
 8011ea6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011eaa:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
 8011eae:	4770      	bx	lr
 8011eb0:	20001490 	.word	0x20001490

08011eb4 <_impl_k_uptime_get>:
{
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
 8011eb4:	f7ff bff0 	b.w	8011e98 <_tick_get>

08011eb8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
 8011eb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ebc:	4606      	mov	r6, r0
	__asm__ volatile(
 8011ebe:	f04f 0310 	mov.w	r3, #16
 8011ec2:	f3ef 8011 	mrs	r0, BASEPRI
 8011ec6:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
 8011eca:	4959      	ldr	r1, [pc, #356]	; (8012030 <_nano_sys_clock_tick_announce+0x178>)
 8011ecc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8011ed0:	19a2      	adds	r2, r4, r6
 8011ed2:	eb45 73e6 	adc.w	r3, r5, r6, asr #31
 8011ed6:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011eda:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
 8011ede:	466c      	mov	r4, sp
 8011ee0:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
 8011ee4:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
 8011ee8:	f04f 0310 	mov.w	r3, #16
 8011eec:	f3ef 8011 	mrs	r0, BASEPRI
 8011ef0:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 8011ef4:	4d4f      	ldr	r5, [pc, #316]	; (8012034 <_nano_sys_clock_tick_announce+0x17c>)
 8011ef6:	462a      	mov	r2, r5
 8011ef8:	4601      	mov	r1, r0
 8011efa:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011efe:	4293      	cmp	r3, r2
 8011f00:	4694      	mov	ip, r2
 8011f02:	d000      	beq.n	8011f06 <_nano_sys_clock_tick_announce+0x4e>
	if (!head) {
 8011f04:	b9eb      	cbnz	r3, 8011f42 <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011f06:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
 8011f0a:	68a8      	ldr	r0, [r5, #8]
 8011f0c:	f7ff fede 	bl	8011ccc <_is_thread_time_slicing>
 8011f10:	b1a0      	cbz	r0, 8011f3c <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8011f12:	4b49      	ldr	r3, [pc, #292]	; (8012038 <_nano_sys_clock_tick_announce+0x180>)
	if (_time_slice_elapsed >= _time_slice_duration) {
 8011f14:	4a49      	ldr	r2, [pc, #292]	; (801203c <_nano_sys_clock_tick_announce+0x184>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8011f16:	6818      	ldr	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
 8011f18:	6812      	ldr	r2, [r2, #0]
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8011f1a:	4430      	add	r0, r6
	if (_time_slice_elapsed >= _time_slice_duration) {
 8011f1c:	4290      	cmp	r0, r2
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8011f1e:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
 8011f20:	db0c      	blt.n	8011f3c <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
 8011f22:	2200      	movs	r2, #0
 8011f24:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
 8011f26:	f04f 0310 	mov.w	r3, #16
 8011f2a:	f3ef 8411 	mrs	r4, BASEPRI
 8011f2e:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
 8011f32:	68a8      	ldr	r0, [r5, #8]
 8011f34:	f7ff fe58 	bl	8011be8 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011f38:	f384 8811 	msr	BASEPRI, r4
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
 8011f3c:	b002      	add	sp, #8
 8011f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	head->delta_ticks_from_prev -= ticks;
 8011f42:	6918      	ldr	r0, [r3, #16]
	_handling_timeouts = 1;
 8011f44:	4f3e      	ldr	r7, [pc, #248]	; (8012040 <_nano_sys_clock_tick_announce+0x188>)
	head->delta_ticks_from_prev -= ticks;
 8011f46:	1b80      	subs	r0, r0, r6
 8011f48:	6118      	str	r0, [r3, #16]
	_handling_timeouts = 1;
 8011f4a:	2001      	movs	r0, #1
 8011f4c:	6038      	str	r0, [r7, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
 8011f4e:	f06f 0001 	mvn.w	r0, #1
	while (timeout && timeout->delta_ticks_from_prev == 0) {
 8011f52:	691a      	ldr	r2, [r3, #16]
 8011f54:	b9d2      	cbnz	r2, 8011f8c <_nano_sys_clock_tick_announce+0xd4>
	node->prev->next = node->next;
 8011f56:	e893 4004 	ldmia.w	r3, {r2, lr}
 8011f5a:	f8ce 2000 	str.w	r2, [lr]
	node->next->prev = node->prev;
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	f8c2 e004 	str.w	lr, [r2, #4]
	node->next = list->head;
 8011f64:	9a00      	ldr	r2, [sp, #0]
	node->prev = list;
 8011f66:	e883 0014 	stmia.w	r3, {r2, r4}
	list->head->prev = node;
 8011f6a:	9a00      	ldr	r2, [sp, #0]
	list->head = node;
 8011f6c:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
 8011f6e:	6053      	str	r3, [r2, #4]
		timeout->delta_ticks_from_prev = _EXPIRED;
 8011f70:	6118      	str	r0, [r3, #16]
 8011f72:	f381 8811 	msr	BASEPRI, r1
	__asm__ volatile(
 8011f76:	f04f 0310 	mov.w	r3, #16
 8011f7a:	f3ef 8111 	mrs	r1, BASEPRI
 8011f7e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 8011f82:	68eb      	ldr	r3, [r5, #12]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011f84:	4563      	cmp	r3, ip
 8011f86:	d001      	beq.n	8011f8c <_nano_sys_clock_tick_announce+0xd4>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1e2      	bne.n	8011f52 <_nano_sys_clock_tick_announce+0x9a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011f8c:	f381 8811 	msr	BASEPRI, r1
	return list->head == list;
 8011f90:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011f92:	42a0      	cmp	r0, r4
 8011f94:	d102      	bne.n	8011f9c <_nano_sys_clock_tick_announce+0xe4>
	_handling_timeouts = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	603b      	str	r3, [r7, #0]
 8011f9a:	e7b6      	b.n	8011f0a <_nano_sys_clock_tick_announce+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d0fa      	beq.n	8011f96 <_nano_sys_clock_tick_announce+0xde>
	return (node == list->tail) ? NULL : node->next;
 8011fa0:	9b01      	ldr	r3, [sp, #4]
 8011fa2:	4298      	cmp	r0, r3
 8011fa4:	d101      	bne.n	8011faa <_nano_sys_clock_tick_announce+0xf2>
 8011fa6:	2400      	movs	r4, #0
 8011fa8:	e000      	b.n	8011fac <_nano_sys_clock_tick_announce+0xf4>
 8011faa:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
 8011fac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
 8011fb0:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
 8011fb4:	e890 000c 	ldmia.w	r0, {r2, r3}
 8011fb8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8011fba:	6802      	ldr	r2, [r0, #0]
 8011fbc:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
 8011fbe:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
 8011fc0:	f04f 0210 	mov.w	r2, #16
 8011fc4:	f3ef 8a11 	mrs	sl, BASEPRI
 8011fc8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 8011fcc:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
 8011fd0:	b1fb      	cbz	r3, 8012012 <_nano_sys_clock_tick_announce+0x15a>
	if (timeout_obj->wait_q) {
 8011fd2:	68c2      	ldr	r2, [r0, #12]
 8011fd4:	b152      	cbz	r2, 8011fec <_nano_sys_clock_tick_announce+0x134>
	node->prev->next = node->next;
 8011fd6:	6859      	ldr	r1, [r3, #4]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8011fe0:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
 8011fe2:	f8c3 901c 	str.w	r9, [r3, #28]
 8011fe6:	f022 0202 	bic.w	r2, r2, #2
 8011fea:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011fec:	7a5a      	ldrb	r2, [r3, #9]
 8011fee:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 8011ff2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011ff6:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 8011ff8:	d102      	bne.n	8012000 <_nano_sys_clock_tick_announce+0x148>
 8011ffa:	6a1a      	ldr	r2, [r3, #32]
 8011ffc:	3201      	adds	r2, #1
 8011ffe:	d013      	beq.n	8012028 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012000:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 8012004:	2c00      	cmp	r4, #0
 8012006:	d0c6      	beq.n	8011f96 <_nano_sys_clock_tick_announce+0xde>
	return (node == list->tail) ? NULL : node->next;
 8012008:	9b01      	ldr	r3, [sp, #4]
 801200a:	42a3      	cmp	r3, r4
 801200c:	d108      	bne.n	8012020 <_nano_sys_clock_tick_announce+0x168>
 801200e:	2300      	movs	r3, #0
 8012010:	e007      	b.n	8012022 <_nano_sys_clock_tick_announce+0x16a>
 8012012:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
 8012016:	6943      	ldr	r3, [r0, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d0f3      	beq.n	8012004 <_nano_sys_clock_tick_announce+0x14c>
			timeout->func(timeout);
 801201c:	4798      	blx	r3
 801201e:	e7f1      	b.n	8012004 <_nano_sys_clock_tick_announce+0x14c>
 8012020:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 8012022:	4620      	mov	r0, r4
 8012024:	461c      	mov	r4, r3
 8012026:	e7c5      	b.n	8011fb4 <_nano_sys_clock_tick_announce+0xfc>
		_add_thread_to_ready_q(thread);
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff fca7 	bl	801197c <_add_thread_to_ready_q>
 801202e:	e7e7      	b.n	8012000 <_nano_sys_clock_tick_announce+0x148>
 8012030:	20001490 	.word	0x20001490
 8012034:	20001358 	.word	0x20001358
 8012038:	2000148c 	.word	0x2000148c
 801203c:	20001474 	.word	0x20001474
 8012040:	20001488 	.word	0x20001488

08012044 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
 8012044:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 8012046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801204e:	4903      	ldr	r1, [pc, #12]	; (801205c <k_sys_work_q_init+0x18>)
 8012050:	4803      	ldr	r0, [pc, #12]	; (8012060 <k_sys_work_q_init+0x1c>)
 8012052:	f000 f9c9 	bl	80123e8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
 8012056:	2000      	movs	r0, #0
 8012058:	bd08      	pop	{r3, pc}
 801205a:	bf00      	nop
 801205c:	20004e80 	.word	0x20004e80
 8012060:	20001498 	.word	0x20001498

08012064 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
 8012064:	7a43      	ldrb	r3, [r0, #9]
 8012066:	06da      	lsls	r2, r3, #27
 8012068:	d104      	bne.n	8012074 <_is_thread_ready+0x10>
 801206a:	6a00      	ldr	r0, [r0, #32]
 801206c:	1c43      	adds	r3, r0, #1
 801206e:	4258      	negs	r0, r3
 8012070:	4158      	adcs	r0, r3
 8012072:	4770      	bx	lr
 8012074:	2000      	movs	r0, #0
}
 8012076:	4770      	bx	lr

08012078 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012078:	6903      	ldr	r3, [r0, #16]
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	d011      	beq.n	80120a2 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 801207e:	4a0a      	ldr	r2, [pc, #40]	; (80120a8 <_abort_timeout+0x30>)
 8012080:	6912      	ldr	r2, [r2, #16]
 8012082:	4290      	cmp	r0, r2
 8012084:	bf1f      	itttt	ne
 8012086:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 8012088:	690a      	ldrne	r2, [r1, #16]
 801208a:	189b      	addne	r3, r3, r2
 801208c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
 801208e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8012092:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8012094:	6802      	ldr	r2, [r0, #0]
 8012096:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801209c:	6103      	str	r3, [r0, #16]
	return 0;
 801209e:	2000      	movs	r0, #0
 80120a0:	4770      	bx	lr
		return _INACTIVE;
 80120a2:	4618      	mov	r0, r3
}
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	20001358 	.word	0x20001358

080120ac <k_is_in_isr>:
 80120ac:	f3ef 8005 	mrs	r0, IPSR
 80120b0:	280d      	cmp	r0, #13
 80120b2:	d807      	bhi.n	80120c4 <k_is_in_isr+0x18>
 80120b4:	b138      	cbz	r0, 80120c6 <k_is_in_isr+0x1a>
 80120b6:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <k_is_in_isr+0x1c>)
 80120b8:	6858      	ldr	r0, [r3, #4]
 80120ba:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 80120be:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80120c2:	4770      	bx	lr
 80120c4:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
 80120c6:	4770      	bx	lr
 80120c8:	e000ed00 	.word	0xe000ed00

080120cc <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
 80120cc:	4b02      	ldr	r3, [pc, #8]	; (80120d8 <_is_thread_essential+0xc>)
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	7a18      	ldrb	r0, [r3, #8]
}
 80120d2:	f000 0001 	and.w	r0, r0, #1
 80120d6:	4770      	bx	lr
 80120d8:	20001358 	.word	0x20001358

080120dc <k_busy_wait>:
int saved_always_on = k_enable_sys_clock_always_on();
#endif
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec /
 80120dc:	4908      	ldr	r1, [pc, #32]	; (8012100 <k_busy_wait+0x24>)
 80120de:	4a09      	ldr	r2, [pc, #36]	; (8012104 <k_busy_wait+0x28>)
{
 80120e0:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec /
 80120e2:	fba0 0101 	umull	r0, r1, r0, r1
 80120e6:	2300      	movs	r3, #0
 80120e8:	f7ee fa04 	bl	80004f4 <__aeabi_uldivmod>
 80120ec:	4604      	mov	r4, r0
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
 80120ee:	f7f2 fc95 	bl	8004a1c <_timer_cycle_get_32>
 80120f2:	4605      	mov	r5, r0

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
 80120f4:	f7f2 fc92 	bl	8004a1c <_timer_cycle_get_32>

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80120f8:	1b40      	subs	r0, r0, r5
 80120fa:	4284      	cmp	r4, r0
 80120fc:	d8fa      	bhi.n	80120f4 <k_busy_wait+0x18>
	}
#if defined(CONFIG_TICKLESS_KERNEL) && \
	    !defined(CONFIG_BUSY_WAIT_USES_ALTERNATE_CLOCK)
	_sys_clock_always_on = saved_always_on;
#endif
}
 80120fe:	bd38      	pop	{r3, r4, r5, pc}
 8012100:	0501bd00 	.word	0x0501bd00
 8012104:	000f4240 	.word	0x000f4240

08012108 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8012108:	b508      	push	{r3, lr}
 801210a:	4604      	mov	r4, r0
 801210c:	4608      	mov	r0, r1
 801210e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8012110:	461a      	mov	r2, r3
 8012112:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
 8012114:	f7ff fdd4 	bl	8011cc0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
 8012118:	f7f1 f858 	bl	80031cc <_impl_k_thread_abort>

0801211c <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
 801211c:	b510      	push	{r4, lr}
 801211e:	4601      	mov	r1, r0
	__asm__ volatile(
 8012120:	f04f 0310 	mov.w	r3, #16
 8012124:	f3ef 8411 	mrs	r4, BASEPRI
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
 801212e:	075a      	lsls	r2, r3, #29
 8012130:	d402      	bmi.n	8012138 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012132:	f384 8811 	msr	BASEPRI, r4
 8012136:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8012138:	f023 0304 	bic.w	r3, r3, #4
 801213c:	7243      	strb	r3, [r0, #9]
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
 801213e:	f7ff ff91 	bl	8012064 <_is_thread_ready>
 8012142:	2800      	cmp	r0, #0
 8012144:	d0f5      	beq.n	8012132 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
 8012146:	4608      	mov	r0, r1
 8012148:	f7ff fc18 	bl	801197c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
 801214c:	4b07      	ldr	r3, [pc, #28]	; (801216c <_impl_k_thread_start+0x50>)
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	895b      	ldrh	r3, [r3, #10]
 8012152:	2b7f      	cmp	r3, #127	; 0x7f
 8012154:	d8ed      	bhi.n	8012132 <_impl_k_thread_start+0x16>
 8012156:	f7ff fd07 	bl	8011b68 <__must_switch_threads>
 801215a:	2800      	cmp	r0, #0
 801215c:	d0e9      	beq.n	8012132 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
 801215e:	f7ff fdd9 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8012162:	4620      	mov	r0, r4
			return;
		}
	}

	irq_unlock(key);
}
 8012164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012168:	f7f0 be08 	b.w	8002d7c <__swap>
 801216c:	20001358 	.word	0x20001358

08012170 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
 8012170:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
 8012172:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012174:	f7f0 bf86 	b.w	8003084 <_new_thread>

08012178 <_k_thread_single_start>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_thread_cancel, K_OBJ_THREAD, struct k_thread *);
#endif

void _k_thread_single_start(struct k_thread *thread)
{
 8012178:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801217a:	7a43      	ldrb	r3, [r0, #9]
 801217c:	f023 0304 	bic.w	r3, r3, #4
 8012180:	7243      	strb	r3, [r0, #9]
 8012182:	4601      	mov	r1, r0
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
 8012184:	f7ff ff6e 	bl	8012064 <_is_thread_ready>
 8012188:	b120      	cbz	r0, 8012194 <_k_thread_single_start+0x1c>
		_add_thread_to_ready_q(thread);
 801218a:	4608      	mov	r0, r1
	}
}
 801218c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		_add_thread_to_ready_q(thread);
 8012190:	f7ff bbf4 	b.w	801197c <_add_thread_to_ready_q>
 8012194:	bd08      	pop	{r3, pc}
	...

08012198 <schedule_new_thread.part.13>:
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
 8012198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
 801219a:	3101      	adds	r1, #1
	__asm__ volatile(
 801219c:	f04f 0310 	mov.w	r3, #16
 80121a0:	f3ef 8611 	mrs	r6, BASEPRI
 80121a4:	f383 8811 	msr	BASEPRI, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
 80121a8:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
 80121aa:	f100 0710 	add.w	r7, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
 80121ae:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
 80121b0:	6180      	str	r0, [r0, #24]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 80121b2:	61c3      	str	r3, [r0, #28]
	if (!timeout_in_ticks) {
 80121b4:	b9d9      	cbnz	r1, 80121ee <schedule_new_thread.part.13+0x56>
 80121b6:	f04f 0310 	mov.w	r3, #16
 80121ba:	f3ef 8411 	mrs	r4, BASEPRI
 80121be:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
 80121c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121c6:	6203      	str	r3, [r0, #32]
	if (timeout_obj->wait_q) {
 80121c8:	69c3      	ldr	r3, [r0, #28]
 80121ca:	b14b      	cbz	r3, 80121e0 <schedule_new_thread.part.13+0x48>
	node->prev->next = node->next;
 80121cc:	e890 000c 	ldmia.w	r0, {r2, r3}
 80121d0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80121d2:	6802      	ldr	r2, [r0, #0]
 80121d4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 80121d6:	7a43      	ldrb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
 80121d8:	61c1      	str	r1, [r0, #28]
 80121da:	f023 0302 	bic.w	r3, r3, #2
 80121de:	7243      	strb	r3, [r0, #9]
		_ready_thread(thread);
 80121e0:	f7ff ffca 	bl	8012178 <_k_thread_single_start>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80121e4:	f384 8811 	msr	BASEPRI, r4
 80121e8:	f386 8811 	msr	BASEPRI, r6
 80121ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head == list;
 80121ee:	4a12      	ldr	r2, [pc, #72]	; (8012238 <schedule_new_thread.part.13+0xa0>)
 80121f0:	4611      	mov	r1, r2
 80121f2:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80121f6:	428b      	cmp	r3, r1
 80121f8:	d105      	bne.n	8012206 <schedule_new_thread.part.13+0x6e>
	node->next = list;
 80121fa:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
 80121fc:	6913      	ldr	r3, [r2, #16]
 80121fe:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
 8012200:	601f      	str	r7, [r3, #0]
	list->tail = node;
 8012202:	6117      	str	r7, [r2, #16]
 8012204:	e7f0      	b.n	80121e8 <schedule_new_thread.part.13+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0f7      	beq.n	80121fa <schedule_new_thread.part.13+0x62>
 801220a:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
 801220e:	6a04      	ldr	r4, [r0, #32]
 8012210:	691d      	ldr	r5, [r3, #16]
 8012212:	42ac      	cmp	r4, r5
 8012214:	dc08      	bgt.n	8012228 <schedule_new_thread.part.13+0x90>
		node->prev = insert_point->prev;
 8012216:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 8012218:	1b2c      	subs	r4, r5, r4
 801221a:	611c      	str	r4, [r3, #16]
 801221c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
 801221e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
 8012224:	605f      	str	r7, [r3, #4]
 8012226:	e7df      	b.n	80121e8 <schedule_new_thread.part.13+0x50>
		*delta -= in_q->delta_ticks_from_prev;
 8012228:	1b64      	subs	r4, r4, r5
	return (node == list->tail) ? NULL : node->next;
 801222a:	4573      	cmp	r3, lr
 801222c:	6204      	str	r4, [r0, #32]
 801222e:	d0e4      	beq.n	80121fa <schedule_new_thread.part.13+0x62>
 8012230:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1eb      	bne.n	801220e <schedule_new_thread.part.13+0x76>
 8012236:	e7e0      	b.n	80121fa <schedule_new_thread.part.13+0x62>
 8012238:	20001358 	.word	0x20001358

0801223c <_impl_k_thread_create>:
{
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012242:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012244:	9604      	str	r6, [sp, #16]
 8012246:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012248:	9603      	str	r6, [sp, #12]
 801224a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801224c:	9602      	str	r6, [sp, #8]
 801224e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 8012250:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012252:	9601      	str	r6, [sp, #4]
 8012254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012256:	9600      	str	r6, [sp, #0]
 8012258:	f7f0 ff14 	bl	8003084 <_new_thread>
	if (delay != K_FOREVER) {
 801225c:	1c6b      	adds	r3, r5, #1
 801225e:	d003      	beq.n	8012268 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
 8012260:	b92d      	cbnz	r5, 801226e <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
 8012262:	4620      	mov	r0, r4
 8012264:	f7ff ff5a 	bl	801211c <_impl_k_thread_start>
}
 8012268:	4620      	mov	r0, r4
 801226a:	b006      	add	sp, #24
 801226c:	bd70      	pop	{r4, r5, r6, pc}
 801226e:	4629      	mov	r1, r5
 8012270:	4620      	mov	r0, r4
 8012272:	f7ff ff91 	bl	8012198 <schedule_new_thread.part.13>
 8012276:	e7f7      	b.n	8012268 <_impl_k_thread_create+0x2c>

08012278 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
 8012278:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801227a:	b510      	push	{r4, lr}
 801227c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 801227e:	b103      	cbz	r3, 8012282 <_k_thread_single_abort+0xa>
		thread->fn_abort();
 8012280:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
 8012282:	4620      	mov	r0, r4
 8012284:	f7ff feee 	bl	8012064 <_is_thread_ready>
 8012288:	b138      	cbz	r0, 801229a <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
 801228a:	4620      	mov	r0, r4
 801228c:	f7ff fbfa 	bl	8011a84 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
 8012290:	7a63      	ldrb	r3, [r4, #9]
 8012292:	f043 0308 	orr.w	r3, r3, #8
 8012296:	7263      	strb	r3, [r4, #9]
 8012298:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
 801229a:	7a63      	ldrb	r3, [r4, #9]
 801229c:	079b      	lsls	r3, r3, #30
 801229e:	d508      	bpl.n	80122b2 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
 80122a0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80122a4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80122a6:	6822      	ldr	r2, [r4, #0]
 80122a8:	6053      	str	r3, [r2, #4]
 80122aa:	7a63      	ldrb	r3, [r4, #9]
 80122ac:	f023 0302 	bic.w	r3, r3, #2
 80122b0:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
 80122b2:	6a23      	ldr	r3, [r4, #32]
 80122b4:	3301      	adds	r3, #1
 80122b6:	d0eb      	beq.n	8012290 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
 80122b8:	f104 0010 	add.w	r0, r4, #16
 80122bc:	f7ff fedc 	bl	8012078 <_abort_timeout>
 80122c0:	e7e6      	b.n	8012290 <_k_thread_single_abort+0x18>
	...

080122c4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
 80122c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
 80122c6:	4f21      	ldr	r7, [pc, #132]	; (801234c <_init_static_threads+0x88>)
 80122c8:	4d21      	ldr	r5, [pc, #132]	; (8012350 <_init_static_threads+0x8c>)
{
 80122ca:	b087      	sub	sp, #28
 80122cc:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80122ce:	42bd      	cmp	r5, r7
 80122d0:	f105 042c 	add.w	r4, r5, #44	; 0x2c
 80122d4:	d314      	bcc.n	8012300 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
 80122d6:	4b1f      	ldr	r3, [pc, #124]	; (8012354 <_init_static_threads+0x90>)
 80122d8:	689a      	ldr	r2, [r3, #8]
 80122da:	7ad3      	ldrb	r3, [r2, #11]
 80122dc:	3b01      	subs	r3, #1
 80122de:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
 80122e0:	f04f 0310 	mov.w	r3, #16
 80122e4:	f3ef 8511 	mrs	r5, BASEPRI
 80122e8:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 80122ec:	4c18      	ldr	r4, [pc, #96]	; (8012350 <_init_static_threads+0x8c>)
 80122ee:	42b4      	cmp	r4, r6
 80122f0:	d31f      	bcc.n	8012332 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80122f2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
 80122f6:	b007      	add	sp, #28
 80122f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80122fc:	f7ff bc64 	b.w	8011bc8 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012300:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012304:	9304      	str	r3, [sp, #16]
 8012306:	f854 3c10 	ldr.w	r3, [r4, #-16]
 801230a:	9303      	str	r3, [sp, #12]
 801230c:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8012310:	9302      	str	r3, [sp, #8]
 8012312:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8012316:	9301      	str	r3, [sp, #4]
 8012318:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 801231c:	9300      	str	r3, [sp, #0]
 801231e:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 8012322:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8012324:	f7f0 feae 	bl	8003084 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8012328:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 801232c:	64dd      	str	r5, [r3, #76]	; 0x4c
 801232e:	4625      	mov	r5, r4
 8012330:	e7cd      	b.n	80122ce <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 8012332:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012334:	1c4b      	adds	r3, r1, #1
 8012336:	d003      	beq.n	8012340 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
 8012338:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 801233a:	b919      	cbnz	r1, 8012344 <_init_static_threads+0x80>
 801233c:	f7ff feee 	bl	801211c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8012340:	342c      	adds	r4, #44	; 0x2c
 8012342:	e7d4      	b.n	80122ee <_init_static_threads+0x2a>
 8012344:	f7ff ff28 	bl	8012198 <schedule_new_thread.part.13>
 8012348:	e7fa      	b.n	8012340 <_init_static_threads+0x7c>
 801234a:	bf00      	nop
 801234c:	2000642c 	.word	0x2000642c
 8012350:	2000642c 	.word	0x2000642c
 8012354:	20001358 	.word	0x20001358

08012358 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8012358:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
 801235a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
 801235c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
 801235e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
 8012362:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
 8012364:	72c3      	strb	r3, [r0, #11]
 8012366:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
 8012368:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
 801236a:	6183      	str	r3, [r0, #24]
	t->func = func;
 801236c:	6243      	str	r3, [r0, #36]	; 0x24
 801236e:	4770      	bx	lr

08012370 <k_work_submit_to_queue>:
{
 8012370:	b500      	push	{lr}
 8012372:	f101 0308 	add.w	r3, r1, #8
 8012376:	f3bf 8f5b 	dmb	ish
 801237a:	e853 2f00 	ldrex	r2, [r3]
 801237e:	f042 0e01 	orr.w	lr, r2, #1
 8012382:	e843 ec00 	strex	ip, lr, [r3]
 8012386:	f1bc 0f00 	cmp.w	ip, #0
 801238a:	d1f6      	bne.n	801237a <k_work_submit_to_queue+0xa>
 801238c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8012390:	07d3      	lsls	r3, r2, #31
 8012392:	d403      	bmi.n	801239c <k_work_submit_to_queue+0x2c>
}
 8012394:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
 8012398:	f7ff ba85 	b.w	80118a6 <k_queue_append>
 801239c:	f85d fb04 	ldr.w	pc, [sp], #4

080123a0 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
 80123a0:	f1a0 010c 	sub.w	r1, r0, #12
 80123a4:	6980      	ldr	r0, [r0, #24]
 80123a6:	f7ff bfe3 	b.w	8012370 <k_work_submit_to_queue>

080123aa <work_q_main>:
{
 80123aa:	b510      	push	{r4, lr}
 80123ac:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
 80123ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80123b2:	4620      	mov	r0, r4
 80123b4:	f7ff fa9b 	bl	80118ee <k_queue_get>
		if (!work) {
 80123b8:	4603      	mov	r3, r0
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d0f7      	beq.n	80123ae <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80123be:	3308      	adds	r3, #8
		handler = work->handler;
 80123c0:	6842      	ldr	r2, [r0, #4]
 80123c2:	f3bf 8f5b 	dmb	ish
 80123c6:	e853 1f00 	ldrex	r1, [r3]
 80123ca:	f021 0e01 	bic.w	lr, r1, #1
 80123ce:	e843 ec00 	strex	ip, lr, [r3]
 80123d2:	f1bc 0f00 	cmp.w	ip, #0
 80123d6:	d1f6      	bne.n	80123c6 <work_q_main+0x1c>
 80123d8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
 80123dc:	07cb      	lsls	r3, r1, #31
 80123de:	d500      	bpl.n	80123e2 <work_q_main+0x38>
			handler(work);
 80123e0:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 80123e2:	f7ff fc2b 	bl	8011c3c <_impl_k_yield>
 80123e6:	e7e2      	b.n	80123ae <work_q_main+0x4>

080123e8 <k_work_q_start>:
{
 80123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ea:	b087      	sub	sp, #28
 80123ec:	4604      	mov	r4, r0
 80123ee:	461f      	mov	r7, r3
 80123f0:	460d      	mov	r5, r1
 80123f2:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
 80123f4:	f7ff fa10 	bl	8011818 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 80123f8:	2000      	movs	r0, #0
 80123fa:	9005      	str	r0, [sp, #20]
 80123fc:	9004      	str	r0, [sp, #16]
 80123fe:	9002      	str	r0, [sp, #8]
 8012400:	9001      	str	r0, [sp, #4]
 8012402:	9703      	str	r7, [sp, #12]
 8012404:	9400      	str	r4, [sp, #0]
 8012406:	4b04      	ldr	r3, [pc, #16]	; (8012418 <k_work_q_start+0x30>)
 8012408:	4632      	mov	r2, r6
 801240a:	4629      	mov	r1, r5
 801240c:	f104 0010 	add.w	r0, r4, #16
 8012410:	f7ff ff14 	bl	801223c <_impl_k_thread_create>
}
 8012414:	b007      	add	sp, #28
 8012416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012418:	080123ab 	.word	0x080123ab

0801241c <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
 801241c:	b500      	push	{lr}
 801241e:	f100 0308 	add.w	r3, r0, #8
 8012422:	f3bf 8f5b 	dmb	ish
 8012426:	e853 2f00 	ldrex	r2, [r3]
 801242a:	f022 0201 	bic.w	r2, r2, #1
 801242e:	e843 2e00 	strex	lr, r2, [r3]
 8012432:	f1be 0f00 	cmp.w	lr, #0
 8012436:	d1f6      	bne.n	8012426 <k_delayed_work_init+0xa>
 8012438:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
 801243c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012440:	61c3      	str	r3, [r0, #28]
	t->func = func;
 8012442:	4a04      	ldr	r2, [pc, #16]	; (8012454 <k_delayed_work_init+0x38>)
	work->handler = handler;
 8012444:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
 8012446:	2300      	movs	r3, #0
 8012448:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
 801244a:	6143      	str	r3, [r0, #20]
	t->func = func;
 801244c:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
 801244e:	6243      	str	r3, [r0, #36]	; 0x24
 8012450:	f85d fb04 	ldr.w	pc, [sp], #4
 8012454:	080123a1 	.word	0x080123a1

08012458 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
 8012458:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
 801245a:	f04f 0310 	mov.w	r3, #16
 801245e:	f3ef 8411 	mrs	r4, BASEPRI
 8012462:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
 8012466:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012468:	b923      	cbnz	r3, 8012474 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801246a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
 801246e:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
 8012472:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8012474:	f3bf 8f5b 	dmb	ish
 8012478:	6883      	ldr	r3, [r0, #8]
 801247a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
 801247e:	07da      	lsls	r2, r3, #31
 8012480:	d51d      	bpl.n	80124be <k_delayed_work_cancel+0x66>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
 8012482:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8012484:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
 8012486:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8012488:	2b00      	cmp	r3, #0
 801248a:	d0ee      	beq.n	801246a <k_delayed_work_cancel+0x12>
		if (test == node) {
 801248c:	4298      	cmp	r0, r3
 801248e:	d113      	bne.n	80124b8 <k_delayed_work_cancel+0x60>
 8012490:	6803      	ldr	r3, [r0, #0]
 8012492:	6855      	ldr	r5, [r2, #4]
	if (!prev_node) {
 8012494:	b959      	cbnz	r1, 80124ae <k_delayed_work_cancel+0x56>
		if (list->tail == node) {
 8012496:	42a8      	cmp	r0, r5
		list->head = node->next;
 8012498:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
 801249a:	d100      	bne.n	801249e <k_delayed_work_cancel+0x46>
			list->tail = list->head;
 801249c:	6053      	str	r3, [r2, #4]
	node->next = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
 80124a2:	2300      	movs	r3, #0
 80124a4:	6243      	str	r3, [r0, #36]	; 0x24
 80124a6:	f384 8811 	msr	BASEPRI, r4
	return 0;
 80124aa:	4618      	mov	r0, r3
 80124ac:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
 80124ae:	42a8      	cmp	r0, r5
		prev_node->next = node->next;
 80124b0:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
 80124b2:	bf08      	it	eq
 80124b4:	6051      	streq	r1, [r2, #4]
 80124b6:	e7f2      	b.n	801249e <k_delayed_work_cancel+0x46>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 80124b8:	4619      	mov	r1, r3
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	e7e4      	b.n	8012488 <k_delayed_work_cancel+0x30>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 80124be:	69c1      	ldr	r1, [r0, #28]
 80124c0:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
 80124c2:	f100 020c 	add.w	r2, r0, #12
 80124c6:	d0ec      	beq.n	80124a2 <k_delayed_work_cancel+0x4a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 80124c8:	4b08      	ldr	r3, [pc, #32]	; (80124ec <k_delayed_work_cancel+0x94>)
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
 80124ce:	bf1f      	itttt	ne
 80124d0:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 80124d2:	6913      	ldrne	r3, [r2, #16]
 80124d4:	185b      	addne	r3, r3, r1
 80124d6:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
 80124d8:	6903      	ldr	r3, [r0, #16]
 80124da:	68c2      	ldr	r2, [r0, #12]
 80124dc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80124de:	68c2      	ldr	r2, [r0, #12]
 80124e0:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 80124e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124e6:	61c3      	str	r3, [r0, #28]
 80124e8:	e7db      	b.n	80124a2 <k_delayed_work_cancel+0x4a>
 80124ea:	bf00      	nop
 80124ec:	20001358 	.word	0x20001358

080124f0 <k_delayed_work_submit_to_queue>:
{
 80124f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124f2:	4607      	mov	r7, r0
 80124f4:	460c      	mov	r4, r1
 80124f6:	4616      	mov	r6, r2
	__asm__ volatile(
 80124f8:	f04f 0310 	mov.w	r3, #16
 80124fc:	f3ef 8511 	mrs	r5, BASEPRI
 8012500:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
 8012504:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012506:	b123      	cbz	r3, 8012512 <k_delayed_work_submit_to_queue+0x22>
 8012508:	4283      	cmp	r3, r0
 801250a:	d00c      	beq.n	8012526 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
 801250c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8012510:	e00e      	b.n	8012530 <k_delayed_work_submit_to_queue+0x40>
	if (work->work_q == work_q) {
 8012512:	b140      	cbz	r0, 8012526 <k_delayed_work_submit_to_queue+0x36>
	work->work_q = work_q;
 8012514:	6267      	str	r7, [r4, #36]	; 0x24
 8012516:	2300      	movs	r3, #0
	if (!delay) {
 8012518:	b96e      	cbnz	r6, 8012536 <k_delayed_work_submit_to_queue+0x46>
		k_work_submit_to_queue(work_q, &work->work);
 801251a:	4621      	mov	r1, r4
 801251c:	4638      	mov	r0, r7
 801251e:	f7ff ff27 	bl	8012370 <k_work_submit_to_queue>
	err = 0;
 8012522:	2000      	movs	r0, #0
 8012524:	e004      	b.n	8012530 <k_delayed_work_submit_to_queue+0x40>
		err = k_delayed_work_cancel(work);
 8012526:	4620      	mov	r0, r4
 8012528:	f7ff ff96 	bl	8012458 <k_delayed_work_cancel>
		if (err < 0) {
 801252c:	2800      	cmp	r0, #0
 801252e:	daf1      	bge.n	8012514 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012530:	f385 8811 	msr	BASEPRI, r5
}
 8012534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_add_timeout(NULL, &work->timeout, NULL,
 8012536:	3601      	adds	r6, #1
 8012538:	f104 000c 	add.w	r0, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
 801253c:	61e6      	str	r6, [r4, #28]
	timeout->thread = thread;
 801253e:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 8012540:	61a3      	str	r3, [r4, #24]
	if (!timeout_in_ticks) {
 8012542:	b976      	cbnz	r6, 8012562 <k_delayed_work_submit_to_queue+0x72>
	__asm__ volatile(
 8012544:	f04f 0210 	mov.w	r2, #16
 8012548:	f3ef 8311 	mrs	r3, BASEPRI
 801254c:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012554:	61e2      	str	r2, [r4, #28]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012556:	f383 8811 	msr	BASEPRI, r3
		if (timeout->func) {
 801255a:	6a22      	ldr	r2, [r4, #32]
 801255c:	b33a      	cbz	r2, 80125ae <k_delayed_work_submit_to_queue+0xbe>
			timeout->func(timeout);
 801255e:	4790      	blx	r2
 8012560:	e7df      	b.n	8012522 <k_delayed_work_submit_to_queue+0x32>
	return list->head == list;
 8012562:	4a14      	ldr	r2, [pc, #80]	; (80125b4 <k_delayed_work_submit_to_queue+0xc4>)
 8012564:	4611      	mov	r1, r2
 8012566:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801256a:	428b      	cmp	r3, r1
 801256c:	d106      	bne.n	801257c <k_delayed_work_submit_to_queue+0x8c>
	node->next = list;
 801256e:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
 8012570:	6913      	ldr	r3, [r2, #16]
 8012572:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
 8012574:	6913      	ldr	r3, [r2, #16]
 8012576:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8012578:	6110      	str	r0, [r2, #16]
 801257a:	e7d2      	b.n	8012522 <k_delayed_work_submit_to_queue+0x32>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 801257c:	2b00      	cmp	r3, #0
 801257e:	d0f6      	beq.n	801256e <k_delayed_work_submit_to_queue+0x7e>
 8012580:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
 8012584:	69e6      	ldr	r6, [r4, #28]
 8012586:	691f      	ldr	r7, [r3, #16]
 8012588:	42be      	cmp	r6, r7
 801258a:	dc08      	bgt.n	801259e <k_delayed_work_submit_to_queue+0xae>
		node->prev = insert_point->prev;
 801258c:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 801258e:	1bbe      	subs	r6, r7, r6
 8012590:	611e      	str	r6, [r3, #16]
 8012592:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
 8012594:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
 801259a:	6058      	str	r0, [r3, #4]
 801259c:	e7c1      	b.n	8012522 <k_delayed_work_submit_to_queue+0x32>
		*delta -= in_q->delta_ticks_from_prev;
 801259e:	1bf6      	subs	r6, r6, r7
	return (node == list->tail) ? NULL : node->next;
 80125a0:	4573      	cmp	r3, lr
 80125a2:	61e6      	str	r6, [r4, #28]
 80125a4:	d0e3      	beq.n	801256e <k_delayed_work_submit_to_queue+0x7e>
 80125a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1eb      	bne.n	8012584 <k_delayed_work_submit_to_queue+0x94>
 80125ac:	e7df      	b.n	801256e <k_delayed_work_submit_to_queue+0x7e>
	err = 0;
 80125ae:	4610      	mov	r0, r2
 80125b0:	e7be      	b.n	8012530 <k_delayed_work_submit_to_queue+0x40>
 80125b2:	bf00      	nop
 80125b4:	20001358 	.word	0x20001358

080125b8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80125b8:	7a42      	ldrb	r2, [r0, #9]
 80125ba:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 80125be:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80125c2:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 80125c4:	d104      	bne.n	80125d0 <_ready_thread+0x18>
 80125c6:	6a03      	ldr	r3, [r0, #32]
 80125c8:	3301      	adds	r3, #1
 80125ca:	d101      	bne.n	80125d0 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
 80125cc:	f7ff b9d6 	b.w	801197c <_add_thread_to_ready_q>
 80125d0:	4770      	bx	lr

080125d2 <_unpend_thread>:
	node->prev->next = node->next;
 80125d2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80125d6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80125d8:	6802      	ldr	r2, [r0, #0]
 80125da:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 80125dc:	7a43      	ldrb	r3, [r0, #9]
 80125de:	f023 0302 	bic.w	r3, r3, #2
 80125e2:	7243      	strb	r3, [r0, #9]
 80125e4:	4770      	bx	lr
	...

080125e8 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 80125e8:	6903      	ldr	r3, [r0, #16]
 80125ea:	1c5a      	adds	r2, r3, #1
 80125ec:	d011      	beq.n	8012612 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 80125ee:	4a0a      	ldr	r2, [pc, #40]	; (8012618 <_abort_timeout+0x30>)
 80125f0:	6912      	ldr	r2, [r2, #16]
 80125f2:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
 80125f4:	bf1f      	itttt	ne
 80125f6:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 80125f8:	690a      	ldrne	r2, [r1, #16]
 80125fa:	189b      	addne	r3, r3, r2
 80125fc:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
 80125fe:	e890 000c 	ldmia.w	r0, {r2, r3}
 8012602:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8012604:	6802      	ldr	r2, [r0, #0]
 8012606:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801260c:	6103      	str	r3, [r0, #16]
	return 0;
 801260e:	2000      	movs	r0, #0
 8012610:	4770      	bx	lr
		return _INACTIVE;
 8012612:	4618      	mov	r0, r3
}
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	20001358 	.word	0x20001358

0801261c <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
 801261c:	b430      	push	{r4, r5}
	timeout->thread = thread;
 801261e:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
 8012620:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
 8012622:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
 8012624:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 8012626:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
 8012628:	b972      	cbnz	r2, 8012648 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
 801262a:	f04f 0110 	mov.w	r1, #16
 801262e:	f3ef 8211 	mrs	r2, BASEPRI
 8012632:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801263a:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801263c:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
 8012640:	6943      	ldr	r3, [r0, #20]
 8012642:	b16b      	cbz	r3, 8012660 <_add_timeout.constprop.9+0x44>
}
 8012644:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
 8012646:	4718      	bx	r3
	return list->head == list;
 8012648:	4911      	ldr	r1, [pc, #68]	; (8012690 <_add_timeout.constprop.9+0x74>)
 801264a:	4608      	mov	r0, r1
 801264c:	f850 2f0c 	ldr.w	r2, [r0, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012650:	4282      	cmp	r2, r0
 8012652:	d10d      	bne.n	8012670 <_add_timeout.constprop.9+0x54>
	node->next = list;
 8012654:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
 8012656:	690a      	ldr	r2, [r1, #16]
 8012658:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 801265a:	690a      	ldr	r2, [r1, #16]
 801265c:	6013      	str	r3, [r2, #0]
	list->tail = node;
 801265e:	610b      	str	r3, [r1, #16]
}
 8012660:	bc30      	pop	{r4, r5}
 8012662:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
 8012664:	1b64      	subs	r4, r4, r5
 8012666:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
 8012668:	690c      	ldr	r4, [r1, #16]
 801266a:	42a2      	cmp	r2, r4
 801266c:	d0f2      	beq.n	8012654 <_add_timeout.constprop.9+0x38>
 801266e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8012670:	2a00      	cmp	r2, #0
 8012672:	d0ef      	beq.n	8012654 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
 8012674:	691c      	ldr	r4, [r3, #16]
 8012676:	6915      	ldr	r5, [r2, #16]
 8012678:	42ac      	cmp	r4, r5
 801267a:	dcf3      	bgt.n	8012664 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
 801267c:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
 801267e:	1b2c      	subs	r4, r5, r4
 8012680:	6114      	str	r4, [r2, #16]
 8012682:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
 8012684:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
 8012686:	6851      	ldr	r1, [r2, #4]
 8012688:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
 801268a:	6053      	str	r3, [r2, #4]
 801268c:	e7e8      	b.n	8012660 <_add_timeout.constprop.9+0x44>
 801268e:	bf00      	nop
 8012690:	20001358 	.word	0x20001358

08012694 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
 8012694:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012696:	2b00      	cmp	r3, #0
{
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	4604      	mov	r4, r0
 801269c:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
 80126a0:	dd0b      	ble.n	80126ba <_timer_expiration_handler+0x26>
	__asm__ volatile(
 80126a2:	f04f 0310 	mov.w	r3, #16
 80126a6:	f3ef 8611 	mrs	r6, BASEPRI
 80126aa:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
 80126ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80126b0:	4629      	mov	r1, r5
 80126b2:	f7ff ffb3 	bl	801261c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80126b6:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
 80126ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80126bc:	3301      	adds	r3, #1
 80126be:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
 80126c0:	6a23      	ldr	r3, [r4, #32]
 80126c2:	b10b      	cbz	r3, 80126c8 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
 80126c4:	4620      	mov	r0, r4
 80126c6:	4798      	blx	r3
	return list->head == list;
 80126c8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80126ca:	42ac      	cmp	r4, r5
 80126cc:	d010      	beq.n	80126f0 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
 80126ce:	b17c      	cbz	r4, 80126f0 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
 80126d0:	4620      	mov	r0, r4
 80126d2:	f7ff ff7e 	bl	80125d2 <_unpend_thread>
	__asm__ volatile(
 80126d6:	f04f 0310 	mov.w	r3, #16
 80126da:	f3ef 8511 	mrs	r5, BASEPRI
 80126de:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
 80126e2:	4620      	mov	r0, r4
 80126e4:	f7ff ff68 	bl	80125b8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80126e8:	f385 8811 	msr	BASEPRI, r5
 80126ec:	2300      	movs	r3, #0
 80126ee:	6663      	str	r3, [r4, #100]	; 0x64
 80126f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080126f4 <k_timer_init>:
void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
 80126f4:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;

	sys_dlist_init(&timer->wait_q);
 80126f6:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 80126fa:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 80126fc:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
 80126fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	timer->status = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	6102      	str	r2, [r0, #16]
	t->func = func;
 8012706:	4a04      	ldr	r2, [pc, #16]	; (8012718 <k_timer_init+0x24>)
	timer->expiry_fn = expiry_fn;
 8012708:	6201      	str	r1, [r0, #32]
	timer->status = 0;
 801270a:	62c3      	str	r3, [r0, #44]	; 0x2c
	t->wait_q = NULL;
 801270c:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
 801270e:	6083      	str	r3, [r0, #8]
	t->func = func;
 8012710:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
 8012712:	6303      	str	r3, [r0, #48]	; 0x30
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	08012695 	.word	0x08012695

0801271c <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
 801271c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801271e:	4604      	mov	r4, r0
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
 8012720:	9200      	str	r2, [sp, #0]
	duration_in_ticks = _ms_to_ticks(duration);
 8012722:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 8012724:	f04f 0310 	mov.w	r3, #16
 8012728:	f3ef 8511 	mrs	r5, BASEPRI
 801272c:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
 8012730:	6903      	ldr	r3, [r0, #16]
 8012732:	3301      	adds	r3, #1
 8012734:	d001      	beq.n	801273a <_impl_k_timer_start+0x1e>
		_abort_timeout(&timer->timeout);
 8012736:	f7ff ff57 	bl	80125e8 <_abort_timeout>
	}

	timer->period = period_in_ticks;
 801273a:	9b00      	ldr	r3, [sp, #0]
 801273c:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	f104 0118 	add.w	r1, r4, #24
 8012748:	4620      	mov	r0, r4
 801274a:	f7ff ff67 	bl	801261c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801274e:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);
}
 8012752:	b003      	add	sp, #12
 8012754:	bd30      	pop	{r4, r5, pc}
	...

08012758 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
 8012758:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
 801275a:	f04f 0310 	mov.w	r3, #16
 801275e:	f3ef 8411 	mrs	r4, BASEPRI
 8012762:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012766:	6903      	ldr	r3, [r0, #16]
 8012768:	3301      	adds	r3, #1
 801276a:	d014      	beq.n	8012796 <_timeout_remaining_get+0x3e>
	return list->head == list;
 801276c:	490c      	ldr	r1, [pc, #48]	; (80127a0 <_timeout_remaining_get+0x48>)
 801276e:	460a      	mov	r2, r1
 8012770:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012774:	4293      	cmp	r3, r2
 8012776:	d010      	beq.n	801279a <_timeout_remaining_get+0x42>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
 8012778:	691a      	ldr	r2, [r3, #16]
 801277a:	6909      	ldr	r1, [r1, #16]
		while (t != timeout) {
 801277c:	4283      	cmp	r3, r0
 801277e:	d103      	bne.n	8012788 <_timeout_remaining_get+0x30>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012780:	f384 8811 	msr	BASEPRI, r4
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
 8012784:	4610      	mov	r0, r2
 8012786:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8012788:	b13b      	cbz	r3, 801279a <_timeout_remaining_get+0x42>
	return (node == list->tail) ? NULL : node->next;
 801278a:	428b      	cmp	r3, r1
 801278c:	d005      	beq.n	801279a <_timeout_remaining_get+0x42>
 801278e:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
 8012790:	691d      	ldr	r5, [r3, #16]
 8012792:	442a      	add	r2, r5
 8012794:	e7f2      	b.n	801277c <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
 8012796:	2200      	movs	r2, #0
 8012798:	e7f2      	b.n	8012780 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
 801279a:	2300      	movs	r3, #0
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	deff      	udf	#255	; 0xff
 80127a0:	20001358 	.word	0x20001358

080127a4 <sys_dlist_remove>:
	node->prev->next = node->next;
 80127a4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80127a8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80127aa:	6802      	ldr	r2, [r0, #0]
 80127ac:	6053      	str	r3, [r2, #4]
 80127ae:	4770      	bx	lr

080127b0 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	2414      	movs	r4, #20
 80127b4:	4615      	mov	r5, r2
 80127b6:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
 80127ba:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
 80127bc:	2900      	cmp	r1, #0
 80127be:	da00      	bge.n	80127c2 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
 80127c0:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
 80127c2:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
 80127c4:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
 80127c6:	f003 030f 	and.w	r3, r3, #15
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	d003      	beq.n	80127d6 <clear_event_registrations+0x26>
 80127ce:	2b04      	cmp	r3, #4
 80127d0:	d001      	beq.n	80127d6 <clear_event_registrations+0x26>
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	d102      	bne.n	80127dc <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
 80127d6:	4620      	mov	r0, r4
 80127d8:	f7ff ffe4 	bl	80127a4 <sys_dlist_remove>
 80127dc:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
 80127e0:	f04f 0310 	mov.w	r3, #16
 80127e4:	f3ef 8511 	mrs	r5, BASEPRI
 80127e8:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
 80127ec:	3901      	subs	r1, #1
 80127ee:	3c14      	subs	r4, #20
 80127f0:	e7e4      	b.n	80127bc <clear_event_registrations+0xc>
	...

080127f4 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
 80127f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
 80127f6:	2300      	movs	r3, #0
 80127f8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
 80127fa:	6883      	ldr	r3, [r0, #8]
{
 80127fc:	4605      	mov	r5, r0
 80127fe:	460e      	mov	r6, r1
 8012800:	4617      	mov	r7, r2
	if (!event->poller) {
 8012802:	2b00      	cmp	r3, #0
 8012804:	d049      	beq.n	801289a <_signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
 8012806:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
 8012808:	7a4b      	ldrb	r3, [r1, #9]
 801280a:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
 801280e:	0798      	lsls	r0, r3, #30
 8012810:	724a      	strb	r2, [r1, #9]
 8012812:	d542      	bpl.n	801289a <_signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
 8012814:	6a0b      	ldr	r3, [r1, #32]
 8012816:	3302      	adds	r3, #2
 8012818:	d04a      	beq.n	80128b0 <_signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
 801281a:	4608      	mov	r0, r1
 801281c:	f7ff ffc2 	bl	80127a4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8012820:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012822:	6a0c      	ldr	r4, [r1, #32]
 8012824:	f023 0302 	bic.w	r3, r3, #2
 8012828:	1c62      	adds	r2, r4, #1
 801282a:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
 801282c:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012830:	d00c      	beq.n	801284c <_signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 8012832:	4b21      	ldr	r3, [pc, #132]	; (80128b8 <_signal_poll_event+0xc4>)
 8012834:	691b      	ldr	r3, [r3, #16]
 8012836:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
 8012838:	bf1f      	itttt	ne
 801283a:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 801283c:	6913      	ldrne	r3, [r2, #16]
 801283e:	191b      	addne	r3, r3, r4
 8012840:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
 8012842:	f7ff ffaf 	bl	80127a4 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801284a:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
 801284c:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
 801284e:	2e00      	cmp	r6, #0
 8012850:	bf0c      	ite	eq
 8012852:	f06f 0303 	mvneq.w	r3, #3
 8012856:	2300      	movne	r3, #0
 8012858:	f010 041f 	ands.w	r4, r0, #31
 801285c:	664b      	str	r3, [r1, #100]	; 0x64
 801285e:	d11c      	bne.n	801289a <_signal_poll_event+0xa6>
 8012860:	6a0b      	ldr	r3, [r1, #32]
 8012862:	3301      	adds	r3, #1
 8012864:	d119      	bne.n	801289a <_signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
 8012866:	4608      	mov	r0, r1
 8012868:	f7ff f888 	bl	801197c <_add_thread_to_ready_q>
 801286c:	f3ef 8305 	mrs	r3, IPSR
 8012870:	2b0d      	cmp	r3, #13
 8012872:	d81b      	bhi.n	80128ac <_signal_poll_event+0xb8>
 8012874:	b123      	cbz	r3, 8012880 <_signal_poll_event+0x8c>
 8012876:	4b11      	ldr	r3, [pc, #68]	; (80128bc <_signal_poll_event+0xc8>)
 8012878:	6858      	ldr	r0, [r3, #4]
 801287a:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 801287e:	d00b      	beq.n	8012898 <_signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
 8012880:	4b0d      	ldr	r3, [pc, #52]	; (80128b8 <_signal_poll_event+0xc4>)
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	895b      	ldrh	r3, [r3, #10]
 8012886:	2b7f      	cmp	r3, #127	; 0x7f
 8012888:	d901      	bls.n	801288e <_signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
 801288a:	2000      	movs	r0, #0
 801288c:	e004      	b.n	8012898 <_signal_poll_event+0xa4>
 801288e:	f7ff f96b 	bl	8011b68 <__must_switch_threads>
 8012892:	3000      	adds	r0, #0
 8012894:	bf18      	it	ne
 8012896:	2001      	movne	r0, #1
 8012898:	6038      	str	r0, [r7, #0]
	event->state |= state;
 801289a:	7b6b      	ldrb	r3, [r5, #13]
 801289c:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
 80128a0:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
 80128a4:	2000      	movs	r0, #0
	event->state |= state;
 80128a6:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
 80128a8:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
 80128aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
 80128ac:	4620      	mov	r0, r4
 80128ae:	e7f3      	b.n	8012898 <_signal_poll_event+0xa4>
		return -EAGAIN;
 80128b0:	f06f 000a 	mvn.w	r0, #10
 80128b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20001358 	.word	0x20001358
 80128bc:	e000ed00 	.word	0xe000ed00

080128c0 <add_event>:
	return list->head == list;
 80128c0:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80128c2:	4298      	cmp	r0, r3
{
 80128c4:	b530      	push	{r4, r5, lr}
 80128c6:	d00a      	beq.n	80128de <add_event+0x1e>
 80128c8:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
 80128ca:	b144      	cbz	r4, 80128de <add_event+0x1e>
 80128cc:	68a5      	ldr	r5, [r4, #8]
 80128ce:	6812      	ldr	r2, [r2, #0]
 80128d0:	682d      	ldr	r5, [r5, #0]
 80128d2:	f992 200a 	ldrsb.w	r2, [r2, #10]
 80128d6:	f995 500a 	ldrsb.w	r5, [r5, #10]
 80128da:	4295      	cmp	r5, r2
 80128dc:	da17      	bge.n	801290e <add_event+0x4e>
	node->next = list;
 80128de:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 80128e0:	6843      	ldr	r3, [r0, #4]
 80128e2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 80128e4:	6843      	ldr	r3, [r0, #4]
 80128e6:	6019      	str	r1, [r3, #0]
	list->tail = node;
 80128e8:	6041      	str	r1, [r0, #4]
 80128ea:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
 80128ec:	689d      	ldr	r5, [r3, #8]
 80128ee:	682d      	ldr	r5, [r5, #0]
 80128f0:	f995 500a 	ldrsb.w	r5, [r5, #10]
 80128f4:	4295      	cmp	r5, r2
 80128f6:	dd06      	ble.n	8012906 <add_event+0x46>
		node->prev = insert_point->prev;
 80128f8:	685a      	ldr	r2, [r3, #4]
 80128fa:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 80128fc:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 80128fe:	685a      	ldr	r2, [r3, #4]
 8012900:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 8012902:	6059      	str	r1, [r3, #4]
 8012904:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 8012906:	42a3      	cmp	r3, r4
 8012908:	d003      	beq.n	8012912 <add_event+0x52>
 801290a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 801290c:	b10b      	cbz	r3, 8012912 <add_event+0x52>
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1ec      	bne.n	80128ec <add_event+0x2c>
	node->prev = list->tail;
 8012912:	e881 0011 	stmia.w	r1, {r0, r4}
 8012916:	e7e5      	b.n	80128e4 <add_event+0x24>

08012918 <k_poll_event_init>:
{
 8012918:	b530      	push	{r4, r5, lr}
	event->type = type;
 801291a:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
 801291c:	6103      	str	r3, [r0, #16]
	event->type = type;
 801291e:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
 8012922:	7b81      	ldrb	r1, [r0, #14]
 8012924:	f362 0100 	bfi	r1, r2, #0, #1
 8012928:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
 801292a:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
 801292c:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
 801292e:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
 8012932:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
 8012936:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
 8012938:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
 801293a:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 801293c:	bd30      	pop	{r4, r5, pc}
	...

08012940 <k_poll>:
{
 8012940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	b087      	sub	sp, #28
 8012946:	4680      	mov	r8, r0
 8012948:	9101      	str	r1, [sp, #4]
 801294a:	4691      	mov	r9, r2
 801294c:	f04f 0310 	mov.w	r3, #16
 8012950:	f3ef 8111 	mrs	r1, BASEPRI
 8012954:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
 8012958:	4d4a      	ldr	r5, [pc, #296]	; (8012a84 <k_poll+0x144>)
 801295a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
 801295c:	7a53      	ldrb	r3, [r2, #9]
 801295e:	f043 0320 	orr.w	r3, r3, #32
 8012962:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012964:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
 8012968:	f10d 0a18 	add.w	sl, sp, #24
 801296c:	68aa      	ldr	r2, [r5, #8]
 801296e:	f84a 2d0c 	str.w	r2, [sl, #-12]!
 8012972:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
 8012974:	2700      	movs	r7, #0
	int last_registered = -1, rc;
 8012976:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
 801297a:	9b01      	ldr	r3, [sp, #4]
 801297c:	429f      	cmp	r7, r3
 801297e:	db15      	blt.n	80129ac <k_poll+0x6c>
	__asm__ volatile(
 8012980:	f04f 0310 	mov.w	r3, #16
 8012984:	f3ef 8711 	mrs	r7, BASEPRI
 8012988:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
 801298c:	68aa      	ldr	r2, [r5, #8]
 801298e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
 8012990:	f013 0420 	ands.w	r4, r3, #32
 8012994:	d144      	bne.n	8012a20 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
 8012996:	463a      	mov	r2, r7
 8012998:	4631      	mov	r1, r6
 801299a:	4640      	mov	r0, r8
 801299c:	f7ff ff08 	bl	80127b0 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80129a0:	f387 8811 	msr	BASEPRI, r7
}
 80129a4:	4620      	mov	r0, r4
 80129a6:	b007      	add	sp, #28
 80129a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
 80129ac:	f04f 0210 	mov.w	r2, #16
 80129b0:	f3ef 8b11 	mrs	fp, BASEPRI
 80129b4:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
 80129b8:	7b61      	ldrb	r1, [r4, #13]
 80129ba:	f001 020f 	and.w	r2, r1, #15
 80129be:	2a02      	cmp	r2, #2
 80129c0:	d003      	beq.n	80129ca <k_poll+0x8a>
 80129c2:	2a04      	cmp	r2, #4
 80129c4:	d004      	beq.n	80129d0 <k_poll+0x90>
 80129c6:	2a01      	cmp	r2, #1
 80129c8:	d106      	bne.n	80129d8 <k_poll+0x98>
		if (event->signal->signaled) {
 80129ca:	6920      	ldr	r0, [r4, #16]
 80129cc:	6880      	ldr	r0, [r0, #8]
 80129ce:	e001      	b.n	80129d4 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
 80129d0:	6920      	ldr	r0, [r4, #16]
 80129d2:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d148      	bne.n	8012a6a <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
 80129d8:	f1b9 0f00 	cmp.w	r9, #0
 80129dc:	d016      	beq.n	8012a0c <k_poll+0xcc>
 80129de:	68a9      	ldr	r1, [r5, #8]
 80129e0:	7a49      	ldrb	r1, [r1, #9]
 80129e2:	068b      	lsls	r3, r1, #26
 80129e4:	d512      	bpl.n	8012a0c <k_poll+0xcc>
	switch (event->type) {
 80129e6:	2a02      	cmp	r2, #2
 80129e8:	d007      	beq.n	80129fa <k_poll+0xba>
 80129ea:	2a04      	cmp	r2, #4
 80129ec:	d013      	beq.n	8012a16 <k_poll+0xd6>
 80129ee:	2a01      	cmp	r2, #1
 80129f0:	d109      	bne.n	8012a06 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
 80129f2:	4652      	mov	r2, sl
 80129f4:	4621      	mov	r1, r4
 80129f6:	6920      	ldr	r0, [r4, #16]
 80129f8:	e003      	b.n	8012a02 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
 80129fa:	6920      	ldr	r0, [r4, #16]
 80129fc:	4652      	mov	r2, sl
 80129fe:	4621      	mov	r1, r4
 8012a00:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
 8012a02:	f7ff ff5d 	bl	80128c0 <add_event>
	event->poller = poller;
 8012a06:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
 8012a0a:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012a0c:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
 8012a10:	3701      	adds	r7, #1
 8012a12:	3414      	adds	r4, #20
 8012a14:	e7b1      	b.n	801297a <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
 8012a16:	6920      	ldr	r0, [r4, #16]
 8012a18:	4652      	mov	r2, sl
 8012a1a:	4621      	mov	r1, r4
 8012a1c:	3008      	adds	r0, #8
 8012a1e:	e7f0      	b.n	8012a02 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
 8012a20:	f023 0320 	bic.w	r3, r3, #32
 8012a24:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
 8012a26:	f1b9 0f00 	cmp.w	r9, #0
 8012a2a:	d104      	bne.n	8012a36 <k_poll+0xf6>
 8012a2c:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
 8012a30:	f06f 040a 	mvn.w	r4, #10
 8012a34:	e7b6      	b.n	80129a4 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
 8012a36:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
 8012a38:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
 8012a3a:	9004      	str	r0, [sp, #16]
 8012a3c:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
 8012a3e:	f7ff f883 	bl	8011b48 <_pend_current_thread>
	_update_time_slice_before_swap();
 8012a42:	f7ff f967 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8012a46:	4638      	mov	r0, r7
 8012a48:	f7f0 f998 	bl	8002d7c <__swap>
 8012a4c:	4604      	mov	r4, r0
	__asm__ volatile(
 8012a4e:	f04f 0310 	mov.w	r3, #16
 8012a52:	f3ef 8511 	mrs	r5, BASEPRI
 8012a56:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
 8012a5a:	462a      	mov	r2, r5
 8012a5c:	4631      	mov	r1, r6
 8012a5e:	4640      	mov	r0, r8
 8012a60:	f7ff fea6 	bl	80127b0 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012a64:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
 8012a68:	e79c      	b.n	80129a4 <k_poll+0x64>
	event->state |= state;
 8012a6a:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8012a6e:	f362 1107 	bfi	r1, r2, #4, #4
 8012a72:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
 8012a74:	68a9      	ldr	r1, [r5, #8]
	event->poller = NULL;
 8012a76:	2300      	movs	r3, #0
 8012a78:	60a3      	str	r3, [r4, #8]
 8012a7a:	7a4a      	ldrb	r2, [r1, #9]
 8012a7c:	f022 0220 	bic.w	r2, r2, #32
 8012a80:	724a      	strb	r2, [r1, #9]
 8012a82:	e7c3      	b.n	8012a0c <k_poll+0xcc>
 8012a84:	20001358 	.word	0x20001358

08012a88 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
 8012a88:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
 8012a8a:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
 8012a8c:	42a0      	cmp	r0, r4
 8012a8e:	d102      	bne.n	8012a96 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
 8012a90:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
 8012a92:	b002      	add	sp, #8
 8012a94:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
 8012a96:	4620      	mov	r0, r4
 8012a98:	f7ff fe84 	bl	80127a4 <sys_dlist_remove>
	if (!poll_event) {
 8012a9c:	2c00      	cmp	r4, #0
 8012a9e:	d0f7      	beq.n	8012a90 <_handle_obj_poll_events+0x8>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
 8012aa0:	aa01      	add	r2, sp, #4
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7ff fea6 	bl	80127f4 <_signal_poll_event>
	return must_reschedule;
 8012aa8:	9801      	ldr	r0, [sp, #4]
 8012aaa:	e7f2      	b.n	8012a92 <_handle_obj_poll_events+0xa>

08012aac <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
 8012aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 8012aae:	f04f 0310 	mov.w	r3, #16
 8012ab2:	f3ef 8511 	mrs	r5, BASEPRI
 8012ab6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 8012aba:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
 8012abc:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
 8012abe:	42a0      	cmp	r0, r4
	signal->signaled = 1;
 8012ac0:	f04f 0101 	mov.w	r1, #1
 8012ac4:	6081      	str	r1, [r0, #8]
 8012ac6:	d105      	bne.n	8012ad4 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012ac8:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
 8012acc:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
 8012ace:	4620      	mov	r0, r4
 8012ad0:	b003      	add	sp, #12
 8012ad2:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	f7ff fe65 	bl	80127a4 <sys_dlist_remove>
	if (!poll_event) {
 8012ada:	2c00      	cmp	r4, #0
 8012adc:	d0f4      	beq.n	8012ac8 <k_poll_signal+0x1c>
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
 8012ade:	4620      	mov	r0, r4
 8012ae0:	aa01      	add	r2, sp, #4
 8012ae2:	f7ff fe87 	bl	80127f4 <_signal_poll_event>
	if (must_reschedule) {
 8012ae6:	9b01      	ldr	r3, [sp, #4]
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
 8012ae8:	4604      	mov	r4, r0
	if (must_reschedule) {
 8012aea:	b12b      	cbz	r3, 8012af8 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
 8012aec:	f7ff f912 	bl	8011d14 <_update_time_slice_before_swap>
	return __swap(key);
 8012af0:	4628      	mov	r0, r5
 8012af2:	f7f0 f943 	bl	8002d7c <__swap>
 8012af6:	e7ea      	b.n	8012ace <k_poll_signal+0x22>
 8012af8:	f385 8811 	msr	BASEPRI, r5
 8012afc:	e7e7      	b.n	8012ace <k_poll_signal+0x22>

08012afe <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8012afe:	b508      	push	{r3, lr}
	__asm__ volatile(
 8012b00:	f04f 0210 	mov.w	r2, #16
 8012b04:	f3ef 8311 	mrs	r3, BASEPRI
 8012b08:	f382 8811 	msr	BASEPRI, r2
	k_cpu_idle();
 8012b0c:	f7f0 fae8 	bl	80030e0 <k_cpu_idle>
 8012b10:	e7f6      	b.n	8012b00 <idle+0x2>

08012b12 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
 8012b12:	4770      	bx	lr
