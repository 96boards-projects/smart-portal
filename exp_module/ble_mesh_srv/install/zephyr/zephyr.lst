
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20004528 	.word	0x20004528
 8000004:	080031a1 	.word	0x080031a1
 8000008:	080031f1 	.word	0x080031f1
 800000c:	08003051 	.word	0x08003051
 8000010:	08003051 	.word	0x08003051
 8000014:	08003051 	.word	0x08003051
 8000018:	08003051 	.word	0x08003051
 800001c:	08003051 	.word	0x08003051
 8000020:	08003051 	.word	0x08003051
 8000024:	08003051 	.word	0x08003051
 8000028:	08003051 	.word	0x08003051
 800002c:	08002ca5 	.word	0x08002ca5
 8000030:	08003051 	.word	0x08003051
 8000034:	08003051 	.word	0x08003051
 8000038:	08002c61 	.word	0x08002c61
 800003c:	08004929 	.word	0x08004929

08000040 <_irq_vector_table>:
 8000040:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000050:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000060:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000070:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000080:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000090:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000a0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000b0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000c0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000d0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000e0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 80000f0:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000100:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000110:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000120:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000130:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000140:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000150:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000160:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000170:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000180:	0800317d 0800317d 0800317d 0800317d     }1..}1..}1..}1..
 8000190:	0800317d                                }1..

08000194 <_sw_isr_table>:
 8000194:	00000000 08002fe5 200063d8 08003337     ...../...c. 73..
 80001a4:	200063d8 08003355 200063d8 0800335f     .c. U3...c. _3..
 80001b4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80001c4:	200063d8 080032f1 200063d8 080032fb     .c. .2...c. .2..
 80001d4:	200063d8 08003305 200063d8 0800330f     .c. .3...c. .3..
 80001e4:	200063d8 08003319 00000000 08002fe5     .c. .3......./..
 80001f4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000204:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000214:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000224:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000234:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000244:	00000000 08002fe5 200063d8 08003323     ...../...c. #3..
 8000254:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000264:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000274:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000284:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000294:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80002a4:	00000000 08002fe5 20006468 0800414d     ...../..hd. MA..
 80002b4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80002c4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80002d4:	200063d8 0800332d 200063d8 08003341     .c. -3...c. A3..
 80002e4:	200063d8 0800334b 00000000 08002fe5     .c. K3......./..
 80002f4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000304:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000314:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000324:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000334:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000344:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000354:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000364:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000374:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000384:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000394:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003a4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003b4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003c4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003d4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003e4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 80003f4:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000404:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000414:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000424:	00000000 08002fe5 00000000 08002fe5     ...../......./..
 8000434:	00000000 08002fe5                       ...../..

0800043c <__aeabi_llsl>:
 800043c:	4091      	lsls	r1, r2
 800043e:	1c03      	adds	r3, r0, #0
 8000440:	4090      	lsls	r0, r2
 8000442:	469c      	mov	ip, r3
 8000444:	3a20      	subs	r2, #32
 8000446:	4093      	lsls	r3, r2
 8000448:	4319      	orrs	r1, r3
 800044a:	4252      	negs	r2, r2
 800044c:	4663      	mov	r3, ip
 800044e:	40d3      	lsrs	r3, r2
 8000450:	4319      	orrs	r1, r3
 8000452:	4770      	bx	lr

08000454 <__aeabi_ldivmod>:
 8000454:	b97b      	cbnz	r3, 8000476 <__aeabi_ldivmod+0x22>
 8000456:	b972      	cbnz	r2, 8000476 <__aeabi_ldivmod+0x22>
 8000458:	2900      	cmp	r1, #0
 800045a:	bfbe      	ittt	lt
 800045c:	2000      	movlt	r0, #0
 800045e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000462:	e006      	blt.n	8000472 <__aeabi_ldivmod+0x1e>
 8000464:	bf08      	it	eq
 8000466:	2800      	cmpeq	r0, #0
 8000468:	bf1c      	itt	ne
 800046a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800046e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000472:	f000 b9d9 	b.w	8000828 <__aeabi_idiv0>
 8000476:	f1ad 0c08 	sub.w	ip, sp, #8
 800047a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800047e:	2900      	cmp	r1, #0
 8000480:	db09      	blt.n	8000496 <__aeabi_ldivmod+0x42>
 8000482:	2b00      	cmp	r3, #0
 8000484:	db1a      	blt.n	80004bc <__aeabi_ldivmod+0x68>
 8000486:	f000 f861 	bl	800054c <__udivmoddi4>
 800048a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800048e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000492:	b004      	add	sp, #16
 8000494:	4770      	bx	lr
 8000496:	4240      	negs	r0, r0
 8000498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800049c:	2b00      	cmp	r3, #0
 800049e:	db1b      	blt.n	80004d8 <__aeabi_ldivmod+0x84>
 80004a0:	f000 f854 	bl	800054c <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4240      	negs	r0, r0
 80004b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b4:	4252      	negs	r2, r2
 80004b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ba:	4770      	bx	lr
 80004bc:	4252      	negs	r2, r2
 80004be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c2:	f000 f843 	bl	800054c <__udivmoddi4>
 80004c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ce:	b004      	add	sp, #16
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	4770      	bx	lr
 80004d8:	4252      	negs	r2, r2
 80004da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004de:	f000 f835 	bl	800054c <__udivmoddi4>
 80004e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ea:	b004      	add	sp, #16
 80004ec:	4252      	negs	r2, r2
 80004ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_uldivmod>:
 80004f4:	b953      	cbnz	r3, 800050c <__aeabi_uldivmod+0x18>
 80004f6:	b94a      	cbnz	r2, 800050c <__aeabi_uldivmod+0x18>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	bf08      	it	eq
 80004fc:	2800      	cmpeq	r0, #0
 80004fe:	bf1c      	itt	ne
 8000500:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000504:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000508:	f000 b98e 	b.w	8000828 <__aeabi_idiv0>
 800050c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000514:	f000 f81a 	bl	800054c <__udivmoddi4>
 8000518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800051c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000520:	b004      	add	sp, #16
 8000522:	4770      	bx	lr

08000524 <__popcountsi2>:
 8000524:	0843      	lsrs	r3, r0, #1
 8000526:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800052a:	1ac0      	subs	r0, r0, r3
 800052c:	0883      	lsrs	r3, r0, #2
 800052e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000532:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000536:	4418      	add	r0, r3
 8000538:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800053c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000540:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000544:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000548:	0e00      	lsrs	r0, r0, #24
 800054a:	4770      	bx	lr

0800054c <__udivmoddi4>:
 800054c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000550:	468c      	mov	ip, r1
 8000552:	460d      	mov	r5, r1
 8000554:	4604      	mov	r4, r0
 8000556:	9e08      	ldr	r6, [sp, #32]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d151      	bne.n	8000600 <__udivmoddi4+0xb4>
 800055c:	428a      	cmp	r2, r1
 800055e:	4617      	mov	r7, r2
 8000560:	d96d      	bls.n	800063e <__udivmoddi4+0xf2>
 8000562:	fab2 fe82 	clz	lr, r2
 8000566:	f1be 0f00 	cmp.w	lr, #0
 800056a:	d00b      	beq.n	8000584 <__udivmoddi4+0x38>
 800056c:	f1ce 0c20 	rsb	ip, lr, #32
 8000570:	fa01 f50e 	lsl.w	r5, r1, lr
 8000574:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000578:	fa02 f70e 	lsl.w	r7, r2, lr
 800057c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000580:	fa00 f40e 	lsl.w	r4, r0, lr
 8000584:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000588:	0c25      	lsrs	r5, r4, #16
 800058a:	fbbc f8fa 	udiv	r8, ip, sl
 800058e:	fa1f f987 	uxth.w	r9, r7
 8000592:	fb0a cc18 	mls	ip, sl, r8, ip
 8000596:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800059a:	fb08 f309 	mul.w	r3, r8, r9
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d90a      	bls.n	80005b8 <__udivmoddi4+0x6c>
 80005a2:	19ed      	adds	r5, r5, r7
 80005a4:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80005a8:	f080 8123 	bcs.w	80007f2 <__udivmoddi4+0x2a6>
 80005ac:	42ab      	cmp	r3, r5
 80005ae:	f240 8120 	bls.w	80007f2 <__udivmoddi4+0x2a6>
 80005b2:	f1a8 0802 	sub.w	r8, r8, #2
 80005b6:	443d      	add	r5, r7
 80005b8:	1aed      	subs	r5, r5, r3
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	fbb5 f0fa 	udiv	r0, r5, sl
 80005c0:	fb0a 5510 	mls	r5, sl, r0, r5
 80005c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80005c8:	fb00 f909 	mul.w	r9, r0, r9
 80005cc:	45a1      	cmp	r9, r4
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x98>
 80005d0:	19e4      	adds	r4, r4, r7
 80005d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005d6:	f080 810a 	bcs.w	80007ee <__udivmoddi4+0x2a2>
 80005da:	45a1      	cmp	r9, r4
 80005dc:	f240 8107 	bls.w	80007ee <__udivmoddi4+0x2a2>
 80005e0:	3802      	subs	r0, #2
 80005e2:	443c      	add	r4, r7
 80005e4:	eba4 0409 	sub.w	r4, r4, r9
 80005e8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ec:	2100      	movs	r1, #0
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d061      	beq.n	80006b6 <__udivmoddi4+0x16a>
 80005f2:	fa24 f40e 	lsr.w	r4, r4, lr
 80005f6:	2300      	movs	r3, #0
 80005f8:	6034      	str	r4, [r6, #0]
 80005fa:	6073      	str	r3, [r6, #4]
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	428b      	cmp	r3, r1
 8000602:	d907      	bls.n	8000614 <__udivmoddi4+0xc8>
 8000604:	2e00      	cmp	r6, #0
 8000606:	d054      	beq.n	80006b2 <__udivmoddi4+0x166>
 8000608:	2100      	movs	r1, #0
 800060a:	e886 0021 	stmia.w	r6, {r0, r5}
 800060e:	4608      	mov	r0, r1
 8000610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000614:	fab3 f183 	clz	r1, r3
 8000618:	2900      	cmp	r1, #0
 800061a:	f040 808e 	bne.w	800073a <__udivmoddi4+0x1ee>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d302      	bcc.n	8000628 <__udivmoddi4+0xdc>
 8000622:	4282      	cmp	r2, r0
 8000624:	f200 80fa 	bhi.w	800081c <__udivmoddi4+0x2d0>
 8000628:	1a84      	subs	r4, r0, r2
 800062a:	eb65 0503 	sbc.w	r5, r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	46ac      	mov	ip, r5
 8000632:	2e00      	cmp	r6, #0
 8000634:	d03f      	beq.n	80006b6 <__udivmoddi4+0x16a>
 8000636:	e886 1010 	stmia.w	r6, {r4, ip}
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	b912      	cbnz	r2, 8000646 <__udivmoddi4+0xfa>
 8000640:	2701      	movs	r7, #1
 8000642:	fbb7 f7f2 	udiv	r7, r7, r2
 8000646:	fab7 fe87 	clz	lr, r7
 800064a:	f1be 0f00 	cmp.w	lr, #0
 800064e:	d134      	bne.n	80006ba <__udivmoddi4+0x16e>
 8000650:	1beb      	subs	r3, r5, r7
 8000652:	0c3a      	lsrs	r2, r7, #16
 8000654:	fa1f fc87 	uxth.w	ip, r7
 8000658:	2101      	movs	r1, #1
 800065a:	fbb3 f8f2 	udiv	r8, r3, r2
 800065e:	0c25      	lsrs	r5, r4, #16
 8000660:	fb02 3318 	mls	r3, r2, r8, r3
 8000664:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000668:	fb0c f308 	mul.w	r3, ip, r8
 800066c:	42ab      	cmp	r3, r5
 800066e:	d907      	bls.n	8000680 <__udivmoddi4+0x134>
 8000670:	19ed      	adds	r5, r5, r7
 8000672:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000676:	d202      	bcs.n	800067e <__udivmoddi4+0x132>
 8000678:	42ab      	cmp	r3, r5
 800067a:	f200 80d1 	bhi.w	8000820 <__udivmoddi4+0x2d4>
 800067e:	4680      	mov	r8, r0
 8000680:	1aed      	subs	r5, r5, r3
 8000682:	b2a3      	uxth	r3, r4
 8000684:	fbb5 f0f2 	udiv	r0, r5, r2
 8000688:	fb02 5510 	mls	r5, r2, r0, r5
 800068c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000690:	fb0c fc00 	mul.w	ip, ip, r0
 8000694:	45a4      	cmp	ip, r4
 8000696:	d907      	bls.n	80006a8 <__udivmoddi4+0x15c>
 8000698:	19e4      	adds	r4, r4, r7
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800069e:	d202      	bcs.n	80006a6 <__udivmoddi4+0x15a>
 80006a0:	45a4      	cmp	ip, r4
 80006a2:	f200 80b8 	bhi.w	8000816 <__udivmoddi4+0x2ca>
 80006a6:	4618      	mov	r0, r3
 80006a8:	eba4 040c 	sub.w	r4, r4, ip
 80006ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006b0:	e79d      	b.n	80005ee <__udivmoddi4+0xa2>
 80006b2:	4631      	mov	r1, r6
 80006b4:	4630      	mov	r0, r6
 80006b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ba:	f1ce 0420 	rsb	r4, lr, #32
 80006be:	fa05 f30e 	lsl.w	r3, r5, lr
 80006c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80006c6:	fa20 f804 	lsr.w	r8, r0, r4
 80006ca:	0c3a      	lsrs	r2, r7, #16
 80006cc:	fa25 f404 	lsr.w	r4, r5, r4
 80006d0:	ea48 0803 	orr.w	r8, r8, r3
 80006d4:	fbb4 f1f2 	udiv	r1, r4, r2
 80006d8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80006dc:	fb02 4411 	mls	r4, r2, r1, r4
 80006e0:	fa1f fc87 	uxth.w	ip, r7
 80006e4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80006e8:	fb01 f30c 	mul.w	r3, r1, ip
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	fa00 f40e 	lsl.w	r4, r0, lr
 80006f2:	d909      	bls.n	8000708 <__udivmoddi4+0x1bc>
 80006f4:	19ed      	adds	r5, r5, r7
 80006f6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80006fa:	f080 808a 	bcs.w	8000812 <__udivmoddi4+0x2c6>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	f240 8087 	bls.w	8000812 <__udivmoddi4+0x2c6>
 8000704:	3902      	subs	r1, #2
 8000706:	443d      	add	r5, r7
 8000708:	1aeb      	subs	r3, r5, r3
 800070a:	fa1f f588 	uxth.w	r5, r8
 800070e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000712:	fb02 3310 	mls	r3, r2, r0, r3
 8000716:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800071a:	fb00 f30c 	mul.w	r3, r0, ip
 800071e:	42ab      	cmp	r3, r5
 8000720:	d907      	bls.n	8000732 <__udivmoddi4+0x1e6>
 8000722:	19ed      	adds	r5, r5, r7
 8000724:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000728:	d26f      	bcs.n	800080a <__udivmoddi4+0x2be>
 800072a:	42ab      	cmp	r3, r5
 800072c:	d96d      	bls.n	800080a <__udivmoddi4+0x2be>
 800072e:	3802      	subs	r0, #2
 8000730:	443d      	add	r5, r7
 8000732:	1aeb      	subs	r3, r5, r3
 8000734:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000738:	e78f      	b.n	800065a <__udivmoddi4+0x10e>
 800073a:	f1c1 0720 	rsb	r7, r1, #32
 800073e:	fa22 f807 	lsr.w	r8, r2, r7
 8000742:	408b      	lsls	r3, r1
 8000744:	fa05 f401 	lsl.w	r4, r5, r1
 8000748:	ea48 0303 	orr.w	r3, r8, r3
 800074c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000750:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000754:	40fd      	lsrs	r5, r7
 8000756:	ea4e 0e04 	orr.w	lr, lr, r4
 800075a:	fbb5 f9fc 	udiv	r9, r5, ip
 800075e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000762:	fb0c 5519 	mls	r5, ip, r9, r5
 8000766:	fa1f f883 	uxth.w	r8, r3
 800076a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800076e:	fb09 f408 	mul.w	r4, r9, r8
 8000772:	42ac      	cmp	r4, r5
 8000774:	fa02 f201 	lsl.w	r2, r2, r1
 8000778:	fa00 fa01 	lsl.w	sl, r0, r1
 800077c:	d908      	bls.n	8000790 <__udivmoddi4+0x244>
 800077e:	18ed      	adds	r5, r5, r3
 8000780:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000784:	d243      	bcs.n	800080e <__udivmoddi4+0x2c2>
 8000786:	42ac      	cmp	r4, r5
 8000788:	d941      	bls.n	800080e <__udivmoddi4+0x2c2>
 800078a:	f1a9 0902 	sub.w	r9, r9, #2
 800078e:	441d      	add	r5, r3
 8000790:	1b2d      	subs	r5, r5, r4
 8000792:	fa1f fe8e 	uxth.w	lr, lr
 8000796:	fbb5 f0fc 	udiv	r0, r5, ip
 800079a:	fb0c 5510 	mls	r5, ip, r0, r5
 800079e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80007a2:	fb00 f808 	mul.w	r8, r0, r8
 80007a6:	45a0      	cmp	r8, r4
 80007a8:	d907      	bls.n	80007ba <__udivmoddi4+0x26e>
 80007aa:	18e4      	adds	r4, r4, r3
 80007ac:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80007b0:	d229      	bcs.n	8000806 <__udivmoddi4+0x2ba>
 80007b2:	45a0      	cmp	r8, r4
 80007b4:	d927      	bls.n	8000806 <__udivmoddi4+0x2ba>
 80007b6:	3802      	subs	r0, #2
 80007b8:	441c      	add	r4, r3
 80007ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007be:	eba4 0408 	sub.w	r4, r4, r8
 80007c2:	fba0 8902 	umull	r8, r9, r0, r2
 80007c6:	454c      	cmp	r4, r9
 80007c8:	46c6      	mov	lr, r8
 80007ca:	464d      	mov	r5, r9
 80007cc:	d315      	bcc.n	80007fa <__udivmoddi4+0x2ae>
 80007ce:	d012      	beq.n	80007f6 <__udivmoddi4+0x2aa>
 80007d0:	b156      	cbz	r6, 80007e8 <__udivmoddi4+0x29c>
 80007d2:	ebba 030e 	subs.w	r3, sl, lr
 80007d6:	eb64 0405 	sbc.w	r4, r4, r5
 80007da:	fa04 f707 	lsl.w	r7, r4, r7
 80007de:	40cb      	lsrs	r3, r1
 80007e0:	431f      	orrs	r7, r3
 80007e2:	40cc      	lsrs	r4, r1
 80007e4:	6037      	str	r7, [r6, #0]
 80007e6:	6074      	str	r4, [r6, #4]
 80007e8:	2100      	movs	r1, #0
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	4618      	mov	r0, r3
 80007f0:	e6f8      	b.n	80005e4 <__udivmoddi4+0x98>
 80007f2:	4690      	mov	r8, r2
 80007f4:	e6e0      	b.n	80005b8 <__udivmoddi4+0x6c>
 80007f6:	45c2      	cmp	sl, r8
 80007f8:	d2ea      	bcs.n	80007d0 <__udivmoddi4+0x284>
 80007fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80007fe:	eb69 0503 	sbc.w	r5, r9, r3
 8000802:	3801      	subs	r0, #1
 8000804:	e7e4      	b.n	80007d0 <__udivmoddi4+0x284>
 8000806:	4628      	mov	r0, r5
 8000808:	e7d7      	b.n	80007ba <__udivmoddi4+0x26e>
 800080a:	4640      	mov	r0, r8
 800080c:	e791      	b.n	8000732 <__udivmoddi4+0x1e6>
 800080e:	4681      	mov	r9, r0
 8000810:	e7be      	b.n	8000790 <__udivmoddi4+0x244>
 8000812:	4601      	mov	r1, r0
 8000814:	e778      	b.n	8000708 <__udivmoddi4+0x1bc>
 8000816:	3802      	subs	r0, #2
 8000818:	443c      	add	r4, r7
 800081a:	e745      	b.n	80006a8 <__udivmoddi4+0x15c>
 800081c:	4608      	mov	r0, r1
 800081e:	e708      	b.n	8000632 <__udivmoddi4+0xe6>
 8000820:	f1a8 0802 	sub.w	r8, r8, #2
 8000824:	443d      	add	r5, r7
 8000826:	e72b      	b.n	8000680 <__udivmoddi4+0x134>

08000828 <__aeabi_idiv0>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 800082c:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
 800082e:	4603      	mov	r3, r0
 8000830:	1a98      	subs	r0, r3, r2
 8000832:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000836:	2900      	cmp	r1, #0
 8000838:	d1fa      	bne.n	8000830 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
 800083a:	4770      	bx	lr

0800083c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
 800083c:	3801      	subs	r0, #1
 800083e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8000840:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000844:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000848:	4293      	cmp	r3, r2
 800084a:	d102      	bne.n	8000852 <strcmp+0x16>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f7      	bne.n	8000840 <strcmp+0x4>
 8000850:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8000852:	1a98      	subs	r0, r3, r2
 8000854:	4770      	bx	lr

08000856 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
 8000856:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
 8000858:	b182      	cbz	r2, 800087c <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
 800085a:	3a01      	subs	r2, #1
 800085c:	460c      	mov	r4, r1
 800085e:	4603      	mov	r3, r0
 8000860:	d103      	bne.n	800086a <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	7820      	ldrb	r0, [r4, #0]
 8000866:	1a10      	subs	r0, r2, r0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
 800086a:	781e      	ldrb	r6, [r3, #0]
 800086c:	7825      	ldrb	r5, [r4, #0]
 800086e:	42ae      	cmp	r6, r5
 8000870:	f100 0001 	add.w	r0, r0, #1
 8000874:	f101 0101 	add.w	r1, r1, #1
 8000878:	d0ef      	beq.n	800085a <memcmp+0x4>
 800087a:	e7f2      	b.n	8000862 <memcmp+0xc>
		return 0;
 800087c:	4610      	mov	r0, r2
}
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
 8000880:	ea81 0300 	eor.w	r3, r1, r0
 8000884:	f013 0f03 	tst.w	r3, #3
{
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
 800088c:	d00b      	beq.n	80008a6 <memcpy+0x26>
 800088e:	3b01      	subs	r3, #1
 8000890:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8000892:	4291      	cmp	r1, r2
 8000894:	d11b      	bne.n	80008ce <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8000896:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
 8000898:	2a00      	cmp	r2, #0
 800089a:	d0fc      	beq.n	8000896 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
 800089c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80008a0:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 80008a4:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
 80008a6:	079c      	lsls	r4, r3, #30
 80008a8:	d1f6      	bne.n	8000898 <memcpy+0x18>
 80008aa:	1f1e      	subs	r6, r3, #4
 80008ac:	460d      	mov	r5, r1
 80008ae:	1b54      	subs	r4, r2, r5
 80008b0:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
 80008b2:	2c03      	cmp	r4, #3
 80008b4:	d806      	bhi.n	80008c4 <memcpy+0x44>
 80008b6:	f022 0403 	bic.w	r4, r2, #3
 80008ba:	4421      	add	r1, r4
 80008bc:	4423      	add	r3, r4
 80008be:	f002 0203 	and.w	r2, r2, #3
 80008c2:	e7e4      	b.n	800088e <memcpy+0xe>
			*(d_word++) = *(s_word++);
 80008c4:	f855 4b04 	ldr.w	r4, [r5], #4
 80008c8:	f846 4f04 	str.w	r4, [r6, #4]!
 80008cc:	e7ef      	b.n	80008ae <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
 80008ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80008d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80008d6:	e7dc      	b.n	8000892 <memcpy+0x12>

080008d8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 80008d8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 80008da:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 80008dc:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
 80008de:	079c      	lsls	r4, r3, #30
 80008e0:	d111      	bne.n	8000906 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
 80008e2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 80008e6:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
 80008ea:	461e      	mov	r6, r3
 80008ec:	1b95      	subs	r5, r2, r6
 80008ee:	441d      	add	r5, r3
 80008f0:	2d03      	cmp	r5, #3
 80008f2:	d80e      	bhi.n	8000912 <memset+0x3a>
 80008f4:	f022 0403 	bic.w	r4, r2, #3
 80008f8:	4423      	add	r3, r4
 80008fa:	f002 0203 	and.w	r2, r2, #3
 80008fe:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8000900:	4293      	cmp	r3, r2
 8000902:	d109      	bne.n	8000918 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8000904:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8000906:	2a00      	cmp	r2, #0
 8000908:	d0fc      	beq.n	8000904 <memset+0x2c>
		*(d_byte++) = c_byte;
 800090a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 800090e:	3a01      	subs	r2, #1
 8000910:	e7e5      	b.n	80008de <memset+0x6>
		*(d_word++) = c_word;
 8000912:	f846 4b04 	str.w	r4, [r6], #4
 8000916:	e7e9      	b.n	80008ec <memset+0x14>
		*(d_byte++) = c_byte;
 8000918:	f803 1b01 	strb.w	r1, [r3], #1
 800091c:	e7f0      	b.n	8000900 <memset+0x28>
	...

08000920 <prov_complete>:
        
	return 0;
}

static void prov_complete(u16_t net_idx, u16_t addr)
{
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4605      	mov	r5, r0
        printk("Provisioning completed!\n");
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <prov_complete+0x20>)
{
 8000926:	460c      	mov	r4, r1
        printk("Provisioning completed!\n");
 8000928:	f000 fa18 	bl	8000d5c <printk>
	printk("Net ID: %u\n", net_idx);
 800092c:	4629      	mov	r1, r5
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <prov_complete+0x24>)
 8000930:	f000 fa14 	bl	8000d5c <printk>
	printk("Unicast addr: 0x%04x\n", addr);
 8000934:	4621      	mov	r1, r4
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <prov_complete+0x28>)
	
	node_addr = addr;
}
 8000938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Unicast addr: 0x%04x\n", addr);
 800093c:	f000 ba0e 	b.w	8000d5c <printk>
 8000940:	08012dc0 	.word	0x08012dc0
 8000944:	08012dd9 	.word	0x08012dd9
 8000948:	08012de5 	.word	0x08012de5

0800094c <output_number>:
{
 800094c:	b508      	push	{r3, lr}
        printk("OOB Number: %u\n", number);
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <output_number+0xc>)
 8000950:	f000 fa04 	bl	8000d5c <printk>
}
 8000954:	2000      	movs	r0, #0
 8000956:	bd08      	pop	{r3, pc}
 8000958:	08012d81 	.word	0x08012d81

0800095c <bt_ready>:
        .output_number = output_number,
        .complete = prov_complete,
};

static void bt_ready(int err)
{
 800095c:	b508      	push	{r3, lr}
	int ret;

        if (err) {
 800095e:	4601      	mov	r1, r0
 8000960:	b120      	cbz	r0, 800096c <bt_ready+0x10>
                printk("Bluetooth init failed (err %d)\n", err);
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <bt_ready+0x38>)
        }

	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
	
        printk("Server node initialized\n");
}
 8000964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                printk("Initializing mesh failed (err %d)\n", ret);
 8000968:	f000 b9f8 	b.w	8000d5c <printk>
        printk("Bluetooth initialized\n");
 800096c:	480a      	ldr	r0, [pc, #40]	; (8000998 <bt_ready+0x3c>)
 800096e:	f000 f9f5 	bl	8000d5c <printk>
        ret = bt_mesh_init(&prov, &comp);
 8000972:	490a      	ldr	r1, [pc, #40]	; (800099c <bt_ready+0x40>)
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <bt_ready+0x44>)
 8000976:	f008 fb5f 	bl	8009038 <bt_mesh_init>
        if (ret) {
 800097a:	4601      	mov	r1, r0
 800097c:	b108      	cbz	r0, 8000982 <bt_ready+0x26>
                printk("Initializing mesh failed (err %d)\n", ret);
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <bt_ready+0x48>)
 8000980:	e7f0      	b.n	8000964 <bt_ready+0x8>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
 8000982:	2003      	movs	r0, #3
 8000984:	f008 fb3e 	bl	8009004 <bt_mesh_prov_enable>
        printk("Server node initialized\n");
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <bt_ready+0x4c>)
}
 800098a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Server node initialized\n");
 800098e:	f000 b9e5 	b.w	8000d5c <printk>
 8000992:	bf00      	nop
 8000994:	08012cdc 	.word	0x08012cdc
 8000998:	08012cfc 	.word	0x08012cfc
 800099c:	08012d50 	.word	0x08012d50
 80009a0:	08012d94 	.word	0x08012d94
 80009a4:	08012d13 	.word	0x08012d13
 80009a8:	08012d36 	.word	0x08012d36

080009ac <temp_srv_status>:
{
 80009ac:	b538      	push	{r3, r4, r5, lr}
       	struct net_buf_simple *msg = model->pub->msg;
 80009ae:	6883      	ldr	r3, [r0, #8]
 80009b0:	691d      	ldr	r5, [r3, #16]
{
 80009b2:	4604      	mov	r4, r0
	printk("Sensor Status Get request received\n");
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <temp_srv_status+0x38>)
 80009b6:	f000 f9d1 	bl	8000d5c <printk>
        bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_SENSOR_STATUS);
 80009ba:	2152      	movs	r1, #82	; 0x52
 80009bc:	4628      	mov	r0, r5
 80009be:	f00b fdb9 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, 22);
 80009c2:	2116      	movs	r1, #22
 80009c4:	4628      	mov	r0, r5
 80009c6:	f010 feb8 	bl	801173a <net_buf_simple_add_le16>
	ret = bt_mesh_model_publish(model);
 80009ca:	4620      	mov	r0, r4
 80009cc:	f00b fe0c 	bl	800c5e8 <bt_mesh_model_publish>
	if (ret) {
 80009d0:	4601      	mov	r1, r0
 80009d2:	b120      	cbz	r0, 80009de <temp_srv_status+0x32>
		printk("ERR: Unable to publish sensor status: %d\n", ret);
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <temp_srv_status+0x3c>)
}
 80009d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("Sensor status sent with OpCode 0x%08x\n", BT_MESH_MODEL_OP_SENSOR_STATUS);
 80009da:	f000 b9bf 	b.w	8000d5c <printk>
 80009de:	2152      	movs	r1, #82	; 0x52
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <temp_srv_status+0x40>)
 80009e2:	e7f8      	b.n	80009d6 <temp_srv_status+0x2a>
 80009e4:	08012e14 	.word	0x08012e14
 80009e8:	08012e38 	.word	0x08012e38
 80009ec:	08012e62 	.word	0x08012e62

080009f0 <main>:

void main(void)
{
 80009f0:	b508      	push	{r3, lr}
        int ret;

	printk("Initializing...\n");
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <main+0x20>)
 80009f4:	f000 f9b2 	bl	8000d5c <printk>

        /* Initialize the Bluetooth Subsystem */
        ret = bt_enable(bt_ready);
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <main+0x24>)
 80009fa:	f005 fc37 	bl	800626c <bt_enable>
        if (ret) {
 80009fe:	4601      	mov	r1, r0
 8000a00:	b120      	cbz	r0, 8000a0c <main+0x1c>
                printk("Bluetooth init failed (err %d)\n", ret);
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <main+0x28>)
        }
}
 8000a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                printk("Bluetooth init failed (err %d)\n", ret);
 8000a08:	f000 b9a8 	b.w	8000d5c <printk>
 8000a0c:	bd08      	pop	{r3, pc}
 8000a0e:	bf00      	nop
 8000a10:	08012d70 	.word	0x08012d70
 8000a14:	0800095d 	.word	0x0800095d
 8000a18:	08012cdc 	.word	0x08012cdc

08000a1c <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	4770      	bx	lr

08000a20 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000a20:	680b      	ldr	r3, [r1, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8000a26:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <char_out+0xc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4718      	bx	r3
 8000a2c:	200057bc 	.word	0x200057bc

08000a30 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8000a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a34:	b085      	sub	sp, #20
 8000a36:	469b      	mov	fp, r3
 8000a38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8000a3a:	f8df a090 	ldr.w	sl, [pc, #144]	; 8000acc <_printk_dec_ulong+0x9c>
 8000a3e:	2c01      	cmp	r4, #1
 8000a40:	bfb8      	it	lt
 8000a42:	2401      	movlt	r4, #1
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	bf0c      	ite	eq
 8000a48:	2330      	moveq	r3, #48	; 0x30
 8000a4a:	2320      	movne	r3, #32
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	4680      	mov	r8, r0
 8000a50:	4689      	mov	r9, r1
 8000a52:	9401      	str	r4, [sp, #4]
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2601      	movs	r6, #1
 8000a58:	270a      	movs	r7, #10
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
 8000a60:	b90a      	cbnz	r2, 8000a66 <_printk_dec_ulong+0x36>
 8000a62:	45aa      	cmp	sl, r5
 8000a64:	d21f      	bcs.n	8000aa6 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
 8000a66:	fbb5 f0f4 	udiv	r0, r5, r4
 8000a6a:	4649      	mov	r1, r9
 8000a6c:	3030      	adds	r0, #48	; 0x30
 8000a6e:	47c0      	blx	r8
			digits++;
 8000a70:	3601      	adds	r6, #1
			found_largest_digit = 1;
 8000a72:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
 8000a74:	3f01      	subs	r7, #1
	while (pos >= 9) {
 8000a76:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
 8000a78:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
 8000a7c:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
 8000a80:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
 8000a84:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
 8000a88:	d1e8      	bne.n	8000a5c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000a90:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
 8000a92:	f1bb 0f03 	cmp.w	fp, #3
 8000a96:	d103      	bne.n	8000aa0 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	dc0f      	bgt.n	8000ac0 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
 8000aa0:	b005      	add	sp, #20
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8000aa6:	9b01      	ldr	r3, [sp, #4]
 8000aa8:	42bb      	cmp	r3, r7
 8000aaa:	dbe3      	blt.n	8000a74 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8000aac:	f1bb 0f02 	cmp.w	fp, #2
 8000ab0:	d8e0      	bhi.n	8000a74 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	9802      	ldr	r0, [sp, #8]
 8000ab6:	9203      	str	r2, [sp, #12]
			digits++;
 8000ab8:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8000aba:	47c0      	blx	r8
			digits++;
 8000abc:	9a03      	ldr	r2, [sp, #12]
 8000abe:	e7d9      	b.n	8000a74 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	2020      	movs	r0, #32
 8000ac4:	47c0      	blx	r8
 8000ac6:	3c01      	subs	r4, #1
 8000ac8:	e7e8      	b.n	8000a9c <_printk_dec_ulong+0x6c>
 8000aca:	bf00      	nop
 8000acc:	3b9ac9ff 	.word	0x3b9ac9ff

08000ad0 <__printk_hook_install>:
	_char_out = fn;
 8000ad0:	4b01      	ldr	r3, [pc, #4]	; (8000ad8 <__printk_hook_install+0x8>)
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200057bc 	.word	0x200057bc

08000adc <_vprintk>:
{
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
 8000ae2:	f04f 0a00 	mov.w	sl, #0
{
 8000ae6:	4606      	mov	r6, r0
 8000ae8:	460f      	mov	r7, r1
 8000aea:	9204      	str	r2, [sp, #16]
 8000aec:	461c      	mov	r4, r3
	int min_width = -1;
 8000aee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8000af2:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
 8000af4:	4655      	mov	r5, sl
	while (*fmt) {
 8000af6:	9b04      	ldr	r3, [sp, #16]
 8000af8:	7818      	ldrb	r0, [r3, #0]
 8000afa:	b910      	cbnz	r0, 8000b02 <_vprintk+0x26>
}
 8000afc:	b009      	add	sp, #36	; 0x24
 8000afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
 8000b02:	b945      	cbnz	r5, 8000b16 <_vprintk+0x3a>
			if (*fmt != '%') {
 8000b04:	2825      	cmp	r0, #37	; 0x25
 8000b06:	f000 810c 	beq.w	8000d22 <_vprintk+0x246>
				out((int)*fmt, ctx);
 8000b0a:	4639      	mov	r1, r7
 8000b0c:	47b0      	blx	r6
		++fmt;
 8000b0e:	9b04      	ldr	r3, [sp, #16]
 8000b10:	3301      	adds	r3, #1
 8000b12:	9304      	str	r3, [sp, #16]
 8000b14:	e7ef      	b.n	8000af6 <_vprintk+0x1a>
			switch (*fmt) {
 8000b16:	2864      	cmp	r0, #100	; 0x64
 8000b18:	d061      	beq.n	8000bde <_vprintk+0x102>
 8000b1a:	d819      	bhi.n	8000b50 <_vprintk+0x74>
 8000b1c:	2839      	cmp	r0, #57	; 0x39
 8000b1e:	d80a      	bhi.n	8000b36 <_vprintk+0x5a>
 8000b20:	2831      	cmp	r0, #49	; 0x31
 8000b22:	d250      	bcs.n	8000bc6 <_vprintk+0xea>
 8000b24:	282d      	cmp	r0, #45	; 0x2d
 8000b26:	d03c      	beq.n	8000ba2 <_vprintk+0xc6>
 8000b28:	2830      	cmp	r0, #48	; 0x30
 8000b2a:	d03d      	beq.n	8000ba8 <_vprintk+0xcc>
 8000b2c:	2825      	cmp	r0, #37	; 0x25
 8000b2e:	d108      	bne.n	8000b42 <_vprintk+0x66>
				out((int)'%', ctx);
 8000b30:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
 8000b32:	47b0      	blx	r6
 8000b34:	e06f      	b.n	8000c16 <_vprintk+0x13a>
			switch (*fmt) {
 8000b36:	2858      	cmp	r0, #88	; 0x58
 8000b38:	f000 8089 	beq.w	8000c4e <_vprintk+0x172>
 8000b3c:	2863      	cmp	r0, #99	; 0x63
 8000b3e:	f000 80ea 	beq.w	8000d16 <_vprintk+0x23a>
				out((int)'%', ctx);
 8000b42:	4639      	mov	r1, r7
 8000b44:	2025      	movs	r0, #37	; 0x25
 8000b46:	47b0      	blx	r6
				out((int)*fmt, ctx);
 8000b48:	9b04      	ldr	r3, [sp, #16]
 8000b4a:	4639      	mov	r1, r7
 8000b4c:	7818      	ldrb	r0, [r3, #0]
 8000b4e:	e7f0      	b.n	8000b32 <_vprintk+0x56>
			switch (*fmt) {
 8000b50:	2870      	cmp	r0, #112	; 0x70
 8000b52:	d072      	beq.n	8000c3a <_vprintk+0x15e>
 8000b54:	d806      	bhi.n	8000b64 <_vprintk+0x88>
 8000b56:	2869      	cmp	r0, #105	; 0x69
 8000b58:	d041      	beq.n	8000bde <_vprintk+0x102>
 8000b5a:	286c      	cmp	r0, #108	; 0x6c
 8000b5c:	d03c      	beq.n	8000bd8 <_vprintk+0xfc>
 8000b5e:	2868      	cmp	r0, #104	; 0x68
 8000b60:	d0d5      	beq.n	8000b0e <_vprintk+0x32>
 8000b62:	e7ee      	b.n	8000b42 <_vprintk+0x66>
 8000b64:	2875      	cmp	r0, #117	; 0x75
 8000b66:	d058      	beq.n	8000c1a <_vprintk+0x13e>
 8000b68:	d817      	bhi.n	8000b9a <_vprintk+0xbe>
 8000b6a:	2873      	cmp	r0, #115	; 0x73
 8000b6c:	d1e9      	bne.n	8000b42 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	f104 0b04 	add.w	fp, r4, #4
 8000b74:	461c      	mov	r4, r3
				while (*s)
 8000b76:	4625      	mov	r5, r4
 8000b78:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	f040 80bf 	bne.w	8000d00 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
 8000b82:	f1b8 0f03 	cmp.w	r8, #3
 8000b86:	f040 80d5 	bne.w	8000d34 <_vprintk+0x258>
					int remaining = min_width - (s - start);
 8000b8a:	1ae4      	subs	r4, r4, r3
 8000b8c:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
 8000b90:	2c00      	cmp	r4, #0
 8000b92:	f300 80bb 	bgt.w	8000d0c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
 8000b96:	465c      	mov	r4, fp
 8000b98:	e03d      	b.n	8000c16 <_vprintk+0x13a>
			switch (*fmt) {
 8000b9a:	2878      	cmp	r0, #120	; 0x78
 8000b9c:	d057      	beq.n	8000c4e <_vprintk+0x172>
 8000b9e:	287a      	cmp	r0, #122	; 0x7a
 8000ba0:	e7de      	b.n	8000b60 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
 8000ba2:	f04f 0803 	mov.w	r8, #3
 8000ba6:	e7b2      	b.n	8000b0e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
 8000ba8:	f1b9 0f00 	cmp.w	r9, #0
 8000bac:	da0e      	bge.n	8000bcc <_vprintk+0xf0>
 8000bae:	f1b8 0f00 	cmp.w	r8, #0
 8000bb2:	f000 80bc 	beq.w	8000d2e <_vprintk+0x252>
					min_width = *fmt - '0';
 8000bb6:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8000bba:	f1b8 0f00 	cmp.w	r8, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	f04f 0802 	moveq.w	r8, #2
 8000bc4:	e7a3      	b.n	8000b0e <_vprintk+0x32>
				if (min_width < 0) {
 8000bc6:	f1b9 0f00 	cmp.w	r9, #0
 8000bca:	dbf4      	blt.n	8000bb6 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
 8000bcc:	230a      	movs	r3, #10
 8000bce:	fb03 0909 	mla	r9, r3, r9, r0
 8000bd2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8000bd6:	e7f0      	b.n	8000bba <_vprintk+0xde>
				long_ctr++;
 8000bd8:	f10a 0a01 	add.w	sl, sl, #1
 8000bdc:	e797      	b.n	8000b0e <_vprintk+0x32>
				if (long_ctr < 2) {
 8000bde:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
 8000be2:	bfc5      	ittet	gt
 8000be4:	3407      	addgt	r4, #7
 8000be6:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
 8000bea:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
 8000bec:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
 8000bee:	bfd4      	ite	le
 8000bf0:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
 8000bf2:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	da05      	bge.n	8000c06 <_vprintk+0x12a>
					out((int)'-', ctx);
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	202d      	movs	r0, #45	; 0x2d
 8000bfe:	47b0      	blx	r6
					d = -d;
 8000c00:	426d      	negs	r5, r5
					min_width--;
 8000c02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 8000c06:	f8cd 9000 	str.w	r9, [sp]
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8000c0e:	4639      	mov	r1, r7
 8000c10:	4630      	mov	r0, r6
 8000c12:	f7ff ff0d 	bl	8000a30 <_printk_dec_ulong>
			might_format = 0;
 8000c16:	2500      	movs	r5, #0
				break;
 8000c18:	e779      	b.n	8000b0e <_vprintk+0x32>
				if (long_ctr < 2) {
 8000c1a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
 8000c1e:	bfc5      	ittet	gt
 8000c20:	3407      	addgt	r4, #7
 8000c22:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
 8000c26:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
 8000c28:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
 8000c2a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
 8000c2e:	bfcc      	ite	gt
 8000c30:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
 8000c34:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
 8000c36:	4643      	mov	r3, r8
 8000c38:	e7e9      	b.n	8000c0e <_vprintk+0x132>
				  out('0', ctx);
 8000c3a:	4639      	mov	r1, r7
 8000c3c:	2030      	movs	r0, #48	; 0x30
 8000c3e:	47b0      	blx	r6
				  out('x', ctx);
 8000c40:	4639      	mov	r1, r7
 8000c42:	2078      	movs	r0, #120	; 0x78
 8000c44:	47b0      	blx	r6
				  min_width = 8;
 8000c46:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
 8000c4a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
 8000c4e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
 8000c52:	bfc7      	ittee	gt
 8000c54:	3407      	addgt	r4, #7
 8000c56:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
 8000c5a:	6823      	ldrle	r3, [r4, #0]
 8000c5c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
 8000c5e:	bfc2      	ittt	gt
 8000c60:	f103 0408 	addgt.w	r4, r3, #8
 8000c64:	681b      	ldrgt	r3, [r3, #0]
 8000c66:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
 8000c68:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
 8000c6c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
 8000c70:	bfd8      	it	le
 8000c72:	3404      	addle	r4, #4
	int digits = 0;
 8000c74:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
 8000c76:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
 8000c78:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
 8000c7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8000c7e:	9b05      	ldr	r3, [sp, #20]
 8000c80:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8000c84:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
 8000c88:	f010 000f 	ands.w	r0, r0, #15
 8000c8c:	d109      	bne.n	8000ca2 <_vprintk+0x1c6>
 8000c8e:	9b07      	ldr	r3, [sp, #28]
 8000c90:	b913      	cbnz	r3, 8000c98 <_vprintk+0x1bc>
 8000c92:	f1bb 0f00 	cmp.w	fp, #0
 8000c96:	d122      	bne.n	8000cde <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
 8000c98:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8000c9c:	e007      	b.n	8000cae <_vprintk+0x1d2>
	for (; size; size--) {
 8000c9e:	9a06      	ldr	r2, [sp, #24]
 8000ca0:	e7eb      	b.n	8000c7a <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
 8000ca2:	2809      	cmp	r0, #9
 8000ca4:	bf8c      	ite	hi
 8000ca6:	f04f 0e57 	movhi.w	lr, #87	; 0x57
 8000caa:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
 8000cae:	4639      	mov	r1, r7
 8000cb0:	4470      	add	r0, lr
 8000cb2:	9206      	str	r2, [sp, #24]
 8000cb4:	47b0      	blx	r6
			digits++;
 8000cb6:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
 8000cb8:	9507      	str	r5, [sp, #28]
			digits++;
 8000cba:	3301      	adds	r3, #1
 8000cbc:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
 8000cbe:	f1bb 0f00 	cmp.w	fp, #0
 8000cc2:	d1ec      	bne.n	8000c9e <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
 8000cc4:	f1b8 0f03 	cmp.w	r8, #3
 8000cc8:	d1a5      	bne.n	8000c16 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
 8000cca:	9b03      	ldr	r3, [sp, #12]
 8000ccc:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	dda0      	ble.n	8000c16 <_vprintk+0x13a>
			out(' ', ctx);
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	2020      	movs	r0, #32
 8000cd8:	47b0      	blx	r6
 8000cda:	3d01      	subs	r5, #1
 8000cdc:	e7f8      	b.n	8000cd0 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
 8000cde:	1e53      	subs	r3, r2, #1
 8000ce0:	4591      	cmp	r9, r2
 8000ce2:	9306      	str	r3, [sp, #24]
 8000ce4:	dbeb      	blt.n	8000cbe <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
 8000ce6:	f1b8 0f01 	cmp.w	r8, #1
 8000cea:	d103      	bne.n	8000cf4 <_vprintk+0x218>
				out('0', ctx);
 8000cec:	4639      	mov	r1, r7
 8000cee:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8000cf0:	47b0      	blx	r6
 8000cf2:	e7e4      	b.n	8000cbe <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
 8000cf4:	f1b8 0f02 	cmp.w	r8, #2
 8000cf8:	d1e1      	bne.n	8000cbe <_vprintk+0x1e2>
				out(' ', ctx);
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	e7f7      	b.n	8000cf0 <_vprintk+0x214>
					out((int)(*s++), ctx);
 8000d00:	4639      	mov	r1, r7
 8000d02:	9303      	str	r3, [sp, #12]
 8000d04:	462c      	mov	r4, r5
 8000d06:	47b0      	blx	r6
 8000d08:	9b03      	ldr	r3, [sp, #12]
 8000d0a:	e734      	b.n	8000b76 <_vprintk+0x9a>
						out(' ', ctx);
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	2020      	movs	r0, #32
 8000d10:	47b0      	blx	r6
 8000d12:	3c01      	subs	r4, #1
 8000d14:	e73c      	b.n	8000b90 <_vprintk+0xb4>
				out(c, ctx);
 8000d16:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
 8000d18:	1d25      	adds	r5, r4, #4
				out(c, ctx);
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	47b0      	blx	r6
				int c = va_arg(ap, int);
 8000d1e:	462c      	mov	r4, r5
 8000d20:	e779      	b.n	8000c16 <_vprintk+0x13a>
				long_ctr = 0;
 8000d22:	46aa      	mov	sl, r5
				padding = PAD_NONE;
 8000d24:	46a8      	mov	r8, r5
				min_width = -1;
 8000d26:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	e6ef      	b.n	8000b0e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
 8000d2e:	f04f 0801 	mov.w	r8, #1
 8000d32:	e6ec      	b.n	8000b0e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
 8000d34:	465c      	mov	r4, fp
			might_format = 0;
 8000d36:	4605      	mov	r5, r0
 8000d38:	e6e9      	b.n	8000b0e <_vprintk+0x32>
	...

08000d3c <vprintk>:
{
 8000d3c:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
 8000d3e:	ac02      	add	r4, sp, #8
 8000d40:	2300      	movs	r3, #0
 8000d42:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <vprintk+0x1c>)
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fec5 	bl	8000adc <_vprintk>
}
 8000d52:	9801      	ldr	r0, [sp, #4]
 8000d54:	b002      	add	sp, #8
 8000d56:	bd10      	pop	{r4, pc}
 8000d58:	08000a21 	.word	0x08000a21

08000d5c <printk>:
{
 8000d5c:	b40f      	push	{r0, r1, r2, r3}
 8000d5e:	b507      	push	{r0, r1, r2, lr}
 8000d60:	a904      	add	r1, sp, #16
 8000d62:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8000d66:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
 8000d68:	f7ff ffe8 	bl	8000d3c <vprintk>
}
 8000d6c:	b003      	add	sp, #12
 8000d6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d72:	b004      	add	sp, #16
 8000d74:	4770      	bx	lr

08000d76 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BT_DEVICE_NAME, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_CONSOLE, 1);
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_FLASH_LOAD_OFFSET, 1);
GEN_ABSOLUTE_SYM(CONFIG_THREAD_STACK_INFO, 1);
 8000d76:	4770      	bx	lr

08000d78 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8000d78:	428b      	cmp	r3, r1
{
 8000d7a:	b538      	push	{r3, r4, r5, lr}
 8000d7c:	4615      	mov	r5, r2
 8000d7e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 8000d80:	d805      	bhi.n	8000d8e <_copy+0x16>
		(void)memcpy(to, from, from_len);
 8000d82:	461a      	mov	r2, r3
 8000d84:	4629      	mov	r1, r5
 8000d86:	f7ff fd7b 	bl	8000880 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8000d8e:	2400      	movs	r4, #0
 8000d90:	e7fb      	b.n	8000d8a <_copy+0x12>

08000d92 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 8000d92:	f7ff bda1 	b.w	80008d8 <memset>

08000d96 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 8000d96:	09c3      	lsrs	r3, r0, #7
 8000d98:	005a      	lsls	r2, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000da0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 8000da4:	b2c0      	uxtb	r0, r0
 8000da6:	4770      	bx	lr

08000da8 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
 8000da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dac:	4606      	mov	r6, r0
 8000dae:	b0a8      	sub	sp, #160	; 0xa0
 8000db0:	460f      	mov	r7, r1
 8000db2:	4614      	mov	r4, r2
 8000db4:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8000db6:	f04f 0820 	mov.w	r8, #32
		uECC_RNG_Function rng_function = uECC_get_rng();
 8000dba:	f000 f965 	bl	8001088 <uECC_get_rng>
		if (!rng_function ||
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b918      	cbnz	r0, 8000dca <uECC_make_key+0x22>
        		return 0;
 8000dc2:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
 8000dc4:	b028      	add	sp, #160	; 0xa0
 8000dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	a808      	add	r0, sp, #32
 8000dce:	4798      	blx	r3
		if (!rng_function ||
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d0f6      	beq.n	8000dc2 <uECC_make_key+0x1a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
 8000dd4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000dd8:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8000ddc:	a908      	add	r1, sp, #32
 8000dde:	4668      	mov	r0, sp
 8000de0:	331f      	adds	r3, #31
 8000de2:	fb93 f3f8 	sdiv	r3, r3, r8
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	f000 faeb 	bl	80013c2 <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
 8000dec:	4622      	mov	r2, r4
 8000dee:	4669      	mov	r1, sp
 8000df0:	a818      	add	r0, sp, #96	; 0x60
 8000df2:	f000 ff08 	bl	8001c06 <EccPoint_compute_public_key>
 8000df6:	b300      	cbz	r0, 8000e3a <uECC_make_key+0x92>
					       BITS_TO_BYTES(curve->num_n_bits),
 8000df8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
 8000dfc:	466a      	mov	r2, sp
					       BITS_TO_BYTES(curve->num_n_bits),
 8000dfe:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
 8000e00:	4638      	mov	r0, r7
 8000e02:	2108      	movs	r1, #8
 8000e04:	fb93 f1f1 	sdiv	r1, r3, r1
 8000e08:	f000 ff25 	bl	8001c56 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
 8000e0c:	aa18      	add	r2, sp, #96	; 0x60
 8000e0e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000e12:	4630      	mov	r0, r6
 8000e14:	f000 ff1f 	bl	8001c56 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
 8000e18:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
 8000e1c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
 8000e20:	ab18      	add	r3, sp, #96	; 0x60
 8000e22:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000e26:	1870      	adds	r0, r6, r1
 8000e28:	f000 ff15 	bl	8001c56 <uECC_vli_nativeToBytes>
			memset(_private, 0, NUM_ECC_BYTES);
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4668      	mov	r0, sp
 8000e32:	f7ff fd51 	bl	80008d8 <memset>
      			return 1;
 8000e36:	2001      	movs	r0, #1
 8000e38:	e7c4      	b.n	8000dc4 <uECC_make_key+0x1c>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 8000e3a:	3d01      	subs	r5, #1
 8000e3c:	d1bd      	bne.n	8000dba <uECC_make_key+0x12>
 8000e3e:	e7c0      	b.n	8000dc2 <uECC_make_key+0x1a>

08000e40 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	4691      	mov	r9, r2
 8000e46:	b0a5      	sub	sp, #148	; 0x94
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
 8000e48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	wordcount_t num_bytes = curve->num_bytes;
 8000e4c:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
 8000e50:	f993 b000 	ldrsb.w	fp, [r3]
	uECC_word_t *p2[2] = {_private, tmp};
 8000e54:	ad04      	add	r5, sp, #16
{
 8000e56:	4682      	mov	sl, r0
	uECC_vli_bytesToNative(_private,
 8000e58:	f04f 0808 	mov.w	r8, #8
	uECC_word_t *p2[2] = {_private, tmp};
 8000e5c:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
 8000e5e:	4628      	mov	r0, r5
			       BITS_TO_BYTES(curve->num_n_bits));
 8000e60:	3207      	adds	r2, #7
	uECC_vli_bytesToNative(_private,
 8000e62:	fb92 f2f8 	sdiv	r2, r2, r8
{
 8000e66:	461c      	mov	r4, r3
	uECC_word_t *p2[2] = {_private, tmp};
 8000e68:	9502      	str	r5, [sp, #8]
 8000e6a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
 8000e6c:	f000 ff07 	bl	8001c7e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
 8000e70:	463a      	mov	r2, r7
 8000e72:	4651      	mov	r1, sl
 8000e74:	a814      	add	r0, sp, #80	; 0x50
 8000e76:	f000 ff02 	bl	8001c7e <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
 8000e7a:	ab14      	add	r3, sp, #80	; 0x50
 8000e7c:	eb0a 0107 	add.w	r1, sl, r7
 8000e80:	eb03 008b 	add.w	r0, r3, fp, lsl #2
 8000e84:	463a      	mov	r2, r7
 8000e86:	f000 fefa 	bl	8001c7e <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4632      	mov	r2, r6
 8000e8e:	4629      	mov	r1, r5
 8000e90:	4628      	mov	r0, r5
 8000e92:	f000 fe8c 	bl	8001bae <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
 8000e96:	fab0 f080 	clz	r0, r0
 8000e9a:	9401      	str	r4, [sp, #4]
 8000e9c:	ab24      	add	r3, sp, #144	; 0x90
 8000e9e:	0940      	lsrs	r0, r0, #5
 8000ea0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000ea4:	8863      	ldrh	r3, [r4, #2]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	a914      	add	r1, sp, #80	; 0x50
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f850 2c88 	ldr.w	r2, [r0, #-136]
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	f000 fda9 	bl	8001a0c <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
 8000eba:	aa14      	add	r2, sp, #80	; 0x50
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	4648      	mov	r0, r9
 8000ec0:	f000 fec9 	bl	8001c56 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	a814      	add	r0, sp, #80	; 0x50
 8000ec8:	f000 fd17 	bl	80018fa <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
 8000ecc:	eb0d 0408 	add.w	r4, sp, r8
	r = !EccPoint_isZero(_public, curve);
 8000ed0:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
 8000ed2:	4642      	mov	r2, r8
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fcfe 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
 8000edc:	2220      	movs	r2, #32
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff fcf9 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4628      	mov	r0, r5
 8000eec:	f7ff fcf4 	bl	80008d8 <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
 8000ef0:	fab7 f087 	clz	r0, r7
 8000ef4:	0940      	lsrs	r0, r0, #5
 8000ef6:	b025      	add	sp, #148	; 0x94
 8000ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000efc <uECC_vli_add>:

/* Computes result = left + right, returning carry, in constant time.
 * Can modify in place. */
static uECC_word_t uECC_vli_add(uECC_word_t *result, const uECC_word_t *left,
				const uECC_word_t *right, wordcount_t num_words)
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uECC_word_t carry = 0;
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
 8000efe:	2400      	movs	r4, #0
{
 8000f00:	4686      	mov	lr, r0
	uECC_word_t carry = 0;
 8000f02:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
 8000f04:	b265      	sxtb	r5, r4
 8000f06:	42ab      	cmp	r3, r5
 8000f08:	dc00      	bgt.n	8000f0c <uECC_vli_add+0x10>
		uECC_word_t val = (sum < left[i]);
		carry = cond_set(val, carry, (sum != left[i]));
		result[i] = sum;
	}
	return carry;
}
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
 8000f0c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8000f10:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8000f14:	442e      	add	r6, r5
 8000f16:	4406      	add	r6, r0
		uECC_word_t val = (sum < left[i]);
 8000f18:	42b5      	cmp	r5, r6
 8000f1a:	bf8c      	ite	hi
 8000f1c:	2501      	movhi	r5, #1
 8000f1e:	2500      	movls	r5, #0
		carry = cond_set(val, carry, (sum != left[i]));
 8000f20:	bf14      	ite	ne
 8000f22:	2701      	movne	r7, #1
 8000f24:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
 8000f26:	fb07 f705 	mul.w	r7, r7, r5
 8000f2a:	bf0c      	ite	eq
 8000f2c:	4605      	moveq	r5, r0
 8000f2e:	2500      	movne	r5, #0
		result[i] = sum;
 8000f30:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
 8000f34:	ea47 0005 	orr.w	r0, r7, r5
 8000f38:	3401      	adds	r4, #1
 8000f3a:	e7e3      	b.n	8000f04 <uECC_vli_add+0x8>

08000f3c <uECC_vli_rshift1>:
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
 8000f3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
 8000f40:	2300      	movs	r3, #0
	while (vli-- > end) {
 8000f42:	4288      	cmp	r0, r1
 8000f44:	d300      	bcc.n	8000f48 <uECC_vli_rshift1+0xc>
		uECC_word_t temp = *vli;
		*vli = (temp >> 1) | carry;
		carry = temp << (uECC_WORD_BITS - 1);
	}
}
 8000f46:	4770      	bx	lr
		uECC_word_t temp = *vli;
 8000f48:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
 8000f4c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8000f50:	f841 3d04 	str.w	r3, [r1, #-4]!
		carry = temp << (uECC_WORD_BITS - 1);
 8000f54:	07d3      	lsls	r3, r2, #31
 8000f56:	e7f4      	b.n	8000f42 <uECC_vli_rshift1+0x6>

08000f58 <vli_modInv_update>:
			      wordcount_t num_words)
{

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
 8000f58:	6803      	ldr	r3, [r0, #0]
{
 8000f5a:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
 8000f5c:	f013 0501 	ands.w	r5, r3, #1
{
 8000f60:	4606      	mov	r6, r0
 8000f62:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
 8000f64:	d005      	beq.n	8000f72 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
 8000f66:	4613      	mov	r3, r2
 8000f68:	460a      	mov	r2, r1
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	f7ff ffc6 	bl	8000efc <uECC_vli_add>
 8000f70:	4605      	mov	r5, r0
	}
	uECC_vli_rshift1(uv, num_words);
 8000f72:	4621      	mov	r1, r4
 8000f74:	4630      	mov	r0, r6
 8000f76:	f7ff ffe1 	bl	8000f3c <uECC_vli_rshift1>
	if (carry) {
 8000f7a:	b145      	cbz	r5, 8000f8e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
 8000f7c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8000f80:	3a01      	subs	r2, #1
 8000f82:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8000f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f8a:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}

08000f90 <uECC_vli_mult>:
{
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	b087      	sub	sp, #28
 8000f96:	9203      	str	r2, [sp, #12]
	for (k = 0; k < num_words; ++k) {
 8000f98:	2200      	movs	r2, #0
{
 8000f9a:	9102      	str	r1, [sp, #8]
	uECC_word_t r1 = 0;
 8000f9c:	4615      	mov	r5, r2
	uECC_word_t r0 = 0;
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	fa4f f882 	sxtb.w	r8, r2
	for (k = 0; k < num_words; ++k) {
 8000fa4:	4598      	cmp	r8, r3
 8000fa6:	db14      	blt.n	8000fd2 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fac:	2200      	movs	r2, #0
 8000fae:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	f89d 2000 	ldrb.w	r2, [sp]
 8000fb8:	eb02 0e03 	add.w	lr, r2, r3
 8000fbc:	fa4f fe8e 	sxtb.w	lr, lr
 8000fc0:	45e6      	cmp	lr, ip
 8000fc2:	db33      	blt.n	800102c <uECC_vli_mult+0x9c>
	result[num_words * 2 - 1] = r0;
 8000fc4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000fc8:	f840 4c04 	str.w	r4, [r0, #-4]
}
 8000fcc:	b007      	add	sp, #28
 8000fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fd2:	9e03      	ldr	r6, [sp, #12]
	for (k = 0; k < num_words; ++k) {
 8000fd4:	f04f 0e00 	mov.w	lr, #0
 8000fd8:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 8000fdc:	46f4      	mov	ip, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
 8000fde:	9902      	ldr	r1, [sp, #8]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8000fe0:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
 8000fe4:	f851 602e 	ldr.w	r6, [r1, lr, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8000fe8:	9501      	str	r5, [sp, #4]
 8000fea:	2500      	movs	r5, #0
 8000fec:	9500      	str	r5, [sp, #0]
	uECC_dword_t p = (uECC_dword_t)a * b;
 8000fee:	fba7 ab06 	umull	sl, fp, r7, r6
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 8000ff2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8000ff6:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
 8000ffa:	eb16 040a 	adds.w	r4, r6, sl
 8000ffe:	eb47 050b 	adc.w	r5, r7, fp
	*r2 += (r01 < p);
 8001002:	455d      	cmp	r5, fp
 8001004:	f10e 0e01 	add.w	lr, lr, #1
 8001008:	bf08      	it	eq
 800100a:	4554      	cmpeq	r4, sl
		for (i = 0; i <= k; ++i) {
 800100c:	fa4f fa8e 	sxtb.w	sl, lr
	r01 += p;
 8001010:	4626      	mov	r6, r4
	*r2 += (r01 < p);
 8001012:	bf34      	ite	cc
 8001014:	2401      	movcc	r4, #1
 8001016:	2400      	movcs	r4, #0
		for (i = 0; i <= k; ++i) {
 8001018:	45d0      	cmp	r8, sl
	*r2 += (r01 < p);
 800101a:	44a4      	add	ip, r4
	*r0 = (uECC_word_t)r01;
 800101c:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
 800101e:	dade      	bge.n	8000fde <uECC_vli_mult+0x4e>
		result[k] = r0;
 8001020:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
 8001024:	462c      	mov	r4, r5
 8001026:	3201      	adds	r2, #1
	*r2 += (r01 < p);
 8001028:	4665      	mov	r5, ip
 800102a:	e7b9      	b.n	8000fa0 <uECC_vli_mult+0x10>
 800102c:	3201      	adds	r2, #1
		for (i = (k + 1) - num_words; i < num_words; ++i) {
 800102e:	462f      	mov	r7, r5
 8001030:	b252      	sxtb	r2, r2
 8001032:	2500      	movs	r5, #0
 8001034:	429a      	cmp	r2, r3
 8001036:	db06      	blt.n	8001046 <uECC_vli_mult+0xb6>
 8001038:	9a00      	ldr	r2, [sp, #0]
		result[k] = r0;
 800103a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
 800103e:	3201      	adds	r2, #1
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	463c      	mov	r4, r7
 8001044:	e7b6      	b.n	8000fb4 <uECC_vli_mult+0x24>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
 8001046:	ebae 0602 	sub.w	r6, lr, r2
	uECC_dword_t p = (uECC_dword_t)a * b;
 800104a:	9903      	ldr	r1, [sp, #12]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 800104c:	9705      	str	r7, [sp, #20]
	uECC_dword_t p = (uECC_dword_t)a * b;
 800104e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8001052:	9902      	ldr	r1, [sp, #8]
 8001054:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001058:	fba6 ab01 	umull	sl, fp, r6, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
 800105c:	2100      	movs	r1, #0
 800105e:	9104      	str	r1, [sp, #16]
 8001060:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8001064:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
 8001068:	eb16 080a 	adds.w	r8, r6, sl
 800106c:	eb47 090b 	adc.w	r9, r7, fp
	*r2 += (r01 < p);
 8001070:	45d9      	cmp	r9, fp
 8001072:	bf08      	it	eq
 8001074:	45d0      	cmpeq	r8, sl
 8001076:	bf34      	ite	cc
 8001078:	2401      	movcc	r4, #1
 800107a:	460c      	movcs	r4, r1
 800107c:	3201      	adds	r2, #1
 800107e:	4425      	add	r5, r4
	r01 += p;
 8001080:	464f      	mov	r7, r9
 8001082:	b252      	sxtb	r2, r2
	*r0 = (uECC_word_t)r01;
 8001084:	4644      	mov	r4, r8
 8001086:	e7d5      	b.n	8001034 <uECC_vli_mult+0xa4>

08001088 <uECC_get_rng>:
}
 8001088:	4b01      	ldr	r3, [pc, #4]	; (8001090 <uECC_get_rng+0x8>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200057c0 	.word	0x200057c0

08001094 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
 8001094:	2300      	movs	r3, #0
{
 8001096:	b510      	push	{r4, lr}
		 vli[i] = 0;
 8001098:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
 800109a:	b25a      	sxtb	r2, r3
 800109c:	4291      	cmp	r1, r2
 800109e:	dc00      	bgt.n	80010a2 <uECC_vli_clear+0xe>
}
 80010a0:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
 80010a2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80010a6:	3301      	adds	r3, #1
 80010a8:	e7f7      	b.n	800109a <uECC_vli_clear+0x6>

080010aa <uECC_vli_isZero>:
{
 80010aa:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
 80010ac:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
 80010ae:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
 80010b0:	b25c      	sxtb	r4, r3
 80010b2:	42a1      	cmp	r1, r4
 80010b4:	dc03      	bgt.n	80010be <uECC_vli_isZero+0x14>
}
 80010b6:	fab2 f082 	clz	r0, r2
 80010ba:	0940      	lsrs	r0, r0, #5
 80010bc:	bd10      	pop	{r4, pc}
		bits |= vli[i];
 80010be:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4322      	orrs	r2, r4
 80010c6:	e7f3      	b.n	80010b0 <uECC_vli_isZero+0x6>

080010c8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 80010c8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80010ca:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 80010cc:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80010d0:	f001 011f 	and.w	r1, r1, #31
 80010d4:	fa03 f101 	lsl.w	r1, r3, r1
}
 80010d8:	4008      	ands	r0, r1
 80010da:	4770      	bx	lr

080010dc <uECC_vli_numBits>:
{
 80010dc:	3901      	subs	r1, #1
 80010de:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80010e0:	2900      	cmp	r1, #0
 80010e2:	da04      	bge.n	80010ee <uECC_vli_numBits+0x12>
	return (i + 1);
 80010e4:	3101      	adds	r1, #1
 80010e6:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
 80010e8:	b931      	cbnz	r1, 80010f8 <uECC_vli_numBits+0x1c>
		return 0;
 80010ea:	4608      	mov	r0, r1
}
 80010ec:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 80010ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f2      	beq.n	80010dc <uECC_vli_numBits>
 80010f6:	e7f5      	b.n	80010e4 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
 80010f8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80010fc:	3b01      	subs	r3, #1
 80010fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
 8001102:	2000      	movs	r0, #0
 8001104:	b923      	cbnz	r3, 8001110 <uECC_vli_numBits+0x34>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8001106:	3901      	subs	r1, #1
 8001108:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800110c:	b208      	sxth	r0, r1
 800110e:	4770      	bx	lr
		digit >>= 1;
 8001110:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
 8001112:	3001      	adds	r0, #1
 8001114:	e7f6      	b.n	8001104 <uECC_vli_numBits+0x28>

08001116 <uECC_vli_set>:
{
 8001116:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
 8001118:	2300      	movs	r3, #0
 800111a:	b25c      	sxtb	r4, r3
 800111c:	42a2      	cmp	r2, r4
 800111e:	dc00      	bgt.n	8001122 <uECC_vli_set+0xc>
}
 8001120:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
 8001122:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001126:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 800112a:	3301      	adds	r3, #1
 800112c:	e7f5      	b.n	800111a <uECC_vli_set+0x4>

0800112e <uECC_vli_cmp_unsafe>:
{
 800112e:	b510      	push	{r4, lr}
 8001130:	3a01      	subs	r2, #1
 8001132:	b252      	sxtb	r2, r2
	for (i = num_words - 1; i >= 0; --i) {
 8001134:	2a00      	cmp	r2, #0
 8001136:	da01      	bge.n	800113c <uECC_vli_cmp_unsafe+0xe>
	return 0;
 8001138:	2000      	movs	r0, #0
 800113a:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
 800113c:	b213      	sxth	r3, r2
 800113e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8001142:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001146:	429c      	cmp	r4, r3
 8001148:	d803      	bhi.n	8001152 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
 800114a:	d2f1      	bcs.n	8001130 <uECC_vli_cmp_unsafe+0x2>
			return -1;
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001150:	bd10      	pop	{r4, pc}
			return 1;
 8001152:	2001      	movs	r0, #1
 8001154:	bd10      	pop	{r4, pc}

08001156 <uECC_vli_equal>:
{
 8001156:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
 8001158:	3a01      	subs	r2, #1
 800115a:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
 800115c:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
 800115e:	2a00      	cmp	r2, #0
 8001160:	da03      	bge.n	800116a <uECC_vli_equal+0x14>
}
 8001162:	1c18      	adds	r0, r3, #0
 8001164:	bf18      	it	ne
 8001166:	2001      	movne	r0, #1
 8001168:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
 800116a:	b215      	sxth	r5, r2
 800116c:	3a01      	subs	r2, #1
 800116e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8001172:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8001176:	406c      	eors	r4, r5
 8001178:	4323      	orrs	r3, r4
 800117a:	b252      	sxtb	r2, r2
 800117c:	e7ef      	b.n	800115e <uECC_vli_equal+0x8>

0800117e <uECC_vli_sub>:
{
 800117e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
 8001180:	2400      	movs	r4, #0
{
 8001182:	4686      	mov	lr, r0
	uECC_word_t borrow = 0;
 8001184:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
 8001186:	b265      	sxtb	r5, r4
 8001188:	42ab      	cmp	r3, r5
 800118a:	dc00      	bgt.n	800118e <uECC_vli_sub+0x10>
}
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
 800118e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8001192:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8001196:	1bae      	subs	r6, r5, r6
 8001198:	1a36      	subs	r6, r6, r0
		uECC_word_t val = (diff > left[i]);
 800119a:	42b5      	cmp	r5, r6
 800119c:	bf34      	ite	cc
 800119e:	2501      	movcc	r5, #1
 80011a0:	2500      	movcs	r5, #0
		borrow = cond_set(val, borrow, (diff != left[i]));
 80011a2:	bf14      	ite	ne
 80011a4:	2701      	movne	r7, #1
 80011a6:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
 80011a8:	fb07 f705 	mul.w	r7, r7, r5
 80011ac:	bf0c      	ite	eq
 80011ae:	4605      	moveq	r5, r0
 80011b0:	2500      	movne	r5, #0
		result[i] = diff;
 80011b2:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
 80011b6:	ea47 0005 	orr.w	r0, r7, r5
 80011ba:	3401      	adds	r4, #1
 80011bc:	e7e3      	b.n	8001186 <uECC_vli_sub+0x8>
	...

080011c0 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 80011c2:	2208      	movs	r2, #8
{
 80011c4:	b089      	sub	sp, #36	; 0x24
 80011c6:	460c      	mov	r4, r1
 80011c8:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
 80011ca:	f7ff ffa4 	bl	8001116 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
 80011ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80011d0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
 80011d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011d4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
 80011d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80011d8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
 80011da:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80011dc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 80011de:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80011e0:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
 80011e2:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80011e4:	2308      	movs	r3, #8
 80011e6:	466a      	mov	r2, sp
 80011e8:	4669      	mov	r1, sp
 80011ea:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
 80011ec:	9702      	str	r7, [sp, #8]
 80011ee:	9701      	str	r7, [sp, #4]
 80011f0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80011f2:	f7ff fe83 	bl	8000efc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80011f6:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 80011f8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 80011fa:	466a      	mov	r2, sp
 80011fc:	4631      	mov	r1, r6
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff fe7c 	bl	8000efc <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
 8001204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001206:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
 8001208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800120a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
 800120c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800120e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
 8001210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001212:	9306      	str	r3, [sp, #24]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001214:	4405      	add	r5, r0
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001216:	2308      	movs	r3, #8
 8001218:	466a      	mov	r2, sp
 800121a:	4669      	mov	r1, sp
 800121c:	4668      	mov	r0, sp
	tmp[7] = 0;
 800121e:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001220:	f7ff fe6c 	bl	8000efc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001224:	2308      	movs	r3, #8
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
 8001226:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001228:	466a      	mov	r2, sp
 800122a:	4631      	mov	r1, r6
 800122c:	4630      	mov	r0, r6
 800122e:	f7ff fe65 	bl	8000efc <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
 8001232:	6a23      	ldr	r3, [r4, #32]
 8001234:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
 8001236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001238:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
 800123a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800123c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
 800123e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001240:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
 8001242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001244:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001246:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001248:	2308      	movs	r3, #8
 800124a:	466a      	mov	r2, sp
 800124c:	4631      	mov	r1, r6
 800124e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
 8001250:	9705      	str	r7, [sp, #20]
 8001252:	9704      	str	r7, [sp, #16]
 8001254:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001256:	f7ff fe51 	bl	8000efc <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
 800125a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800125c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
 800125e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001260:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
 8001262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[3] = product[13];
	tmp[4] = product[14];
 8001264:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[2] = product[11];
 8001266:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
 8001268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800126a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
 800126c:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
	tmp[6] = product[13];
 800126e:	9306      	str	r3, [sp, #24]
	tmp[5] = product[15];
 8001270:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[7] = product[8];
 8001272:	6a23      	ldr	r3, [r4, #32]
	tmp[5] = product[15];
 8001274:	9205      	str	r2, [sp, #20]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 8001276:	4405      	add	r5, r0
	tmp[7] = product[8];
 8001278:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 800127a:	466a      	mov	r2, sp
 800127c:	2308      	movs	r3, #8
 800127e:	4631      	mov	r1, r6
 8001280:	4630      	mov	r0, r6
 8001282:	f7ff fe3b 	bl	8000efc <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
 8001286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001288:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
 800128a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800128c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
 800128e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001290:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
 8001292:	6a23      	ldr	r3, [r4, #32]
 8001294:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
 8001296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001298:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
 800129a:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 800129c:	2308      	movs	r3, #8
 800129e:	466a      	mov	r2, sp
 80012a0:	4631      	mov	r1, r6
 80012a2:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
 80012a4:	9705      	str	r7, [sp, #20]
 80012a6:	9704      	str	r7, [sp, #16]
 80012a8:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012aa:	f7ff ff68 	bl	800117e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
 80012ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012b0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
 80012b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012b4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
 80012b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012b8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
 80012ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012bc:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
 80012be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012c0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
 80012c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012c4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012c6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012c8:	2308      	movs	r3, #8
 80012ca:	466a      	mov	r2, sp
 80012cc:	4631      	mov	r1, r6
 80012ce:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
 80012d0:	9705      	str	r7, [sp, #20]
 80012d2:	9704      	str	r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012d4:	f7ff ff53 	bl	800117e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
 80012d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
 80012dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012de:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
 80012e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012e2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
 80012e4:	6a23      	ldr	r3, [r4, #32]
 80012e6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
 80012e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ea:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
 80012ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ee:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[12];
 80012f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012f2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012f4:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 80012f6:	2308      	movs	r3, #8
 80012f8:	466a      	mov	r2, sp
 80012fa:	4631      	mov	r1, r6
 80012fc:	4630      	mov	r0, r6
	tmp[6] = 0;
 80012fe:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 8001300:	f7ff ff3d 	bl	800117e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
 8001304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001306:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
 8001308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800130a:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
	tmp[3] = product[9];
 800130c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800130e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
 8001310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001312:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
 8001314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001316:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
 8001318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800131a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 800131c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 800131e:	2308      	movs	r3, #8
 8001320:	466a      	mov	r2, sp
 8001322:	4631      	mov	r1, r6
 8001324:	4630      	mov	r0, r6
	tmp[2] = 0;
 8001326:	9702      	str	r7, [sp, #8]
	tmp[6] = 0;
 8001328:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
 800132a:	f7ff ff28 	bl	800117e <uECC_vli_sub>

	if (carry < 0) {
 800132e:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 8001330:	4c0d      	ldr	r4, [pc, #52]	; (8001368 <vli_mmod_fast_secp256r1+0x1a8>)
	if (carry < 0) {
 8001332:	d40f      	bmi.n	8001354 <vli_mmod_fast_secp256r1+0x194>
		}
		while (carry < 0);
	} else  {
		while (carry || 
 8001334:	b935      	cbnz	r5, 8001344 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
 8001336:	2208      	movs	r2, #8
 8001338:	4631      	mov	r1, r6
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fef7 	bl	800112e <uECC_vli_cmp_unsafe>
		while (carry || 
 8001340:	2801      	cmp	r0, #1
 8001342:	d00f      	beq.n	8001364 <vli_mmod_fast_secp256r1+0x1a4>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 8001344:	2308      	movs	r3, #8
 8001346:	4622      	mov	r2, r4
 8001348:	4631      	mov	r1, r6
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff ff17 	bl	800117e <uECC_vli_sub>
 8001350:	1a2d      	subs	r5, r5, r0
 8001352:	e7ef      	b.n	8001334 <vli_mmod_fast_secp256r1+0x174>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
 8001354:	2308      	movs	r3, #8
 8001356:	4622      	mov	r2, r4
 8001358:	4631      	mov	r1, r6
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff fdce 	bl	8000efc <uECC_vli_add>
		while (carry < 0);
 8001360:	182d      	adds	r5, r5, r0
 8001362:	d4f7      	bmi.n	8001354 <vli_mmod_fast_secp256r1+0x194>
		}
	}
}
 8001364:	b009      	add	sp, #36	; 0x24
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001368:	08012e90 	.word	0x08012e90

0800136c <uECC_vli_modAdd>:
{
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8001372:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8001374:	4623      	mov	r3, r4
{
 8001376:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8001378:	f7ff fdc0 	bl	8000efc <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 800137c:	b930      	cbnz	r0, 800138c <uECC_vli_modAdd+0x20>
 800137e:	4622      	mov	r2, r4
 8001380:	4629      	mov	r1, r5
 8001382:	4630      	mov	r0, r6
 8001384:	f7ff fed3 	bl	800112e <uECC_vli_cmp_unsafe>
 8001388:	2801      	cmp	r0, #1
 800138a:	d007      	beq.n	800139c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
 800138c:	4623      	mov	r3, r4
 800138e:	4632      	mov	r2, r6
 8001390:	4629      	mov	r1, r5
 8001392:	4628      	mov	r0, r5
}
 8001394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
 8001398:	f7ff bef1 	b.w	800117e <uECC_vli_sub>
 800139c:	bd70      	pop	{r4, r5, r6, pc}

0800139e <uECC_vli_modSub>:
{
 800139e:	b570      	push	{r4, r5, r6, lr}
 80013a0:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 80013a4:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80013a6:	4623      	mov	r3, r4
{
 80013a8:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80013aa:	f7ff fee8 	bl	800117e <uECC_vli_sub>
	if (l_borrow) {
 80013ae:	b138      	cbz	r0, 80013c0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
 80013b0:	4623      	mov	r3, r4
 80013b2:	4632      	mov	r2, r6
 80013b4:	4629      	mov	r1, r5
 80013b6:	4628      	mov	r0, r5
}
 80013b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
 80013bc:	f7ff bd9e 	b.w	8000efc <uECC_vli_add>
 80013c0:	bd70      	pop	{r4, r5, r6, pc}

080013c2 <uECC_vli_mmod>:
{
 80013c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c6:	b0a5      	sub	sp, #148	; 0x94
 80013c8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
 80013ca:	9103      	str	r1, [sp, #12]
 80013cc:	ab14      	add	r3, sp, #80	; 0x50
			   uECC_vli_numBits(mod, num_words);
 80013ce:	4629      	mov	r1, r5
{
 80013d0:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
 80013d2:	4610      	mov	r0, r2
{
 80013d4:	4617      	mov	r7, r2
	uECC_word_t *v[2] = {tmp, product};
 80013d6:	9302      	str	r3, [sp, #8]
			   uECC_vli_numBits(mod, num_words);
 80013d8:	f7ff fe80 	bl	80010dc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
 80013dc:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
 80013e0:	b204      	sxth	r4, r0
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 80013e2:	4263      	negs	r3, r4
 80013e4:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
 80013e8:	f04f 0620 	mov.w	r6, #32
 80013ec:	fb94 f6f6 	sdiv	r6, r4, r6
 80013f0:	b276      	sxtb	r6, r6
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 80013f2:	f004 091f 	and.w	r9, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
 80013f6:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
 80013f8:	bf58      	it	pl
 80013fa:	f1c3 0900 	rsbpl	r9, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
 80013fe:	4631      	mov	r1, r6
 8001400:	f7ff fe48 	bl	8001094 <uECC_vli_clear>
	if (bit_shift > 0) {
 8001404:	f1b9 0f00 	cmp.w	r9, #0
 8001408:	b230      	sxth	r0, r6
 800140a:	dd2b      	ble.n	8001464 <uECC_vli_mmod+0xa2>
 800140c:	ab04      	add	r3, sp, #16
 800140e:	2200      	movs	r2, #0
 8001410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 8001414:	f1c9 0e20 	rsb	lr, r9, #32
	if (bit_shift > 0) {
 8001418:	4613      	mov	r3, r2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 800141a:	42ab      	cmp	r3, r5
 800141c:	d317      	bcc.n	800144e <uECC_vli_mmod+0x8c>
		for (i = 0; i < num_words * 2; ++i) {
 800141e:	b22f      	sxth	r7, r5
 8001420:	007b      	lsls	r3, r7, #1
 8001422:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8001424:	ab04      	add	r3, sp, #16
 8001426:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 800142a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800142e:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 8001430:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 8001432:	eb03 0989 	add.w	r9, r3, r9, lsl #2
	for (index = 1; shift >= 0; --shift) {
 8001436:	2c00      	cmp	r4, #0
 8001438:	db55      	blt.n	80014e6 <uECC_vli_mmod+0x124>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 800143a:	ab24      	add	r3, sp, #144	; 0x90
 800143c:	2200      	movs	r2, #0
			v[1 - index][i] = diff;
 800143e:	f1c6 0001 	rsb	r0, r6, #1
 8001442:	4696      	mov	lr, r2
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8001444:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
 8001448:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800144c:	e02d      	b.n	80014aa <uECC_vli_mmod+0xe8>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 800144e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8001452:	fa06 f109 	lsl.w	r1, r6, r9
 8001456:	430a      	orrs	r2, r1
 8001458:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 800145c:	fa26 f20e 	lsr.w	r2, r6, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
 8001460:	3301      	adds	r3, #1
 8001462:	e7da      	b.n	800141a <uECC_vli_mmod+0x58>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 8001464:	ab04      	add	r3, sp, #16
 8001466:	462a      	mov	r2, r5
 8001468:	4639      	mov	r1, r7
 800146a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800146e:	f7ff fe52 	bl	8001116 <uECC_vli_set>
 8001472:	e7d4      	b.n	800141e <uECC_vli_mmod+0x5c>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8001474:	fa0f fc81 	sxth.w	ip, r1
 8001478:	f85a 3c88 	ldr.w	r3, [sl, #-136]
 800147c:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 8001480:	ab24      	add	r3, sp, #144	; 0x90
 8001482:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001486:	f851 3c80 	ldr.w	r3, [r1, #-128]
 800148a:	ebab 0303 	sub.w	r3, fp, r3
 800148e:	eba3 030e 	sub.w	r3, r3, lr
			if (diff != v[index][i]) {
 8001492:	459b      	cmp	fp, r3
 8001494:	d004      	beq.n	80014a0 <uECC_vli_mmod+0xde>
				borrow = (diff > v[index][i]);
 8001496:	bf34      	ite	cc
 8001498:	f04f 0e01 	movcc.w	lr, #1
 800149c:	f04f 0e00 	movcs.w	lr, #0
			v[1 - index][i] = diff;
 80014a0:	f850 1c88 	ldr.w	r1, [r0, #-136]
 80014a4:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
 80014a8:	3201      	adds	r2, #1
		for (i = 0; i < num_words * 2; ++i) {
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	b251      	sxtb	r1, r2
 80014ae:	4299      	cmp	r1, r3
 80014b0:	dbe0      	blt.n	8001474 <uECC_vli_mmod+0xb2>
		index = !(index ^ borrow);
 80014b2:	eba6 030e 	sub.w	r3, r6, lr
 80014b6:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
 80014b8:	4629      	mov	r1, r5
 80014ba:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
 80014bc:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
 80014be:	f7ff fd3d 	bl	8000f3c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80014c2:	ab24      	add	r3, sp, #144	; 0x90
 80014c4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80014c8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80014ca:	f853 2c80 	ldr.w	r2, [r3, #-128]
 80014ce:	f859 3c80 	ldr.w	r3, [r9, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80014d2:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
 80014d4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80014d8:	3c01      	subs	r4, #1
 80014da:	f849 3c80 	str.w	r3, [r9, #-128]
 80014de:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
 80014e0:	f7ff fd2c 	bl	8000f3c <uECC_vli_rshift1>
 80014e4:	e7a7      	b.n	8001436 <uECC_vli_mmod+0x74>
	uECC_vli_set(result, v[index], num_words);
 80014e6:	ab24      	add	r3, sp, #144	; 0x90
 80014e8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80014ec:	462a      	mov	r2, r5
 80014ee:	f856 1c88 	ldr.w	r1, [r6, #-136]
 80014f2:	4640      	mov	r0, r8
 80014f4:	f7ff fe0f 	bl	8001116 <uECC_vli_set>
}
 80014f8:	b025      	add	sp, #148	; 0x94
 80014fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014fe <uECC_vli_modMult_fast>:
{
 80014fe:	b530      	push	{r4, r5, lr}
 8001500:	461c      	mov	r4, r3
 8001502:	b091      	sub	sp, #68	; 0x44
 8001504:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	4668      	mov	r0, sp
 800150c:	f7ff fd40 	bl	8000f90 <uECC_vli_mult>
	curve->mmod_fast(result, product);
 8001510:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001514:	4669      	mov	r1, sp
 8001516:	4628      	mov	r0, r5
 8001518:	4798      	blx	r3
}
 800151a:	b011      	add	sp, #68	; 0x44
 800151c:	bd30      	pop	{r4, r5, pc}

0800151e <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
 800151e:	4613      	mov	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f7ff bfec 	b.w	80014fe <uECC_vli_modMult_fast>

08001526 <double_jacobian_default>:
{
 8001526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
 800152a:	f993 6000 	ldrsb.w	r6, [r3]
{
 800152e:	b092      	sub	sp, #72	; 0x48
 8001530:	4604      	mov	r4, r0
 8001532:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
 8001534:	4610      	mov	r0, r2
 8001536:	4631      	mov	r1, r6
{
 8001538:	4615      	mov	r5, r2
 800153a:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
 800153c:	f7ff fdb5 	bl	80010aa <uECC_vli_isZero>
 8001540:	2800      	cmp	r0, #0
 8001542:	f040 8093 	bne.w	800166c <double_jacobian_default+0x146>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8001546:	4642      	mov	r2, r8
 8001548:	4649      	mov	r1, r9
 800154a:	a802      	add	r0, sp, #8
 800154c:	f7ff ffe7 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8001550:	4643      	mov	r3, r8
 8001552:	aa02      	add	r2, sp, #8
 8001554:	4621      	mov	r1, r4
 8001556:	a80a      	add	r0, sp, #40	; 0x28
 8001558:	f7ff ffd1 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 800155c:	a902      	add	r1, sp, #8
 800155e:	4608      	mov	r0, r1
 8001560:	4642      	mov	r2, r8
 8001562:	f7ff ffdc 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8001566:	4643      	mov	r3, r8
 8001568:	462a      	mov	r2, r5
 800156a:	4649      	mov	r1, r9
 800156c:	4648      	mov	r0, r9
 800156e:	f7ff ffc6 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8001572:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8001576:	4642      	mov	r2, r8
 8001578:	4629      	mov	r1, r5
 800157a:	4628      	mov	r0, r5
 800157c:	f7ff ffcf 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8001580:	463b      	mov	r3, r7
 8001582:	462a      	mov	r2, r5
 8001584:	4621      	mov	r1, r4
 8001586:	4620      	mov	r0, r4
 8001588:	9600      	str	r6, [sp, #0]
 800158a:	f7ff feef 	bl	800136c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 800158e:	463b      	mov	r3, r7
 8001590:	462a      	mov	r2, r5
 8001592:	4629      	mov	r1, r5
 8001594:	4628      	mov	r0, r5
 8001596:	9600      	str	r6, [sp, #0]
 8001598:	f7ff fee8 	bl	800136c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 800159c:	463b      	mov	r3, r7
 800159e:	462a      	mov	r2, r5
 80015a0:	4621      	mov	r1, r4
 80015a2:	4628      	mov	r0, r5
 80015a4:	9600      	str	r6, [sp, #0]
 80015a6:	f7ff fefa 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
 80015aa:	4643      	mov	r3, r8
 80015ac:	462a      	mov	r2, r5
 80015ae:	4621      	mov	r1, r4
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff ffa4 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 80015b6:	463b      	mov	r3, r7
 80015b8:	4622      	mov	r2, r4
 80015ba:	4621      	mov	r1, r4
 80015bc:	4628      	mov	r0, r5
 80015be:	9600      	str	r6, [sp, #0]
 80015c0:	f7ff fed4 	bl	800136c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 80015c4:	463b      	mov	r3, r7
 80015c6:	9600      	str	r6, [sp, #0]
 80015c8:	462a      	mov	r2, r5
 80015ca:	4621      	mov	r1, r4
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fecd 	bl	800136c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 80015d2:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
 80015d4:	07db      	lsls	r3, r3, #31
 80015d6:	d54c      	bpl.n	8001672 <double_jacobian_default+0x14c>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 80015d8:	4633      	mov	r3, r6
 80015da:	463a      	mov	r2, r7
 80015dc:	4621      	mov	r1, r4
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fc8c 	bl	8000efc <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
 80015e4:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 80015e6:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fca7 	bl	8000f3c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 80015ee:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80015f8:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
 80015fc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
 8001600:	4642      	mov	r2, r8
 8001602:	4621      	mov	r1, r4
 8001604:	4628      	mov	r0, r5
 8001606:	f7ff ff8a 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 800160a:	463b      	mov	r3, r7
 800160c:	aa0a      	add	r2, sp, #40	; 0x28
 800160e:	4629      	mov	r1, r5
 8001610:	4628      	mov	r0, r5
 8001612:	9600      	str	r6, [sp, #0]
 8001614:	f7ff fec3 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8001618:	463b      	mov	r3, r7
 800161a:	aa0a      	add	r2, sp, #40	; 0x28
 800161c:	4629      	mov	r1, r5
 800161e:	4628      	mov	r0, r5
 8001620:	9600      	str	r6, [sp, #0]
 8001622:	f7ff febc 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8001626:	a90a      	add	r1, sp, #40	; 0x28
 8001628:	4608      	mov	r0, r1
 800162a:	463b      	mov	r3, r7
 800162c:	462a      	mov	r2, r5
 800162e:	9600      	str	r6, [sp, #0]
 8001630:	f7ff feb5 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
 8001634:	4643      	mov	r3, r8
 8001636:	aa0a      	add	r2, sp, #40	; 0x28
 8001638:	4621      	mov	r1, r4
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff ff5f 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
 8001640:	aa02      	add	r2, sp, #8
 8001642:	463b      	mov	r3, r7
 8001644:	4610      	mov	r0, r2
 8001646:	4621      	mov	r1, r4
 8001648:	9600      	str	r6, [sp, #0]
 800164a:	f7ff fea8 	bl	800139e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
 800164e:	4632      	mov	r2, r6
 8001650:	4629      	mov	r1, r5
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fd5f 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
 8001658:	4632      	mov	r2, r6
 800165a:	4649      	mov	r1, r9
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff fd5a 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
 8001662:	4632      	mov	r2, r6
 8001664:	a902      	add	r1, sp, #8
 8001666:	4648      	mov	r0, r9
 8001668:	f7ff fd55 	bl	8001116 <uECC_vli_set>
}
 800166c:	b012      	add	sp, #72	; 0x48
 800166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
 8001672:	4631      	mov	r1, r6
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fc61 	bl	8000f3c <uECC_vli_rshift1>
 800167a:	e7c1      	b.n	8001600 <double_jacobian_default+0xda>

0800167c <x_side_default>:
{
 800167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001680:	4615      	mov	r5, r2
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	4604      	mov	r4, r0
 8001686:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	a802      	add	r0, sp, #8
 800168e:	f7ff f923 	bl	80008d8 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 8001692:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
 8001694:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 8001698:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 800169a:	462a      	mov	r2, r5
 800169c:	4641      	mov	r1, r8
 800169e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
 80016a0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
 80016a2:	f7ff ff3c 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 80016a6:	4633      	mov	r3, r6
 80016a8:	aa02      	add	r2, sp, #8
 80016aa:	4621      	mov	r1, r4
 80016ac:	4620      	mov	r0, r4
 80016ae:	9700      	str	r7, [sp, #0]
 80016b0:	f7ff fe75 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 80016b4:	462b      	mov	r3, r5
 80016b6:	4642      	mov	r2, r8
 80016b8:	4621      	mov	r1, r4
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ff1f 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
 80016c0:	9700      	str	r7, [sp, #0]
 80016c2:	4633      	mov	r3, r6
 80016c4:	f105 0284 	add.w	r2, r5, #132	; 0x84
 80016c8:	4621      	mov	r1, r4
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fe4e 	bl	800136c <uECC_vli_modAdd>
}
 80016d0:	b00a      	add	sp, #40	; 0x28
 80016d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016d6 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
 80016d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016da:	b09b      	sub	sp, #108	; 0x6c
 80016dc:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 80016de:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80016e0:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80016e4:	9500      	str	r5, [sp, #0]
{
 80016e6:	4698      	mov	r8, r3
 80016e8:	4607      	mov	r7, r0
 80016ea:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 80016ec:	4623      	mov	r3, r4
 80016ee:	4602      	mov	r2, r0
 80016f0:	4631      	mov	r1, r6
 80016f2:	a802      	add	r0, sp, #8
 80016f4:	f7ff fe53 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 80016f8:	a902      	add	r1, sp, #8
 80016fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80016fc:	4608      	mov	r0, r1
 80016fe:	f7ff ff0e 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8001702:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001704:	aa02      	add	r2, sp, #8
 8001706:	4639      	mov	r1, r7
 8001708:	4638      	mov	r0, r7
 800170a:	f7ff fef8 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 800170e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001710:	aa02      	add	r2, sp, #8
 8001712:	4631      	mov	r1, r6
 8001714:	4630      	mov	r0, r6
 8001716:	f7ff fef2 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 800171a:	4623      	mov	r3, r4
 800171c:	464a      	mov	r2, r9
 800171e:	4641      	mov	r1, r8
 8001720:	a802      	add	r0, sp, #8
 8001722:	9500      	str	r5, [sp, #0]
 8001724:	f7ff fe22 	bl	800136c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8001728:	4623      	mov	r3, r4
 800172a:	464a      	mov	r2, r9
 800172c:	4641      	mov	r1, r8
 800172e:	4640      	mov	r0, r8
 8001730:	9500      	str	r5, [sp, #0]
 8001732:	f7ff fe34 	bl	800139e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8001736:	4623      	mov	r3, r4
 8001738:	463a      	mov	r2, r7
 800173a:	4631      	mov	r1, r6
 800173c:	a80a      	add	r0, sp, #40	; 0x28
 800173e:	9500      	str	r5, [sp, #0]
 8001740:	f7ff fe2d 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8001744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001746:	aa0a      	add	r2, sp, #40	; 0x28
 8001748:	4649      	mov	r1, r9
 800174a:	4648      	mov	r0, r9
 800174c:	f7ff fed7 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8001750:	4623      	mov	r3, r4
 8001752:	4632      	mov	r2, r6
 8001754:	4639      	mov	r1, r7
 8001756:	a80a      	add	r0, sp, #40	; 0x28
 8001758:	9500      	str	r5, [sp, #0]
 800175a:	f7ff fe07 	bl	800136c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 800175e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001760:	4641      	mov	r1, r8
 8001762:	4630      	mov	r0, r6
 8001764:	f7ff fedb 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 8001768:	4623      	mov	r3, r4
 800176a:	aa0a      	add	r2, sp, #40	; 0x28
 800176c:	4631      	mov	r1, r6
 800176e:	4630      	mov	r0, r6
 8001770:	9500      	str	r5, [sp, #0]
 8001772:	f7ff fe14 	bl	800139e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8001776:	4623      	mov	r3, r4
 8001778:	4632      	mov	r2, r6
 800177a:	4639      	mov	r1, r7
 800177c:	a812      	add	r0, sp, #72	; 0x48
 800177e:	9500      	str	r5, [sp, #0]
 8001780:	f7ff fe0d 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8001784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001786:	aa12      	add	r2, sp, #72	; 0x48
 8001788:	4641      	mov	r1, r8
 800178a:	4640      	mov	r0, r8
 800178c:	f7ff feb7 	bl	80014fe <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
 8001790:	4623      	mov	r3, r4
 8001792:	464a      	mov	r2, r9
 8001794:	4641      	mov	r1, r8
 8001796:	4640      	mov	r0, r8
 8001798:	9500      	str	r5, [sp, #0]
 800179a:	f7ff fe00 	bl	800139e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 800179e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80017a0:	a902      	add	r1, sp, #8
 80017a2:	a812      	add	r0, sp, #72	; 0x48
 80017a4:	f7ff febb 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 80017a8:	a912      	add	r1, sp, #72	; 0x48
 80017aa:	4623      	mov	r3, r4
 80017ac:	aa0a      	add	r2, sp, #40	; 0x28
 80017ae:	4608      	mov	r0, r1
 80017b0:	9500      	str	r5, [sp, #0]
 80017b2:	f7ff fdf4 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 80017b6:	4623      	mov	r3, r4
 80017b8:	463a      	mov	r2, r7
 80017ba:	a912      	add	r1, sp, #72	; 0x48
 80017bc:	a80a      	add	r0, sp, #40	; 0x28
 80017be:	9500      	str	r5, [sp, #0]
 80017c0:	f7ff fded 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 80017c4:	a90a      	add	r1, sp, #40	; 0x28
 80017c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017c8:	aa02      	add	r2, sp, #8
 80017ca:	4608      	mov	r0, r1
 80017cc:	f7ff fe97 	bl	80014fe <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
 80017d0:	4623      	mov	r3, r4
 80017d2:	464a      	mov	r2, r9
 80017d4:	a90a      	add	r1, sp, #40	; 0x28
 80017d6:	4648      	mov	r0, r9
 80017d8:	9500      	str	r5, [sp, #0]
 80017da:	f7ff fde0 	bl	800139e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
 80017de:	462a      	mov	r2, r5
 80017e0:	a912      	add	r1, sp, #72	; 0x48
 80017e2:	4638      	mov	r0, r7
 80017e4:	f7ff fc97 	bl	8001116 <uECC_vli_set>
}
 80017e8:	b01b      	add	sp, #108	; 0x6c
 80017ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017ee <uECC_vli_modInv>:
{
 80017ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f0:	460f      	mov	r7, r1
 80017f2:	b0a1      	sub	sp, #132	; 0x84
 80017f4:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
 80017f6:	4619      	mov	r1, r3
 80017f8:	4638      	mov	r0, r7
{
 80017fa:	4615      	mov	r5, r2
 80017fc:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
 80017fe:	f7ff fc54 	bl	80010aa <uECC_vli_isZero>
 8001802:	b128      	cbz	r0, 8001810 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
 8001804:	4621      	mov	r1, r4
 8001806:	4630      	mov	r0, r6
 8001808:	f7ff fc44 	bl	8001094 <uECC_vli_clear>
}
 800180c:	b021      	add	sp, #132	; 0x84
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
 8001810:	4622      	mov	r2, r4
 8001812:	4639      	mov	r1, r7
 8001814:	4668      	mov	r0, sp
 8001816:	f7ff fc7e 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
 800181a:	4622      	mov	r2, r4
 800181c:	4629      	mov	r1, r5
 800181e:	a808      	add	r0, sp, #32
 8001820:	f7ff fc79 	bl	8001116 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
 8001824:	4621      	mov	r1, r4
 8001826:	a810      	add	r0, sp, #64	; 0x40
 8001828:	f7ff fc34 	bl	8001094 <uECC_vli_clear>
	u[0] = 1;
 800182c:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
 800182e:	4621      	mov	r1, r4
 8001830:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
 8001832:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
 8001834:	f7ff fc2e 	bl	8001094 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8001838:	4622      	mov	r2, r4
 800183a:	a908      	add	r1, sp, #32
 800183c:	4668      	mov	r0, sp
 800183e:	f7ff fc76 	bl	800112e <uECC_vli_cmp_unsafe>
 8001842:	b928      	cbnz	r0, 8001850 <uECC_vli_modInv+0x62>
  	uECC_vli_set(result, u, num_words);
 8001844:	4622      	mov	r2, r4
 8001846:	a910      	add	r1, sp, #64	; 0x40
 8001848:	4630      	mov	r0, r6
 800184a:	f7ff fc64 	bl	8001116 <uECC_vli_set>
 800184e:	e7dd      	b.n	800180c <uECC_vli_modInv+0x1e>
		if (EVEN(a)) {
 8001850:	9b00      	ldr	r3, [sp, #0]
 8001852:	07da      	lsls	r2, r3, #31
 8001854:	d409      	bmi.n	800186a <uECC_vli_modInv+0x7c>
			uECC_vli_rshift1(a, num_words);
 8001856:	4621      	mov	r1, r4
 8001858:	4668      	mov	r0, sp
 800185a:	f7ff fb6f 	bl	8000f3c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
 800185e:	4622      	mov	r2, r4
 8001860:	4629      	mov	r1, r5
 8001862:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
 8001864:	f7ff fb78 	bl	8000f58 <vli_modInv_update>
 8001868:	e7e6      	b.n	8001838 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
 800186a:	9b08      	ldr	r3, [sp, #32]
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	d407      	bmi.n	8001880 <uECC_vli_modInv+0x92>
			uECC_vli_rshift1(b, num_words);
 8001870:	4621      	mov	r1, r4
 8001872:	a808      	add	r0, sp, #32
 8001874:	f7ff fb62 	bl	8000f3c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
 8001878:	4622      	mov	r2, r4
 800187a:	4629      	mov	r1, r5
 800187c:	a818      	add	r0, sp, #96	; 0x60
 800187e:	e7f1      	b.n	8001864 <uECC_vli_modInv+0x76>
		} else if (cmpResult > 0) {
 8001880:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
 8001882:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
 8001884:	dd1c      	ble.n	80018c0 <uECC_vli_modInv+0xd2>
			uECC_vli_sub(a, a, b, num_words);
 8001886:	aa08      	add	r2, sp, #32
 8001888:	4669      	mov	r1, sp
 800188a:	4668      	mov	r0, sp
 800188c:	f7ff fc77 	bl	800117e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
 8001890:	4621      	mov	r1, r4
 8001892:	4668      	mov	r0, sp
 8001894:	f7ff fb52 	bl	8000f3c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8001898:	4622      	mov	r2, r4
 800189a:	a918      	add	r1, sp, #96	; 0x60
 800189c:	a810      	add	r0, sp, #64	; 0x40
 800189e:	f7ff fc46 	bl	800112e <uECC_vli_cmp_unsafe>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	da05      	bge.n	80018b2 <uECC_vli_modInv+0xc4>
        			uECC_vli_add(u, u, mod, num_words);
 80018a6:	a910      	add	r1, sp, #64	; 0x40
 80018a8:	4623      	mov	r3, r4
 80018aa:	462a      	mov	r2, r5
 80018ac:	4608      	mov	r0, r1
 80018ae:	f7ff fb25 	bl	8000efc <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
 80018b2:	a910      	add	r1, sp, #64	; 0x40
 80018b4:	4623      	mov	r3, r4
 80018b6:	aa18      	add	r2, sp, #96	; 0x60
 80018b8:	4608      	mov	r0, r1
 80018ba:	f7ff fc60 	bl	800117e <uECC_vli_sub>
 80018be:	e7ce      	b.n	800185e <uECC_vli_modInv+0x70>
      			uECC_vli_sub(b, b, a, num_words);
 80018c0:	a908      	add	r1, sp, #32
 80018c2:	466a      	mov	r2, sp
 80018c4:	4608      	mov	r0, r1
 80018c6:	f7ff fc5a 	bl	800117e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
 80018ca:	4621      	mov	r1, r4
 80018cc:	a808      	add	r0, sp, #32
 80018ce:	f7ff fb35 	bl	8000f3c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 80018d2:	4622      	mov	r2, r4
 80018d4:	a910      	add	r1, sp, #64	; 0x40
 80018d6:	a818      	add	r0, sp, #96	; 0x60
 80018d8:	f7ff fc29 	bl	800112e <uECC_vli_cmp_unsafe>
 80018dc:	2800      	cmp	r0, #0
 80018de:	da05      	bge.n	80018ec <uECC_vli_modInv+0xfe>
        			uECC_vli_add(v, v, mod, num_words);
 80018e0:	a918      	add	r1, sp, #96	; 0x60
 80018e2:	4623      	mov	r3, r4
 80018e4:	462a      	mov	r2, r5
 80018e6:	4608      	mov	r0, r1
 80018e8:	f7ff fb08 	bl	8000efc <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
 80018ec:	a918      	add	r1, sp, #96	; 0x60
 80018ee:	4623      	mov	r3, r4
 80018f0:	aa10      	add	r2, sp, #64	; 0x40
 80018f2:	4608      	mov	r0, r1
 80018f4:	f7ff fc43 	bl	800117e <uECC_vli_sub>
 80018f8:	e7be      	b.n	8001878 <uECC_vli_modInv+0x8a>

080018fa <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
 80018fa:	7809      	ldrb	r1, [r1, #0]
 80018fc:	0049      	lsls	r1, r1, #1
 80018fe:	b249      	sxtb	r1, r1
 8001900:	f7ff bbd3 	b.w	80010aa <uECC_vli_isZero>

08001904 <apply_z>:
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4615      	mov	r5, r2
 8001908:	b089      	sub	sp, #36	; 0x24
 800190a:	461c      	mov	r4, r3
 800190c:	4607      	mov	r7, r0
 800190e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8001910:	461a      	mov	r2, r3
 8001912:	4629      	mov	r1, r5
 8001914:	4668      	mov	r0, sp
 8001916:	f7ff fe02 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 800191a:	4623      	mov	r3, r4
 800191c:	466a      	mov	r2, sp
 800191e:	4639      	mov	r1, r7
 8001920:	4638      	mov	r0, r7
 8001922:	f7ff fdec 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8001926:	4623      	mov	r3, r4
 8001928:	462a      	mov	r2, r5
 800192a:	4669      	mov	r1, sp
 800192c:	4668      	mov	r0, sp
 800192e:	f7ff fde6 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8001932:	4623      	mov	r3, r4
 8001934:	466a      	mov	r2, sp
 8001936:	4631      	mov	r1, r6
 8001938:	4630      	mov	r0, r6
 800193a:	f7ff fde0 	bl	80014fe <uECC_vli_modMult_fast>
}
 800193e:	b009      	add	sp, #36	; 0x24
 8001940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001942 <XYcZ_add>:
{
 8001942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001946:	b08b      	sub	sp, #44	; 0x2c
 8001948:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
 800194a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800194c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8001950:	9600      	str	r6, [sp, #0]
{
 8001952:	461f      	mov	r7, r3
 8001954:	4680      	mov	r8, r0
 8001956:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8001958:	462b      	mov	r3, r5
 800195a:	4602      	mov	r2, r0
 800195c:	4621      	mov	r1, r4
 800195e:	a802      	add	r0, sp, #8
 8001960:	f7ff fd1d 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
 8001964:	a902      	add	r1, sp, #8
 8001966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001968:	4608      	mov	r0, r1
 800196a:	f7ff fdd8 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 800196e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001970:	aa02      	add	r2, sp, #8
 8001972:	4641      	mov	r1, r8
 8001974:	4640      	mov	r0, r8
 8001976:	f7ff fdc2 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 800197a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800197c:	aa02      	add	r2, sp, #8
 800197e:	4621      	mov	r1, r4
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff fdbc 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8001986:	462b      	mov	r3, r5
 8001988:	464a      	mov	r2, r9
 800198a:	4639      	mov	r1, r7
 800198c:	4638      	mov	r0, r7
 800198e:	9600      	str	r6, [sp, #0]
 8001990:	f7ff fd05 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 8001994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001996:	4639      	mov	r1, r7
 8001998:	a802      	add	r0, sp, #8
 800199a:	f7ff fdc0 	bl	800151e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 800199e:	a902      	add	r1, sp, #8
 80019a0:	462b      	mov	r3, r5
 80019a2:	4642      	mov	r2, r8
 80019a4:	4608      	mov	r0, r1
 80019a6:	9600      	str	r6, [sp, #0]
 80019a8:	f7ff fcf9 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 80019ac:	a902      	add	r1, sp, #8
 80019ae:	462b      	mov	r3, r5
 80019b0:	4622      	mov	r2, r4
 80019b2:	4608      	mov	r0, r1
 80019b4:	9600      	str	r6, [sp, #0]
 80019b6:	f7ff fcf2 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80019ba:	462b      	mov	r3, r5
 80019bc:	4642      	mov	r2, r8
 80019be:	4621      	mov	r1, r4
 80019c0:	4620      	mov	r0, r4
 80019c2:	9600      	str	r6, [sp, #0]
 80019c4:	f7ff fceb 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
 80019c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80019ca:	4622      	mov	r2, r4
 80019cc:	4649      	mov	r1, r9
 80019ce:	4648      	mov	r0, r9
 80019d0:	f7ff fd95 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80019d4:	462b      	mov	r3, r5
 80019d6:	aa02      	add	r2, sp, #8
 80019d8:	4641      	mov	r1, r8
 80019da:	4620      	mov	r0, r4
 80019dc:	9600      	str	r6, [sp, #0]
 80019de:	f7ff fcde 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 80019e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80019e4:	4622      	mov	r2, r4
 80019e6:	4639      	mov	r1, r7
 80019e8:	4638      	mov	r0, r7
 80019ea:	f7ff fd88 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 80019ee:	462b      	mov	r3, r5
 80019f0:	464a      	mov	r2, r9
 80019f2:	4639      	mov	r1, r7
 80019f4:	4638      	mov	r0, r7
 80019f6:	9600      	str	r6, [sp, #0]
 80019f8:	f7ff fcd1 	bl	800139e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
 80019fc:	4632      	mov	r2, r6
 80019fe:	a902      	add	r1, sp, #8
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff fb88 	bl	8001116 <uECC_vli_set>
}
 8001a06:	b00b      	add	sp, #44	; 0x2c
 8001a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a0c <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
 8001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a10:	b0b1      	sub	sp, #196	; 0xc4
 8001a12:	461e      	mov	r6, r3
 8001a14:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 8001a16:	9004      	str	r0, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
 8001a18:	f994 7000 	ldrsb.w	r7, [r4]
{
 8001a1c:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
 8001a1e:	a818      	add	r0, sp, #96	; 0x60
 8001a20:	463a      	mov	r2, r7
{
 8001a22:	9105      	str	r1, [sp, #20]
	uECC_vli_set(Rx[1], point, num_words);
 8001a24:	f7ff fb77 	bl	8001116 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
 8001a28:	00bb      	lsls	r3, r7, #2
 8001a2a:	9307      	str	r3, [sp, #28]
 8001a2c:	9b05      	ldr	r3, [sp, #20]
 8001a2e:	00ba      	lsls	r2, r7, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	463a      	mov	r2, r7
 8001a36:	a828      	add	r0, sp, #160	; 0xa0
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	f7ff fb6c 	bl	8001116 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
 8001a3e:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
 8001a42:	2e00      	cmp	r6, #0
 8001a44:	f000 8089 	beq.w	8001b5a <EccPoint_mult+0x14e>
		uECC_vli_set(z, initial_Z, num_words);
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4631      	mov	r1, r6
 8001a4c:	a808      	add	r0, sp, #32
 8001a4e:	f7ff fb62 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
 8001a52:	ae10      	add	r6, sp, #64	; 0x40
 8001a54:	462a      	mov	r2, r5
 8001a56:	a918      	add	r1, sp, #96	; 0x60
 8001a58:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
 8001a5a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
 8001a5e:	f7ff fb5a 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
 8001a62:	462a      	mov	r2, r5
 8001a64:	a928      	add	r1, sp, #160	; 0xa0
 8001a66:	4648      	mov	r0, r9
 8001a68:	f7ff fb55 	bl	8001116 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	aa08      	add	r2, sp, #32
 8001a70:	a928      	add	r1, sp, #160	; 0xa0
 8001a72:	a818      	add	r0, sp, #96	; 0x60
 8001a74:	f7ff ff46 	bl	8001904 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
 8001a78:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	aa08      	add	r2, sp, #32
 8001a80:	a928      	add	r1, sp, #160	; 0xa0
 8001a82:	a818      	add	r0, sp, #96	; 0x60
 8001a84:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
 8001a86:	4623      	mov	r3, r4
 8001a88:	aa08      	add	r2, sp, #32
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f7ff ff39 	bl	8001904 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
 8001a92:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
 8001a96:	3d02      	subs	r5, #2
 8001a98:	b22d      	sxth	r5, r5
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	dc64      	bgt.n	8001b68 <EccPoint_mult+0x15c>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001a9e:	9b06      	ldr	r3, [sp, #24]
 8001aa0:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001aa2:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
 8001aa4:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001aa8:	ab10      	add	r3, sp, #64	; 0x40
 8001aaa:	0176      	lsls	r6, r6, #5
 8001aac:	43ed      	mvns	r5, r5
 8001aae:	eb03 0806 	add.w	r8, r3, r6
 8001ab2:	f005 0501 	and.w	r5, r5, #1
 8001ab6:	ab20      	add	r3, sp, #128	; 0x80
 8001ab8:	441e      	add	r6, r3
 8001aba:	016d      	lsls	r5, r5, #5
 8001abc:	ab10      	add	r3, sp, #64	; 0x40
 8001abe:	eb03 0905 	add.w	r9, r3, r5
 8001ac2:	ab20      	add	r3, sp, #128	; 0x80
 8001ac4:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8001ac6:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001aca:	462b      	mov	r3, r5
 8001acc:	464a      	mov	r2, r9
 8001ace:	4631      	mov	r1, r6
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	f7ff fe00 	bl	80016d6 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8001ad6:	4653      	mov	r3, sl
 8001ad8:	aa10      	add	r2, sp, #64	; 0x40
 8001ada:	a918      	add	r1, sp, #96	; 0x60
 8001adc:	a808      	add	r0, sp, #32
 8001ade:	9700      	str	r7, [sp, #0]
 8001ae0:	f7ff fc5d 	bl	800139e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
 8001ae4:	a908      	add	r1, sp, #32
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	4632      	mov	r2, r6
 8001aea:	4608      	mov	r0, r1
 8001aec:	f7ff fd07 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
 8001af0:	a908      	add	r1, sp, #32
 8001af2:	4623      	mov	r3, r4
 8001af4:	9a05      	ldr	r2, [sp, #20]
 8001af6:	4608      	mov	r0, r1
 8001af8:	f7ff fd01 	bl	80014fe <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
 8001afc:	a908      	add	r1, sp, #32
 8001afe:	463b      	mov	r3, r7
 8001b00:	4652      	mov	r2, sl
 8001b02:	4608      	mov	r0, r1
 8001b04:	f7ff fe73 	bl	80017ee <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
 8001b08:	a908      	add	r1, sp, #32
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	9a02      	ldr	r2, [sp, #8]
 8001b0e:	4608      	mov	r0, r1
 8001b10:	f7ff fcf5 	bl	80014fe <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
 8001b14:	a908      	add	r1, sp, #32
 8001b16:	4623      	mov	r3, r4
 8001b18:	4642      	mov	r2, r8
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	f7ff fcef 	bl	80014fe <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001b20:	9400      	str	r4, [sp, #0]
 8001b22:	4633      	mov	r3, r6
 8001b24:	4642      	mov	r2, r8
 8001b26:	4629      	mov	r1, r5
 8001b28:	4648      	mov	r0, r9
 8001b2a:	f7ff ff0a 	bl	8001942 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
 8001b2e:	4623      	mov	r3, r4
 8001b30:	aa08      	add	r2, sp, #32
 8001b32:	a920      	add	r1, sp, #128	; 0x80
 8001b34:	a810      	add	r0, sp, #64	; 0x40
 8001b36:	f7ff fee5 	bl	8001904 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	a910      	add	r1, sp, #64	; 0x40
 8001b3e:	9804      	ldr	r0, [sp, #16]
 8001b40:	f7ff fae9 	bl	8001116 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
 8001b44:	9b04      	ldr	r3, [sp, #16]
 8001b46:	9c07      	ldr	r4, [sp, #28]
 8001b48:	4423      	add	r3, r4
 8001b4a:	463a      	mov	r2, r7
 8001b4c:	a920      	add	r1, sp, #128	; 0x80
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fae1 	bl	8001116 <uECC_vli_set>
}
 8001b54:	b031      	add	sp, #196	; 0xc4
 8001b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	a808      	add	r0, sp, #32
 8001b5e:	f7ff fa99 	bl	8001094 <uECC_vli_clear>
		z[0] = 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	9308      	str	r3, [sp, #32]
 8001b66:	e774      	b.n	8001a52 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
 8001b68:	4629      	mov	r1, r5
 8001b6a:	9806      	ldr	r0, [sp, #24]
 8001b6c:	f7ff faac 	bl	80010c8 <uECC_vli_testBit>
 8001b70:	fab0 f080 	clz	r0, r0
 8001b74:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001b76:	f1c0 0801 	rsb	r8, r0, #1
 8001b7a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001b7e:	0140      	lsls	r0, r0, #5
 8001b80:	eb06 0b08 	add.w	fp, r6, r8
 8001b84:	eb06 0a00 	add.w	sl, r6, r0
 8001b88:	44c8      	add	r8, r9
 8001b8a:	eb09 0300 	add.w	r3, r9, r0
 8001b8e:	4652      	mov	r2, sl
 8001b90:	4641      	mov	r1, r8
 8001b92:	4658      	mov	r0, fp
 8001b94:	9400      	str	r4, [sp, #0]
 8001b96:	9303      	str	r3, [sp, #12]
 8001b98:	f7ff fd9d 	bl	80016d6 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001b9c:	9400      	str	r4, [sp, #0]
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	465a      	mov	r2, fp
 8001ba2:	9903      	ldr	r1, [sp, #12]
 8001ba4:	4650      	mov	r0, sl
 8001ba6:	f7ff fecc 	bl	8001942 <XYcZ_add>
 8001baa:	3d01      	subs	r5, #1
 8001bac:	e774      	b.n	8001a98 <EccPoint_mult+0x8c>

08001bae <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
 8001bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8001bb2:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
{
 8001bb6:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001bb8:	f103 0624 	add.w	r6, r3, #36	; 0x24
{
 8001bbc:	4690      	mov	r8, r2
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8001bbe:	f105 041f 	add.w	r4, r5, #31
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	fb94 f4f2 	sdiv	r4, r4, r2
 8001bc8:	b264      	sxtb	r4, r4
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001bca:	4601      	mov	r1, r0
 8001bcc:	4623      	mov	r3, r4
 8001bce:	4632      	mov	r2, r6
 8001bd0:	4638      	mov	r0, r7
 8001bd2:	f7ff f993 	bl	8000efc <uECC_vli_add>
 8001bd6:	b990      	cbnz	r0, 8001bfe <regularize_k+0x50>
 8001bd8:	ebb5 1f44 	cmp.w	r5, r4, lsl #5
 8001bdc:	da11      	bge.n	8001c02 <regularize_k+0x54>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
 8001bde:	4629      	mov	r1, r5
 8001be0:	4638      	mov	r0, r7
 8001be2:	f7ff fa71 	bl	80010c8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8001be6:	1c05      	adds	r5, r0, #0
 8001be8:	bf18      	it	ne
 8001bea:	2501      	movne	r5, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
 8001bec:	4623      	mov	r3, r4
 8001bee:	4632      	mov	r2, r6
 8001bf0:	4639      	mov	r1, r7
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f7ff f982 	bl	8000efc <uECC_vli_add>

	return carry;
}
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8001bfe:	2501      	movs	r5, #1
 8001c00:	e7f4      	b.n	8001bec <regularize_k+0x3e>
 8001c02:	4605      	mov	r5, r0
 8001c04:	e7f2      	b.n	8001bec <regularize_k+0x3e>

08001c06 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
 8001c06:	b530      	push	{r4, r5, lr}
 8001c08:	4614      	mov	r4, r2
 8001c0a:	b095      	sub	sp, #84	; 0x54
 8001c0c:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
 8001c0e:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
 8001c10:	4623      	mov	r3, r4
{
 8001c12:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
 8001c14:	a904      	add	r1, sp, #16
 8001c16:	9102      	str	r1, [sp, #8]
 8001c18:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
 8001c1a:	f7ff ffc8 	bl	8001bae <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
 8001c1e:	fab0 f080 	clz	r0, r0
 8001c22:	ab14      	add	r3, sp, #80	; 0x50
 8001c24:	0940      	lsrs	r0, r0, #5
 8001c26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c2a:	8863      	ldrh	r3, [r4, #2]
 8001c2c:	9401      	str	r4, [sp, #4]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f850 2c48 	ldr.w	r2, [r0, #-72]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f7ff fee4 	bl	8001a0c <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
 8001c44:	4621      	mov	r1, r4
 8001c46:	4628      	mov	r0, r5
 8001c48:	f7ff fe57 	bl	80018fa <EccPoint_isZero>
		return 0;
	}
	return 1;
}
 8001c4c:	fab0 f080 	clz	r0, r0
 8001c50:	0940      	lsrs	r0, r0, #5
 8001c52:	b015      	add	sp, #84	; 0x54
 8001c54:	bd30      	pop	{r4, r5, pc}

08001c56 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
 8001c56:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
 8001c58:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
 8001c5a:	1e4f      	subs	r7, r1, #1
 8001c5c:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	f105 0501 	add.w	r5, r5, #1
 8001c64:	db00      	blt.n	8001c68 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
 8001c68:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 8001c6a:	f023 0603 	bic.w	r6, r3, #3
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	5996      	ldr	r6, [r2, r6]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	fa26 f303 	lsr.w	r3, r6, r3
 8001c7a:	5503      	strb	r3, [r0, r4]
 8001c7c:	e7ee      	b.n	8001c5c <uECC_vli_nativeToBytes+0x6>

08001c7e <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
 8001c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c80:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001c82:	2304      	movs	r3, #4
{
 8001c84:	460e      	mov	r6, r1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001c86:	1cd1      	adds	r1, r2, #3
 8001c88:	fb91 f1f3 	sdiv	r1, r1, r3
 8001c8c:	b249      	sxtb	r1, r1
{
 8001c8e:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
 8001c90:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 8001c92:	f7ff f9ff 	bl	8001094 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
 8001c96:	2200      	movs	r2, #0
 8001c98:	b251      	sxtb	r1, r2
 8001c9a:	428c      	cmp	r4, r1
 8001c9c:	f102 0201 	add.w	r2, r2, #1
 8001ca0:	dc00      	bgt.n	8001ca4 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
 8001ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
 8001ca4:	1a7b      	subs	r3, r7, r1
		native[b / uECC_WORD_SIZE] |=
 8001ca6:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 8001caa:	5c71      	ldrb	r1, [r6, r1]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
 8001cb6:	5829      	ldr	r1, [r5, r0]
 8001cb8:	4319      	orrs	r1, r3
 8001cba:	5029      	str	r1, [r5, r0]
 8001cbc:	e7ec      	b.n	8001c98 <uECC_vli_bytesToNative+0x1a>

08001cbe <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
 8001cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc2:	b090      	sub	sp, #64	; 0x40
 8001cc4:	4606      	mov	r6, r0
 8001cc6:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
 8001cc8:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
 8001ccc:	f7ff fe15 	bl	80018fa <EccPoint_isZero>
 8001cd0:	bb48      	cbnz	r0, 8001d26 <uECC_valid_point+0x68>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8001cd2:	f104 0804 	add.w	r8, r4, #4
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	4631      	mov	r1, r6
 8001cda:	4640      	mov	r0, r8
 8001cdc:	f7ff fa27 	bl	800112e <uECC_vli_cmp_unsafe>
 8001ce0:	2801      	cmp	r0, #1
 8001ce2:	d123      	bne.n	8001d2c <uECC_valid_point+0x6e>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
 8001ce4:	eb06 0785 	add.w	r7, r6, r5, lsl #2
 8001ce8:	462a      	mov	r2, r5
 8001cea:	4639      	mov	r1, r7
 8001cec:	4640      	mov	r0, r8
 8001cee:	f7ff fa1e 	bl	800112e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
 8001cf2:	2801      	cmp	r0, #1
 8001cf4:	d11a      	bne.n	8001d2c <uECC_valid_point+0x6e>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	4639      	mov	r1, r7
 8001cfa:	4668      	mov	r0, sp
 8001cfc:	f7ff fc0f 	bl	800151e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
 8001d00:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001d04:	4622      	mov	r2, r4
 8001d06:	4631      	mov	r1, r6
 8001d08:	a808      	add	r0, sp, #32
 8001d0a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
 8001d0c:	462a      	mov	r2, r5
 8001d0e:	a908      	add	r1, sp, #32
 8001d10:	4668      	mov	r0, sp
 8001d12:	f7ff fa20 	bl	8001156 <uECC_vli_equal>
 8001d16:	2800      	cmp	r0, #0
		return -3;

	return 0;
 8001d18:	bf14      	ite	ne
 8001d1a:	f06f 0002 	mvnne.w	r0, #2
 8001d1e:	2000      	moveq	r0, #0
}
 8001d20:	b010      	add	sp, #64	; 0x40
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2a:	e7f9      	b.n	8001d20 <uECC_valid_point+0x62>
		return -2;
 8001d2c:	f06f 0001 	mvn.w	r0, #1
 8001d30:	e7f6      	b.n	8001d20 <uECC_valid_point+0x62>

08001d32 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
 8001d32:	b570      	push	{r4, r5, r6, lr}
 8001d34:	460c      	mov	r4, r1
 8001d36:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
 8001d38:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8001d3a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
 8001d3e:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8001d40:	4601      	mov	r1, r0
 8001d42:	4668      	mov	r0, sp
 8001d44:	f7ff ff9b 	bl	8001c7e <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
 8001d48:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
 8001d4c:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
 8001d50:	18b1      	adds	r1, r6, r2
 8001d52:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
 8001d56:	f7ff ff92 	bl	8001c7e <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4668      	mov	r0, sp
 8001d60:	f7ff f9e5 	bl	800112e <uECC_vli_cmp_unsafe>
 8001d64:	b128      	cbz	r0, 8001d72 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
 8001d66:	4621      	mov	r1, r4
 8001d68:	4668      	mov	r0, sp
 8001d6a:	f7ff ffa8 	bl	8001cbe <uECC_valid_point>
}
 8001d6e:	b010      	add	sp, #64	; 0x40
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
 8001d72:	f06f 0003 	mvn.w	r0, #3
 8001d76:	e7fa      	b.n	8001d6e <uECC_valid_public_key+0x3c>

08001d78 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 8001d78:	78cb      	ldrb	r3, [r1, #3]
 8001d7a:	7802      	ldrb	r2, [r0, #0]
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	7003      	strb	r3, [r0, #0]
 8001d80:	884b      	ldrh	r3, [r1, #2]
 8001d82:	7842      	ldrb	r2, [r0, #1]
 8001d84:	4053      	eors	r3, r2
 8001d86:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8001d88:	680a      	ldr	r2, [r1, #0]
 8001d8a:	7883      	ldrb	r3, [r0, #2]
 8001d8c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001d90:	7083      	strb	r3, [r0, #2]
 8001d92:	680a      	ldr	r2, [r1, #0]
 8001d94:	78c3      	ldrb	r3, [r0, #3]
 8001d96:	4053      	eors	r3, r2
 8001d98:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 8001d9a:	79cb      	ldrb	r3, [r1, #7]
 8001d9c:	7902      	ldrb	r2, [r0, #4]
 8001d9e:	4053      	eors	r3, r2
 8001da0:	7103      	strb	r3, [r0, #4]
 8001da2:	88cb      	ldrh	r3, [r1, #6]
 8001da4:	7942      	ldrb	r2, [r0, #5]
 8001da6:	4053      	eors	r3, r2
 8001da8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 8001daa:	684a      	ldr	r2, [r1, #4]
 8001dac:	7983      	ldrb	r3, [r0, #6]
 8001dae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001db2:	7183      	strb	r3, [r0, #6]
 8001db4:	684a      	ldr	r2, [r1, #4]
 8001db6:	79c3      	ldrb	r3, [r0, #7]
 8001db8:	4053      	eors	r3, r2
 8001dba:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 8001dbc:	7acb      	ldrb	r3, [r1, #11]
 8001dbe:	7a02      	ldrb	r2, [r0, #8]
 8001dc0:	4053      	eors	r3, r2
 8001dc2:	7203      	strb	r3, [r0, #8]
 8001dc4:	7a42      	ldrb	r2, [r0, #9]
 8001dc6:	894b      	ldrh	r3, [r1, #10]
 8001dc8:	4053      	eors	r3, r2
 8001dca:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8001dcc:	688a      	ldr	r2, [r1, #8]
 8001dce:	7a83      	ldrb	r3, [r0, #10]
 8001dd0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001dd4:	7283      	strb	r3, [r0, #10]
 8001dd6:	688a      	ldr	r2, [r1, #8]
 8001dd8:	7ac3      	ldrb	r3, [r0, #11]
 8001dda:	4053      	eors	r3, r2
 8001ddc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 8001dde:	7bcb      	ldrb	r3, [r1, #15]
 8001de0:	7b02      	ldrb	r2, [r0, #12]
 8001de2:	4053      	eors	r3, r2
 8001de4:	7303      	strb	r3, [r0, #12]
 8001de6:	89cb      	ldrh	r3, [r1, #14]
 8001de8:	7b42      	ldrb	r2, [r0, #13]
 8001dea:	4053      	eors	r3, r2
 8001dec:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 8001dee:	68ca      	ldr	r2, [r1, #12]
 8001df0:	7b83      	ldrb	r3, [r0, #14]
 8001df2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001df6:	7383      	strb	r3, [r0, #14]
 8001df8:	68ca      	ldr	r2, [r1, #12]
 8001dfa:	7bc3      	ldrb	r3, [r0, #15]
 8001dfc:	4053      	eors	r3, r2
 8001dfe:	73c3      	strb	r3, [r0, #15]
 8001e00:	4770      	bx	lr

08001e02 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
 8001e02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 8001e04:	7802      	ldrb	r2, [r0, #0]
 8001e06:	f88d 2000 	strb.w	r2, [sp]
 8001e0a:	7942      	ldrb	r2, [r0, #5]
 8001e0c:	f88d 2001 	strb.w	r2, [sp, #1]
 8001e10:	7a82      	ldrb	r2, [r0, #10]
 8001e12:	f88d 2002 	strb.w	r2, [sp, #2]
 8001e16:	7bc2      	ldrb	r2, [r0, #15]
 8001e18:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 8001e1c:	7902      	ldrb	r2, [r0, #4]
 8001e1e:	f88d 2004 	strb.w	r2, [sp, #4]
 8001e22:	7a42      	ldrb	r2, [r0, #9]
 8001e24:	f88d 2005 	strb.w	r2, [sp, #5]
 8001e28:	7b82      	ldrb	r2, [r0, #14]
 8001e2a:	f88d 2006 	strb.w	r2, [sp, #6]
 8001e2e:	78c2      	ldrb	r2, [r0, #3]
 8001e30:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 8001e34:	7a02      	ldrb	r2, [r0, #8]
 8001e36:	f88d 2008 	strb.w	r2, [sp, #8]
 8001e3a:	7b42      	ldrb	r2, [r0, #13]
 8001e3c:	f88d 2009 	strb.w	r2, [sp, #9]
 8001e40:	7882      	ldrb	r2, [r0, #2]
 8001e42:	f88d 200a 	strb.w	r2, [sp, #10]
 8001e46:	79c2      	ldrb	r2, [r0, #7]
 8001e48:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 8001e4c:	7b02      	ldrb	r2, [r0, #12]
 8001e4e:	f88d 200c 	strb.w	r2, [sp, #12]
 8001e52:	7842      	ldrb	r2, [r0, #1]
 8001e54:	f88d 200d 	strb.w	r2, [sp, #13]
 8001e58:	7ac3      	ldrb	r3, [r0, #11]
 8001e5a:	7982      	ldrb	r2, [r0, #6]
 8001e5c:	f88d 200e 	strb.w	r2, [sp, #14]
 8001e60:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8001e64:	2310      	movs	r3, #16
 8001e66:	466a      	mov	r2, sp
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe ff85 	bl	8000d78 <_copy>
}
 8001e6e:	b005      	add	sp, #20
 8001e70:	f85d fb04 	ldr.w	pc, [sp], #4

08001e74 <mult_row_column>:
{
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8001e78:	7808      	ldrb	r0, [r1, #0]
{
 8001e7a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8001e7c:	f7fe ff8b 	bl	8000d96 <_double_byte>
 8001e80:	4605      	mov	r5, r0
 8001e82:	7860      	ldrb	r0, [r4, #1]
 8001e84:	f7fe ff87 	bl	8000d96 <_double_byte>
 8001e88:	78a2      	ldrb	r2, [r4, #2]
 8001e8a:	7863      	ldrb	r3, [r4, #1]
 8001e8c:	4053      	eors	r3, r2
 8001e8e:	78e2      	ldrb	r2, [r4, #3]
 8001e90:	4053      	eors	r3, r2
 8001e92:	405d      	eors	r5, r3
 8001e94:	4045      	eors	r5, r0
 8001e96:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8001e98:	7860      	ldrb	r0, [r4, #1]
 8001e9a:	7827      	ldrb	r7, [r4, #0]
 8001e9c:	f7fe ff7b 	bl	8000d96 <_double_byte>
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	78a0      	ldrb	r0, [r4, #2]
 8001ea4:	f7fe ff77 	bl	8000d96 <_double_byte>
 8001ea8:	78a3      	ldrb	r3, [r4, #2]
 8001eaa:	405f      	eors	r7, r3
 8001eac:	78e3      	ldrb	r3, [r4, #3]
 8001eae:	405f      	eors	r7, r3
 8001eb0:	407d      	eors	r5, r7
 8001eb2:	4045      	eors	r5, r0
 8001eb4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8001eb6:	78a0      	ldrb	r0, [r4, #2]
 8001eb8:	7865      	ldrb	r5, [r4, #1]
 8001eba:	7827      	ldrb	r7, [r4, #0]
 8001ebc:	f7fe ff6b 	bl	8000d96 <_double_byte>
 8001ec0:	406f      	eors	r7, r5
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	78e0      	ldrb	r0, [r4, #3]
 8001ec6:	f7fe ff66 	bl	8000d96 <_double_byte>
 8001eca:	78e3      	ldrb	r3, [r4, #3]
 8001ecc:	405f      	eors	r7, r3
 8001ece:	407d      	eors	r5, r7
 8001ed0:	4045      	eors	r5, r0
 8001ed2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 8001ed4:	7820      	ldrb	r0, [r4, #0]
 8001ed6:	f7fe ff5e 	bl	8000d96 <_double_byte>
 8001eda:	7863      	ldrb	r3, [r4, #1]
 8001edc:	7825      	ldrb	r5, [r4, #0]
 8001ede:	405d      	eors	r5, r3
 8001ee0:	78a3      	ldrb	r3, [r4, #2]
 8001ee2:	405d      	eors	r5, r3
 8001ee4:	4045      	eors	r5, r0
 8001ee6:	78e0      	ldrb	r0, [r4, #3]
 8001ee8:	f7fe ff55 	bl	8000d96 <_double_byte>
 8001eec:	b2ed      	uxtb	r5, r5
 8001eee:	4068      	eors	r0, r5
 8001ef0:	70f0      	strb	r0, [r6, #3]
 8001ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ef4 <tc_aes128_set_encrypt_key>:
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
 8001ef6:	4e28      	ldr	r6, [pc, #160]	; (8001f98 <tc_aes128_set_encrypt_key+0xa4>)
{
 8001ef8:	4607      	mov	r7, r0
 8001efa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
 8001efc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8001efe:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
 8001f00:	ad01      	add	r5, sp, #4
 8001f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001f0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
 8001f10:	2f00      	cmp	r7, #0
 8001f12:	d03c      	beq.n	8001f8e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
 8001f14:	2c00      	cmp	r4, #0
 8001f16:	d03c      	beq.n	8001f92 <tc_aes128_set_encrypt_key+0x9e>
 8001f18:	1f38      	subs	r0, r7, #4
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8001f20:	784b      	ldrb	r3, [r1, #1]
 8001f22:	780d      	ldrb	r5, [r1, #0]
 8001f24:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 8001f26:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001f2a:	78cd      	ldrb	r5, [r1, #3]
 8001f2c:	432b      	orrs	r3, r5
 8001f2e:	788d      	ldrb	r5, [r1, #2]
 8001f30:	3104      	adds	r1, #4
 8001f32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
 8001f36:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8001f38:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
 8001f3c:	d1f0      	bne.n	8001f20 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8001f3e:	4c17      	ldr	r4, [pc, #92]	; (8001f9c <tc_aes128_set_encrypt_key+0xa8>)
 8001f40:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
 8001f42:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
 8001f44:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
 8001f46:	d118      	bne.n	8001f7a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
 8001f48:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8001f4c:	0e1a      	lsrs	r2, r3, #24
 8001f4e:	5ca5      	ldrb	r5, [r4, r2]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	5ca2      	ldrb	r2, [r4, r2]
 8001f54:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8001f58:	f3c3 4507 	ubfx	r5, r3, #16, #8
 8001f5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001f60:	5d65      	ldrb	r5, [r4, r5]
 8001f62:	5ce3      	ldrb	r3, [r4, r3]
 8001f64:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001f68:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001f6c:	ad0c      	add	r5, sp, #48	; 0x30
 8001f6e:	f021 0303 	bic.w	r3, r1, #3
 8001f72:	442b      	add	r3, r5
 8001f74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001f78:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
 8001f7a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
 8001f7e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
 8001f80:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
 8001f82:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
 8001f84:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
 8001f86:	d1dc      	bne.n	8001f42 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
 8001f88:	2001      	movs	r0, #1
}
 8001f8a:	b00d      	add	sp, #52	; 0x34
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8001f8e:	4638      	mov	r0, r7
 8001f90:	e7fb      	b.n	8001f8a <tc_aes128_set_encrypt_key+0x96>
 8001f92:	4620      	mov	r0, r4
 8001f94:	e7f9      	b.n	8001f8a <tc_aes128_set_encrypt_key+0x96>
 8001f96:	bf00      	nop
 8001f98:	08012c50 	.word	0x08012c50
 8001f9c:	08012f3c 	.word	0x08012f3c

08001fa0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
 8001fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa4:	4615      	mov	r5, r2
 8001fa6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 8001fa8:	4680      	mov	r8, r0
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d05b      	beq.n	8002066 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
 8001fae:	2900      	cmp	r1, #0
 8001fb0:	d05a      	beq.n	8002068 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d05a      	beq.n	800206c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	460a      	mov	r2, r1
 8001fba:	4668      	mov	r0, sp
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fedb 	bl	8000d78 <_copy>
	add_round_key(state, s->words);
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
 8001fc6:	4c2a      	ldr	r4, [pc, #168]	; (8002070 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
 8001fc8:	f7ff fed6 	bl	8001d78 <add_round_key>
 8001fcc:	f105 0710 	add.w	r7, r5, #16
 8001fd0:	46a1      	mov	r9, r4
 8001fd2:	35a0      	adds	r5, #160	; 0xa0
{
 8001fd4:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
 8001fd6:	f81d 3006 	ldrb.w	r3, [sp, r6]
 8001fda:	5ce3      	ldrb	r3, [r4, r3]
 8001fdc:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
 8001fe0:	3601      	adds	r6, #1
 8001fe2:	2e10      	cmp	r6, #16
 8001fe4:	d1f7      	bne.n	8001fd6 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
 8001fe6:	4668      	mov	r0, sp
 8001fe8:	f7ff ff0b 	bl	8001e02 <shift_rows>
	mult_row_column(t, s);
 8001fec:	4669      	mov	r1, sp
 8001fee:	a804      	add	r0, sp, #16
 8001ff0:	f7ff ff40 	bl	8001e74 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
 8001ff4:	a901      	add	r1, sp, #4
 8001ff6:	a805      	add	r0, sp, #20
 8001ff8:	f7ff ff3c 	bl	8001e74 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
 8001ffc:	a902      	add	r1, sp, #8
 8001ffe:	a806      	add	r0, sp, #24
 8002000:	f7ff ff38 	bl	8001e74 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
 8002004:	a903      	add	r1, sp, #12
 8002006:	a807      	add	r0, sp, #28
 8002008:	f7ff ff34 	bl	8001e74 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800200c:	4633      	mov	r3, r6
 800200e:	aa04      	add	r2, sp, #16
 8002010:	4631      	mov	r1, r6
 8002012:	4668      	mov	r0, sp
 8002014:	f7fe feb0 	bl	8000d78 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
 8002018:	4639      	mov	r1, r7
 800201a:	4668      	mov	r0, sp
 800201c:	3710      	adds	r7, #16
 800201e:	f7ff feab 	bl	8001d78 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
 8002022:	42bd      	cmp	r5, r7
 8002024:	d1d6      	bne.n	8001fd4 <tc_aes_encrypt+0x34>
 8002026:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
 8002028:	f81d 3006 	ldrb.w	r3, [sp, r6]
 800202c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002030:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
 8002034:	3601      	adds	r6, #1
 8002036:	2e10      	cmp	r6, #16
 8002038:	d1f6      	bne.n	8002028 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
 800203a:	4668      	mov	r0, sp
 800203c:	f7ff fee1 	bl	8001e02 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
 8002040:	4629      	mov	r1, r5
 8002042:	4668      	mov	r0, sp
 8002044:	f7ff fe98 	bl	8001d78 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
 8002048:	4633      	mov	r3, r6
 800204a:	466a      	mov	r2, sp
 800204c:	4631      	mov	r1, r6
 800204e:	4640      	mov	r0, r8
 8002050:	f7fe fe92 	bl	8000d78 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 8002054:	4668      	mov	r0, sp
 8002056:	4632      	mov	r2, r6
 8002058:	2100      	movs	r1, #0
 800205a:	f7fe fe9a 	bl	8000d92 <_set>

	return TC_CRYPTO_SUCCESS;
 800205e:	2001      	movs	r0, #1
}
 8002060:	b009      	add	sp, #36	; 0x24
 8002062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002066:	e7fb      	b.n	8002060 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
 8002068:	4608      	mov	r0, r1
 800206a:	e7f9      	b.n	8002060 <tc_aes_encrypt+0xc0>
 800206c:	4610      	mov	r0, r2
 800206e:	e7f7      	b.n	8002060 <tc_aes_encrypt+0xc0>
 8002070:	08012f3c 	.word	0x08012f3c

08002074 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
 8002074:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 8002076:	f991 3000 	ldrsb.w	r3, [r1]
 800207a:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
 800207c:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
 8002080:	bfb4      	ite	lt
 8002082:	2387      	movlt	r3, #135	; 0x87
 8002084:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
 8002086:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
 8002088:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
 800208a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
 800208c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
 8002090:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
 8002094:	d003      	beq.n	800209e <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
 8002096:	f812 3901 	ldrb.w	r3, [r2], #-1
 800209a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
 800209c:	e7f4      	b.n	8002088 <gf_double+0x14>
 800209e:	bd10      	pop	{r4, pc}

080020a0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
 80020a0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
 80020a2:	b128      	cbz	r0, 80020b0 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
 80020a4:	2258      	movs	r2, #88	; 0x58
 80020a6:	2100      	movs	r1, #0
 80020a8:	f7fe fe73 	bl	8000d92 <_set>

	return TC_CRYPTO_SUCCESS;
 80020ac:	2001      	movs	r0, #1
 80020ae:	bd08      	pop	{r3, pc}
}
 80020b0:	bd08      	pop	{r3, pc}

080020b2 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
 80020b2:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 80020b4:	4604      	mov	r4, r0
 80020b6:	b190      	cbz	r0, 80020de <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 80020b8:	2210      	movs	r2, #16
 80020ba:	2100      	movs	r1, #0
 80020bc:	f7fe fe69 	bl	8000d92 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
 80020c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80020c4:	2210      	movs	r2, #16
 80020c6:	2100      	movs	r1, #0
 80020c8:	f7fe fe63 	bl	8000d92 <_set>
	s->leftover_offset = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
 80020da:	2001      	movs	r0, #1
 80020dc:	bd10      	pop	{r4, pc}
}
 80020de:	bd10      	pop	{r4, pc}

080020e0 <tc_cmac_setup>:
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	460d      	mov	r5, r1
 80020e4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
 80020e6:	4604      	mov	r4, r0
 80020e8:	b318      	cbz	r0, 8002132 <tc_cmac_setup+0x52>
 80020ea:	b319      	cbz	r1, 8002134 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
 80020ec:	2258      	movs	r2, #88	; 0x58
 80020ee:	2100      	movs	r1, #0
 80020f0:	f7fe fe4f 	bl	8000d92 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
 80020f4:	4629      	mov	r1, r5
	s->sched = sched;
 80020f6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
 80020f8:	4630      	mov	r0, r6
 80020fa:	f7ff fefb 	bl	8001ef4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
 80020fe:	4620      	mov	r0, r4
 8002100:	2210      	movs	r2, #16
 8002102:	2100      	movs	r1, #0
 8002104:	f7fe fe45 	bl	8000d92 <_set>
	gf_double (s->K1, s->iv);
 8002108:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
 800210c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800210e:	4621      	mov	r1, r4
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff45 	bl	8001fa0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
 8002116:	4621      	mov	r1, r4
 8002118:	4628      	mov	r0, r5
 800211a:	f7ff ffab 	bl	8002074 <gf_double>
	gf_double (s->K2, s->K1);
 800211e:	4629      	mov	r1, r5
 8002120:	f104 0020 	add.w	r0, r4, #32
 8002124:	f7ff ffa6 	bl	8002074 <gf_double>
	tc_cmac_init(s);
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff ffc2 	bl	80020b2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
 800212e:	2001      	movs	r0, #1
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002134:	4608      	mov	r0, r1
}
 8002136:	bd70      	pop	{r4, r5, r6, pc}

08002138 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	460d      	mov	r5, r1
 800213c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
 800213e:	4604      	mov	r4, r0
 8002140:	2800      	cmp	r0, #0
 8002142:	d05b      	beq.n	80021fc <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
 8002144:	b90a      	cbnz	r2, 800214a <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
 8002146:	2001      	movs	r0, #1
 8002148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
 800214a:	2900      	cmp	r1, #0
 800214c:	d056      	beq.n	80021fc <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
 800214e:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
 8002152:	ea52 0103 	orrs.w	r1, r2, r3
 8002156:	d051      	beq.n	80021fc <tc_cmac_update+0xc4>
	s->countdown--;
 8002158:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800215c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8002160:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
 8002164:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002166:	b348      	cbz	r0, 80021bc <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
 8002168:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
 800216c:	42be      	cmp	r6, r7
 800216e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002172:	d209      	bcs.n	8002188 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
 8002174:	4633      	mov	r3, r6
 8002176:	4631      	mov	r1, r6
 8002178:	462a      	mov	r2, r5
 800217a:	4420      	add	r0, r4
 800217c:	f7fe fdfc 	bl	8000d78 <_copy>
			s->leftover_offset += data_length;
 8002180:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002182:	441e      	add	r6, r3
		s->leftover_offset = data_length;
 8002184:	6466      	str	r6, [r4, #68]	; 0x44
 8002186:	e7de      	b.n	8002146 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
 8002188:	463b      	mov	r3, r7
 800218a:	462a      	mov	r2, r5
 800218c:	4639      	mov	r1, r7
 800218e:	4420      	add	r0, r4
 8002190:	f7fe fdf2 	bl	8000d78 <_copy>
		s->leftover_offset = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
 8002198:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
 800219a:	443d      	add	r5, r7
 800219c:	1e63      	subs	r3, r4, #1
 800219e:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
 80021a2:	785a      	ldrb	r2, [r3, #1]
 80021a4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80021a8:	404a      	eors	r2, r1
 80021aa:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80021ae:	4283      	cmp	r3, r0
 80021b0:	d1f7      	bne.n	80021a2 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 80021b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021b4:	4621      	mov	r1, r4
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fef2 	bl	8001fa0 <tc_aes_encrypt>
 80021bc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
 80021c0:	2e10      	cmp	r6, #16
 80021c2:	d911      	bls.n	80021e8 <tc_cmac_update+0xb0>
 80021c4:	1e63      	subs	r3, r4, #1
 80021c6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
 80021c8:	785a      	ldrb	r2, [r3, #1]
 80021ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80021ce:	4042      	eors	r2, r0
 80021d0:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 80021d4:	42bb      	cmp	r3, r7
 80021d6:	d1f7      	bne.n	80021c8 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
 80021d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80021da:	4621      	mov	r1, r4
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff fedf 	bl	8001fa0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
 80021e2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
 80021e4:	3e10      	subs	r6, #16
 80021e6:	e7eb      	b.n	80021c0 <tc_cmac_update+0x88>
	if (data_length > 0) {
 80021e8:	2e00      	cmp	r6, #0
 80021ea:	d0ac      	beq.n	8002146 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
 80021ec:	4633      	mov	r3, r6
 80021ee:	462a      	mov	r2, r5
 80021f0:	4631      	mov	r1, r6
 80021f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80021f6:	f7fe fdbf 	bl	8000d78 <_copy>
 80021fa:	e7c3      	b.n	8002184 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
 80021fc:	2000      	movs	r0, #0
}
 80021fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002200 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 8002204:	4605      	mov	r5, r0
 8002206:	b370      	cbz	r0, 8002266 <tc_cmac_final+0x66>
 8002208:	b371      	cbz	r1, 8002268 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
 800220a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800220c:	2a10      	cmp	r2, #16
 800220e:	d11a      	bne.n	8002246 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
 8002210:	f101 0210 	add.w	r2, r1, #16
 8002214:	1e61      	subs	r1, r4, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
 800221c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
 8002220:	784b      	ldrb	r3, [r1, #1]
 8002222:	4043      	eors	r3, r0
 8002224:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002228:	4043      	eors	r3, r0
 800222a:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
 800222e:	428e      	cmp	r6, r1
 8002230:	d1f4      	bne.n	800221c <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
 8002232:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002234:	4621      	mov	r1, r4
 8002236:	4628      	mov	r0, r5
 8002238:	f7ff feb2 	bl	8001fa0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ff2f 	bl	80020a0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
 8002242:	2001      	movs	r0, #1
 8002244:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
 8002246:	f102 0030 	add.w	r0, r2, #48	; 0x30
 800224a:	2100      	movs	r1, #0
 800224c:	f1c2 0210 	rsb	r2, r2, #16
 8002250:	4420      	add	r0, r4
 8002252:	f7fe fd9e 	bl	8000d92 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
 8002256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002258:	4423      	add	r3, r4
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
 8002260:	f104 0220 	add.w	r2, r4, #32
 8002264:	e7d6      	b.n	8002214 <tc_cmac_final+0x14>
 8002266:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8002268:	4608      	mov	r0, r1
}
 800226a:	bd70      	pop	{r4, r5, r6, pc}

0800226c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 800226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002270:	b09d      	sub	sp, #116	; 0x74
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	6843      	ldr	r3, [r0, #4]
 8002278:	9304      	str	r3, [sp, #16]
 800227a:	6883      	ldr	r3, [r0, #8]
 800227c:	9305      	str	r3, [sp, #20]
 800227e:	68c3      	ldr	r3, [r0, #12]
 8002280:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8002282:	6903      	ldr	r3, [r0, #16]
 8002284:	9307      	str	r3, [sp, #28]
 8002286:	6943      	ldr	r3, [r0, #20]
 8002288:	9308      	str	r3, [sp, #32]
 800228a:	6983      	ldr	r3, [r0, #24]
 800228c:	9309      	str	r3, [sp, #36]	; 0x24
 800228e:	69c3      	ldr	r3, [r0, #28]
 8002290:	930a      	str	r3, [sp, #40]	; 0x28
 8002292:	469e      	mov	lr, r3
 8002294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	f8dd a020 	ldr.w	sl, [sp, #32]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800229c:	9b04      	ldr	r3, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800229e:	9c07      	ldr	r4, [sp, #28]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80022a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80022a4:	f8dd b014 	ldr.w	fp, [sp, #20]
 80022a8:	9d03      	ldr	r5, [sp, #12]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80022aa:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002440 <compress+0x1d4>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	3104      	adds	r1, #4
	for (i = 0; i < 16; ++i) {
 80022b2:	2200      	movs	r2, #0
	n |= ((unsigned int)(*((*c)++)) << 16);
 80022b4:	f811 3c03 	ldrb.w	r3, [r1, #-3]
	n = (((unsigned int)(*((*c)++))) << 24);
 80022b8:	f811 6c04 	ldrb.w	r6, [r1, #-4]
	n |= ((unsigned int)(*((*c)++)) << 16);
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
	n |= ((unsigned int)(*((*c)++)));
 80022c2:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 80022c6:	4333      	orrs	r3, r6
	n |= ((unsigned int)(*((*c)++)) << 8);
 80022c8:	f811 6c02 	ldrb.w	r6, [r1, #-2]
	n |= ((unsigned int)(*((*c)++)));
 80022cc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		t1 = work_space[i] = n;
 80022d0:	ae0c      	add	r6, sp, #48	; 0x30
	return (((a) >> n) | ((a) << (32 - n)));
 80022d2:	ea4f 28f4 	mov.w	r8, r4, ror #11
		t1 = work_space[i] = n;
 80022d6:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80022da:	9e01      	ldr	r6, [sp, #4]
 80022dc:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
 80022e0:	ea26 0604 	bic.w	r6, r6, r4
 80022e4:	ea04 070a 	and.w	r7, r4, sl
 80022e8:	407e      	eors	r6, r7
 80022ea:	ea88 6874 	eor.w	r8, r8, r4, ror #25
 80022ee:	44b0      	add	r8, r6
 80022f0:	f85c 6022 	ldr.w	r6, [ip, r2, lsl #2]
 80022f4:	44b0      	add	r8, r6
 80022f6:	4443      	add	r3, r8
 80022f8:	449e      	add	lr, r3
		t2 = Sigma0(a) + Maj(a, b, c);
 80022fa:	9b00      	ldr	r3, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
 80022fc:	ea4f 3875 	mov.w	r8, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8002300:	ea8b 0603 	eor.w	r6, fp, r3
 8002304:	402e      	ands	r6, r5
 8002306:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 800230a:	ea03 030b 	and.w	r3, r3, fp
 800230e:	4073      	eors	r3, r6
 8002310:	ea88 58b5 	eor.w	r8, r8, r5, ror #22
	for (i = 0; i < 16; ++i) {
 8002314:	3201      	adds	r2, #1
		t2 = Sigma0(a) + Maj(a, b, c);
 8002316:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
 8002318:	2a10      	cmp	r2, #16
		h = g; g = f; f = e; e = d + t1;
 800231a:	eb0e 0609 	add.w	r6, lr, r9
		d = c; c = b; b = a; a = t1 + t2;
 800231e:	4473      	add	r3, lr
 8002320:	f101 0104 	add.w	r1, r1, #4
 8002324:	46d9      	mov	r9, fp
 8002326:	f8dd e004 	ldr.w	lr, [sp, #4]
	for (i = 0; i < 16; ++i) {
 800232a:	d178      	bne.n	800241e <compress+0x1b2>
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 800232c:	1c51      	adds	r1, r2, #1
 800232e:	af1c      	add	r7, sp, #112	; 0x70
 8002330:	910b      	str	r1, [sp, #44]	; 0x2c
 8002332:	f001 010f 	and.w	r1, r1, #15
 8002336:	eb07 0181 	add.w	r1, r7, r1, lsl #2
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800233a:	f002 090f 	and.w	r9, r2, #15
		s0 = work_space[(i+1)&0x0f];
 800233e:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8002342:	9102      	str	r1, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 8002344:	ea4f 48b1 	mov.w	r8, r1, ror #18
		s0 = sigma0(s0);
 8002348:	ea88 18f1 	eor.w	r8, r8, r1, ror #7
		s1 = work_space[(i+14)&0x0f];
 800234c:	f102 010e 	add.w	r1, r2, #14
 8002350:	f001 010f 	and.w	r1, r1, #15
 8002354:	eb07 0181 	add.w	r1, r7, r1, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002358:	eb07 0989 	add.w	r9, r7, r9, lsl #2
		s1 = work_space[(i+14)&0x0f];
 800235c:	f851 ec40 	ldr.w	lr, [r1, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002360:	f102 0109 	add.w	r1, r2, #9
 8002364:	f001 010f 	and.w	r1, r1, #15
 8002368:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800236c:	f859 7c40 	ldr.w	r7, [r9, #-64]
 8002370:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8002374:	4439      	add	r1, r7
		s0 = sigma0(s0);
 8002376:	9f02      	ldr	r7, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
 8002378:	ea4f 4cfe 	mov.w	ip, lr, ror #19
		s0 = sigma0(s0);
 800237c:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
 8002380:	ea8c 4c7e 	eor.w	ip, ip, lr, ror #17
 8002384:	ea8c 2c9e 	eor.w	ip, ip, lr, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002388:	4441      	add	r1, r8
 800238a:	4461      	add	r1, ip
	return (((a) >> n) | ((a) << (32 - n)));
 800238c:	ea4f 2ef6 	mov.w	lr, r6, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002390:	4f2b      	ldr	r7, [pc, #172]	; (8002440 <compress+0x1d4>)
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8002392:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 8002396:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 800239a:	ea2a 0906 	bic.w	r9, sl, r6
 800239e:	ea06 0c04 	and.w	ip, r6, r4
 80023a2:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80023a6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80023aa:	ea89 090c 	eor.w	r9, r9, ip
 80023ae:	44f1      	add	r9, lr
 80023b0:	4491      	add	r9, r2
 80023b2:	9a01      	ldr	r2, [sp, #4]
 80023b4:	f8cd a004 	str.w	sl, [sp, #4]
 80023b8:	4449      	add	r1, r9
 80023ba:	440a      	add	r2, r1
 80023bc:	4690      	mov	r8, r2
		t2 = Sigma0(a) + Maj(a, b, c);
 80023be:	9a00      	ldr	r2, [sp, #0]
 80023c0:	9900      	ldr	r1, [sp, #0]
 80023c2:	406a      	eors	r2, r5
 80023c4:	401a      	ands	r2, r3
	return (((a) >> n) | ((a) << (32 - n)));
 80023c6:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 80023ca:	4029      	ands	r1, r5
 80023cc:	4051      	eors	r1, r2
 80023ce:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
 80023d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80023d4:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
 80023d8:	4471      	add	r1, lr
	for ( ; i < 64; ++i) {
 80023da:	2a40      	cmp	r2, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 80023dc:	eb08 0e0b 	add.w	lr, r8, fp
		d = c; c = b; b = a; a = t1 + t2;
 80023e0:	4441      	add	r1, r8
 80023e2:	f8dd b000 	ldr.w	fp, [sp]
	for ( ; i < 64; ++i) {
 80023e6:	d123      	bne.n	8002430 <compress+0x1c4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 80023e8:	9a03      	ldr	r2, [sp, #12]
 80023ea:	440a      	add	r2, r1
 80023ec:	6002      	str	r2, [r0, #0]
 80023ee:	9a04      	ldr	r2, [sp, #16]
 80023f0:	441a      	add	r2, r3
 80023f2:	9b05      	ldr	r3, [sp, #20]
 80023f4:	6042      	str	r2, [r0, #4]
 80023f6:	442b      	add	r3, r5
 80023f8:	6083      	str	r3, [r0, #8]
 80023fa:	9b06      	ldr	r3, [sp, #24]
 80023fc:	445b      	add	r3, fp
 80023fe:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8002400:	9b07      	ldr	r3, [sp, #28]
 8002402:	4473      	add	r3, lr
 8002404:	6103      	str	r3, [r0, #16]
 8002406:	9b08      	ldr	r3, [sp, #32]
 8002408:	4433      	add	r3, r6
 800240a:	6143      	str	r3, [r0, #20]
 800240c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800240e:	4423      	add	r3, r4
 8002410:	6183      	str	r3, [r0, #24]
 8002412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002414:	4453      	add	r3, sl
 8002416:	61c3      	str	r3, [r0, #28]
}
 8002418:	b01d      	add	sp, #116	; 0x74
 800241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241e:	f8cd a004 	str.w	sl, [sp, #4]
 8002422:	f8dd b000 	ldr.w	fp, [sp]
 8002426:	9500      	str	r5, [sp, #0]
 8002428:	46a2      	mov	sl, r4
		d = c; c = b; b = a; a = t1 + t2;
 800242a:	461d      	mov	r5, r3
		h = g; g = f; f = e; e = d + t1;
 800242c:	4634      	mov	r4, r6
 800242e:	e741      	b.n	80022b4 <compress+0x48>
 8002430:	46a2      	mov	sl, r4
 8002432:	9500      	str	r5, [sp, #0]
 8002434:	4634      	mov	r4, r6
 8002436:	461d      	mov	r5, r3
		h = g; g = f; f = e; e = d + t1;
 8002438:	4676      	mov	r6, lr
		d = c; c = b; b = a; a = t1 + t2;
 800243a:	460b      	mov	r3, r1
 800243c:	e776      	b.n	800232c <compress+0xc0>
 800243e:	bf00      	nop
 8002440:	0801303c 	.word	0x0801303c

08002444 <tc_sha256_init>:
{
 8002444:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 8002446:	4604      	mov	r4, r0
 8002448:	b1c0      	cbz	r0, 800247c <tc_sha256_init+0x38>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 800244a:	2270      	movs	r2, #112	; 0x70
 800244c:	2100      	movs	r1, #0
 800244e:	f7fe fca0 	bl	8000d92 <_set>
	s->iv[3] = 0xa54ff53a;
 8002452:	480b      	ldr	r0, [pc, #44]	; (8002480 <tc_sha256_init+0x3c>)
 8002454:	490b      	ldr	r1, [pc, #44]	; (8002484 <tc_sha256_init+0x40>)
 8002456:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <tc_sha256_init+0x44>)
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <tc_sha256_init+0x48>)
 800245a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	s->iv[4] = 0x510e527f;
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <tc_sha256_init+0x4c>)
 8002460:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <tc_sha256_init+0x50>)
 8002464:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <tc_sha256_init+0x54>)
 8002468:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 800246a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800246e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8002472:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8002476:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8002478:	2001      	movs	r0, #1
 800247a:	bd10      	pop	{r4, pc}
}
 800247c:	bd10      	pop	{r4, pc}
 800247e:	bf00      	nop
 8002480:	6a09e667 	.word	0x6a09e667
 8002484:	bb67ae85 	.word	0xbb67ae85
 8002488:	3c6ef372 	.word	0x3c6ef372
 800248c:	a54ff53a 	.word	0xa54ff53a
 8002490:	510e527f 	.word	0x510e527f
 8002494:	9b05688c 	.word	0x9b05688c
 8002498:	1f83d9ab 	.word	0x1f83d9ab

0800249c <tc_sha256_update>:
{
 800249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a0:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 80024a2:	4605      	mov	r5, r0
 80024a4:	b320      	cbz	r0, 80024f0 <tc_sha256_update+0x54>
 80024a6:	b329      	cbz	r1, 80024f4 <tc_sha256_update+0x58>
	} else if (datalen == 0) {
 80024a8:	b132      	cbz	r2, 80024b8 <tc_sha256_update+0x1c>
 80024aa:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
 80024ac:	f100 0728 	add.w	r7, r0, #40	; 0x28
			s->leftover_offset = 0;
 80024b0:	f04f 0800 	mov.w	r8, #0
	while (datalen-- > 0) {
 80024b4:	42b4      	cmp	r4, r6
 80024b6:	d102      	bne.n	80024be <tc_sha256_update+0x22>
		return TC_CRYPTO_SUCCESS;
 80024b8:	2001      	movs	r0, #1
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		s->leftover[s->leftover_offset++] = *(data++);
 80024be:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	66aa      	str	r2, [r5, #104]	; 0x68
 80024c4:	442b      	add	r3, r5
 80024c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ca:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 80024ce:	2a3f      	cmp	r2, #63	; 0x3f
 80024d0:	d9f0      	bls.n	80024b4 <tc_sha256_update+0x18>
			compress(s->iv, s->leftover);
 80024d2:	4639      	mov	r1, r7
 80024d4:	4628      	mov	r0, r5
 80024d6:	f7ff fec9 	bl	800226c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80024da:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80024de:	f512 7200 	adds.w	r2, r2, #512	; 0x200
 80024e2:	f143 0300 	adc.w	r3, r3, #0
			s->leftover_offset = 0;
 80024e6:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80024ea:	e9c5 2308 	strd	r2, r3, [r5, #32]
 80024ee:	e7e1      	b.n	80024b4 <tc_sha256_update+0x18>
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 80024f4:	4608      	mov	r0, r1
}
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024fa <tc_sha256_final>:
{
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 80024fe:	4605      	mov	r5, r0
 8002500:	2800      	cmp	r0, #0
 8002502:	d05f      	beq.n	80025c4 <tc_sha256_final+0xca>
 8002504:	2900      	cmp	r1, #0
 8002506:	d05e      	beq.n	80025c6 <tc_sha256_final+0xcc>
	s->bits_hashed += (s->leftover_offset << 3);
 8002508:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800250a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800250e:	00c8      	lsls	r0, r1, #3
 8002510:	1812      	adds	r2, r2, r0
 8002512:	f143 0300 	adc.w	r3, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8002516:	1c48      	adds	r0, r1, #1
 8002518:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 800251a:	e9c4 2308 	strd	r2, r3, [r4, #32]
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 800251e:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8002520:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002524:	66a0      	str	r0, [r4, #104]	; 0x68
 8002526:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800252a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 800252e:	d90b      	bls.n	8002548 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
 8002530:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8002534:	2100      	movs	r1, #0
 8002536:	4430      	add	r0, r6
 8002538:	f7fe fc2b 	bl	8000d92 <_set>
		compress(s->iv, s->leftover);
 800253c:	4631      	mov	r1, r6
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff fe94 	bl	800226c <compress>
		s->leftover_offset = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 8002548:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800254a:	2100      	movs	r1, #0
 800254c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8002550:	4430      	add	r0, r6
 8002552:	f7fe fc1e 	bl	8000d92 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8002556:	6a22      	ldr	r2, [r4, #32]
 8002558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800255a:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 800255e:	0a11      	lsrs	r1, r2, #8
 8002560:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8002564:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 8002566:	0e12      	lsrs	r2, r2, #24
 8002568:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 800256c:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 800256e:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8002572:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8002576:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8002578:	0e1b      	lsrs	r3, r3, #24
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 800257a:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 800257e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 8002582:	4631      	mov	r1, r6
 8002584:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 8002586:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 800258a:	f7ff fe6f 	bl	800226c <compress>
 800258e:	1d2b      	adds	r3, r5, #4
 8002590:	1f21      	subs	r1, r4, #4
 8002592:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8002596:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t);
 800259a:	f803 2c01 	strb.w	r2, [r3, #-1]
		*digest++ = (uint8_t)(t >> 24);
 800259e:	0e15      	lsrs	r5, r2, #24
 80025a0:	f803 5c04 	strb.w	r5, [r3, #-4]
		*digest++ = (uint8_t)(t >> 16);
 80025a4:	0c15      	lsrs	r5, r2, #16
 80025a6:	f803 5c03 	strb.w	r5, [r3, #-3]
		*digest++ = (uint8_t)(t >> 8);
 80025aa:	0a15      	lsrs	r5, r2, #8
 80025ac:	f803 5c02 	strb.w	r5, [r3, #-2]
 80025b0:	3304      	adds	r3, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 80025b2:	4283      	cmp	r3, r0
 80025b4:	d1ef      	bne.n	8002596 <tc_sha256_final+0x9c>
	_set(s, 0, sizeof(*s));
 80025b6:	4620      	mov	r0, r4
 80025b8:	2270      	movs	r2, #112	; 0x70
 80025ba:	2100      	movs	r1, #0
 80025bc:	f7fe fbe9 	bl	8000d92 <_set>
	return TC_CRYPTO_SUCCESS;
 80025c0:	2001      	movs	r0, #1
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 80025c6:	4608      	mov	r0, r1
}
 80025c8:	bd70      	pop	{r4, r5, r6, pc}

080025ca <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 80025ca:	b570      	push	{r4, r5, r6, lr}
 80025cc:	1e43      	subs	r3, r0, #1
 80025ce:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 80025d0:	42a9      	cmp	r1, r5
 80025d2:	d106      	bne.n	80025e2 <rekey+0x18>
 80025d4:	4402      	add	r2, r0
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 80025d6:	2136      	movs	r1, #54	; 0x36
 80025d8:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 80025da:	1a13      	subs	r3, r2, r0
 80025dc:	2b3f      	cmp	r3, #63	; 0x3f
 80025de:	d90d      	bls.n	80025fc <rekey+0x32>
	}
}
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	460e      	mov	r6, r1
		key[i] = inner_pad ^ new_key[i];
 80025e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025e8:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 80025ec:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 80025f0:	7834      	ldrb	r4, [r6, #0]
 80025f2:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 80025f6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 80025fa:	e7e9      	b.n	80025d0 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 80025fc:	f802 1b01 	strb.w	r1, [r2], #1
 8002600:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
 8002604:	e7e9      	b.n	80025da <rekey+0x10>

08002606 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 8002606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800260a:	b0bc      	sub	sp, #240	; 0xf0
 800260c:	460e      	mov	r6, r1
 800260e:	af00      	add	r7, sp, #0
 8002610:	4614      	mov	r4, r2

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 8002612:	4605      	mov	r5, r0
 8002614:	b388      	cbz	r0, 800267a <tc_hmac_set_key+0x74>
 8002616:	b389      	cbz	r1, 800267c <tc_hmac_set_key+0x76>
	    key == (const uint8_t *) 0 ||
 8002618:	b392      	cbz	r2, 8002680 <tc_hmac_set_key+0x7a>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 800261a:	1dd3      	adds	r3, r2, #7
 800261c:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8002620:	2a40      	cmp	r2, #64	; 0x40
	const uint8_t dummy_key[key_size];
 8002622:	ebad 0d03 	sub.w	sp, sp, r3
 8002626:	f100 0870 	add.w	r8, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 800262a:	d816      	bhi.n	800265a <tc_hmac_set_key+0x54>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 800262c:	4638      	mov	r0, r7
 800262e:	f7ff ff09 	bl	8002444 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8002632:	4622      	mov	r2, r4
 8002634:	4669      	mov	r1, sp
 8002636:	4638      	mov	r0, r7
 8002638:	f7ff ff30 	bl	800249c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 800263c:	4639      	mov	r1, r7
 800263e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002642:	f7ff ff5a 	bl	80024fa <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 8002646:	4622      	mov	r2, r4
 8002648:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 800264a:	4640      	mov	r0, r8
 800264c:	f7ff ffbd 	bl	80025ca <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8002650:	2001      	movs	r0, #1
}
 8002652:	37f0      	adds	r7, #240	; 0xf0
 8002654:	46bd      	mov	sp, r7
 8002656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 800265a:	f7ff fef3 	bl	8002444 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 800265e:	4622      	mov	r2, r4
 8002660:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8002662:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8002666:	4628      	mov	r0, r5
 8002668:	f7ff ff18 	bl	800249c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 800266c:	4629      	mov	r1, r5
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff43 	bl	80024fa <tc_sha256_final>
		rekey(ctx->key,
 8002674:	2220      	movs	r2, #32
 8002676:	4621      	mov	r1, r4
 8002678:	e7e7      	b.n	800264a <tc_hmac_set_key+0x44>
 800267a:	e7ea      	b.n	8002652 <tc_hmac_set_key+0x4c>
		return TC_CRYPTO_FAIL;
 800267c:	4608      	mov	r0, r1
 800267e:	e7e8      	b.n	8002652 <tc_hmac_set_key+0x4c>
 8002680:	4610      	mov	r0, r2
 8002682:	e7e6      	b.n	8002652 <tc_hmac_set_key+0x4c>

08002684 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8002684:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8002686:	4604      	mov	r4, r0
 8002688:	b148      	cbz	r0, 800269e <tc_hmac_init+0x1a>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 800268a:	f7ff fedb 	bl	8002444 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff ff01 	bl	800249c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 800269a:	2001      	movs	r0, #1
 800269c:	bd10      	pop	{r4, pc}
}
 800269e:	bd10      	pop	{r4, pc}

080026a0 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 80026a0:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 80026a2:	b118      	cbz	r0, 80026ac <tc_hmac_update+0xc>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 80026a4:	f7ff fefa 	bl	800249c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 80026a8:	2001      	movs	r0, #1
 80026aa:	bd08      	pop	{r3, pc}
}
 80026ac:	bd08      	pop	{r3, pc}

080026ae <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 80026ae:	b570      	push	{r4, r5, r6, lr}
 80026b0:	460e      	mov	r6, r1
 80026b2:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 80026b4:	4605      	mov	r5, r0
 80026b6:	b1f0      	cbz	r0, 80026f6 <tc_hmac_final+0x48>
 80026b8:	2920      	cmp	r1, #32
 80026ba:	d11c      	bne.n	80026f6 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 80026bc:	b1da      	cbz	r2, 80026f6 <tc_hmac_final+0x48>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 80026be:	4611      	mov	r1, r2
 80026c0:	f7ff ff1b 	bl	80024fa <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7ff febd 	bl	8002444 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 80026ca:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80026ce:	2240      	movs	r2, #64	; 0x40
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fee3 	bl	800249c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 80026d6:	4632      	mov	r2, r6
 80026d8:	4629      	mov	r1, r5
 80026da:	4620      	mov	r0, r4
 80026dc:	f7ff fede 	bl	800249c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 80026e0:	4621      	mov	r1, r4
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7ff ff09 	bl	80024fa <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 80026e8:	4620      	mov	r0, r4
 80026ea:	22f0      	movs	r2, #240	; 0xf0
 80026ec:	2100      	movs	r1, #0
 80026ee:	f7fe fb50 	bl	8000d92 <_set>

	return TC_CRYPTO_SUCCESS;
 80026f2:	2001      	movs	r0, #1
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 80026f6:	2000      	movs	r0, #0
 80026f8:	bd70      	pop	{r4, r5, r6, pc}

080026fa <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 80026fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026fe:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
 8002700:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002702:	f504 7588 	add.w	r5, r4, #272	; 0x110
	const uint8_t separator1 = 0x01;
 8002706:	2701      	movs	r7, #1
	const uint8_t separator0 = 0x00;
 8002708:	f88d 3006 	strb.w	r3, [sp, #6]
{
 800270c:	4688      	mov	r8, r1
 800270e:	4691      	mov	r9, r2
	const uint8_t separator1 = 0x01;
 8002710:	f88d 7007 	strb.w	r7, [sp, #7]
	(void)tc_hmac_init(&prng->h);
 8002714:	f7ff ffb6 	bl	8002684 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002718:	4629      	mov	r1, r5
 800271a:	2220      	movs	r2, #32
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ffbf 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 8002722:	463a      	mov	r2, r7
 8002724:	f10d 0106 	add.w	r1, sp, #6
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ffb9 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 800272e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	(void)tc_hmac_update(&prng->h, e, len);
 8002732:	464a      	mov	r2, r9
 8002734:	4641      	mov	r1, r8
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff ffb2 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 800273c:	4622      	mov	r2, r4
 800273e:	2120      	movs	r1, #32
 8002740:	4630      	mov	r0, r6
 8002742:	f7ff ffb4 	bl	80026ae <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8002746:	4631      	mov	r1, r6
 8002748:	2220      	movs	r2, #32
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ff5b 	bl	8002606 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8002750:	4620      	mov	r0, r4
 8002752:	f7ff ff97 	bl	8002684 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002756:	4629      	mov	r1, r5
 8002758:	2220      	movs	r2, #32
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ffa0 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8002760:	4622      	mov	r2, r4
 8002762:	2120      	movs	r1, #32
 8002764:	4628      	mov	r0, r5
 8002766:	f7ff ffa2 	bl	80026ae <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 800276a:	4620      	mov	r0, r4
 800276c:	f7ff ff8a 	bl	8002684 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002770:	4629      	mov	r1, r5
 8002772:	2220      	movs	r2, #32
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff ff93 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 800277a:	463a      	mov	r2, r7
 800277c:	f10d 0107 	add.w	r1, sp, #7
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff8d 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8002786:	464a      	mov	r2, r9
 8002788:	4641      	mov	r1, r8
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff ff88 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8002790:	4622      	mov	r2, r4
 8002792:	2120      	movs	r1, #32
 8002794:	4630      	mov	r0, r6
 8002796:	f7ff ff8a 	bl	80026ae <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 800279a:	4631      	mov	r1, r6
 800279c:	2220      	movs	r2, #32
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff31 	bl	8002606 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ff6d 	bl	8002684 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 80027aa:	4629      	mov	r1, r5
 80027ac:	2220      	movs	r2, #32
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff ff76 	bl	80026a0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 80027b4:	4622      	mov	r2, r4
 80027b6:	2120      	movs	r1, #32
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7ff ff78 	bl	80026ae <tc_hmac_final>
}
 80027be:	b003      	add	sp, #12
 80027c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027c4 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	460c      	mov	r4, r1
 80027c8:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 80027ca:	4605      	mov	r5, r0
 80027cc:	b1e0      	cbz	r0, 8002808 <tc_hmac_prng_init+0x44>
	    personalization == (uint8_t *) 0 ||
 80027ce:	b1e1      	cbz	r1, 800280a <tc_hmac_prng_init+0x46>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 80027d0:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
 80027d4:	4630      	mov	r0, r6
 80027d6:	2220      	movs	r2, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	f7fe fada 	bl	8000d92 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 80027de:	f505 7088 	add.w	r0, r5, #272	; 0x110
 80027e2:	2220      	movs	r2, #32
 80027e4:	2101      	movs	r1, #1
 80027e6:	f7fe fad4 	bl	8000d92 <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 80027ea:	4631      	mov	r1, r6
 80027ec:	2220      	movs	r2, #32
 80027ee:	4628      	mov	r0, r5
 80027f0:	f7ff ff09 	bl	8002606 <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 80027f4:	4628      	mov	r0, r5
 80027f6:	463a      	mov	r2, r7
 80027f8:	4621      	mov	r1, r4
 80027fa:	f7ff ff7e 	bl	80026fa <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8002804:	2001      	movs	r0, #1
 8002806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800280a:	4608      	mov	r0, r1
}
 800280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800280e <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 800280e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002810:	9c06      	ldr	r4, [sp, #24]
 8002812:	4696      	mov	lr, r2
 8002814:	461f      	mov	r7, r3

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8002816:	4605      	mov	r5, r0
 8002818:	b188      	cbz	r0, 800283e <tc_hmac_prng_reseed+0x30>
 800281a:	b181      	cbz	r1, 800283e <tc_hmac_prng_reseed+0x30>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 800281c:	2a1f      	cmp	r2, #31
 800281e:	d90e      	bls.n	800283e <tc_hmac_prng_reseed+0x30>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8002820:	b12b      	cbz	r3, 800282e <tc_hmac_prng_reseed+0x20>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8002822:	b164      	cbz	r4, 800283e <tc_hmac_prng_reseed+0x30>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 8002824:	f7ff ff69 	bl	80026fa <update>
		update(prng, additional_input, additionallen);
 8002828:	4622      	mov	r2, r4
 800282a:	4639      	mov	r1, r7
 800282c:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
 800282e:	f7ff ff64 	bl	80026fa <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002836:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 800283a:	2001      	movs	r0, #1
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800283e:	2000      	movs	r0, #0
 8002840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002842 <tc_hmac_prng_generate>:
}

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 8002842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002846:	460e      	mov	r6, r1
 8002848:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 800284a:	4605      	mov	r5, r0
 800284c:	b388      	cbz	r0, 80028b2 <tc_hmac_prng_generate+0x70>
 800284e:	b382      	cbz	r2, 80028b2 <tc_hmac_prng_generate+0x70>
	    prng == (TCHmacPrng_t) 0 ||
 8002850:	1e4b      	subs	r3, r1, #1
 8002852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002856:	d22c      	bcs.n	80028b2 <tc_hmac_prng_generate+0x70>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8002858:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 800285c:	b363      	cbz	r3, 80028b8 <tc_hmac_prng_generate+0x76>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 800285e:	3b01      	subs	r3, #1
 8002860:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8002864:	f502 7788 	add.w	r7, r2, #272	; 0x110
		(void)tc_hmac_init(&prng->h);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ff0b 	bl	8002684 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 800286e:	2220      	movs	r2, #32
 8002870:	4639      	mov	r1, r7
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff ff14 	bl	80026a0 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8002878:	4622      	mov	r2, r4
 800287a:	2120      	movs	r1, #32
 800287c:	4638      	mov	r0, r7
 800287e:	f7ff ff16 	bl	80026ae <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8002882:	2e20      	cmp	r6, #32
 8002884:	46b0      	mov	r8, r6
 8002886:	bf28      	it	cs
 8002888:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 800288c:	4628      	mov	r0, r5
 800288e:	4643      	mov	r3, r8
 8002890:	463a      	mov	r2, r7
 8002892:	4641      	mov	r1, r8
 8002894:	f7fe fa70 	bl	8000d78 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8002898:	2e20      	cmp	r6, #32
		out += bufferlen;
 800289a:	4445      	add	r5, r8
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 800289c:	d807      	bhi.n	80028ae <tc_hmac_prng_generate+0x6c>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 800289e:	4620      	mov	r0, r4
 80028a0:	2220      	movs	r2, #32
 80028a2:	4639      	mov	r1, r7
 80028a4:	f7ff ff29 	bl	80026fa <update>

	return TC_CRYPTO_SUCCESS;
 80028a8:	2001      	movs	r0, #1
 80028aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 80028ae:	3e20      	subs	r6, #32
 80028b0:	e7da      	b.n	8002868 <tc_hmac_prng_generate+0x26>
		return TC_CRYPTO_FAIL;
 80028b2:	2000      	movs	r0, #0
 80028b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_HMAC_PRNG_RESEED_REQ;
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80028bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028c0 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <UTILS_SetFlashLatency.part.0+0x6c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
#endif /* UTILS_SCALE1_LATENCY2_FREQ */
    }
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80028ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028ce:	461a      	mov	r2, r3
 80028d0:	d120      	bne.n	8002914 <UTILS_SetFlashLatency.part.0+0x54>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <UTILS_SetFlashLatency.part.0+0x70>)
 80028d4:	4298      	cmp	r0, r3
 80028d6:	d81f      	bhi.n	8002918 <UTILS_SetFlashLatency.part.0+0x58>
      {
        latency = LL_FLASH_LATENCY_2;
      }
      else
      {
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <UTILS_SetFlashLatency.part.0+0x74>)
 80028da:	4298      	cmp	r0, r3
 80028dc:	bf94      	ite	ls
 80028de:	2300      	movls	r3, #0
 80028e0:	2301      	movhi	r3, #1
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
          latency = LL_FLASH_LATENCY_1;
        }
      }
    }
#if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 80028e8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80028ec:	d105      	bne.n	80028fa <UTILS_SetFlashLatency.part.0+0x3a>
      {
        latency = LL_FLASH_LATENCY_3;
      }
#endif /*UTILS_SCALE1_LATENCY3_FREQ */
#if defined (UTILS_SCALE3_LATENCY2_FREQ)
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <UTILS_SetFlashLatency.part.0+0x70>)
 80028f0:	4290      	cmp	r0, r2
 80028f2:	d913      	bls.n	800291c <UTILS_SetFlashLatency.part.0+0x5c>
      {
        latency = LL_FLASH_LATENCY_2;
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf08      	it	eq
 80028f8:	2302      	moveq	r3, #2
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80028fa:	490f      	ldr	r1, [pc, #60]	; (8002938 <UTILS_SetFlashLatency.part.0+0x78>)
 80028fc:	680a      	ldr	r2, [r1, #0]
 80028fe:	f022 020f 	bic.w	r2, r2, #15
 8002902:	431a      	orrs	r2, r3
 8002904:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002906:	6808      	ldr	r0, [r1, #0]
 8002908:	f000 000f 	and.w	r0, r0, #15
    {
      status = ERROR;
    }
  }
  return status;
}
 800290c:	1ac3      	subs	r3, r0, r3
 800290e:	4258      	negs	r0, r3
 8002910:	4158      	adcs	r0, r3
 8002912:	4770      	bx	lr
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8002914:	2300      	movs	r3, #0
 8002916:	e7e4      	b.n	80028e2 <UTILS_SetFlashLatency.part.0+0x22>
        latency = LL_FLASH_LATENCY_2;
 8002918:	2302      	movs	r3, #2
 800291a:	e7e2      	b.n	80028e2 <UTILS_SetFlashLatency.part.0+0x22>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800291c:	4a05      	ldr	r2, [pc, #20]	; (8002934 <UTILS_SetFlashLatency.part.0+0x74>)
 800291e:	4290      	cmp	r0, r2
 8002920:	d9eb      	bls.n	80028fa <UTILS_SetFlashLatency.part.0+0x3a>
          latency = LL_FLASH_LATENCY_1;
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf08      	it	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	e7e7      	b.n	80028fa <UTILS_SetFlashLatency.part.0+0x3a>
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000
 8002930:	03938700 	.word	0x03938700
 8002934:	01c9c380 	.word	0x01c9c380
 8002938:	40023c00 	.word	0x40023c00

0800293c <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <UTILS_PLL_IsBusy+0x18>)
 800293e:	6818      	ldr	r0, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8002940:	681b      	ldr	r3, [r3, #0]
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8002942:	011b      	lsls	r3, r3, #4
  if(LL_RCC_PLL_IsReady() != 0U)
 8002944:	bf5a      	itte	pl
 8002946:	f080 7000 	eorpl.w	r0, r0, #33554432	; 0x2000000
 800294a:	f3c0 6040 	ubfxpl	r0, r0, #25, #1
 800294e:	2000      	movmi	r0, #0
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002958:	680b      	ldr	r3, [r1, #0]
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800295c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8002960:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8002962:	4d22      	ldr	r5, [pc, #136]	; (80029ec <UTILS_EnablePLLAndSwitchSystem+0x94>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002964:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8002966:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8002968:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 800296c:	429c      	cmp	r4, r3
{
 800296e:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8002970:	d827      	bhi.n	80029c2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <UTILS_EnablePLLAndSwitchSystem+0x98>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800297a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800297c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 800297e:	0192      	lsls	r2, r2, #6
 8002980:	d5fc      	bpl.n	800297c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	6831      	ldr	r1, [r6, #0]
 8002986:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800298a:	430a      	orrs	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	f022 0203 	bic.w	r2, r2, #3
 8002994:	f042 0202 	orr.w	r2, r2, #2
 8002998:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <UTILS_EnablePLLAndSwitchSystem+0x98>)
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80029a2:	2a08      	cmp	r2, #8
 80029a4:	d1fa      	bne.n	800299c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	6871      	ldr	r1, [r6, #4]
 80029aa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68b1      	ldr	r1, [r6, #8]
 80029b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	2001      	movs	r0, #1
 80029c0:	e005      	b.n	80029ce <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = ERROR;
 80029c2:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 80029c4:	b11c      	cbz	r4, 80029ce <UTILS_EnablePLLAndSwitchSystem+0x76>
 80029c6:	f7ff ff7b 	bl	80028c0 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 80029ca:	2801      	cmp	r0, #1
 80029cc:	d0d1      	beq.n	8002972 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }
    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d203      	bcs.n	80029dc <UTILS_EnablePLLAndSwitchSystem+0x84>
    status = ERROR;
 80029d4:	4620      	mov	r0, r4
  if(HCLK_Frequency == 0U)
 80029d6:	b12c      	cbz	r4, 80029e4 <UTILS_EnablePLLAndSwitchSystem+0x8c>
 80029d8:	f7ff ff72 	bl	80028c0 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80029dc:	2801      	cmp	r0, #1
 80029de:	d101      	bne.n	80029e4 <UTILS_EnablePLLAndSwitchSystem+0x8c>
  SystemCoreClock = HCLKFrequency;
 80029e0:	602c      	str	r4, [r5, #0]
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	bf00      	nop
 80029e8:	0801313c 	.word	0x0801313c
 80029ec:	200057c4 	.word	0x200057c4
 80029f0:	40023800 	.word	0x40023800

080029f4 <LL_PLL_ConfigSystemClock_HSE>:
{
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80029fc:	f7ff ff9e 	bl	800293c <UTILS_PLL_IsBusy>
 8002a00:	2801      	cmp	r0, #1
 8002a02:	d136      	bne.n	8002a72 <LL_PLL_ConfigSystemClock_HSE+0x7e>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8002a04:	6816      	ldr	r6, [r2, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002a06:	6857      	ldr	r7, [r2, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a08:	6893      	ldr	r3, [r2, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <LL_PLL_ConfigSystemClock_HSE+0x84>)
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8002a0c:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8002a10:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8002a14:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8002a18:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a1a:	0c18      	lsrs	r0, r3, #16
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	0040      	lsls	r0, r0, #1
 8002a20:	fbb4 f0f0 	udiv	r0, r4, r0
 8002a24:	6814      	ldr	r4, [r2, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8002a26:	03a4      	lsls	r4, r4, #14
 8002a28:	d512      	bpl.n	8002a50 <LL_PLL_ConfigSystemClock_HSE+0x5c>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002a2a:	4c13      	ldr	r4, [pc, #76]	; (8002a78 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8002a2c:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <LL_PLL_ConfigSystemClock_HSE+0x88>)
 8002a2e:	6865      	ldr	r5, [r4, #4]
 8002a30:	402a      	ands	r2, r5
 8002a32:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a36:	4332      	orrs	r2, r6
 8002a38:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8002a3c:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002a3e:	6862      	ldr	r2, [r4, #4]
 8002a40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002a44:	431a      	orrs	r2, r3
 8002a46:	6062      	str	r2, [r4, #4]
}
 8002a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002a4c:	f7ff bf84 	b.w	8002958 <UTILS_EnablePLLAndSwitchSystem>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a50:	6814      	ldr	r4, [r2, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8002a52:	2d01      	cmp	r5, #1
 8002a54:	bf0c      	ite	eq
 8002a56:	f444 2480 	orreq.w	r4, r4, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002a5a:	f424 2480 	bicne.w	r4, r4, #262144	; 0x40000
 8002a5e:	6014      	str	r4, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a60:	6814      	ldr	r4, [r2, #0]
 8002a62:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002a66:	6014      	str	r4, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002a68:	4c03      	ldr	r4, [pc, #12]	; (8002a78 <LL_PLL_ConfigSystemClock_HSE+0x84>)
 8002a6a:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8002a6c:	0392      	lsls	r2, r2, #14
 8002a6e:	d5fc      	bpl.n	8002a6a <LL_PLL_ConfigSystemClock_HSE+0x76>
 8002a70:	e7db      	b.n	8002a2a <LL_PLL_ConfigSystemClock_HSE+0x36>
}
 8002a72:	2000      	movs	r0, #0
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	ffbf8000 	.word	0xffbf8000

08002a80 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
 8002a80:	f04f 0310 	mov.w	r3, #16
 8002a84:	f3ef 8111 	mrs	r1, BASEPRI
 8002a88:	f383 8811 	msr	BASEPRI, r3
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <st_stm32f4_init+0x24>)
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8002a96:	f381 8811 	msr	BASEPRI, r1
	irq_unlock(key);

#ifdef CONFIG_CLOCK_CONTROL_STM32_CUBE
	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, System core clock is set to 4MHz */
	SystemCoreClock = 4000000;
 8002a9a:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <st_stm32f4_init+0x28>)
 8002a9c:	4a03      	ldr	r2, [pc, #12]	; (8002aac <st_stm32f4_init+0x2c>)
 8002a9e:	601a      	str	r2, [r3, #0]
	/* Update CMSIS SystemCoreClock variable (HCLK) */
	SystemCoreClock = CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
#endif /* CONFIG_CLOCK_CONTROL_STM32_CUBE */

	return 0;
}
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00
 8002aa8:	200057c4 	.word	0x200057c4
 8002aac:	003d0900 	.word	0x003d0900

08002ab0 <stm32_gpio_flags_to_conf>:
#include <gpio/gpio_stm32.h>


int stm32_gpio_flags_to_conf(int flags, int *pincfg)
{
	int direction = flags & GPIO_DIR_MASK;
 8002ab0:	f000 0301 	and.w	r3, r0, #1
	int pud = flags & GPIO_PUD_MASK;

	if (!pincfg) {
 8002ab4:	b1b1      	cbz	r1, 8002ae4 <stm32_gpio_flags_to_conf+0x34>
		return -EINVAL;
	}

	if (direction == GPIO_DIR_OUT) {
 8002ab6:	b123      	cbz	r3, 8002ac2 <stm32_gpio_flags_to_conf+0x12>
		*pincfg = STM32_MODER_OUTPUT_MODE;
 8002ab8:	2310      	movs	r3, #16
 8002aba:	600b      	str	r3, [r1, #0]
			/* floating */
			*pincfg = *pincfg | STM32_PUPDR_NO_PULL;
		}
	}

	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8002ac2:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8002ac6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002aca:	d103      	bne.n	8002ad4 <stm32_gpio_flags_to_conf+0x24>
			*pincfg = *pincfg | STM32_PUPDR_PULL_UP;
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002ad0:	600a      	str	r2, [r1, #0]
 8002ad2:	e7f4      	b.n	8002abe <stm32_gpio_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8002ad4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002ad8:	d001      	beq.n	8002ade <stm32_gpio_flags_to_conf+0x2e>
		*pincfg = STM32_MODER_INPUT_MODE;
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e7ef      	b.n	8002abe <stm32_gpio_flags_to_conf+0xe>
			*pincfg = *pincfg | STM32_PUPDR_PULL_DOWN;
 8002ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae2:	e7f5      	b.n	8002ad0 <stm32_gpio_flags_to_conf+0x20>
		return -EINVAL;
 8002ae4:	f06f 0315 	mvn.w	r3, #21
 8002ae8:	e7e9      	b.n	8002abe <stm32_gpio_flags_to_conf+0xe>

08002aea <stm32_gpio_configure>:

int stm32_gpio_configure(u32_t *base_addr, int pin, int conf, int altf)
{
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile struct stm32f4x_gpio *gpio =
		(struct stm32f4x_gpio *)(base_addr);
	unsigned int mode, otype, ospeed, pupd;
	unsigned int pin_shift = pin << 1;
	unsigned int afr_bank = pin / 8;
	unsigned int afr_shift = (pin % 8) << 2;
 8002aec:	424c      	negs	r4, r1
 8002aee:	f004 0407 	and.w	r4, r4, #7
	unsigned int pin_shift = pin << 1;
 8002af2:	ea4f 0741 	mov.w	r7, r1, lsl #1
	unsigned int afr_shift = (pin % 8) << 2;
 8002af6:	f001 0507 	and.w	r5, r1, #7
 8002afa:	bf58      	it	pl
 8002afc:	4265      	negpl	r5, r4
	mode = (conf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
	otype = (conf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
	ospeed = (conf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
	pupd = (conf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;

	scratch = gpio->mode & ~(STM32_MODER_MASK << pin_shift);
 8002afe:	2403      	movs	r4, #3
 8002b00:	f8d0 e000 	ldr.w	lr, [r0]
 8002b04:	40bc      	lsls	r4, r7
 8002b06:	43e4      	mvns	r4, r4
	mode = (conf >> STM32_MODER_SHIFT) & STM32_MODER_MASK;
 8002b08:	f3c2 1601 	ubfx	r6, r2, #4, #2
	scratch = gpio->mode & ~(STM32_MODER_MASK << pin_shift);
 8002b0c:	ea0e 0e04 	and.w	lr, lr, r4
	gpio->mode = scratch | (mode << pin_shift);
 8002b10:	40be      	lsls	r6, r7
 8002b12:	ea46 060e 	orr.w	r6, r6, lr
 8002b16:	6006      	str	r6, [r0, #0]

	scratch = gpio->ospeed & ~(STM32_OSPEEDR_MASK << pin_shift);
 8002b18:	f8d0 e008 	ldr.w	lr, [r0, #8]
	ospeed = (conf >> STM32_OSPEEDR_SHIFT) & STM32_OSPEEDR_MASK;
 8002b1c:	f3c2 16c1 	ubfx	r6, r2, #7, #2
	scratch = gpio->ospeed & ~(STM32_OSPEEDR_MASK << pin_shift);
 8002b20:	ea04 0e0e 	and.w	lr, r4, lr
	gpio->ospeed = scratch | (ospeed << pin_shift);
 8002b24:	40be      	lsls	r6, r7
 8002b26:	ea46 060e 	orr.w	r6, r6, lr
 8002b2a:	6086      	str	r6, [r0, #8]

	scratch = gpio->otype & ~(STM32_OTYPER_MASK << pin);
 8002b2c:	6846      	ldr	r6, [r0, #4]
 8002b2e:	f04f 0e01 	mov.w	lr, #1
 8002b32:	fa0e fe01 	lsl.w	lr, lr, r1
 8002b36:	ea26 060e 	bic.w	r6, r6, lr
	otype = (conf >> STM32_OTYPER_SHIFT) & STM32_OTYPER_MASK;
 8002b3a:	f3c2 1e80 	ubfx	lr, r2, #6, #1
	gpio->otype = scratch | (otype << pin);
 8002b3e:	fa0e fe01 	lsl.w	lr, lr, r1
 8002b42:	ea46 060e 	orr.w	r6, r6, lr
 8002b46:	6046      	str	r6, [r0, #4]

	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8002b48:	68c6      	ldr	r6, [r0, #12]
	pupd = (conf >> STM32_PUPDR_SHIFT) & STM32_PUPDR_MASK;
 8002b4a:	f3c2 2241 	ubfx	r2, r2, #9, #2
	gpio->pupdr = scratch | (pupd << pin_shift);
 8002b4e:	40ba      	lsls	r2, r7
	scratch = gpio->pupdr & ~(STM32_PUPDR_MASK << pin_shift);
 8002b50:	4034      	ands	r4, r6
	gpio->pupdr = scratch | (pupd << pin_shift);
 8002b52:	4322      	orrs	r2, r4
 8002b54:	60c2      	str	r2, [r0, #12]
	unsigned int afr_bank = pin / 8;
 8002b56:	2208      	movs	r2, #8
 8002b58:	fb91 f1f2 	sdiv	r1, r1, r2
 8002b5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	unsigned int afr_shift = (pin % 8) << 2;
 8002b60:	00ad      	lsls	r5, r5, #2

	scratch = gpio->afr[afr_bank] & ~(STM32_AFR_MASK << afr_shift);
 8002b62:	6a02      	ldr	r2, [r0, #32]
 8002b64:	210f      	movs	r1, #15
 8002b66:	40a9      	lsls	r1, r5
 8002b68:	ea22 0201 	bic.w	r2, r2, r1
	gpio->afr[afr_bank] = scratch | (altf << afr_shift);
 8002b6c:	40ab      	lsls	r3, r5
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	6202      	str	r2, [r0, #32]

	return 0;
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b76 <stm32_gpio_set>:

int stm32_gpio_set(u32_t *base, int pin, int value)
{
 8002b76:	f001 010f 	and.w	r1, r1, #15
 8002b7a:	2301      	movs	r3, #1
	struct stm32f4x_gpio *gpio = (struct stm32f4x_gpio *)base;

	if (value) {
 8002b7c:	b11a      	cbz	r2, 8002b86 <stm32_gpio_set+0x10>
		/* atomic set */
		gpio->bsr = (1 << (pin & 0x0f));
	} else {
		/* atomic reset */
		gpio->bsr = (1 << ((pin & 0x0f) + 0x10));
 8002b7e:	408b      	lsls	r3, r1
 8002b80:	6183      	str	r3, [r0, #24]
	}

	return 0;
}
 8002b82:	2000      	movs	r0, #0
 8002b84:	4770      	bx	lr
		gpio->bsr = (1 << ((pin & 0x0f) + 0x10));
 8002b86:	3110      	adds	r1, #16
 8002b88:	e7f9      	b.n	8002b7e <stm32_gpio_set+0x8>

08002b8a <stm32_gpio_get>:

int stm32_gpio_get(u32_t *base, int pin)
{
	struct stm32f4x_gpio *gpio = (struct stm32f4x_gpio *)base;

	return (gpio->idr >> pin) & 0x1;
 8002b8a:	6900      	ldr	r0, [r0, #16]
 8002b8c:	40c8      	lsrs	r0, r1
}
 8002b8e:	f000 0001 	and.w	r0, r0, #1
 8002b92:	4770      	bx	lr

08002b94 <stm32_gpio_enable_int>:

int stm32_gpio_enable_int(int port, int pin)
{
 8002b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b96:	4605      	mov	r5, r0
	volatile struct stm32f4x_syscfg *syscfg =
		(struct stm32f4x_syscfg *)SYSCFG_BASE;
	volatile union syscfg_exticr *exticr;
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002b98:	481a      	ldr	r0, [pc, #104]	; (8002c04 <stm32_gpio_enable_int+0x70>)
{
 8002b9a:	460c      	mov	r4, r1
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002b9c:	f00e fe78 	bl	8011890 <device_get_binding>
	struct stm32_pclken pclken = {
 8002ba0:	4919      	ldr	r1, [pc, #100]	; (8002c08 <stm32_gpio_enable_int+0x74>)
	struct device *clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8002ba2:	4602      	mov	r2, r0
	struct stm32_pclken pclken = {
 8002ba4:	c903      	ldmia	r1, {r0, r1}
 8002ba6:	e88d 0003 	stmia.w	sp, {r0, r1}
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
 8002baa:	6851      	ldr	r1, [r2, #4]
 8002bac:	4610      	mov	r0, r2
 8002bae:	680e      	ldr	r6, [r1, #0]
 8002bb0:	4669      	mov	r1, sp
 8002bb2:	47b0      	blx	r6
	int shift = 0;

	/* Enable SYSCFG clock */
	clock_control_on(clk, (clock_control_subsys_t *) &pclken);

	if (pin <= 3) {
 8002bb4:	2c03      	cmp	r4, #3
 8002bb6:	dc16      	bgt.n	8002be6 <stm32_gpio_enable_int+0x52>
		exticr = &syscfg->exticr1;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <stm32_gpio_enable_int+0x78>)
		exticr = &syscfg->exticr4;
	} else {
		return -EINVAL;
	}

	shift = 4 * (pin % 4);
 8002bba:	4262      	negs	r2, r4
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	f004 0403 	and.w	r4, r4, #3
 8002bc4:	bf58      	it	pl
 8002bc6:	4254      	negpl	r4, r2
 8002bc8:	00a4      	lsls	r4, r4, #2

	exticr->val &= ~(0xf << shift);
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	210f      	movs	r1, #15
 8002bce:	40a1      	lsls	r1, r4
 8002bd0:	ea22 0201 	bic.w	r2, r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
	exticr->val |= port << shift;
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	fa05 f404 	lsl.w	r4, r5, r4
 8002bdc:	4314      	orrs	r4, r2
 8002bde:	601c      	str	r4, [r3, #0]

	return 0;
 8002be0:	2000      	movs	r0, #0
}
 8002be2:	b002      	add	sp, #8
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pin <= 7) {
 8002be6:	2c07      	cmp	r4, #7
 8002be8:	dc01      	bgt.n	8002bee <stm32_gpio_enable_int+0x5a>
		exticr = &syscfg->exticr2;
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <stm32_gpio_enable_int+0x7c>)
 8002bec:	e7e5      	b.n	8002bba <stm32_gpio_enable_int+0x26>
	} else if (pin <= 11) {
 8002bee:	2c0b      	cmp	r4, #11
 8002bf0:	dc01      	bgt.n	8002bf6 <stm32_gpio_enable_int+0x62>
		exticr = &syscfg->exticr3;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <stm32_gpio_enable_int+0x80>)
 8002bf4:	e7e1      	b.n	8002bba <stm32_gpio_enable_int+0x26>
	} else if (pin <= 15) {
 8002bf6:	2c0f      	cmp	r4, #15
 8002bf8:	dc01      	bgt.n	8002bfe <stm32_gpio_enable_int+0x6a>
		exticr = &syscfg->exticr4;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <stm32_gpio_enable_int+0x84>)
 8002bfc:	e7dd      	b.n	8002bba <stm32_gpio_enable_int+0x26>
		return -EINVAL;
 8002bfe:	f06f 0015 	mvn.w	r0, #21
 8002c02:	e7ee      	b.n	8002be2 <stm32_gpio_enable_int+0x4e>
 8002c04:	0801314c 	.word	0x0801314c
 8002c08:	08012c7c 	.word	0x08012c7c
 8002c0c:	40013808 	.word	0x40013808
 8002c10:	4001380c 	.word	0x4001380c
 8002c14:	40013810 	.word	0x40013810
 8002c18:	40013814 	.word	0x40013814

08002c1c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8002c1e:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
 8002c20:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
 8002c22:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
 8002c24:	d80b      	bhi.n	8002c3e <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
 8002c26:	6940      	ldr	r0, [r0, #20]
    cmp r0, r1
 8002c28:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8002c2a:	d008      	beq.n	8002c3e <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
 8002c2c:	b500      	push	{lr}
    bl _update_time_slice_before_swap
 8002c2e:	f00f f975 	bl	8011f1c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
 8002c32:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002c36:	4903      	ldr	r1, [pc, #12]	; (8002c44 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8002c3c:	600a      	str	r2, [r1, #0]

08002c3e <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
 8002c3e:	4770      	bx	lr
    ldr r0, =_kernel
 8002c40:	20001340 	.word	0x20001340
    ldr r1, =_SCS_ICSR
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <_IntLibInit>:
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002c50:	3301      	adds	r3, #1
 8002c52:	2b55      	cmp	r3, #85	; 0x55
 8002c54:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002c58:	d1f9      	bne.n	8002c4e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002c62:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002c64:	2028      	movs	r0, #40	; 0x28
    add r0, r2
 8002c66:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
 8002c68:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
 8002c6c:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
 8002c70:	4f0b      	ldr	r7, [pc, #44]	; (8002ca0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002c72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002c76:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002c78:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
 8002c7c:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
 8002c7e:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
 8002c80:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002c82:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
 8002c84:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002c86:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002c88:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002c8c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8002c90:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
 8002c94:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
 8002c98:	4770      	bx	lr
 8002c9a:	0000      	.short	0x0000
    ldr r1, =_kernel
 8002c9c:	20001340 	.word	0x20001340
    ldr v4, =_SCS_ICSR
 8002ca0:	e000ed04 	.word	0xe000ed04

08002ca4 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
 8002ca4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002ca8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8002caa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002cae:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002cb2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
 8002cb4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
 8002cb8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
 8002cbc:	d001      	beq.n	8002cc2 <_context_switch>

    cmp r1, #2
 8002cbe:	2902      	cmp	r1, #2
    beq _oops
 8002cc0:	d007      	beq.n	8002cd2 <_oops>

08002cc2 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
 8002cc2:	4040      	eors	r0, r0
    msr BASEPRI, r0
 8002cc4:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
 8002cce:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
 8002cd0:	4770      	bx	lr

08002cd2 <_oops>:

_oops:
    push {lr}
 8002cd2:	b500      	push	{lr}
    blx _do_kernel_oops
 8002cd4:	f000 f9fc 	bl	80030d0 <_do_kernel_oops>
    pop {pc}
 8002cd8:	bd00      	pop	{pc}
 8002cda:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002ce2:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
 8002ce4:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <__swap+0x18>)
    ldr r1, [r1]
 8002ce8:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
 8002cea:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
 8002cec:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
 8002cee:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
 8002cf0:	4770      	bx	lr
 8002cf2:	0000      	.short	0x0000
    ldr r1, =_kernel
 8002cf4:	20001340 	.word	0x20001340
    ldr r1, =_k_neg_eagain
 8002cf8:	08013e38 	.word	0x08013e38

08002cfc <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
 8002d00:	f00f f8e2 	bl	8011ec8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
 8002d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
 8002d0c:	4801      	ldr	r0, [pc, #4]	; (8002d14 <_FaultThreadShow.isra.2+0x18>)
 8002d0e:	f7fe b825 	b.w	8000d5c <printk>
 8002d12:	bf00      	nop
 8002d14:	080132b5 	.word	0x080132b5

08002d18 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
 8002d1c:	481a      	ldr	r0, [pc, #104]	; (8002d88 <_UsageFault+0x70>)
 8002d1e:	f7fe f81d 	bl	8000d5c <printk>

	_FaultThreadShow(esf);
 8002d22:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
 8002d26:	4c19      	ldr	r4, [pc, #100]	; (8002d8c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
 8002d28:	f7ff ffe8 	bl	8002cfc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
 8002d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d2e:	019a      	lsls	r2, r3, #6
 8002d30:	d502      	bpl.n	8002d38 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
 8002d32:	4817      	ldr	r0, [pc, #92]	; (8002d90 <_UsageFault+0x78>)
 8002d34:	f7fe f812 	bl	8000d5c <printk>
	}
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
 8002d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d3a:	01db      	lsls	r3, r3, #7
 8002d3c:	d502      	bpl.n	8002d44 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
 8002d3e:	4815      	ldr	r0, [pc, #84]	; (8002d94 <_UsageFault+0x7c>)
 8002d40:	f7fe f80c 	bl	8000d5c <printk>
	}
	if (SCB->CFSR & CFSR_NOCP_Msk) {
 8002d44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d46:	0318      	lsls	r0, r3, #12
 8002d48:	d502      	bpl.n	8002d50 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
 8002d4a:	4813      	ldr	r0, [pc, #76]	; (8002d98 <_UsageFault+0x80>)
 8002d4c:	f7fe f806 	bl	8000d5c <printk>
	}
	if (SCB->CFSR & CFSR_INVPC_Msk) {
 8002d50:	4c0e      	ldr	r4, [pc, #56]	; (8002d8c <_UsageFault+0x74>)
 8002d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d54:	0359      	lsls	r1, r3, #13
 8002d56:	d502      	bpl.n	8002d5e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <_UsageFault+0x84>)
 8002d5a:	f7fd ffff 	bl	8000d5c <printk>
	}
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
 8002d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d60:	039a      	lsls	r2, r3, #14
 8002d62:	d502      	bpl.n	8002d6a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
 8002d64:	480e      	ldr	r0, [pc, #56]	; (8002da0 <_UsageFault+0x88>)
 8002d66:	f7fd fff9 	bl	8000d5c <printk>
	}
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
 8002d6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d6c:	03db      	lsls	r3, r3, #15
 8002d6e:	d502      	bpl.n	8002d76 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <_UsageFault+0x8c>)
 8002d72:	f7fd fff3 	bl	8000d5c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <_UsageFault+0x74>)
 8002d78:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002d7a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002d7e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002d82:	6293      	str	r3, [r2, #40]	; 0x28
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	08013386 	.word	0x08013386
 8002d8c:	e000ed00 	.word	0xe000ed00
 8002d90:	0801339f 	.word	0x0801339f
 8002d94:	080133b3 	.word	0x080133b3
 8002d98:	080133ce 	.word	0x080133ce
 8002d9c:	080133ed 	.word	0x080133ed
 8002da0:	08013413 	.word	0x08013413
 8002da4:	0801342e 	.word	0x0801342e

08002da8 <_MpuFault>:
{
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
 8002dac:	4817      	ldr	r0, [pc, #92]	; (8002e0c <_MpuFault+0x64>)
{
 8002dae:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
 8002db0:	f7fd ffd4 	bl	8000d5c <printk>
	_FaultThreadShow(esf);
 8002db4:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
 8002db8:	4c15      	ldr	r4, [pc, #84]	; (8002e10 <_MpuFault+0x68>)
	_FaultThreadShow(esf);
 8002dba:	f7ff ff9f 	bl	8002cfc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
 8002dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dc0:	06db      	lsls	r3, r3, #27
 8002dc2:	d504      	bpl.n	8002dce <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
 8002dc4:	4813      	ldr	r0, [pc, #76]	; (8002e14 <_MpuFault+0x6c>)
}
 8002dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction Access Violation\n");
 8002dca:	f7fd bfc7 	b.w	8000d5c <printk>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
 8002dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dd0:	0718      	lsls	r0, r3, #28
 8002dd2:	d501      	bpl.n	8002dd8 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
 8002dd4:	4810      	ldr	r0, [pc, #64]	; (8002e18 <_MpuFault+0x70>)
 8002dd6:	e7f6      	b.n	8002dc6 <_MpuFault+0x1e>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
 8002dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dda:	0799      	lsls	r1, r3, #30
 8002ddc:	d50f      	bpl.n	8002dfe <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
 8002dde:	480f      	ldr	r0, [pc, #60]	; (8002e1c <_MpuFault+0x74>)
 8002de0:	f7fd ffbc 	bl	8000d5c <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
 8002de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002de6:	061a      	lsls	r2, r3, #24
 8002de8:	d50e      	bpl.n	8002e08 <_MpuFault+0x60>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
 8002dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dec:	480c      	ldr	r0, [pc, #48]	; (8002e20 <_MpuFault+0x78>)
 8002dee:	f7fd ffb5 	bl	8000d5c <printk>
			if (fromHardFault) {
 8002df2:	b14d      	cbz	r5, 8002e08 <_MpuFault+0x60>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
 8002df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
 8002dfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e00:	07db      	lsls	r3, r3, #31
 8002e02:	d501      	bpl.n	8002e08 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
 8002e04:	4807      	ldr	r0, [pc, #28]	; (8002e24 <_MpuFault+0x7c>)
 8002e06:	e7de      	b.n	8002dc6 <_MpuFault+0x1e>
 8002e08:	bd38      	pop	{r3, r4, r5, pc}
 8002e0a:	bf00      	nop
 8002e0c:	080132ff 	.word	0x080132ff
 8002e10:	e000ed00 	.word	0xe000ed00
 8002e14:	08013316 	.word	0x08013316
 8002e18:	08013328 	.word	0x08013328
 8002e1c:	0801333c 	.word	0x0801333c
 8002e20:	08013355 	.word	0x08013355
 8002e24:	08013366 	.word	0x08013366

08002e28 <_BusFault>:
{
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
 8002e2c:	481b      	ldr	r0, [pc, #108]	; (8002e9c <_BusFault+0x74>)
{
 8002e2e:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
 8002e30:	f7fd ff94 	bl	8000d5c <printk>
	_FaultThreadShow(esf);
 8002e34:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_STKERR_Msk) {
 8002e38:	4c19      	ldr	r4, [pc, #100]	; (8002ea0 <_BusFault+0x78>)
	_FaultThreadShow(esf);
 8002e3a:	f7ff ff5f 	bl	8002cfc <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
 8002e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e40:	04d9      	lsls	r1, r3, #19
 8002e42:	d504      	bpl.n	8002e4e <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
 8002e44:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <_BusFault+0x7c>)
}
 8002e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction bus error\n");
 8002e4a:	f7fd bf87 	b.w	8000d5c <printk>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
 8002e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e50:	051a      	lsls	r2, r3, #20
 8002e52:	d501      	bpl.n	8002e58 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
 8002e54:	4814      	ldr	r0, [pc, #80]	; (8002ea8 <_BusFault+0x80>)
 8002e56:	e7f6      	b.n	8002e46 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
 8002e58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e5a:	059b      	lsls	r3, r3, #22
 8002e5c:	d514      	bpl.n	8002e88 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
 8002e5e:	4813      	ldr	r0, [pc, #76]	; (8002eac <_BusFault+0x84>)
 8002e60:	f7fd ff7c 	bl	8000d5c <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
 8002e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e66:	0418      	lsls	r0, r3, #16
 8002e68:	d508      	bpl.n	8002e7c <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
 8002e6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002e6c:	4810      	ldr	r0, [pc, #64]	; (8002eb0 <_BusFault+0x88>)
 8002e6e:	f7fd ff75 	bl	8000d5c <printk>
			if (fromHardFault) {
 8002e72:	b11d      	cbz	r5, 8002e7c <_BusFault+0x54>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
 8002e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e7a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <_BusFault+0x78>)
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	0559      	lsls	r1, r3, #21
 8002e82:	d509      	bpl.n	8002e98 <_BusFault+0x70>
			PR_EXC("  Imprecise data bus error\n");
 8002e84:	480b      	ldr	r0, [pc, #44]	; (8002eb4 <_BusFault+0x8c>)
 8002e86:	e7de      	b.n	8002e46 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
 8002e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e8a:	055a      	lsls	r2, r3, #21
 8002e8c:	d4fa      	bmi.n	8002e84 <_BusFault+0x5c>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
 8002e8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e90:	05db      	lsls	r3, r3, #23
 8002e92:	d501      	bpl.n	8002e98 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
 8002e94:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <_BusFault+0x90>)
 8002e96:	e7d6      	b.n	8002e46 <_BusFault+0x1e>
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
 8002e9a:	bf00      	nop
 8002e9c:	0801317c 	.word	0x0801317c
 8002ea0:	e000ed00 	.word	0xe000ed00
 8002ea4:	08013316 	.word	0x08013316
 8002ea8:	08013328 	.word	0x08013328
 8002eac:	08013193 	.word	0x08013193
 8002eb0:	08013355 	.word	0x08013355
 8002eb4:	080131ad 	.word	0x080131ad
 8002eb8:	080131c9 	.word	0x080131c9

08002ebc <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
 8002ebc:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002ebe:	4d27      	ldr	r5, [pc, #156]	; (8002f5c <_Fault+0xa0>)
 8002ec0:	686b      	ldr	r3, [r5, #4]
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
 8002ec6:	1eda      	subs	r2, r3, #3
{
 8002ec8:	4604      	mov	r4, r0
	switch (fault) {
 8002eca:	2a09      	cmp	r2, #9
 8002ecc:	d83a      	bhi.n	8002f44 <_Fault+0x88>
 8002ece:	e8df f002 	tbb	[pc, r2]
 8002ed2:	3305      	.short	0x3305
 8002ed4:	39392f35 	.word	0x39392f35
 8002ed8:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
 8002edc:	4820      	ldr	r0, [pc, #128]	; (8002f60 <_Fault+0xa4>)
 8002ede:	f7fd ff3d 	bl	8000d5c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
 8002ee2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ee4:	079a      	lsls	r2, r3, #30
 8002ee6:	d503      	bpl.n	8002ef0 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
 8002ee8:	481e      	ldr	r0, [pc, #120]	; (8002f64 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
 8002eea:	f7fd ff37 	bl	8000d5c <printk>
 8002eee:	e00c      	b.n	8002f0a <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
 8002ef0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	d509      	bpl.n	8002f0a <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
 8002ef6:	481c      	ldr	r0, [pc, #112]	; (8002f68 <_Fault+0xac>)
 8002ef8:	f7fd ff30 	bl	8000d5c <printk>
		if (SCB_MMFSR) {
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <_Fault+0xb0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b14b      	cbz	r3, 8002f16 <_Fault+0x5a>
			_MpuFault(esf, 1);
 8002f02:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ff4f 	bl	8002da8 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	2000      	movs	r0, #0
}
 8002f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
 8002f12:	f000 b8e1 	b.w	80030d8 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <_Fault+0xb4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b123      	cbz	r3, 8002f26 <_Fault+0x6a>
			_BusFault(esf, 1);
 8002f1c:	2101      	movs	r1, #1
		_BusFault(esf, 0);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff ff82 	bl	8002e28 <_BusFault>
 8002f24:	e7f1      	b.n	8002f0a <_Fault+0x4e>
		} else if (SCB_UFSR) {
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <_Fault+0xb8>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ec      	beq.n	8002f0a <_Fault+0x4e>
		_UsageFault(esf);
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff fef1 	bl	8002d18 <_UsageFault>
 8002f36:	e7e8      	b.n	8002f0a <_Fault+0x4e>
		_MpuFault(esf, 0);
 8002f38:	2100      	movs	r1, #0
 8002f3a:	e7e3      	b.n	8002f04 <_Fault+0x48>
		_BusFault(esf, 0);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	e7ee      	b.n	8002f1e <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <_Fault+0xbc>)
 8002f42:	e7d2      	b.n	8002eea <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
 8002f44:	480d      	ldr	r0, [pc, #52]	; (8002f7c <_Fault+0xc0>)
 8002f46:	490e      	ldr	r1, [pc, #56]	; (8002f80 <_Fault+0xc4>)
 8002f48:	f1a3 0210 	sub.w	r2, r3, #16
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	bfd8      	it	le
 8002f50:	4601      	movle	r1, r0
 8002f52:	480c      	ldr	r0, [pc, #48]	; (8002f84 <_Fault+0xc8>)
 8002f54:	f7fd ff02 	bl	8000d5c <printk>
 8002f58:	e7d7      	b.n	8002f0a <_Fault+0x4e>
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00
 8002f60:	08013210 	.word	0x08013210
 8002f64:	08013228 	.word	0x08013228
 8002f68:	0801324a 	.word	0x0801324a
 8002f6c:	e000ed28 	.word	0xe000ed28
 8002f70:	e000ed29 	.word	0xe000ed29
 8002f74:	e000ed2c 	.word	0xe000ed2c
 8002f78:	0801326a 	.word	0x0801326a
 8002f7c:	080131e2 	.word	0x080131e2
 8002f80:	080131f7 	.word	0x080131f7
 8002f84:	080132a1 	.word	0x080132a1

08002f88 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <_FaultInit+0xc>)
 8002f8a:	6953      	ldr	r3, [r2, #20]
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	6153      	str	r3, [r2, #20]
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <_arch_irq_enable>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f98:	b243      	sxtb	r3, r0
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f000 001f 	and.w	r0, r0, #31
 8002fa0:	fa02 f000 	lsl.w	r0, r2, r0
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	4a02      	ldr	r2, [pc, #8]	; (8002fb0 <_arch_irq_enable+0x18>)
 8002fa8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002fb4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
 8002fb6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	bfa8      	it	ge
 8002fba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8002fbe:	f101 0101 	add.w	r1, r1, #1
 8002fc2:	ea4f 1101 	mov.w	r1, r1, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	bfbb      	ittet	lt
 8002fc8:	f000 000f 	andlt.w	r0, r0, #15
 8002fcc:	4b04      	ldrlt	r3, [pc, #16]	; (8002fe0 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	bfaa      	itet	ge
 8002fd6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed14 	.word	0xe000ed14

08002fe4 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
 8002fe4:	f000 b834 	b.w	8003050 <__bus_fault>

08002fe8 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	460c      	mov	r4, r1
 8002fec:	4616      	mov	r6, r2
 8002fee:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ff6:	4605      	mov	r5, r0
 8002ff8:	f00f fab2 	bl	8012560 <_init_thread_base>
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8002ffc:	f1a6 0120 	sub.w	r1, r6, #32
 8003000:	4421      	add	r1, r4
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
 8003004:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003006:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
 800300a:	2300      	movs	r3, #0
	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
 8003012:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
 8003014:	65ee      	str	r6, [r5, #92]	; 0x5c
 8003016:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
 8003018:	9a06      	ldr	r2, [sp, #24]
 800301a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
 800301c:	9a07      	ldr	r2, [sp, #28]
 800301e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
 8003020:	9a08      	ldr	r2, [sp, #32]
 8003022:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
 8003024:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
 8003026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800302a:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
 800302c:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
 800302e:	662b      	str	r3, [r5, #96]	; 0x60
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003032:	bf00      	nop
 8003034:	08012311 	.word	0x08012311

08003038 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
 8003038:	4901      	ldr	r1, [pc, #4]	; (8003040 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 800303a:	2210      	movs	r2, #16
	str r2, [r1]
 800303c:	600a      	str	r2, [r1, #0]
	bx lr
 800303e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8003040:	e000ed10 	.word	0xe000ed10

08003044 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8003044:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8003046:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
 800304a:	bf30      	wfi

	bx lr
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
 8003050:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8003052:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
 8003056:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8003074 <__bus_fault+0x24>
	ldr ip, [ip]
 800305a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
 800305e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
 8003062:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
 8003064:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
 8003068:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
 800306c:	b500      	push	{lr}
	bl _Fault
 800306e:	f7ff ff25 	bl	8002ebc <_Fault>

	pop {pc}
 8003072:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
 8003078:	2804      	cmp	r0, #4
{
 800307a:	b538      	push	{r3, r4, r5, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	460d      	mov	r5, r1
	switch (reason) {
 8003080:	d013      	beq.n	80030aa <_NanoFatalErrorHandler+0x32>
 8003082:	2805      	cmp	r0, #5
 8003084:	d013      	beq.n	80030ae <_NanoFatalErrorHandler+0x36>
 8003086:	2803      	cmp	r0, #3
 8003088:	d113      	bne.n	80030b2 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
 800308a:	480c      	ldr	r0, [pc, #48]	; (80030bc <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
 800308c:	f7fd fe66 	bl	8000d5c <printk>
 8003090:	f00e ff1a 	bl	8011ec8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
 8003094:	69aa      	ldr	r2, [r5, #24]
 8003096:	4601      	mov	r1, r0
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <_NanoFatalErrorHandler+0x48>)
 800309a:	f7fd fe5f 	bl	8000d5c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
 800309e:	4629      	mov	r1, r5
 80030a0:	4620      	mov	r0, r4
}
 80030a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
 80030a6:	f000 b817 	b.w	80030d8 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <_NanoFatalErrorHandler+0x4c>)
 80030ac:	e7ee      	b.n	800308c <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <_NanoFatalErrorHandler+0x50>)
 80030b0:	e7ec      	b.n	800308c <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
 80030b2:	4601      	mov	r1, r0
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <_NanoFatalErrorHandler+0x54>)
 80030b6:	f7fd fe51 	bl	8000d5c <printk>
		break;
 80030ba:	e7e9      	b.n	8003090 <_NanoFatalErrorHandler+0x18>
 80030bc:	0801345a 	.word	0x0801345a
 80030c0:	080134d8 	.word	0x080134d8
 80030c4:	08013480 	.word	0x08013480
 80030c8:	0801349a 	.word	0x0801349a
 80030cc:	080134b5 	.word	0x080134b5

080030d0 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
 80030d0:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	f7ff bfd0 	b.w	8003078 <_NanoFatalErrorHandler>

080030d8 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 80030d8:	2805      	cmp	r0, #5
{
 80030da:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
 80030dc:	d00c      	beq.n	80030f8 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
 80030de:	f00f f8e9 	bl	80122b4 <k_is_in_isr>
 80030e2:	b160      	cbz	r0, 80030fe <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
 80030e4:	f00f f8e6 	bl	80122b4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <_SysFatalErrorHandler+0x44>)
 80030ea:	490d      	ldr	r1, [pc, #52]	; (8003120 <_SysFatalErrorHandler+0x48>)
 80030ec:	2800      	cmp	r0, #0
 80030ee:	bf08      	it	eq
 80030f0:	4619      	moveq	r1, r3
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <_SysFatalErrorHandler+0x4c>)
 80030f4:	f7fd fe32 	bl	8000d5c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
 80030f8:	f7ff ffa4 	bl	8003044 <k_cpu_idle>
 80030fc:	e7fc      	b.n	80030f8 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
 80030fe:	f00f f8e9 	bl	80122d4 <_is_thread_essential>
 8003102:	2800      	cmp	r0, #0
 8003104:	d1ee      	bne.n	80030e4 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
 8003106:	4c08      	ldr	r4, [pc, #32]	; (8003128 <_SysFatalErrorHandler+0x50>)
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <_SysFatalErrorHandler+0x54>)
 800310a:	68a1      	ldr	r1, [r4, #8]
 800310c:	f7fd fe26 	bl	8000d5c <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
 8003110:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
 8003112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003116:	f000 b80b 	b.w	8003130 <_impl_k_thread_abort>
 800311a:	bf00      	nop
 800311c:	08013518 	.word	0x08013518
 8003120:	08013514 	.word	0x08013514
 8003124:	08013529 	.word	0x08013529
 8003128:	20001340 	.word	0x20001340
 800312c:	08013549 	.word	0x08013549

08003130 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4605      	mov	r5, r0
	__asm__ volatile(
 8003134:	f04f 0310 	mov.w	r3, #16
 8003138:	f3ef 8411 	mrs	r4, BASEPRI
 800313c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
 8003140:	f00f f99e 	bl	8012480 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <_impl_k_thread_abort+0x44>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	429d      	cmp	r5, r3
 800314a:	d10d      	bne.n	8003168 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <_impl_k_thread_abort+0x48>)
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	b922      	cbnz	r2, 8003160 <_impl_k_thread_abort+0x30>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
 8003156:	f00e fee1 	bl	8011f1c <_update_time_slice_before_swap>
#endif

	return __swap(key);
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff fdc0 	bl	8002ce0 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003166:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
 8003168:	4620      	mov	r0, r4
}
 800316a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
 800316e:	f00e be15 	b.w	8011d9c <_reschedule_threads>
 8003172:	bf00      	nop
 8003174:	20001340 	.word	0x20001340
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
 800317c:	b500      	push	{lr}
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
 800317e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
 8003182:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003186:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
 800318a:	4904      	ldr	r1, [pc, #16]	; (800319c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800318c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800318e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
 8003190:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
 8003192:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
 8003196:	f7ff bd41 	b.w	8002c1c <_ExcExit>
 800319a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800319c:	08000194 	.word	0x08000194

080031a0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80031a0:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80031a2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80031a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80031ac:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80031ae:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
 80031b2:	2002      	movs	r0, #2
    msr CONTROL, r0
 80031b4:	f380 8814 	msr	CONTROL, r0

    b _PrepC
 80031b8:	f000 b806 	b.w	80031c8 <_PrepC>
    ldr r0, =_interrupt_stack
 80031bc:	20004668 	.word	0x20004668

080031c0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
 80031c0:	bf30      	wfi
    b _SysNmiOnReset
 80031c2:	f7ff bffd 	b.w	80031c0 <_SysNmiOnReset>
 80031c6:	bf00      	nop

080031c8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
 80031c8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <_PrepC+0x20>)
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <_PrepC+0x24>)
 80031ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031d2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031d8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
 80031dc:	f00e fb76 	bl	80118cc <_bss_zero>
	_data_copy();
 80031e0:	f00e fb7e 	bl	80118e0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
 80031e4:	f00e fb9c 	bl	8011920 <_Cstart>
 80031e8:	08000000 	.word	0x08000000
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
 80031f0:	b508      	push	{r3, lr}
	handler();
 80031f2:	f7ff ffe5 	bl	80031c0 <_SysNmiOnReset>
	_ExcExit();
}
 80031f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 80031fa:	f7ff bd0f 	b.w	8002c1c <_ExcExit>
	...

08003200 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
 8003200:	4b15      	ldr	r3, [pc, #84]	; (8003258 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
 8003202:	4916      	ldr	r1, [pc, #88]	; (800325c <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
 8003204:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
 8003206:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
 8003208:	680d      	ldr	r5, [r1, #0]
 800320a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800320e:	4295      	cmp	r5, r2
 8003210:	d80f      	bhi.n	8003232 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
 8003212:	2200      	movs	r2, #0
 8003214:	6848      	ldr	r0, [r1, #4]
 8003216:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 8003218:	4295      	cmp	r5, r2
 800321a:	f100 000c 	add.w	r0, r0, #12
 800321e:	d10a      	bne.n	8003236 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
 8003220:	2205      	movs	r2, #5
 8003222:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <arm_mpu_init+0x60>)
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800322a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800322e:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
 8003232:	2000      	movs	r0, #0
 8003234:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
 8003236:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800323a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
 800323e:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
 8003240:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
 8003244:	f041 0110 	orr.w	r1, r1, #16
 8003248:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
 800324a:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
 800324e:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
 8003250:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
 8003252:	611c      	str	r4, [r3, #16]
 8003254:	e7e0      	b.n	8003218 <arm_mpu_init+0x18>
 8003256:	bf00      	nop
 8003258:	e000ed90 	.word	0xe000ed90
 800325c:	200057c8 	.word	0x200057c8
 8003260:	20000030 	.word	0x20000030

08003264 <console_out>:
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8003264:	280a      	cmp	r0, #10
{
 8003266:	b538      	push	{r3, r4, r5, lr}
 8003268:	4604      	mov	r4, r0
 800326a:	4d07      	ldr	r5, [pc, #28]	; (8003288 <console_out+0x24>)
	if ('\n' == c) {
 800326c:	d104      	bne.n	8003278 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
 800326e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
 8003270:	6843      	ldr	r3, [r0, #4]
 8003272:	210d      	movs	r1, #13
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
 8003278:	6828      	ldr	r0, [r5, #0]
 800327a:	6843      	ldr	r3, [r0, #4]
 800327c:	b2e1      	uxtb	r1, r4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4798      	blx	r3

	return c;
}
 8003282:	4620      	mov	r0, r4
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	bf00      	nop
 8003288:	20000034 	.word	0x20000034

0800328c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <uart_console_hook_install+0x8>)
 800328e:	f7fd bc1f 	b.w	8000ad0 <__printk_hook_install>
 8003292:	bf00      	nop
 8003294:	08003265 	.word	0x08003265

08003298 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8003298:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 800329a:	4804      	ldr	r0, [pc, #16]	; (80032ac <uart_console_init+0x14>)
 800329c:	f00e faf8 	bl	8011890 <device_get_binding>
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <uart_console_init+0x18>)
 80032a2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 80032a4:	f7ff fff2 	bl	800328c <uart_console_hook_install>

	return 0;
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	bd08      	pop	{r3, pc}
 80032ac:	0801356e 	.word	0x0801356e
 80032b0:	20000034 	.word	0x20000034

080032b4 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 80032b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 80032b8:	6895      	ldr	r5, [r2, #8]
	return (exti->pr & (1 << line)) ? 1 : 0;
 80032ba:	4e0c      	ldr	r6, [pc, #48]	; (80032ec <__stm32_exti_isr+0x38>)
{
 80032bc:	4604      	mov	r4, r0
 80032be:	460f      	mov	r7, r1
	return (exti->pr & (1 << line)) ? 1 : 0;
 80032c0:	f04f 0801 	mov.w	r8, #1
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 80032c4:	42bc      	cmp	r4, r7
 80032c6:	db01      	blt.n	80032cc <__stm32_exti_isr+0x18>
			}

			data->cb[line].cb(line, data->cb[line].data);
		}
	}
}
 80032c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (exti->pr & (1 << line)) ? 1 : 0;
 80032cc:	6972      	ldr	r2, [r6, #20]
 80032ce:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80032d2:	421a      	tst	r2, r3
 80032d4:	d008      	beq.n	80032e8 <__stm32_exti_isr+0x34>
	exti->pr = 1 << line;
 80032d6:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 80032d8:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80032dc:	b123      	cbz	r3, 80032e8 <__stm32_exti_isr+0x34>
			data->cb[line].cb(line, data->cb[line].data);
 80032de:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 80032e2:	4620      	mov	r0, r4
 80032e4:	6851      	ldr	r1, [r2, #4]
 80032e6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80032e8:	3401      	adds	r4, #1
 80032ea:	e7eb      	b.n	80032c4 <__stm32_exti_isr+0x10>
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <__stm32_exti_isr_0>:
}

#else
static inline void __stm32_exti_isr_0(void *arg)
{
	__stm32_exti_isr(0, 1, arg);
 80032f0:	4602      	mov	r2, r0
 80032f2:	2101      	movs	r1, #1
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7ff bfdd 	b.w	80032b4 <__stm32_exti_isr>

080032fa <__stm32_exti_isr_1>:
}

static inline void __stm32_exti_isr_1(void *arg)
{
	__stm32_exti_isr(1, 2, arg);
 80032fa:	4602      	mov	r2, r0
 80032fc:	2102      	movs	r1, #2
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff bfd8 	b.w	80032b4 <__stm32_exti_isr>

08003304 <__stm32_exti_isr_2>:
}

static inline void __stm32_exti_isr_2(void *arg)
{
	__stm32_exti_isr(2, 3, arg);
 8003304:	4602      	mov	r2, r0
 8003306:	2103      	movs	r1, #3
 8003308:	2002      	movs	r0, #2
 800330a:	f7ff bfd3 	b.w	80032b4 <__stm32_exti_isr>

0800330e <__stm32_exti_isr_3>:
}

static inline void __stm32_exti_isr_3(void *arg)
{
	__stm32_exti_isr(3, 4, arg);
 800330e:	4602      	mov	r2, r0
 8003310:	2104      	movs	r1, #4
 8003312:	2003      	movs	r0, #3
 8003314:	f7ff bfce 	b.w	80032b4 <__stm32_exti_isr>

08003318 <__stm32_exti_isr_4>:
}

static inline void __stm32_exti_isr_4(void *arg)
{
	__stm32_exti_isr(4, 5, arg);
 8003318:	4602      	mov	r2, r0
 800331a:	2105      	movs	r1, #5
 800331c:	2004      	movs	r0, #4
 800331e:	f7ff bfc9 	b.w	80032b4 <__stm32_exti_isr>

08003322 <__stm32_exti_isr_9_5>:
}

static inline void __stm32_exti_isr_9_5(void *arg)
{
	__stm32_exti_isr(5, 10, arg);
 8003322:	4602      	mov	r2, r0
 8003324:	210a      	movs	r1, #10
 8003326:	2005      	movs	r0, #5
 8003328:	f7ff bfc4 	b.w	80032b4 <__stm32_exti_isr>

0800332c <__stm32_exti_isr_15_10>:
}

static inline void __stm32_exti_isr_15_10(void *arg)
{
	__stm32_exti_isr(10, 16, arg);
 800332c:	4602      	mov	r2, r0
 800332e:	2110      	movs	r1, #16
 8003330:	200a      	movs	r0, #10
 8003332:	f7ff bfbf 	b.w	80032b4 <__stm32_exti_isr>

08003336 <__stm32_exti_isr_16>:
}

#ifdef CONFIG_SOC_SERIES_STM32F4X
static inline void __stm32_exti_isr_16(void *arg)
{
	__stm32_exti_isr(16, 17, arg);
 8003336:	4602      	mov	r2, r0
 8003338:	2111      	movs	r1, #17
 800333a:	2010      	movs	r0, #16
 800333c:	f7ff bfba 	b.w	80032b4 <__stm32_exti_isr>

08003340 <__stm32_exti_isr_17>:
}

static inline void __stm32_exti_isr_17(void *arg)
{
	__stm32_exti_isr(17, 18, arg);
 8003340:	4602      	mov	r2, r0
 8003342:	2112      	movs	r1, #18
 8003344:	2011      	movs	r0, #17
 8003346:	f7ff bfb5 	b.w	80032b4 <__stm32_exti_isr>

0800334a <__stm32_exti_isr_18>:
}

static inline void __stm32_exti_isr_18(void *arg)
{
	__stm32_exti_isr(18, 19, arg);
 800334a:	4602      	mov	r2, r0
 800334c:	2113      	movs	r1, #19
 800334e:	2012      	movs	r0, #18
 8003350:	f7ff bfb0 	b.w	80032b4 <__stm32_exti_isr>

08003354 <__stm32_exti_isr_21>:
}

static inline void __stm32_exti_isr_21(void *arg)
{
	__stm32_exti_isr(21, 22, arg);
 8003354:	4602      	mov	r2, r0
 8003356:	2116      	movs	r1, #22
 8003358:	2015      	movs	r0, #21
 800335a:	f7ff bfab 	b.w	80032b4 <__stm32_exti_isr>

0800335e <__stm32_exti_isr_22>:
}

static inline void __stm32_exti_isr_22(void *arg)
{
	__stm32_exti_isr(22, 23, arg);
 800335e:	4602      	mov	r2, r0
 8003360:	2117      	movs	r1, #23
 8003362:	2016      	movs	r0, #22
 8003364:	f7ff bfa6 	b.w	80032b4 <__stm32_exti_isr>

08003368 <stm32_exti_init>:
	IRQ_CONNECT(STM32F3_IRQ_EXTI15_10,
		CONFIG_EXTI_STM32_EXTI15_10_IRQ_PRI,
		__stm32_exti_isr_15_10, DEVICE_GET(exti_stm32),
		0);
#elif CONFIG_SOC_SERIES_STM32F4X
	IRQ_CONNECT(STM32F4_IRQ_EXTI0,
 8003368:	2200      	movs	r2, #0
{
 800336a:	b508      	push	{r3, lr}
	IRQ_CONNECT(STM32F4_IRQ_EXTI0,
 800336c:	4611      	mov	r1, r2
 800336e:	2006      	movs	r0, #6
 8003370:	f7ff fe20 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI1,
 8003374:	2200      	movs	r2, #0
 8003376:	4611      	mov	r1, r2
 8003378:	2007      	movs	r0, #7
 800337a:	f7ff fe1b 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI1_IRQ_PRI,
		__stm32_exti_isr_1, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI2,
 800337e:	2200      	movs	r2, #0
 8003380:	4611      	mov	r1, r2
 8003382:	2008      	movs	r0, #8
 8003384:	f7ff fe16 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI3,
 8003388:	2200      	movs	r2, #0
 800338a:	4611      	mov	r1, r2
 800338c:	2009      	movs	r0, #9
 800338e:	f7ff fe11 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI4,
 8003392:	2200      	movs	r2, #0
 8003394:	4611      	mov	r1, r2
 8003396:	200a      	movs	r0, #10
 8003398:	f7ff fe0c 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI9_5,
 800339c:	2200      	movs	r2, #0
 800339e:	4611      	mov	r1, r2
 80033a0:	2017      	movs	r0, #23
 80033a2:	f7ff fe07 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI15_10,
 80033a6:	2200      	movs	r2, #0
 80033a8:	4611      	mov	r1, r2
 80033aa:	2028      	movs	r0, #40	; 0x28
 80033ac:	f7ff fe02 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI15_10_IRQ_PRI,
		__stm32_exti_isr_15_10, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI16,
 80033b0:	2200      	movs	r2, #0
 80033b2:	4611      	mov	r1, r2
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7ff fdfd 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI16_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI17,
 80033ba:	2200      	movs	r2, #0
 80033bc:	4611      	mov	r1, r2
 80033be:	2029      	movs	r0, #41	; 0x29
 80033c0:	f7ff fdf8 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI17_IRQ_PRI,
		__stm32_exti_isr_17, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI18,
 80033c4:	2200      	movs	r2, #0
 80033c6:	4611      	mov	r1, r2
 80033c8:	202a      	movs	r0, #42	; 0x2a
 80033ca:	f7ff fdf3 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI18_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI21,
 80033ce:	2200      	movs	r2, #0
 80033d0:	4611      	mov	r1, r2
 80033d2:	2002      	movs	r0, #2
 80033d4:	f7ff fdee 	bl	8002fb4 <_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI21_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(STM32F4_IRQ_EXTI22,
 80033d8:	2200      	movs	r2, #0
 80033da:	4611      	mov	r1, r2
 80033dc:	2003      	movs	r0, #3
 80033de:	f7ff fde9 	bl	8002fb4 <_irq_priority_set>
}
 80033e2:	2000      	movs	r0, #0
 80033e4:	bd08      	pop	{r3, pc}
	...

080033e8 <stm32_exti_enable>:
	exti->imr |= 1 << line;
 80033e8:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <stm32_exti_enable+0x3c>)
 80033ea:	2301      	movs	r3, #1
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	4083      	lsls	r3, r0
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]
	if (line >= 5 && line <= 9) {
 80033f4:	1f43      	subs	r3, r0, #5
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d90e      	bls.n	8003418 <stm32_exti_enable+0x30>
	} else if (line >= 10 && line <= 15) {
 80033fa:	f1a0 030a 	sub.w	r3, r0, #10
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d90c      	bls.n	800341c <stm32_exti_enable+0x34>
	} else if (line >= 0 && line <= 4) {
 8003402:	2804      	cmp	r0, #4
 8003404:	d802      	bhi.n	800340c <stm32_exti_enable+0x24>
		irqnum = STM32F4_IRQ_EXTI0 + line;
 8003406:	3006      	adds	r0, #6
	irq_enable(irqnum);
 8003408:	f7ff bdc6 	b.w	8002f98 <_arch_irq_enable>
 800340c:	3810      	subs	r0, #16
 800340e:	2806      	cmp	r0, #6
 8003410:	d806      	bhi.n	8003420 <stm32_exti_enable+0x38>
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <stm32_exti_enable+0x40>)
 8003414:	5618      	ldrsb	r0, [r3, r0]
 8003416:	e7f7      	b.n	8003408 <stm32_exti_enable+0x20>
		irqnum = STM32F4_IRQ_EXTI9_5;
 8003418:	2017      	movs	r0, #23
 800341a:	e7f5      	b.n	8003408 <stm32_exti_enable+0x20>
		irqnum = STM32F4_IRQ_EXTI15_10;
 800341c:	2028      	movs	r0, #40	; 0x28
 800341e:	e7f3      	b.n	8003408 <stm32_exti_enable+0x20>
	} else if (line >= 0 && line <= 4) {
 8003420:	2000      	movs	r0, #0
 8003422:	e7f1      	b.n	8003408 <stm32_exti_enable+0x20>
 8003424:	40013c00 	.word	0x40013c00
 8003428:	08013575 	.word	0x08013575

0800342c <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 800342c:	07ca      	lsls	r2, r1, #31
{
 800342e:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8003430:	d505      	bpl.n	800343e <stm32_exti_trigger+0x12>
		exti->rtsr |= 1 << line;
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <stm32_exti_trigger+0x28>)
 8003434:	2301      	movs	r3, #1
 8003436:	6894      	ldr	r4, [r2, #8]
 8003438:	4083      	lsls	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	6093      	str	r3, [r2, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 800343e:	078b      	lsls	r3, r1, #30
 8003440:	d506      	bpl.n	8003450 <stm32_exti_trigger+0x24>
		exti->ftsr |= 1 << line;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <stm32_exti_trigger+0x28>)
 8003444:	2301      	movs	r3, #1
 8003446:	68d1      	ldr	r1, [r2, #12]
 8003448:	fa03 f000 	lsl.w	r0, r3, r0
 800344c:	4308      	orrs	r0, r1
 800344e:	60d0      	str	r0, [r2, #12]
 8003450:	bd10      	pop	{r4, pc}
 8003452:	bf00      	nop
 8003454:	40013c00 	.word	0x40013c00

08003458 <stm32_exti_set_callback>:
{
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <stm32_exti_set_callback+0x14>)
 800345a:	b510      	push	{r4, lr}
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
	data->cb[line].cb = cb;
 8003462:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8003466:	6062      	str	r2, [r4, #4]
 8003468:	bd10      	pop	{r4, pc}
 800346a:	bf00      	nop
 800346c:	200063d8 	.word	0x200063d8

08003470 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003470:	680b      	ldr	r3, [r1, #0]
{
 8003472:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8003474:	2b03      	cmp	r3, #3
 8003476:	d80c      	bhi.n	8003492 <stm32_clock_control_on+0x22>
 8003478:	e8df f003 	tbb	[pc, r3]
 800347c:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <stm32_clock_control_on+0x64>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003482:	684b      	ldr	r3, [r1, #4]
 8003484:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003486:	4319      	orrs	r1, r3
 8003488:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800348a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800348c:	4013      	ands	r3, r2
 800348e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003490:	9b00      	ldr	r3, [sp, #0]
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 8003492:	2000      	movs	r0, #0
 8003494:	b004      	add	sp, #16
 8003496:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <stm32_clock_control_on+0x64>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800349e:	4319      	orrs	r1, r3
 80034a0:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a4:	4013      	ands	r3, r2
 80034a6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80034a8:	9b01      	ldr	r3, [sp, #4]
 80034aa:	e7f2      	b.n	8003492 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80034ac:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <stm32_clock_control_on+0x64>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80034ae:	684b      	ldr	r3, [r1, #4]
 80034b0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80034b2:	4319      	orrs	r1, r3
 80034b4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034b8:	4013      	ands	r3, r2
 80034ba:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80034bc:	9b02      	ldr	r3, [sp, #8]
 80034be:	e7e8      	b.n	8003492 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <stm32_clock_control_on+0x64>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80034c2:	684b      	ldr	r3, [r1, #4]
 80034c4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80034c6:	4319      	orrs	r1, r3
 80034c8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034cc:	4013      	ands	r3, r2
 80034ce:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	e7de      	b.n	8003492 <stm32_clock_control_on+0x22>
 80034d4:	40023800 	.word	0x40023800

080034d8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80034d8:	680b      	ldr	r3, [r1, #0]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d809      	bhi.n	80034f2 <stm32_clock_control_off+0x1a>
 80034de:	e8df f003 	tbb	[pc, r3]
 80034e2:	0a02      	.short	0x0a02
 80034e4:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80034e6:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <stm32_clock_control_off+0x48>)
 80034e8:	6849      	ldr	r1, [r1, #4]
 80034ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80034ec:	ea23 0301 	bic.w	r3, r3, r1
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 80034f2:	2000      	movs	r0, #0
 80034f4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <stm32_clock_control_off+0x48>)
 80034f8:	6849      	ldr	r1, [r1, #4]
 80034fa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80034fc:	ea23 0301 	bic.w	r3, r3, r1
 8003500:	6353      	str	r3, [r2, #52]	; 0x34
 8003502:	e7f6      	b.n	80034f2 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <stm32_clock_control_off+0x48>)
 8003506:	6849      	ldr	r1, [r1, #4]
 8003508:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800350a:	ea23 0301 	bic.w	r3, r3, r1
 800350e:	6413      	str	r3, [r2, #64]	; 0x40
 8003510:	e7ef      	b.n	80034f2 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <stm32_clock_control_off+0x48>)
 8003514:	6849      	ldr	r1, [r1, #4]
 8003516:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003518:	ea23 0301 	bic.w	r3, r3, r1
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	e7e8      	b.n	80034f2 <stm32_clock_control_off+0x1a>
 8003520:	40023800 	.word	0x40023800

08003524 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <stm32_clock_control_get_subsys_rate+0x1c>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8003526:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8003528:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 800352a:	2903      	cmp	r1, #3
 800352c:	d805      	bhi.n	800353a <stm32_clock_control_get_subsys_rate+0x16>
 800352e:	e8df f001 	tbb	[pc, r1]
 8003532:	0303      	.short	0x0303
 8003534:	0302      	.short	0x0302
	return clock / prescaler;
 8003536:	085b      	lsrs	r3, r3, #1
#endif /* CONFIG_SOC_SERIES_STM32L4X || CONFIG_SOC_SERIES_STM32F0X  */
		*rate = apb1_clock;
		break;
#ifndef CONFIG_SOC_SERIES_STM32F0X
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8003538:	6013      	str	r3, [r2, #0]
		break;
#endif /* CONFIG_SOC_SERIES_STM32F0X */
	}

	return 0;
}
 800353a:	2000      	movs	r0, #0
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200057c4 	.word	0x200057c4

08003544 <stm32_clock_control_init>:
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
	}
}

static int stm32_clock_control_init(struct device *dev)
{
 8003544:	b530      	push	{r4, r5, lr}
 8003546:	b087      	sub	sp, #28
	clk_init->AHBCLKDivider = ahb_prescaler(
 8003548:	2300      	movs	r3, #0
	clk_init->APB1CLKDivider = apb1_prescaler(
 800354a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	clk_init->AHBCLKDivider = ahb_prescaler(
 800354e:	9300      	str	r3, [sp, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(
 8003550:	9201      	str	r2, [sp, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8003552:	9302      	str	r3, [sp, #8]

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8003554:	f000 f84a 	bl	80035ec <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8003558:	a803      	add	r0, sp, #12
 800355a:	f000 f83f 	bl	80035dc <config_pll_init>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <stm32_clock_control_init+0x90>)
 8003560:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8003562:	0791      	lsls	r1, r2, #30
 8003564:	d52d      	bpl.n	80035c2 <stm32_clock_control_init+0x7e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003566:	4c1b      	ldr	r4, [pc, #108]	; (80035d4 <stm32_clock_control_init+0x90>)
 8003568:	68a3      	ldr	r3, [r4, #8]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003576:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003578:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800357a:	f015 050c 	ands.w	r5, r5, #12
 800357e:	d1fb      	bne.n	8003578 <stm32_clock_control_init+0x34>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6023      	str	r3, [r4, #0]
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_PLL_Disable();

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003588:	6863      	ldr	r3, [r4, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800358e:	fa92 f2a2 	rbit	r2, r2
 8003592:	2107      	movs	r1, #7
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80035a0:	4313      	orrs	r3, r2
 80035a2:	6063      	str	r3, [r4, #4]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(CONFIG_CLOCK_STM32_HSE_CLOCK, hse_bypass,
 80035a4:	aa03      	add	r2, sp, #12
 80035a6:	466b      	mov	r3, sp
 80035a8:	4629      	mov	r1, r5
 80035aa:	480b      	ldr	r0, [pc, #44]	; (80035d8 <stm32_clock_control_init+0x94>)
 80035ac:	f7ff fa22 	bl	80029f4 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6023      	str	r3, [r4, #0]
							&s_PLLInitStruct,
							&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 80035b8:	f000 f828 	bl	800360c <LL_RCC_MSI_Disable>
	LL_RCC_PLL_Disable();

#endif /* CONFIG_CLOCK_STM32_SYSCLK_SRC_... */

	return 0;
}
 80035bc:	4628      	mov	r0, r5
 80035be:	b007      	add	sp, #28
 80035c0:	bd30      	pop	{r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80035ca:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80035cc:	0792      	lsls	r2, r2, #30
 80035ce:	d5fc      	bpl.n	80035ca <stm32_clock_control_init+0x86>
 80035d0:	e7c9      	b.n	8003566 <stm32_clock_control_init+0x22>
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400

080035dc <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 80035dc:	2110      	movs	r1, #16
 80035de:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80035e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80035ea:	4770      	bx	lr

080035ec <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <config_enable_default_clocks+0x1c>)
 80035ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80035f8:	b082      	sub	sp, #8
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003600:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8003602:	b002      	add	sp, #8
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <LL_RCC_MSI_Disable>:

/**
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
 800360c:	4770      	bx	lr

0800360e <_flash_get_page_info>:

#include <flash.h>

static int _flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
 800360e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003612:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
 8003614:	6843      	ldr	r3, [r0, #4]
{
 8003616:	460c      	mov	r4, r1
 8003618:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
 800361a:	4669      	mov	r1, sp
 800361c:	aa01      	add	r2, sp, #4
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4798      	blx	r3
 8003622:	9901      	ldr	r1, [sp, #4]
 8003624:	9a00      	ldr	r2, [sp, #0]

	while (layout_size--) {
 8003626:	2700      	movs	r7, #0
 8003628:	3901      	subs	r1, #1
 800362a:	3208      	adds	r2, #8
	off_t end = 0;
 800362c:	4638      	mov	r0, r7
	off_t group_offs = 0;
 800362e:	46bc      	mov	ip, r7
	size_t page_count = 0;
 8003630:	46be      	mov	lr, r7
	while (layout_size--) {
 8003632:	1c4b      	adds	r3, r1, #1
 8003634:	f1a2 0908 	sub.w	r9, r2, #8
 8003638:	d102      	bne.n	8003640 <_flash_get_page_info+0x32>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
 800363a:	f06f 0015 	mvn.w	r0, #21
 800363e:	e01e      	b.n	800367e <_flash_get_page_info+0x70>
			end += layout->pages_count * layout->pages_size;
 8003640:	f852 3c08 	ldr.w	r3, [r2, #-8]
		if (use_addr) {
 8003644:	b1f6      	cbz	r6, 8003684 <_flash_get_page_info+0x76>
			end += layout->pages_count * layout->pages_size;
 8003646:	4698      	mov	r8, r3
 8003648:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800364c:	fb03 0008 	mla	r0, r3, r8, r0
		if (offs < end) {
 8003650:	42a0      	cmp	r0, r4
 8003652:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8003656:	f102 0208 	add.w	r2, r2, #8
 800365a:	dd18      	ble.n	800368e <_flash_get_page_info+0x80>
 800365c:	b10f      	cbz	r7, 8003662 <_flash_get_page_info+0x54>
 800365e:	f8cd 9000 	str.w	r9, [sp]
			info->size = layout->pages_size;
 8003662:	9b00      	ldr	r3, [sp, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	606b      	str	r3, [r5, #4]
			if (use_addr) {
 8003668:	b176      	cbz	r6, 8003688 <_flash_get_page_info+0x7a>
				num_in_group = (offs - group_offs) /
 800366a:	eba4 040c 	sub.w	r4, r4, ip
 800366e:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
 8003672:	fb03 c304 	mla	r3, r3, r4, ip
			info->index = page_count + num_in_group;
 8003676:	4474      	add	r4, lr
			info->start_offset = group_offs +
 8003678:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
 800367a:	60ac      	str	r4, [r5, #8]
			return 0;
 800367c:	2000      	movs	r0, #0
}
 800367e:	b003      	add	sp, #12
 8003680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			end += layout->pages_count;
 8003684:	4418      	add	r0, r3
 8003686:	e7e3      	b.n	8003650 <_flash_get_page_info+0x42>
				num_in_group = offs - page_count;
 8003688:	eba4 040e 	sub.w	r4, r4, lr
 800368c:	e7f1      	b.n	8003672 <_flash_get_page_info+0x64>
		group_offs += layout->pages_count * layout->pages_size;
 800368e:	f852 7c10 	ldr.w	r7, [r2, #-16]
 8003692:	f852 3c0c 	ldr.w	r3, [r2, #-12]
		page_count += layout->pages_count;
 8003696:	44be      	add	lr, r7
		group_offs += layout->pages_count * layout->pages_size;
 8003698:	fb03 cc07 	mla	ip, r3, r7, ip
 800369c:	2701      	movs	r7, #1
 800369e:	e7c8      	b.n	8003632 <_flash_get_page_info+0x24>

080036a0 <_impl_flash_get_page_info_by_offs>:

int _impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return _flash_get_page_info(dev, offs, true, info);
 80036a0:	4613      	mov	r3, r2
 80036a2:	2201      	movs	r2, #1
 80036a4:	f7ff bfb3 	b.w	800360e <_flash_get_page_info>

080036a8 <flash_stm32_read>:
}
#endif

static int flash_stm32_read(struct device *dev, off_t offset, void *data,
			    size_t len)
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	461c      	mov	r4, r3
 80036ac:	4615      	mov	r5, r2
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	4622      	mov	r2, r4
{
 80036b2:	460e      	mov	r6, r1
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 80036b4:	f000 f8c6 	bl	8003844 <flash_stm32_valid_range>
 80036b8:	b140      	cbz	r0, 80036cc <flash_stm32_read+0x24>
		return -EINVAL;
	}

	if (!len) {
 80036ba:	b12c      	cbz	r4, 80036c8 <flash_stm32_read+0x20>
		return 0;
	}

	memcpy(data, (void *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 80036bc:	4622      	mov	r2, r4
 80036be:	f106 6100 	add.w	r1, r6, #134217728	; 0x8000000
 80036c2:	4628      	mov	r0, r5
 80036c4:	f7fd f8dc 	bl	8000880 <memcpy>

	return 0;
 80036c8:	2000      	movs	r0, #0
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 80036cc:	f06f 0015 	mvn.w	r0, #21
 80036d0:	bd70      	pop	{r4, r5, r6, pc}

080036d2 <flash_stm32_write>:
	return rc;
}

static int flash_stm32_write(struct device *dev, off_t offset,
			     const void *data, size_t len)
{
 80036d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d4:	461c      	mov	r4, r3
 80036d6:	4617      	mov	r7, r2
	int rc;

	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 80036d8:	2301      	movs	r3, #1
 80036da:	4622      	mov	r2, r4
{
 80036dc:	4605      	mov	r5, r0
 80036de:	460e      	mov	r6, r1
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 80036e0:	f000 f8b0 	bl	8003844 <flash_stm32_valid_range>
 80036e4:	b198      	cbz	r0, 800370e <flash_stm32_write+0x3c>
		return -EINVAL;
	}

	if (!len) {
 80036e6:	b184      	cbz	r4, 800370a <flash_stm32_write+0x38>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 80036e8:	68a8      	ldr	r0, [r5, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80036ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ee:	3004      	adds	r0, #4
 80036f0:	f00e fcb2 	bl	8012058 <_impl_k_sem_take>
		return 0;
	}

	flash_stm32_sem_take(dev);

	rc = flash_stm32_write_range(dev, offset, data, len);
 80036f4:	4623      	mov	r3, r4
 80036f6:	463a      	mov	r2, r7
 80036f8:	4631      	mov	r1, r6
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f8f9 	bl	80038f2 <flash_stm32_write_range>
 8003700:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8003702:	68a8      	ldr	r0, [r5, #8]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8003704:	3004      	adds	r0, #4
 8003706:	f00e fc65 	bl	8011fd4 <_impl_k_sem_give>

	flash_stm32_sem_give(dev);

	return rc;
}
 800370a:	4620      	mov	r0, r4
 800370c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 800370e:	f06f 0415 	mvn.w	r4, #21
 8003712:	e7fa      	b.n	800370a <flash_stm32_write+0x38>

08003714 <flash_stm32_erase>:
{
 8003714:	b570      	push	{r4, r5, r6, lr}
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8003716:	2301      	movs	r3, #1
{
 8003718:	4605      	mov	r5, r0
 800371a:	460e      	mov	r6, r1
 800371c:	4614      	mov	r4, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800371e:	f000 f891 	bl	8003844 <flash_stm32_valid_range>
 8003722:	2800      	cmp	r0, #0
 8003724:	d03a      	beq.n	800379c <flash_stm32_erase+0x88>
	if (!len) {
 8003726:	2c00      	cmp	r4, #0
 8003728:	d036      	beq.n	8003798 <flash_stm32_erase+0x84>
	k_sem_take(&FLASH_STM32_PRIV(dev)->sem, K_FOREVER);
 800372a:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 800372c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003730:	3004      	adds	r0, #4
 8003732:	f00e fc91 	bl	8012058 <_impl_k_sem_take>
	rc = flash_stm32_block_erase_loop(dev, offset, len);
 8003736:	4622      	mov	r2, r4
 8003738:	4631      	mov	r1, r6
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f897 	bl	800386e <flash_stm32_block_erase_loop>
 8003740:	4604      	mov	r4, r0
 8003742:	68a8      	ldr	r0, [r5, #8]
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 8003744:	6803      	ldr	r3, [r0, #0]
	if (regs->acr.val & FLASH_ACR_ICEN) {
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	0591      	lsls	r1, r2, #22
 800374a:	d50f      	bpl.n	800376c <flash_stm32_erase+0x58>
		regs->acr.val &= ~FLASH_ACR_ICEN;
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_ICRST;
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375a:	601a      	str	r2, [r3, #0]
		regs->acr.val &= ~FLASH_ACR_ICRST;
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_ICEN;
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
	if (regs->acr.val & FLASH_ACR_DCEN) {
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	0552      	lsls	r2, r2, #21
 8003770:	d50f      	bpl.n	8003792 <flash_stm32_erase+0x7e>
		regs->acr.val &= ~FLASH_ACR_DCEN;
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_DCRST;
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003780:	601a      	str	r2, [r3, #0]
		regs->acr.val &= ~FLASH_ACR_DCRST;
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003788:	601a      	str	r2, [r3, #0]
		regs->acr.val |= FLASH_ACR_DCEN;
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003790:	601a      	str	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8003792:	3004      	adds	r0, #4
 8003794:	f00e fc1e 	bl	8011fd4 <_impl_k_sem_give>
}
 8003798:	4620      	mov	r0, r4
 800379a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 800379c:	f06f 0415 	mvn.w	r4, #21
 80037a0:	e7fa      	b.n	8003798 <flash_stm32_erase+0x84>

080037a2 <flash_stm32_wait_flash_idle>:
	if (FLASH_STM32_REGS(dev)->sr & error) {
 80037a2:	6883      	ldr	r3, [r0, #8]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68d3      	ldr	r3, [r2, #12]
 80037a8:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80037ac:	d105      	bne.n	80037ba <flash_stm32_wait_flash_idle+0x18>
 80037ae:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
	while ((FLASH_STM32_REGS(dev)->sr & FLASH_SR_BSY) && timeout) {
 80037b2:	68d1      	ldr	r1, [r2, #12]
 80037b4:	03c9      	lsls	r1, r1, #15
 80037b6:	d505      	bpl.n	80037c4 <flash_stm32_wait_flash_idle+0x22>
 80037b8:	b913      	cbnz	r3, 80037c0 <flash_stm32_wait_flash_idle+0x1e>
		return -EIO;
 80037ba:	f06f 0004 	mvn.w	r0, #4
}
 80037be:	4770      	bx	lr
		timeout--;
 80037c0:	3b01      	subs	r3, #1
 80037c2:	e7f6      	b.n	80037b2 <flash_stm32_wait_flash_idle+0x10>
	return 0;
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	f06f 0004 	mvneq.w	r0, #4
 80037cc:	2000      	movne	r0, #0
 80037ce:	4770      	bx	lr

080037d0 <flash_stm32_write_protection>:

static int flash_stm32_write_protection(struct device *dev, bool enable)
{
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4605      	mov	r5, r0
#if defined(CONFIG_SOC_SERIES_STM32F4X)
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80037d4:	6880      	ldr	r0, [r0, #8]
{
 80037d6:	460e      	mov	r6, r1
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80037d8:	f850 4b04 	ldr.w	r4, [r0], #4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80037dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037e0:	f00e fc3a 	bl	8012058 <_impl_k_sem_take>
#endif
	int rc = 0;

	flash_stm32_sem_take(dev);

	if (enable) {
 80037e4:	b1a6      	cbz	r6, 8003810 <flash_stm32_write_protection+0x40>
		rc = flash_stm32_wait_flash_idle(dev);
 80037e6:	4628      	mov	r0, r5
 80037e8:	f7ff ffdb 	bl	80037a2 <flash_stm32_wait_flash_idle>
		if (rc) {
 80037ec:	4606      	mov	r6, r0
 80037ee:	b128      	cbz	r0, 80037fc <flash_stm32_write_protection+0x2c>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80037f0:	68a8      	ldr	r0, [r5, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80037f2:	3004      	adds	r0, #4
 80037f4:	f00e fbee 	bl	8011fd4 <_impl_k_sem_give>
	}

	flash_stm32_sem_give(dev);

	return rc;
}
 80037f8:	4630      	mov	r0, r6
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
		regs->cr |= FLASH_CR_LOCK;
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003802:	6123      	str	r3, [r4, #16]
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8003804:	68a8      	ldr	r0, [r5, #8]
 8003806:	3004      	adds	r0, #4
 8003808:	f00e fbe4 	bl	8011fd4 <_impl_k_sem_give>
	return rc;
 800380c:	2600      	movs	r6, #0
 800380e:	e7f3      	b.n	80037f8 <flash_stm32_write_protection+0x28>
		if (regs->cr & FLASH_CR_LOCK) {
 8003810:	6923      	ldr	r3, [r4, #16]
 8003812:	2b00      	cmp	r3, #0
			regs->keyr = FLASH_KEY1;
 8003814:	bfbf      	itttt	lt
 8003816:	4b03      	ldrlt	r3, [pc, #12]	; (8003824 <flash_stm32_write_protection+0x54>)
 8003818:	6063      	strlt	r3, [r4, #4]
			regs->keyr = FLASH_KEY2;
 800381a:	f103 3388 	addlt.w	r3, r3, #2290649224	; 0x88888888
 800381e:	6063      	strlt	r3, [r4, #4]
 8003820:	e7f0      	b.n	8003804 <flash_stm32_write_protection+0x34>
 8003822:	bf00      	nop
 8003824:	45670123 	.word	0x45670123

08003828 <stm32_flash_init>:
	.write_block_size = 8,
#endif
};

static int stm32_flash_init(struct device *dev)
{
 8003828:	b510      	push	{r4, lr}
 800382a:	4604      	mov	r4, r0

	/* enable clock */
	clock_control_on(clk, (clock_control_subsys_t *)&p->pclken);
#endif

	k_sem_init(&p->sem, 1, 1);
 800382c:	6880      	ldr	r0, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 800382e:	2201      	movs	r2, #1
 8003830:	4611      	mov	r1, r2
 8003832:	3004      	adds	r0, #4
 8003834:	f00e fbc4 	bl	8011fc0 <_impl_k_sem_init>

	return flash_stm32_write_protection(dev, false);
 8003838:	4620      	mov	r0, r4
 800383a:	2100      	movs	r1, #0
}
 800383c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return flash_stm32_write_protection(dev, false);
 8003840:	f7ff bfc6 	b.w	80037d0 <flash_stm32_write_protection>

08003844 <flash_stm32_valid_range>:

#define STM32F4X_SECTOR_MASK		((u32_t) 0xFFFFFF07)

bool flash_stm32_valid_range(struct device *dev, off_t offset, u32_t len,
			     bool write)
{
 8003844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003846:	4614      	mov	r4, r2

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_ERASE, flash_erase, int, struct device *, dev, off_t, offset, size_t, size);

K_SYSCALL_DECLARE2(K_SYSCALL_FLASH_WRITE_PROTECTION_SET, flash_write_protection_set, int, struct device *, dev, bool, enable);

K_SYSCALL_DECLARE3(K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS, flash_get_page_info_by_offs, int, struct device *, dev, off_t, offset, struct flash_pages_info *, info);
 8003848:	aa01      	add	r2, sp, #4
 800384a:	4605      	mov	r5, r0
 800384c:	460e      	mov	r6, r1
 800384e:	f7ff ff27 	bl	80036a0 <_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    u32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8003852:	b950      	cbnz	r0, 800386a <flash_stm32_valid_range+0x26>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 8003854:	1e61      	subs	r1, r4, #1
 8003856:	aa01      	add	r2, sp, #4
 8003858:	4431      	add	r1, r6
 800385a:	4628      	mov	r0, r5
 800385c:	f7ff ff20 	bl	80036a0 <_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8003860:	fab0 f080 	clz	r0, r0
 8003864:	0940      	lsrs	r0, r0, #5
	ARG_UNUSED(write);

	return flash_stm32_range_exists(dev, offset, len);
}
 8003866:	b004      	add	sp, #16
 8003868:	bd70      	pop	{r4, r5, r6, pc}
 800386a:	2000      	movs	r0, #0
 800386c:	e7fb      	b.n	8003866 <flash_stm32_valid_range+0x22>

0800386e <flash_stm32_block_erase_loop>:
	return rc;
}

int flash_stm32_block_erase_loop(struct device *dev, unsigned int offset,
				 unsigned int len)
{
 800386e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003872:	4614      	mov	r4, r2
 8003874:	aa01      	add	r2, sp, #4
 8003876:	4606      	mov	r6, r0
 8003878:	460f      	mov	r7, r1
 800387a:	f7ff ff11 	bl	80036a0 <_impl_flash_get_page_info_by_offs>
	u32_t start_sector, end_sector;
	u32_t i;
	int rc = 0;

	rc = flash_get_page_info_by_offs(dev, offset, &info);
	if (rc) {
 800387e:	b960      	cbnz	r0, 800389a <flash_stm32_block_erase_loop+0x2c>
		return rc;
	}
	start_sector = info.index;
	rc = flash_get_page_info_by_offs(dev, offset + len - 1, &info);
 8003880:	1e61      	subs	r1, r4, #1
 8003882:	aa01      	add	r2, sp, #4
 8003884:	4439      	add	r1, r7
 8003886:	4630      	mov	r0, r6
	start_sector = info.index;
 8003888:	9d03      	ldr	r5, [sp, #12]
 800388a:	f7ff ff09 	bl	80036a0 <_impl_flash_get_page_info_by_offs>
	if (rc) {
 800388e:	b920      	cbnz	r0, 800389a <flash_stm32_block_erase_loop+0x2c>
		return rc;
	}
	end_sector = info.index;
 8003890:	9f03      	ldr	r7, [sp, #12]
 8003892:	ea4f 08c5 	mov.w	r8, r5, lsl #3

	for (i = start_sector; i <= end_sector; i++) {
 8003896:	42bd      	cmp	r5, r7
 8003898:	d902      	bls.n	80038a0 <flash_stm32_block_erase_loop+0x32>
			break;
		}
	}

	return rc;
}
 800389a:	b004      	add	sp, #16
 800389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 80038a0:	68b3      	ldr	r3, [r6, #8]
 80038a2:	681c      	ldr	r4, [r3, #0]
	if (regs->cr & FLASH_CR_LOCK) {
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db20      	blt.n	80038ec <flash_stm32_block_erase_loop+0x7e>
	rc = flash_stm32_wait_flash_idle(dev);
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ff79 	bl	80037a2 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 80038b0:	2800      	cmp	r0, #0
 80038b2:	dbf2      	blt.n	800389a <flash_stm32_block_erase_loop+0x2c>
	regs->cr &= STM32F4X_SECTOR_MASK;
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ba:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_SER | (sector << 3);
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	ea43 0308 	orr.w	r3, r3, r8
 80038c6:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_STRT;
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	6123      	str	r3, [r4, #16]
	rc = flash_stm32_wait_flash_idle(dev);
 80038d0:	4630      	mov	r0, r6
	tmp = regs->cr;
 80038d2:	6923      	ldr	r3, [r4, #16]
	rc = flash_stm32_wait_flash_idle(dev);
 80038d4:	f7ff ff65 	bl	80037a2 <flash_stm32_wait_flash_idle>
	regs->cr &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 80038d8:	6923      	ldr	r3, [r4, #16]
		if (rc < 0) {
 80038da:	2800      	cmp	r0, #0
	regs->cr &= ~(FLASH_CR_SER | FLASH_CR_SNB);
 80038dc:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	f108 0808 	add.w	r8, r8, #8
		if (rc < 0) {
 80038e6:	dbd8      	blt.n	800389a <flash_stm32_block_erase_loop+0x2c>
	for (i = start_sector; i <= end_sector; i++) {
 80038e8:	3501      	adds	r5, #1
 80038ea:	e7d4      	b.n	8003896 <flash_stm32_block_erase_loop+0x28>
		return -EIO;
 80038ec:	f06f 0004 	mvn.w	r0, #4
 80038f0:	e7d3      	b.n	800389a <flash_stm32_block_erase_loop+0x2c>

080038f2 <flash_stm32_write_range>:

int flash_stm32_write_range(struct device *dev, unsigned int offset,
			    const void *data, unsigned int len)
{
 80038f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038f6:	f101 6600 	add.w	r6, r1, #134217728	; 0x8000000
 80038fa:	4607      	mov	r7, r0
 80038fc:	3e01      	subs	r6, #1
 80038fe:	4615      	mov	r5, r2
 8003900:	eb02 0803 	add.w	r8, r2, r3
	int i, rc = 0;
 8003904:	2000      	movs	r0, #0

	for (i = 0; i < len; i++, offset++) {
 8003906:	45a8      	cmp	r8, r5
 8003908:	d101      	bne.n	800390e <flash_stm32_write_range+0x1c>
 800390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 800390e:	68bb      	ldr	r3, [r7, #8]
		rc = write_byte(dev, offset, ((const u8_t *) data)[i]);
 8003910:	f815 9b01 	ldrb.w	r9, [r5], #1
	struct stm32f4x_flash *regs = FLASH_STM32_REGS(dev);
 8003914:	681c      	ldr	r4, [r3, #0]
	if (regs->cr & FLASH_CR_LOCK) {
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db1c      	blt.n	8003956 <flash_stm32_write_range+0x64>
	rc = flash_stm32_wait_flash_idle(dev);
 800391c:	4638      	mov	r0, r7
 800391e:	f7ff ff40 	bl	80037a2 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8003922:	2800      	cmp	r0, #0
 8003924:	db15      	blt.n	8003952 <flash_stm32_write_range+0x60>
	regs->cr &= ~CR_PSIZE_MASK;
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_PSIZE_BYTE;
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	6123      	str	r3, [r4, #16]
	regs->cr |= FLASH_CR_PG;
 8003932:	6923      	ldr	r3, [r4, #16]
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6123      	str	r3, [r4, #16]
	tmp = regs->cr;
 800393a:	6923      	ldr	r3, [r4, #16]
	*((u8_t *) offset + CONFIG_FLASH_BASE_ADDRESS) = val;
 800393c:	f806 9f01 	strb.w	r9, [r6, #1]!
	rc = flash_stm32_wait_flash_idle(dev);
 8003940:	4638      	mov	r0, r7
 8003942:	f7ff ff2e 	bl	80037a2 <flash_stm32_wait_flash_idle>
	regs->cr &= (~FLASH_CR_PG);
 8003946:	6923      	ldr	r3, [r4, #16]
		if (rc < 0) {
 8003948:	2800      	cmp	r0, #0
	regs->cr &= (~FLASH_CR_PG);
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6123      	str	r3, [r4, #16]
		if (rc < 0) {
 8003950:	dad9      	bge.n	8003906 <flash_stm32_write_range+0x14>
			return rc;
		}
	}

	return rc;
}
 8003952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
 8003956:	f06f 0004 	mvn.w	r0, #4
 800395a:	e7fa      	b.n	8003952 <flash_stm32_write_range+0x60>

0800395c <flash_stm32_page_layout>:
			     const struct flash_pages_layout **layout,
			     size_t *layout_size)
{
	ARG_UNUSED(dev);

	*layout = stm32f4_flash_layout;
 800395c:	4b02      	ldr	r3, [pc, #8]	; (8003968 <flash_stm32_page_layout+0xc>)
 800395e:	600b      	str	r3, [r1, #0]
	*layout_size = ARRAY_SIZE(stm32f4_flash_layout);
 8003960:	2303      	movs	r3, #3
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	080135ac 	.word	0x080135ac

0800396c <gpio_stm32_isr>:
 * @brief EXTI interrupt callback
 */
static void gpio_stm32_isr(int line, void *arg)
{
	struct device *dev = arg;
	struct gpio_stm32_data *data = dev->driver_data;
 800396c:	688a      	ldr	r2, [r1, #8]

	if (BIT(line) & data->cb_pins) {
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	40c3      	lsrs	r3, r0
 8003972:	07db      	lsls	r3, r3, #31
{
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	460e      	mov	r6, r1
	if (BIT(line) & data->cb_pins) {
 8003978:	d50d      	bpl.n	8003996 <gpio_stm32_isr+0x2a>
		_gpio_fire_callbacks(&data->cb, dev, BIT(line));
 800397a:	2501      	movs	r5, #1
 800397c:	6854      	ldr	r4, [r2, #4]
 800397e:	4085      	lsls	r5, r0
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
 8003980:	b14c      	cbz	r4, 8003996 <gpio_stm32_isr+0x2a>
		if (cb->pin_mask & pins) {
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	421d      	tst	r5, r3
 8003986:	d004      	beq.n	8003992 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	462a      	mov	r2, r5
 800398c:	4621      	mov	r1, r4
 800398e:	4630      	mov	r0, r6
 8003990:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
 8003992:	6824      	ldr	r4, [r4, #0]
 8003994:	e7f4      	b.n	8003980 <gpio_stm32_isr+0x14>
 8003996:	bd70      	pop	{r4, r5, r6, pc}

08003998 <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8003998:	b510      	push	{r4, lr}
	struct gpio_stm32_data *data = dev->driver_data;
 800399a:	6883      	ldr	r3, [r0, #8]
	if (set) {
 800399c:	b13a      	cbz	r2, 80039ae <gpio_stm32_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
 80039a2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
 80039a4:	6059      	str	r1, [r3, #4]
	if (!list->tail) {
 80039a6:	b902      	cbnz	r2, 80039aa <gpio_stm32_manage_callback+0x12>
		list->tail = list->head;
 80039a8:	6099      	str	r1, [r3, #8]

	_gpio_manage_callback(&data->cb, callback, set);

	return 0;
}
 80039aa:	2000      	movs	r0, #0
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	6858      	ldr	r0, [r3, #4]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d0fa      	beq.n	80039aa <gpio_stm32_manage_callback+0x12>
		if (test == node) {
 80039b4:	4281      	cmp	r1, r0
 80039b6:	d10e      	bne.n	80039d6 <gpio_stm32_manage_callback+0x3e>
 80039b8:	689c      	ldr	r4, [r3, #8]
 80039ba:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
 80039bc:	b932      	cbnz	r2, 80039cc <gpio_stm32_manage_callback+0x34>
		if (list->tail == node) {
 80039be:	42a1      	cmp	r1, r4
		list->head = node->next;
 80039c0:	6058      	str	r0, [r3, #4]
		if (list->tail == node) {
 80039c2:	d100      	bne.n	80039c6 <gpio_stm32_manage_callback+0x2e>
			list->tail = list->head;
 80039c4:	6098      	str	r0, [r3, #8]
	node->next = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	e7ee      	b.n	80039aa <gpio_stm32_manage_callback+0x12>
		if (list->tail == node) {
 80039cc:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
 80039ce:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
 80039d0:	bf08      	it	eq
 80039d2:	609a      	streq	r2, [r3, #8]
 80039d4:	e7f7      	b.n	80039c6 <gpio_stm32_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 80039d6:	4602      	mov	r2, r0
 80039d8:	6800      	ldr	r0, [r0, #0]
 80039da:	e7e9      	b.n	80039b0 <gpio_stm32_manage_callback+0x18>

080039dc <gpio_stm32_enable_callback>:

static int gpio_stm32_enable_callback(struct device *dev,
				      int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80039dc:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 80039de:	b939      	cbnz	r1, 80039f0 <gpio_stm32_enable_callback+0x14>
		return -ENOTSUP;
	}

	data->cb_pins |= BIT(pin);
 80039e0:	2301      	movs	r3, #1
 80039e2:	fa03 f202 	lsl.w	r2, r3, r2
 80039e6:	6803      	ldr	r3, [r0, #0]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	6003      	str	r3, [r0, #0]

	return 0;
}
 80039ec:	4608      	mov	r0, r1
 80039ee:	4770      	bx	lr
		return -ENOTSUP;
 80039f0:	f06f 0122 	mvn.w	r1, #34	; 0x22
 80039f4:	e7fa      	b.n	80039ec <gpio_stm32_enable_callback+0x10>

080039f6 <gpio_stm32_disable_callback>:

static int gpio_stm32_disable_callback(struct device *dev,
				       int access_op, u32_t pin)
{
	struct gpio_stm32_data *data = dev->driver_data;
 80039f6:	6880      	ldr	r0, [r0, #8]

	if (access_op != GPIO_ACCESS_BY_PIN) {
 80039f8:	b941      	cbnz	r1, 8003a0c <gpio_stm32_disable_callback+0x16>
		return -ENOTSUP;
	}

	data->cb_pins &= ~BIT(pin);
 80039fa:	2301      	movs	r3, #1
 80039fc:	fa03 f202 	lsl.w	r2, r3, r2
 8003a00:	6803      	ldr	r3, [r0, #0]
 8003a02:	ea23 0302 	bic.w	r3, r3, r2
 8003a06:	6003      	str	r3, [r0, #0]

	return 0;
}
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4770      	bx	lr
		return -ENOTSUP;
 8003a0c:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8003a10:	e7fa      	b.n	8003a08 <gpio_stm32_disable_callback+0x12>
	...

08003a14 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003a14:	6803      	ldr	r3, [r0, #0]

	/* enable clock for subsystem */
	struct device *clk =
 8003a16:	4806      	ldr	r0, [pc, #24]	; (8003a30 <gpio_stm32_init+0x1c>)
{
 8003a18:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8003a1a:	689c      	ldr	r4, [r3, #8]
	struct device *clk =
 8003a1c:	f00d ff38 	bl	8011890 <device_get_binding>
 8003a20:	6843      	ldr	r3, [r0, #4]
 8003a22:	f104 0108 	add.w	r1, r4, #8
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4798      	blx	r3
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	clock_control_on(clk, (clock_control_subsys_t *) &cfg->pclken);

	return 0;
}
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	bf00      	nop
 8003a30:	0801314c 	.word	0x0801314c

08003a34 <gpio_stm32_read>:
{
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003a38:	6803      	ldr	r3, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a3a:	460c      	mov	r4, r1
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003a3c:	689b      	ldr	r3, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a3e:	b931      	cbnz	r1, 8003a4e <gpio_stm32_read+0x1a>
	*value = stm32_gpio_get(cfg->base, pin);
 8003a40:	4611      	mov	r1, r2
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	f7ff f8a1 	bl	8002b8a <stm32_gpio_get>
 8003a48:	6028      	str	r0, [r5, #0]
}
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
 8003a4e:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8003a52:	e7fa      	b.n	8003a4a <gpio_stm32_read+0x16>

08003a54 <gpio_stm32_write>:
{
 8003a54:	b410      	push	{r4}
 8003a56:	4614      	mov	r4, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	6890      	ldr	r0, [r2, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a5c:	b929      	cbnz	r1, 8003a6a <gpio_stm32_write+0x16>
	return stm32_gpio_set(cfg->base, pin, value);
 8003a5e:	4621      	mov	r1, r4
 8003a60:	461a      	mov	r2, r3
 8003a62:	6800      	ldr	r0, [r0, #0]
}
 8003a64:	bc10      	pop	{r4}
	return stm32_gpio_set(cfg->base, pin, value);
 8003a66:	f7ff b886 	b.w	8002b76 <stm32_gpio_set>
}
 8003a6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8003a6e:	bc10      	pop	{r4}
 8003a70:	4770      	bx	lr
	...

08003a74 <gpio_stm32_config>:
{
 8003a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a76:	461c      	mov	r4, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003a78:	6803      	ldr	r3, [r0, #0]
{
 8003a7a:	4607      	mov	r7, r0
 8003a7c:	4615      	mov	r5, r2
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8003a7e:	689e      	ldr	r6, [r3, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8003a80:	bb59      	cbnz	r1, 8003ada <gpio_stm32_config+0x66>
	map_res = stm32_gpio_flags_to_conf(flags, &pincfg);
 8003a82:	a901      	add	r1, sp, #4
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7ff f813 	bl	8002ab0 <stm32_gpio_flags_to_conf>
	if (map_res) {
 8003a8a:	bb10      	cbnz	r0, 8003ad2 <gpio_stm32_config+0x5e>
	if (stm32_gpio_configure(cfg->base, pin, pincfg, 0)) {
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	9a01      	ldr	r2, [sp, #4]
 8003a90:	6830      	ldr	r0, [r6, #0]
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7ff f829 	bl	8002aea <stm32_gpio_configure>
 8003a98:	bb10      	cbnz	r0, 8003ae0 <gpio_stm32_config+0x6c>
	if (flags & GPIO_INT) {
 8003a9a:	f014 0002 	ands.w	r0, r4, #2
 8003a9e:	d018      	beq.n	8003ad2 <gpio_stm32_config+0x5e>
		stm32_exti_set_callback(pin, gpio_stm32_isr, dev);
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <gpio_stm32_config+0x74>)
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f7ff fcd7 	bl	8003458 <stm32_exti_set_callback>
		stm32_gpio_enable_int(cfg->port, pin);
 8003aaa:	4629      	mov	r1, r5
 8003aac:	6870      	ldr	r0, [r6, #4]
 8003aae:	f7ff f871 	bl	8002b94 <stm32_gpio_enable_int>
		if (flags & GPIO_INT_EDGE) {
 8003ab2:	06a2      	lsls	r2, r4, #26
 8003ab4:	d509      	bpl.n	8003aca <gpio_stm32_config+0x56>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
 8003ab6:	0663      	lsls	r3, r4, #25
 8003ab8:	d40d      	bmi.n	8003ad6 <gpio_stm32_config+0x62>
				edge = STM32_EXTI_TRIG_FALLING;
 8003aba:	f014 0f04 	tst.w	r4, #4
 8003abe:	bf14      	ite	ne
 8003ac0:	2101      	movne	r1, #1
 8003ac2:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f7ff fcb1 	bl	800342c <stm32_exti_trigger>
		stm32_exti_enable(pin);
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff fc8c 	bl	80033e8 <stm32_exti_enable>
	return 0;
 8003ad0:	2000      	movs	r0, #0
}
 8003ad2:	b003      	add	sp, #12
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				edge = STM32_EXTI_TRIG_RISING |
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	e7f4      	b.n	8003ac4 <gpio_stm32_config+0x50>
		return -ENOTSUP;
 8003ada:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8003ade:	e7f8      	b.n	8003ad2 <gpio_stm32_config+0x5e>
		return -EIO;
 8003ae0:	f06f 0004 	mvn.w	r0, #4
 8003ae4:	e7f5      	b.n	8003ad2 <gpio_stm32_config+0x5e>
 8003ae6:	bf00      	nop
 8003ae8:	0800396d 	.word	0x0800396d

08003aec <stm32_i2c_msg_write>:
#else

s32_t stm32_i2c_msg_write(struct device *dev, struct i2c_msg *msg,
			  u8_t *next_msg_flags, u16_t saddr)
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003aec:	6802      	ldr	r2, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	6892      	ldr	r2, [r2, #8]
{
 8003af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003af4:	6815      	ldr	r5, [r2, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003af6:	6886      	ldr	r6, [r0, #8]
 8003af8:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
	u32_t len = msg->len;
	u8_t *buf = msg->buf;
 8003afc:	e891 0011 	ldmia.w	r1, {r0, r4}
 8003b00:	6015      	str	r5, [r2, #0]

	ARG_UNUSED(next_msg_flags);

	LL_I2C_AcknowledgeNextData(i2c, LL_I2C_ACK);

	if (msg->flags & I2C_MSG_RESTART) {
 8003b02:	7a0d      	ldrb	r5, [r1, #8]
 8003b04:	076d      	lsls	r5, r5, #29
 8003b06:	d526      	bpl.n	8003b56 <stm32_i2c_msg_write+0x6a>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003b08:	6815      	ldr	r5, [r2, #0]
 8003b0a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003b0e:	6015      	str	r5, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003b10:	6955      	ldr	r5, [r2, #20]
		LL_I2C_GenerateStartCondition(i2c);
		while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003b12:	07ed      	lsls	r5, r5, #31
 8003b14:	d5fc      	bpl.n	8003b10 <stm32_i2c_msg_write+0x24>
			;
		}

		if (I2C_ADDR_10_BITS & data->dev_config) {
 8003b16:	6835      	ldr	r5, [r6, #0]
 8003b18:	f015 0f01 	tst.w	r5, #1
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003b1c:	6915      	ldr	r5, [r2, #16]
 8003b1e:	d02a      	beq.n	8003b76 <stm32_i2c_msg_write+0x8a>
			u8_t slave = (((saddr & 0x0300) >> 7) & 0xFF);
 8003b20:	11db      	asrs	r3, r3, #7
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003b2a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003b2e:	432b      	orrs	r3, r5
 8003b30:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 8003b32:	6953      	ldr	r3, [r2, #20]
			u8_t header = slave | HEADER;

			LL_I2C_TransmitData8(i2c, header);
			while (!LL_I2C_IsActiveFlag_ADD10(i2c)) {
 8003b34:	071d      	lsls	r5, r3, #28
 8003b36:	d5fc      	bpl.n	8003b32 <stm32_i2c_msg_write+0x46>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003b38:	6913      	ldr	r3, [r2, #16]
 8003b3a:	7935      	ldrb	r5, [r6, #4]
 8003b3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b40:	432b      	orrs	r3, r5
 8003b42:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003b44:	6953      	ldr	r3, [r2, #20]
		} else {
			u8_t slave = (saddr << 1) & 0xFF;

			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_WRITE);
		}
		while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003b46:	079b      	lsls	r3, r3, #30
 8003b48:	d5fc      	bpl.n	8003b44 <stm32_i2c_msg_write+0x58>
  tmpreg = I2Cx->SR1;
 8003b4a:	6953      	ldr	r3, [r2, #20]
 8003b4c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003b4e:	9b01      	ldr	r3, [sp, #4]
  tmpreg = I2Cx->SR2;
 8003b50:	6993      	ldr	r3, [r2, #24]
 8003b52:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	4404      	add	r4, r0
			;
		}
		LL_I2C_ClearFlag_ADDR(i2c);
	}

	while (len) {
 8003b58:	42a0      	cmp	r0, r4
 8003b5a:	d111      	bne.n	8003b80 <stm32_i2c_msg_write+0x94>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8003b5c:	6953      	ldr	r3, [r2, #20]
		LL_I2C_TransmitData8(i2c, *buf);
		buf++;
		len--;
	}

	while (!LL_I2C_IsActiveFlag_BTF(i2c)) {
 8003b5e:	075b      	lsls	r3, r3, #29
 8003b60:	d5fc      	bpl.n	8003b5c <stm32_i2c_msg_write+0x70>
		;
	}

	if (msg->flags & I2C_MSG_STOP) {
 8003b62:	7a08      	ldrb	r0, [r1, #8]
 8003b64:	f010 0002 	ands.w	r0, r0, #2
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003b68:	bf1f      	itttt	ne
 8003b6a:	6813      	ldrne	r3, [r2, #0]
 8003b6c:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 8003b70:	6013      	strne	r3, [r2, #0]
		LL_I2C_GenerateStopCondition(i2c);
	}

	return 0;
 8003b72:	2000      	movne	r0, #0
 8003b74:	e010      	b.n	8003b98 <stm32_i2c_msg_write+0xac>
			u8_t slave = (saddr << 1) & 0xFF;
 8003b76:	005b      	lsls	r3, r3, #1
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003b7e:	e7df      	b.n	8003b40 <stm32_i2c_msg_write+0x54>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8003b80:	6953      	ldr	r3, [r2, #20]
			if (LL_I2C_IsActiveFlag_TXE(i2c)) {
 8003b82:	061e      	lsls	r6, r3, #24
 8003b84:	d40a      	bmi.n	8003b9c <stm32_i2c_msg_write+0xb0>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8003b86:	6953      	ldr	r3, [r2, #20]
			if (LL_I2C_IsActiveFlag_AF(i2c)) {
 8003b88:	055d      	lsls	r5, r3, #21
 8003b8a:	d5f9      	bpl.n	8003b80 <stm32_i2c_msg_write+0x94>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8003b8c:	6953      	ldr	r3, [r2, #20]
 8003b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b92:	6153      	str	r3, [r2, #20]
				return -EIO;
 8003b94:	f06f 0004 	mvn.w	r0, #4
}
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003b9c:	6913      	ldr	r3, [r2, #16]
 8003b9e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8003ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ba6:	432b      	orrs	r3, r5
 8003ba8:	6113      	str	r3, [r2, #16]
 8003baa:	e7d5      	b.n	8003b58 <stm32_i2c_msg_write+0x6c>

08003bac <stm32_i2c_msg_read>:

s32_t stm32_i2c_msg_read(struct device *dev, struct i2c_msg *msg,
			 u8_t *next_msg_flags, u16_t saddr)
{
 8003bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003bae:	6802      	ldr	r2, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003bb0:	6886      	ldr	r6, [r0, #8]
	I2C_TypeDef *i2c = cfg->i2c;
 8003bb2:	6892      	ldr	r2, [r2, #8]
	u32_t len = msg->len;
 8003bb4:	6848      	ldr	r0, [r1, #4]
	I2C_TypeDef *i2c = cfg->i2c;
 8003bb6:	6892      	ldr	r2, [r2, #8]
	u8_t *buf = msg->buf;
 8003bb8:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003bba:	6814      	ldr	r4, [r2, #0]
 8003bbc:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003bc0:	6014      	str	r4, [r2, #0]

	ARG_UNUSED(next_msg_flags);

	LL_I2C_AcknowledgeNextData(i2c, LL_I2C_ACK);

	if (msg->flags & I2C_MSG_RESTART) {
 8003bc2:	7a0c      	ldrb	r4, [r1, #8]
 8003bc4:	0764      	lsls	r4, r4, #29
 8003bc6:	d543      	bpl.n	8003c50 <stm32_i2c_msg_read+0xa4>
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003bc8:	6814      	ldr	r4, [r2, #0]
 8003bca:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003bce:	6014      	str	r4, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003bd0:	6954      	ldr	r4, [r2, #20]
		LL_I2C_GenerateStartCondition(i2c);
		while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003bd2:	07e7      	lsls	r7, r4, #31
 8003bd4:	d5fc      	bpl.n	8003bd0 <stm32_i2c_msg_read+0x24>
			;
		}

		if (I2C_ADDR_10_BITS & data->dev_config) {
 8003bd6:	6834      	ldr	r4, [r6, #0]
 8003bd8:	07e4      	lsls	r4, r4, #31
 8003bda:	d551      	bpl.n	8003c80 <stm32_i2c_msg_read+0xd4>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003bdc:	6917      	ldr	r7, [r2, #16]
			u8_t slave = (((saddr &	0x0300) >> 7) & 0xFF);
 8003bde:	11dc      	asrs	r4, r3, #7
 8003be0:	f004 0406 	and.w	r4, r4, #6
 8003be4:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
 8003be8:	f044 0ef0 	orr.w	lr, r4, #240	; 0xf0
 8003bec:	ea47 070e 	orr.w	r7, r7, lr
 8003bf0:	6117      	str	r7, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADD10) == (I2C_SR1_ADD10));
 8003bf2:	6957      	ldr	r7, [r2, #20]
			u8_t header = slave | HEADER;

			LL_I2C_TransmitData8(i2c, header);
			while (!LL_I2C_IsActiveFlag_ADD10(i2c)) {
 8003bf4:	073f      	lsls	r7, r7, #28
 8003bf6:	d5fc      	bpl.n	8003bf2 <stm32_i2c_msg_read+0x46>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003bf8:	6917      	ldr	r7, [r2, #16]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
 8003c00:	433b      	orrs	r3, r7
 8003c02:	6113      	str	r3, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003c04:	6953      	ldr	r3, [r2, #20]
				;
			}
			slave = saddr & 0xFF;
			LL_I2C_TransmitData8(i2c, slave);
			while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003c06:	079b      	lsls	r3, r3, #30
 8003c08:	d5fc      	bpl.n	8003c04 <stm32_i2c_msg_read+0x58>
  tmpreg = I2Cx->SR1;
 8003c0a:	6953      	ldr	r3, [r2, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8003c0e:	9b00      	ldr	r3, [sp, #0]
  tmpreg = I2Cx->SR2;
 8003c10:	6993      	ldr	r3, [r2, #24]
 8003c12:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8003c14:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8003c1e:	6953      	ldr	r3, [r2, #20]
				;
			}
			LL_I2C_ClearFlag_ADDR(i2c);
			LL_I2C_GenerateStartCondition(i2c);
			while (!LL_I2C_IsActiveFlag_SB(i2c)) {
 8003c20:	07df      	lsls	r7, r3, #31
 8003c22:	d5fc      	bpl.n	8003c1e <stm32_i2c_msg_read+0x72>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c24:	6913      	ldr	r3, [r2, #16]
 8003c26:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8003c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2e:	431c      	orrs	r4, r3
 8003c30:	6114      	str	r4, [r2, #16]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8003c32:	6953      	ldr	r3, [r2, #20]
			u8_t slave = ((saddr) << 1) & 0xFF;

			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
		}

		while (!LL_I2C_IsActiveFlag_ADDR(i2c)) {
 8003c34:	079b      	lsls	r3, r3, #30
 8003c36:	d5fc      	bpl.n	8003c32 <stm32_i2c_msg_read+0x86>
			;
		}

		if (len == 1) {
 8003c38:	2801      	cmp	r0, #1
 8003c3a:	d12b      	bne.n	8003c94 <stm32_i2c_msg_read+0xe8>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8003c42:	6013      	str	r3, [r2, #0]
  tmpreg = I2Cx->SR1;
 8003c44:	6953      	ldr	r3, [r2, #20]
 8003c46:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003c48:	9b01      	ldr	r3, [sp, #4]
  tmpreg = I2Cx->SR2;
 8003c4a:	6993      	ldr	r3, [r2, #24]
 8003c4c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003c4e:	9b01      	ldr	r3, [sp, #4]
		}

		LL_I2C_ClearFlag_ADDR(i2c);
	}

	while (len) {
 8003c50:	b198      	cbz	r0, 8003c7a <stm32_i2c_msg_read+0xce>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8003c52:	6953      	ldr	r3, [r2, #20]
		while (!LL_I2C_IsActiveFlag_RXNE(i2c)) {
 8003c54:	065f      	lsls	r7, r3, #25
 8003c56:	d5fc      	bpl.n	8003c52 <stm32_i2c_msg_read+0xa6>
			;
		}
		switch (len) {
 8003c58:	2802      	cmp	r0, #2
 8003c5a:	d025      	beq.n	8003ca8 <stm32_i2c_msg_read+0xfc>
 8003c5c:	2803      	cmp	r0, #3
 8003c5e:	f105 0401 	add.w	r4, r5, #1
 8003c62:	d032      	beq.n	8003cca <stm32_i2c_msg_read+0x11e>
 8003c64:	2801      	cmp	r0, #1
 8003c66:	d134      	bne.n	8003cd2 <stm32_i2c_msg_read+0x126>
		case 1:
			if (msg->flags & I2C_MSG_STOP) {
 8003c68:	7a0b      	ldrb	r3, [r1, #8]
 8003c6a:	079c      	lsls	r4, r3, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003c6c:	bf42      	ittt	mi
 8003c6e:	6813      	ldrmi	r3, [r2, #0]
 8003c70:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8003c74:	6013      	strmi	r3, [r2, #0]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003c76:	6913      	ldr	r3, [r2, #16]
 8003c78:	702b      	strb	r3, [r5, #0]
			buf++;
		}
	}

	return 0;
}
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	b003      	add	sp, #12
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8003c80:	6914      	ldr	r4, [r2, #16]
			u8_t slave = ((saddr) << 1) & 0xFF;
 8003c82:	005b      	lsls	r3, r3, #1
			LL_I2C_TransmitData8(i2c, slave | I2C_REQUEST_READ);
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 8003c8e:	4323      	orrs	r3, r4
 8003c90:	6113      	str	r3, [r2, #16]
 8003c92:	e7ce      	b.n	8003c32 <stm32_i2c_msg_read+0x86>
		} else if (len == 2) {
 8003c94:	2802      	cmp	r0, #2
 8003c96:	d1d5      	bne.n	8003c44 <stm32_i2c_msg_read+0x98>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003c98:	6813      	ldr	r3, [r2, #0]
 8003c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ca6:	e7cc      	b.n	8003c42 <stm32_i2c_msg_read+0x96>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8003ca8:	6953      	ldr	r3, [r2, #20]
			while (!LL_I2C_IsActiveFlag_BTF(i2c)) {
 8003caa:	0758      	lsls	r0, r3, #29
 8003cac:	d5fc      	bpl.n	8003ca8 <stm32_i2c_msg_read+0xfc>
			if (msg->flags & I2C_MSG_STOP) {
 8003cae:	7a0b      	ldrb	r3, [r1, #8]
 8003cb0:	079b      	lsls	r3, r3, #30
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8003cb2:	bf42      	ittt	mi
 8003cb4:	6813      	ldrmi	r3, [r2, #0]
 8003cb6:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8003cba:	6013      	strmi	r3, [r2, #0]
				*data->current.buf = LL_I2C_ReceiveData8(i2c);
 8003cbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003cbe:	6911      	ldr	r1, [r2, #16]
 8003cc0:	7019      	strb	r1, [r3, #0]
 8003cc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003cc4:	6912      	ldr	r2, [r2, #16]
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e7d7      	b.n	8003c7a <stm32_i2c_msg_read+0xce>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd0:	6013      	str	r3, [r2, #0]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8003cd2:	6913      	ldr	r3, [r2, #16]
 8003cd4:	702b      	strb	r3, [r5, #0]
			len--;
 8003cd6:	3801      	subs	r0, #1
			buf++;
 8003cd8:	4625      	mov	r5, r4
 8003cda:	e7b9      	b.n	8003c50 <stm32_i2c_msg_read+0xa4>

08003cdc <stm32_i2c_configure_timing>:
{
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
	struct i2c_stm32_data *data = DEV_DATA(dev);
	I2C_TypeDef *i2c = cfg->i2c;

	switch (I2C_SPEED_GET(data->dev_config)) {
 8003cdc:	6882      	ldr	r2, [r0, #8]
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003cde:	6803      	ldr	r3, [r0, #0]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003ce0:	6812      	ldr	r2, [r2, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8003ce2:	689b      	ldr	r3, [r3, #8]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003ce4:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8003ce8:	2a01      	cmp	r2, #1
{
 8003cea:	b510      	push	{r4, lr}
	I2C_TypeDef *i2c = cfg->i2c;
 8003cec:	689b      	ldr	r3, [r3, #8]
	switch (I2C_SPEED_GET(data->dev_config)) {
 8003cee:	d004      	beq.n	8003cfa <stm32_i2c_configure_timing+0x1e>
 8003cf0:	2a02      	cmp	r2, #2
 8003cf2:	d021      	beq.n	8003d38 <stm32_i2c_configure_timing+0x5c>
		break;
	case I2C_SPEED_FAST:
		LL_I2C_ConfigSpeed(i2c, clock, 400000, LL_I2C_DUTYCYCLE_2);
		break;
	default:
		return -EINVAL;
 8003cf4:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8003cf8:	bd10      	pop	{r4, pc}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003cfa:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <stm32_i2c_configure_timing+0xa8>)
 8003cfe:	fbb1 f2f2 	udiv	r2, r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d02:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003d06:	4310      	orrs	r0, r2
 8003d08:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003d0a:	6a18      	ldr	r0, [r3, #32]
 8003d0c:	3201      	adds	r2, #1
 8003d0e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003d12:	4302      	orrs	r2, r0
 8003d14:	621a      	str	r2, [r3, #32]
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <stm32_i2c_configure_timing+0xac>)
 8003d18:	fbb1 f1f2 	udiv	r1, r1, r2
 8003d1c:	f3c1 020b 	ubfx	r2, r1, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d20:	2a03      	cmp	r2, #3
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d28:	bf98      	it	ls
 8003d2a:	2104      	movls	r1, #4
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003d2c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
	return 0;
 8003d34:	2000      	movs	r0, #0
 8003d36:	bd10      	pop	{r4, pc}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d38:	6858      	ldr	r0, [r3, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003d3a:	4c12      	ldr	r4, [pc, #72]	; (8003d84 <stm32_i2c_configure_timing+0xa8>)
 8003d3c:	fbb1 f4f4 	udiv	r4, r1, r4
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003d40:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003d44:	4320      	orrs	r0, r4
 8003d46:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003d48:	6a18      	ldr	r0, [r3, #32]
 8003d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d4e:	4362      	muls	r2, r4
 8003d50:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8003d54:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d58:	fbb2 f2f4 	udiv	r2, r2, r4
 8003d5c:	3201      	adds	r2, #1
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	621a      	str	r2, [r3, #32]
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <stm32_i2c_configure_timing+0xb0>)
 8003d64:	fbb1 f1f2 	udiv	r1, r1, r2
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d68:	b149      	cbz	r1, 8003d7e <stm32_i2c_configure_timing+0xa2>
 8003d6a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003d74:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	61d9      	str	r1, [r3, #28]
 8003d7c:	e7da      	b.n	8003d34 <stm32_i2c_configure_timing+0x58>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d7e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d82:	e7f4      	b.n	8003d6e <stm32_i2c_configure_timing+0x92>
 8003d84:	000f4240 	.word	0x000f4240
 8003d88:	00030d40 	.word	0x00030d40
 8003d8c:	00124f80 	.word	0x00124f80

08003d90 <i2c_stm32_runtime_configure>:

#define SYS_LOG_LEVEL CONFIG_SYS_LOG_I2C_LEVEL
#include <logging/sys_log.h>

static int i2c_stm32_runtime_configure(struct device *dev, u32_t config)
{
 8003d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003d94:	6803      	ldr	r3, [r0, #0]
	struct i2c_stm32_data *data = DEV_DATA(dev);
 8003d96:	f8d0 8008 	ldr.w	r8, [r0, #8]
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003d9a:	689f      	ldr	r7, [r3, #8]
	I2C_TypeDef *i2c = cfg->i2c;
	u32_t clock = 0;
 8003d9c:	ae02      	add	r6, sp, #8
{
 8003d9e:	4605      	mov	r5, r0
	u32_t clock = 0;
 8003da0:	2300      	movs	r3, #0
	 * SYSCLK frequency.
	 */
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
	clock = rcc_clocks.SYSCLK_Frequency;
#else
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003da2:	480e      	ldr	r0, [pc, #56]	; (8003ddc <i2c_stm32_runtime_configure+0x4c>)
	I2C_TypeDef *i2c = cfg->i2c;
 8003da4:	68bc      	ldr	r4, [r7, #8]
	u32_t clock = 0;
 8003da6:	f846 3d04 	str.w	r3, [r6, #-4]!
{
 8003daa:	4689      	mov	r9, r1
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003dac:	f00d fd70 	bl	8011890 <device_get_binding>
	const struct clock_control_driver_api *api = dev->driver_api;

	__ASSERT(api->get_rate, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8003db0:	6843      	ldr	r3, [r0, #4]
 8003db2:	4632      	mov	r2, r6
 8003db4:	4639      	mov	r1, r7
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4798      	blx	r3
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003dba:	6823      	ldr	r3, [r4, #0]
			(clock_control_subsys_t *) &cfg->pclken, &clock);
#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	data->dev_config = config;
 8003dbc:	f8c8 9000 	str.w	r9, [r8]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003dc6:	6823      	ldr	r3, [r4, #0]

	LL_I2C_Disable(i2c);
	LL_I2C_SetMode(i2c, LL_I2C_MODE_I2C);

	return stm32_i2c_configure_timing(dev, clock);
 8003dc8:	9901      	ldr	r1, [sp, #4]
 8003dca:	f023 031a 	bic.w	r3, r3, #26
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f7ff ff83 	bl	8003cdc <stm32_i2c_configure_timing>
}
 8003dd6:	b003      	add	sp, #12
 8003dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ddc:	0801314c 	.word	0x0801314c

08003de0 <i2c_stm32_init>:
	.configure = i2c_stm32_runtime_configure,
	.transfer = i2c_stm32_transfer,
};

static int i2c_stm32_init(struct device *dev)
{
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4604      	mov	r4, r0
	struct device *clock = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003de4:	4817      	ldr	r0, [pc, #92]	; (8003e44 <i2c_stm32_init+0x64>)
 8003de6:	f00d fd53 	bl	8011890 <device_get_binding>
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	689d      	ldr	r5, [r3, #8]
	return api->on(dev, sys);
 8003dee:	6843      	ldr	r3, [r0, #4]
 8003df0:	4629      	mov	r1, r5
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4798      	blx	r3
#endif
#include <logging/sys_log.h>

static inline u32_t _i2c_map_dt_bitrate(u32_t bitrate)
{
	switch (bitrate) {
 8003df6:	68eb      	ldr	r3, [r5, #12]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <i2c_stm32_init+0x68>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01c      	beq.n	8003e38 <i2c_stm32_init+0x58>
 8003dfe:	d807      	bhi.n	8003e10 <i2c_stm32_init+0x30>
 8003e00:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <i2c_stm32_init+0x6c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01c      	beq.n	8003e40 <i2c_stm32_init+0x60>
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <i2c_stm32_init+0x70>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00c      	beq.n	8003e26 <i2c_stm32_init+0x46>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	SYS_LOG_ERR("Invalid I2C bit rate value");

	return 0;
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	e00b      	b.n	8003e28 <i2c_stm32_init+0x48>
	switch (bitrate) {
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <i2c_stm32_init+0x74>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d012      	beq.n	8003e3c <i2c_stm32_init+0x5c>
 8003e16:	f502 12c3 	add.w	r2, r2, #1597440	; 0x186000
 8003e1a:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d1f4      	bne.n	8003e0c <i2c_stm32_init+0x2c>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
 8003e22:	210a      	movs	r1, #10
 8003e24:	e000      	b.n	8003e28 <i2c_stm32_init+0x48>
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
 8003e26:	2104      	movs	r1, #4
	}
#endif /* CONFIG_SOC_SERIES_STM32F3X) || CONFIG_SOC_SERIES_STM32F0X */

	bitrate_cfg = _i2c_map_dt_bitrate(cfg->bitrate);

	ret = i2c_stm32_runtime_configure(dev, I2C_MODE_MASTER | bitrate_cfg);
 8003e28:	f041 0110 	orr.w	r1, r1, #16
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7ff ffaf 	bl	8003d90 <i2c_stm32_runtime_configure>
		SYS_LOG_ERR("i2c: failure initializing");
		return ret;
	}

	return 0;
}
 8003e32:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
 8003e38:	2106      	movs	r1, #6
 8003e3a:	e7f5      	b.n	8003e28 <i2c_stm32_init+0x48>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
 8003e3c:	2108      	movs	r1, #8
 8003e3e:	e7f3      	b.n	8003e28 <i2c_stm32_init+0x48>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
 8003e40:	2102      	movs	r1, #2
 8003e42:	e7f1      	b.n	8003e28 <i2c_stm32_init+0x48>
 8003e44:	0801314c 	.word	0x0801314c
 8003e48:	000f4240 	.word	0x000f4240
 8003e4c:	000186a0 	.word	0x000186a0
 8003e50:	00061a80 	.word	0x00061a80
 8003e54:	0033e140 	.word	0x0033e140

08003e58 <i2c_stm32_transfer>:
{
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	4698      	mov	r8, r3
	const struct i2c_stm32_config *cfg = DEV_CFG(dev);
 8003e5e:	6803      	ldr	r3, [r0, #0]
	I2C_TypeDef *i2c = cfg->i2c;
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	689e      	ldr	r6, [r3, #8]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6033      	str	r3, [r6, #0]
	current->flags |= I2C_MSG_RESTART;
 8003e6c:	7a0b      	ldrb	r3, [r1, #8]
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
{
 8003e72:	4607      	mov	r7, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	4615      	mov	r5, r2
	current->flags |= I2C_MSG_RESTART;
 8003e78:	720b      	strb	r3, [r1, #8]
	int ret = 0;
 8003e7a:	2000      	movs	r0, #0
	while (num_msgs > 0) {
 8003e7c:	b92d      	cbnz	r5, 8003e8a <i2c_stm32_transfer+0x32>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6033      	str	r3, [r6, #0]
}
 8003e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (num_msgs > 1) {
 8003e8a:	2d01      	cmp	r5, #1
 8003e8c:	d91e      	bls.n	8003ecc <i2c_stm32_transfer+0x74>
			if (OPERATION(current) != OPERATION(next)) {
 8003e8e:	7d21      	ldrb	r1, [r4, #20]
 8003e90:	7a23      	ldrb	r3, [r4, #8]
 8003e92:	404b      	eors	r3, r1
 8003e94:	07db      	lsls	r3, r3, #31
 8003e96:	f104 0214 	add.w	r2, r4, #20
 8003e9a:	d501      	bpl.n	8003ea0 <i2c_stm32_transfer+0x48>
				if (!(next->flags & I2C_MSG_RESTART)) {
 8003e9c:	0748      	lsls	r0, r1, #29
 8003e9e:	d51a      	bpl.n	8003ed6 <i2c_stm32_transfer+0x7e>
		if (current->len > 255) {
 8003ea0:	6863      	ldr	r3, [r4, #4]
 8003ea2:	2bff      	cmp	r3, #255	; 0xff
 8003ea4:	d817      	bhi.n	8003ed6 <i2c_stm32_transfer+0x7e>
		if ((num_msgs == 1) && !(current->flags & I2C_MSG_STOP)) {
 8003ea6:	2d01      	cmp	r5, #1
 8003ea8:	7a23      	ldrb	r3, [r4, #8]
 8003eaa:	d101      	bne.n	8003eb0 <i2c_stm32_transfer+0x58>
 8003eac:	0799      	lsls	r1, r3, #30
 8003eae:	d512      	bpl.n	8003ed6 <i2c_stm32_transfer+0x7e>
		if ((current->flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8003eb0:	f013 0f01 	tst.w	r3, #1
			ret = stm32_i2c_msg_write(dev, current, next_msg_flags,
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4643      	mov	r3, r8
 8003eb8:	4638      	mov	r0, r7
		if ((current->flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
 8003eba:	d109      	bne.n	8003ed0 <i2c_stm32_transfer+0x78>
			ret = stm32_i2c_msg_write(dev, current, next_msg_flags,
 8003ebc:	f7ff fe16 	bl	8003aec <stm32_i2c_msg_write>
		if (ret < 0) {
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	dbdc      	blt.n	8003e7e <i2c_stm32_transfer+0x26>
		num_msgs--;
 8003ec4:	3d01      	subs	r5, #1
		current++;
 8003ec6:	340c      	adds	r4, #12
		num_msgs--;
 8003ec8:	b2ed      	uxtb	r5, r5
 8003eca:	e7d7      	b.n	8003e7c <i2c_stm32_transfer+0x24>
		u8_t *next_msg_flags = NULL;
 8003ecc:	2200      	movs	r2, #0
 8003ece:	e7e7      	b.n	8003ea0 <i2c_stm32_transfer+0x48>
			ret = stm32_i2c_msg_read(dev, current, next_msg_flags,
 8003ed0:	f7ff fe6c 	bl	8003bac <stm32_i2c_msg_read>
 8003ed4:	e7f4      	b.n	8003ec0 <i2c_stm32_transfer+0x68>
					ret = -EINVAL;
 8003ed6:	f06f 0015 	mvn.w	r0, #21
 8003eda:	e7d0      	b.n	8003e7e <i2c_stm32_transfer+0x26>

08003edc <_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int _pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8003edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ede:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8003ee0:	0906      	lsrs	r6, r0, #4
{
 8003ee2:	460d      	mov	r5, r1
	if (!clk) {
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	b912      	cbnz	r2, 8003eee <_pinmux_stm32_set+0x12>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003ee8:	480f      	ldr	r0, [pc, #60]	; (8003f28 <_pinmux_stm32_set+0x4c>)
 8003eea:	f00d fcd1 	bl	8011890 <device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <_pinmux_stm32_set+0x50>)
 8003ef4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	6843      	ldr	r3, [r0, #4]
 8003efc:	4669      	mov	r1, sp
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8003f02:	b970      	cbnz	r0, 8003f22 <_pinmux_stm32_set+0x46>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003f04:	1120      	asrs	r0, r4, #4
 8003f06:	0280      	lsls	r0, r0, #10
	return stm32_gpio_configure((u32_t *)port_base,
 8003f08:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003f0c:	f005 030f 	and.w	r3, r5, #15
 8003f10:	462a      	mov	r2, r5
 8003f12:	f004 010f 	and.w	r1, r4, #15
 8003f16:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8003f1a:	f7fe fde6 	bl	8002aea <stm32_gpio_configure>
		return -EIO;
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8003f22:	f06f 0004 	mvn.w	r0, #4
 8003f26:	e7fa      	b.n	8003f1e <_pinmux_stm32_set+0x42>
 8003f28:	0801314c 	.word	0x0801314c
 8003f2c:	08013658 	.word	0x08013658

08003f30 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	4604      	mov	r4, r0
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <stm32_setup_pins+0x2c>)
{
 8003f36:	460e      	mov	r6, r1
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003f38:	f00d fcaa 	bl	8011890 <device_get_binding>

	for (i = 0; i < pins; i++) {
 8003f3c:	2500      	movs	r5, #0
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
 8003f3e:	4607      	mov	r7, r0
	for (i = 0; i < pins; i++) {
 8003f40:	42b5      	cmp	r5, r6
 8003f42:	f104 0408 	add.w	r4, r4, #8
 8003f46:	d100      	bne.n	8003f4a <stm32_setup_pins+0x1a>
		_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8003f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pinmux_stm32_set(pinconf[i].pin_num,
 8003f4a:	463a      	mov	r2, r7
 8003f4c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003f50:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8003f54:	f7ff ffc2 	bl	8003edc <_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8003f58:	3501      	adds	r5, #1
 8003f5a:	e7f1      	b.n	8003f40 <stm32_setup_pins+0x10>
 8003f5c:	0801314c 	.word	0x0801314c

08003f60 <uart_stm32_poll_in>:

#define TIMEOUT 1000

static int uart_stm32_poll_in(struct device *dev, unsigned char *c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003f60:	6803      	ldr	r3, [r0, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003f66:	681a      	ldr	r2, [r3, #0]

	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8003f68:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003f6a:	bf43      	ittte	mi
 8003f6c:	685b      	ldrmi	r3, [r3, #4]
 8003f6e:	700b      	strbmi	r3, [r1, #0]
		return -1;
	}

	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);

	return 0;
 8003f70:	2000      	movmi	r0, #0
		return -1;
 8003f72:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8003f76:	4770      	bx	lr

08003f78 <uart_stm32_poll_out>:

static unsigned char uart_stm32_poll_out(struct device *dev,
					unsigned char c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003f7e:	681a      	ldr	r2, [r3, #0]

	/* Wait for TXE flag to be raised */
	while (!LL_USART_IsActiveFlag_TXE(UartInstance))
 8003f80:	0612      	lsls	r2, r2, #24
 8003f82:	d5fc      	bpl.n	8003f7e <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR , ~(USART_SR_TC));
 8003f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
	LL_USART_ClearFlag_TC(UartInstance);

	LL_USART_TransmitData8(UartInstance, (u8_t)c);

	return c;
}
 8003f8a:	4608      	mov	r0, r1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8003f8c:	6059      	str	r1, [r3, #4]
 8003f8e:	4770      	bx	lr

08003f90 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
 8003f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8003f92:	6803      	ldr	r3, [r0, #0]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8003f94:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003f96:	689d      	ldr	r5, [r3, #8]
	struct device *clk =
 8003f98:	481d      	ldr	r0, [pc, #116]	; (8004010 <uart_stm32_init+0x80>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003f9a:	f855 4b08 	ldr.w	r4, [r5], #8
	struct device *clk =
 8003f9e:	f00d fc77 	bl	8011890 <device_get_binding>
 8003fa2:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8003fa4:	6430      	str	r0, [r6, #64]	; 0x40
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4798      	blx	r3
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003fac:	68e3      	ldr	r3, [r4, #12]
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	/* Get clock rate */
	clock_control_get_rate(data->clock,
 8003fae:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	f043 030c 	orr.w	r3, r3, #12
 8003fbc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fc4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fcc:	6123      	str	r3, [r4, #16]
	return api->get_rate(dev, sys, rate);
 8003fce:	6843      	ldr	r3, [r0, #4]
 8003fd0:	aa01      	add	r2, sp, #4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003fd8:	9a01      	ldr	r2, [sp, #4]
 8003fda:	2319      	movs	r3, #25
 8003fdc:	4353      	muls	r3, r2
 8003fde:	6872      	ldr	r2, [r6, #4]
 8003fe0:	0092      	lsls	r2, r2, #2
 8003fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe6:	2264      	movs	r2, #100	; 0x64
 8003fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fec:	fb02 3311 	mls	r3, r2, r1, r3
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ff8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004000:	68e3      	ldr	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 8004002:	2000      	movs	r0, #0
 8004004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004008:	60e3      	str	r3, [r4, #12]
 800400a:	b002      	add	sp, #8
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	bf00      	nop
 8004010:	0801314c 	.word	0x0801314c

08004014 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf || ctx->tx_len);
 8004014:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004016:	b953      	cbnz	r3, 800402e <spi_stm32_transfer_ongoing+0x1a>
 8004018:	6d43      	ldr	r3, [r0, #84]	; 0x54
/* Value to shift out when no application data needs transmitting. */
#define SPI_STM32_TX_NOP 0x00

static bool spi_stm32_transfer_ongoing(struct spi_stm32_data *data)
{
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800401a:	b943      	cbnz	r3, 800402e <spi_stm32_transfer_ongoing+0x1a>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf || ctx->rx_len);
 800401c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800401e:	b933      	cbnz	r3, 800402e <spi_stm32_transfer_ongoing+0x1a>
 8004020:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8004022:	3000      	adds	r0, #0
 8004024:	bf18      	it	ne
 8004026:	2001      	movne	r0, #1
}
 8004028:	f000 0001 	and.w	r0, r0, #1
 800402c:	4770      	bx	lr
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800402e:	2001      	movs	r0, #1
 8004030:	e7fa      	b.n	8004028 <spi_stm32_transfer_ongoing+0x14>

08004032 <spi_stm32_next_tx>:
	return !!(ctx->tx_buf || ctx->tx_len);
 8004032:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004034:	b922      	cbnz	r2, 8004040 <spi_stm32_next_tx+0xe>
 8004036:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004038:	3300      	adds	r3, #0
 800403a:	bf18      	it	ne
 800403c:	2301      	movne	r3, #1

static inline u16_t spi_stm32_next_tx(struct spi_stm32_data *data)
{
	u16_t tx_frame;

	if (spi_context_tx_on(&data->ctx)) {
 800403e:	b143      	cbz	r3, 8004052 <spi_stm32_next_tx+0x20>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004040:	6803      	ldr	r3, [r0, #0]
 8004042:	891b      	ldrh	r3, [r3, #8]
 8004044:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004048:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((u8_t *)(data->ctx.tx_buf));
 800404a:	bf0c      	ite	eq
 800404c:	7810      	ldrbeq	r0, [r2, #0]
		} else {
			tx_frame = UNALIGNED_GET((u16_t *)(data->ctx.tx_buf));
 800404e:	8810      	ldrhne	r0, [r2, #0]
 8004050:	4770      	bx	lr
		}
	} else {
		tx_frame = SPI_STM32_TX_NOP;
 8004052:	4618      	mov	r0, r3
	}
	return tx_frame;
}
 8004054:	4770      	bx	lr

08004056 <spi_stm32_irq_config_func_1>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,
		    &api_funcs);

#ifdef CONFIG_SPI_STM32_INTERRUPT
static void spi_stm32_irq_config_func_1(struct device *dev)
{
 8004056:	b508      	push	{r3, lr}
	IRQ_CONNECT(SPI1_IRQn, CONFIG_SPI_1_IRQ_PRI,
 8004058:	2023      	movs	r0, #35	; 0x23
 800405a:	2200      	movs	r2, #0
 800405c:	2105      	movs	r1, #5
 800405e:	f7fe ffa9 	bl	8002fb4 <_irq_priority_set>
		    spi_stm32_isr, DEVICE_GET(spi_stm32_1), 0);
	irq_enable(SPI1_IRQn);
 8004062:	2023      	movs	r0, #35	; 0x23
}
 8004064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(SPI1_IRQn);
 8004068:	f7fe bf96 	b.w	8002f98 <_arch_irq_enable>

0800406c <spi_stm32_init>:
	const struct spi_stm32_config *cfg = dev->config->config_info;
 800406c:	6803      	ldr	r3, [r0, #0]
{
 800406e:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->driver_data;
 8004070:	6885      	ldr	r5, [r0, #8]
	const struct spi_stm32_config *cfg = dev->config->config_info;
 8004072:	689e      	ldr	r6, [r3, #8]
{
 8004074:	4604      	mov	r4, r0
	clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8004076:	4808      	ldr	r0, [pc, #32]	; (8004098 <spi_stm32_init+0x2c>)
 8004078:	f00d fc0a 	bl	8011890 <device_get_binding>
	return api->on(dev, sys);
 800407c:	6843      	ldr	r3, [r0, #4]
 800407e:	4631      	mov	r1, r6
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4798      	blx	r3
	cfg->irq_config(dev);
 8004084:	68f3      	ldr	r3, [r6, #12]
 8004086:	4620      	mov	r0, r4
 8004088:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 800408a:	68eb      	ldr	r3, [r5, #12]
 800408c:	b913      	cbnz	r3, 8004094 <spi_stm32_init+0x28>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800408e:	1d28      	adds	r0, r5, #4
 8004090:	f00d ffa0 	bl	8011fd4 <_impl_k_sem_give>
}
 8004094:	2000      	movs	r0, #0
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	0801314c 	.word	0x0801314c

0800409c <gpio_pin_write>:
static inline int _impl_gpio_write(struct device *port, int access_op,
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->write(port, access_op, pin, value);
 800409c:	6843      	ldr	r3, [r0, #4]
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
 800409e:	b410      	push	{r4}
	return api->write(port, access_op, pin, value);
 80040a0:	685c      	ldr	r4, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	46a4      	mov	ip, r4
 80040a6:	460a      	mov	r2, r1
	return gpio_write(port, GPIO_ACCESS_BY_PIN, pin, value);
}
 80040a8:	bc10      	pop	{r4}
	return api->write(port, access_op, pin, value);
 80040aa:	2100      	movs	r1, #0
 80040ac:	4760      	bx	ip

080040ae <spi_stm32_release>:
{
 80040ae:	b508      	push	{r3, lr}
	struct spi_stm32_data *data = CONFIG_DATA(config);
 80040b0:	6803      	ldr	r3, [r0, #0]
 80040b2:	6898      	ldr	r0, [r3, #8]
 80040b4:	68c3      	ldr	r3, [r0, #12]
 80040b6:	b913      	cbnz	r3, 80040be <spi_stm32_release+0x10>
 80040b8:	3004      	adds	r0, #4
 80040ba:	f00d ff8b 	bl	8011fd4 <_impl_k_sem_give>
}
 80040be:	2000      	movs	r0, #0
 80040c0:	bd08      	pop	{r3, pc}

080040c2 <spi_stm32_complete>:
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80040c2:	684b      	ldr	r3, [r1, #4]
 80040c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80040cc:	684b      	ldr	r3, [r1, #4]
 80040ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80040d4:	684b      	ldr	r3, [r1, #4]
 80040d6:	4616      	mov	r6, r2
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80040d8:	6802      	ldr	r2, [r0, #0]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	68d3      	ldr	r3, [r2, #12]
 80040e2:	4605      	mov	r5, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	b173      	cbz	r3, 8004106 <spi_stm32_complete+0x44>
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	b161      	cbz	r1, 8004106 <spi_stm32_complete+0x44>
			if (ctx->config->operation & SPI_HOLD_ON_CS) {
 80040ec:	8912      	ldrh	r2, [r2, #8]
 80040ee:	0491      	lsls	r1, r2, #18
 80040f0:	d409      	bmi.n	8004106 <spi_stm32_complete+0x44>
			k_busy_wait(ctx->config->cs->delay);
 80040f2:	6898      	ldr	r0, [r3, #8]
 80040f4:	f00e f8f6 	bl	80122e4 <k_busy_wait>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004102:	f7ff ffcb 	bl	800409c <gpio_pin_write>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800410c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004110:	d102      	bne.n	8004118 <spi_stm32_complete+0x56>
  return (READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY));
 8004112:	68a3      	ldr	r3, [r4, #8]
		while (LL_SPI_IsActiveFlag_BSY(spi)) {
 8004114:	061a      	lsls	r2, r3, #24
 8004116:	d4fc      	bmi.n	8004112 <spi_stm32_complete+0x50>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411e:	6023      	str	r3, [r4, #0]
	if (!ctx->asynchronous) {
 8004120:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004124:	b933      	cbnz	r3, 8004134 <spi_stm32_complete+0x72>
		ctx->sync_status = status;
 8004126:	636e      	str	r6, [r5, #52]	; 0x34
 8004128:	f105 001c 	add.w	r0, r5, #28
}
 800412c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004130:	f00d bf50 	b.w	8011fd4 <_impl_k_sem_give>
		if (ctx->signal) {
 8004134:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004136:	b110      	cbz	r0, 800413e <spi_stm32_complete+0x7c>
			k_poll_signal(ctx->signal, status);
 8004138:	4631      	mov	r1, r6
 800413a:	f00e fceb 	bl	8012b14 <k_poll_signal>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	891b      	ldrh	r3, [r3, #8]
 8004142:	045b      	lsls	r3, r3, #17
 8004144:	d401      	bmi.n	800414a <spi_stm32_complete+0x88>
 8004146:	1d28      	adds	r0, r5, #4
 8004148:	e7f0      	b.n	800412c <spi_stm32_complete+0x6a>
 800414a:	bd70      	pop	{r4, r5, r6, pc}

0800414c <spi_stm32_isr>:
{
 800414c:	b538      	push	{r3, r4, r5, lr}
	const struct spi_stm32_config *cfg = dev->config->config_info;
 800414e:	6803      	ldr	r3, [r0, #0]
	struct spi_stm32_data *data = dev->driver_data;
 8004150:	6884      	ldr	r4, [r0, #8]
	SPI_TypeDef *spi = cfg->spi;
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	6899      	ldr	r1, [r3, #8]
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 8004156:	688a      	ldr	r2, [r1, #8]
	if (err) {
 8004158:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
		spi_stm32_complete(data, spi, err);
 800415c:	4620      	mov	r0, r4
	if (err) {
 800415e:	d003      	beq.n	8004168 <spi_stm32_isr+0x1c>
}
 8004160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		spi_stm32_complete(data, spi, err);
 8004164:	f7ff bfad 	b.w	80040c2 <spi_stm32_complete>
	if (spi_stm32_transfer_ongoing(data)) {
 8004168:	f7ff ff54 	bl	8004014 <spi_stm32_transfer_ongoing>
 800416c:	b940      	cbnz	r0, 8004180 <spi_stm32_isr+0x34>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800416e:	4620      	mov	r0, r4
 8004170:	f7ff ff50 	bl	8004014 <spi_stm32_transfer_ongoing>
 8004174:	2800      	cmp	r0, #0
 8004176:	f040 80c7 	bne.w	8004308 <spi_stm32_isr+0x1bc>
 800417a:	4602      	mov	r2, r0
		spi_stm32_complete(data, spi, err);
 800417c:	4620      	mov	r0, r4
 800417e:	e7ef      	b.n	8004160 <spi_stm32_isr+0x14>
	u16_t operation = data->ctx.config->operation;
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	891d      	ldrh	r5, [r3, #8]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004184:	07ea      	lsls	r2, r5, #31
	tx_frame = spi_stm32_next_tx(data);
 8004186:	4620      	mov	r0, r4
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004188:	d45f      	bmi.n	800424a <spi_stm32_isr+0xfe>
	tx_frame = spi_stm32_next_tx(data);
 800418a:	f7ff ff52 	bl	8004032 <spi_stm32_next_tx>
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800418e:	688b      	ldr	r3, [r1, #8]
	while (!LL_SPI_IsActiveFlag_TXE(spi)) {
 8004190:	079b      	lsls	r3, r3, #30
 8004192:	d5fc      	bpl.n	800418e <spi_stm32_isr+0x42>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004194:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8004198:	2d08      	cmp	r5, #8
 800419a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800419c:	d13c      	bne.n	8004218 <spi_stm32_isr+0xcc>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  SPIx->DR = TxData;
 800419e:	b2c0      	uxtb	r0, r0
 80041a0:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 80041a2:	b183      	cbz	r3, 80041c6 <spi_stm32_isr+0x7a>
	ctx->tx_len -= len;
 80041a4:	3b01      	subs	r3, #1
 80041a6:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d12f      	bne.n	800420c <spi_stm32_isr+0xc0>
		ctx->current_tx++;
 80041ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041ae:	f102 0308 	add.w	r3, r2, #8
 80041b2:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 80041b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041b6:	3b01      	subs	r3, #1
 80041b8:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02a      	beq.n	8004214 <spi_stm32_isr+0xc8>
			ctx->tx_buf = ctx->current_tx->buf;
 80041be:	6893      	ldr	r3, [r2, #8]
 80041c0:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 80041c2:	68d3      	ldr	r3, [r2, #12]
 80041c4:	6563      	str	r3, [r4, #84]	; 0x54
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80041c6:	688b      	ldr	r3, [r1, #8]
	while (!LL_SPI_IsActiveFlag_RXNE(spi)) {
 80041c8:	07d8      	lsls	r0, r3, #31
 80041ca:	d5fc      	bpl.n	80041c6 <spi_stm32_isr+0x7a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80041cc:	2d08      	cmp	r5, #8
 80041ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d0:	d17f      	bne.n	80042d2 <spi_stm32_isr+0x186>
  return (uint8_t)(READ_REG(SPIx->DR));
 80041d2:	68ca      	ldr	r2, [r1, #12]
	return !!(ctx->rx_buf || ctx->rx_len);
 80041d4:	b90b      	cbnz	r3, 80041da <spi_stm32_isr+0x8e>
			if (spi_context_rx_on(&data->ctx)) {
 80041d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80041d8:	b198      	cbz	r0, 8004202 <spi_stm32_isr+0xb6>
 80041da:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80041dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80041de:	b182      	cbz	r2, 8004202 <spi_stm32_isr+0xb6>
	ctx->rx_len -= len;
 80041e0:	3a01      	subs	r2, #1
 80041e2:	65e2      	str	r2, [r4, #92]	; 0x5c
	if (!ctx->rx_len) {
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d171      	bne.n	80042cc <spi_stm32_isr+0x180>
		ctx->current_rx++;
 80041e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80041ea:	f102 0308 	add.w	r3, r2, #8
 80041ee:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count--;
 80041f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041f2:	3b01      	subs	r3, #1
 80041f4:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ctx->rx_count) {
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d069      	beq.n	80042ce <spi_stm32_isr+0x182>
			ctx->rx_buf = ctx->current_rx->buf;
 80041fa:	6893      	ldr	r3, [r2, #8]
 80041fc:	65a3      	str	r3, [r4, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
 80041fe:	68d3      	ldr	r3, [r2, #12]
 8004200:	65e3      	str	r3, [r4, #92]	; 0x5c
	u32_t sr = LL_SPI_ReadReg(spi, SR);
 8004202:	688a      	ldr	r2, [r1, #8]
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8004204:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8004208:	d1b8      	bne.n	800417c <spi_stm32_isr+0x30>
 800420a:	e7b0      	b.n	800416e <spi_stm32_isr+0x22>
	} else if (ctx->tx_buf) {
 800420c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0d9      	beq.n	80041c6 <spi_stm32_isr+0x7a>
		ctx->tx_buf += dfs * len;
 8004212:	3301      	adds	r3, #1
 8004214:	6523      	str	r3, [r4, #80]	; 0x50
 8004216:	e7d6      	b.n	80041c6 <spi_stm32_isr+0x7a>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
  SPIx->DR = TxData;
 8004218:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0d3      	beq.n	80041c6 <spi_stm32_isr+0x7a>
	ctx->tx_len -= len;
 800421e:	3b01      	subs	r3, #1
 8004220:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 8004222:	b96b      	cbnz	r3, 8004240 <spi_stm32_isr+0xf4>
		ctx->current_tx++;
 8004224:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004226:	f102 0308 	add.w	r3, r2, #8
 800422a:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 800422c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800422e:	3b01      	subs	r3, #1
 8004230:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <spi_stm32_isr+0xc8>
			ctx->tx_buf = ctx->current_tx->buf;
 8004236:	6893      	ldr	r3, [r2, #8]
 8004238:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 800423a:	68d3      	ldr	r3, [r2, #12]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	e7c1      	b.n	80041c4 <spi_stm32_isr+0x78>
	} else if (ctx->tx_buf) {
 8004240:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0bf      	beq.n	80041c6 <spi_stm32_isr+0x7a>
		ctx->tx_buf += dfs * len;
 8004246:	3302      	adds	r3, #2
 8004248:	e7e4      	b.n	8004214 <spi_stm32_isr+0xc8>
	tx_frame = spi_stm32_next_tx(data);
 800424a:	f7ff fef2 	bl	8004032 <spi_stm32_next_tx>
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 800424e:	688b      	ldr	r3, [r1, #8]
	if (LL_SPI_IsActiveFlag_TXE(spi)) {
 8004250:	079a      	lsls	r2, r3, #30
 8004252:	d516      	bpl.n	8004282 <spi_stm32_isr+0x136>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004254:	f3c5 1345 	ubfx	r3, r5, #5, #6
 8004258:	2b08      	cmp	r3, #8
 800425a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800425c:	d11d      	bne.n	800429a <spi_stm32_isr+0x14e>
  SPIx->DR = TxData;
 800425e:	b2c0      	uxtb	r0, r0
 8004260:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 8004262:	b173      	cbz	r3, 8004282 <spi_stm32_isr+0x136>
	ctx->tx_len -= len;
 8004264:	3b01      	subs	r3, #1
 8004266:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 8004268:	b98b      	cbnz	r3, 800428e <spi_stm32_isr+0x142>
		ctx->current_tx++;
 800426a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800426c:	f102 0308 	add.w	r3, r2, #8
 8004270:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 8004272:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004274:	3b01      	subs	r3, #1
 8004276:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 8004278:	b16b      	cbz	r3, 8004296 <spi_stm32_isr+0x14a>
			ctx->tx_buf = ctx->current_tx->buf;
 800427a:	6893      	ldr	r3, [r2, #8]
 800427c:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 800427e:	68d3      	ldr	r3, [r2, #12]
 8004280:	6563      	str	r3, [r4, #84]	; 0x54
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 8004282:	688b      	ldr	r3, [r1, #8]
	if (LL_SPI_IsActiveFlag_RXNE(spi)) {
 8004284:	07db      	lsls	r3, r3, #31
 8004286:	d5bc      	bpl.n	8004202 <spi_stm32_isr+0xb6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004288:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800428c:	e79e      	b.n	80041cc <spi_stm32_isr+0x80>
	} else if (ctx->tx_buf) {
 800428e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f6      	beq.n	8004282 <spi_stm32_isr+0x136>
		ctx->tx_buf += dfs * len;
 8004294:	3301      	adds	r3, #1
 8004296:	6523      	str	r3, [r4, #80]	; 0x50
 8004298:	e7f3      	b.n	8004282 <spi_stm32_isr+0x136>
  SPIx->DR = TxData;
 800429a:	60c8      	str	r0, [r1, #12]
	if (!ctx->tx_len) {
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <spi_stm32_isr+0x136>
	ctx->tx_len -= len;
 80042a0:	3b01      	subs	r3, #1
 80042a2:	6563      	str	r3, [r4, #84]	; 0x54
	if (!ctx->tx_len) {
 80042a4:	b96b      	cbnz	r3, 80042c2 <spi_stm32_isr+0x176>
		ctx->current_tx++;
 80042a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042a8:	f102 0308 	add.w	r3, r2, #8
 80042ac:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count--;
 80042ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80042b0:	3b01      	subs	r3, #1
 80042b2:	6463      	str	r3, [r4, #68]	; 0x44
		if (ctx->tx_count) {
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ee      	beq.n	8004296 <spi_stm32_isr+0x14a>
			ctx->tx_buf = ctx->current_tx->buf;
 80042b8:	6893      	ldr	r3, [r2, #8]
 80042ba:	6523      	str	r3, [r4, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
 80042bc:	68d3      	ldr	r3, [r2, #12]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	e7de      	b.n	8004280 <spi_stm32_isr+0x134>
	} else if (ctx->tx_buf) {
 80042c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0dc      	beq.n	8004282 <spi_stm32_isr+0x136>
		ctx->tx_buf += dfs * len;
 80042c8:	3302      	adds	r3, #2
 80042ca:	e7e4      	b.n	8004296 <spi_stm32_isr+0x14a>
		ctx->rx_buf += dfs * len;
 80042cc:	3301      	adds	r3, #1
 80042ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80042d0:	e797      	b.n	8004202 <spi_stm32_isr+0xb6>
  return (uint16_t)(READ_REG(SPIx->DR));
 80042d2:	68c8      	ldr	r0, [r1, #12]
 80042d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
	return !!(ctx->rx_buf || ctx->rx_len);
 80042d6:	b90b      	cbnz	r3, 80042dc <spi_stm32_isr+0x190>
			if (spi_context_rx_on(&data->ctx)) {
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d092      	beq.n	8004202 <spi_stm32_isr+0xb6>
				UNALIGNED_PUT(rx_frame,
 80042dc:	8018      	strh	r0, [r3, #0]
	if (!ctx->rx_len) {
 80042de:	2a00      	cmp	r2, #0
 80042e0:	d08f      	beq.n	8004202 <spi_stm32_isr+0xb6>
	ctx->rx_len -= len;
 80042e2:	3a01      	subs	r2, #1
 80042e4:	65e2      	str	r2, [r4, #92]	; 0x5c
	if (!ctx->rx_len) {
 80042e6:	b96a      	cbnz	r2, 8004304 <spi_stm32_isr+0x1b8>
		ctx->current_rx++;
 80042e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80042ea:	f102 0308 	add.w	r3, r2, #8
 80042ee:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count--;
 80042f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042f2:	3b01      	subs	r3, #1
 80042f4:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ctx->rx_count) {
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0e9      	beq.n	80042ce <spi_stm32_isr+0x182>
			ctx->rx_buf = ctx->current_rx->buf;
 80042fa:	6893      	ldr	r3, [r2, #8]
 80042fc:	65a3      	str	r3, [r4, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
 80042fe:	68d3      	ldr	r3, [r2, #12]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	e77d      	b.n	8004200 <spi_stm32_isr+0xb4>
		ctx->rx_buf += dfs * len;
 8004304:	3302      	adds	r3, #2
 8004306:	e7e2      	b.n	80042ce <spi_stm32_isr+0x182>
 8004308:	bd38      	pop	{r3, r4, r5, pc}
	...

0800430c <transceive>:
{
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	b08d      	sub	sp, #52	; 0x34
 8004312:	4607      	mov	r7, r0
 8004314:	4689      	mov	r9, r1
 8004316:	4698      	mov	r8, r3
	if (!tx_count && !rx_count) {
 8004318:	9201      	str	r2, [sp, #4]
 800431a:	b91a      	cbnz	r2, 8004324 <transceive+0x18>
 800431c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80f4 	beq.w	800450c <transceive+0x200>
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 8004324:	683b      	ldr	r3, [r7, #0]
	struct spi_stm32_data *data = CONFIG_DATA(config);
 8004326:	689d      	ldr	r5, [r3, #8]
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 8004328:	681b      	ldr	r3, [r3, #0]
	k_sem_take(&ctx->lock, K_FOREVER);
 800432a:	f105 0b04 	add.w	fp, r5, #4
	SPI_TypeDef *spi = cfg->spi;
 800432e:	689b      	ldr	r3, [r3, #8]
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004334:	4658      	mov	r0, fp
 8004336:	689e      	ldr	r6, [r3, #8]
 8004338:	f00d fe8e 	bl	8012058 <_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
 800433c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8004340:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	ctx->signal = signal;
 8004344:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004346:	63ab      	str	r3, [r5, #56]	; 0x38
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 8004348:	683b      	ldr	r3, [r7, #0]
	const u32_t scaler[] = {
 800434a:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8004578 <transceive+0x26c>
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 800434e:	681a      	ldr	r2, [r3, #0]
	struct spi_stm32_data *data = CONFIG_DATA(config);
 8004350:	f8d3 a008 	ldr.w	sl, [r3, #8]
	const struct spi_stm32_config *cfg = CONFIG_CFG(config);
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	9200      	str	r2, [sp, #0]
	const u32_t scaler[] = {
 8004358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800435c:	ac04      	add	r4, sp, #16
 800435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004360:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	SPI_TypeDef *spi = cfg->spi;
 8004368:	9b00      	ldr	r3, [sp, #0]
 800436a:	689c      	ldr	r4, [r3, #8]
	if (spi_context_configured(&data->ctx, config)) {
 800436c:	f8da 3000 	ldr.w	r3, [sl]
 8004370:	429f      	cmp	r7, r3
 8004372:	d06f      	beq.n	8004454 <transceive+0x148>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800437a:	2b08      	cmp	r3, #8
 800437c:	d002      	beq.n	8004384 <transceive+0x78>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800437e:	2b10      	cmp	r3, #16
 8004380:	f040 80f4 	bne.w	800456c <transceive+0x260>
	clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8004384:	487b      	ldr	r0, [pc, #492]	; (8004574 <transceive+0x268>)
 8004386:	f00d fa83 	bl	8011890 <device_get_binding>
	return api->get_rate(dev, sys, rate);
 800438a:	6843      	ldr	r3, [r0, #4]
 800438c:	9900      	ldr	r1, [sp, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	aa03      	add	r2, sp, #12
 8004392:	4798      	blx	r3
		u32_t clk = clock >> br;
 8004394:	9803      	ldr	r0, [sp, #12]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004396:	2301      	movs	r3, #1
		if (clk <= config->frequency) {
 8004398:	6879      	ldr	r1, [r7, #4]
		u32_t clk = clock >> br;
 800439a:	fa20 f203 	lsr.w	r2, r0, r3
		if (clk <= config->frequency) {
 800439e:	428a      	cmp	r2, r1
 80043a0:	f240 80c8 	bls.w	8004534 <transceive+0x228>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80043a4:	3301      	adds	r3, #1
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d1f6      	bne.n	8004398 <transceive+0x8c>
		return -EINVAL;
 80043aa:	f06f 0015 	mvn.w	r0, #21
}
 80043ae:	b00d      	add	sp, #52	; 0x34
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80043b4:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) == SPI_MODE_CPHA) {
 80043b6:	2904      	cmp	r1, #4
 80043b8:	f022 0202 	bic.w	r2, r2, #2
 80043bc:	6022      	str	r2, [r4, #0]
 80043be:	f040 80d1 	bne.w	8004564 <transceive+0x258>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 80043d0:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80043d2:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 80043d4:	06d9      	lsls	r1, r3, #27
 80043d6:	bf4c      	ite	mi
 80043d8:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 80043dc:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 80043e0:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 80043e2:	6822      	ldr	r2, [r4, #0]
	if (config->cs) {
 80043e4:	68f9      	ldr	r1, [r7, #12]
 80043e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ea:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80043ec:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80043ee:	f013 0001 	ands.w	r0, r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	f422 7282 	bicne.w	r2, r2, #260	; 0x104
 80043f8:	f442 7282 	orreq.w	r2, r2, #260	; 0x104
 80043fc:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80043fe:	6822      	ldr	r2, [r4, #0]
	if (config->cs) {
 8004400:	2900      	cmp	r1, #0
 8004402:	d037      	beq.n	8004474 <transceive+0x168>
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	f022 0204 	bic.w	r2, r2, #4
 8004410:	6062      	str	r2, [r4, #4]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8004412:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004416:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	bf0c      	ite	eq
 800441c:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8004420:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8004424:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004426:	6863      	ldr	r3, [r4, #4]
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 800442e:	f8ca 7000 	str.w	r7, [sl]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004432:	b179      	cbz	r1, 8004454 <transceive+0x148>
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	b168      	cbz	r0, 8004454 <transceive+0x148>
	return api->config(port, access_op, pin, flags);
 8004438:	6843      	ldr	r3, [r0, #4]
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	681c      	ldr	r4, [r3, #0]
 800443e:	2100      	movs	r1, #0
 8004440:	2301      	movs	r3, #1
 8004442:	47a0      	blx	r4
		gpio_pin_write(ctx->config->cs->gpio_dev,
 8004444:	f8da 3000 	ldr.w	r3, [sl]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004450:	f7ff fe24 	bl	800409c <gpio_pin_write>
	ctx->tx_count = tx_count;
 8004454:	9b01      	ldr	r3, [sp, #4]
 8004456:	646b      	str	r3, [r5, #68]	; 0x44
	ctx->rx_count = rx_count;
 8004458:	9b16      	ldr	r3, [sp, #88]	; 0x58
	ctx->current_tx = tx_bufs;
 800445a:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
	ctx->current_rx = rx_bufs;
 800445e:	f8c5 8048 	str.w	r8, [r5, #72]	; 0x48
	ctx->rx_count = rx_count;
 8004462:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (tx_bufs) {
 8004464:	f1b9 0f00 	cmp.w	r9, #0
 8004468:	d10f      	bne.n	800448a <transceive+0x17e>
		ctx->tx_buf = NULL;
 800446a:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
		ctx->tx_len = 0;
 800446e:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
 8004472:	e010      	b.n	8004496 <transceive+0x18a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8004478:	2800      	cmp	r0, #0
 800447a:	d1c5      	bne.n	8004408 <transceive+0xfc>
 800447c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004480:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	f042 0204 	orr.w	r2, r2, #4
 8004488:	e7c2      	b.n	8004410 <transceive+0x104>
		ctx->tx_buf = tx_bufs->buf;
 800448a:	f8d9 3000 	ldr.w	r3, [r9]
 800448e:	652b      	str	r3, [r5, #80]	; 0x50
		ctx->tx_len = tx_bufs->len / dfs;
 8004490:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004494:	656b      	str	r3, [r5, #84]	; 0x54
	if (rx_bufs) {
 8004496:	f1b8 0f00 	cmp.w	r8, #0
 800449a:	d039      	beq.n	8004510 <transceive+0x204>
		ctx->rx_buf = rx_bufs->buf;
 800449c:	f8d8 3000 	ldr.w	r3, [r8]
 80044a0:	65ab      	str	r3, [r5, #88]	; 0x58
		ctx->rx_len = rx_bufs->len / dfs;
 80044a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80044a6:	65eb      	str	r3, [r5, #92]	; 0x5c
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80044a8:	6833      	ldr	r3, [r6, #0]
	ctx->sync_status = 0;
 80044aa:	2200      	movs	r2, #0
 80044ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b0:	636a      	str	r2, [r5, #52]	; 0x34
 80044b2:	6033      	str	r3, [r6, #0]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	b14b      	cbz	r3, 80044ce <transceive+0x1c2>
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	b138      	cbz	r0, 80044ce <transceive+0x1c2>
			gpio_pin_write(ctx->config->cs->gpio_dev,
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	f7ff fdec 	bl	800409c <gpio_pin_write>
			k_busy_wait(ctx->config->cs->delay);
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	6898      	ldr	r0, [r3, #8]
 80044ca:	f00d ff0b 	bl	80122e4 <k_busy_wait>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80044ce:	6873      	ldr	r3, [r6, #4]
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 80044d6:	f1b8 0f00 	cmp.w	r8, #0
 80044da:	d003      	beq.n	80044e4 <transceive+0x1d8>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80044dc:	6873      	ldr	r3, [r6, #4]
 80044de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e2:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80044e4:	6873      	ldr	r3, [r6, #4]
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	6073      	str	r3, [r6, #4]
	if (!ctx->asynchronous) {
 80044ec:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80044f0:	b19b      	cbz	r3, 800451a <transceive+0x20e>
	if (!status && (ctx->config->operation & SPI_LOCK_ON)) {
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	891c      	ldrh	r4, [r3, #8]
 80044f6:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
 80044fa:	d107      	bne.n	800450c <transceive+0x200>
	if (!ctx->asynchronous || status) {
 80044fc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004500:	b103      	cbz	r3, 8004504 <transceive+0x1f8>
 8004502:	b11c      	cbz	r4, 800450c <transceive+0x200>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004504:	4658      	mov	r0, fp
 8004506:	f00d fd65 	bl	8011fd4 <_impl_k_sem_give>
	return ret ? -EIO : 0;
 800450a:	b984      	cbnz	r4, 800452e <transceive+0x222>
 800450c:	2000      	movs	r0, #0
 800450e:	e74e      	b.n	80043ae <transceive+0xa2>
		ctx->rx_buf = NULL;
 8004510:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
		ctx->rx_len = 0;
 8004514:	f8c5 805c 	str.w	r8, [r5, #92]	; 0x5c
 8004518:	e7c6      	b.n	80044a8 <transceive+0x19c>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 800451a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800451e:	f105 001c 	add.w	r0, r5, #28
 8004522:	f00d fd99 	bl	8012058 <_impl_k_sem_take>
		status = ctx->sync_status;
 8004526:	6b6c      	ldr	r4, [r5, #52]	; 0x34
	if (!status && (ctx->config->operation & SPI_LOCK_ON)) {
 8004528:	2c00      	cmp	r4, #0
 800452a:	d1e7      	bne.n	80044fc <transceive+0x1f0>
 800452c:	e7e1      	b.n	80044f2 <transceive+0x1e6>
 800452e:	f06f 0004 	mvn.w	r0, #4
 8004532:	e73c      	b.n	80043ae <transceive+0xa2>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004534:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004536:	a90c      	add	r1, sp, #48	; 0x30
 8004538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453c:	6022      	str	r2, [r4, #0]
 800453e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004548:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800454c:	4313      	orrs	r3, r2
 800454e:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) ==  SPI_MODE_CPOL) {
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	f003 010e 	and.w	r1, r3, #14
 8004556:	2902      	cmp	r1, #2
 8004558:	f47f af2c 	bne.w	80043b4 <transceive+0xa8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	f042 0202 	orr.w	r2, r2, #2
 8004562:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	e72d      	b.n	80043c8 <transceive+0xbc>
		return -ENOTSUP;
 800456c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8004570:	e71d      	b.n	80043ae <transceive+0xa2>
 8004572:	bf00      	nop
 8004574:	0801314c 	.word	0x0801314c
 8004578:	08012c84 	.word	0x08012c84

0800457c <spi_stm32_transceive_async>:
{
 800457c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(config, tx_bufs, tx_count,
 800457e:	9c07      	ldr	r4, [sp, #28]
 8004580:	9402      	str	r4, [sp, #8]
 8004582:	2401      	movs	r4, #1
 8004584:	9401      	str	r4, [sp, #4]
 8004586:	9c06      	ldr	r4, [sp, #24]
 8004588:	9400      	str	r4, [sp, #0]
 800458a:	f7ff febf 	bl	800430c <transceive>
}
 800458e:	b004      	add	sp, #16
 8004590:	bd10      	pop	{r4, pc}

08004592 <spi_stm32_transceive>:
{
 8004592:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(config, tx_bufs, tx_count,
 8004594:	2400      	movs	r4, #0
 8004596:	9402      	str	r4, [sp, #8]
 8004598:	9401      	str	r4, [sp, #4]
 800459a:	9c06      	ldr	r4, [sp, #24]
 800459c:	9400      	str	r4, [sp, #0]
 800459e:	f7ff feb5 	bl	800430c <transceive>
}
 80045a2:	b004      	add	sp, #16
 80045a4:	bd10      	pop	{r4, pc}
	...

080045a8 <_bt_spi_init>:
	.open		= bt_spi_open,
	.send		= bt_spi_send,
};

static int _bt_spi_init(struct device *unused)
{
 80045a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	spi_dev = device_get_binding(CONFIG_BT_SPI_DEV_NAME);
 80045aa:	480e      	ldr	r0, [pc, #56]	; (80045e4 <_bt_spi_init+0x3c>)
 80045ac:	f00d f970 	bl	8011890 <device_get_binding>
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <_bt_spi_init+0x40>)
 80045b2:	6018      	str	r0, [r3, #0]
	if (!spi_dev) {
 80045b4:	b910      	cbnz	r0, 80045bc <_bt_spi_init+0x14>
		BT_ERR("Failed to initialize SPI driver: %s",
		       CONFIG_BT_SPI_DEV_NAME);
		return -EIO;
 80045b6:	f06f 0004 	mvn.w	r0, #4
 80045ba:	bd08      	pop	{r3, pc}
		       CONFIG_BT_SPI_CHIP_SELECT_DEV_NAME);
		return -EIO;
	}
#endif /* CONFIG_BT_SPI_BLUENRG */

	irq_dev = device_get_binding(CONFIG_BT_SPI_IRQ_DEV_NAME);
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <_bt_spi_init+0x44>)
 80045be:	f00d f967 	bl	8011890 <device_get_binding>
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <_bt_spi_init+0x48>)
 80045c4:	6018      	str	r0, [r3, #0]
	if (!irq_dev) {
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d0f5      	beq.n	80045b6 <_bt_spi_init+0xe>
		BT_ERR("Failed to initialize GPIO driver: %s",
		       CONFIG_BT_SPI_IRQ_DEV_NAME);
		return -EIO;
	}

	rst_dev = device_get_binding(CONFIG_BT_SPI_RESET_DEV_NAME);
 80045ca:	4808      	ldr	r0, [pc, #32]	; (80045ec <_bt_spi_init+0x44>)
 80045cc:	f00d f960 	bl	8011890 <device_get_binding>
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <_bt_spi_init+0x4c>)
 80045d2:	6018      	str	r0, [r3, #0]
	if (!rst_dev) {
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d0ee      	beq.n	80045b6 <_bt_spi_init+0xe>
		BT_ERR("Failed to initialize GPIO driver: %s",
		       CONFIG_BT_SPI_RESET_DEV_NAME);
		return -EIO;
	}

	bt_hci_driver_register(&drv);
 80045d8:	4807      	ldr	r0, [pc, #28]	; (80045f8 <_bt_spi_init+0x50>)
 80045da:	f001 fe33 	bl	8006244 <bt_hci_driver_register>

	return 0;
 80045de:	2000      	movs	r0, #0
}
 80045e0:	bd08      	pop	{r3, pc}
 80045e2:	bf00      	nop
 80045e4:	080136b0 	.word	0x080136b0
 80045e8:	200002c4 	.word	0x200002c4
 80045ec:	0801362c 	.word	0x0801362c
 80045f0:	20000154 	.word	0x20000154
 80045f4:	20000158 	.word	0x20000158
 80045f8:	080136b8 	.word	0x080136b8

080045fc <bt_spi_isr>:
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <bt_spi_isr+0x8>)
 80045fe:	f00d bce9 	b.w	8011fd4 <_impl_k_sem_give>
 8004602:	bf00      	nop
 8004604:	200064bc 	.word	0x200064bc

08004608 <bt_spi_transceive>:
{
 8004608:	b537      	push	{r0, r1, r2, r4, r5, lr}
	spi_tx_buf.buf = (void *)tx;
 800460a:	4c08      	ldr	r4, [pc, #32]	; (800462c <bt_spi_transceive+0x24>)
	spi_tx_buf.len = (size_t)tx_len;
 800460c:	e884 0003 	stmia.w	r4, {r0, r1}
	spi_rx_buf.buf = rx;
 8004610:	4907      	ldr	r1, [pc, #28]	; (8004630 <bt_spi_transceive+0x28>)
				       struct spi_buf *rx_bufs,
				       size_t rx_count)
{
	const struct spi_driver_api *api = config->dev->driver_api;

	return api->transceive(config, tx_bufs, tx_count, rx_bufs, rx_count);
 8004612:	4808      	ldr	r0, [pc, #32]	; (8004634 <bt_spi_transceive+0x2c>)
	spi_rx_buf.len = (size_t)rx_len;
 8004614:	e881 000c 	stmia.w	r1, {r2, r3}
	const struct spi_driver_api *api = config->dev->driver_api;
 8004618:	6803      	ldr	r3, [r0, #0]
	return api->transceive(config, tx_bufs, tx_count, rx_bufs, rx_count);
 800461a:	2201      	movs	r2, #1
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	9200      	str	r2, [sp, #0]
 8004620:	681d      	ldr	r5, [r3, #0]
 8004622:	460b      	mov	r3, r1
 8004624:	4621      	mov	r1, r4
 8004626:	47a8      	blx	r5
}
 8004628:	b003      	add	sp, #12
 800462a:	bd30      	pop	{r4, r5, pc}
 800462c:	200002d0 	.word	0x200002d0
 8004630:	200002c8 	.word	0x200002c8
 8004634:	200058d8 	.word	0x200058d8

08004638 <bt_spi_send>:
{
 8004638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u8_t header[5] = { SPI_WRITE, 0x00,  0x00,  0x00,  0x00 };
 800463a:	230a      	movs	r3, #10
 800463c:	f88d 3008 	strb.w	r3, [sp, #8]
 8004640:	2300      	movs	r3, #0
 8004642:	f88d 3009 	strb.w	r3, [sp, #9]
 8004646:	f88d 300a 	strb.w	r3, [sp, #10]
 800464a:	f88d 300b 	strb.w	r3, [sp, #11]
 800464e:	f88d 300c 	strb.w	r3, [sp, #12]
	if (buf->len >= SPI_MAX_MSG_LEN) {
 8004652:	8983      	ldrh	r3, [r0, #12]
 8004654:	2bfe      	cmp	r3, #254	; 0xfe
{
 8004656:	4604      	mov	r4, r0
	if (buf->len >= SPI_MAX_MSG_LEN) {
 8004658:	d849      	bhi.n	80046ee <bt_spi_send+0xb6>
		gpio_pin_read(irq_dev, GPIO_IRQ_PIN, &pending);
 800465a:	4d26      	ldr	r5, [pc, #152]	; (80046f4 <bt_spi_send+0xbc>)
 800465c:	6828      	ldr	r0, [r5, #0]
	return api->read(port, access_op, pin, value);
 800465e:	6843      	ldr	r3, [r0, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	689e      	ldr	r6, [r3, #8]
 8004664:	2100      	movs	r1, #0
 8004666:	ab01      	add	r3, sp, #4
 8004668:	47b0      	blx	r6
		if (!pending) {
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	b11b      	cbz	r3, 8004676 <bt_spi_send+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
 800466e:	2001      	movs	r0, #1
 8004670:	f00d fc06 	bl	8011e80 <_impl_k_sleep>
 8004674:	e7f2      	b.n	800465c <bt_spi_send+0x24>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004676:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800467a:	481f      	ldr	r0, [pc, #124]	; (80046f8 <bt_spi_send+0xc0>)
 800467c:	f00d fcec 	bl	8012058 <_impl_k_sem_take>
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 8004680:	89e3      	ldrh	r3, [r4, #14]
 8004682:	4423      	add	r3, r4
 8004684:	3313      	adds	r3, #19
 8004686:	f023 0303 	bic.w	r3, r3, #3
	switch (bt_buf_get_type(buf)) {
 800468a:	7819      	ldrb	r1, [r3, #0]
 800468c:	b351      	cbz	r1, 80046e4 <bt_spi_send+0xac>
 800468e:	2902      	cmp	r1, #2
 8004690:	d12a      	bne.n	80046e8 <bt_spi_send+0xb0>
		net_buf_push_u8(buf, HCI_CMD);
 8004692:	f104 0008 	add.w	r0, r4, #8
 8004696:	f00d f89b 	bl	80117d0 <net_buf_simple_push_u8>
		bt_spi_transceive(header, 5, rxmsg, 5);
 800469a:	4d18      	ldr	r5, [pc, #96]	; (80046fc <bt_spi_send+0xc4>)
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <bt_spi_send+0xc4>)
 800469e:	2305      	movs	r3, #5
 80046a0:	4619      	mov	r1, r3
 80046a2:	a802      	add	r0, sp, #8
 80046a4:	f7ff ffb0 	bl	8004608 <bt_spi_transceive>
		 (rxmsg[1] | rxmsg[2] | rxmsg[3] | rxmsg[4]) == 0);
 80046a8:	782b      	ldrb	r3, [r5, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d1f6      	bne.n	800469c <bt_spi_send+0x64>
 80046ae:	78aa      	ldrb	r2, [r5, #2]
 80046b0:	786b      	ldrb	r3, [r5, #1]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	78ea      	ldrb	r2, [r5, #3]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	792a      	ldrb	r2, [r5, #4]
	} while (rxmsg[STATUS_HEADER_READY] != READY_NOW ||
 80046ba:	4313      	orrs	r3, r2
 80046bc:	d0ee      	beq.n	800469c <bt_spi_send+0x64>
		bt_spi_transceive(buf->data, buf->len, rxmsg, buf->len);
 80046be:	4e0f      	ldr	r6, [pc, #60]	; (80046fc <bt_spi_send+0xc4>)
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	68a0      	ldr	r0, [r4, #8]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4632      	mov	r2, r6
 80046c8:	f7ff ff9e 	bl	8004608 <bt_spi_transceive>
	} while (rxmsg[0] == 0);
 80046cc:	782b      	ldrb	r3, [r5, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f6      	beq.n	80046c0 <bt_spi_send+0x88>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80046d2:	4809      	ldr	r0, [pc, #36]	; (80046f8 <bt_spi_send+0xc0>)
 80046d4:	f00d fc7e 	bl	8011fd4 <_impl_k_sem_give>
	net_buf_unref(buf);
 80046d8:	4620      	mov	r0, r4
 80046da:	f00c fff7 	bl	80116cc <net_buf_unref>
	return 0;
 80046de:	2000      	movs	r0, #0
}
 80046e0:	b004      	add	sp, #16
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_push_u8(buf, HCI_CMD);
 80046e4:	2101      	movs	r1, #1
 80046e6:	e7d4      	b.n	8004692 <bt_spi_send+0x5a>
 80046e8:	4803      	ldr	r0, [pc, #12]	; (80046f8 <bt_spi_send+0xc0>)
 80046ea:	f00d fc73 	bl	8011fd4 <_impl_k_sem_give>
		return -EINVAL;
 80046ee:	f06f 0015 	mvn.w	r0, #21
 80046f2:	e7f5      	b.n	80046e0 <bt_spi_send+0xa8>
 80046f4:	20000154 	.word	0x20000154
 80046f8:	2000648c 	.word	0x2000648c
 80046fc:	200001c4 	.word	0x200001c4

08004700 <bt_spi_rx_thread>:
{
 8004700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004704:	b087      	sub	sp, #28
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 8004706:	230b      	movs	r3, #11
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 8004708:	22ff      	movs	r2, #255	; 0xff
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 800470a:	f88d 3008 	strb.w	r3, [sp, #8]
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 800470e:	4611      	mov	r1, r2
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 8004710:	2300      	movs	r3, #0
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 8004712:	4849      	ldr	r0, [pc, #292]	; (8004838 <bt_spi_rx_thread+0x138>)
	u8_t header_master[5] = { SPI_READ, 0x00, 0x00, 0x00, 0x00 };
 8004714:	f88d 3009 	strb.w	r3, [sp, #9]
 8004718:	f88d 300a 	strb.w	r3, [sp, #10]
 800471c:	f88d 300b 	strb.w	r3, [sp, #11]
 8004720:	f88d 300c 	strb.w	r3, [sp, #12]
		gpio_pin_disable_callback(irq_dev, GPIO_IRQ_PIN);
 8004724:	4e45      	ldr	r6, [pc, #276]	; (800483c <bt_spi_rx_thread+0x13c>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004726:	4f46      	ldr	r7, [pc, #280]	; (8004840 <bt_spi_rx_thread+0x140>)
	memset(&txmsg, 0xFF, SPI_MAX_MSG_LEN);
 8004728:	f7fc f8d6 	bl	80008d8 <memset>
 800472c:	46b0      	mov	r8, r6
 800472e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004732:	4844      	ldr	r0, [pc, #272]	; (8004844 <bt_spi_rx_thread+0x144>)
 8004734:	f00d fc90 	bl	8012058 <_impl_k_sem_take>
		gpio_pin_disable_callback(irq_dev, GPIO_IRQ_PIN);
 8004738:	6830      	ldr	r0, [r6, #0]
	return api->disable_callback(port, access_op, pin);
 800473a:	6843      	ldr	r3, [r0, #4]
 800473c:	2100      	movs	r1, #0
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	2201      	movs	r2, #1
 8004742:	4798      	blx	r3
 8004744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004748:	4638      	mov	r0, r7
 800474a:	f00d fc85 	bl	8012058 <_impl_k_sem_take>
			bt_spi_transceive(header_master, 5, header_slave, 5);
 800474e:	2305      	movs	r3, #5
 8004750:	4619      	mov	r1, r3
 8004752:	aa04      	add	r2, sp, #16
 8004754:	a802      	add	r0, sp, #8
 8004756:	f7ff ff57 	bl	8004608 <bt_spi_transceive>
		} while (header_slave[STATUS_HEADER_TOREAD] == 0 ||
 800475a:	f89d 5013 	ldrb.w	r5, [sp, #19]
 800475e:	1e6b      	subs	r3, r5, #1
			 header_slave[STATUS_HEADER_TOREAD] == 0xFF);
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2bfd      	cmp	r3, #253	; 0xfd
 8004764:	d8f3      	bhi.n	800474e <bt_spi_rx_thread+0x4e>
			bt_spi_transceive(&txmsg, size, &rxmsg, size);
 8004766:	4c38      	ldr	r4, [pc, #224]	; (8004848 <bt_spi_rx_thread+0x148>)
 8004768:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004838 <bt_spi_rx_thread+0x138>
 800476c:	4a36      	ldr	r2, [pc, #216]	; (8004848 <bt_spi_rx_thread+0x148>)
 800476e:	462b      	mov	r3, r5
 8004770:	4629      	mov	r1, r5
 8004772:	4648      	mov	r0, r9
 8004774:	f7ff ff48 	bl	8004608 <bt_spi_transceive>
		} while (rxmsg[0] == 0);
 8004778:	7823      	ldrb	r3, [r4, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f6      	beq.n	800476c <bt_spi_rx_thread+0x6c>
		gpio_pin_enable_callback(irq_dev, GPIO_IRQ_PIN);
 800477e:	f8d8 0000 	ldr.w	r0, [r8]
	return api->enable_callback(port, access_op, pin);
 8004782:	6843      	ldr	r3, [r0, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2100      	movs	r1, #0
 800478a:	4798      	blx	r3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800478c:	4638      	mov	r0, r7
 800478e:	f00d fc21 	bl	8011fd4 <_impl_k_sem_give>
		switch (rxmsg[PACKET_TYPE]) {
 8004792:	7823      	ldrb	r3, [r4, #0]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d032      	beq.n	80047fe <bt_spi_rx_thread+0xfe>
 8004798:	2b04      	cmp	r3, #4
 800479a:	d1c8      	bne.n	800472e <bt_spi_rx_thread+0x2e>
			switch (rxmsg[EVT_HEADER_EVENT]) {
 800479c:	7863      	ldrb	r3, [r4, #1]
 800479e:	2b0e      	cmp	r3, #14
 80047a0:	d327      	bcc.n	80047f2 <bt_spi_rx_thread+0xf2>
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d90b      	bls.n	80047be <bt_spi_rx_thread+0xbe>
 80047a6:	2bff      	cmp	r3, #255	; 0xff
 80047a8:	d123      	bne.n	80047f2 <bt_spi_rx_thread+0xf2>
	return (rxmsg[EVT_VENDOR_CODE_MSB] << 8) | rxmsg[EVT_VENDOR_CODE_LSB];
 80047aa:	7922      	ldrb	r2, [r4, #4]
 80047ac:	78e3      	ldrb	r3, [r4, #3]
 80047ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	switch (bt_spi_get_evt(rxmsg)) {
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d1bb      	bne.n	800472e <bt_spi_rx_thread+0x2e>
 80047b6:	4825      	ldr	r0, [pc, #148]	; (800484c <bt_spi_rx_thread+0x14c>)
 80047b8:	f00d fc0c 	bl	8011fd4 <_impl_k_sem_give>
 80047bc:	e7b7      	b.n	800472e <bt_spi_rx_thread+0x2e>
				buf = bt_buf_get_cmd_complete(K_FOREVER);
 80047be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c2:	f001 ff47 	bl	8006654 <bt_buf_get_cmd_complete>
			net_buf_add_mem(buf, &rxmsg[1],
 80047c6:	78a2      	ldrb	r2, [r4, #2]
 80047c8:	4921      	ldr	r1, [pc, #132]	; (8004850 <bt_spi_rx_thread+0x150>)
				buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 80047ca:	4605      	mov	r5, r0
			net_buf_add_mem(buf, &rxmsg[1],
 80047cc:	3202      	adds	r2, #2
 80047ce:	3008      	adds	r0, #8
			net_buf_add_mem(buf, &rxmsg[5],
 80047d0:	f00c ffa2 	bl	8011718 <net_buf_simple_add_mem>
		if (rxmsg[PACKET_TYPE] == HCI_EVT &&
 80047d4:	7823      	ldrb	r3, [r4, #0]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <bt_spi_rx_thread+0xea>
		    bt_hci_evt_is_prio(rxmsg[EVT_HEADER_EVENT])) {
 80047da:	7862      	ldrb	r2, [r4, #1]
 80047dc:	2a13      	cmp	r2, #19
 80047de:	d804      	bhi.n	80047ea <bt_spi_rx_thread+0xea>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4093      	lsls	r3, r2
 80047e4:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 80047e8:	d122      	bne.n	8004830 <bt_spi_rx_thread+0x130>
			bt_recv(buf);
 80047ea:	4628      	mov	r0, r5
 80047ec:	f001 fc7c 	bl	80060e8 <bt_recv>
 80047f0:	e79d      	b.n	800472e <bt_spi_rx_thread+0x2e>
				buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 80047f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047f6:	2001      	movs	r0, #1
 80047f8:	f001 ff14 	bl	8006624 <bt_buf_get_rx>
 80047fc:	e7e3      	b.n	80047c6 <bt_spi_rx_thread+0xc6>
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 80047fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004802:	2003      	movs	r0, #3
 8004804:	f001 ff0e 	bl	8006624 <bt_buf_get_rx>
			memcpy(&acl_hdr, &rxmsg[1], sizeof(acl_hdr));
 8004808:	2204      	movs	r2, #4
			buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
 800480a:	4605      	mov	r5, r0
			memcpy(&acl_hdr, &rxmsg[1], sizeof(acl_hdr));
 800480c:	4910      	ldr	r1, [pc, #64]	; (8004850 <bt_spi_rx_thread+0x150>)
 800480e:	eb0d 0002 	add.w	r0, sp, r2
 8004812:	f7fc f835 	bl	8000880 <memcpy>
			net_buf_add_mem(buf, &acl_hdr, sizeof(acl_hdr));
 8004816:	f105 0908 	add.w	r9, r5, #8
 800481a:	2204      	movs	r2, #4
 800481c:	eb0d 0102 	add.w	r1, sp, r2
 8004820:	4648      	mov	r0, r9
 8004822:	f00c ff79 	bl	8011718 <net_buf_simple_add_mem>
			net_buf_add_mem(buf, &rxmsg[5],
 8004826:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800482a:	490a      	ldr	r1, [pc, #40]	; (8004854 <bt_spi_rx_thread+0x154>)
 800482c:	4648      	mov	r0, r9
 800482e:	e7cf      	b.n	80047d0 <bt_spi_rx_thread+0xd0>
			bt_recv_prio(buf);
 8004830:	4628      	mov	r0, r5
 8004832:	f001 fc79 	bl	8006128 <bt_recv_prio>
 8004836:	e77a      	b.n	800472e <bt_spi_rx_thread+0x2e>
 8004838:	200002d8 	.word	0x200002d8
 800483c:	20000154 	.word	0x20000154
 8004840:	2000648c 	.word	0x2000648c
 8004844:	200064bc 	.word	0x200064bc
 8004848:	200001c4 	.word	0x200001c4
 800484c:	200064a4 	.word	0x200064a4
 8004850:	200001c5 	.word	0x200001c5
 8004854:	200001c9 	.word	0x200001c9

08004858 <bt_spi_open>:
{
 8004858:	b570      	push	{r4, r5, r6, lr}
	gpio_pin_configure(rst_dev, GPIO_RESET_PIN,
 800485a:	4d29      	ldr	r5, [pc, #164]	; (8004900 <bt_spi_open+0xa8>)
 800485c:	6828      	ldr	r0, [r5, #0]
	return api->config(port, access_op, pin, flags);
 800485e:	6843      	ldr	r3, [r0, #4]
{
 8004860:	b086      	sub	sp, #24
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	2204      	movs	r2, #4
 8004866:	f240 1301 	movw	r3, #257	; 0x101
 800486a:	2100      	movs	r1, #0
 800486c:	47a0      	blx	r4
	gpio_pin_write(rst_dev, GPIO_RESET_PIN, 0);
 800486e:	6828      	ldr	r0, [r5, #0]
	return api->write(port, access_op, pin, value);
 8004870:	6843      	ldr	r3, [r0, #4]
 8004872:	685c      	ldr	r4, [r3, #4]
 8004874:	2300      	movs	r3, #0
 8004876:	4619      	mov	r1, r3
 8004878:	2204      	movs	r2, #4
 800487a:	47a0      	blx	r4
	spi_conf.dev = spi_dev;
 800487c:	4b21      	ldr	r3, [pc, #132]	; (8004904 <bt_spi_open+0xac>)
	gpio_pin_configure(irq_dev, GPIO_IRQ_PIN,
 800487e:	4c22      	ldr	r4, [pc, #136]	; (8004908 <bt_spi_open+0xb0>)
	spi_conf.dev = spi_dev;
 8004880:	681a      	ldr	r2, [r3, #0]
	gpio_pin_configure(irq_dev, GPIO_IRQ_PIN,
 8004882:	6820      	ldr	r0, [r4, #0]
	spi_conf.dev = spi_dev;
 8004884:	4b21      	ldr	r3, [pc, #132]	; (800490c <bt_spi_open+0xb4>)
 8004886:	601a      	str	r2, [r3, #0]
	return api->config(port, access_op, pin, flags);
 8004888:	6843      	ldr	r3, [r0, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	2326      	movs	r3, #38	; 0x26
 8004892:	47b0      	blx	r6
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8004894:	491e      	ldr	r1, [pc, #120]	; (8004910 <bt_spi_open+0xb8>)
 8004896:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <bt_spi_open+0xbc>)
	if (gpio_add_callback(irq_dev, &gpio_cb)) {
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
 800489c:	2302      	movs	r3, #2
 800489e:	608b      	str	r3, [r1, #8]
{
	const struct gpio_driver_api *api = port->driver_api;

	__ASSERT(callback, "Callback pointer should not be NULL");

	return api->manage_callback(port, callback, true);
 80048a0:	6843      	ldr	r3, [r0, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	4798      	blx	r3
 80048a8:	4601      	mov	r1, r0
 80048aa:	b120      	cbz	r0, 80048b6 <bt_spi_open+0x5e>
		return -EINVAL;
 80048ac:	f06f 0415 	mvn.w	r4, #21
}
 80048b0:	4620      	mov	r0, r4
 80048b2:	b006      	add	sp, #24
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
	if (gpio_pin_enable_callback(irq_dev, GPIO_IRQ_PIN)) {
 80048b6:	6820      	ldr	r0, [r4, #0]
	return api->enable_callback(port, access_op, pin);
 80048b8:	6842      	ldr	r2, [r0, #4]
 80048ba:	6914      	ldr	r4, [r2, #16]
 80048bc:	2201      	movs	r2, #1
 80048be:	47a0      	blx	r4
 80048c0:	4604      	mov	r4, r0
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d1f2      	bne.n	80048ac <bt_spi_open+0x54>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 80048c6:	f06f 0307 	mvn.w	r3, #7
 80048ca:	9005      	str	r0, [sp, #20]
 80048cc:	9004      	str	r0, [sp, #16]
 80048ce:	9303      	str	r3, [sp, #12]
 80048d0:	9002      	str	r0, [sp, #8]
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	9000      	str	r0, [sp, #0]
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <bt_spi_open+0xc0>)
 80048d8:	4910      	ldr	r1, [pc, #64]	; (800491c <bt_spi_open+0xc4>)
 80048da:	4811      	ldr	r0, [pc, #68]	; (8004920 <bt_spi_open+0xc8>)
 80048dc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80048e0:	f00d fdb0 	bl	8012444 <_impl_k_thread_create>
	gpio_pin_write(rst_dev, GPIO_RESET_PIN, 1);
 80048e4:	6828      	ldr	r0, [r5, #0]
	return api->write(port, access_op, pin, value);
 80048e6:	6843      	ldr	r3, [r0, #4]
 80048e8:	4621      	mov	r1, r4
 80048ea:	685d      	ldr	r5, [r3, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	2301      	movs	r3, #1
 80048f0:	47a8      	blx	r5
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 80048f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048f6:	480b      	ldr	r0, [pc, #44]	; (8004924 <bt_spi_open+0xcc>)
 80048f8:	f00d fbae 	bl	8012058 <_impl_k_sem_take>
 80048fc:	e7d8      	b.n	80048b0 <bt_spi_open+0x58>
 80048fe:	bf00      	nop
 8004900:	20000158 	.word	0x20000158
 8004904:	200002c4 	.word	0x200002c4
 8004908:	20000154 	.word	0x20000154
 800490c:	200058d8 	.word	0x200058d8
 8004910:	20000148 	.word	0x20000148
 8004914:	080045fd 	.word	0x080045fd
 8004918:	08004701 	.word	0x08004701
 800491c:	200014f8 	.word	0x200014f8
 8004920:	2000015c 	.word	0x2000015c
 8004924:	200064a4 	.word	0x200064a4

08004928 <_timer_int_handler>:
	__asm__(" cpsie i"); /* re-enable interrupts (PRIMASK = 0) */

#else /* !CONFIG_SYS_POWER_MANAGEMENT */

	/* accumulate total counter value */
	clock_accumulated_count += sys_clock_hw_cycles_per_tick;
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <_timer_int_handler+0x20>)
 800492a:	4908      	ldr	r1, [pc, #32]	; (800494c <_timer_int_handler+0x24>)
{
 800492c:	b508      	push	{r3, lr}
	clock_accumulated_count += sys_clock_hw_cycles_per_tick;
 800492e:	6809      	ldr	r1, [r1, #0]
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	440b      	add	r3, r1
 8004934:	6013      	str	r3, [r2, #0]

	/*
	 * one more tick has occurred -- don't need to do anything special since
	 * timer is already configured to interrupt on the following tick
	 */
	_sys_clock_tick_announce();
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <_timer_int_handler+0x28>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f00d fbc1 	bl	80120c0 <_nano_sys_clock_tick_announce>
	read_timer_end_of_tick_handler();
#endif

	extern void _ExcExit(void);
	_ExcExit();
}
 800493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
 8004942:	f7fe b96b 	b.w	8002c1c <_ExcExit>
 8004946:	bf00      	nop
 8004948:	200003d8 	.word	0x200003d8
 800494c:	200063a4 	.word	0x200063a4
 8004950:	200063a0 	.word	0x200063a0

08004954 <_sys_clock_driver_init>:
	 */

	/* systick supports 24-bit H/W counter */
	__ASSERT(sys_clock_hw_cycles_per_tick <= (1 << 24),
		 "sys_clock_hw_cycles_per_tick too large");
	sysTickReloadSet(sys_clock_hw_cycles_per_tick - 1);
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <_sys_clock_driver_init+0x20>)
 8004956:	681a      	ldr	r2, [r3, #0]
	SysTick->LOAD = count;
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <_sys_clock_driver_init+0x24>)
	sysTickReloadSet(sys_clock_hw_cycles_per_tick - 1);
 800495a:	3a01      	subs	r2, #1
	SysTick->LOAD = count;
 800495c:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <_sys_clock_driver_init+0x28>)
	SysTick->VAL = 0; /* also clears the countflag */
 8004960:	2000      	movs	r0, #0
 8004962:	2110      	movs	r1, #16
 8004964:	6098      	str	r0, [r3, #8]
 8004966:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23

#endif /* CONFIG_TICKLESS_IDLE */

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);

	SysTick->CTRL = ctrl;
 800496a:	2207      	movs	r2, #7
 800496c:	601a      	str	r2, [r3, #0]

	SysTick->VAL = 0; /* triggers immediate reload of count */
 800496e:	6098      	str	r0, [r3, #8]

	return 0;
}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	200063a4 	.word	0x200063a4
 8004978:	e000e010 	.word	0xe000e010
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <_timer_cycle_get_32>:
 * \INTERNAL WARNING
 * systick counter is a 24-bit down counter which is reset to "reload" value
 * once it reaches 0.
 */
u32_t _timer_cycle_get_32(void)
{
 8004980:	b530      	push	{r4, r5, lr}
return (u32_t) get_elapsed_count();
#else
	u32_t cac, count;

	do {
		cac = clock_accumulated_count;
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <_timer_cycle_get_32+0x18>)
		count = SysTick->LOAD - SysTick->VAL;
 8004984:	4905      	ldr	r1, [pc, #20]	; (800499c <_timer_cycle_get_32+0x1c>)
		cac = clock_accumulated_count;
 8004986:	6813      	ldr	r3, [r2, #0]
		count = SysTick->LOAD - SysTick->VAL;
 8004988:	684c      	ldr	r4, [r1, #4]
 800498a:	6888      	ldr	r0, [r1, #8]
	} while (cac != clock_accumulated_count);
 800498c:	6815      	ldr	r5, [r2, #0]
 800498e:	42ab      	cmp	r3, r5
 8004990:	d1f9      	bne.n	8004986 <_timer_cycle_get_32+0x6>

	return cac + count;
 8004992:	4423      	add	r3, r4
#endif
}
 8004994:	1a18      	subs	r0, r3, r0
 8004996:	bd30      	pop	{r4, r5, pc}
 8004998:	200003d8 	.word	0x200003d8
 800499c:	e000e010 	.word	0xe000e010

080049a0 <pinmux_stm32_init>:
	{STM32_PIN_PA12, STM32F4_PINMUX_FUNC_PA12_OTG_FS_DP},
#endif	/* CONFIG_USB_DC_STM */
};

static int pinmux_stm32_init(struct device *port)
{
 80049a0:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 80049a2:	2108      	movs	r1, #8
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <pinmux_stm32_init+0x10>)
 80049a6:	f7ff fac3 	bl	8003f30 <stm32_setup_pins>

	return 0;
}
 80049aa:	2000      	movs	r0, #0
 80049ac:	bd08      	pop	{r3, pc}
 80049ae:	bf00      	nop
 80049b0:	080136dc 	.word	0x080136dc

080049b4 <send_cmd_status>:
		u8_t dhkey[32];
	};
} ecc;

static void send_cmd_status(u16_t opcode, u8_t status)
{
 80049b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b8:	4680      	mov	r8, r0
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode %x status %x", opcode, status);

	buf = bt_buf_get_cmd_complete(K_FOREVER);
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
 80049be:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
 80049c0:	f001 fe48 	bl	8006654 <bt_buf_get_cmd_complete>
 80049c4:	89c3      	ldrh	r3, [r0, #14]
 80049c6:	4403      	add	r3, r0
 80049c8:	3313      	adds	r3, #19
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
 80049ce:	2501      	movs	r5, #1
	bt_buf_set_type(buf, BT_BUF_EVT);

	hdr = net_buf_add(buf, sizeof(*hdr));
 80049d0:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
 80049d4:	4604      	mov	r4, r0
 80049d6:	701d      	strb	r5, [r3, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
 80049d8:	2102      	movs	r1, #2
 80049da:	4630      	mov	r0, r6
 80049dc:	f00c fe96 	bl	801170c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
 80049e0:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
 80049e2:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
 80049e4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
 80049e6:	7041      	strb	r1, [r0, #1]

	evt = net_buf_add(buf, sizeof(*evt));
 80049e8:	4630      	mov	r0, r6
 80049ea:	f00c fe8f 	bl	801170c <net_buf_simple_add>
	evt->ncmd = 1;
 80049ee:	7045      	strb	r5, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
	evt->status = status;
 80049f0:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
 80049f2:	f8a0 8002 	strh.w	r8, [r0, #2]

	bt_recv_prio(buf);
 80049f6:	4620      	mov	r0, r4
}
 80049f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
 80049fc:	f001 bb94 	b.w	8006128 <bt_recv_prio>

08004a00 <sys_memcpy_swap.constprop.3>:
 *
 * @param dst A valid pointer on a memory area where to copy the data in
 * @param src A valid pointer on a memory area where to copy the data from
 * @param length Size of both dst and src memory areas
 */
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
 8004a00:	f101 0320 	add.w	r3, r1, #32
 8004a04:	3801      	subs	r0, #1
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
 8004a06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a0a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
 8004a0e:	428b      	cmp	r3, r1
 8004a10:	d1f9      	bne.n	8004a06 <sys_memcpy_swap.constprop.3+0x6>
	}
}
 8004a12:	4770      	bx	lr

08004a14 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
 8004a14:	b580      	push	{r7, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004a16:	4e54      	ldr	r6, [pc, #336]	; (8004b68 <ecc_thread+0x154>)
 8004a18:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8004b80 <ecc_thread+0x16c>
 8004a1c:	4635      	mov	r5, r6
 8004a1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a22:	4640      	mov	r0, r8
 8004a24:	f00d fb18 	bl	8012058 <_impl_k_sem_take>
 8004a28:	f3bf 8f5b 	dmb	ish
 8004a2c:	6834      	ldr	r4, [r6, #0]
 8004a2e:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
 8004a32:	f014 0401 	ands.w	r4, r4, #1
 8004a36:	d04e      	beq.n	8004ad6 <ecc_thread+0xc2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
 8004a38:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8004b7c <ecc_thread+0x168>
 8004a3c:	4c4b      	ldr	r4, [pc, #300]	; (8004b6c <ecc_thread+0x158>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
 8004a3e:	4f4c      	ldr	r7, [pc, #304]	; (8004b70 <ecc_thread+0x15c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
 8004a40:	484c      	ldr	r0, [pc, #304]	; (8004b74 <ecc_thread+0x160>)
 8004a42:	464a      	mov	r2, r9
 8004a44:	4621      	mov	r1, r4
 8004a46:	f7fc f9af 	bl	8000da8 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
 8004a4a:	b3c8      	cbz	r0, 8004ac0 <ecc_thread+0xac>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	4639      	mov	r1, r7
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fb ff00 	bl	8000856 <memcmp>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0f2      	beq.n	8004a40 <ecc_thread+0x2c>
	return 0;
 8004a5a:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a60:	2001      	movs	r0, #1
 8004a62:	f001 fddf 	bl	8006624 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004a66:	f100 0708 	add.w	r7, r0, #8
 8004a6a:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004a6c:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f00c fe4c 	bl	801170c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
 8004a74:	233e      	movs	r3, #62	; 0x3e
 8004a76:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
 8004a78:	2342      	movs	r3, #66	; 0x42
 8004a7a:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f00c fe44 	bl	801170c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
 8004a84:	2308      	movs	r3, #8
 8004a86:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
 8004a88:	2141      	movs	r1, #65	; 0x41
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f00c fe3e 	bl	801170c <net_buf_simple_add>
 8004a90:	4607      	mov	r7, r0
	evt->status = status;
 8004a92:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
 8004a96:	b1ac      	cbz	r4, 8004ac4 <ecc_thread+0xb0>
		memset(evt->key, 0, sizeof(evt->key));
 8004a98:	2240      	movs	r2, #64	; 0x40
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f7fb ff1c 	bl	80008d8 <memset>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8004aa0:	f3bf 8f5b 	dmb	ish
 8004aa4:	e855 3f00 	ldrex	r3, [r5]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	e845 3200 	strex	r2, r3, [r5]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	d1f7      	bne.n	8004aa4 <ecc_thread+0x90>
 8004ab4:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
 8004ab8:	4648      	mov	r0, r9
 8004aba:	f001 fb15 	bl	80060e8 <bt_recv>
 8004abe:	e7ae      	b.n	8004a1e <ecc_thread+0xa>
			return BT_HCI_ERR_UNSPECIFIED;
 8004ac0:	241f      	movs	r4, #31
 8004ac2:	e7cb      	b.n	8004a5c <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
 8004ac4:	492b      	ldr	r1, [pc, #172]	; (8004b74 <ecc_thread+0x160>)
 8004ac6:	f7ff ff9b 	bl	8004a00 <sys_memcpy_swap.constprop.3>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
 8004aca:	492b      	ldr	r1, [pc, #172]	; (8004b78 <ecc_thread+0x164>)
 8004acc:	f107 0021 	add.w	r0, r7, #33	; 0x21
 8004ad0:	f7ff ff96 	bl	8004a00 <sys_memcpy_swap.constprop.3>
 8004ad4:	e7e4      	b.n	8004aa0 <ecc_thread+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004ad6:	f3bf 8f5b 	dmb	ish
 8004ada:	6833      	ldr	r3, [r6, #0]
 8004adc:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
 8004ae0:	079b      	lsls	r3, r3, #30
 8004ae2:	d59c      	bpl.n	8004a1e <ecc_thread+0xa>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
 8004ae4:	4925      	ldr	r1, [pc, #148]	; (8004b7c <ecc_thread+0x168>)
 8004ae6:	4823      	ldr	r0, [pc, #140]	; (8004b74 <ecc_thread+0x160>)
 8004ae8:	f7fd f923 	bl	8001d32 <uECC_valid_public_key>
	if (ret < 0) {
 8004aec:	2800      	cmp	r0, #0
 8004aee:	db07      	blt.n	8004b00 <ecc_thread+0xec>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <ecc_thread+0x160>)
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <ecc_thread+0x168>)
 8004af4:	f1a2 0120 	sub.w	r1, r2, #32
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fc f9a1 	bl	8000e40 <uECC_shared_secret>
 8004afe:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b04:	2001      	movs	r0, #1
 8004b06:	f001 fd8d 	bl	8006624 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004b0a:	f100 0708 	add.w	r7, r0, #8
 8004b0e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
 8004b10:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004b12:	4638      	mov	r0, r7
 8004b14:	f00c fdfa 	bl	801170c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
 8004b18:	233e      	movs	r3, #62	; 0x3e
 8004b1a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
 8004b1c:	2322      	movs	r3, #34	; 0x22
 8004b1e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
 8004b20:	2101      	movs	r1, #1
 8004b22:	4638      	mov	r0, r7
 8004b24:	f00c fdf2 	bl	801170c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
 8004b28:	2309      	movs	r3, #9
 8004b2a:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
 8004b2c:	2121      	movs	r1, #33	; 0x21
 8004b2e:	4638      	mov	r0, r7
 8004b30:	f00c fdec 	bl	801170c <net_buf_simple_add>
 8004b34:	4603      	mov	r3, r0
 8004b36:	3001      	adds	r0, #1
	if (ret == TC_CRYPTO_FAIL) {
 8004b38:	b984      	cbnz	r4, 8004b5c <ecc_thread+0x148>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
 8004b3a:	221f      	movs	r2, #31
 8004b3c:	701a      	strb	r2, [r3, #0]
		memset(evt->dhkey, 0, sizeof(evt->dhkey));
 8004b3e:	4621      	mov	r1, r4
 8004b40:	2220      	movs	r2, #32
 8004b42:	f7fb fec9 	bl	80008d8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8004b46:	f3bf 8f5b 	dmb	ish
 8004b4a:	e855 3f00 	ldrex	r3, [r5]
 8004b4e:	f023 0302 	bic.w	r3, r3, #2
 8004b52:	e845 3200 	strex	r2, r3, [r5]
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d0ac      	beq.n	8004ab4 <ecc_thread+0xa0>
 8004b5a:	e7f6      	b.n	8004b4a <ecc_thread+0x136>
		evt->status = 0;
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
 8004b60:	4904      	ldr	r1, [pc, #16]	; (8004b74 <ecc_thread+0x160>)
 8004b62:	f7ff ff4d 	bl	8004a00 <sys_memcpy_swap.constprop.3>
 8004b66:	e7ee      	b.n	8004b46 <ecc_thread+0x132>
 8004b68:	200004a4 	.word	0x200004a4
 8004b6c:	200003dc 	.word	0x200003dc
 8004b70:	080137cc 	.word	0x080137cc
 8004b74:	200003fc 	.word	0x200003fc
 8004b78:	2000041c 	.word	0x2000041c
 8004b7c:	0801371c 	.word	0x0801371c
 8004b80:	20006474 	.word	0x20006474

08004b84 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	89c3      	ldrh	r3, [r0, #14]
 8004b88:	4403      	add	r3, r0
 8004b8a:	3313      	adds	r3, #19
 8004b8c:	f023 0303 	bic.w	r3, r3, #3
 8004b90:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b9ab      	cbnz	r3, 8004bc2 <bt_hci_ecc_send+0x3e>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
 8004b96:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
 8004b98:	881a      	ldrh	r2, [r3, #0]
 8004b9a:	f242 0125 	movw	r1, #8229	; 0x2025
 8004b9e:	428a      	cmp	r2, r1
 8004ba0:	d017      	beq.n	8004bd2 <bt_hci_ecc_send+0x4e>
 8004ba2:	f242 0126 	movw	r1, #8230	; 0x2026
 8004ba6:	428a      	cmp	r2, r1
 8004ba8:	d03d      	beq.n	8004c26 <bt_hci_ecc_send+0xa2>
 8004baa:	f242 0101 	movw	r1, #8193	; 0x2001
 8004bae:	428a      	cmp	r2, r1
 8004bb0:	d107      	bne.n	8004bc2 <bt_hci_ecc_send+0x3e>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
 8004bb2:	78da      	ldrb	r2, [r3, #3]
 8004bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bb8:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
 8004bba:	791a      	ldrb	r2, [r3, #4]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
 8004bc2:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <bt_hci_ecc_send+0x110>)
 8004bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bc8:	4620      	mov	r0, r4
 8004bca:	68db      	ldr	r3, [r3, #12]
}
 8004bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
 8004bd0:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	3008      	adds	r0, #8
 8004bd6:	f00c fe04 	bl	80117e2 <net_buf_simple_pull>
	net_buf_unref(buf);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f00c fd76 	bl	80116cc <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004be0:	f3bf 8f5b 	dmb	ish
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <bt_hci_ecc_send+0x114>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
 8004bec:	0791      	lsls	r1, r2, #30
 8004bee:	d506      	bpl.n	8004bfe <bt_hci_ecc_send+0x7a>
		status = BT_HCI_ERR_CMD_DISALLOWED;
 8004bf0:	210c      	movs	r1, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
 8004bf2:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
 8004bf6:	f7ff fedd 	bl	80049b4 <send_cmd_status>
}
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8004bfe:	f3bf 8f5b 	dmb	ish
 8004c02:	e853 1f00 	ldrex	r1, [r3]
 8004c06:	f041 0201 	orr.w	r2, r1, #1
 8004c0a:	e843 2000 	strex	r0, r2, [r3]
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d1f7      	bne.n	8004c02 <bt_hci_ecc_send+0x7e>
 8004c12:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
 8004c16:	f011 0401 	ands.w	r4, r1, #1
 8004c1a:	d1e9      	bne.n	8004bf0 <bt_hci_ecc_send+0x6c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004c1c:	481f      	ldr	r0, [pc, #124]	; (8004c9c <bt_hci_ecc_send+0x118>)
 8004c1e:	f00d f9d9 	bl	8011fd4 <_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
 8004c22:	4621      	mov	r1, r4
 8004c24:	e7e5      	b.n	8004bf2 <bt_hci_ecc_send+0x6e>
			net_buf_pull(buf, sizeof(*chdr));
 8004c26:	2103      	movs	r1, #3
 8004c28:	3008      	adds	r0, #8
 8004c2a:	f00c fdda 	bl	80117e2 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004c2e:	f3bf 8f5b 	dmb	ish
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <bt_hci_ecc_send+0x114>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
 8004c3a:	07d2      	lsls	r2, r2, #31
 8004c3c:	d507      	bpl.n	8004c4e <bt_hci_ecc_send+0xca>
		status = BT_HCI_ERR_CMD_DISALLOWED;
 8004c3e:	250c      	movs	r5, #12
	net_buf_unref(buf);
 8004c40:	4620      	mov	r0, r4
 8004c42:	f00c fd43 	bl	80116cc <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
 8004c46:	4629      	mov	r1, r5
 8004c48:	f242 0026 	movw	r0, #8230	; 0x2026
 8004c4c:	e7d3      	b.n	8004bf6 <bt_hci_ecc_send+0x72>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
 8004c4e:	89a2      	ldrh	r2, [r4, #12]
 8004c50:	2a3f      	cmp	r2, #63	; 0x3f
 8004c52:	d91c      	bls.n	8004c8e <bt_hci_ecc_send+0x10a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8004c54:	f3bf 8f5b 	dmb	ish
 8004c58:	e853 5f00 	ldrex	r5, [r3]
 8004c5c:	f045 0202 	orr.w	r2, r5, #2
 8004c60:	e843 2100 	strex	r1, r2, [r3]
 8004c64:	2900      	cmp	r1, #0
 8004c66:	d1f7      	bne.n	8004c58 <bt_hci_ecc_send+0xd4>
 8004c68:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
 8004c6c:	f015 0502 	ands.w	r5, r5, #2
 8004c70:	d1e5      	bne.n	8004c3e <bt_hci_ecc_send+0xba>
	cmd = (void *)buf->data;
 8004c72:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
 8004c74:	480a      	ldr	r0, [pc, #40]	; (8004ca0 <bt_hci_ecc_send+0x11c>)
 8004c76:	4631      	mov	r1, r6
 8004c78:	f7ff fec2 	bl	8004a00 <sys_memcpy_swap.constprop.3>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
 8004c7c:	f106 0120 	add.w	r1, r6, #32
 8004c80:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <bt_hci_ecc_send+0x120>)
 8004c82:	f7ff febd 	bl	8004a00 <sys_memcpy_swap.constprop.3>
 8004c86:	4805      	ldr	r0, [pc, #20]	; (8004c9c <bt_hci_ecc_send+0x118>)
 8004c88:	f00d f9a4 	bl	8011fd4 <_impl_k_sem_give>
 8004c8c:	e7d8      	b.n	8004c40 <bt_hci_ecc_send+0xbc>
		status = BT_HCI_ERR_INVALID_PARAM;
 8004c8e:	2512      	movs	r5, #18
 8004c90:	e7d6      	b.n	8004c40 <bt_hci_ecc_send+0xbc>
 8004c92:	bf00      	nop
 8004c94:	200058e8 	.word	0x200058e8
 8004c98:	200004a4 	.word	0x200004a4
 8004c9c:	20006474 	.word	0x20006474
 8004ca0:	200003fc 	.word	0x200003fc
 8004ca4:	2000041c 	.word	0x2000041c

08004ca8 <default_CSPRNG>:

int default_CSPRNG(u8_t *dst, unsigned int len)
{
 8004ca8:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
 8004caa:	f001 fdd7 	bl	800685c <bt_rand>
}
 8004cae:	fab0 f080 	clz	r0, r0
 8004cb2:	0940      	lsrs	r0, r0, #5
 8004cb4:	bd08      	pop	{r3, pc}
	...

08004cb8 <bt_hci_ecc_init>:

void bt_hci_ecc_init(void)
{
 8004cb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	9305      	str	r3, [sp, #20]
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	9203      	str	r2, [sp, #12]
 8004cc4:	9302      	str	r3, [sp, #8]
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cce:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <bt_hci_ecc_init+0x28>)
 8004cd0:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <bt_hci_ecc_init+0x2c>)
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <bt_hci_ecc_init+0x30>)
 8004cd4:	f00d fbb6 	bl	8012444 <_impl_k_thread_create>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
}
 8004cd8:	b007      	add	sp, #28
 8004cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cde:	bf00      	nop
 8004ce0:	08004a15 	.word	0x08004a15
 8004ce4:	200016b8 	.word	0x200016b8
 8004ce8:	2000043c 	.word	0x2000043c

08004cec <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
 8004cec:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
 8004cee:	7802      	ldrb	r2, [r0, #0]
 8004cf0:	2a01      	cmp	r2, #1
{
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460b      	mov	r3, r1
	switch (src->type) {
 8004cf6:	d017      	beq.n	8004d28 <uuid_to_uuid128+0x3c>
 8004cf8:	d303      	bcc.n	8004d02 <uuid_to_uuid128+0x16>
 8004cfa:	2a02      	cmp	r2, #2
 8004cfc:	d02c      	beq.n	8004d58 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
 8004cfe:	bcf0      	pop	{r4, r5, r6, r7}
 8004d00:	4770      	bx	lr
		*dst = uuid128_base;
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <uuid_to_uuid128+0x78>)
 8004d04:	460d      	mov	r5, r1
 8004d06:	f102 0710 	add.w	r7, r2, #16
 8004d0a:	6810      	ldr	r0, [r2, #0]
 8004d0c:	6851      	ldr	r1, [r2, #4]
 8004d0e:	462e      	mov	r6, r5
 8004d10:	c603      	stmia	r6!, {r0, r1}
 8004d12:	3208      	adds	r2, #8
 8004d14:	42ba      	cmp	r2, r7
 8004d16:	4635      	mov	r5, r6
 8004d18:	d1f7      	bne.n	8004d0a <uuid_to_uuid128+0x1e>
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
 8004d1e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
 8004d20:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 8004d22:	0a12      	lsrs	r2, r2, #8
 8004d24:	739a      	strb	r2, [r3, #14]
 8004d26:	e7ea      	b.n	8004cfe <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
 8004d28:	4a0e      	ldr	r2, [pc, #56]	; (8004d64 <uuid_to_uuid128+0x78>)
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	f102 0710 	add.w	r7, r2, #16
 8004d30:	6810      	ldr	r0, [r2, #0]
 8004d32:	6851      	ldr	r1, [r2, #4]
 8004d34:	462e      	mov	r6, r5
 8004d36:	c603      	stmia	r6!, {r0, r1}
 8004d38:	3208      	adds	r2, #8
 8004d3a:	42ba      	cmp	r2, r7
 8004d3c:	4635      	mov	r5, r6
 8004d3e:	d1f7      	bne.n	8004d30 <uuid_to_uuid128+0x44>
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
 8004d44:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
 8004d46:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
 8004d48:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
 8004d4c:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
 8004d4e:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
 8004d50:	0a12      	lsrs	r2, r2, #8
 8004d52:	7399      	strb	r1, [r3, #14]
 8004d54:	741a      	strb	r2, [r3, #16]
 8004d56:	e7d2      	b.n	8004cfe <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
 8004d58:	4601      	mov	r1, r0
 8004d5a:	2211      	movs	r2, #17
 8004d5c:	4618      	mov	r0, r3
}
 8004d5e:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
 8004d60:	f7fb bd8e 	b.w	8000880 <memcpy>
 8004d64:	080137ec 	.word	0x080137ec

08004d68 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
 8004d6c:	7801      	ldrb	r1, [r0, #0]
 8004d6e:	7822      	ldrb	r2, [r4, #0]
 8004d70:	428a      	cmp	r2, r1
{
 8004d72:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
 8004d74:	d00e      	beq.n	8004d94 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
 8004d76:	4669      	mov	r1, sp
 8004d78:	f7ff ffb8 	bl	8004cec <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
 8004d7c:	a905      	add	r1, sp, #20
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff ffb4 	bl	8004cec <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
 8004d84:	2210      	movs	r2, #16
 8004d86:	f10d 0115 	add.w	r1, sp, #21
 8004d8a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8004d8e:	f7fb fd62 	bl	8000856 <memcmp>
 8004d92:	e00a      	b.n	8004daa <bt_uuid_cmp+0x42>
	switch (u1->type) {
 8004d94:	2a01      	cmp	r2, #1
 8004d96:	d00a      	beq.n	8004dae <bt_uuid_cmp+0x46>
 8004d98:	d304      	bcc.n	8004da4 <bt_uuid_cmp+0x3c>
 8004d9a:	2a02      	cmp	r2, #2
 8004d9c:	d00a      	beq.n	8004db4 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
 8004d9e:	f06f 0015 	mvn.w	r0, #21
 8004da2:	e002      	b.n	8004daa <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
 8004da4:	8840      	ldrh	r0, [r0, #2]
 8004da6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8004da8:	1ac0      	subs	r0, r0, r3
}
 8004daa:	b00a      	add	sp, #40	; 0x28
 8004dac:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
 8004dae:	6840      	ldr	r0, [r0, #4]
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	e7f9      	b.n	8004da8 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
 8004db4:	2210      	movs	r2, #16
 8004db6:	1c61      	adds	r1, r4, #1
 8004db8:	3001      	adds	r0, #1
 8004dba:	e7e8      	b.n	8004d8e <bt_uuid_cmp+0x26>

08004dbc <net_buf_user_data>:
 8004dbc:	89c3      	ldrh	r3, [r0, #14]
 8004dbe:	4418      	add	r0, r3
 8004dc0:	3013      	adds	r0, #19
}
 8004dc2:	f020 0003 	bic.w	r0, r0, #3
 8004dc6:	4770      	bx	lr

08004dc8 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
 8004dc8:	2207      	movs	r2, #7
 8004dca:	f7fb bd59 	b.w	8000880 <memcpy>

08004dce <atomic_or>:
{
 8004dce:	b500      	push	{lr}
}
 8004dd0:	f3bf 8f5b 	dmb	ish
 8004dd4:	e850 3f00 	ldrex	r3, [r0]
 8004dd8:	ea43 0201 	orr.w	r2, r3, r1
 8004ddc:	e840 2e00 	strex	lr, r2, [r0]
 8004de0:	f1be 0f00 	cmp.w	lr, #0
 8004de4:	d1f6      	bne.n	8004dd4 <atomic_or+0x6>
 8004de6:	f3bf 8f5b 	dmb	ish
 8004dea:	4618      	mov	r0, r3
 8004dec:	f85d fb04 	ldr.w	pc, [sp], #4

08004df0 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 8004df0:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8004df2:	f3bf 8f5b 	dmb	ish
 8004df6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004dfa:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
 8004dfe:	f001 011f 	and.w	r1, r1, #31
 8004e02:	4108      	asrs	r0, r1
}
 8004e04:	f000 0001 	and.w	r0, r0, #1
 8004e08:	4770      	bx	lr

08004e0a <atomic_and>:
{
 8004e0a:	b500      	push	{lr}
}
 8004e0c:	f3bf 8f5b 	dmb	ish
 8004e10:	e850 3f00 	ldrex	r3, [r0]
 8004e14:	ea03 0201 	and.w	r2, r3, r1
 8004e18:	e840 2e00 	strex	lr, r2, [r0]
 8004e1c:	f1be 0f00 	cmp.w	lr, #0
 8004e20:	d1f6      	bne.n	8004e10 <atomic_and+0x6>
 8004e22:	f3bf 8f5b 	dmb	ish
 8004e26:	4618      	mov	r0, r3
 8004e28:	f85d fb04 	ldr.w	pc, [sp], #4

08004e2c <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
 8004e2c:	78c3      	ldrb	r3, [r0, #3]
 8004e2e:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	f100 0170 	add.w	r1, r0, #112	; 0x70
 8004e38:	bf08      	it	eq
 8004e3a:	2200      	moveq	r2, #0
 8004e3c:	4801      	ldr	r0, [pc, #4]	; (8004e44 <update_conn_param+0x18>)
 8004e3e:	f00d bc5b 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 8004e42:	bf00      	nop
 8004e44:	20001480 	.word	0x20001480

08004e48 <hci_cmd_done.isra.13>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4605      	mov	r5, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004e4c:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
 8004e4e:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
 8004e50:	f00c fb6a 	bl	8011528 <net_buf_pool_get>
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <hci_cmd_done.isra.13+0x30>)
 8004e56:	4283      	cmp	r3, r0
 8004e58:	d10d      	bne.n	8004e76 <hci_cmd_done.isra.13+0x2e>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7ff ffae 	bl	8004dbc <net_buf_user_data>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
 8004e60:	6843      	ldr	r3, [r0, #4]
 8004e62:	b143      	cbz	r3, 8004e76 <hci_cmd_done.isra.13+0x2e>
		cmd(buf)->status = status;
 8004e64:	7045      	strb	r5, [r0, #1]
		k_sem_give(cmd(buf)->sync);
 8004e66:	4620      	mov	r0, r4
 8004e68:	f7ff ffa8 	bl	8004dbc <net_buf_user_data>
	}
}
 8004e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004e70:	6840      	ldr	r0, [r0, #4]
 8004e72:	f00d b8af 	b.w	8011fd4 <_impl_k_sem_give>
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20006564 	.word	0x20006564

08004e7c <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
 8004e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
 8004e80:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004f60 <hci_tx_thread+0xe4>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004e84:	4c34      	ldr	r4, [pc, #208]	; (8004f58 <hci_tx_thread+0xdc>)
		events[0].state = K_POLL_STATE_NOT_READY;
 8004e86:	f898 300d 	ldrb.w	r3, [r8, #13]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BT_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
 8004e8a:	4834      	ldr	r0, [pc, #208]	; (8004f5c <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
 8004e8c:	f36f 1307 	bfc	r3, #4, #4
 8004e90:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
 8004e94:	f001 febe 	bl	8006c14 <bt_conn_prepare_events>
 8004e98:	1c46      	adds	r6, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	482f      	ldr	r0, [pc, #188]	; (8004f60 <hci_tx_thread+0xe4>)
 8004ea2:	f00d fd81 	bl	80129a8 <k_poll>
		BT_ASSERT(err == 0);
 8004ea6:	b9b8      	cbnz	r0, 8004ed8 <hci_tx_thread+0x5c>
 8004ea8:	4d2d      	ldr	r5, [pc, #180]	; (8004f60 <hci_tx_thread+0xe4>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004eaa:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8004f64 <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004eae:	f104 0be4 	add.w	fp, r4, #228	; 0xe4
	for (; count; ev++, count--) {
 8004eb2:	b916      	cbnz	r6, 8004eba <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 8004eb4:	f00c ffc6 	bl	8011e44 <_impl_k_yield>
 8004eb8:	e7e5      	b.n	8004e86 <hci_tx_thread+0xa>
		switch (ev->state) {
 8004eba:	7b6b      	ldrb	r3, [r5, #13]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d136      	bne.n	8004f30 <hci_tx_thread+0xb4>
			if (ev->tag == BT_EVENT_CMD_TX) {
 8004ec2:	f895 a00c 	ldrb.w	sl, [r5, #12]
 8004ec6:	f1ba 0f00 	cmp.w	sl, #0
 8004eca:	d134      	bne.n	8004f36 <hci_tx_thread+0xba>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
 8004ecc:	4651      	mov	r1, sl
 8004ece:	4658      	mov	r0, fp
 8004ed0:	f00c fb86 	bl	80115e0 <net_buf_get>
	BT_ASSERT(buf);
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	b928      	cbnz	r0, 8004ee4 <hci_tx_thread+0x68>
 8004ed8:	4040      	eors	r0, r0
 8004eda:	f380 8811 	msr	BASEPRI, r0
 8004ede:	f04f 0004 	mov.w	r0, #4
 8004ee2:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8004ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ee8:	4648      	mov	r0, r9
 8004eea:	f00d f8b5 	bl	8012058 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
 8004eee:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8004ef2:	b118      	cbz	r0, 8004efc <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
 8004ef4:	f00c fbea 	bl	80116cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8004ef8:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
 8004efc:	4638      	mov	r0, r7
 8004efe:	f00c fc01 	bl	8011704 <net_buf_ref>
 8004f02:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
 8004f06:	4638      	mov	r0, r7
 8004f08:	f7ff fe3c 	bl	8004b84 <bt_hci_ecc_send>
	if (err) {
 8004f0c:	b180      	cbz	r0, 8004f30 <hci_tx_thread+0xb4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8004f0e:	4648      	mov	r0, r9
 8004f10:	f00d f860 	bl	8011fd4 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
 8004f14:	2100      	movs	r1, #0
 8004f16:	201f      	movs	r0, #31
 8004f18:	f7ff ff96 	bl	8004e48 <hci_cmd_done.isra.13>
		net_buf_unref(bt_dev.sent_cmd);
 8004f1c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8004f20:	f00c fbd4 	bl	80116cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
 8004f24:	2300      	movs	r3, #0
		net_buf_unref(buf);
 8004f26:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
 8004f28:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
 8004f2c:	f00c fbce 	bl	80116cc <net_buf_unref>
	for (; count; ev++, count--) {
 8004f30:	3514      	adds	r5, #20
 8004f32:	3e01      	subs	r6, #1
 8004f34:	e7bd      	b.n	8004eb2 <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
 8004f36:	f1ba 0f01 	cmp.w	sl, #1
 8004f3a:	d104      	bne.n	8004f46 <hci_tx_thread+0xca>
					conn = CONTAINER_OF(ev->fifo,
 8004f3c:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
 8004f3e:	3818      	subs	r0, #24
 8004f40:	f001 fda4 	bl	8006a8c <bt_conn_notify_tx>
 8004f44:	e7f4      	b.n	8004f30 <hci_tx_thread+0xb4>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
 8004f46:	f1ba 0f02 	cmp.w	sl, #2
 8004f4a:	d1f1      	bne.n	8004f30 <hci_tx_thread+0xb4>
					conn = CONTAINER_OF(ev->fifo,
 8004f4c:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
 8004f4e:	3828      	subs	r0, #40	; 0x28
 8004f50:	f002 f8d8 	bl	8007104 <bt_conn_process_tx>
 8004f54:	e7ec      	b.n	8004f30 <hci_tx_thread+0xb4>
 8004f56:	bf00      	nop
 8004f58:	200058e8 	.word	0x200058e8
 8004f5c:	200059f4 	.word	0x200059f4
 8004f60:	200059e0 	.word	0x200059e0
 8004f64:	20005990 	.word	0x20005990

08004f68 <bt_hci_cmd_create>:
{
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 8004f6e:	480f      	ldr	r0, [pc, #60]	; (8004fac <bt_hci_cmd_create+0x44>)
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f74:	f00c faf4 	bl	8011560 <net_buf_alloc>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8004f78:	2101      	movs	r1, #1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
 8004f7a:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8004f7c:	f00c fb49 	bl	8011612 <net_buf_reserve>
	cmd(buf)->type = BT_BUF_CMD;
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7ff ff1b 	bl	8004dbc <net_buf_user_data>
 8004f86:	2200      	movs	r2, #0
 8004f88:	7002      	strb	r2, [r0, #0]
	cmd(buf)->opcode = opcode;
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff ff16 	bl	8004dbc <net_buf_user_data>
 8004f90:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff ff12 	bl	8004dbc <net_buf_user_data>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004f98:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
 8004f9a:	6042      	str	r2, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
 8004f9c:	f104 0008 	add.w	r0, r4, #8
 8004fa0:	f00c fbb4 	bl	801170c <net_buf_simple_add>
	hdr->param_len = param_len;
 8004fa4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
 8004fa6:	8005      	strh	r5, [r0, #0]
}
 8004fa8:	4620      	mov	r0, r4
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fac:	20006564 	.word	0x20006564

08004fb0 <bt_hci_cmd_send>:
{
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4605      	mov	r5, r0
	if (!buf) {
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	b919      	cbnz	r1, 8004fc0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
 8004fb8:	f7ff ffd6 	bl	8004f68 <bt_hci_cmd_create>
		if (!buf) {
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	b198      	cbz	r0, 8004fe8 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
 8004fc0:	f640 4335 	movw	r3, #3125	; 0xc35
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	d109      	bne.n	8004fdc <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff fddb 	bl	8004b84 <bt_hci_ecc_send>
		if (err) {
 8004fce:	4605      	mov	r5, r0
 8004fd0:	b110      	cbz	r0, 8004fd8 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f00c fb7a 	bl	80116cc <net_buf_unref>
}
 8004fd8:	4628      	mov	r0, r5
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4804      	ldr	r0, [pc, #16]	; (8004ff0 <bt_hci_cmd_send+0x40>)
 8004fe0:	f00c fb66 	bl	80116b0 <net_buf_put>
	return 0;
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	e7f7      	b.n	8004fd8 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
 8004fe8:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8004fec:	e7f4      	b.n	8004fd8 <bt_hci_cmd_send+0x28>
 8004fee:	bf00      	nop
 8004ff0:	200059cc 	.word	0x200059cc

08004ff4 <report_completed_packet>:
{
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	4604      	mov	r4, r0
	u16_t handle = acl(buf)->handle;
 8004ff8:	f7ff fee0 	bl	8004dbc <net_buf_user_data>
 8004ffc:	8847      	ldrh	r7, [r0, #2]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8004ffe:	79a0      	ldrb	r0, [r4, #6]
 8005000:	f00c fa92 	bl	8011528 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 8005004:	4621      	mov	r1, r4
 8005006:	f00c fd56 	bl	8011ab6 <k_queue_prepend>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
 800500a:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <report_completed_packet+0x80>)
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005010:	069b      	lsls	r3, r3, #26
 8005012:	d52e      	bpl.n	8005072 <report_completed_packet+0x7e>
	conn = bt_conn_lookup_id(acl(buf)->id);
 8005014:	4620      	mov	r0, r4
 8005016:	f7ff fed1 	bl	8004dbc <net_buf_user_data>
 800501a:	7840      	ldrb	r0, [r0, #1]
 800501c:	f002 f8d8 	bl	80071d0 <bt_conn_lookup_id>
	if (!conn) {
 8005020:	b338      	cbz	r0, 8005072 <report_completed_packet+0x7e>
	if (conn->state != BT_CONN_CONNECTED &&
 8005022:	7a43      	ldrb	r3, [r0, #9]
 8005024:	3b03      	subs	r3, #3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d903      	bls.n	8005032 <report_completed_packet+0x3e>
}
 800502a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
 800502e:	f001 bf70 	b.w	8006f12 <bt_conn_unref>
	bt_conn_unref(conn);
 8005032:	f001 ff6e 	bl	8006f12 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
 8005036:	2105      	movs	r1, #5
 8005038:	f640 4035 	movw	r0, #3125	; 0xc35
 800503c:	f7ff ff94 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005040:	4604      	mov	r4, r0
 8005042:	b1b0      	cbz	r0, 8005072 <report_completed_packet+0x7e>
	cp = net_buf_add(buf, sizeof(*cp));
 8005044:	f100 0608 	add.w	r6, r0, #8
 8005048:	2101      	movs	r1, #1
 800504a:	4630      	mov	r0, r6
 800504c:	f00c fb5e 	bl	801170c <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
 8005050:	2501      	movs	r5, #1
 8005052:	7005      	strb	r5, [r0, #0]
	hc = net_buf_add(buf, sizeof(*hc));
 8005054:	2104      	movs	r1, #4
 8005056:	4630      	mov	r0, r6
 8005058:	f00c fb58 	bl	801170c <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
 800505c:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
 800505e:	8007      	strh	r7, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
 8005060:	7085      	strb	r5, [r0, #2]
 8005062:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 8005064:	4621      	mov	r1, r4
 8005066:	f640 4035 	movw	r0, #3125	; 0xc35
}
 800506a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
 800506e:	f7ff bf9f 	b.w	8004fb0 <bt_hci_cmd_send>
 8005072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005074:	200058e8 	.word	0x200058e8

08005078 <hci_le_set_phy.isra.25>:
static int hci_le_set_phy(struct bt_conn *conn)
 8005078:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 800507a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
 800507c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
 800507e:	f242 0032 	movw	r0, #8242	; 0x2032
 8005082:	f7ff ff71 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005086:	4605      	mov	r5, r0
 8005088:	b198      	cbz	r0, 80050b2 <hci_le_set_phy.isra.25+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
 800508a:	2107      	movs	r1, #7
 800508c:	3008      	adds	r0, #8
 800508e:	f00c fb3d 	bl	801170c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8005092:	8823      	ldrh	r3, [r4, #0]
 8005094:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
 8005096:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
 8005098:	2302      	movs	r3, #2
	cp->all_phys = 0;
 800509a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
 800509c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
 800509e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
 80050a0:	7144      	strb	r4, [r0, #5]
 80050a2:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
 80050a4:	4629      	mov	r1, r5
 80050a6:	f242 0032 	movw	r0, #8242	; 0x2032
 80050aa:	f7ff ff81 	bl	8004fb0 <bt_hci_cmd_send>
	return 0;
 80050ae:	4620      	mov	r0, r4
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
 80050b2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 80050b6:	bd38      	pop	{r3, r4, r5, pc}

080050b8 <le_conn_param_neg_reply>:
{
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4606      	mov	r6, r0
 80050bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
 80050be:	f242 0021 	movw	r0, #8225	; 0x2021
 80050c2:	2103      	movs	r1, #3
 80050c4:	f7ff ff50 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 80050c8:	4604      	mov	r4, r0
 80050ca:	b160      	cbz	r0, 80050e6 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
 80050cc:	2103      	movs	r1, #3
 80050ce:	3008      	adds	r0, #8
 80050d0:	f00c fb1c 	bl	801170c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
 80050d4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
 80050d6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 80050d8:	4621      	mov	r1, r4
 80050da:	f242 0021 	movw	r0, #8225	; 0x2021
}
 80050de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
 80050e2:	f7ff bf65 	b.w	8004fb0 <bt_hci_cmd_send>
}
 80050e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80050ea:	bd70      	pop	{r4, r5, r6, pc}

080050ec <bt_hci_cmd_send_sync>:
{
 80050ec:	b530      	push	{r4, r5, lr}
 80050ee:	4615      	mov	r5, r2
 80050f0:	b087      	sub	sp, #28
	if (!buf) {
 80050f2:	460c      	mov	r4, r1
 80050f4:	b919      	cbnz	r1, 80050fe <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
 80050f6:	f7ff ff37 	bl	8004f68 <bt_hci_cmd_create>
		if (!buf) {
 80050fa:	4604      	mov	r4, r0
 80050fc:	b348      	cbz	r0, 8005152 <bt_hci_cmd_send_sync+0x66>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 80050fe:	2201      	movs	r2, #1
 8005100:	2100      	movs	r1, #0
 8005102:	4668      	mov	r0, sp
 8005104:	f00c ff5c 	bl	8011fc0 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff fe57 	bl	8004dbc <net_buf_user_data>
 800510e:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
 8005112:	4620      	mov	r0, r4
 8005114:	f00c faf6 	bl	8011704 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
 8005118:	4621      	mov	r1, r4
 800511a:	480f      	ldr	r0, [pc, #60]	; (8005158 <bt_hci_cmd_send_sync+0x6c>)
 800511c:	f00c fac8 	bl	80116b0 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8005120:	f242 7110 	movw	r1, #10000	; 0x2710
 8005124:	4668      	mov	r0, sp
 8005126:	f00c ff97 	bl	8012058 <_impl_k_sem_take>
	if (cmd(buf)->status) {
 800512a:	4620      	mov	r0, r4
 800512c:	f7ff fe46 	bl	8004dbc <net_buf_user_data>
 8005130:	7840      	ldrb	r0, [r0, #1]
 8005132:	b130      	cbz	r0, 8005142 <bt_hci_cmd_send_sync+0x56>
		net_buf_unref(buf);
 8005134:	4620      	mov	r0, r4
 8005136:	f00c fac9 	bl	80116cc <net_buf_unref>
		err = -EIO;
 800513a:	f06f 0004 	mvn.w	r0, #4
}
 800513e:	b007      	add	sp, #28
 8005140:	bd30      	pop	{r4, r5, pc}
		if (rsp) {
 8005142:	b10d      	cbz	r5, 8005148 <bt_hci_cmd_send_sync+0x5c>
			*rsp = buf;
 8005144:	602c      	str	r4, [r5, #0]
 8005146:	e7fa      	b.n	800513e <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
 8005148:	4620      	mov	r0, r4
 800514a:	f00c fabf 	bl	80116cc <net_buf_unref>
		err = 0;
 800514e:	4628      	mov	r0, r5
 8005150:	e7f5      	b.n	800513e <bt_hci_cmd_send_sync+0x52>
			return -ENOBUFS;
 8005152:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8005156:	e7f2      	b.n	800513e <bt_hci_cmd_send_sync+0x52>
 8005158:	200059cc 	.word	0x200059cc

0800515c <set_random_address>:
{
 800515c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
 800515e:	4d15      	ldr	r5, [pc, #84]	; (80051b4 <set_random_address+0x58>)
 8005160:	2206      	movs	r2, #6
 8005162:	f105 0108 	add.w	r1, r5, #8
 8005166:	4606      	mov	r6, r0
 8005168:	f7fb fb75 	bl	8000856 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
 800516c:	4604      	mov	r4, r0
 800516e:	b1d8      	cbz	r0, 80051a8 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
 8005170:	2106      	movs	r1, #6
 8005172:	f242 0005 	movw	r0, #8197	; 0x2005
 8005176:	f7ff fef7 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 800517a:	4604      	mov	r4, r0
 800517c:	b1b0      	cbz	r0, 80051ac <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
 800517e:	2206      	movs	r2, #6
 8005180:	4631      	mov	r1, r6
 8005182:	3008      	adds	r0, #8
 8005184:	f00c fac8 	bl	8011718 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
 8005188:	4621      	mov	r1, r4
 800518a:	2200      	movs	r2, #0
 800518c:	f242 0005 	movw	r0, #8197	; 0x2005
 8005190:	f7ff ffac 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005194:	4604      	mov	r4, r0
 8005196:	b938      	cbnz	r0, 80051a8 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
 8005198:	2206      	movs	r2, #6
 800519a:	4631      	mov	r1, r6
 800519c:	f105 0008 	add.w	r0, r5, #8
 80051a0:	f7fb fb6e 	bl	8000880 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
 80051a4:	2301      	movs	r3, #1
 80051a6:	71eb      	strb	r3, [r5, #7]
}
 80051a8:	4620      	mov	r0, r4
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 80051ac:	f06f 0436 	mvn.w	r4, #54	; 0x36
 80051b0:	e7fa      	b.n	80051a8 <set_random_address+0x4c>
 80051b2:	bf00      	nop
 80051b4:	200058e8 	.word	0x200058e8

080051b8 <le_set_private_addr>:
{
 80051b8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
 80051ba:	2106      	movs	r1, #6
 80051bc:	4668      	mov	r0, sp
 80051be:	f001 fb4d 	bl	800685c <bt_rand>
	if (err) {
 80051c2:	b940      	cbnz	r0, 80051d6 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
 80051c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
 80051c8:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
 80051ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ce:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
 80051d2:	f7ff ffc3 	bl	800515c <set_random_address>
}
 80051d6:	b003      	add	sp, #12
 80051d8:	f85d fb04 	ldr.w	pc, [sp], #4

080051dc <set_le_scan_enable>:
{
 80051dc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
 80051de:	2102      	movs	r1, #2
{
 80051e0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
 80051e2:	f242 000c 	movw	r0, #8204	; 0x200c
 80051e6:	f7ff febf 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 80051ea:	4604      	mov	r4, r0
 80051ec:	b328      	cbz	r0, 800523a <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
 80051ee:	2102      	movs	r1, #2
 80051f0:	3008      	adds	r0, #8
 80051f2:	f00c fa8b 	bl	801170c <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 80051f6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
 80051f8:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 80051fa:	d115      	bne.n	8005228 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
 80051fc:	210a      	movs	r1, #10
 80051fe:	4810      	ldr	r0, [pc, #64]	; (8005240 <set_le_scan_enable+0x64>)
 8005200:	f7ff fdf6 	bl	8004df0 <atomic_test_bit>
 8005204:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
 8005206:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
 8005208:	4621      	mov	r1, r4
 800520a:	2200      	movs	r2, #0
 800520c:	f242 000c 	movw	r0, #8204	; 0x200c
 8005210:	f7ff ff6c 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005214:	4604      	mov	r4, r0
 8005216:	b928      	cbnz	r0, 8005224 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
 8005218:	2d01      	cmp	r5, #1
 800521a:	d108      	bne.n	800522e <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	4808      	ldr	r0, [pc, #32]	; (8005240 <set_le_scan_enable+0x64>)
 8005220:	f7ff fdd5 	bl	8004dce <atomic_or>
}
 8005224:	4620      	mov	r0, r4
 8005226:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	7043      	strb	r3, [r0, #1]
 800522c:	e7eb      	b.n	8005206 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800522e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8005232:	4803      	ldr	r0, [pc, #12]	; (8005240 <set_le_scan_enable+0x64>)
 8005234:	f7ff fde9 	bl	8004e0a <atomic_and>
 8005238:	e7f4      	b.n	8005224 <set_le_scan_enable+0x48>
		return -ENOBUFS;
 800523a:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800523e:	e7f1      	b.n	8005224 <set_le_scan_enable+0x48>
 8005240:	20005958 	.word	0x20005958

08005244 <set_advertise_enable>:
{
 8005244:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 8005246:	2101      	movs	r1, #1
{
 8005248:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
 800524a:	f242 000a 	movw	r0, #8202	; 0x200a
 800524e:	f7ff fe8b 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005252:	4604      	mov	r4, r0
 8005254:	b1d8      	cbz	r0, 800528e <set_advertise_enable+0x4a>
 8005256:	3008      	adds	r0, #8
	if (enable) {
 8005258:	b18d      	cbz	r5, 800527e <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
 800525a:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 800525c:	f00c fa65 	bl	801172a <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
 8005260:	4621      	mov	r1, r4
 8005262:	2200      	movs	r2, #0
 8005264:	f242 000a 	movw	r0, #8202	; 0x200a
 8005268:	f7ff ff40 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 800526c:	4604      	mov	r4, r0
 800526e:	b920      	cbnz	r0, 800527a <set_advertise_enable+0x36>
	if (enable) {
 8005270:	b13d      	cbz	r5, 8005282 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8005272:	2120      	movs	r1, #32
 8005274:	4807      	ldr	r0, [pc, #28]	; (8005294 <set_advertise_enable+0x50>)
 8005276:	f7ff fdaa 	bl	8004dce <atomic_or>
}
 800527a:	4620      	mov	r0, r4
 800527c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
 800527e:	4629      	mov	r1, r5
 8005280:	e7ec      	b.n	800525c <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8005282:	f06f 0120 	mvn.w	r1, #32
 8005286:	4803      	ldr	r0, [pc, #12]	; (8005294 <set_advertise_enable+0x50>)
 8005288:	f7ff fdbf 	bl	8004e0a <atomic_and>
 800528c:	e7f5      	b.n	800527a <set_advertise_enable+0x36>
		return -ENOBUFS;
 800528e:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8005292:	e7f2      	b.n	800527a <set_advertise_enable+0x36>
 8005294:	20005958 	.word	0x20005958

08005298 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 800529e:	2120      	movs	r1, #32
{
 80052a0:	4607      	mov	r7, r0
 80052a2:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
 80052a4:	f7ff fe60 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 80052a8:	4606      	mov	r6, r0
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d03c      	beq.n	8005328 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
 80052ae:	2120      	movs	r1, #32
 80052b0:	3008      	adds	r0, #8
 80052b2:	f00c fa2b 	bl	801170c <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
 80052b6:	2220      	movs	r2, #32
 80052b8:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
 80052ba:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
 80052bc:	f7fb fb0c 	bl	80008d8 <memset>

	for (i = 0; i < ad_len; i++) {
 80052c0:	f04f 0900 	mov.w	r9, #0
 80052c4:	45c1      	cmp	r9, r8
 80052c6:	d106      	bne.n	80052d6 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 80052c8:	4631      	mov	r1, r6
 80052ca:	4638      	mov	r0, r7
 80052cc:	2200      	movs	r2, #0
}
 80052ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
 80052d2:	f7ff bf0b 	b.w	80050ec <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
 80052d6:	7862      	ldrb	r2, [r4, #1]
 80052d8:	782b      	ldrb	r3, [r5, #0]
 80052da:	18d1      	adds	r1, r2, r3
 80052dc:	3102      	adds	r1, #2
 80052de:	291f      	cmp	r1, #31
 80052e0:	f104 0408 	add.w	r4, r4, #8
 80052e4:	dd06      	ble.n	80052f4 <set_ad+0x5c>
			net_buf_unref(buf);
 80052e6:	4630      	mov	r0, r6
 80052e8:	f00c f9f0 	bl	80116cc <net_buf_unref>
			return -EINVAL;
 80052ec:	f06f 0015 	mvn.w	r0, #21
 80052f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
 80052f4:	18e9      	adds	r1, r5, r3
 80052f6:	1c50      	adds	r0, r2, #1
 80052f8:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
 80052fa:	1c98      	adds	r0, r3, #2
 80052fc:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
 80052fe:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
 8005300:	7028      	strb	r0, [r5, #0]
 8005302:	fa55 f383 	uxtab	r3, r5, r3
 8005306:	f814 1c08 	ldrb.w	r1, [r4, #-8]
 800530a:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
 800530c:	3001      	adds	r0, #1
 800530e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005312:	4428      	add	r0, r5
 8005314:	f7fb fab4 	bl	8000880 <memcpy>
		set_data->len += ad[i].data_len;
 8005318:	782b      	ldrb	r3, [r5, #0]
 800531a:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 800531e:	4413      	add	r3, r2
 8005320:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
 8005322:	f109 0901 	add.w	r9, r9, #1
 8005326:	e7cd      	b.n	80052c4 <set_ad+0x2c>
		return -ENOBUFS;
 8005328:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800532c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005330 <hci_le_set_data_len.isra.26>:
static int hci_le_set_data_len(struct bt_conn *conn)
 8005330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005332:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
 8005334:	aa01      	add	r2, sp, #4
 8005336:	2100      	movs	r1, #0
 8005338:	f242 002f 	movw	r0, #8239	; 0x202f
 800533c:	f7ff fed6 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005340:	b9d8      	cbnz	r0, 800537a <hci_le_set_data_len.isra.26+0x4a>
	rp = (void *)rsp->data;
 8005342:	9801      	ldr	r0, [sp, #4]
 8005344:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 8005346:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
 800534a:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
 800534e:	f00c f9bd 	bl	80116cc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
 8005352:	2106      	movs	r1, #6
 8005354:	f242 0022 	movw	r0, #8226	; 0x2022
 8005358:	f7ff fe06 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 800535c:	4604      	mov	r4, r0
 800535e:	b170      	cbz	r0, 800537e <hci_le_set_data_len.isra.26+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
 8005360:	2106      	movs	r1, #6
 8005362:	3008      	adds	r0, #8
 8005364:	f00c f9d2 	bl	801170c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8005368:	883b      	ldrh	r3, [r7, #0]
 800536a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
 800536c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
 800536e:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
 8005370:	4621      	mov	r1, r4
 8005372:	f242 0022 	movw	r0, #8226	; 0x2022
 8005376:	f7ff fe1b 	bl	8004fb0 <bt_hci_cmd_send>
}
 800537a:	b003      	add	sp, #12
 800537c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 800537e:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8005382:	e7fa      	b.n	800537a <hci_le_set_data_len.isra.26+0x4a>

08005384 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
 8005384:	8802      	ldrh	r2, [r0, #0]
 8005386:	8843      	ldrh	r3, [r0, #2]
 8005388:	429a      	cmp	r2, r3
{
 800538a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
 800538c:	d818      	bhi.n	80053c0 <bt_le_conn_params_valid+0x3c>
 800538e:	2a05      	cmp	r2, #5
 8005390:	d916      	bls.n	80053c0 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
 8005392:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8005396:	d813      	bhi.n	80053c0 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
 8005398:	8884      	ldrh	r4, [r0, #4]
 800539a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800539e:	d20f      	bcs.n	80053c0 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
 80053a0:	88c1      	ldrh	r1, [r0, #6]
 80053a2:	f1a1 020a 	sub.w	r2, r1, #10
 80053a6:	b292      	uxth	r2, r2
 80053a8:	f640 4076 	movw	r0, #3190	; 0xc76
 80053ac:	4282      	cmp	r2, r0
 80053ae:	d807      	bhi.n	80053c0 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
 80053b0:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
 80053b4:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80053b8:	bfb4      	ite	lt
 80053ba:	2001      	movlt	r0, #1
 80053bc:	2000      	movge	r0, #0
 80053be:	bd10      	pop	{r4, pc}
		return false;
 80053c0:	2000      	movs	r0, #0
}
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <bt_le_scan_update>:
{
 80053c4:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80053c6:	2108      	movs	r1, #8
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <bt_le_scan_update+0x28>)
 80053ca:	f7ff fd11 	bl	8004df0 <atomic_test_bit>
 80053ce:	4602      	mov	r2, r0
 80053d0:	b948      	cbnz	r0, 80053e6 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 80053d2:	2107      	movs	r1, #7
 80053d4:	4805      	ldr	r0, [pc, #20]	; (80053ec <bt_le_scan_update+0x28>)
 80053d6:	f7ff fd0b 	bl	8004df0 <atomic_test_bit>
 80053da:	b120      	cbz	r0, 80053e6 <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 80053dc:	4610      	mov	r0, r2
}
 80053de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 80053e2:	f7ff befb 	b.w	80051dc <set_le_scan_enable>
}
 80053e6:	2000      	movs	r0, #0
 80053e8:	bd08      	pop	{r3, pc}
 80053ea:	bf00      	nop
 80053ec:	20005958 	.word	0x20005958

080053f0 <le_enh_conn_complete>:
{
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
 80053f2:	7803      	ldrb	r3, [r0, #0]
{
 80053f4:	b085      	sub	sp, #20
 80053f6:	4605      	mov	r5, r0
	if (evt->status) {
 80053f8:	b17b      	cbz	r3, 800541a <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
 80053fa:	2102      	movs	r1, #2
 80053fc:	2000      	movs	r0, #0
 80053fe:	f001 fd5f 	bl	8006ec0 <bt_conn_lookup_state_le>
		if (!conn) {
 8005402:	4604      	mov	r4, r0
 8005404:	b138      	cbz	r0, 8005416 <le_enh_conn_complete+0x26>
		conn->err = evt->status;
 8005406:	782b      	ldrb	r3, [r5, #0]
 8005408:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800540a:	2100      	movs	r1, #0
 800540c:	f001 fc7e 	bl	8006d0c <bt_conn_set_state>
		bt_conn_unref(conn);
 8005410:	4620      	mov	r0, r4
 8005412:	f001 fd7e 	bl	8006f12 <bt_conn_unref>
}
 8005416:	b005      	add	sp, #20
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
 800541a:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
 800541c:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
 8005420:	4621      	mov	r1, r4
 8005422:	a802      	add	r0, sp, #8
 8005424:	f7ff fcd0 	bl	8004dc8 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
 8005428:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800542c:	3b02      	subs	r3, #2
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d87d      	bhi.n	8005530 <le_enh_conn_complete+0x140>
 8005434:	2206      	movs	r2, #6
 8005436:	f105 0111 	add.w	r1, r5, #17
 800543a:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 800543e:	f88d 3008 	strb.w	r3, [sp, #8]
 8005442:	f7fb fa1d 	bl	8000880 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
 8005446:	2301      	movs	r3, #1
 8005448:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
 800544c:	2102      	movs	r1, #2
 800544e:	a802      	add	r0, sp, #8
 8005450:	f001 fd36 	bl	8006ec0 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
 8005454:	78eb      	ldrb	r3, [r5, #3]
 8005456:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
 8005458:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
 800545a:	d109      	bne.n	8005470 <le_enh_conn_complete+0x80>
 800545c:	f06f 0120 	mvn.w	r1, #32
 8005460:	4844      	ldr	r0, [pc, #272]	; (8005574 <le_enh_conn_complete+0x184>)
 8005462:	f7ff fcd2 	bl	8004e0a <atomic_and>
		if (!conn) {
 8005466:	b92c      	cbnz	r4, 8005474 <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
 8005468:	a802      	add	r0, sp, #8
 800546a:	f001 fc1b 	bl	8006ca4 <bt_conn_add_le>
 800546e:	4604      	mov	r4, r0
	if (!conn) {
 8005470:	2c00      	cmp	r4, #0
 8005472:	d0d0      	beq.n	8005416 <le_enh_conn_complete+0x26>
	conn->handle   = handle;
 8005474:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
 8005476:	a902      	add	r1, sp, #8
	conn->handle   = handle;
 8005478:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
 800547c:	f7ff fca4 	bl	8004dc8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
 8005480:	7e2a      	ldrb	r2, [r5, #24]
 8005482:	7deb      	ldrb	r3, [r5, #23]
 8005484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005488:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
 800548c:	7eaa      	ldrb	r2, [r5, #26]
 800548e:	7e6b      	ldrb	r3, [r5, #25]
 8005490:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005494:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 8005498:	7eeb      	ldrb	r3, [r5, #27]
 800549a:	7f2a      	ldrb	r2, [r5, #28]
 800549c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054a0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
 80054a4:	78ee      	ldrb	r6, [r5, #3]
 80054a6:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
 80054a8:	2e01      	cmp	r6, #1
 80054aa:	d11a      	bne.n	80054e2 <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
 80054ac:	4f32      	ldr	r7, [pc, #200]	; (8005578 <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
 80054ae:	4669      	mov	r1, sp
 80054b0:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 80054b4:	f7ff fc88 	bl	8004dc8 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
 80054b8:	4639      	mov	r1, r7
 80054ba:	f104 0052 	add.w	r0, r4, #82	; 0x52
 80054be:	f7ff fc83 	bl	8004dc8 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 80054c2:	2106      	movs	r1, #6
 80054c4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80054c8:	f7ff fc92 	bl	8004df0 <atomic_test_bit>
 80054cc:	b148      	cbz	r0, 80054e2 <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
 80054ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80054d2:	2200      	movs	r2, #0
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 80054d8:	4313      	orrs	r3, r2
 80054da:	d002      	beq.n	80054e2 <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff feb1 	bl	8005244 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
 80054e2:	2103      	movs	r1, #3
 80054e4:	4620      	mov	r0, r4
 80054e6:	f001 fc11 	bl	8006d0c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
 80054ea:	7a63      	ldrb	r3, [r4, #9]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d118      	bne.n	8005522 <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
 80054f0:	78eb      	ldrb	r3, [r5, #3]
 80054f2:	b123      	cbz	r3, 80054fe <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
 80054f4:	4b20      	ldr	r3, [pc, #128]	; (8005578 <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
 80054f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80054fa:	0719      	lsls	r1, r3, #28
 80054fc:	d51d      	bpl.n	800553a <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
 80054fe:	2102      	movs	r1, #2
 8005500:	f242 0016 	movw	r0, #8214	; 0x2016
 8005504:	f7ff fd30 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005508:	4605      	mov	r5, r0
 800550a:	b1b0      	cbz	r0, 800553a <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
 800550c:	2102      	movs	r1, #2
 800550e:	3008      	adds	r0, #8
 8005510:	f00c f8fc 	bl	801170c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
 8005514:	8823      	ldrh	r3, [r4, #0]
 8005516:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
 8005518:	4629      	mov	r1, r5
 800551a:	f242 0016 	movw	r0, #8214	; 0x2016
 800551e:	f7ff fd47 	bl	8004fb0 <bt_hci_cmd_send>
	bt_conn_unref(conn);
 8005522:	4620      	mov	r0, r4
 8005524:	f001 fcf5 	bl	8006f12 <bt_conn_unref>
	bt_le_scan_update(false);
 8005528:	2000      	movs	r0, #0
 800552a:	f7ff ff4b 	bl	80053c4 <bt_le_scan_update>
 800552e:	e772      	b.n	8005416 <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
 8005530:	4621      	mov	r1, r4
 8005532:	4668      	mov	r0, sp
 8005534:	f7ff fc48 	bl	8004dc8 <bt_addr_le_copy>
 8005538:	e788      	b.n	800544c <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
 800553a:	4d0f      	ldr	r5, [pc, #60]	; (8005578 <le_enh_conn_complete+0x188>)
 800553c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
 8005540:	07d2      	lsls	r2, r2, #31
 8005542:	d508      	bpl.n	8005556 <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
 8005544:	4620      	mov	r0, r4
 8005546:	f7ff fd97 	bl	8005078 <hci_le_set_phy.isra.25>
		if (!err) {
 800554a:	b920      	cbnz	r0, 8005556 <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	1d20      	adds	r0, r4, #4
 8005550:	f7ff fc3d 	bl	8004dce <atomic_or>
 8005554:	e7e5      	b.n	8005522 <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
 8005556:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800555a:	069b      	lsls	r3, r3, #26
 800555c:	d506      	bpl.n	800556c <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff fee6 	bl	8005330 <hci_le_set_data_len.isra.26>
		if (!err) {
 8005564:	b910      	cbnz	r0, 800556c <le_enh_conn_complete+0x17c>
 8005566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800556a:	e7f0      	b.n	800554e <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fc5d 	bl	8004e2c <update_conn_param>
 8005572:	e7d6      	b.n	8005522 <le_enh_conn_complete+0x132>
 8005574:	20005958 	.word	0x20005958
 8005578:	200058e8 	.word	0x200058e8

0800557c <hci_rx_thread>:
{
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (scan_dev_found_cb) {
 8005580:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800587c <hci_rx_thread+0x300>
{
 8005584:	b091      	sub	sp, #68	; 0x44
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
 8005586:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800558a:	48b9      	ldr	r0, [pc, #740]	; (8005870 <hci_rx_thread+0x2f4>)
 800558c:	f00c f828 	bl	80115e0 <net_buf_get>
 8005590:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
 8005592:	f7ff fc13 	bl	8004dbc <net_buf_user_data>
		switch (bt_buf_get_type(buf)) {
 8005596:	7803      	ldrb	r3, [r0, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d033      	beq.n	8005604 <hci_rx_thread+0x88>
 800559c:	2b03      	cmp	r3, #3
 800559e:	d173      	bne.n	8005688 <hci_rx_thread+0x10c>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
 80055a0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(hdr->handle);
 80055a2:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
 80055a4:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
 80055a6:	f3c6 030b 	ubfx	r3, r6, #0, #12
 80055aa:	8043      	strh	r3, [r0, #2]
	acl(buf)->id = BT_CONN_ID_INVALID;
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7ff fc05 	bl	8004dbc <net_buf_user_data>
 80055b2:	23ff      	movs	r3, #255	; 0xff
 80055b4:	7043      	strb	r3, [r0, #1]
	net_buf_pull(buf, sizeof(*hdr));
 80055b6:	2104      	movs	r1, #4
 80055b8:	f104 0008 	add.w	r0, r4, #8
 80055bc:	f00c f911 	bl	80117e2 <net_buf_simple_pull>
	if (buf->len != len) {
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	42ab      	cmp	r3, r5
		net_buf_unref(buf);
 80055c4:	4620      	mov	r0, r4
	if (buf->len != len) {
 80055c6:	d002      	beq.n	80055ce <hci_rx_thread+0x52>
			net_buf_unref(buf);
 80055c8:	f00c f880 	bl	80116cc <net_buf_unref>
			break;
 80055cc:	e017      	b.n	80055fe <hci_rx_thread+0x82>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
 80055ce:	f7ff fbf5 	bl	8004dbc <net_buf_user_data>
 80055d2:	8840      	ldrh	r0, [r0, #2]
 80055d4:	f001 fc28 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 80055d8:	4605      	mov	r5, r0
		net_buf_unref(buf);
 80055da:	4620      	mov	r0, r4
	if (!conn) {
 80055dc:	2d00      	cmp	r5, #0
 80055de:	d0f3      	beq.n	80055c8 <hci_rx_thread+0x4c>
	acl(buf)->id = bt_conn_get_id(conn);
 80055e0:	f7ff fbec 	bl	8004dbc <net_buf_user_data>
 80055e4:	4607      	mov	r7, r0
 80055e6:	4628      	mov	r0, r5
 80055e8:	f001 fde6 	bl	80071b8 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
 80055ec:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
 80055ee:	7078      	strb	r0, [r7, #1]
	bt_conn_recv(conn, buf, flags);
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f001 f9dc 	bl	80069b0 <bt_conn_recv>
	bt_conn_unref(conn);
 80055f8:	4628      	mov	r0, r5
 80055fa:	f001 fc8a 	bl	8006f12 <bt_conn_unref>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 80055fe:	f00c fc21 	bl	8011e44 <_impl_k_yield>
 8005602:	e7c0      	b.n	8005586 <hci_rx_thread+0xa>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
 8005604:	68a6      	ldr	r6, [r4, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
 8005606:	7832      	ldrb	r2, [r6, #0]
 8005608:	2a13      	cmp	r2, #19
 800560a:	f200 825a 	bhi.w	8005ac2 <hci_rx_thread+0x546>
 800560e:	4093      	lsls	r3, r2
 8005610:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 8005614:	f000 8255 	beq.w	8005ac2 <hci_rx_thread+0x546>
 8005618:	4040      	eors	r0, r0
 800561a:	f380 8811 	msr	BASEPRI, r0
 800561e:	f04f 0004 	mov.w	r0, #4
 8005622:	df02      	svc	2
 8005624:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
 8005626:	783e      	ldrb	r6, [r7, #0]
 8005628:	bb76      	cbnz	r6, 8005688 <hci_rx_thread+0x10c>
	conn = bt_conn_lookup_handle(handle);
 800562a:	f8b7 0001 	ldrh.w	r0, [r7, #1]
 800562e:	f001 fbfb 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 8005632:	4605      	mov	r5, r0
 8005634:	b1d8      	cbz	r0, 800566e <hci_rx_thread+0xf2>
	conn->err = evt->reason;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	7203      	strb	r3, [r0, #8]
	k_call_stacks_analyze();
 800563a:	f00c f945 	bl	80118c8 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	f001 fb63 	bl	8006d0c <bt_conn_set_state>
	conn->handle = 0;
 8005646:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
 8005648:	78ae      	ldrb	r6, [r5, #2]
 800564a:	b10e      	cbz	r6, 8005650 <hci_rx_thread+0xd4>
	bt_conn_unref(conn);
 800564c:	4628      	mov	r0, r5
 800564e:	e073      	b.n	8005738 <hci_rx_thread+0x1bc>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
 8005650:	4631      	mov	r1, r6
 8005652:	1d28      	adds	r0, r5, #4
 8005654:	f7ff fbcc 	bl	8004df0 <atomic_test_bit>
 8005658:	b130      	cbz	r0, 8005668 <hci_rx_thread+0xec>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
 800565a:	4628      	mov	r0, r5
 800565c:	2101      	movs	r1, #1
 800565e:	f001 fb55 	bl	8006d0c <bt_conn_set_state>
		bt_le_scan_update(false);
 8005662:	4630      	mov	r0, r6
 8005664:	f7ff feae 	bl	80053c4 <bt_le_scan_update>
	bt_conn_unref(conn);
 8005668:	4628      	mov	r0, r5
 800566a:	f001 fc52 	bl	8006f12 <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 800566e:	2106      	movs	r1, #6
 8005670:	4880      	ldr	r0, [pc, #512]	; (8005874 <hci_rx_thread+0x2f8>)
 8005672:	f7ff fbbd 	bl	8004df0 <atomic_test_bit>
 8005676:	b138      	cbz	r0, 8005688 <hci_rx_thread+0x10c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 8005678:	2105      	movs	r1, #5
 800567a:	487e      	ldr	r0, [pc, #504]	; (8005874 <hci_rx_thread+0x2f8>)
 800567c:	f7ff fbb8 	bl	8004df0 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
 8005680:	b910      	cbnz	r0, 8005688 <hci_rx_thread+0x10c>
		set_advertise_enable(true);
 8005682:	2001      	movs	r0, #1
 8005684:	f7ff fdde 	bl	8005244 <set_advertise_enable>
			net_buf_unref(buf);
 8005688:	4620      	mov	r0, r4
 800568a:	e79d      	b.n	80055c8 <hci_rx_thread+0x4c>
 800568c:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
 800568e:	780b      	ldrb	r3, [r1, #0]
 8005690:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
 8005694:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 8005698:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
 800569c:	78cb      	ldrb	r3, [r1, #3]
 800569e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
 80056a2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
 80056a6:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
 80056aa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80056ae:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
 80056b2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 80056b6:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	enh.clock_accuracy = evt->clock_accuracy;
 80056ba:	7c4b      	ldrb	r3, [r1, #17]
 80056bc:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
 80056c0:	3104      	adds	r1, #4
 80056c2:	a809      	add	r0, sp, #36	; 0x24
 80056c4:	f7ff fb80 	bl	8004dc8 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
 80056c8:	2500      	movs	r5, #0
 80056ca:	2206      	movs	r2, #6
 80056cc:	a904      	add	r1, sp, #16
 80056ce:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 80056d2:	9504      	str	r5, [sp, #16]
 80056d4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80056d8:	f7fb f8d2 	bl	8000880 <memcpy>
 80056dc:	2206      	movs	r2, #6
 80056de:	a906      	add	r1, sp, #24
 80056e0:	f10d 0031 	add.w	r0, sp, #49	; 0x31
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
 80056e4:	9506      	str	r5, [sp, #24]
 80056e6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80056ea:	f7fb f8c9 	bl	8000880 <memcpy>
	le_enh_conn_complete(&enh);
 80056ee:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
 80056f0:	f7ff fe7e 	bl	80053f0 <le_enh_conn_complete>
 80056f4:	e7c8      	b.n	8005688 <hci_rx_thread+0x10c>
 80056f6:	68a0      	ldr	r0, [r4, #8]
 80056f8:	e7fa      	b.n	80056f0 <hci_rx_thread+0x174>
 80056fa:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 80056fc:	f8b5 0001 	ldrh.w	r0, [r5, #1]
 8005700:	f001 fb92 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 8005704:	4606      	mov	r6, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d0be      	beq.n	8005688 <hci_rx_thread+0x10c>
	if (!evt->status) {
 800570a:	782b      	ldrb	r3, [r5, #0]
 800570c:	b99b      	cbnz	r3, 8005736 <hci_rx_thread+0x1ba>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
 800570e:	792a      	ldrb	r2, [r5, #4]
 8005710:	78eb      	ldrb	r3, [r5, #3]
 8005712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005716:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
 800571a:	79aa      	ldrb	r2, [r5, #6]
 800571c:	796b      	ldrb	r3, [r5, #5]
 800571e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005722:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
 8005726:	79eb      	ldrb	r3, [r5, #7]
 8005728:	7a2a      	ldrb	r2, [r5, #8]
 800572a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800572e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
 8005732:	f001 f901 	bl	8006938 <notify_le_param_updated>
	bt_conn_unref(conn);
 8005736:	4630      	mov	r0, r6
 8005738:	f001 fbeb 	bl	8006f12 <bt_conn_unref>
 800573c:	e7a4      	b.n	8005688 <hci_rx_thread+0x10c>
 800573e:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 8005740:	f8b6 0001 	ldrh.w	r0, [r6, #1]
 8005744:	f001 fb70 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 8005748:	4605      	mov	r5, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d09c      	beq.n	8005688 <hci_rx_thread+0x10c>
	if (!evt->status) {
 800574e:	7833      	ldrb	r3, [r6, #0]
 8005750:	b923      	cbnz	r3, 800575c <hci_rx_thread+0x1e0>
		memcpy(conn->le.features, evt->features,
 8005752:	2208      	movs	r2, #8
 8005754:	1cf1      	adds	r1, r6, #3
 8005756:	3064      	adds	r0, #100	; 0x64
 8005758:	f7fb f892 	bl	8000880 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
 800575c:	4e46      	ldr	r6, [pc, #280]	; (8005878 <hci_rx_thread+0x2fc>)
 800575e:	f896 3079 	ldrb.w	r3, [r6, #121]	; 0x79
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d50c      	bpl.n	8005780 <hci_rx_thread+0x204>
 8005766:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 800576a:	07db      	lsls	r3, r3, #31
 800576c:	d508      	bpl.n	8005780 <hci_rx_thread+0x204>
		err = hci_le_set_phy(conn);
 800576e:	4628      	mov	r0, r5
 8005770:	f7ff fc82 	bl	8005078 <hci_le_set_phy.isra.25>
		if (!err) {
 8005774:	b920      	cbnz	r0, 8005780 <hci_rx_thread+0x204>
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	1d28      	adds	r0, r5, #4
 800577a:	f7ff fb28 	bl	8004dce <atomic_or>
 800577e:	e765      	b.n	800564c <hci_rx_thread+0xd0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
 8005780:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 8005784:	069f      	lsls	r7, r3, #26
 8005786:	d56e      	bpl.n	8005866 <hci_rx_thread+0x2ea>
 8005788:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 800578c:	069e      	lsls	r6, r3, #26
 800578e:	d56a      	bpl.n	8005866 <hci_rx_thread+0x2ea>
		err = hci_le_set_data_len(conn);
 8005790:	4628      	mov	r0, r5
 8005792:	f7ff fdcd 	bl	8005330 <hci_le_set_data_len.isra.26>
		if (!err) {
 8005796:	2800      	cmp	r0, #0
 8005798:	d165      	bne.n	8005866 <hci_rx_thread+0x2ea>
 800579a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800579e:	e7eb      	b.n	8005778 <hci_rx_thread+0x1fc>
 80057a0:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 80057a2:	78d9      	ldrb	r1, [r3, #3]
 80057a4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
 80057a6:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
 80057a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057ac:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
 80057b0:	7959      	ldrb	r1, [r3, #5]
 80057b2:	791a      	ldrb	r2, [r3, #4]
 80057b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057b8:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
 80057bc:	799a      	ldrb	r2, [r3, #6]
 80057be:	79d9      	ldrb	r1, [r3, #7]
 80057c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80057c4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
 80057c8:	7a1a      	ldrb	r2, [r3, #8]
 80057ca:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
 80057cc:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
 80057ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
 80057d2:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
 80057d4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
 80057d8:	f001 fb26 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 80057dc:	4680      	mov	r8, r0
 80057de:	b920      	cbnz	r0, 80057ea <hci_rx_thread+0x26e>
		return le_conn_param_neg_reply(handle,
 80057e0:	2102      	movs	r1, #2
 80057e2:	4628      	mov	r0, r5
 80057e4:	f7ff fc68 	bl	80050b8 <le_conn_param_neg_reply>
 80057e8:	e74e      	b.n	8005688 <hci_rx_thread+0x10c>
	if (!le_param_req(conn, &param)) {
 80057ea:	a908      	add	r1, sp, #32
 80057ec:	f001 f8b8 	bl	8006960 <le_param_req>
 80057f0:	b928      	cbnz	r0, 80057fe <hci_rx_thread+0x282>
		err = le_conn_param_neg_reply(handle,
 80057f2:	211e      	movs	r1, #30
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7ff fc5f 	bl	80050b8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
 80057fa:	4640      	mov	r0, r8
 80057fc:	e79c      	b.n	8005738 <hci_rx_thread+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
 80057fe:	210e      	movs	r1, #14
 8005800:	f242 0020 	movw	r0, #8224	; 0x2020
 8005804:	f7ff fbb0 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005808:	4606      	mov	r6, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d0f5      	beq.n	80057fa <hci_rx_thread+0x27e>
	cp = net_buf_add(buf, sizeof(*cp));
 800580e:	210e      	movs	r1, #14
 8005810:	3008      	adds	r0, #8
 8005812:	f00b ff7b 	bl	801170c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
 8005816:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
 8005818:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
 800581a:	2100      	movs	r1, #0
 800581c:	f7fb f85c 	bl	80008d8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
 8005820:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8005824:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
 8005826:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800582a:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
 800582c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005830:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 8005832:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
 8005836:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
 8005838:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
 800583a:	4631      	mov	r1, r6
 800583c:	f242 0020 	movw	r0, #8224	; 0x2020
 8005840:	f7ff fbb6 	bl	8004fb0 <bt_hci_cmd_send>
 8005844:	e7d9      	b.n	80057fa <hci_rx_thread+0x27e>
	u16_t handle = sys_le16_to_cpu(evt->handle);
 8005846:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 8005848:	8818      	ldrh	r0, [r3, #0]
 800584a:	f001 faed 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 800584e:	4605      	mov	r5, r0
 8005850:	2800      	cmp	r0, #0
 8005852:	f43f af19 	beq.w	8005688 <hci_rx_thread+0x10c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8005856:	f46f 7180 	mvn.w	r1, #256	; 0x100
 800585a:	3004      	adds	r0, #4
 800585c:	f7ff fad5 	bl	8004e0a <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
 8005860:	05c0      	lsls	r0, r0, #23
 8005862:	f57f aef3 	bpl.w	800564c <hci_rx_thread+0xd0>
	update_conn_param(conn);
 8005866:	4628      	mov	r0, r5
 8005868:	f7ff fae0 	bl	8004e2c <update_conn_param>
 800586c:	e6ee      	b.n	800564c <hci_rx_thread+0xd0>
 800586e:	bf00      	nop
 8005870:	200059ac 	.word	0x200059ac
 8005874:	20005958 	.word	0x20005958
 8005878:	200058e8 	.word	0x200058e8
 800587c:	2000055c 	.word	0x2000055c
	u16_t handle = sys_le16_to_cpu(evt->handle);
 8005880:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
 8005882:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8005886:	f001 facf 	bl	8006e28 <bt_conn_lookup_handle>
	if (!conn) {
 800588a:	4605      	mov	r5, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	f43f aefb 	beq.w	8005688 <hci_rx_thread+0x10c>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
 8005892:	1d06      	adds	r6, r0, #4
 8005894:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8005898:	4630      	mov	r0, r6
 800589a:	f7ff fab6 	bl	8004e0a <atomic_and>
 800589e:	0601      	lsls	r1, r0, #24
 80058a0:	f57f aed4 	bpl.w	800564c <hci_rx_thread+0xd0>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
 80058a4:	4ba0      	ldr	r3, [pc, #640]	; (8005b28 <hci_rx_thread+0x5ac>)
 80058a6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80058aa:	069a      	lsls	r2, r3, #26
 80058ac:	d5db      	bpl.n	8005866 <hci_rx_thread+0x2ea>
 80058ae:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 80058b2:	069b      	lsls	r3, r3, #26
 80058b4:	d5d7      	bpl.n	8005866 <hci_rx_thread+0x2ea>
		err = hci_le_set_data_len(conn);
 80058b6:	4628      	mov	r0, r5
 80058b8:	f7ff fd3a 	bl	8005330 <hci_le_set_data_len.isra.26>
		if (!err) {
 80058bc:	2800      	cmp	r0, #0
 80058be:	d1d2      	bne.n	8005866 <hci_rx_thread+0x2ea>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80058c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058c4:	4630      	mov	r0, r6
 80058c6:	e758      	b.n	800577a <hci_rx_thread+0x1fe>
 80058c8:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80058ca:	4898      	ldr	r0, [pc, #608]	; (8005b2c <hci_rx_thread+0x5b0>)
 80058cc:	f06f 0110 	mvn.w	r1, #16
 80058d0:	f7ff fa9b 	bl	8004e0a <atomic_and>
	if (!evt->status) {
 80058d4:	7833      	ldrb	r3, [r6, #0]
 80058d6:	b943      	cbnz	r3, 80058ea <hci_rx_thread+0x36e>
		memcpy(pub_key, evt->key, 64);
 80058d8:	1c71      	adds	r1, r6, #1
 80058da:	2240      	movs	r2, #64	; 0x40
 80058dc:	4894      	ldr	r0, [pc, #592]	; (8005b30 <hci_rx_thread+0x5b4>)
 80058de:	f7fa ffcf 	bl	8000880 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 80058e2:	2108      	movs	r1, #8
 80058e4:	4891      	ldr	r0, [pc, #580]	; (8005b2c <hci_rx_thread+0x5b0>)
 80058e6:	f7ff fa72 	bl	8004dce <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 80058ea:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <hci_rx_thread+0x5b8>)
 80058ec:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
 80058ee:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	f43f aec9 	beq.w	8005688 <hci_rx_thread+0x10c>
		cb->func(evt->status ? NULL : evt->key);
 80058f6:	7832      	ldrb	r2, [r6, #0]
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	bf0c      	ite	eq
 80058fe:	4638      	moveq	r0, r7
 8005900:	2000      	movne	r0, #0
 8005902:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 8005904:	686d      	ldr	r5, [r5, #4]
 8005906:	e7f3      	b.n	80058f0 <hci_rx_thread+0x374>
	if (dh_key_cb) {
 8005908:	4d8b      	ldr	r5, [pc, #556]	; (8005b38 <hci_rx_thread+0x5bc>)
 800590a:	68a0      	ldr	r0, [r4, #8]
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f43f aeba 	beq.w	8005688 <hci_rx_thread+0x10c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 8005914:	7802      	ldrb	r2, [r0, #0]
 8005916:	b922      	cbnz	r2, 8005922 <hci_rx_thread+0x3a6>
 8005918:	3001      	adds	r0, #1
 800591a:	4798      	blx	r3
		dh_key_cb = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	e6b2      	b.n	8005688 <hci_rx_thread+0x10c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
 8005922:	2000      	movs	r0, #0
 8005924:	e7f9      	b.n	800591a <hci_rx_thread+0x39e>
	u8_t num_reports = net_buf_pull_u8(buf);
 8005926:	4628      	mov	r0, r5
 8005928:	f00b ff63 	bl	80117f2 <net_buf_simple_pull_u8>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 800592c:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8005b2c <hci_rx_thread+0x5b0>
	u8_t num_reports = net_buf_pull_u8(buf);
 8005930:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f43f aea7 	beq.w	8005688 <hci_rx_thread+0x10c>
		info = (void *)buf->data;
 800593a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
 800593c:	2109      	movs	r1, #9
 800593e:	4628      	mov	r0, r5
 8005940:	f00b ff4f 	bl	80117e2 <net_buf_simple_pull>
		rssi = info->data[info->length];
 8005944:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 8005946:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
 8005948:	4433      	add	r3, r6
			bt_addr_le_copy(&id_addr, &info->addr);
 800594a:	a808      	add	r0, sp, #32
		rssi = info->data[info->length];
 800594c:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 8005950:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8005954:	3b02      	subs	r3, #2
 8005956:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
 8005958:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
 800595a:	f200 809d 	bhi.w	8005a98 <hci_rx_thread+0x51c>
			bt_addr_le_copy(&id_addr, &info->addr);
 800595e:	f7ff fa33 	bl	8004dc8 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
 8005962:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005966:	3b02      	subs	r3, #2
 8005968:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
 800596c:	f8da 3000 	ldr.w	r3, [sl]
 8005970:	b1cb      	cbz	r3, 80059a6 <hci_rx_thread+0x42a>
	state->offset = net_buf_simple_headroom(buf);
 8005972:	4628      	mov	r0, r5
 8005974:	f00b ff6a 	bl	801184c <net_buf_simple_headroom>
	state->len = buf->len;
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
 800597c:	7a33      	ldrb	r3, [r6, #8]
 800597e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
 8005980:	9002      	str	r0, [sp, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
 8005982:	462b      	mov	r3, r5
 8005984:	7832      	ldrb	r2, [r6, #0]
 8005986:	f8da 7000 	ldr.w	r7, [sl]
 800598a:	fa4f f18b 	sxtb.w	r1, fp
 800598e:	a808      	add	r0, sp, #32
 8005990:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
 8005992:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005996:	f105 0308 	add.w	r3, r5, #8
 800599a:	fa13 f382 	uxtah	r3, r3, r2
 800599e:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
 80059a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80059a4:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80059a6:	2108      	movs	r1, #8
 80059a8:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
 80059aa:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80059ac:	f7ff fa20 	bl	8004df0 <atomic_test_bit>
 80059b0:	4683      	mov	fp, r0
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d166      	bne.n	8005a84 <hci_rx_thread+0x508>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
 80059b6:	2f01      	cmp	r7, #1
 80059b8:	d864      	bhi.n	8005a84 <hci_rx_thread+0x508>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
 80059ba:	2101      	movs	r1, #1
 80059bc:	a808      	add	r0, sp, #32
 80059be:	f001 fa7f 	bl	8006ec0 <bt_conn_lookup_state_le>
	if (!conn) {
 80059c2:	4607      	mov	r7, r0
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d05d      	beq.n	8005a84 <hci_rx_thread+0x508>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 80059c8:	2107      	movs	r1, #7
 80059ca:	4648      	mov	r0, r9
 80059cc:	f7ff fa10 	bl	8004df0 <atomic_test_bit>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d164      	bne.n	8005a9e <hci_rx_thread+0x522>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
 80059d4:	2102      	movs	r1, #2
 80059d6:	4648      	mov	r0, r9
 80059d8:	f7ff fa0a 	bl	8004df0 <atomic_test_bit>
 80059dc:	b110      	cbz	r0, 80059e4 <hci_rx_thread+0x468>
			set_random_address(&bt_dev.id_addr.a);
 80059de:	4857      	ldr	r0, [pc, #348]	; (8005b3c <hci_rx_thread+0x5c0>)
 80059e0:	f7ff fbbc 	bl	800515c <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
 80059e4:	4950      	ldr	r1, [pc, #320]	; (8005b28 <hci_rx_thread+0x5ac>)
 80059e6:	f107 004b 	add.w	r0, r7, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
 80059ea:	f107 0b52 	add.w	fp, r7, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
 80059ee:	f7ff f9eb 	bl	8004dc8 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
 80059f2:	4641      	mov	r1, r8
 80059f4:	4658      	mov	r0, fp
 80059f6:	f7ff f9e7 	bl	8004dc8 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
 80059fa:	2119      	movs	r1, #25
 80059fc:	f242 000d 	movw	r0, #8205	; 0x200d
 8005a00:	f7ff fab2 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005a04:	4603      	mov	r3, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d04e      	beq.n	8005aa8 <hci_rx_thread+0x52c>
	cp = net_buf_add(buf, sizeof(*cp));
 8005a0a:	2119      	movs	r1, #25
 8005a0c:	3008      	adds	r0, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	f00b fe7c 	bl	801170c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
 8005a14:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
 8005a16:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f7fa ff5d 	bl	80008d8 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2160      	movs	r1, #96	; 0x60
 8005a22:	f888 1000 	strb.w	r1, [r8]
 8005a26:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
 8005a2a:	f888 1002 	strb.w	r1, [r8, #2]
 8005a2e:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
 8005a32:	4659      	mov	r1, fp
 8005a34:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
 8005a38:	9202      	str	r2, [sp, #8]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
 8005a3a:	f7ff f9c5 	bl	8004dc8 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
 8005a3e:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 8005a42:	f888 100c 	strb.w	r1, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
 8005a46:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8005a4a:	f8a8 100d 	strh.w	r1, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
 8005a4e:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8005a52:	f8a8 100f 	strh.w	r1, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
 8005a56:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8005a5a:	f8a8 1011 	strh.w	r1, [r8, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
 8005a5e:	9b03      	ldr	r3, [sp, #12]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
 8005a60:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8005a64:	f8a8 1013 	strh.w	r1, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
 8005a68:	9a02      	ldr	r2, [sp, #8]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f242 000d 	movw	r0, #8205	; 0x200d
 8005a70:	f7ff fb3c 	bl	80050ec <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
 8005a74:	b9c0      	cbnz	r0, 8005aa8 <hci_rx_thread+0x52c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
 8005a76:	4638      	mov	r0, r7
 8005a78:	2102      	movs	r1, #2
 8005a7a:	f001 f947 	bl	8006d0c <bt_conn_set_state>
	bt_conn_unref(conn);
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f001 fa47 	bl	8006f12 <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
 8005a84:	7a31      	ldrb	r1, [r6, #8]
 8005a86:	4628      	mov	r0, r5
 8005a88:	3101      	adds	r1, #1
 8005a8a:	f00b feaa 	bl	80117e2 <net_buf_simple_pull>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	e74c      	b.n	8005932 <hci_rx_thread+0x3b6>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
 8005a98:	f7ff f996 	bl	8004dc8 <bt_addr_le_copy>
 8005a9c:	e766      	b.n	800596c <hci_rx_thread+0x3f0>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
 8005a9e:	4658      	mov	r0, fp
 8005aa0:	f7ff fb9c 	bl	80051dc <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d095      	beq.n	80059d4 <hci_rx_thread+0x458>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
 8005aa8:	231f      	movs	r3, #31
 8005aaa:	723b      	strb	r3, [r7, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8005aac:	2100      	movs	r1, #0
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f001 f92c 	bl	8006d0c <bt_conn_set_state>
	bt_conn_unref(conn);
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	f001 fa2c 	bl	8006f12 <bt_conn_unref>
	bt_le_scan_update(false);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff fc82 	bl	80053c4 <bt_le_scan_update>
 8005ac0:	e7e0      	b.n	8005a84 <hci_rx_thread+0x508>
	net_buf_pull(buf, sizeof(*hdr));
 8005ac2:	f104 0508 	add.w	r5, r4, #8
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f00b fe8a 	bl	80117e2 <net_buf_simple_pull>
	switch (hdr->evt) {
 8005ace:	7833      	ldrb	r3, [r6, #0]
 8005ad0:	2b05      	cmp	r3, #5
 8005ad2:	f43f ada7 	beq.w	8005624 <hci_rx_thread+0xa8>
 8005ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad8:	f47f add6 	bne.w	8005688 <hci_rx_thread+0x10c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
 8005adc:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f00b fe7e 	bl	80117e2 <net_buf_simple_pull>
	switch (evt->subevent) {
 8005ae6:	7833      	ldrb	r3, [r6, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	2b0b      	cmp	r3, #11
 8005aec:	f63f adcc 	bhi.w	8005688 <hci_rx_thread+0x10c>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <hci_rx_thread+0x57c>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	0800568d 	.word	0x0800568d
 8005afc:	08005927 	.word	0x08005927
 8005b00:	080056fb 	.word	0x080056fb
 8005b04:	0800573f 	.word	0x0800573f
 8005b08:	08005689 	.word	0x08005689
 8005b0c:	080057a1 	.word	0x080057a1
 8005b10:	08005847 	.word	0x08005847
 8005b14:	080058c9 	.word	0x080058c9
 8005b18:	08005909 	.word	0x08005909
 8005b1c:	080056f7 	.word	0x080056f7
 8005b20:	08005689 	.word	0x08005689
 8005b24:	08005881 	.word	0x08005881
 8005b28:	200058e8 	.word	0x200058e8
 8005b2c:	20005958 	.word	0x20005958
 8005b30:	200004ac 	.word	0x200004ac
 8005b34:	200004ec 	.word	0x200004ec
 8005b38:	200004a8 	.word	0x200004a8
 8005b3c:	200058e9 	.word	0x200058e9

08005b40 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
 8005b40:	2301      	movs	r3, #1
{
 8005b42:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
 8005b44:	2106      	movs	r1, #6
{
 8005b46:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
 8005b48:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
 8005b4c:	f000 fe86 	bl	800685c <bt_rand>
	if (err) {
 8005b50:	b918      	cbnz	r0, 8005b5a <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
 8005b52:	79a3      	ldrb	r3, [r4, #6]
 8005b54:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8005b58:	71a3      	strb	r3, [r4, #6]
}
 8005b5a:	bd10      	pop	{r4, pc}

08005b5c <bt_init>:
{
 8005b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b60:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
 8005b62:	aa04      	add	r2, sp, #16
 8005b64:	2100      	movs	r1, #0
 8005b66:	f640 4003 	movw	r0, #3075	; 0xc03
 8005b6a:	f7ff fabf 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005b6e:	4604      	mov	r4, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	f040 820d 	bne.w	8005f90 <bt_init+0x434>
	u8_t status = buf->data[0];
 8005b76:	9b04      	ldr	r3, [sp, #16]
 8005b78:	689b      	ldr	r3, [r3, #8]
	if (status) {
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b96b      	cbnz	r3, 8005b9a <bt_init+0x3e>
	scan_dev_found_cb = NULL;
 8005b7e:	4a61      	ldr	r2, [pc, #388]	; (8005d04 <bt_init+0x1a8>)
 8005b80:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005b82:	4b61      	ldr	r3, [pc, #388]	; (8005d08 <bt_init+0x1ac>)
 8005b84:	f3bf 8f5b 	dmb	ish
 8005b88:	2201      	movs	r2, #1
 8005b8a:	e853 1f00 	ldrex	r1, [r3]
 8005b8e:	e843 2000 	strex	r0, r2, [r3]
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1f9      	bne.n	8005b8a <bt_init+0x2e>
 8005b96:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
 8005b9a:	9804      	ldr	r0, [sp, #16]
 8005b9c:	f00b fd96 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
 8005ba0:	aa04      	add	r2, sp, #16
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	f241 0003 	movw	r0, #4099	; 0x1003
 8005ba8:	f7ff faa0 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005bac:	4604      	mov	r4, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	f040 81ee 	bne.w	8005f90 <bt_init+0x434>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	4d55      	ldr	r5, [pc, #340]	; (8005d0c <bt_init+0x1b0>)
 8005bb8:	6899      	ldr	r1, [r3, #8]
 8005bba:	2208      	movs	r2, #8
 8005bbc:	3101      	adds	r1, #1
 8005bbe:	f105 0016 	add.w	r0, r5, #22
 8005bc2:	f7fa fe5d 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005bc6:	9804      	ldr	r0, [sp, #16]
 8005bc8:	f00b fd80 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
 8005bcc:	4621      	mov	r1, r4
 8005bce:	aa04      	add	r2, sp, #16
 8005bd0:	f241 0001 	movw	r0, #4097	; 0x1001
 8005bd4:	f7ff fa8a 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005bd8:	4604      	mov	r4, r0
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f040 81d8 	bne.w	8005f90 <bt_init+0x434>
	read_local_ver_complete(rsp);
 8005be0:	9804      	ldr	r0, [sp, #16]
 8005be2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
 8005be4:	785a      	ldrb	r2, [r3, #1]
 8005be6:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
 8005be8:	78d9      	ldrb	r1, [r3, #3]
 8005bea:	789a      	ldrb	r2, [r3, #2]
 8005bec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005bf0:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
 8005bf2:	791a      	ldrb	r2, [r3, #4]
 8005bf4:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
 8005bf6:	7a19      	ldrb	r1, [r3, #8]
 8005bf8:	79da      	ldrb	r2, [r3, #7]
 8005bfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005bfe:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
 8005c00:	795a      	ldrb	r2, [r3, #5]
 8005c02:	799b      	ldrb	r3, [r3, #6]
 8005c04:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005c08:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
 8005c0a:	f00b fd5f 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
 8005c0e:	4621      	mov	r1, r4
 8005c10:	aa04      	add	r2, sp, #16
 8005c12:	f241 0009 	movw	r0, #4105	; 0x1009
 8005c16:	f7ff fa69 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f040 81b7 	bne.w	8005f90 <bt_init+0x434>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	2206      	movs	r2, #6
 8005c28:	3101      	adds	r1, #1
 8005c2a:	1c68      	adds	r0, r5, #1
 8005c2c:	f7fa fe28 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005c30:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
 8005c32:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
 8005c34:	f00b fd4a 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
 8005c38:	4621      	mov	r1, r4
 8005c3a:	aa04      	add	r2, sp, #16
 8005c3c:	f241 0002 	movw	r0, #4098	; 0x1002
 8005c40:	f7ff fa54 	bl	80050ec <bt_hci_cmd_send_sync>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
 8005c44:	46a0      	mov	r8, r4
	if (err) {
 8005c46:	4604      	mov	r4, r0
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f040 81a1 	bne.w	8005f90 <bt_init+0x434>
	memcpy(bt_dev.supported_commands, rp->commands,
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	2240      	movs	r2, #64	; 0x40
 8005c54:	3101      	adds	r1, #1
 8005c56:	f105 001e 	add.w	r0, r5, #30
 8005c5a:	f7fa fe11 	bl	8000880 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
 8005c5e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
 8005c62:	9804      	ldr	r0, [sp, #16]
		bt_dev.supported_commands[34] |= 0x04;
 8005c64:	f043 0306 	orr.w	r3, r3, #6
 8005c68:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
 8005c6c:	f00b fd2e 	bl	80116cc <net_buf_unref>
		err = prng_init();
 8005c70:	f000 fdcc 	bl	800680c <prng_init>
		if (err) {
 8005c74:	4604      	mov	r4, r0
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f040 818a 	bne.w	8005f90 <bt_init+0x434>
	if (!(bt_dev.supported_commands[10] & 0x20)) {
 8005c7c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8005c80:	0699      	lsls	r1, r3, #26
 8005c82:	d539      	bpl.n	8005cf8 <bt_init+0x19c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
 8005c84:	2107      	movs	r1, #7
 8005c86:	f640 4033 	movw	r0, #3123	; 0xc33
 8005c8a:	f7ff f96d 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005c8e:	4607      	mov	r7, r0
 8005c90:	b910      	cbnz	r0, 8005c98 <bt_init+0x13c>
		return -ENOBUFS;
 8005c92:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8005c96:	e17b      	b.n	8005f90 <bt_init+0x434>
	hbs = net_buf_add(buf, sizeof(*hbs));
 8005c98:	2107      	movs	r1, #7
 8005c9a:	3008      	adds	r0, #8
 8005c9c:	f00b fd36 	bl	801170c <net_buf_simple_add>
	memset(hbs, 0, sizeof(*hbs));
 8005ca0:	4621      	mov	r1, r4
	hbs = net_buf_add(buf, sizeof(*hbs));
 8005ca2:	4606      	mov	r6, r0
	memset(hbs, 0, sizeof(*hbs));
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	f7fa fe17 	bl	80008d8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 8005caa:	2349      	movs	r3, #73	; 0x49
 8005cac:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 8005cae:	2306      	movs	r3, #6
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
 8005cb0:	7074      	strb	r4, [r6, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 8005cb2:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
 8005cb4:	70f3      	strb	r3, [r6, #3]
 8005cb6:	f886 8004 	strb.w	r8, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f640 4033 	movw	r0, #3123	; 0xc33
 8005cc0:	f7ff fa14 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	f040 8162 	bne.w	8005f90 <bt_init+0x434>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	f640 4031 	movw	r0, #3121	; 0xc31
 8005cd2:	f7ff f949 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d0da      	beq.n	8005c92 <bt_init+0x136>
	net_buf_add_u8(buf, BT_HCI_CTL_TO_HOST_FLOW_ENABLE);
 8005cdc:	2101      	movs	r1, #1
 8005cde:	3008      	adds	r0, #8
 8005ce0:	f00b fd23 	bl	801172a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	f640 4031 	movw	r0, #3121	; 0xc31
 8005cec:	f7ff f9fe 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f040 814c 	bne.w	8005f90 <bt_init+0x434>
	if (!BT_FEAT_LE(bt_dev.features)) {
 8005cf8:	7eab      	ldrb	r3, [r5, #26]
 8005cfa:	065b      	lsls	r3, r3, #25
 8005cfc:	d408      	bmi.n	8005d10 <bt_init+0x1b4>
		return -ENODEV;
 8005cfe:	f06f 0412 	mvn.w	r4, #18
 8005d02:	e145      	b.n	8005f90 <bt_init+0x434>
 8005d04:	2000055c 	.word	0x2000055c
 8005d08:	20005958 	.word	0x20005958
 8005d0c:	200058e8 	.word	0x200058e8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
 8005d10:	aa04      	add	r2, sp, #16
 8005d12:	2100      	movs	r1, #0
 8005d14:	f242 0003 	movw	r0, #8195	; 0x2003
 8005d18:	f7ff f9e8 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f040 8136 	bne.w	8005f90 <bt_init+0x434>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
 8005d24:	9b04      	ldr	r3, [sp, #16]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <bt_init+0x4d0>)
 8005d28:	6899      	ldr	r1, [r3, #8]
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	3101      	adds	r1, #1
 8005d2e:	f7fa fda7 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005d32:	9804      	ldr	r0, [sp, #16]
 8005d34:	f00b fcca 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
 8005d38:	4621      	mov	r1, r4
 8005d3a:	aa04      	add	r2, sp, #16
 8005d3c:	f242 0002 	movw	r0, #8194	; 0x2002
 8005d40:	f7ff f9d4 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005d44:	4604      	mov	r4, r0
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f040 8122 	bne.w	8005f90 <bt_init+0x434>
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
 8005d50:	f8b3 2001 	ldrh.w	r2, [r3, #1]
 8005d54:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
 8005d58:	b13a      	cbz	r2, 8005d6a <bt_init+0x20e>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
 8005d5a:	78da      	ldrb	r2, [r3, #3]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 8005d5c:	48b4      	ldr	r0, [pc, #720]	; (8006030 <bt_init+0x4d4>)
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
 8005d5e:	2a07      	cmp	r2, #7
 8005d60:	bf28      	it	cs
 8005d62:	2207      	movcs	r2, #7
 8005d64:	4611      	mov	r1, r2
 8005d66:	f00c f92b 	bl	8011fc0 <_impl_k_sem_init>
	net_buf_unref(rsp);
 8005d6a:	9804      	ldr	r0, [sp, #16]
 8005d6c:	f00b fcae 	bl	80116cc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 8005d70:	7eac      	ldrb	r4, [r5, #26]
 8005d72:	f014 0420 	ands.w	r4, r4, #32
 8005d76:	f000 80f1 	beq.w	8005f5c <bt_init+0x400>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
 8005d7a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 8005d7e:	071a      	lsls	r2, r3, #28
 8005d80:	d514      	bpl.n	8005dac <bt_init+0x250>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
 8005d82:	aa04      	add	r2, sp, #16
 8005d84:	2100      	movs	r1, #0
 8005d86:	f242 001c 	movw	r0, #8220	; 0x201c
 8005d8a:	f7ff f9af 	bl	80050ec <bt_hci_cmd_send_sync>
		if (err) {
 8005d8e:	4604      	mov	r4, r0
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f040 80fd 	bne.w	8005f90 <bt_init+0x434>
		le_read_supp_states_complete(rsp);
 8005d96:	9804      	ldr	r0, [sp, #16]
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
 8005d98:	6883      	ldr	r3, [r0, #8]
 8005d9a:	f853 2f01 	ldr.w	r2, [r3, #1]!
 8005d9e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
 8005da0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005da4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
 8005da8:	f00b fc90 	bl	80116cc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
 8005dac:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 8005db0:	069b      	lsls	r3, r3, #26
 8005db2:	f100 80f1 	bmi.w	8005f98 <bt_init+0x43c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
 8005db6:	2108      	movs	r1, #8
 8005db8:	f242 0001 	movw	r0, #8193	; 0x2001
 8005dbc:	f7ff f8d4 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f43f af65 	beq.w	8005c92 <bt_init+0x136>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
 8005dc8:	2108      	movs	r1, #8
 8005dca:	4408      	add	r0, r1
 8005dcc:	f00b fc9e 	bl	801170c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
 8005dd0:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
 8005dd4:	078f      	lsls	r7, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
 8005dd6:	bf4c      	ite	mi
 8005dd8:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
 8005dda:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
 8005ddc:	068e      	lsls	r6, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 8005dde:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
 8005de2:	bf48      	it	mi
 8005de4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
 8005de8:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
 8005dec:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 8005df0:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
 8005df4:	bf18      	it	ne
 8005df6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
 8005dfa:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
 8005dfc:	bf08      	it	eq
 8005dfe:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
 8005e02:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
 8005e04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8005e08:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
 8005e0e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
 8005e10:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 8005e12:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
 8005e14:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 8005e16:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
 8005e18:	4621      	mov	r1, r4
 8005e1a:	f242 0001 	movw	r0, #8193	; 0x2001
 8005e1e:	f7ff f965 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005e22:	4604      	mov	r4, r0
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f040 80b3 	bne.w	8005f90 <bt_init+0x434>
	if (BT_FEAT_BREDR(bt_dev.features)) {
 8005e2a:	7eab      	ldrb	r3, [r5, #26]
 8005e2c:	0699      	lsls	r1, r3, #26
 8005e2e:	d421      	bmi.n	8005e74 <bt_init+0x318>
	if (bt_dev.le.mtu) {
 8005e30:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
 8005e34:	b9f1      	cbnz	r1, 8005e74 <bt_init+0x318>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
 8005e36:	aa04      	add	r2, sp, #16
 8005e38:	f241 0005 	movw	r0, #4101	; 0x1005
 8005e3c:	f7ff f956 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005e40:	4604      	mov	r4, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 80a4 	bne.w	8005f90 <bt_init+0x434>
	if (bt_dev.le.mtu) {
 8005e48:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
 8005e4c:	b97b      	cbnz	r3, 8005e6e <bt_init+0x312>
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	4877      	ldr	r0, [pc, #476]	; (8006030 <bt_init+0x4d4>)
 8005e52:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
 8005e54:	7899      	ldrb	r1, [r3, #2]
 8005e56:	785a      	ldrb	r2, [r3, #1]
 8005e58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e5c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
 8005e60:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
 8005e62:	2a07      	cmp	r2, #7
 8005e64:	bf28      	it	cs
 8005e66:	2207      	movcs	r2, #7
 8005e68:	4611      	mov	r1, r2
 8005e6a:	f00c f8a9 	bl	8011fc0 <_impl_k_sem_init>
	net_buf_unref(rsp);
 8005e6e:	9804      	ldr	r0, [sp, #16]
 8005e70:	f00b fc2c 	bl	80116cc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
 8005e74:	2108      	movs	r1, #8
 8005e76:	f640 4001 	movw	r0, #3073	; 0xc01
 8005e7a:	f7ff f875 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8005e7e:	4604      	mov	r4, r0
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f43f af06 	beq.w	8005c92 <bt_init+0x136>
	ev = net_buf_add(buf, sizeof(*ev));
 8005e86:	2108      	movs	r1, #8
 8005e88:	4408      	add	r0, r1
 8005e8a:	f00b fc3f 	bl	801170c <net_buf_simple_add>
	dst[0] = val;
 8005e8e:	2310      	movs	r3, #16
 8005e90:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
 8005e92:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
 8005e94:	2200      	movs	r2, #0
	dst[1] = val >> 8;
 8005e96:	7043      	strb	r3, [r0, #1]
 8005e98:	2602      	movs	r6, #2
 8005e9a:	2320      	movs	r3, #32
	dst[0] = val;
 8005e9c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
 8005e9e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
 8005ea0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
 8005ea2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
 8005ea4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
 8005ea6:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f640 4001 	movw	r0, #3073	; 0xc01
 8005eae:	f7ff f91d 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d16b      	bne.n	8005f90 <bt_init+0x434>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
 8005eb8:	4601      	mov	r1, r0
 8005eba:	aa04      	add	r2, sp, #16
 8005ebc:	f64f 4001 	movw	r0, #64513	; 0xfc01
 8005ec0:	f7ff f914 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	bb28      	cbnz	r0, 8005f14 <bt_init+0x3b8>
	net_buf_unref(rsp);
 8005ec8:	9804      	ldr	r0, [sp, #16]
 8005eca:	f00b fbff 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
 8005ece:	4621      	mov	r1, r4
 8005ed0:	aa04      	add	r2, sp, #16
 8005ed2:	f64f 4002 	movw	r0, #64514	; 0xfc02
 8005ed6:	f7ff f909 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005eda:	4604      	mov	r4, r0
 8005edc:	b9d0      	cbnz	r0, 8005f14 <bt_init+0x3b8>
	rp.cmds = (void *)rsp->data;
 8005ede:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
 8005ee0:	4854      	ldr	r0, [pc, #336]	; (8006034 <bt_init+0x4d8>)
 8005ee2:	6899      	ldr	r1, [r3, #8]
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	3101      	adds	r1, #1
 8005ee8:	f7fa fcca 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005eec:	9804      	ldr	r0, [sp, #16]
 8005eee:	f00b fbed 	bl	80116cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
 8005ef2:	aa04      	add	r2, sp, #16
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f64f 4003 	movw	r0, #64515	; 0xfc03
 8005efa:	f7ff f8f7 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8005efe:	b948      	cbnz	r0, 8005f14 <bt_init+0x3b8>
	rp.feat = (void *)rsp->data;
 8005f00:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
 8005f02:	484d      	ldr	r0, [pc, #308]	; (8006038 <bt_init+0x4dc>)
 8005f04:	6899      	ldr	r1, [r3, #8]
 8005f06:	2201      	movs	r2, #1
 8005f08:	4411      	add	r1, r2
 8005f0a:	f7fa fcb9 	bl	8000880 <memcpy>
	net_buf_unref(rsp);
 8005f0e:	9804      	ldr	r0, [sp, #16]
 8005f10:	f00b fbdc 	bl	80116cc <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
 8005f14:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
 8005f16:	2207      	movs	r2, #7
 8005f18:	a904      	add	r1, sp, #16
 8005f1a:	4848      	ldr	r0, [pc, #288]	; (800603c <bt_init+0x4e0>)
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	f8cd 3013 	str.w	r3, [sp, #19]
 8005f22:	f7fa fc98 	bl	8000856 <memcmp>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d162      	bne.n	8005ff0 <bt_init+0x494>
	if (bt_storage) {
 8005f2a:	4e45      	ldr	r6, [pc, #276]	; (8006040 <bt_init+0x4e4>)
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 808c 	bne.w	800604c <bt_init+0x4f0>
	if (bt_dev.vs_commands[1] & BIT(0)) {
 8005f34:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 8005f38:	07da      	lsls	r2, r3, #31
 8005f3a:	f100 80a3 	bmi.w	8006084 <bt_init+0x528>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
 8005f3e:	483f      	ldr	r0, [pc, #252]	; (800603c <bt_init+0x4e0>)
 8005f40:	f7ff fdfe 	bl	8005b40 <bt_addr_le_create_static>
	if (err) {
 8005f44:	4604      	mov	r4, r0
 8005f46:	bb18      	cbnz	r0, 8005f90 <bt_init+0x434>
	if (bt_storage) {
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 8087 	beq.w	800605e <bt_init+0x502>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
 8005f50:	685e      	ldr	r6, [r3, #4]
 8005f52:	4a3a      	ldr	r2, [pc, #232]	; (800603c <bt_init+0x4e0>)
 8005f54:	2307      	movs	r3, #7
 8005f56:	4601      	mov	r1, r0
 8005f58:	47b0      	blx	r6
 8005f5a:	e080      	b.n	800605e <bt_init+0x502>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	f640 406d 	movw	r0, #3181	; 0xc6d
 8005f62:	f7ff f801 	bl	8004f68 <bt_hci_cmd_create>
		if (!buf) {
 8005f66:	4606      	mov	r6, r0
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f ae92 	beq.w	8005c92 <bt_init+0x136>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
 8005f6e:	2102      	movs	r1, #2
 8005f70:	3008      	adds	r0, #8
 8005f72:	f00b fbcb 	bl	801170c <net_buf_simple_add>
		cp_le->le = 0x01;
 8005f76:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
 8005f78:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
 8005f7a:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4631      	mov	r1, r6
 8005f80:	f640 406d 	movw	r0, #3181	; 0xc6d
 8005f84:	f7ff f8b2 	bl	80050ec <bt_hci_cmd_send_sync>
		if (err) {
 8005f88:	4604      	mov	r4, r0
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f43f aef5 	beq.w	8005d7a <bt_init+0x21e>
}
 8005f90:	4620      	mov	r0, r4
 8005f92:	b006      	add	sp, #24
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
 8005f98:	aa04      	add	r2, sp, #16
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	f242 002f 	movw	r0, #8239	; 0x202f
 8005fa0:	f7ff f8a4 	bl	80050ec <bt_hci_cmd_send_sync>
		if (err) {
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d1f2      	bne.n	8005f90 <bt_init+0x434>
		rp = (void *)rsp->data;
 8005faa:	9804      	ldr	r0, [sp, #16]
 8005fac:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
 8005fae:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
 8005fb2:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
 8005fb6:	f00b fb89 	bl	80116cc <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8005fba:	2104      	movs	r1, #4
 8005fbc:	f242 0024 	movw	r0, #8228	; 0x2024
 8005fc0:	f7fe ffd2 	bl	8004f68 <bt_hci_cmd_create>
		if (!buf) {
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f43f ae63 	beq.w	8005c92 <bt_init+0x136>
		cp = net_buf_add(buf, sizeof(*cp));
 8005fcc:	2104      	movs	r1, #4
 8005fce:	3008      	adds	r0, #8
 8005fd0:	f00b fb9c 	bl	801170c <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8005fd4:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
 8005fd6:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
 8005fda:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
 8005fdc:	4631      	mov	r1, r6
 8005fde:	f242 0024 	movw	r0, #8228	; 0x2024
 8005fe2:	f7ff f883 	bl	80050ec <bt_hci_cmd_send_sync>
		if (err) {
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f43f aee4 	beq.w	8005db6 <bt_init+0x25a>
 8005fee:	e7cf      	b.n	8005f90 <bt_init+0x434>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <bt_init+0x4e8>)
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	889a      	ldrh	r2, [r3, #4]
 8005ff6:	9002      	str	r0, [sp, #8]
 8005ff8:	799b      	ldrb	r3, [r3, #6]
 8005ffa:	f8ad 200c 	strh.w	r2, [sp, #12]
 8005ffe:	a902      	add	r1, sp, #8
 8006000:	2207      	movs	r2, #7
 8006002:	480e      	ldr	r0, [pc, #56]	; (800603c <bt_init+0x4e0>)
 8006004:	f88d 300e 	strb.w	r3, [sp, #14]
 8006008:	f7fa fc25 	bl	8000856 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
 800600c:	2800      	cmp	r0, #0
 800600e:	d08c      	beq.n	8005f2a <bt_init+0x3ce>
		err = bt_conn_init();
 8006010:	f001 f8f0 	bl	80071f4 <bt_conn_init>
		if (err) {
 8006014:	4604      	mov	r4, r0
 8006016:	2800      	cmp	r0, #0
 8006018:	d1ba      	bne.n	8005f90 <bt_init+0x434>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800601a:	2102      	movs	r1, #2
 800601c:	480a      	ldr	r0, [pc, #40]	; (8006048 <bt_init+0x4ec>)
 800601e:	f7fe fed6 	bl	8004dce <atomic_or>
	bt_le_scan_update(false);
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff f9ce 	bl	80053c4 <bt_le_scan_update>
 8006028:	e7b2      	b.n	8005f90 <bt_init+0x434>
 800602a:	bf00      	nop
 800602c:	20005960 	.word	0x20005960
 8006030:	20005974 	.word	0x20005974
 8006034:	20005947 	.word	0x20005947
 8006038:	20005946 	.word	0x20005946
 800603c:	200058e8 	.word	0x200058e8
 8006040:	20001464 	.word	0x20001464
 8006044:	08012ca4 	.word	0x08012ca4
 8006048:	20005958 	.word	0x20005958
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
 800604c:	2100      	movs	r1, #0
 800604e:	681c      	ldr	r4, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <bt_init+0x564>)
 8006052:	2307      	movs	r3, #7
 8006054:	4608      	mov	r0, r1
 8006056:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
 8006058:	2807      	cmp	r0, #7
 800605a:	f47f af6b 	bne.w	8005f34 <bt_init+0x3d8>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
 800605e:	782b      	ldrb	r3, [r5, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d12a      	bne.n	80060ba <bt_init+0x55e>
 8006064:	79ab      	ldrb	r3, [r5, #6]
 8006066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800606a:	2bc0      	cmp	r3, #192	; 0xc0
 800606c:	d125      	bne.n	80060ba <bt_init+0x55e>
	err = set_random_address(&bt_dev.id_addr.a);
 800606e:	4815      	ldr	r0, [pc, #84]	; (80060c4 <bt_init+0x568>)
 8006070:	f7ff f874 	bl	800515c <set_random_address>
	if (err) {
 8006074:	4604      	mov	r4, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	d18a      	bne.n	8005f90 <bt_init+0x434>
 800607a:	2104      	movs	r1, #4
 800607c:	4812      	ldr	r0, [pc, #72]	; (80060c8 <bt_init+0x56c>)
 800607e:	f7fe fea6 	bl	8004dce <atomic_or>
 8006082:	e7c5      	b.n	8006010 <bt_init+0x4b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
 8006084:	aa01      	add	r2, sp, #4
 8006086:	2100      	movs	r1, #0
 8006088:	f64f 4009 	movw	r0, #64521	; 0xfc09
 800608c:	f7ff f82e 	bl	80050ec <bt_hci_cmd_send_sync>
		if (err) {
 8006090:	2800      	cmp	r0, #0
 8006092:	f47f af54 	bne.w	8005f3e <bt_init+0x3e2>
		rp = (void *)rsp->data;
 8006096:	9801      	ldr	r0, [sp, #4]
 8006098:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
 800609a:	784b      	ldrb	r3, [r1, #1]
 800609c:	b153      	cbz	r3, 80060b4 <bt_init+0x558>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
 800609e:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
 80060a0:	2206      	movs	r2, #6
 80060a2:	3102      	adds	r1, #2
 80060a4:	4807      	ldr	r0, [pc, #28]	; (80060c4 <bt_init+0x568>)
 80060a6:	702b      	strb	r3, [r5, #0]
 80060a8:	f7fa fbea 	bl	8000880 <memcpy>
			net_buf_unref(rsp);
 80060ac:	9801      	ldr	r0, [sp, #4]
 80060ae:	f00b fb0d 	bl	80116cc <net_buf_unref>
 80060b2:	e7d4      	b.n	800605e <bt_init+0x502>
		net_buf_unref(rsp);
 80060b4:	f00b fb0a 	bl	80116cc <net_buf_unref>
 80060b8:	e741      	b.n	8005f3e <bt_init+0x3e2>
		return -EINVAL;
 80060ba:	f06f 0415 	mvn.w	r4, #21
 80060be:	e767      	b.n	8005f90 <bt_init+0x434>
 80060c0:	200058e8 	.word	0x200058e8
 80060c4:	200058e9 	.word	0x200058e9
 80060c8:	20005958 	.word	0x20005958

080060cc <init_work>:
{
 80060cc:	b510      	push	{r4, lr}
	err = bt_init();
 80060ce:	f7ff fd45 	bl	8005b5c <bt_init>
	if (ready_cb) {
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <init_work+0x14>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	b113      	cbz	r3, 80060de <init_work+0x12>
}
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
 80060dc:	4718      	bx	r3
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	200004f0 	.word	0x200004f0

080060e4 <bt_send>:
		return bt_hci_ecc_send(buf);
 80060e4:	f7fe bd4e 	b.w	8004b84 <bt_hci_ecc_send>

080060e8 <bt_recv>:
{
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
 80060ec:	7980      	ldrb	r0, [r0, #6]
 80060ee:	f00b fa1b 	bl	8011528 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 80060f2:	8ac3      	ldrh	r3, [r0, #22]
 80060f4:	2b03      	cmp	r3, #3
		net_buf_unref(buf);
 80060f6:	4620      	mov	r0, r4
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 80060f8:	d804      	bhi.n	8006104 <bt_recv+0x1c>
		net_buf_unref(buf);
 80060fa:	f00b fae7 	bl	80116cc <net_buf_unref>
		return -EINVAL;
 80060fe:	f06f 0015 	mvn.w	r0, #21
}
 8006102:	bd10      	pop	{r4, pc}
 8006104:	f7fe fe5a 	bl	8004dbc <net_buf_user_data>
	switch (bt_buf_get_type(buf)) {
 8006108:	7803      	ldrb	r3, [r0, #0]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d001      	beq.n	8006112 <bt_recv+0x2a>
 800610e:	2b03      	cmp	r3, #3
 8006110:	d105      	bne.n	800611e <bt_recv+0x36>
		net_buf_put(&bt_dev.rx_queue, buf);
 8006112:	4621      	mov	r1, r4
 8006114:	4803      	ldr	r0, [pc, #12]	; (8006124 <bt_recv+0x3c>)
 8006116:	f00b facb 	bl	80116b0 <net_buf_put>
		return 0;
 800611a:	2000      	movs	r0, #0
 800611c:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
 800611e:	4620      	mov	r0, r4
 8006120:	e7eb      	b.n	80060fa <bt_recv+0x12>
 8006122:	bf00      	nop
 8006124:	200059ac 	.word	0x200059ac

08006128 <bt_recv_prio>:
{
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4604      	mov	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
 800612e:	6886      	ldr	r6, [r0, #8]
 8006130:	f7fe fe44 	bl	8004dbc <net_buf_user_data>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
 8006134:	7803      	ldrb	r3, [r0, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d005      	beq.n	8006146 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
 800613a:	4040      	eors	r0, r0
 800613c:	f380 8811 	msr	BASEPRI, r0
 8006140:	f04f 0004 	mov.w	r0, #4
 8006144:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
 8006146:	89a2      	ldrh	r2, [r4, #12]
 8006148:	2a01      	cmp	r2, #1
 800614a:	d9f6      	bls.n	800613a <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
 800614c:	7832      	ldrb	r2, [r6, #0]
 800614e:	2a13      	cmp	r2, #19
 8006150:	d8f3      	bhi.n	800613a <bt_recv_prio+0x12>
 8006152:	4093      	lsls	r3, r2
 8006154:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
 8006158:	d0ef      	beq.n	800613a <bt_recv_prio+0x12>
	net_buf_pull(buf, sizeof(*hdr));
 800615a:	f104 0508 	add.w	r5, r4, #8
 800615e:	2102      	movs	r1, #2
 8006160:	4628      	mov	r0, r5
 8006162:	f00b fb3e 	bl	80117e2 <net_buf_simple_pull>
	switch (hdr->evt) {
 8006166:	7833      	ldrb	r3, [r6, #0]
 8006168:	2b0f      	cmp	r3, #15
 800616a:	d018      	beq.n	800619e <bt_recv_prio+0x76>
 800616c:	2b13      	cmp	r3, #19
 800616e:	d023      	beq.n	80061b8 <bt_recv_prio+0x90>
 8006170:	2b0e      	cmp	r3, #14
 8006172:	d161      	bne.n	8006238 <bt_recv_prio+0x110>
	u8_t status, ncmd = evt->ncmd;
 8006174:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 8006176:	2103      	movs	r1, #3
 8006178:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
 800617a:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
 800617c:	f00b fb31 	bl	80117e2 <net_buf_simple_pull>
	status = buf->data[0];
 8006180:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
 8006182:	4621      	mov	r1, r4
 8006184:	7818      	ldrb	r0, [r3, #0]
 8006186:	f7fe fe5f 	bl	8004e48 <hci_cmd_done.isra.13>
	if (ncmd) {
 800618a:	b116      	cbz	r6, 8006192 <bt_recv_prio+0x6a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 800618c:	482c      	ldr	r0, [pc, #176]	; (8006240 <bt_recv_prio+0x118>)
 800618e:	f00b ff21 	bl	8011fd4 <_impl_k_sem_give>
	net_buf_unref(buf);
 8006192:	4620      	mov	r0, r4
 8006194:	f00b fa9a 	bl	80116cc <net_buf_unref>
}
 8006198:	2000      	movs	r0, #0
 800619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
 800619e:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
 80061a0:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
 80061a2:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
 80061a4:	4628      	mov	r0, r5
 80061a6:	f00b fb1c 	bl	80117e2 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
 80061aa:	4621      	mov	r1, r4
 80061ac:	7830      	ldrb	r0, [r6, #0]
 80061ae:	f7fe fe4b 	bl	8004e48 <hci_cmd_done.isra.13>
	if (ncmd) {
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	d0ed      	beq.n	8006192 <bt_recv_prio+0x6a>
 80061b6:	e7e9      	b.n	800618c <bt_recv_prio+0x64>
 80061b8:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
 80061bc:	2700      	movs	r7, #0
 80061be:	f898 3000 	ldrb.w	r3, [r8]
 80061c2:	429f      	cmp	r7, r3
 80061c4:	dae5      	bge.n	8006192 <bt_recv_prio+0x6a>
 80061c6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
 80061ca:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
 80061ce:	f8b3 6003 	ldrh.w	r6, [r3, #3]
 80061d2:	f04f 0310 	mov.w	r3, #16
 80061d6:	f3ef 8911 	mrs	r9, BASEPRI
 80061da:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
 80061de:	f000 fe23 	bl	8006e28 <bt_conn_lookup_handle>
		if (!conn) {
 80061e2:	4605      	mov	r5, r0
 80061e4:	b918      	cbnz	r0, 80061ee <bt_recv_prio+0xc6>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80061e6:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
 80061ea:	3701      	adds	r7, #1
 80061ec:	e7e7      	b.n	80061be <bt_recv_prio+0x96>
 80061ee:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
 80061f2:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
 80061f6:	b196      	cbz	r6, 800621e <bt_recv_prio+0xf6>
	__asm__ volatile(
 80061f8:	f04f 0310 	mov.w	r3, #16
 80061fc:	f3ef 8011 	mrs	r0, BASEPRI
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	6929      	ldr	r1, [r5, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8006206:	b129      	cbz	r1, 8006214 <bt_recv_prio+0xec>
	if (list->tail == node) {
 8006208:	696a      	ldr	r2, [r5, #20]
	list->head = node->next;
 800620a:	680b      	ldr	r3, [r1, #0]
 800620c:	612b      	str	r3, [r5, #16]
	if (list->tail == node) {
 800620e:	4291      	cmp	r1, r2
		list->tail = list->head;
 8006210:	bf08      	it	eq
 8006212:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006214:	f380 8811 	msr	BASEPRI, r0
 8006218:	3e01      	subs	r6, #1
 800621a:	b2b6      	uxth	r6, r6
			if (!node) {
 800621c:	b919      	cbnz	r1, 8006226 <bt_recv_prio+0xfe>
		bt_conn_unref(conn);
 800621e:	4628      	mov	r0, r5
 8006220:	f000 fe77 	bl	8006f12 <bt_conn_unref>
 8006224:	e7e1      	b.n	80061ea <bt_recv_prio+0xc2>
			k_fifo_put(&conn->tx_notify, node);
 8006226:	4648      	mov	r0, r9
 8006228:	f00b fc41 	bl	8011aae <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fb7f 	bl	8006930 <bt_conn_get_pkts>
 8006232:	f00b fecf 	bl	8011fd4 <_impl_k_sem_give>
 8006236:	e7de      	b.n	80061f6 <bt_recv_prio+0xce>
		net_buf_unref(buf);
 8006238:	4620      	mov	r0, r4
 800623a:	f00b fa47 	bl	80116cc <net_buf_unref>
 800623e:	e77c      	b.n	800613a <bt_recv_prio+0x12>
 8006240:	20005990 	.word	0x20005990

08006244 <bt_hci_driver_register>:
	if (bt_dev.drv) {
 8006244:	4a08      	ldr	r2, [pc, #32]	; (8006268 <bt_hci_driver_register+0x24>)
 8006246:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800624a:	b93b      	cbnz	r3, 800625c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
 800624c:	6881      	ldr	r1, [r0, #8]
 800624e:	b141      	cbz	r1, 8006262 <bt_hci_driver_register+0x1e>
 8006250:	68c1      	ldr	r1, [r0, #12]
 8006252:	b131      	cbz	r1, 8006262 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
 8006254:	f8c2 00f4 	str.w	r0, [r2, #244]	; 0xf4
	return 0;
 8006258:	4618      	mov	r0, r3
 800625a:	4770      	bx	lr
		return -EALREADY;
 800625c:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8006260:	4770      	bx	lr
		return -EINVAL;
 8006262:	f06f 0015 	mvn.w	r0, #21
}
 8006266:	4770      	bx	lr
 8006268:	200058e8 	.word	0x200058e8

0800626c <bt_enable>:
{
 800626c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
 800626e:	4d29      	ldr	r5, [pc, #164]	; (8006314 <bt_enable+0xa8>)
 8006270:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
{
 8006274:	b086      	sub	sp, #24
 8006276:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
 8006278:	2b00      	cmp	r3, #0
 800627a:	d044      	beq.n	8006306 <bt_enable+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 800627c:	2101      	movs	r1, #1
 800627e:	f105 0070 	add.w	r0, r5, #112	; 0x70
 8006282:	f7fe fda4 	bl	8004dce <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
 8006286:	f010 0401 	ands.w	r4, r0, #1
 800628a:	d13f      	bne.n	800630c <bt_enable+0xa0>
	ready_cb = cb;
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <bt_enable+0xac>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 800628e:	4923      	ldr	r1, [pc, #140]	; (800631c <bt_enable+0xb0>)
 8006290:	601e      	str	r6, [r3, #0]
 8006292:	f06f 0308 	mvn.w	r3, #8
 8006296:	9405      	str	r4, [sp, #20]
 8006298:	9404      	str	r4, [sp, #16]
 800629a:	9303      	str	r3, [sp, #12]
 800629c:	9402      	str	r4, [sp, #8]
 800629e:	9401      	str	r4, [sp, #4]
 80062a0:	9400      	str	r4, [sp, #0]
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <bt_enable+0xb4>)
 80062a4:	481f      	ldr	r0, [pc, #124]	; (8006324 <bt_enable+0xb8>)
 80062a6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80062aa:	f00c f8cb 	bl	8012444 <_impl_k_thread_create>
 80062ae:	f06f 0307 	mvn.w	r3, #7
 80062b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062b6:	491c      	ldr	r1, [pc, #112]	; (8006328 <bt_enable+0xbc>)
 80062b8:	9405      	str	r4, [sp, #20]
 80062ba:	9404      	str	r4, [sp, #16]
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	9402      	str	r4, [sp, #8]
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <bt_enable+0xc0>)
 80062c2:	9401      	str	r4, [sp, #4]
 80062c4:	9400      	str	r4, [sp, #0]
 80062c6:	481a      	ldr	r0, [pc, #104]	; (8006330 <bt_enable+0xc4>)
 80062c8:	f00c f8bc 	bl	8012444 <_impl_k_thread_create>
		bt_hci_ecc_init();
 80062cc:	f7fe fcf4 	bl	8004cb8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
 80062d0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	4798      	blx	r3
	if (err) {
 80062d8:	4604      	mov	r4, r0
 80062da:	b988      	cbnz	r0, 8006300 <bt_enable+0x94>
	if (!cb) {
 80062dc:	b926      	cbnz	r6, 80062e8 <bt_enable+0x7c>
}
 80062de:	b006      	add	sp, #24
 80062e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
 80062e4:	f7ff bc3a 	b.w	8005b5c <bt_init>
 80062e8:	2101      	movs	r1, #1
 80062ea:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 80062ee:	f7fe fd6e 	bl	8004dce <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 80062f2:	07c3      	lsls	r3, r0, #31
 80062f4:	d404      	bmi.n	8006300 <bt_enable+0x94>
		k_queue_append(&work_q->queue, work);
 80062f6:	f105 0164 	add.w	r1, r5, #100	; 0x64
 80062fa:	480e      	ldr	r0, [pc, #56]	; (8006334 <bt_enable+0xc8>)
 80062fc:	f00b fbd7 	bl	8011aae <k_queue_append>
}
 8006300:	4620      	mov	r0, r4
 8006302:	b006      	add	sp, #24
 8006304:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 8006306:	f06f 0412 	mvn.w	r4, #18
 800630a:	e7f9      	b.n	8006300 <bt_enable+0x94>
		return -EALREADY;
 800630c:	f06f 0444 	mvn.w	r4, #68	; 0x44
 8006310:	e7f6      	b.n	8006300 <bt_enable+0x94>
 8006312:	bf00      	nop
 8006314:	200058e8 	.word	0x200058e8
 8006318:	200004f0 	.word	0x200004f0
 800631c:	200022b8 	.word	0x200022b8
 8006320:	08004e7d 	.word	0x08004e7d
 8006324:	20000560 	.word	0x20000560
 8006328:	20001ab8 	.word	0x20001ab8
 800632c:	0800557d 	.word	0x0800557d
 8006330:	200004f4 	.word	0x200004f4
 8006334:	20001480 	.word	0x20001480

08006338 <bt_addr_le_is_bonded>:
}
 8006338:	2000      	movs	r0, #0
 800633a:	4770      	bx	lr

0800633c <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
 800633c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800633e:	461e      	mov	r6, r3
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 8006340:	7803      	ldrb	r3, [r0, #0]
 8006342:	f013 0f01 	tst.w	r3, #1
{
 8006346:	4605      	mov	r5, r0
 8006348:	460c      	mov	r4, r1
 800634a:	8843      	ldrh	r3, [r0, #2]
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 800634c:	d10a      	bne.n	8006364 <bt_le_adv_start+0x28>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
 800634e:	4947      	ldr	r1, [pc, #284]	; (800646c <bt_le_adv_start+0x130>)
 8006350:	7b89      	ldrb	r1, [r1, #14]
 8006352:	2908      	cmp	r1, #8
 8006354:	d806      	bhi.n	8006364 <bt_le_adv_start+0x28>
 8006356:	2b9f      	cmp	r3, #159	; 0x9f
 8006358:	d804      	bhi.n	8006364 <bt_le_adv_start+0x28>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
 800635a:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
 800635e:	4620      	mov	r0, r4
 8006360:	b004      	add	sp, #16
 8006362:	bd70      	pop	{r4, r5, r6, pc}
	if (param->interval_min > param->interval_max ||
 8006364:	88a9      	ldrh	r1, [r5, #4]
 8006366:	428b      	cmp	r3, r1
 8006368:	d8f7      	bhi.n	800635a <bt_le_adv_start+0x1e>
 800636a:	2b1f      	cmp	r3, #31
 800636c:	d9f5      	bls.n	800635a <bt_le_adv_start+0x1e>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
 800636e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006372:	d8f2      	bhi.n	800635a <bt_le_adv_start+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 8006374:	2105      	movs	r1, #5
 8006376:	483e      	ldr	r0, [pc, #248]	; (8006470 <bt_le_adv_start+0x134>)
 8006378:	f7fe fd3a 	bl	8004df0 <atomic_test_bit>
 800637c:	b110      	cbz	r0, 8006384 <bt_le_adv_start+0x48>
		return -EALREADY;
 800637e:	f06f 0444 	mvn.w	r4, #68	; 0x44
 8006382:	e7ec      	b.n	800635e <bt_le_adv_start+0x22>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
 8006384:	4621      	mov	r1, r4
 8006386:	f242 0008 	movw	r0, #8200	; 0x2008
 800638a:	f7fe ff85 	bl	8005298 <set_ad>
	if (err) {
 800638e:	4604      	mov	r4, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	d1e4      	bne.n	800635e <bt_le_adv_start+0x22>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
 8006394:	2e00      	cmp	r6, #0
 8006396:	d146      	bne.n	8006426 <bt_le_adv_start+0xea>
 8006398:	782b      	ldrb	r3, [r5, #0]
 800639a:	07d9      	lsls	r1, r3, #31
 800639c:	d443      	bmi.n	8006426 <bt_le_adv_start+0xea>
	memset(&set_param, 0, sizeof(set_param));
 800639e:	220f      	movs	r2, #15
 80063a0:	2100      	movs	r1, #0
 80063a2:	4668      	mov	r0, sp
 80063a4:	f7fa fa98 	bl	80008d8 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
 80063a8:	886b      	ldrh	r3, [r5, #2]
 80063aa:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
 80063ae:	88ab      	ldrh	r3, [r5, #4]
 80063b0:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
 80063b4:	2307      	movs	r3, #7
 80063b6:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
 80063ba:	782b      	ldrb	r3, [r5, #0]
 80063bc:	07da      	lsls	r2, r3, #31
 80063be:	d53c      	bpl.n	800643a <bt_le_adv_start+0xfe>
			if (atomic_test_bit(bt_dev.flags,
 80063c0:	2102      	movs	r1, #2
 80063c2:	482b      	ldr	r0, [pc, #172]	; (8006470 <bt_le_adv_start+0x134>)
 80063c4:	4c29      	ldr	r4, [pc, #164]	; (800646c <bt_le_adv_start+0x130>)
 80063c6:	f7fe fd13 	bl	8004df0 <atomic_test_bit>
 80063ca:	b110      	cbz	r0, 80063d2 <bt_le_adv_start+0x96>
				set_random_address(&bt_dev.id_addr.a);
 80063cc:	1c60      	adds	r0, r4, #1
 80063ce:	f7fe fec5 	bl	800515c <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
 80063d2:	7823      	ldrb	r3, [r4, #0]
 80063d4:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
 80063d8:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 80063da:	210f      	movs	r1, #15
 80063dc:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
 80063e0:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
 80063e4:	f7fe fdc0 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 80063e8:	4604      	mov	r4, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d03b      	beq.n	8006466 <bt_le_adv_start+0x12a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 80063ee:	220f      	movs	r2, #15
 80063f0:	4669      	mov	r1, sp
 80063f2:	3008      	adds	r0, #8
 80063f4:	f00b f990 	bl	8011718 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
 80063f8:	4621      	mov	r1, r4
 80063fa:	2200      	movs	r2, #0
 80063fc:	f242 0006 	movw	r0, #8198	; 0x2006
 8006400:	f7fe fe74 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 8006404:	4604      	mov	r4, r0
 8006406:	2800      	cmp	r0, #0
 8006408:	d1a9      	bne.n	800635e <bt_le_adv_start+0x22>
	err = set_advertise_enable(true);
 800640a:	2001      	movs	r0, #1
 800640c:	f7fe ff1a 	bl	8005244 <set_advertise_enable>
	if (err) {
 8006410:	4604      	mov	r4, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d1a3      	bne.n	800635e <bt_le_adv_start+0x22>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
 8006416:	782b      	ldrb	r3, [r5, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	d4a0      	bmi.n	800635e <bt_le_adv_start+0x22>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 800641c:	2140      	movs	r1, #64	; 0x40
 800641e:	4814      	ldr	r0, [pc, #80]	; (8006470 <bt_le_adv_start+0x134>)
 8006420:	f7fe fcd5 	bl	8004dce <atomic_or>
 8006424:	e79b      	b.n	800635e <bt_le_adv_start+0x22>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
 8006426:	9a08      	ldr	r2, [sp, #32]
 8006428:	4631      	mov	r1, r6
 800642a:	f242 0009 	movw	r0, #8201	; 0x2009
 800642e:	f7fe ff33 	bl	8005298 <set_ad>
		if (err) {
 8006432:	4604      	mov	r4, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	d0b2      	beq.n	800639e <bt_le_adv_start+0x62>
 8006438:	e791      	b.n	800635e <bt_le_adv_start+0x22>
		if (param->own_addr) {
 800643a:	68a8      	ldr	r0, [r5, #8]
 800643c:	b170      	cbz	r0, 800645c <bt_le_adv_start+0x120>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
 800643e:	7943      	ldrb	r3, [r0, #5]
 8006440:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8006444:	d189      	bne.n	800635a <bt_le_adv_start+0x1e>
			err = set_random_address(param->own_addr);
 8006446:	f7fe fe89 	bl	800515c <set_random_address>
			err = le_set_private_addr();
 800644a:	4604      	mov	r4, r0
		if (err) {
 800644c:	2800      	cmp	r0, #0
 800644e:	d186      	bne.n	800635e <bt_le_adv_start+0x22>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
 8006450:	2301      	movs	r3, #1
 8006452:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
 8006456:	b126      	cbz	r6, 8006462 <bt_le_adv_start+0x126>
			set_param.type = BT_LE_ADV_SCAN_IND;
 8006458:	2302      	movs	r3, #2
 800645a:	e7be      	b.n	80063da <bt_le_adv_start+0x9e>
			err = le_set_private_addr();
 800645c:	f7fe feac 	bl	80051b8 <le_set_private_addr>
 8006460:	e7f3      	b.n	800644a <bt_le_adv_start+0x10e>
			set_param.type = BT_LE_ADV_NONCONN_IND;
 8006462:	2303      	movs	r3, #3
 8006464:	e7b9      	b.n	80063da <bt_le_adv_start+0x9e>
		return -ENOBUFS;
 8006466:	f06f 0436 	mvn.w	r4, #54	; 0x36
 800646a:	e778      	b.n	800635e <bt_le_adv_start+0x22>
 800646c:	200058e8 	.word	0x200058e8
 8006470:	20005958 	.word	0x20005958

08006474 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
 8006474:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 8006476:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800647a:	4810      	ldr	r0, [pc, #64]	; (80064bc <bt_le_adv_stop+0x48>)
 800647c:	f7fe fcc5 	bl	8004e0a <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 8006480:	2105      	movs	r1, #5
 8006482:	480e      	ldr	r0, [pc, #56]	; (80064bc <bt_le_adv_stop+0x48>)
 8006484:	f7fe fcb4 	bl	8004df0 <atomic_test_bit>
 8006488:	b910      	cbnz	r0, 8006490 <bt_le_adv_stop+0x1c>
		return 0;
 800648a:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
 800648c:	4620      	mov	r0, r4
 800648e:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
 8006490:	2000      	movs	r0, #0
 8006492:	f7fe fed7 	bl	8005244 <set_advertise_enable>
	if (err) {
 8006496:	4604      	mov	r4, r0
 8006498:	2800      	cmp	r0, #0
 800649a:	d1f7      	bne.n	800648c <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 800649c:	2107      	movs	r1, #7
 800649e:	4807      	ldr	r0, [pc, #28]	; (80064bc <bt_le_adv_stop+0x48>)
 80064a0:	f7fe fca6 	bl	8004df0 <atomic_test_bit>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d0f0      	beq.n	800648a <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
 80064a8:	2109      	movs	r1, #9
 80064aa:	4804      	ldr	r0, [pc, #16]	; (80064bc <bt_le_adv_stop+0x48>)
 80064ac:	f7fe fca0 	bl	8004df0 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0ea      	beq.n	800648a <bt_le_adv_stop+0x16>
			le_set_private_addr();
 80064b4:	f7fe fe80 	bl	80051b8 <le_set_private_addr>
 80064b8:	e7e8      	b.n	800648c <bt_le_adv_stop+0x18>
 80064ba:	bf00      	nop
 80064bc:	20005958 	.word	0x20005958

080064c0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
 80064c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
 80064c4:	7803      	ldrb	r3, [r0, #0]
 80064c6:	2b01      	cmp	r3, #1
{
 80064c8:	4605      	mov	r5, r0
 80064ca:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
 80064cc:	d810      	bhi.n	80064f0 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
 80064ce:	7843      	ldrb	r3, [r0, #1]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d80d      	bhi.n	80064f0 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
 80064d4:	8841      	ldrh	r1, [r0, #2]
 80064d6:	1f0b      	subs	r3, r1, #4
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80064de:	4283      	cmp	r3, r0
 80064e0:	d806      	bhi.n	80064f0 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
 80064e2:	88aa      	ldrh	r2, [r5, #4]
 80064e4:	1f13      	subs	r3, r2, #4
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4283      	cmp	r3, r0
 80064ea:	d801      	bhi.n	80064f0 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
 80064ec:	4291      	cmp	r1, r2
 80064ee:	d26e      	bcs.n	80065ce <bt_le_scan_start+0x10e>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
 80064f0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
 80064f4:	4620      	mov	r0, r4
 80064f6:	b002      	add	sp, #8
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
 80064fc:	2107      	movs	r1, #7
 80064fe:	483b      	ldr	r0, [pc, #236]	; (80065ec <bt_le_scan_start+0x12c>)
 8006500:	f7fe fc76 	bl	8004df0 <atomic_test_bit>
 8006504:	b150      	cbz	r0, 800651c <bt_le_scan_start+0x5c>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
 8006506:	4610      	mov	r0, r2
 8006508:	f7fe fe68 	bl	80051dc <set_le_scan_enable>
		if (err) {
 800650c:	4604      	mov	r4, r0
 800650e:	b128      	cbz	r0, 800651c <bt_le_scan_start+0x5c>
 8006510:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8006514:	4835      	ldr	r0, [pc, #212]	; (80065ec <bt_le_scan_start+0x12c>)
 8006516:	f7fe fc78 	bl	8004e0a <atomic_and>
		return err;
 800651a:	e7eb      	b.n	80064f4 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
 800651c:	786b      	ldrb	r3, [r5, #1]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d049      	beq.n	80065b6 <bt_le_scan_start+0xf6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8006522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006526:	4831      	ldr	r0, [pc, #196]	; (80065ec <bt_le_scan_start+0x12c>)
 8006528:	f7fe fc51 	bl	8004dce <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
 800652c:	2207      	movs	r2, #7
 800652e:	2100      	movs	r1, #0
 8006530:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
 8006532:	782e      	ldrb	r6, [r5, #0]
 8006534:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8006538:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
 800653a:	f7fa f9cd 	bl	80008d8 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
 800653e:	482c      	ldr	r0, [pc, #176]	; (80065f0 <bt_le_scan_start+0x130>)
	set_param.scan_type = scan_type;
 8006540:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
 8006544:	2300      	movs	r3, #0
 8006546:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
 800654a:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr.type;
 800654c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
 800654e:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
 8006552:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
 8006556:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
 800655a:	d10b      	bne.n	8006574 <bt_le_scan_start+0xb4>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
 800655c:	2105      	movs	r1, #5
 800655e:	3070      	adds	r0, #112	; 0x70
 8006560:	f7fe fc46 	bl	8004df0 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
 8006564:	b930      	cbnz	r0, 8006574 <bt_le_scan_start+0xb4>
			err = le_set_private_addr();
 8006566:	f7fe fe27 	bl	80051b8 <le_set_private_addr>
			if (err) {
 800656a:	4604      	mov	r4, r0
 800656c:	2800      	cmp	r0, #0
 800656e:	d1cf      	bne.n	8006510 <bt_le_scan_start+0x50>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
 8006570:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
 8006574:	2107      	movs	r1, #7
 8006576:	f242 000b 	movw	r0, #8203	; 0x200b
 800657a:	f7fe fcf5 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 800657e:	4604      	mov	r4, r0
 8006580:	b380      	cbz	r0, 80065e4 <bt_le_scan_start+0x124>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
 8006582:	2207      	movs	r2, #7
 8006584:	4669      	mov	r1, sp
 8006586:	3008      	adds	r0, #8
 8006588:	f00b f8c6 	bl	8011718 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
 800658c:	4621      	mov	r1, r4
 800658e:	f242 000b 	movw	r0, #8203	; 0x200b
 8006592:	f7fe fd0d 	bl	8004fb0 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
 8006596:	2001      	movs	r0, #1
 8006598:	f7fe fe20 	bl	80051dc <set_le_scan_enable>
	if (err) {
 800659c:	4604      	mov	r4, r0
 800659e:	2800      	cmp	r0, #0
 80065a0:	d1b6      	bne.n	8006510 <bt_le_scan_start+0x50>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
 80065a2:	2e01      	cmp	r6, #1
 80065a4:	d10d      	bne.n	80065c2 <bt_le_scan_start+0x102>
 80065a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065aa:	4810      	ldr	r0, [pc, #64]	; (80065ec <bt_le_scan_start+0x12c>)
 80065ac:	f7fe fc0f 	bl	8004dce <atomic_or>
	scan_dev_found_cb = cb;
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <bt_le_scan_start+0x134>)
 80065b2:	601f      	str	r7, [r3, #0]
	return 0;
 80065b4:	e79e      	b.n	80064f4 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80065b6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80065ba:	480c      	ldr	r0, [pc, #48]	; (80065ec <bt_le_scan_start+0x12c>)
 80065bc:	f7fe fc25 	bl	8004e0a <atomic_and>
 80065c0:	e7b4      	b.n	800652c <bt_le_scan_start+0x6c>
 80065c2:	f46f 7100 	mvn.w	r1, #512	; 0x200
 80065c6:	4809      	ldr	r0, [pc, #36]	; (80065ec <bt_le_scan_start+0x12c>)
 80065c8:	f7fe fc1f 	bl	8004e0a <atomic_and>
 80065cc:	e7f0      	b.n	80065b0 <bt_le_scan_start+0xf0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 80065ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065d2:	4806      	ldr	r0, [pc, #24]	; (80065ec <bt_le_scan_start+0x12c>)
 80065d4:	f7fe fbfb 	bl	8004dce <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 80065d8:	f410 7280 	ands.w	r2, r0, #256	; 0x100
 80065dc:	d08e      	beq.n	80064fc <bt_le_scan_start+0x3c>
		return -EALREADY;
 80065de:	f06f 0444 	mvn.w	r4, #68	; 0x44
 80065e2:	e787      	b.n	80064f4 <bt_le_scan_start+0x34>
		return -ENOBUFS;
 80065e4:	f06f 0436 	mvn.w	r4, #54	; 0x36
 80065e8:	e792      	b.n	8006510 <bt_le_scan_start+0x50>
 80065ea:	bf00      	nop
 80065ec:	20005958 	.word	0x20005958
 80065f0:	200058e8 	.word	0x200058e8
 80065f4:	2000055c 	.word	0x2000055c

080065f8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
 80065f8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80065fa:	f46f 7180 	mvn.w	r1, #256	; 0x100
 80065fe:	4807      	ldr	r0, [pc, #28]	; (800661c <bt_le_scan_stop+0x24>)
 8006600:	f7fe fc03 	bl	8004e0a <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
 8006604:	05c3      	lsls	r3, r0, #23
 8006606:	d506      	bpl.n	8006616 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <bt_le_scan_stop+0x28>)
 800660a:	2000      	movs	r0, #0
 800660c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
 800660e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
 8006612:	f7fe bed7 	b.w	80053c4 <bt_le_scan_update>
}
 8006616:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800661a:	bd08      	pop	{r3, pc}
 800661c:	20005958 	.word	0x20005958
 8006620:	2000055c 	.word	0x2000055c

08006624 <bt_buf_get_rx>:

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN,
		 "Invalid buffer type requested");

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
 8006624:	2801      	cmp	r0, #1
{
 8006626:	b538      	push	{r3, r4, r5, lr}
 8006628:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
 800662a:	bf0c      	ite	eq
 800662c:	4807      	ldreq	r0, [pc, #28]	; (800664c <bt_buf_get_rx+0x28>)
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
 800662e:	4808      	ldrne	r0, [pc, #32]	; (8006650 <bt_buf_get_rx+0x2c>)
 8006630:	f00a ff96 	bl	8011560 <net_buf_alloc>
 8006634:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
 8006636:	b130      	cbz	r0, 8006646 <bt_buf_get_rx+0x22>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 8006638:	2101      	movs	r1, #1
 800663a:	f00a ffea 	bl	8011612 <net_buf_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
 800663e:	4620      	mov	r0, r4
 8006640:	f7fe fbbc 	bl	8004dbc <net_buf_user_data>
 8006644:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
 8006646:	4620      	mov	r0, r4
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	bf00      	nop
 800664c:	20006584 	.word	0x20006584
 8006650:	200064e4 	.word	0x200064e4

08006654 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
 8006654:	b510      	push	{r4, lr}
 8006656:	4601      	mov	r1, r0
	__asm__ volatile(
 8006658:	f04f 0310 	mov.w	r3, #16
 800665c:	f3ef 8011 	mrs	r0, BASEPRI
 8006660:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
 8006666:	2200      	movs	r2, #0
	buf = bt_dev.sent_cmd;
 8006668:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
 800666c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006670:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
 8006674:	b924      	cbnz	r4, 8006680 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 8006676:	2001      	movs	r0, #1
}
 8006678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
 800667c:	f7ff bfd2 	b.w	8006624 <bt_buf_get_rx>
 8006680:	4620      	mov	r0, r4
 8006682:	f7fe fb9b 	bl	8004dbc <net_buf_user_data>
 8006686:	2101      	movs	r1, #1
 8006688:	7001      	strb	r1, [r0, #0]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 800668a:	4620      	mov	r0, r4
		buf->len = 0;
 800668c:	81a2      	strh	r2, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
 800668e:	f00a ffc0 	bl	8011612 <net_buf_reserve>
}
 8006692:	4620      	mov	r0, r4
 8006694:	bd10      	pop	{r4, pc}
 8006696:	bf00      	nop
 8006698:	200058e8 	.word	0x200058e8

0800669c <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
 80066a0:	4e1d      	ldr	r6, [pc, #116]	; (8006718 <bt_pub_key_gen+0x7c>)
 80066a2:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80066a6:	f003 0306 	and.w	r3, r3, #6
 80066aa:	2b06      	cmp	r3, #6
{
 80066ac:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
 80066ae:	d130      	bne.n	8006712 <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
 80066b0:	4d1a      	ldr	r5, [pc, #104]	; (800671c <bt_pub_key_gen+0x80>)
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
 80066b6:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 80066b8:	2110      	movs	r1, #16
 80066ba:	f106 0070 	add.w	r0, r6, #112	; 0x70
 80066be:	f7fe fb86 	bl	8004dce <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 80066c2:	f010 0810 	ands.w	r8, r0, #16
 80066c6:	d003      	beq.n	80066d0 <bt_pub_key_gen+0x34>
		return 0;
 80066c8:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
 80066ca:	4620      	mov	r0, r4
 80066cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 80066d0:	f06f 0108 	mvn.w	r1, #8
 80066d4:	f106 0070 	add.w	r0, r6, #112	; 0x70
 80066d8:	f7fe fb97 	bl	8004e0a <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
 80066dc:	4642      	mov	r2, r8
 80066de:	4641      	mov	r1, r8
 80066e0:	f242 0025 	movw	r0, #8229	; 0x2025
 80066e4:	f7fe fd02 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 80066e8:	4604      	mov	r4, r0
 80066ea:	b140      	cbz	r0, 80066fe <bt_pub_key_gen+0x62>
 80066ec:	f06f 0110 	mvn.w	r1, #16
 80066f0:	f106 0070 	add.w	r0, r6, #112	; 0x70
 80066f4:	f7fe fb89 	bl	8004e0a <atomic_and>
		pub_key_cb = NULL;
 80066f8:	f8c5 8000 	str.w	r8, [r5]
		return err;
 80066fc:	e7e5      	b.n	80066ca <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 80066fe:	682c      	ldr	r4, [r5, #0]
 8006700:	2c00      	cmp	r4, #0
 8006702:	d0e1      	beq.n	80066c8 <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
 8006704:	42bc      	cmp	r4, r7
 8006706:	d002      	beq.n	800670e <bt_pub_key_gen+0x72>
			cb->func(NULL);
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
 800670e:	6864      	ldr	r4, [r4, #4]
 8006710:	e7f6      	b.n	8006700 <bt_pub_key_gen+0x64>
		return -ENOTSUP;
 8006712:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8006716:	e7d8      	b.n	80066ca <bt_pub_key_gen+0x2e>
 8006718:	200058e8 	.word	0x200058e8
 800671c:	200004ec 	.word	0x200004ec

08006720 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
 8006720:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 8006722:	2103      	movs	r1, #3
 8006724:	4803      	ldr	r0, [pc, #12]	; (8006734 <bt_pub_key_get+0x14>)
 8006726:	f7fe fb63 	bl	8004df0 <atomic_test_bit>
 800672a:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <bt_pub_key_get+0x18>)
 800672e:	bf08      	it	eq
 8006730:	2000      	moveq	r0, #0
 8006732:	bd08      	pop	{r3, pc}
 8006734:	20005958 	.word	0x20005958
 8006738:	200004ac 	.word	0x200004ac

0800673c <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800673e:	4c1a      	ldr	r4, [pc, #104]	; (80067a8 <bt_dh_key_gen+0x6c>)
 8006740:	6823      	ldr	r3, [r4, #0]
{
 8006742:	4607      	mov	r7, r0
 8006744:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 8006746:	b113      	cbz	r3, 800674e <bt_dh_key_gen+0x12>
		return -EBUSY;
 8006748:	f06f 000f 	mvn.w	r0, #15
 800674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
 800674e:	2104      	movs	r1, #4
 8006750:	4816      	ldr	r0, [pc, #88]	; (80067ac <bt_dh_key_gen+0x70>)
 8006752:	f7fe fb4d 	bl	8004df0 <atomic_test_bit>
 8006756:	4606      	mov	r6, r0
 8006758:	2800      	cmp	r0, #0
 800675a:	d1f5      	bne.n	8006748 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
 800675c:	2103      	movs	r1, #3
 800675e:	4813      	ldr	r0, [pc, #76]	; (80067ac <bt_dh_key_gen+0x70>)
 8006760:	f7fe fb46 	bl	8004df0 <atomic_test_bit>
 8006764:	b1e0      	cbz	r0, 80067a0 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 8006766:	2140      	movs	r1, #64	; 0x40
 8006768:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
 800676c:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
 800676e:	f7fe fbfb 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8006772:	4605      	mov	r5, r0
 8006774:	b918      	cbnz	r0, 800677e <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
 8006776:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
 8006778:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
 800677e:	2140      	movs	r1, #64	; 0x40
 8006780:	3008      	adds	r0, #8
 8006782:	f00a ffc3 	bl	801170c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
 8006786:	2240      	movs	r2, #64	; 0x40
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f879 	bl	8000880 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
 800678e:	4632      	mov	r2, r6
 8006790:	4629      	mov	r1, r5
 8006792:	f242 0026 	movw	r0, #8230	; 0x2026
 8006796:	f7fe fca9 	bl	80050ec <bt_hci_cmd_send_sync>
	if (err) {
 800679a:	b118      	cbz	r0, 80067a4 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
 800679c:	6026      	str	r6, [r4, #0]
		return err;
 800679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
 80067a0:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
 80067a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200004a8 	.word	0x200004a8
 80067ac:	20005958 	.word	0x20005958

080067b0 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
 80067b0:	b530      	push	{r4, r5, lr}
 80067b2:	2400      	movs	r4, #0
 80067b4:	b08d      	sub	sp, #52	; 0x34

	for (i = 0; i < (sizeof(seed) / 8); i++) {
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 80067b6:	aa02      	add	r2, sp, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	f242 0018 	movw	r0, #8216	; 0x2018
 80067be:	f7fe fc95 	bl	80050ec <bt_hci_cmd_send_sync>
		if (ret) {
 80067c2:	4605      	mov	r5, r0
 80067c4:	b9e8      	cbnz	r0, 8006802 <prng_reseed.constprop.0+0x52>
			return ret;
		}

		rp = (void *)rsp->data;
 80067c6:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
 80067c8:	6899      	ldr	r1, [r3, #8]
 80067ca:	ab04      	add	r3, sp, #16
 80067cc:	1918      	adds	r0, r3, r4
 80067ce:	2208      	movs	r2, #8
 80067d0:	3101      	adds	r1, #1
 80067d2:	f7fa f855 	bl	8000880 <memcpy>
 80067d6:	3408      	adds	r4, #8

		net_buf_unref(rsp);
 80067d8:	9802      	ldr	r0, [sp, #8]
 80067da:	f00a ff77 	bl	80116cc <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
 80067de:	2c20      	cmp	r4, #32
 80067e0:	d1e9      	bne.n	80067b6 <prng_reseed.constprop.0+0x6>
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 80067e2:	f00b fc6b 	bl	80120bc <_impl_k_uptime_get>
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
 80067e6:	2308      	movs	r3, #8
	extra = k_uptime_get();
 80067e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (u8_t *)&extra,
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4622      	mov	r2, r4
 80067f0:	446b      	add	r3, sp
 80067f2:	a904      	add	r1, sp, #16
 80067f4:	4804      	ldr	r0, [pc, #16]	; (8006808 <prng_reseed.constprop.0+0x58>)
 80067f6:	f7fc f80a 	bl	800280e <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
		BT_ERR("Failed to re-seed PRNG");
		return -EIO;
 80067fa:	2800      	cmp	r0, #0
 80067fc:	bf08      	it	eq
 80067fe:	f06f 0504 	mvneq.w	r5, #4
	}

	return 0;
}
 8006802:	4628      	mov	r0, r5
 8006804:	b00d      	add	sp, #52	; 0x34
 8006806:	bd30      	pop	{r4, r5, pc}
 8006808:	200005c8 	.word	0x200005c8

0800680c <prng_init>:

int prng_init(void)
{
 800680c:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!(bt_dev.supported_commands[27] & BIT(7))) {
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <prng_init+0x48>)
 8006810:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8006814:	2b00      	cmp	r3, #0
 8006816:	da16      	bge.n	8006846 <prng_init+0x3a>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
 8006818:	aa01      	add	r2, sp, #4
 800681a:	2100      	movs	r1, #0
 800681c:	f242 0018 	movw	r0, #8216	; 0x2018
 8006820:	f7fe fc64 	bl	80050ec <bt_hci_cmd_send_sync>
	if (ret) {
 8006824:	b968      	cbnz	r0, 8006842 <prng_init+0x36>
		return ret;
	}

	rp = (void *)rsp->data;
 8006826:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
 8006828:	480b      	ldr	r0, [pc, #44]	; (8006858 <prng_init+0x4c>)
 800682a:	6899      	ldr	r1, [r3, #8]
 800682c:	2208      	movs	r2, #8
 800682e:	3101      	adds	r1, #1
 8006830:	f7fb ffc8 	bl	80027c4 <tc_hmac_prng_init>
 8006834:	4604      	mov	r4, r0

	net_buf_unref(rsp);
 8006836:	9801      	ldr	r0, [sp, #4]
 8006838:	f00a ff48 	bl	80116cc <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
 800683c:	b134      	cbz	r4, 800684c <prng_init+0x40>
		BT_ERR("Failed to initialize PRNG");
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
 800683e:	f7ff ffb7 	bl	80067b0 <prng_reseed.constprop.0>
}
 8006842:	b002      	add	sp, #8
 8006844:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8006846:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800684a:	e7fa      	b.n	8006842 <prng_init+0x36>
		return -EIO;
 800684c:	f06f 0004 	mvn.w	r0, #4
 8006850:	e7f7      	b.n	8006842 <prng_init+0x36>
 8006852:	bf00      	nop
 8006854:	200058e8 	.word	0x200058e8
 8006858:	200005c8 	.word	0x200005c8

0800685c <bt_rand>:

int bt_rand(void *buf, size_t len)
{
 800685c:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
 800685e:	4a0a      	ldr	r2, [pc, #40]	; (8006888 <bt_rand+0x2c>)
{
 8006860:	4604      	mov	r4, r0
 8006862:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
 8006864:	f7fb ffed 	bl	8002842 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d107      	bne.n	800687c <bt_rand+0x20>
		ret = prng_reseed(&prng);
 800686c:	f7ff ffa0 	bl	80067b0 <prng_reseed.constprop.0>
		if (ret) {
 8006870:	b948      	cbnz	r0, 8006886 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <bt_rand+0x2c>)
 8006874:	4629      	mov	r1, r5
 8006876:	4620      	mov	r0, r4
 8006878:	f7fb ffe3 	bl	8002842 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
 800687c:	2801      	cmp	r0, #1
 800687e:	bf0c      	ite	eq
 8006880:	2000      	moveq	r0, #0
 8006882:	f06f 0004 	mvnne.w	r0, #4
}
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	200005c8 	.word	0x200005c8

0800688c <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
 800688c:	b530      	push	{r4, r5, lr}
 800688e:	b0ad      	sub	sp, #180	; 0xb4
 8006890:	460d      	mov	r5, r1
	struct tc_aes_key_sched_struct s;

	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	if (tc_aes128_set_encrypt_key(&s, key) == TC_CRYPTO_FAIL) {
 8006892:	4601      	mov	r1, r0
 8006894:	4668      	mov	r0, sp
{
 8006896:	4614      	mov	r4, r2
	if (tc_aes128_set_encrypt_key(&s, key) == TC_CRYPTO_FAIL) {
 8006898:	f7fb fb2c 	bl	8001ef4 <tc_aes128_set_encrypt_key>
 800689c:	b918      	cbnz	r0, 80068a6 <bt_encrypt_be+0x1a>
		return -EINVAL;
 800689e:	f06f 0015 	mvn.w	r0, #21
	}

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
 80068a2:	b02d      	add	sp, #180	; 0xb4
 80068a4:	bd30      	pop	{r4, r5, pc}
	if (tc_aes_encrypt(enc_data, plaintext, &s) == TC_CRYPTO_FAIL) {
 80068a6:	466a      	mov	r2, sp
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7fb fb78 	bl	8001fa0 <tc_aes_encrypt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d0f4      	beq.n	800689e <bt_encrypt_be+0x12>
	return 0;
 80068b4:	2000      	movs	r0, #0
 80068b6:	e7f4      	b.n	80068a2 <bt_encrypt_be+0x16>

080068b8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
 80068b8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <notify_connected+0x1c>)
 80068bc:	681c      	ldr	r4, [r3, #0]
{
 80068be:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 80068c0:	b904      	cbnz	r4, 80068c4 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	b113      	cbz	r3, 80068ce <notify_connected+0x16>
			cb->connected(conn, conn->err);
 80068c8:	7a29      	ldrb	r1, [r5, #8]
 80068ca:	4628      	mov	r0, r5
 80068cc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 80068ce:	6924      	ldr	r4, [r4, #16]
 80068d0:	e7f6      	b.n	80068c0 <notify_connected+0x8>
 80068d2:	bf00      	nop
 80068d4:	20000700 	.word	0x20000700

080068d8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80068d8:	f3bf 8f5b 	dmb	ish
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f3bf 8f5b 	dmb	ish
}
 80068e2:	4770      	bx	lr

080068e4 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
 80068e4:	8943      	ldrh	r3, [r0, #10]
{
 80068e6:	b510      	push	{r4, lr}
 80068e8:	4604      	mov	r4, r0
	if (!conn->rx_len) {
 80068ea:	b12b      	cbz	r3, 80068f8 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
 80068ec:	68c0      	ldr	r0, [r0, #12]
 80068ee:	f00a feed 	bl	80116cc <net_buf_unref>
	conn->rx = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
 80068f6:	8163      	strh	r3, [r4, #10]
 80068f8:	bd10      	pop	{r4, pc}

080068fa <atomic_dec>:
}
 80068fa:	f3bf 8f5b 	dmb	ish
 80068fe:	e850 3f00 	ldrex	r3, [r0]
 8006902:	1e5a      	subs	r2, r3, #1
 8006904:	e840 2100 	strex	r1, r2, [r0]
 8006908:	2900      	cmp	r1, #0
 800690a:	d1f8      	bne.n	80068fe <atomic_dec+0x4>
 800690c:	f3bf 8f5b 	dmb	ish
 8006910:	4618      	mov	r0, r3
 8006912:	4770      	bx	lr

08006914 <atomic_inc>:
}
 8006914:	f3bf 8f5b 	dmb	ish
 8006918:	e850 3f00 	ldrex	r3, [r0]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	e840 2100 	strex	r1, r2, [r0]
 8006922:	2900      	cmp	r1, #0
 8006924:	d1f8      	bne.n	8006918 <atomic_inc+0x4>
 8006926:	f3bf 8f5b 	dmb	ish
 800692a:	4618      	mov	r0, r3
 800692c:	4770      	bx	lr
	...

08006930 <bt_conn_get_pkts>:
}
 8006930:	4800      	ldr	r0, [pc, #0]	; (8006934 <bt_conn_get_pkts+0x4>)
 8006932:	4770      	bx	lr
 8006934:	20005974 	.word	0x20005974

08006938 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
 8006938:	4b08      	ldr	r3, [pc, #32]	; (800695c <notify_le_param_updated+0x24>)
{
 800693a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
 800693c:	681c      	ldr	r4, [r3, #0]
{
 800693e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
 8006940:	b904      	cbnz	r4, 8006944 <notify_le_param_updated+0xc>
}
 8006942:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
 8006944:	68e6      	ldr	r6, [r4, #12]
 8006946:	b13e      	cbz	r6, 8006958 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
 8006948:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800694c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
 8006950:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
 8006954:	4628      	mov	r0, r5
 8006956:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
 8006958:	6924      	ldr	r4, [r4, #16]
 800695a:	e7f1      	b.n	8006940 <notify_le_param_updated+0x8>
 800695c:	20000700 	.word	0x20000700

08006960 <le_param_req>:
{
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
 8006964:	4608      	mov	r0, r1
{
 8006966:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
 8006968:	f7fe fd0c 	bl	8005384 <bt_le_conn_params_valid>
 800696c:	4605      	mov	r5, r0
 800696e:	b910      	cbnz	r0, 8006976 <le_param_req+0x16>
		return false;
 8006970:	2500      	movs	r5, #0
}
 8006972:	4628      	mov	r0, r5
 8006974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <le_param_req+0x3c>)
 8006978:	681c      	ldr	r4, [r3, #0]
 800697a:	2c00      	cmp	r4, #0
 800697c:	d0f9      	beq.n	8006972 <le_param_req+0x12>
		if (!cb->le_param_req) {
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	b90b      	cbnz	r3, 8006986 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
 8006982:	6924      	ldr	r4, [r4, #16]
 8006984:	e7f9      	b.n	800697a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
 8006986:	4631      	mov	r1, r6
 8006988:	4638      	mov	r0, r7
 800698a:	4798      	blx	r3
 800698c:	2800      	cmp	r0, #0
 800698e:	d0ef      	beq.n	8006970 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
 8006990:	4630      	mov	r0, r6
 8006992:	f7fe fcf7 	bl	8005384 <bt_le_conn_params_valid>
 8006996:	2800      	cmp	r0, #0
 8006998:	d1f3      	bne.n	8006982 <le_param_req+0x22>
 800699a:	e7e9      	b.n	8006970 <le_param_req+0x10>
 800699c:	20000700 	.word	0x20000700

080069a0 <bt_conn_cb_register>:
	cb->_next = callback_list;
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <bt_conn_cb_register+0xc>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	6102      	str	r2, [r0, #16]
	callback_list = cb;
 80069a6:	6018      	str	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000700 	.word	0x20000700

080069b0 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
 80069b0:	2a01      	cmp	r2, #1
{
 80069b2:	b570      	push	{r4, r5, r6, lr}
 80069b4:	4605      	mov	r5, r0
 80069b6:	460c      	mov	r4, r1
	switch (flags) {
 80069b8:	d00f      	beq.n	80069da <bt_conn_recv+0x2a>
 80069ba:	2a02      	cmp	r2, #2
 80069bc:	d110      	bne.n	80069e0 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
 80069be:	688b      	ldr	r3, [r1, #8]
 80069c0:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
 80069c2:	8943      	ldrh	r3, [r0, #10]
 80069c4:	b10b      	cbz	r3, 80069ca <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
 80069c6:	f7ff ff8d 	bl	80068e4 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	1af3      	subs	r3, r6, r3
 80069ce:	3304      	adds	r3, #4
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
 80069d4:	b333      	cbz	r3, 8006a24 <bt_conn_recv+0x74>
			conn->rx = buf;
 80069d6:	60ec      	str	r4, [r5, #12]
			return;
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
 80069da:	8943      	ldrh	r3, [r0, #10]
 80069dc:	b93b      	cbnz	r3, 80069ee <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
 80069de:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
 80069e0:	f7ff ff80 	bl	80068e4 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
 80069e4:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
 80069e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
 80069ea:	f00a be6f 	b.w	80116cc <net_buf_unref>
		if (buf->len > conn->rx_len) {
 80069ee:	898e      	ldrh	r6, [r1, #12]
 80069f0:	42b3      	cmp	r3, r6
 80069f2:	d3f4      	bcc.n	80069de <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
 80069f4:	68c0      	ldr	r0, [r0, #12]
 80069f6:	3008      	adds	r0, #8
 80069f8:	f00a ff2d 	bl	8011856 <net_buf_simple_tailroom>
 80069fc:	4286      	cmp	r6, r0
 80069fe:	d8ee      	bhi.n	80069de <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
 8006a00:	68e8      	ldr	r0, [r5, #12]
 8006a02:	89a2      	ldrh	r2, [r4, #12]
 8006a04:	68a1      	ldr	r1, [r4, #8]
 8006a06:	3008      	adds	r0, #8
 8006a08:	f00a fe86 	bl	8011718 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
 8006a0c:	896b      	ldrh	r3, [r5, #10]
 8006a0e:	89a2      	ldrh	r2, [r4, #12]
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
 8006a14:	4620      	mov	r0, r4
 8006a16:	f00a fe59 	bl	80116cc <net_buf_unref>
		if (conn->rx_len) {
 8006a1a:	896b      	ldrh	r3, [r5, #10]
 8006a1c:	b973      	cbnz	r3, 8006a3c <bt_conn_recv+0x8c>
		buf = conn->rx;
 8006a1e:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
 8006a20:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
 8006a22:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
 8006a24:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
 8006a26:	89a2      	ldrh	r2, [r4, #12]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d1d9      	bne.n	80069e4 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
}
 8006a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
 8006a38:	f000 bd25 	b.w	8007486 <bt_l2cap_recv>
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}

08006a3e <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
 8006a3e:	b570      	push	{r4, r5, r6, lr}
 8006a40:	4605      	mov	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
 8006a42:	7988      	ldrb	r0, [r1, #6]
{
 8006a44:	460c      	mov	r4, r1
 8006a46:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
 8006a48:	f00a fd6e 	bl	8011528 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
 8006a4c:	8ac3      	ldrh	r3, [r0, #22]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d805      	bhi.n	8006a5e <bt_conn_send_cb+0x20>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
 8006a52:	4620      	mov	r0, r4
 8006a54:	f00a fe3a 	bl	80116cc <net_buf_unref>
		return -EINVAL;
 8006a58:	f06f 0015 	mvn.w	r0, #21
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (conn->state != BT_CONN_CONNECTED) {
 8006a5e:	7a6b      	ldrb	r3, [r5, #9]
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d005      	beq.n	8006a70 <bt_conn_send_cb+0x32>
		BT_ERR("not connected!");
		net_buf_unref(buf);
 8006a64:	4620      	mov	r0, r4
 8006a66:	f00a fe31 	bl	80116cc <net_buf_unref>
		return -ENOTCONN;
 8006a6a:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 8006a70:	89e3      	ldrh	r3, [r4, #14]
 8006a72:	4423      	add	r3, r4
 8006a74:	3313      	adds	r3, #19
 8006a76:	f023 0303 	bic.w	r3, r3, #3
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
 8006a7a:	f105 0028 	add.w	r0, r5, #40	; 0x28
	conn_tx(buf)->cb = cb;
 8006a7e:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
 8006a80:	4621      	mov	r1, r4
 8006a82:	f00a fe15 	bl	80116b0 <net_buf_put>
	return 0;
 8006a86:	2000      	movs	r0, #0
}
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a8c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
 8006a90:	4d0d      	ldr	r5, [pc, #52]	; (8006ac8 <bt_conn_notify_tx+0x3c>)
 8006a92:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
 8006a94:	f100 0718 	add.w	r7, r0, #24
 8006a98:	f04f 0800 	mov.w	r8, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f00b f829 	bl	8011af6 <k_queue_get>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	b908      	cbnz	r0, 8006aac <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	b10b      	cbz	r3, 8006ab4 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4798      	blx	r3
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006ab8:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
 8006aba:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
 8006abe:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1eb      	bne.n	8006a9c <bt_conn_notify_tx+0x10>
		list->tail = list->head;
 8006ac4:	606c      	str	r4, [r5, #4]
 8006ac6:	e7e7      	b.n	8006a98 <bt_conn_notify_tx+0xc>
 8006ac8:	200007d4 	.word	0x200007d4

08006acc <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
 8006acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8006ad4:	4840      	ldr	r0, [pc, #256]	; (8006bd8 <send_frag+0x10c>)
 8006ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ada:	4698      	mov	r8, r3
 8006adc:	4614      	mov	r4, r2
 8006ade:	f00b fabb 	bl	8012058 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
 8006ae2:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <send_frag+0x110>)
 8006ae4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006ae8:	f7ff fef6 	bl	80068d8 <atomic_get>
 8006aec:	b130      	cbz	r0, 8006afc <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
 8006aee:	7a5a      	ldrb	r2, [r3, #9]
 8006af0:	3a03      	subs	r2, #3
 8006af2:	2a01      	cmp	r2, #1
 8006af4:	d802      	bhi.n	8006afc <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff ffc8 	bl	8006a8c <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
 8006afc:	7a6b      	ldrb	r3, [r5, #9]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d14e      	bne.n	8006ba0 <send_frag+0xd4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
 8006b02:	2104      	movs	r1, #4
 8006b04:	f107 0008 	add.w	r0, r7, #8
 8006b08:	f00a fe46 	bl	8011798 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
 8006b0c:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
 8006b0e:	4e34      	ldr	r6, [pc, #208]	; (8006be0 <send_frag+0x114>)
 8006b10:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8006b14:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 8006b16:	89bb      	ldrh	r3, [r7, #12]
 8006b18:	3b04      	subs	r3, #4
 8006b1a:	8043      	strh	r3, [r0, #2]
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	443b      	add	r3, r7
 8006b20:	3313      	adds	r3, #19
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	2102      	movs	r1, #2

	cb = conn_tx(buf)->cb;
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	7019      	strb	r1, [r3, #0]
 8006b2c:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
 8006b2e:	6871      	ldr	r1, [r6, #4]
	list->head = node->next;
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
 8006b34:	428c      	cmp	r4, r1
		list->tail = list->head;
 8006b36:	bf08      	it	eq
 8006b38:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
 8006b3a:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
 8006b3c:	f04f 0310 	mov.w	r3, #16
 8006b40:	f3ef 8211 	mrs	r2, BASEPRI
 8006b44:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006b4c:	696b      	ldr	r3, [r5, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d134      	bne.n	8006bbc <send_frag+0xf0>
		list->tail = node;
 8006b52:	616c      	str	r4, [r5, #20]
		list->head = node;
 8006b54:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006b56:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	f7ff fac2 	bl	80060e4 <bt_send>
	if (err) {
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d036      	beq.n	8006bd2 <send_frag+0x106>
	__asm__ volatile(
 8006b64:	f04f 0310 	mov.w	r3, #16
 8006b68:	f3ef 8011 	mrs	r0, BASEPRI
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	692b      	ldr	r3, [r5, #16]
	sys_snode_t *prev = NULL;
 8006b72:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8006b74:	b153      	cbz	r3, 8006b8c <send_frag+0xc0>
		if (test == node) {
 8006b76:	429c      	cmp	r4, r3
 8006b78:	d128      	bne.n	8006bcc <send_frag+0x100>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	6969      	ldr	r1, [r5, #20]
	if (!prev_node) {
 8006b7e:	bb02      	cbnz	r2, 8006bc2 <send_frag+0xf6>
		if (list->tail == node) {
 8006b80:	428c      	cmp	r4, r1
		list->head = node->next;
 8006b82:	612b      	str	r3, [r5, #16]
		if (list->tail == node) {
 8006b84:	d100      	bne.n	8006b88 <send_frag+0xbc>
			list->tail = list->head;
 8006b86:	616b      	str	r3, [r5, #20]
	node->next = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006b8c:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	6063      	str	r3, [r4, #4]
	node->next = list->head;
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
 8006b98:	6873      	ldr	r3, [r6, #4]
	list->head = node;
 8006b9a:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
 8006b9c:	b903      	cbnz	r3, 8006ba0 <send_frag+0xd4>
		list->tail = list->head;
 8006b9e:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8006ba0:	480d      	ldr	r0, [pc, #52]	; (8006bd8 <send_frag+0x10c>)
 8006ba2:	f00b fa17 	bl	8011fd4 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
 8006ba6:	f1b8 0f00 	cmp.w	r8, #0
 8006baa:	d004      	beq.n	8006bb6 <send_frag+0xea>
		net_buf_unref(buf);
 8006bac:	4638      	mov	r0, r7
 8006bae:	f00a fd8d 	bl	80116cc <net_buf_unref>
	}
	return false;
 8006bb2:	f04f 0800 	mov.w	r8, #0
}
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
 8006bbc:	601c      	str	r4, [r3, #0]
		list->tail = node;
 8006bbe:	616c      	str	r4, [r5, #20]
 8006bc0:	e7c9      	b.n	8006b56 <send_frag+0x8a>
		if (list->tail == node) {
 8006bc2:	428c      	cmp	r4, r1
		prev_node->next = node->next;
 8006bc4:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
 8006bc6:	bf08      	it	eq
 8006bc8:	616a      	streq	r2, [r5, #20]
 8006bca:	e7dd      	b.n	8006b88 <send_frag+0xbc>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8006bcc:	461a      	mov	r2, r3
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	e7d0      	b.n	8006b74 <send_frag+0xa8>
	return true;
 8006bd2:	f04f 0801 	mov.w	r8, #1
 8006bd6:	e7ee      	b.n	8006bb6 <send_frag+0xea>
 8006bd8:	20005974 	.word	0x20005974
 8006bdc:	2000073c 	.word	0x2000073c
 8006be0:	200007d4 	.word	0x200007d4

08006be4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
 8006be8:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8006bec:	2100      	movs	r1, #0
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f00a fcf6 	bl	80115e0 <net_buf_get>
 8006bf4:	b958      	cbnz	r0, 8006c0e <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff ff48 	bl	8006a8c <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff fe71 	bl	80068e4 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
 8006c02:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8006c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
 8006c0a:	f7ff be76 	b.w	80068fa <atomic_dec>
		net_buf_unref(buf);
 8006c0e:	f00a fd5d 	bl	80116cc <net_buf_unref>
 8006c12:	e7eb      	b.n	8006bec <conn_cleanup+0x8>

08006c14 <bt_conn_prepare_events>:
{
 8006c14:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
 8006c16:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <bt_conn_prepare_events+0x80>)
 8006c18:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 8006c1a:	2101      	movs	r1, #1
	conn_change.signaled = 0;
 8006c1c:	609a      	str	r2, [r3, #8]
{
 8006c1e:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
 8006c20:	f00b feae 	bl	8012980 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
 8006c24:	4b1c      	ldr	r3, [pc, #112]	; (8006c98 <bt_conn_prepare_events+0x84>)
 8006c26:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006c2a:	f7ff fe55 	bl	80068d8 <atomic_get>
 8006c2e:	4619      	mov	r1, r3
 8006c30:	b908      	cbnz	r0, 8006c36 <bt_conn_prepare_events+0x22>
			continue;
 8006c32:	2001      	movs	r0, #1
 8006c34:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
 8006c36:	7a5a      	ldrb	r2, [r3, #9]
 8006c38:	b99a      	cbnz	r2, 8006c62 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8006c3a:	f3bf 8f5b 	dmb	ish
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	e852 0f00 	ldrex	r0, [r2]
 8006c44:	f020 0440 	bic.w	r4, r0, #64	; 0x40
 8006c48:	e842 4e00 	strex	lr, r4, [r2]
 8006c4c:	f1be 0f00 	cmp.w	lr, #0
 8006c50:	d1f6      	bne.n	8006c40 <bt_conn_prepare_events+0x2c>
 8006c52:	f3bf 8f5b 	dmb	ish
 8006c56:	0642      	lsls	r2, r0, #25
 8006c58:	d503      	bpl.n	8006c62 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff ffc2 	bl	8006be4 <conn_cleanup>
 8006c60:	e7e7      	b.n	8006c32 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
 8006c62:	7a4c      	ldrb	r4, [r1, #9]
 8006c64:	2c03      	cmp	r4, #3
 8006c66:	d1e4      	bne.n	8006c32 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
 8006c68:	f105 0014 	add.w	r0, r5, #20
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <bt_conn_prepare_events+0x88>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2104      	movs	r1, #4
 8006c72:	f00b fe85 	bl	8012980 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
 8006c7c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <bt_conn_prepare_events+0x8c>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	2104      	movs	r1, #4
 8006c86:	f00b fe7b 	bl	8012980 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8006c90:	4620      	mov	r0, r4
}
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20005a30 	.word	0x20005a30
 8006c98:	2000073c 	.word	0x2000073c
 8006c9c:	20000754 	.word	0x20000754
 8006ca0:	20000764 	.word	0x20000764

08006ca4 <bt_conn_add_le>:
{
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006ca6:	4c17      	ldr	r4, [pc, #92]	; (8006d04 <bt_conn_add_le+0x60>)
 8006ca8:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
 8006cac:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7ff fe12 	bl	80068d8 <atomic_get>
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	b108      	cbz	r0, 8006cbc <bt_conn_add_le+0x18>
		return NULL;
 8006cb8:	2000      	movs	r0, #0
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	2298      	movs	r2, #152	; 0x98
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7f9 fe09 	bl	80008d8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8006cc6:	f3bf 8f5b 	dmb	ish
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e856 2f00 	ldrex	r2, [r6]
 8006cd0:	e846 3100 	strex	r1, r3, [r6]
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d1f9      	bne.n	8006ccc <bt_conn_add_le+0x28>
 8006cd8:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
 8006cdc:	2207      	movs	r2, #7
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8006ce4:	f7f9 fdcc 	bl	8000880 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
 8006ce8:	2318      	movs	r3, #24
 8006cea:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 8006cee:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
 8006cf0:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
 8006cf4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
 8006cf6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
 8006cfa:	4903      	ldr	r1, [pc, #12]	; (8006d08 <bt_conn_add_le+0x64>)
 8006cfc:	f00b fc92 	bl	8012624 <k_delayed_work_init>
			conn = &conns[i];
 8006d00:	4620      	mov	r0, r4
}
 8006d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d04:	2000073c 	.word	0x2000073c
 8006d08:	08007041 	.word	0x08007041

08006d0c <bt_conn_set_state>:
{
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
 8006d0e:	7a45      	ldrb	r5, [r0, #9]
 8006d10:	428d      	cmp	r5, r1
{
 8006d12:	4604      	mov	r4, r0
	if (conn->state == state) {
 8006d14:	d07e      	beq.n	8006e14 <bt_conn_set_state+0x108>
	conn->state = state;
 8006d16:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
 8006d18:	b915      	cbnz	r5, 8006d20 <bt_conn_set_state+0x14>
	atomic_inc(&conn->ref);
 8006d1a:	3040      	adds	r0, #64	; 0x40
 8006d1c:	f7ff fdfa 	bl	8006914 <atomic_inc>
	switch (conn->state) {
 8006d20:	7a63      	ldrb	r3, [r4, #9]
 8006d22:	b1db      	cbz	r3, 8006d5c <bt_conn_set_state+0x50>
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d175      	bne.n	8006e14 <bt_conn_set_state+0x108>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8006d28:	78a3      	ldrb	r3, [r4, #2]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d072      	beq.n	8006e14 <bt_conn_set_state+0x108>
		k_fifo_init(&conn->tx_queue);
 8006d2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006d32:	f00a fe75 	bl	8011a20 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
 8006d36:	f104 0018 	add.w	r0, r4, #24
 8006d3a:	f00a fe71 	bl	8011a20 <k_queue_init>
		k_poll_signal(&conn_change, 0);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4835      	ldr	r0, [pc, #212]	; (8006e18 <bt_conn_set_state+0x10c>)
 8006d42:	f00b fee7 	bl	8012b14 <k_poll_signal>
	list->head = NULL;
 8006d46:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
 8006d48:	4620      	mov	r0, r4
 8006d4a:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
 8006d4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006d4e:	f000 fad5 	bl	80072fc <bt_l2cap_connected>
		notify_connected(conn);
 8006d52:	4620      	mov	r0, r4
}
 8006d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
 8006d58:	f7ff bdae 	b.w	80068b8 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
 8006d5c:	78a3      	ldrb	r3, [r4, #2]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d105      	bne.n	8006d6e <bt_conn_set_state+0x62>
	atomic_dec(&conn->ref);
 8006d62:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8006d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
 8006d6a:	f7ff bdc6 	b.w	80068fa <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
 8006d6e:	1eeb      	subs	r3, r5, #3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d843      	bhi.n	8006dfc <bt_conn_set_state+0xf0>
			bt_l2cap_disconnected(conn);
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 fafb 	bl	8007370 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
 8006d7a:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <bt_conn_set_state+0x110>)
 8006d7c:	681d      	ldr	r5, [r3, #0]
 8006d7e:	b9ed      	cbnz	r5, 8006dbc <bt_conn_set_state+0xb0>
	node->next = list->head;
 8006d80:	4e27      	ldr	r6, [pc, #156]	; (8006e20 <bt_conn_set_state+0x114>)
 8006d82:	4f28      	ldr	r7, [pc, #160]	; (8006e24 <bt_conn_set_state+0x118>)
	__asm__ volatile(
 8006d84:	f04f 0310 	mov.w	r3, #16
 8006d88:	f3ef 8111 	mrs	r1, BASEPRI
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	6923      	ldr	r3, [r4, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8006d92:	b12b      	cbz	r3, 8006da0 <bt_conn_set_state+0x94>
	if (list->tail == node) {
 8006d94:	6960      	ldr	r0, [r4, #20]
	list->head = node->next;
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	6122      	str	r2, [r4, #16]
	if (list->tail == node) {
 8006d9a:	4283      	cmp	r3, r0
		list->tail = list->head;
 8006d9c:	bf08      	it	eq
 8006d9e:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8006da0:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
 8006da4:	b18b      	cbz	r3, 8006dca <bt_conn_set_state+0xbe>
	node->next = list->head;
 8006da6:	6832      	ldr	r2, [r6, #0]
 8006da8:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
 8006daa:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
 8006dac:	605d      	str	r5, [r3, #4]
	list->head = node;
 8006dae:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
 8006db0:	b902      	cbnz	r2, 8006db4 <bt_conn_set_state+0xa8>
		list->tail = list->head;
 8006db2:	6073      	str	r3, [r6, #4]
 8006db4:	4638      	mov	r0, r7
 8006db6:	f00b f90d 	bl	8011fd4 <_impl_k_sem_give>
 8006dba:	e7e3      	b.n	8006d84 <bt_conn_set_state+0x78>
		if (cb->disconnected) {
 8006dbc:	686b      	ldr	r3, [r5, #4]
 8006dbe:	b113      	cbz	r3, 8006dc6 <bt_conn_set_state+0xba>
			cb->disconnected(conn, conn->err);
 8006dc0:	7a21      	ldrb	r1, [r4, #8]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
 8006dc6:	692d      	ldr	r5, [r5, #16]
 8006dc8:	e7d9      	b.n	8006d7e <bt_conn_set_state+0x72>
			if (conn->type == BT_CONN_TYPE_LE) {
 8006dca:	78a3      	ldrb	r3, [r4, #2]
 8006dcc:	b91b      	cbnz	r3, 8006dd6 <bt_conn_set_state+0xca>
				k_delayed_work_cancel(&conn->le.update_work);
 8006dce:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8006dd2:	f00b fc45 	bl	8012660 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8006dd6:	f3bf 8f5b 	dmb	ish
 8006dda:	3404      	adds	r4, #4
 8006ddc:	e854 3f00 	ldrex	r3, [r4]
 8006de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de4:	e844 3200 	strex	r2, r3, [r4]
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	d1f7      	bne.n	8006ddc <bt_conn_set_state+0xd0>
 8006dec:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
 8006df0:	2100      	movs	r1, #0
 8006df2:	4809      	ldr	r0, [pc, #36]	; (8006e18 <bt_conn_set_state+0x10c>)
}
 8006df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
 8006df8:	f00b be8c 	b.w	8012b14 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
 8006dfc:	2d02      	cmp	r5, #2
 8006dfe:	d103      	bne.n	8006e08 <bt_conn_set_state+0xfc>
			notify_connected(conn);
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff fd59 	bl	80068b8 <notify_connected>
 8006e06:	e7ac      	b.n	8006d62 <bt_conn_set_state+0x56>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
 8006e08:	2d01      	cmp	r5, #1
 8006e0a:	d103      	bne.n	8006e14 <bt_conn_set_state+0x108>
			if (conn->err) {
 8006e0c:	7a23      	ldrb	r3, [r4, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0a7      	beq.n	8006d62 <bt_conn_set_state+0x56>
 8006e12:	e7f5      	b.n	8006e00 <bt_conn_set_state+0xf4>
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20005a30 	.word	0x20005a30
 8006e1c:	20000700 	.word	0x20000700
 8006e20:	200007d4 	.word	0x200007d4
 8006e24:	20005974 	.word	0x20005974

08006e28 <bt_conn_lookup_handle>:
{
 8006e28:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006e2a:	4c0b      	ldr	r4, [pc, #44]	; (8006e58 <bt_conn_lookup_handle+0x30>)
{
 8006e2c:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
 8006e2e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006e32:	f7ff fd51 	bl	80068d8 <atomic_get>
 8006e36:	b168      	cbz	r0, 8006e54 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
 8006e38:	7a63      	ldrb	r3, [r4, #9]
 8006e3a:	3b03      	subs	r3, #3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d808      	bhi.n	8006e52 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
 8006e40:	8823      	ldrh	r3, [r4, #0]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d105      	bne.n	8006e52 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
 8006e46:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006e4a:	f7ff fd63 	bl	8006914 <atomic_inc>
			return bt_conn_ref(&conns[i]);
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd10      	pop	{r4, pc}
	return NULL;
 8006e52:	2000      	movs	r0, #0
}
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	bf00      	nop
 8006e58:	2000073c 	.word	0x2000073c

08006e5c <bt_conn_addr_le_cmp>:
{
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	460d      	mov	r5, r1
 8006e60:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
 8006e62:	f100 0144 	add.w	r1, r0, #68	; 0x44
 8006e66:	2207      	movs	r2, #7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7f9 fcf4 	bl	8000856 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
 8006e6e:	b160      	cbz	r0, 8006e8a <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
 8006e70:	78e3      	ldrb	r3, [r4, #3]
 8006e72:	2207      	movs	r2, #7
 8006e74:	b933      	cbnz	r3, 8006e84 <bt_conn_addr_le_cmp+0x28>
 8006e76:	f104 0152 	add.w	r1, r4, #82	; 0x52
 8006e7a:	4628      	mov	r0, r5
}
 8006e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e80:	f7f9 bce9 	b.w	8000856 <memcmp>
 8006e84:	f104 014b 	add.w	r1, r4, #75	; 0x4b
 8006e88:	e7f7      	b.n	8006e7a <bt_conn_addr_le_cmp+0x1e>
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}

08006e8c <bt_conn_lookup_addr_le>:
{
 8006e8c:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006e8e:	4c0b      	ldr	r4, [pc, #44]	; (8006ebc <bt_conn_lookup_addr_le+0x30>)
{
 8006e90:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
 8006e92:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006e96:	f7ff fd1f 	bl	80068d8 <atomic_get>
 8006e9a:	b908      	cbnz	r0, 8006ea0 <bt_conn_lookup_addr_le+0x14>
	return NULL;
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
 8006ea0:	78a3      	ldrb	r3, [r4, #2]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1fa      	bne.n	8006e9c <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7ff ffd8 	bl	8006e5c <bt_conn_addr_le_cmp>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d1f5      	bne.n	8006e9c <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
 8006eb0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8006eb4:	f7ff fd2e 	bl	8006914 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006eb8:	4620      	mov	r0, r4
}
 8006eba:	bd10      	pop	{r4, pc}
 8006ebc:	2000073c 	.word	0x2000073c

08006ec0 <bt_conn_lookup_state_le>:
{
 8006ec0:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
 8006ec2:	4c0e      	ldr	r4, [pc, #56]	; (8006efc <bt_conn_lookup_state_le+0x3c>)
{
 8006ec4:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
 8006ec6:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
 8006eca:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
 8006ecc:	f7ff fd04 	bl	80068d8 <atomic_get>
 8006ed0:	b908      	cbnz	r0, 8006ed6 <bt_conn_lookup_state_le+0x16>
	return NULL;
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
 8006ed6:	78a2      	ldrb	r2, [r4, #2]
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d1fa      	bne.n	8006ed2 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006edc:	b93b      	cbnz	r3, 8006eee <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
 8006ede:	7a63      	ldrb	r3, [r4, #9]
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	d1f6      	bne.n	8006ed2 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
 8006ee4:	4806      	ldr	r0, [pc, #24]	; (8006f00 <bt_conn_lookup_state_le+0x40>)
 8006ee6:	f7ff fd15 	bl	8006914 <atomic_inc>
			return bt_conn_ref(&conns[i]);
 8006eea:	4804      	ldr	r0, [pc, #16]	; (8006efc <bt_conn_lookup_state_le+0x3c>)
}
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff ffb3 	bl	8006e5c <bt_conn_addr_le_cmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d1eb      	bne.n	8006ed2 <bt_conn_lookup_state_le+0x12>
 8006efa:	e7f0      	b.n	8006ede <bt_conn_lookup_state_le+0x1e>
 8006efc:	2000073c 	.word	0x2000073c
 8006f00:	2000077c 	.word	0x2000077c

08006f04 <bt_conn_ref>:
{
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
 8006f08:	3040      	adds	r0, #64	; 0x40
 8006f0a:	f7ff fd03 	bl	8006914 <atomic_inc>
}
 8006f0e:	4620      	mov	r0, r4
 8006f10:	bd10      	pop	{r4, pc}

08006f12 <bt_conn_unref>:
	atomic_dec(&conn->ref);
 8006f12:	3040      	adds	r0, #64	; 0x40
 8006f14:	f7ff bcf1 	b.w	80068fa <atomic_dec>

08006f18 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
 8006f18:	7a43      	ldrb	r3, [r0, #9]
 8006f1a:	3b01      	subs	r3, #1
{
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	460e      	mov	r6, r1
	switch (conn->state) {
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d803      	bhi.n	8006f2e <bt_conn_disconnect+0x16>
 8006f26:	e8df f003 	tbb	[pc, r3]
 8006f2a:	0d06      	.short	0x0d06
 8006f2c:	0d0f      	.short	0x0d0f
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
 8006f2e:	f06f 0438 	mvn.w	r4, #56	; 0x38
	}
}
 8006f32:	4620      	mov	r0, r4
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
 8006f36:	7229      	strb	r1, [r5, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f7ff fee7 	bl	8006d0c <bt_conn_set_state>
		bt_le_scan_update(false);
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f7fe fa40 	bl	80053c4 <bt_le_scan_update>
		return 0;
 8006f44:	2400      	movs	r4, #0
 8006f46:	e7f4      	b.n	8006f32 <bt_conn_disconnect+0x1a>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
 8006f48:	2103      	movs	r1, #3
 8006f4a:	f240 4006 	movw	r0, #1030	; 0x406
 8006f4e:	f7fe f80b 	bl	8004f68 <bt_hci_cmd_create>
	if (!buf) {
 8006f52:	4604      	mov	r4, r0
 8006f54:	b198      	cbz	r0, 8006f7e <bt_conn_disconnect+0x66>
	disconn = net_buf_add(buf, sizeof(*disconn));
 8006f56:	2103      	movs	r1, #3
 8006f58:	3008      	adds	r0, #8
 8006f5a:	f00a fbd7 	bl	801170c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
 8006f5e:	882b      	ldrh	r3, [r5, #0]
 8006f60:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
 8006f62:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
 8006f64:	4621      	mov	r1, r4
 8006f66:	f240 4006 	movw	r0, #1030	; 0x406
 8006f6a:	f7fe f821 	bl	8004fb0 <bt_hci_cmd_send>
	if (err) {
 8006f6e:	4604      	mov	r4, r0
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d1de      	bne.n	8006f32 <bt_conn_disconnect+0x1a>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
 8006f74:	2104      	movs	r1, #4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7ff fec8 	bl	8006d0c <bt_conn_set_state>
 8006f7c:	e7d9      	b.n	8006f32 <bt_conn_disconnect+0x1a>
		return -ENOBUFS;
 8006f7e:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8006f82:	e7d6      	b.n	8006f32 <bt_conn_disconnect+0x1a>

08006f84 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	4607      	mov	r7, r0
 8006f88:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
 8006f8a:	f242 0013 	movw	r0, #8211	; 0x2013
 8006f8e:	210e      	movs	r1, #14
 8006f90:	f7fd ffea 	bl	8004f68 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
 8006f94:	4606      	mov	r6, r0
 8006f96:	b1c8      	cbz	r0, 8006fcc <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
 8006f98:	210e      	movs	r1, #14
 8006f9a:	3008      	adds	r0, #8
 8006f9c:	f00a fbb6 	bl	801170c <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
 8006fa0:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
 8006fa2:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
 8006fa4:	220e      	movs	r2, #14
 8006fa6:	f7f9 fc97 	bl	80008d8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
 8006faa:	883b      	ldrh	r3, [r7, #0]
 8006fac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
 8006fae:	882b      	ldrh	r3, [r5, #0]
 8006fb0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
 8006fb2:	886b      	ldrh	r3, [r5, #2]
 8006fb4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
 8006fb6:	88ab      	ldrh	r3, [r5, #4]
 8006fb8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
 8006fba:	88eb      	ldrh	r3, [r5, #6]
 8006fbc:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	f242 0013 	movw	r0, #8211	; 0x2013
}
 8006fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
 8006fc8:	f7fd bff2 	b.w	8004fb0 <bt_hci_cmd_send>
}
 8006fcc:	f06f 0036 	mvn.w	r0, #54	; 0x36
 8006fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fd4 <bt_conn_le_param_update>:
{
 8006fd4:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
 8006fd6:	880a      	ldrh	r2, [r1, #0]
 8006fd8:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006fdc:	429a      	cmp	r2, r3
{
 8006fde:	4604      	mov	r4, r0
 8006fe0:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
 8006fe2:	d80c      	bhi.n	8006ffe <bt_conn_le_param_update+0x2a>
 8006fe4:	884a      	ldrh	r2, [r1, #2]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d309      	bcc.n	8006ffe <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
 8006fea:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8006fee:	888b      	ldrh	r3, [r1, #4]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d104      	bne.n	8006ffe <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
 8006ff4:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8006ff8:	88cb      	ldrh	r3, [r1, #6]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d01a      	beq.n	8007034 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
 8006ffe:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8007002:	f00b fb2d 	bl	8012660 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <bt_conn_le_param_update+0x68>)
 8007008:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800700c:	079a      	lsls	r2, r3, #30
 800700e:	d503      	bpl.n	8007018 <bt_conn_le_param_update+0x44>
 8007010:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8007014:	079b      	lsls	r3, r3, #30
 8007016:	d401      	bmi.n	800701c <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
 8007018:	78e3      	ldrb	r3, [r4, #3]
 800701a:	b92b      	cbnz	r3, 8007028 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
 800701c:	4629      	mov	r1, r5
 800701e:	4620      	mov	r0, r4
}
 8007020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
 8007024:	f7ff bfae 	b.w	8006f84 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
 8007028:	4629      	mov	r1, r5
 800702a:	4620      	mov	r0, r4
}
 800702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
 8007030:	f000 ba46 	b.w	80074c0 <bt_l2cap_update_conn_param>
}
 8007034:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	200058e8 	.word	0x200058e8

08007040 <le_conn_update>:
{
 8007040:	b507      	push	{r0, r1, r2, lr}
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
 8007042:	f830 3c14 	ldrh.w	r3, [r0, #-20]
 8007046:	f8ad 3000 	strh.w	r3, [sp]
 800704a:	f830 3c12 	ldrh.w	r3, [r0, #-18]
 800704e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007052:	f830 3c10 	ldrh.w	r3, [r0, #-16]
 8007056:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_conn_le_param_update(conn, param);
 800705a:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
 800705c:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
 8007060:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
 8007064:	3870      	subs	r0, #112	; 0x70
 8007066:	f7ff ffb5 	bl	8006fd4 <bt_conn_le_param_update>
}
 800706a:	b003      	add	sp, #12
 800706c:	f85d fb04 	ldr.w	pc, [sp], #4

08007070 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
 8007070:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <bt_conn_create_pdu+0x20>)
{
 8007074:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
 8007076:	2800      	cmp	r0, #0
 8007078:	bf08      	it	eq
 800707a:	4618      	moveq	r0, r3
 800707c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007080:	f00a fa6e 	bl	8011560 <net_buf_alloc>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
 8007084:	1d69      	adds	r1, r5, #5
	buf = net_buf_alloc(pool, K_FOREVER);
 8007086:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
 8007088:	f00a fac3 	bl	8011612 <net_buf_reserve>

	return buf;
}
 800708c:	4620      	mov	r0, r4
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20006504 	.word	0x20006504

08007094 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	4606      	mov	r6, r0
 800709a:	460d      	mov	r5, r1
	frag = bt_conn_create_pdu(NULL, 0);
 800709c:	2100      	movs	r1, #0
 800709e:	4608      	mov	r0, r1
 80070a0:	f7ff ffe6 	bl	8007070 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
 80070a4:	7833      	ldrb	r3, [r6, #0]
 80070a6:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(NULL, 0);
 80070a8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
 80070aa:	d005      	beq.n	80070b8 <create_frag.isra.6+0x24>
		net_buf_unref(frag);
 80070ac:	f00a fb0e 	bl	80116cc <net_buf_unref>
		return NULL;
 80070b0:	2400      	movs	r4, #0
}
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	89c3      	ldrh	r3, [r0, #14]
	return bt_dev.le.mtu;
 80070ba:	4e11      	ldr	r6, [pc, #68]	; (8007100 <create_frag.isra.6+0x6c>)
 80070bc:	4403      	add	r3, r0
 80070be:	3313      	adds	r3, #19
 80070c0:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
 80070c4:	2200      	movs	r2, #0
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 80070c6:	f100 0708 	add.w	r7, r0, #8
	conn_tx(frag)->cb = NULL;
 80070ca:	601a      	str	r2, [r3, #0]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 80070cc:	4638      	mov	r0, r7
 80070ce:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
 80070d2:	f00a fbc0 	bl	8011856 <net_buf_simple_tailroom>
 80070d6:	4580      	cmp	r8, r0
 80070d8:	d20c      	bcs.n	80070f4 <create_frag.isra.6+0x60>
	return bt_dev.le.mtu;
 80070da:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
 80070de:	f855 1f08 	ldr.w	r1, [r5, #8]!
 80070e2:	4632      	mov	r2, r6
 80070e4:	4638      	mov	r0, r7
 80070e6:	f00a fb17 	bl	8011718 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	f00a fb78 	bl	80117e2 <net_buf_simple_pull>
 80070f2:	e7de      	b.n	80070b2 <create_frag.isra.6+0x1e>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
 80070f4:	4638      	mov	r0, r7
 80070f6:	f00a fbae 	bl	8011856 <net_buf_simple_tailroom>
 80070fa:	b286      	uxth	r6, r0
 80070fc:	e7ef      	b.n	80070de <create_frag.isra.6+0x4a>
 80070fe:	bf00      	nop
 8007100:	200058e8 	.word	0x200058e8

08007104 <bt_conn_process_tx>:
{
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
 8007106:	7a43      	ldrb	r3, [r0, #9]
{
 8007108:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
 800710a:	b993      	cbnz	r3, 8007132 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800710c:	f3bf 8f5b 	dmb	ish
 8007110:	1d03      	adds	r3, r0, #4
 8007112:	e853 2f00 	ldrex	r2, [r3]
 8007116:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800711a:	e843 1400 	strex	r4, r1, [r3]
 800711e:	2c00      	cmp	r4, #0
 8007120:	d1f7      	bne.n	8007112 <bt_conn_process_tx+0xe>
 8007122:	f3bf 8f5b 	dmb	ish
 8007126:	0653      	lsls	r3, r2, #25
 8007128:	d503      	bpl.n	8007132 <bt_conn_process_tx+0x2e>
}
 800712a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
 800712e:	f7ff bd59 	b.w	8006be4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
 8007132:	2100      	movs	r1, #0
 8007134:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8007138:	f00a fa52 	bl	80115e0 <net_buf_get>
	BT_ASSERT(buf);
 800713c:	4604      	mov	r4, r0
 800713e:	b928      	cbnz	r0, 800714c <bt_conn_process_tx+0x48>
 8007140:	4040      	eors	r0, r0
 8007142:	f380 8811 	msr	BASEPRI, r0
 8007146:	f04f 0004 	mov.w	r0, #4
 800714a:	df02      	svc	2
	return bt_dev.le.mtu;
 800714c:	4e19      	ldr	r6, [pc, #100]	; (80071b4 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
 800714e:	8981      	ldrh	r1, [r0, #12]
 8007150:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
 8007154:	4291      	cmp	r1, r2
 8007156:	d807      	bhi.n	8007168 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
 8007158:	2300      	movs	r3, #0
 800715a:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
 800715c:	4621      	mov	r1, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f7ff fcb4 	bl	8006acc <send_frag>
	if (!send_buf(conn, buf)) {
 8007164:	b140      	cbz	r0, 8007178 <bt_conn_process_tx+0x74>
}
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007168:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
 800716c:	4601      	mov	r1, r0
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff ff90 	bl	8007094 <create_frag.isra.6>
	if (!frag) {
 8007174:	4601      	mov	r1, r0
 8007176:	b920      	cbnz	r0, 8007182 <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
 8007178:	4620      	mov	r0, r4
}
 800717a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
 800717e:	f00a baa5 	b.w	80116cc <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
 8007182:	2301      	movs	r3, #1
 8007184:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
 8007186:	4628      	mov	r0, r5
 8007188:	f7ff fca0 	bl	8006acc <send_frag>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0f3      	beq.n	8007178 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
 8007190:	89a2      	ldrh	r2, [r4, #12]
 8007192:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
 8007196:	429a      	cmp	r2, r3
 8007198:	d802      	bhi.n	80071a0 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
 800719a:	2300      	movs	r3, #0
 800719c:	2201      	movs	r2, #1
 800719e:	e7dd      	b.n	800715c <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
 80071a0:	4621      	mov	r1, r4
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff ff76 	bl	8007094 <create_frag.isra.6>
		if (!frag) {
 80071a8:	4601      	mov	r1, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0e4      	beq.n	8007178 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
 80071ae:	2301      	movs	r3, #1
 80071b0:	461a      	mov	r2, r3
 80071b2:	e7e8      	b.n	8007186 <bt_conn_process_tx+0x82>
 80071b4:	200058e8 	.word	0x200058e8

080071b8 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <bt_conn_get_id+0x10>)
 80071ba:	1ac0      	subs	r0, r0, r3
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <bt_conn_get_id+0x14>)
 80071be:	10c0      	asrs	r0, r0, #3
 80071c0:	4358      	muls	r0, r3
}
 80071c2:	b2c0      	uxtb	r0, r0
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	2000073c 	.word	0x2000073c
 80071cc:	286bca1b 	.word	0x286bca1b

080071d0 <bt_conn_lookup_id>:

struct bt_conn *bt_conn_lookup_id(u8_t id)
{
 80071d0:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	if (id >= ARRAY_SIZE(conns)) {
 80071d2:	b108      	cbz	r0, 80071d8 <bt_conn_lookup_id+0x8>
		return NULL;
 80071d4:	2000      	movs	r0, #0
 80071d6:	bd08      	pop	{r3, pc}
	}

	conn = &conns[id];

	if (!atomic_get(&conn->ref)) {
 80071d8:	4804      	ldr	r0, [pc, #16]	; (80071ec <bt_conn_lookup_id+0x1c>)
 80071da:	f7ff fb7d 	bl	80068d8 <atomic_get>
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0f8      	beq.n	80071d4 <bt_conn_lookup_id+0x4>
	atomic_inc(&conn->ref);
 80071e2:	4802      	ldr	r0, [pc, #8]	; (80071ec <bt_conn_lookup_id+0x1c>)
 80071e4:	f7ff fb96 	bl	8006914 <atomic_inc>
		return NULL;
	}

	return bt_conn_ref(conn);
 80071e8:	4801      	ldr	r0, [pc, #4]	; (80071f0 <bt_conn_lookup_id+0x20>)
}
 80071ea:	bd08      	pop	{r3, pc}
 80071ec:	2000077c 	.word	0x2000077c
 80071f0:	2000073c 	.word	0x2000073c

080071f4 <bt_conn_init>:

int bt_conn_init(void)
{
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <bt_conn_init+0x3c>)
 80071f6:	b570      	push	{r4, r5, r6, lr}
 80071f8:	2200      	movs	r2, #0
 80071fa:	681d      	ldr	r5, [r3, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
 80071fe:	4e0d      	ldr	r6, [pc, #52]	; (8007234 <bt_conn_init+0x40>)
{
 8007200:	4614      	mov	r4, r2
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
 8007202:	18b0      	adds	r0, r6, r2
	node->next = list->head;
 8007204:	5195      	str	r5, [r2, r6]
	if (!list->tail) {
 8007206:	b909      	cbnz	r1, 800720c <bt_conn_init+0x18>
		list->tail = list->head;
 8007208:	4601      	mov	r1, r0
	if (!list->tail) {
 800720a:	2401      	movs	r4, #1
 800720c:	3208      	adds	r2, #8
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
 800720e:	2a38      	cmp	r2, #56	; 0x38
	list->head = node;
 8007210:	4605      	mov	r5, r0
 8007212:	d1f6      	bne.n	8007202 <bt_conn_init+0xe>
 8007214:	6018      	str	r0, [r3, #0]
 8007216:	b104      	cbz	r4, 800721a <bt_conn_init+0x26>
 8007218:	6059      	str	r1, [r3, #4]
	}

	bt_att_init();
 800721a:	f001 f95b 	bl	80084d4 <bt_att_init>

	err = bt_smp_init();
 800721e:	f001 fe59 	bl	8008ed4 <bt_smp_init>
	if (err) {
 8007222:	4604      	mov	r4, r0
 8007224:	b908      	cbnz	r0, 800722a <bt_conn_init+0x36>
		return err;
	}

	bt_l2cap_init();
 8007226:	f000 f981 	bl	800752c <bt_l2cap_init>
			}
		}
	}

	return 0;
}
 800722a:	4620      	mov	r0, r4
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	bf00      	nop
 8007230:	200007d4 	.word	0x200007d4
 8007234:	20000704 	.word	0x20000704

08007238 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
 8007238:	4770      	bx	lr
	...

0800723c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <l2cap_accept+0x14>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	b918      	cbnz	r0, 800724a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
 8007242:	4a04      	ldr	r2, [pc, #16]	; (8007254 <l2cap_accept+0x18>)
 8007244:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
 8007246:	600b      	str	r3, [r1, #0]

		return 0;
 8007248:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
 800724a:	f06f 000b 	mvn.w	r0, #11
}
 800724e:	4770      	bx	lr
 8007250:	200007dc 	.word	0x200007dc
 8007254:	20005a4c 	.word	0x20005a4c

08007258 <l2cap_connected>:
 8007258:	4770      	bx	lr
	...

0800725c <bt_l2cap_le_fixed_chan_register>:
	node->next = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
 8007260:	4b05      	ldr	r3, [pc, #20]	; (8007278 <bt_l2cap_le_fixed_chan_register+0x1c>)
 8007262:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
 8007264:	f100 0208 	add.w	r2, r0, #8
 8007268:	b911      	cbnz	r1, 8007270 <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
 800726a:	605a      	str	r2, [r3, #4]
		list->head = node;
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	4770      	bx	lr
		list->tail->next = node;
 8007270:	600a      	str	r2, [r1, #0]
		list->tail = node;
 8007272:	605a      	str	r2, [r3, #4]
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000874 	.word	0x20000874

0800727c <bt_l2cap_chan_remove>:
{
 800727c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800727e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 8007280:	b113      	cbz	r3, 8007288 <bt_l2cap_chan_remove+0xc>
 8007282:	3b08      	subs	r3, #8
 8007284:	2200      	movs	r2, #0
 8007286:	b903      	cbnz	r3, 800728a <bt_l2cap_chan_remove+0xe>
 8007288:	bd30      	pop	{r4, r5, pc}
		if (chan == ch) {
 800728a:	428b      	cmp	r3, r1
 800728c:	f103 0408 	add.w	r4, r3, #8
 8007290:	d10e      	bne.n	80072b0 <bt_l2cap_chan_remove+0x34>
 8007292:	6899      	ldr	r1, [r3, #8]
 8007294:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	if (!prev_node) {
 8007296:	b932      	cbnz	r2, 80072a6 <bt_l2cap_chan_remove+0x2a>
		if (list->tail == node) {
 8007298:	42ac      	cmp	r4, r5
		list->head = node->next;
 800729a:	6381      	str	r1, [r0, #56]	; 0x38
		if (list->tail == node) {
 800729c:	d100      	bne.n	80072a0 <bt_l2cap_chan_remove+0x24>
			list->tail = list->head;
 800729e:	63c1      	str	r1, [r0, #60]	; 0x3c
	node->next = NULL;
 80072a0:	2200      	movs	r2, #0
 80072a2:	609a      	str	r2, [r3, #8]
 80072a4:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
 80072a6:	42ac      	cmp	r4, r5
		prev_node->next = node->next;
 80072a8:	6011      	str	r1, [r2, #0]
			list->tail = prev_node;
 80072aa:	bf08      	it	eq
 80072ac:	63c2      	streq	r2, [r0, #60]	; 0x3c
 80072ae:	e7f7      	b.n	80072a0 <bt_l2cap_chan_remove+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
 80072b0:	4622      	mov	r2, r4
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d0e8      	beq.n	8007288 <bt_l2cap_chan_remove+0xc>
	return node->next;
 80072b6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0e5      	beq.n	8007288 <bt_l2cap_chan_remove+0xc>
 80072bc:	3b08      	subs	r3, #8
 80072be:	e7e2      	b.n	8007286 <bt_l2cap_chan_remove+0xa>

080072c0 <bt_l2cap_chan_del>:
	if (!chan->conn) {
 80072c0:	6803      	ldr	r3, [r0, #0]
{
 80072c2:	b510      	push	{r4, lr}
 80072c4:	4604      	mov	r4, r0
	if (!chan->conn) {
 80072c6:	b12b      	cbz	r3, 80072d4 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
 80072c8:	6843      	ldr	r3, [r0, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	b103      	cbz	r3, 80072d0 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
 80072ce:	4798      	blx	r3
	chan->conn = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
 80072d4:	68e3      	ldr	r3, [r4, #12]
 80072d6:	b11b      	cbz	r3, 80072e0 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
 80072d8:	4620      	mov	r0, r4
}
 80072da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
 80072de:	4718      	bx	r3
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <l2cap_rtx_timeout>:
{
 80072e2:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
 80072e4:	f1a0 0410 	sub.w	r4, r0, #16
 80072e8:	4621      	mov	r1, r4
 80072ea:	f850 0c10 	ldr.w	r0, [r0, #-16]
 80072ee:	f7ff ffc5 	bl	800727c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
 80072f2:	4620      	mov	r0, r4
}
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
 80072f8:	f7ff bfe2 	b.w	80072c0 <bt_l2cap_chan_del>

080072fc <bt_l2cap_connected>:
{
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <bt_l2cap_connected+0x6c>)
 80072fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007302:	681c      	ldr	r4, [r3, #0]
 8007304:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 8007306:	b12c      	cbz	r4, 8007314 <bt_l2cap_connected+0x18>
	node->next = NULL;
 8007308:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 800730a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800736c <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 800730e:	3c08      	subs	r4, #8
 8007310:	46b9      	mov	r9, r7
 8007312:	b914      	cbnz	r4, 800731a <bt_l2cap_connected+0x1e>
}
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
 800731a:	6863      	ldr	r3, [r4, #4]
 800731c:	a901      	add	r1, sp, #4
 800731e:	4630      	mov	r0, r6
 8007320:	4798      	blx	r3
 8007322:	2800      	cmp	r0, #0
 8007324:	db18      	blt.n	8007358 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
 8007326:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
 8007328:	8823      	ldrh	r3, [r4, #0]
 800732a:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
 800732c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
 8007330:	4641      	mov	r1, r8
 8007332:	f105 0010 	add.w	r0, r5, #16
 8007336:	f00b f975 	bl	8012624 <k_delayed_work_init>
	if (!list->tail) {
 800733a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	node->next = NULL;
 800733c:	60af      	str	r7, [r5, #8]
	sys_slist_append(&conn->channels, &chan->node);
 800733e:	f105 0308 	add.w	r3, r5, #8
	if (!list->tail) {
 8007342:	b972      	cbnz	r2, 8007362 <bt_l2cap_connected+0x66>
		list->tail = node;
 8007344:	63f3      	str	r3, [r6, #60]	; 0x3c
		list->head = node;
 8007346:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
 8007348:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
 800734a:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
 800734c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
 800734e:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b103      	cbz	r3, 8007358 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
 8007356:	4798      	blx	r3
	return node->next;
 8007358:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
 800735a:	2c00      	cmp	r4, #0
 800735c:	d0da      	beq.n	8007314 <bt_l2cap_connected+0x18>
 800735e:	3c08      	subs	r4, #8
 8007360:	e7d7      	b.n	8007312 <bt_l2cap_connected+0x16>
		list->tail->next = node;
 8007362:	6013      	str	r3, [r2, #0]
		list->tail = node;
 8007364:	63f3      	str	r3, [r6, #60]	; 0x3c
 8007366:	e7ef      	b.n	8007348 <bt_l2cap_connected+0x4c>
 8007368:	20000874 	.word	0x20000874
 800736c:	080072e3 	.word	0x080072e3

08007370 <bt_l2cap_disconnected>:
{
 8007370:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007372:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007374:	b1a3      	cbz	r3, 80073a0 <bt_l2cap_disconnected+0x30>
 8007376:	f1b3 0008 	subs.w	r0, r3, #8
 800737a:	d10a      	bne.n	8007392 <bt_l2cap_disconnected+0x22>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
 8007380:	f7ff ff9e 	bl	80072c0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007384:	b164      	cbz	r4, 80073a0 <bt_l2cap_disconnected+0x30>
	return node->next;
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	b103      	cbz	r3, 800738c <bt_l2cap_disconnected+0x1c>
 800738a:	3b08      	subs	r3, #8
{
 800738c:	4620      	mov	r0, r4
 800738e:	461c      	mov	r4, r3
 8007390:	e7f6      	b.n	8007380 <bt_l2cap_disconnected+0x10>
 8007392:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
 8007394:	2c00      	cmp	r4, #0
 8007396:	d1f2      	bne.n	800737e <bt_l2cap_disconnected+0xe>
}
 8007398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
 800739c:	f7ff bf90 	b.w	80072c0 <bt_l2cap_chan_del>
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80073a2:	3104      	adds	r1, #4
 80073a4:	f7ff be64 	b.w	8007070 <bt_conn_create_pdu>

080073a8 <bt_l2cap_send_cb>:
{
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	4614      	mov	r4, r2
 80073ac:	4605      	mov	r5, r0
 80073ae:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
 80073b0:	f102 0008 	add.w	r0, r2, #8
 80073b4:	2104      	movs	r1, #4
{
 80073b6:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
 80073b8:	f00a f9ee 	bl	8011798 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 80073bc:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
 80073be:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
 80073c0:	3904      	subs	r1, #4
 80073c2:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
 80073c4:	4632      	mov	r2, r6
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
}
 80073ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
 80073ce:	f7ff bb36 	b.w	8006a3e <bt_conn_send_cb>

080073d2 <l2cap_recv>:
{
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 80073d6:	898b      	ldrh	r3, [r1, #12]
 80073d8:	2b03      	cmp	r3, #3
{
 80073da:	4606      	mov	r6, r0
 80073dc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
 80073de:	d931      	bls.n	8007444 <l2cap_recv+0x72>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
 80073e0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 80073e2:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
 80073e4:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
 80073e8:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
 80073ea:	f00a f9fa 	bl	80117e2 <net_buf_simple_pull>
	if (buf->len != len) {
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	42bb      	cmp	r3, r7
 80073f2:	d127      	bne.n	8007444 <l2cap_recv+0x72>
	if (!hdr->ident) {
 80073f4:	7867      	ldrb	r7, [r4, #1]
 80073f6:	b32f      	cbz	r7, 8007444 <l2cap_recv+0x72>
	switch (hdr->code) {
 80073f8:	7823      	ldrb	r3, [r4, #0]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d022      	beq.n	8007444 <l2cap_recv+0x72>
 80073fe:	2b13      	cmp	r3, #19
 8007400:	d020      	beq.n	8007444 <l2cap_recv+0x72>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 8007402:	2104      	movs	r1, #4
 8007404:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
 8007406:	f8d6 8000 	ldr.w	r8, [r6]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 800740a:	f7ff fe31 	bl	8007070 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 800740e:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 8007412:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007414:	2104      	movs	r1, #4
 8007416:	4630      	mov	r0, r6
 8007418:	f00a f978 	bl	801170c <net_buf_simple_add>
	hdr->len = sys_cpu_to_le16(len);
 800741c:	2400      	movs	r4, #0
	hdr->code = code;
 800741e:	2301      	movs	r3, #1
	hdr->len = sys_cpu_to_le16(len);
 8007420:	2102      	movs	r1, #2
	hdr->code = code;
 8007422:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
 8007424:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 8007426:	7081      	strb	r1, [r0, #2]
 8007428:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
 800742a:	4630      	mov	r0, r6
 800742c:	f00a f96e 	bl	801170c <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
 8007430:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
 8007432:	7004      	strb	r4, [r0, #0]
 8007434:	7044      	strb	r4, [r0, #1]
 8007436:	462a      	mov	r2, r5
 8007438:	4640      	mov	r0, r8
 800743a:	2105      	movs	r1, #5
}
 800743c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007440:	f7ff bfb2 	b.w	80073a8 <bt_l2cap_send_cb>
 8007444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007448 <bt_l2cap_le_lookup_tx_cid>:
{
 8007448:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 800744a:	b100      	cbz	r0, 800744e <bt_l2cap_le_lookup_tx_cid+0x6>
 800744c:	3808      	subs	r0, #8
 800744e:	b900      	cbnz	r0, 8007452 <bt_l2cap_le_lookup_tx_cid+0xa>
}
 8007450:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
 8007452:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8007456:	428b      	cmp	r3, r1
 8007458:	d0fa      	beq.n	8007450 <bt_l2cap_le_lookup_tx_cid+0x8>
 800745a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 800745c:	2000      	movs	r0, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f6      	beq.n	8007450 <bt_l2cap_le_lookup_tx_cid+0x8>
 8007462:	f1a3 0008 	sub.w	r0, r3, #8
 8007466:	e7f2      	b.n	800744e <bt_l2cap_le_lookup_tx_cid+0x6>

08007468 <bt_l2cap_le_lookup_rx_cid>:
{
 8007468:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 800746a:	b100      	cbz	r0, 800746e <bt_l2cap_le_lookup_rx_cid+0x6>
 800746c:	3808      	subs	r0, #8
 800746e:	b900      	cbnz	r0, 8007472 <bt_l2cap_le_lookup_rx_cid+0xa>
}
 8007470:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
 8007472:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8007474:	428b      	cmp	r3, r1
 8007476:	d0fb      	beq.n	8007470 <bt_l2cap_le_lookup_rx_cid+0x8>
 8007478:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
 800747a:	2000      	movs	r0, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f7      	beq.n	8007470 <bt_l2cap_le_lookup_rx_cid+0x8>
 8007480:	f1a3 0008 	sub.w	r0, r3, #8
 8007484:	e7f3      	b.n	800746e <bt_l2cap_le_lookup_rx_cid+0x6>

08007486 <bt_l2cap_recv>:
{
 8007486:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
 8007488:	898b      	ldrh	r3, [r1, #12]
 800748a:	2b03      	cmp	r3, #3
{
 800748c:	4605      	mov	r5, r0
 800748e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
 8007490:	d804      	bhi.n	800749c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
 8007492:	4620      	mov	r0, r4
}
 8007494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
 8007498:	f00a b918 	b.w	80116cc <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
 800749c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 800749e:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
 80074a0:	f850 3f08 	ldr.w	r3, [r0, #8]!
 80074a4:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
 80074a6:	f00a f99c 	bl	80117e2 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	f7ff ffdb 	bl	8007468 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d0ed      	beq.n	8007492 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
 80074b6:	6843      	ldr	r3, [r0, #4]
 80074b8:	4621      	mov	r1, r4
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4798      	blx	r3
 80074be:	e7e8      	b.n	8007492 <bt_l2cap_recv+0xc>

080074c0 <bt_l2cap_update_conn_param>:
{
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <bt_l2cap_update_conn_param+0x68>)
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	3201      	adds	r2, #1
	if (!ident) {
 80074ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
 80074ce:	bf08      	it	eq
 80074d0:	2201      	moveq	r2, #1
{
 80074d2:	460c      	mov	r4, r1
		ident++;
 80074d4:	701a      	strb	r2, [r3, #0]
{
 80074d6:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80074d8:	2104      	movs	r1, #4
 80074da:	2000      	movs	r0, #0
	return ident;
 80074dc:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80074de:	f7ff fdc7 	bl	8007070 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 80074e2:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
 80074e6:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 80074e8:	2104      	movs	r1, #4
 80074ea:	4640      	mov	r0, r8
 80074ec:	f00a f90e 	bl	801170c <net_buf_simple_add>
	hdr->code = code;
 80074f0:	2312      	movs	r3, #18
	hdr->ident = ident;
 80074f2:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
 80074f4:	2108      	movs	r1, #8
 80074f6:	2600      	movs	r6, #0
	hdr->code = code;
 80074f8:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
 80074fa:	7081      	strb	r1, [r0, #2]
 80074fc:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
 80074fe:	4640      	mov	r0, r8
 8007500:	f00a f904 	bl	801170c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
 8007504:	8823      	ldrh	r3, [r4, #0]
 8007506:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
 8007508:	8863      	ldrh	r3, [r4, #2]
 800750a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
 800750c:	88a3      	ldrh	r3, [r4, #4]
 800750e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
 8007510:	88e3      	ldrh	r3, [r4, #6]
 8007512:	80c3      	strh	r3, [r0, #6]
 8007514:	463a      	mov	r2, r7
 8007516:	4628      	mov	r0, r5
 8007518:	4633      	mov	r3, r6
 800751a:	2105      	movs	r1, #5
 800751c:	f7ff ff44 	bl	80073a8 <bt_l2cap_send_cb>
}
 8007520:	4630      	mov	r0, r6
 8007522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007526:	bf00      	nop
 8007528:	20000870 	.word	0x20000870

0800752c <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <bt_l2cap_init+0x8>)
 800752e:	f7ff be95 	b.w	800725c <bt_l2cap_le_fixed_chan_register>
 8007532:	bf00      	nop
 8007534:	20005a40 	.word	0x20005a40

08007538 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
 8007538:	2006      	movs	r0, #6
 800753a:	4770      	bx	lr

0800753c <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
 800753c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007540:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
 8007542:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
 8007546:	4284      	cmp	r4, r0
 8007548:	ea4f 01c3 	mov.w	r1, r3, lsl #3
 800754c:	d102      	bne.n	8007554 <att_op_get_type+0x18>
			return handlers[i].type;
 800754e:	440a      	add	r2, r1
 8007550:	7890      	ldrb	r0, [r2, #2]
 8007552:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007554:	3301      	adds	r3, #1
 8007556:	2b1b      	cmp	r3, #27
 8007558:	d1f3      	bne.n	8007542 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
 800755a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800755e:	bf14      	ite	ne
 8007560:	2000      	movne	r0, #0
 8007562:	2006      	moveq	r0, #6
}
 8007564:	bd10      	pop	{r4, pc}
 8007566:	bf00      	nop
 8007568:	08013814 	.word	0x08013814

0800756c <att_req_destroy>:
{
 800756c:	b510      	push	{r4, lr}
 800756e:	4604      	mov	r4, r0
	if (req->buf) {
 8007570:	6900      	ldr	r0, [r0, #16]
 8007572:	b108      	cbz	r0, 8007578 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
 8007574:	f00a f8aa 	bl	80116cc <net_buf_unref>
	if (req->destroy) {
 8007578:	68a3      	ldr	r3, [r4, #8]
 800757a:	b10b      	cbz	r3, 8007580 <att_req_destroy+0x14>
		req->destroy(req);
 800757c:	4620      	mov	r0, r4
 800757e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
 8007580:	4620      	mov	r0, r4
 8007582:	2214      	movs	r2, #20
 8007584:	2100      	movs	r1, #0
}
 8007586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
 800758a:	f7f9 b9a5 	b.w	80008d8 <memset>

0800758e <att_notify>:
{
 800758e:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
 8007590:	f101 0008 	add.w	r0, r1, #8
 8007594:	f00a f935 	bl	8011802 <net_buf_simple_pull_le16>
}
 8007598:	2000      	movs	r0, #0
 800759a:	bd08      	pop	{r3, pc}

0800759c <read_group_cb>:
{
 800759c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
 80075a0:	680d      	ldr	r5, [r1, #0]
{
 80075a2:	4606      	mov	r6, r0
 80075a4:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80075ae:	a902      	add	r1, sp, #8
 80075b0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
 80075b2:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 80075b4:	f88d 8008 	strb.w	r8, [sp, #8]
 80075b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80075bc:	f7fd fbd4 	bl	8004d68 <bt_uuid_cmp>
 80075c0:	b198      	cbz	r0, 80075ea <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 80075c2:	f642 0301 	movw	r3, #10241	; 0x2801
 80075c6:	a903      	add	r1, sp, #12
 80075c8:	6830      	ldr	r0, [r6, #0]
 80075ca:	f88d 800c 	strb.w	r8, [sp, #12]
 80075ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80075d2:	f7fd fbc9 	bl	8004d68 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
 80075d6:	b140      	cbz	r0, 80075ea <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	b123      	cbz	r3, 80075e6 <read_group_cb+0x4a>
 80075dc:	8a32      	ldrh	r2, [r6, #16]
 80075de:	8859      	ldrh	r1, [r3, #2]
 80075e0:	4291      	cmp	r1, r2
 80075e2:	d200      	bcs.n	80075e6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
 80075e4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
 80075e6:	2001      	movs	r0, #1
 80075e8:	e012      	b.n	8007610 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 80075ea:	6861      	ldr	r1, [r4, #4]
 80075ec:	6830      	ldr	r0, [r6, #0]
 80075ee:	f7fd fbbb 	bl	8004d68 <bt_uuid_cmp>
 80075f2:	b110      	cbz	r0, 80075fa <read_group_cb+0x5e>
		data->group = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	e7f5      	b.n	80075e6 <read_group_cb+0x4a>
	if (data->rsp->len &&
 80075fa:	68e3      	ldr	r3, [r4, #12]
 80075fc:	68a0      	ldr	r0, [r4, #8]
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	b14a      	cbz	r2, 8007616 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
 8007602:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 8007606:	8981      	ldrh	r1, [r0, #12]
 8007608:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
 800760a:	4293      	cmp	r3, r2
 800760c:	da03      	bge.n	8007616 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
 800760e:	2000      	movs	r0, #0
}
 8007610:	b004      	add	sp, #16
 8007612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 8007616:	2104      	movs	r1, #4
 8007618:	3008      	adds	r0, #8
 800761a:	f00a f877 	bl	801170c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 800761e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007620:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 8007622:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 8007624:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
 8007626:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007628:	898a      	ldrh	r2, [r1, #12]
 800762a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 800762e:	6889      	ldr	r1, [r1, #8]
 8007630:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	2500      	movs	r5, #0
 8007638:	440a      	add	r2, r1
 800763a:	9500      	str	r5, [sp, #0]
 800763c:	4631      	mov	r1, r6
 800763e:	b29b      	uxth	r3, r3
 8007640:	4638      	mov	r0, r7
 8007642:	47c0      	blx	r8
	if (read < 0) {
 8007644:	1e01      	subs	r1, r0, #0
 8007646:	dbe2      	blt.n	800760e <read_group_cb+0x72>
	if (!data->rsp->len) {
 8007648:	68e0      	ldr	r0, [r4, #12]
 800764a:	7802      	ldrb	r2, [r0, #0]
 800764c:	1d0b      	adds	r3, r1, #4
 800764e:	b92a      	cbnz	r2, 800765c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
 8007650:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
 8007652:	68a0      	ldr	r0, [r4, #8]
 8007654:	3008      	adds	r0, #8
 8007656:	f00a f859 	bl	801170c <net_buf_simple_add>
 800765a:	e7c4      	b.n	80075e6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
 800765c:	429a      	cmp	r2, r3
 800765e:	d0f8      	beq.n	8007652 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
 8007660:	68a2      	ldr	r2, [r4, #8]
 8007662:	8993      	ldrh	r3, [r2, #12]
 8007664:	3b04      	subs	r3, #4
 8007666:	8193      	strh	r3, [r2, #12]
 8007668:	e7d1      	b.n	800760e <read_group_cb+0x72>

0800766a <find_info_cb>:
	if (!data->rsp) {
 800766a:	688b      	ldr	r3, [r1, #8]
{
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4605      	mov	r5, r0
 8007670:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
 8007672:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
 8007674:	b963      	cbnz	r3, 8007690 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007676:	6848      	ldr	r0, [r1, #4]
 8007678:	2101      	movs	r1, #1
 800767a:	3008      	adds	r0, #8
 800767c:	f00a f846 	bl	801170c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8007680:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007682:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2302      	movne	r3, #2
 800768e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
 8007690:	68a3      	ldr	r3, [r4, #8]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d003      	beq.n	80076a0 <find_info_cb+0x36>
 8007698:	2b02      	cmp	r3, #2
 800769a:	d01a      	beq.n	80076d2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
 800769c:	2000      	movs	r0, #0
}
 800769e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f9      	bne.n	800769c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
 80076a8:	6860      	ldr	r0, [r4, #4]
 80076aa:	2104      	movs	r1, #4
 80076ac:	3008      	adds	r0, #8
 80076ae:	f00a f82d 	bl	801170c <net_buf_simple_add>
 80076b2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
 80076b4:	8a2b      	ldrh	r3, [r5, #16]
 80076b6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	885b      	ldrh	r3, [r3, #2]
 80076bc:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
 80076c4:	899b      	ldrh	r3, [r3, #12]
 80076c6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 80076c8:	2804      	cmp	r0, #4
 80076ca:	bf94      	ite	ls
 80076cc:	2000      	movls	r0, #0
 80076ce:	2001      	movhi	r0, #1
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
 80076d2:	682b      	ldr	r3, [r5, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d1e0      	bne.n	800769c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
 80076da:	6860      	ldr	r0, [r4, #4]
 80076dc:	2112      	movs	r1, #18
 80076de:	3008      	adds	r0, #8
 80076e0:	f00a f814 	bl	801170c <net_buf_simple_add>
 80076e4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 80076e6:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
 80076e8:	8a2b      	ldrh	r3, [r5, #16]
 80076ea:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
 80076ee:	2210      	movs	r2, #16
 80076f0:	3101      	adds	r1, #1
 80076f2:	f7f9 f8c5 	bl	8000880 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
 8007700:	2812      	cmp	r0, #18
 8007702:	e7e2      	b.n	80076ca <find_info_cb+0x60>

08007704 <find_type_cb>:
{
 8007704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
 8007708:	680e      	ldr	r6, [r1, #0]
{
 800770a:	b088      	sub	sp, #32
 800770c:	4605      	mov	r5, r0
 800770e:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 8007710:	2700      	movs	r7, #0
 8007712:	f642 0301 	movw	r3, #10241	; 0x2801
 8007716:	a902      	add	r1, sp, #8
 8007718:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
 800771a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
 800771e:	f88d 7008 	strb.w	r7, [sp, #8]
 8007722:	f8ad 300a 	strh.w	r3, [sp, #10]
 8007726:	f7fd fb1f 	bl	8004d68 <bt_uuid_cmp>
 800772a:	b928      	cbnz	r0, 8007738 <find_type_cb+0x34>
		data->group = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
 8007730:	2001      	movs	r0, #1
}
 8007732:	b008      	add	sp, #32
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
 8007738:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800773c:	a903      	add	r1, sp, #12
 800773e:	6828      	ldr	r0, [r5, #0]
 8007740:	f88d 700c 	strb.w	r7, [sp, #12]
 8007744:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007748:	f7fd fb0e 	bl	8004d68 <bt_uuid_cmp>
 800774c:	b140      	cbz	r0, 8007760 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0ed      	beq.n	8007730 <find_type_cb+0x2c>
 8007754:	8a2a      	ldrh	r2, [r5, #16]
 8007756:	8859      	ldrh	r1, [r3, #2]
 8007758:	4291      	cmp	r1, r2
 800775a:	d2e9      	bcs.n	8007730 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
 800775c:	805a      	strh	r2, [r3, #2]
 800775e:	e7e7      	b.n	8007730 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
 8007760:	6862      	ldr	r2, [r4, #4]
 8007762:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
 8007766:	8992      	ldrh	r2, [r2, #12]
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	2b03      	cmp	r3, #3
 800776c:	d9e1      	bls.n	8007732 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
 800776e:	2310      	movs	r3, #16
 8007770:	9000      	str	r0, [sp, #0]
 8007772:	eb0d 0203 	add.w	r2, sp, r3
 8007776:	686e      	ldr	r6, [r5, #4]
 8007778:	4629      	mov	r1, r5
 800777a:	4640      	mov	r0, r8
 800777c:	47b0      	blx	r6
	if (read < 0) {
 800777e:	1e02      	subs	r2, r0, #0
 8007780:	dbd4      	blt.n	800772c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
 8007782:	7c23      	ldrb	r3, [r4, #16]
 8007784:	429a      	cmp	r2, r3
 8007786:	d1d1      	bne.n	800772c <find_type_cb+0x28>
 8007788:	a904      	add	r1, sp, #16
 800778a:	68e0      	ldr	r0, [r4, #12]
 800778c:	f7f9 f863 	bl	8000856 <memcmp>
 8007790:	2800      	cmp	r0, #0
 8007792:	d1cb      	bne.n	800772c <find_type_cb+0x28>
	data->err = 0x00;
 8007794:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 8007796:	6860      	ldr	r0, [r4, #4]
 8007798:	2104      	movs	r1, #4
 800779a:	3008      	adds	r0, #8
 800779c:	f009 ffb6 	bl	801170c <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 80077a0:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
 80077a2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
 80077a4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
 80077a6:	8043      	strh	r3, [r0, #2]
 80077a8:	e7c2      	b.n	8007730 <find_type_cb+0x2c>
	...

080077ac <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
 80077ac:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 80077ae:	2317      	movs	r3, #23
{
 80077b0:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
 80077b2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
 80077b6:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
 80077b8:	4906      	ldr	r1, [pc, #24]	; (80077d4 <bt_att_connected+0x28>)
 80077ba:	30a4      	adds	r0, #164	; 0xa4
 80077bc:	f00a ff32 	bl	8012624 <k_delayed_work_init>
	list->head = NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
 80077c6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
 80077ca:	6820      	ldr	r0, [r4, #0]
}
 80077cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
 80077d0:	f001 bb3e 	b.w	8008e50 <bt_gatt_connected>
 80077d4:	08007ca5 	.word	0x08007ca5

080077d8 <check_perm.isra.3>:
	if ((mask & BT_GATT_PERM_READ) &&
 80077d8:	f011 0f01 	tst.w	r1, #1
 80077dc:	7c83      	ldrb	r3, [r0, #18]
 80077de:	d004      	beq.n	80077ea <check_perm.isra.3+0x12>
 80077e0:	f013 0f15 	tst.w	r3, #21
 80077e4:	d012      	beq.n	800780c <check_perm.isra.3+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
 80077e6:	6842      	ldr	r2, [r0, #4]
 80077e8:	b182      	cbz	r2, 800780c <check_perm.isra.3+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
 80077ea:	078a      	lsls	r2, r1, #30
 80077ec:	d504      	bpl.n	80077f8 <check_perm.isra.3+0x20>
 80077ee:	f013 0f2a 	tst.w	r3, #42	; 0x2a
 80077f2:	d00d      	beq.n	8007810 <check_perm.isra.3+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
 80077f4:	6882      	ldr	r2, [r0, #8]
 80077f6:	b15a      	cbz	r2, 8007810 <check_perm.isra.3+0x38>
	mask &= attr->perm;
 80077f8:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
 80077fa:	f011 0f30 	tst.w	r1, #48	; 0x30
 80077fe:	d109      	bne.n	8007814 <check_perm.isra.3+0x3c>
	return 0;
 8007800:	f011 0f0c 	tst.w	r1, #12
 8007804:	bf14      	ite	ne
 8007806:	200f      	movne	r0, #15
 8007808:	2000      	moveq	r0, #0
 800780a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
 800780c:	2002      	movs	r0, #2
 800780e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
 8007810:	2003      	movs	r0, #3
 8007812:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
 8007814:	2005      	movs	r0, #5
}
 8007816:	4770      	bx	lr

08007818 <read_type_cb>:
{
 8007818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
 800781c:	680f      	ldr	r7, [r1, #0]
{
 800781e:	4606      	mov	r6, r0
 8007820:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 8007822:	6800      	ldr	r0, [r0, #0]
 8007824:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
 8007826:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
 800782a:	f7fd fa9d 	bl	8004d68 <bt_uuid_cmp>
 800782e:	4680      	mov	r8, r0
 8007830:	2800      	cmp	r0, #0
 8007832:	d14d      	bne.n	80078d0 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 8007834:	2115      	movs	r1, #21
 8007836:	4630      	mov	r0, r6
 8007838:	f7ff ffce 	bl	80077d8 <check_perm.isra.3>
 800783c:	4605      	mov	r5, r0
 800783e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 8007840:	b148      	cbz	r0, 8007856 <read_type_cb+0x3e>
		if (data->rsp->len) {
 8007842:	68e3      	ldr	r3, [r4, #12]
 8007844:	781d      	ldrb	r5, [r3, #0]
 8007846:	b115      	cbz	r5, 800784e <read_type_cb+0x36>
			data->err = 0x00;
 8007848:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
 800784c:	4645      	mov	r5, r8
}
 800784e:	4628      	mov	r0, r5
 8007850:	b003      	add	sp, #12
 8007852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
 8007856:	68a0      	ldr	r0, [r4, #8]
 8007858:	2102      	movs	r1, #2
 800785a:	3008      	adds	r0, #8
 800785c:	f009 ff56 	bl	801170c <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
 8007860:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007862:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
 8007864:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
 8007866:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007868:	898a      	ldrh	r2, [r1, #12]
 800786a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800786e:	6889      	ldr	r1, [r1, #8]
 8007870:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8007874:	9500      	str	r5, [sp, #0]
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	b29b      	uxth	r3, r3
 800787a:	440a      	add	r2, r1
 800787c:	4648      	mov	r0, r9
 800787e:	4631      	mov	r1, r6
 8007880:	47c0      	blx	r8
	if (read < 0) {
 8007882:	1e01      	subs	r1, r0, #0
 8007884:	da08      	bge.n	8007898 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
 8007886:	f101 03ff 	add.w	r3, r1, #255	; 0xff
 800788a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 800788c:	bf9a      	itte	ls
 800788e:	4249      	negls	r1, r1
 8007890:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
 8007892:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
 8007894:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
 8007896:	e7da      	b.n	800784e <read_type_cb+0x36>
	if (!data->rsp->len) {
 8007898:	68e0      	ldr	r0, [r4, #12]
 800789a:	7802      	ldrb	r2, [r0, #0]
 800789c:	1c8b      	adds	r3, r1, #2
 800789e:	b982      	cbnz	r2, 80078c2 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
 80078a0:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
 80078a2:	68a0      	ldr	r0, [r4, #8]
 80078a4:	3008      	adds	r0, #8
 80078a6:	f009 ff31 	bl	801170c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 80078b0:	899b      	ldrh	r3, [r3, #12]
 80078b2:	1aed      	subs	r5, r5, r3
 80078b4:	68e3      	ldr	r3, [r4, #12]
 80078b6:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
 80078b8:	429d      	cmp	r5, r3
 80078ba:	bfd4      	ite	le
 80078bc:	2500      	movle	r5, #0
 80078be:	2501      	movgt	r5, #1
 80078c0:	e7c5      	b.n	800784e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d0ed      	beq.n	80078a2 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
 80078c6:	68a2      	ldr	r2, [r4, #8]
 80078c8:	8993      	ldrh	r3, [r2, #12]
 80078ca:	3b02      	subs	r3, #2
 80078cc:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
 80078ce:	e7be      	b.n	800784e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
 80078d0:	2501      	movs	r5, #1
 80078d2:	e7bc      	b.n	800784e <read_type_cb+0x36>

080078d4 <uuid_create>:
{
 80078d4:	b510      	push	{r4, lr}
	switch (buf->len) {
 80078d6:	898a      	ldrh	r2, [r1, #12]
 80078d8:	2a02      	cmp	r2, #2
{
 80078da:	4604      	mov	r4, r0
	switch (buf->len) {
 80078dc:	d003      	beq.n	80078e6 <uuid_create+0x12>
 80078de:	2a10      	cmp	r2, #16
 80078e0:	d00a      	beq.n	80078f8 <uuid_create+0x24>
	return false;
 80078e2:	2000      	movs	r0, #0
}
 80078e4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
 80078e6:	2300      	movs	r3, #0
 80078e8:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
 80078ea:	f101 0008 	add.w	r0, r1, #8
 80078ee:	f009 ff88 	bl	8011802 <net_buf_simple_pull_le16>
 80078f2:	8060      	strh	r0, [r4, #2]
		return true;
 80078f4:	2001      	movs	r0, #1
 80078f6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
 80078f8:	2302      	movs	r3, #2
 80078fa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
 80078fe:	6889      	ldr	r1, [r1, #8]
 8007900:	f7f8 ffbe 	bl	8000880 <memcpy>
 8007904:	e7f6      	b.n	80078f4 <uuid_create+0x20>
	...

08007908 <att_req_sent>:
{
 8007908:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 800790a:	2104      	movs	r1, #4
 800790c:	f7ff fd9c 	bl	8007448 <bt_l2cap_le_lookup_tx_cid>
 8007910:	4604      	mov	r4, r0
 8007912:	30cc      	adds	r0, #204	; 0xcc
 8007914:	f00a fb5e 	bl	8011fd4 <_impl_k_sem_give>
	if (att->req) {
 8007918:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800791c:	b143      	cbz	r3, 8007930 <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800791e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8007922:	f247 5230 	movw	r2, #30000	; 0x7530
 8007926:	4803      	ldr	r0, [pc, #12]	; (8007934 <att_req_sent+0x2c>)
}
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	f00a bee4 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	bf00      	nop
 8007934:	20001480 	.word	0x20001480

08007938 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
 8007938:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
 800793a:	4d0f      	ldr	r5, [pc, #60]	; (8007978 <bt_att_accept+0x40>)
 800793c:	682c      	ldr	r4, [r5, #0]
{
 800793e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
 8007940:	b9b4      	cbnz	r4, 8007970 <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <bt_att_accept+0x44>)
 8007944:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007946:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800794a:	f3bf 8f5b 	dmb	ish
 800794e:	e853 2f00 	ldrex	r2, [r3]
 8007952:	e843 4100 	strex	r1, r4, [r3]
 8007956:	2900      	cmp	r1, #0
 8007958:	d1f9      	bne.n	800794e <bt_att_accept+0x16>
 800795a:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
 800795e:	2202      	movs	r2, #2
 8007960:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 8007964:	4611      	mov	r1, r2
 8007966:	f00a fb2b 	bl	8011fc0 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
 800796a:	6035      	str	r5, [r6, #0]

		return 0;
 800796c:	4620      	mov	r0, r4
 800796e:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
 8007970:	f06f 000b 	mvn.w	r0, #11
}
 8007974:	bd70      	pop	{r4, r5, r6, pc}
 8007976:	bf00      	nop
 8007978:	2000087c 	.word	0x2000087c
 800797c:	20005a6c 	.word	0x20005a6c

08007980 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
 8007980:	6803      	ldr	r3, [r0, #0]
 8007982:	7a5b      	ldrb	r3, [r3, #9]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d10a      	bne.n	800799e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8007988:	f3bf 8f5b 	dmb	ish
 800798c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8007990:	f3bf 8f5b 	dmb	ish
 8007994:	ea6f 00a0 	mvn.w	r0, r0, asr #2
 8007998:	f000 0001 	and.w	r0, r0, #1
 800799c:	4770      	bx	lr
 800799e:	2001      	movs	r0, #1
}
 80079a0:	4770      	bx	lr

080079a2 <att_prepare_write_req>:
 80079a2:	2006      	movs	r0, #6
 80079a4:	4770      	bx	lr

080079a6 <att_chan_get>:
{
 80079a6:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
 80079a8:	7a43      	ldrb	r3, [r0, #9]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d001      	beq.n	80079b2 <att_chan_get+0xc>
		return NULL;
 80079ae:	2000      	movs	r0, #0
 80079b0:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
 80079b2:	2104      	movs	r1, #4
 80079b4:	f7ff fd58 	bl	8007468 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0f8      	beq.n	80079ae <att_chan_get+0x8>
 80079bc:	f3bf 8f5b 	dmb	ish
 80079c0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80079c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
 80079c8:	075b      	lsls	r3, r3, #29
 80079ca:	d4f0      	bmi.n	80079ae <att_chan_get+0x8>
}
 80079cc:	bd08      	pop	{r3, pc}

080079ce <att_pdu_sent>:
{
 80079ce:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 80079d0:	2104      	movs	r1, #4
 80079d2:	f7ff fd39 	bl	8007448 <bt_l2cap_le_lookup_tx_cid>
}
 80079d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 80079da:	30cc      	adds	r0, #204	; 0xcc
 80079dc:	f00a bafa 	b.w	8011fd4 <_impl_k_sem_give>

080079e0 <att_cfm_sent>:
{
 80079e0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 80079e2:	2104      	movs	r1, #4
 80079e4:	f7ff fd30 	bl	8007448 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80079e8:	f3bf 8f5b 	dmb	ish
 80079ec:	f100 0394 	add.w	r3, r0, #148	; 0x94
 80079f0:	e853 2f00 	ldrex	r2, [r3]
 80079f4:	f022 0202 	bic.w	r2, r2, #2
 80079f8:	e843 2100 	strex	r1, r2, [r3]
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d1f7      	bne.n	80079f0 <att_cfm_sent+0x10>
 8007a00:	f3bf 8f5b 	dmb	ish
 8007a04:	30cc      	adds	r0, #204	; 0xcc
}
 8007a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a0a:	f00a bae3 	b.w	8011fd4 <_impl_k_sem_give>

08007a0e <att_rsp_sent>:
{
 8007a0e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
 8007a10:	2104      	movs	r1, #4
 8007a12:	f7ff fd19 	bl	8007448 <bt_l2cap_le_lookup_tx_cid>
 8007a16:	f3bf 8f5b 	dmb	ish
 8007a1a:	f100 0394 	add.w	r3, r0, #148	; 0x94
 8007a1e:	e853 2f00 	ldrex	r2, [r3]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	e843 2100 	strex	r1, r2, [r3]
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	d1f7      	bne.n	8007a1e <att_rsp_sent+0x10>
 8007a2e:	f3bf 8f5b 	dmb	ish
 8007a32:	30cc      	adds	r0, #204	; 0xcc
}
 8007a34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a38:	f00a bacc 	b.w	8011fd4 <_impl_k_sem_give>

08007a3c <write_cb>:
{
 8007a3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a40:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
 8007a42:	f8d1 8000 	ldr.w	r8, [r1]
 8007a46:	212a      	movs	r1, #42	; 0x2a
{
 8007a48:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
 8007a4a:	f7ff fec5 	bl	80077d8 <check_perm.isra.3>
 8007a4e:	4605      	mov	r5, r0
 8007a50:	7520      	strb	r0, [r4, #20]
	if (data->err) {
 8007a52:	b9e0      	cbnz	r0, 8007a8e <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
 8007a54:	8a62      	ldrh	r2, [r4, #18]
 8007a56:	9001      	str	r0, [sp, #4]
 8007a58:	9200      	str	r2, [sp, #0]
 8007a5a:	7c23      	ldrb	r3, [r4, #16]
 8007a5c:	68b7      	ldr	r7, [r6, #8]
 8007a5e:	68e2      	ldr	r2, [r4, #12]
 8007a60:	4631      	mov	r1, r6
 8007a62:	4640      	mov	r0, r8
 8007a64:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
 8007a66:	2800      	cmp	r0, #0
 8007a68:	db02      	blt.n	8007a70 <write_cb+0x34>
 8007a6a:	7c23      	ldrb	r3, [r4, #16]
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	d00b      	beq.n	8007a88 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
 8007a70:	f100 03ff 	add.w	r3, r0, #255	; 0xff
 8007a74:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 8007a76:	bf9a      	itte	ls
 8007a78:	4240      	negls	r0, r0
 8007a7a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
 8007a7c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
 8007a7e:	7520      	strb	r0, [r4, #20]
}
 8007a80:	4628      	mov	r0, r5
 8007a82:	b002      	add	sp, #8
 8007a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
 8007a88:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
 8007a8a:	2501      	movs	r5, #1
 8007a8c:	e7f8      	b.n	8007a80 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
 8007a8e:	2500      	movs	r5, #0
 8007a90:	e7f6      	b.n	8007a80 <write_cb+0x44>
	...

08007a94 <att_send_req>:
{
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
 8007a98:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
 8007a9c:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
 8007aa0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aa8:	f00a fad6 	bl	8012058 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7ff ff67 	bl	8007980 <att_is_connected>
 8007ab2:	b928      	cbnz	r0, 8007ac0 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f00a fa8d 	bl	8011fd4 <_impl_k_sem_give>
		return -ENOTCONN;
 8007aba:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
 8007ac0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
 8007ac2:	f106 0008 	add.w	r0, r6, #8
 8007ac6:	f009 fec1 	bl	801184c <net_buf_simple_headroom>
	state->len = buf->len;
 8007aca:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
 8007acc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
 8007ace:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007ad0:	6920      	ldr	r0, [r4, #16]
 8007ad2:	682d      	ldr	r5, [r5, #0]
 8007ad4:	f009 fe16 	bl	8011704 <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007adc:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
 8007ade:	7818      	ldrb	r0, [r3, #0]
 8007ae0:	f7ff fd2c 	bl	800753c <att_op_get_type>
 8007ae4:	3801      	subs	r0, #1
 8007ae6:	b2c0      	uxtb	r0, r0
 8007ae8:	2804      	cmp	r0, #4
 8007aea:	bf96      	itet	ls
 8007aec:	4b05      	ldrls	r3, [pc, #20]	; (8007b04 <att_send_req+0x70>)
 8007aee:	4b06      	ldrhi	r3, [pc, #24]	; (8007b08 <att_send_req+0x74>)
 8007af0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
 8007af4:	4632      	mov	r2, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	2104      	movs	r1, #4
 8007afa:	f7ff fc55 	bl	80073a8 <bt_l2cap_send_cb>
	return 0;
 8007afe:	2000      	movs	r0, #0
}
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	bf00      	nop
 8007b04:	08013800 	.word	0x08013800
 8007b08:	080079cf 	.word	0x080079cf

08007b0c <att_handle_rsp>:
{
 8007b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b10:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
 8007b12:	30a4      	adds	r0, #164	; 0xa4
{
 8007b14:	461e      	mov	r6, r3
 8007b16:	460f      	mov	r7, r1
 8007b18:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
 8007b1a:	f00a fda1 	bl	8012660 <k_delayed_work_cancel>
	if (!att->req) {
 8007b1e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007b22:	b1db      	cbz	r3, 8007b5c <att_handle_rsp+0x50>
	if (att->req->buf) {
 8007b24:	6918      	ldr	r0, [r3, #16]
 8007b26:	b128      	cbz	r0, 8007b34 <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
 8007b28:	f009 fdd0 	bl	80116cc <net_buf_unref>
		att->req->buf = NULL;
 8007b2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007b30:	2200      	movs	r2, #0
 8007b32:	611a      	str	r2, [r3, #16]
	func = att->req->func;
 8007b34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
 8007b38:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
 8007b3a:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
 8007b3e:	2500      	movs	r5, #0
 8007b40:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
 8007b42:	463a      	mov	r2, r7
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4631      	mov	r1, r6
 8007b48:	4643      	mov	r3, r8
 8007b4a:	47c8      	blx	r9
	if (!att->req->func) {
 8007b4c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007b50:	6843      	ldr	r3, [r0, #4]
 8007b52:	b90b      	cbnz	r3, 8007b58 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
 8007b54:	f7ff fd0a 	bl	800756c <att_req_destroy>
	att->req = NULL;
 8007b58:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8007b5c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8007b60:	b159      	cbz	r1, 8007b7a <att_handle_rsp+0x6e>
	if (list->tail == node) {
 8007b62:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	list->head = node->next;
 8007b66:	680b      	ldr	r3, [r1, #0]
 8007b68:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (list->tail == node) {
 8007b6c:	4291      	cmp	r1, r2
		list->tail = list->head;
 8007b6e:	bf08      	it	eq
 8007b70:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff ff8d 	bl	8007a94 <att_send_req>
}
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007b82 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
 8007b82:	898a      	ldrh	r2, [r1, #12]
 8007b84:	6889      	ldr	r1, [r1, #8]
 8007b86:	2300      	movs	r3, #0
 8007b88:	f7ff bfc0 	b.w	8007b0c <att_handle_rsp>

08007b8c <att_handle_exec_write_rsp>:
 8007b8c:	f7ff bff9 	b.w	8007b82 <att_confirm>

08007b90 <att_handle_prepare_write_rsp>:
 8007b90:	f7ff bff7 	b.w	8007b82 <att_confirm>

08007b94 <att_handle_write_rsp>:
 8007b94:	f7ff bff5 	b.w	8007b82 <att_confirm>

08007b98 <att_handle_read_mult_rsp>:
 8007b98:	f7ff bff3 	b.w	8007b82 <att_confirm>

08007b9c <att_handle_read_blob_rsp>:
 8007b9c:	f7ff bff1 	b.w	8007b82 <att_confirm>

08007ba0 <att_handle_read_rsp>:
 8007ba0:	f7ff bfef 	b.w	8007b82 <att_confirm>

08007ba4 <att_handle_read_type_rsp>:
 8007ba4:	f7ff bfed 	b.w	8007b82 <att_confirm>

08007ba8 <att_handle_find_type_rsp>:
 8007ba8:	f7ff bfeb 	b.w	8007b82 <att_confirm>

08007bac <att_handle_find_info_rsp>:
 8007bac:	f7ff bfe9 	b.w	8007b82 <att_confirm>

08007bb0 <att_mtu_rsp>:
{
 8007bb0:	b410      	push	{r4}
 8007bb2:	460a      	mov	r2, r1
	if (!att) {
 8007bb4:	b190      	cbz	r0, 8007bdc <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
 8007bb6:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
 8007bb8:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
 8007bba:	2b16      	cmp	r3, #22
 8007bbc:	d805      	bhi.n	8007bca <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	4611      	mov	r1, r2
}
 8007bc4:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
 8007bc6:	f7ff bfa1 	b.w	8007b0c <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
 8007bca:	2b45      	cmp	r3, #69	; 0x45
 8007bcc:	bf28      	it	cs
 8007bce:	2345      	movcs	r3, #69	; 0x45
 8007bd0:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
 8007bd2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
 8007bd6:	8992      	ldrh	r2, [r2, #12]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e7f3      	b.n	8007bc4 <att_mtu_rsp+0x14>
}
 8007bdc:	bc10      	pop	{r4}
 8007bde:	4770      	bx	lr

08007be0 <att_error_rsp>:
{
 8007be0:	b430      	push	{r4, r5}
	if (!att->req) {
 8007be2:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
 8007be6:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
 8007be8:	b172      	cbz	r2, 8007c08 <att_error_rsp+0x28>
	if (att->req->buf) {
 8007bea:	6913      	ldr	r3, [r2, #16]
 8007bec:	b133      	cbz	r3, 8007bfc <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
 8007bee:	8995      	ldrh	r5, [r2, #12]
	buf->len = state->len;
 8007bf0:	89d2      	ldrh	r2, [r2, #14]
 8007bf2:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
 8007bf4:	f103 0110 	add.w	r1, r3, #16
 8007bf8:	4429      	add	r1, r5
 8007bfa:	6099      	str	r1, [r3, #8]
	err = rsp->error;
 8007bfc:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4611      	mov	r1, r2
}
 8007c02:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
 8007c04:	f7ff bf82 	b.w	8007b0c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
 8007c08:	230e      	movs	r3, #14
 8007c0a:	e7f8      	b.n	8007bfe <att_error_rsp+0x1e>

08007c0c <att_reset>:
{
 8007c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8007c0e:	f100 0394 	add.w	r3, r0, #148	; 0x94
 8007c12:	4605      	mov	r5, r0
 8007c14:	f3bf 8f5b 	dmb	ish
 8007c18:	e853 2f00 	ldrex	r2, [r3]
 8007c1c:	f042 0204 	orr.w	r2, r2, #4
 8007c20:	e843 2100 	strex	r1, r2, [r3]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d1f7      	bne.n	8007c18 <att_reset+0xc>
 8007c28:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
 8007c2c:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
 8007c30:	4620      	mov	r0, r4
 8007c32:	f00a f9cf 	bl	8011fd4 <_impl_k_sem_give>
 8007c36:	4620      	mov	r0, r4
 8007c38:	f00a f9cc 	bl	8011fd4 <_impl_k_sem_give>
 8007c3c:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 8007c40:	b98c      	cbnz	r4, 8007c66 <att_reset+0x5a>
	if (!att->req) {
 8007c42:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
 8007c4c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
 8007c50:	b90b      	cbnz	r3, 8007c56 <att_reset+0x4a>
}
 8007c52:	b003      	add	sp, #12
 8007c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
 8007c56:	230e      	movs	r3, #14
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4628      	mov	r0, r5
}
 8007c5c:	b003      	add	sp, #12
 8007c5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
 8007c62:	f7ff bf53 	b.w	8007b0c <att_handle_rsp>
	return node->next;
 8007c66:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
 8007c68:	6867      	ldr	r7, [r4, #4]
 8007c6a:	b12f      	cbz	r7, 8007c78 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9400      	str	r4, [sp, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	210e      	movs	r1, #14
 8007c74:	4618      	mov	r0, r3
 8007c76:	47b8      	blx	r7
		att_req_destroy(req);
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f7ff fc77 	bl	800756c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	d0df      	beq.n	8007c42 <att_reset+0x36>
 8007c82:	4634      	mov	r4, r6
 8007c84:	6836      	ldr	r6, [r6, #0]
 8007c86:	e7ef      	b.n	8007c68 <att_reset+0x5c>

08007c88 <bt_att_disconnected>:
{
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	4604      	mov	r4, r0
	att_reset(att);
 8007c8c:	f7ff ffbe 	bl	8007c0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	f001 f8e7 	bl	8008e64 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
 8007c96:	4620      	mov	r0, r4
 8007c98:	22e4      	movs	r2, #228	; 0xe4
 8007c9a:	2100      	movs	r1, #0
}
 8007c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
 8007ca0:	f7f8 be1a 	b.w	80008d8 <memset>

08007ca4 <att_timeout>:
{
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4604      	mov	r4, r0
	att_reset(att);
 8007ca8:	38a4      	subs	r0, #164	; 0xa4
 8007caa:	f7ff ffaf 	bl	8007c0c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
 8007cae:	f854 0ca4 	ldr.w	r0, [r4, #-164]
 8007cb2:	f001 f8d7 	bl	8008e64 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f844 3ca4 	str.w	r3, [r4, #-164]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <read_cb>:
{
 8007cbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cc2:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007cc4:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
 8007cc6:	f8d1 9000 	ldr.w	r9, [r1]
{
 8007cca:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007ccc:	3008      	adds	r0, #8
 8007cce:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
 8007cd0:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007cd4:	f009 fd1a 	bl	801170c <net_buf_simple_add>
	data->err = 0x00;
 8007cd8:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
 8007cda:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
 8007cdc:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
 8007cde:	2115      	movs	r1, #21
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff fd79 	bl	80077d8 <check_perm.isra.3>
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	7420      	strb	r0, [r4, #16]
	if (data->err) {
 8007cea:	bb08      	cbnz	r0, 8007d30 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
 8007cec:	68a1      	ldr	r1, [r4, #8]
 8007cee:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
 8007cf2:	898a      	ldrh	r2, [r1, #12]
 8007cf4:	6889      	ldr	r1, [r1, #8]
 8007cf6:	88a0      	ldrh	r0, [r4, #4]
 8007cf8:	9000      	str	r0, [sp, #0]
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	6877      	ldr	r7, [r6, #4]
 8007cfe:	440a      	add	r2, r1
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4631      	mov	r1, r6
 8007d04:	4640      	mov	r0, r8
 8007d06:	47b8      	blx	r7
	if (read < 0) {
 8007d08:	1e01      	subs	r1, r0, #0
 8007d0a:	da0b      	bge.n	8007d24 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
 8007d0c:	f101 03ff 	add.w	r3, r1, #255	; 0xff
 8007d10:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
 8007d12:	bf9a      	itte	ls
 8007d14:	4249      	negls	r1, r1
 8007d16:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
 8007d18:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
 8007d1a:	7421      	strb	r1, [r4, #16]
}
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	b003      	add	sp, #12
 8007d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
 8007d24:	68a0      	ldr	r0, [r4, #8]
 8007d26:	3008      	adds	r0, #8
 8007d28:	f009 fcf0 	bl	801170c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
 8007d2c:	2501      	movs	r5, #1
 8007d2e:	e7f5      	b.n	8007d1c <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
 8007d30:	463d      	mov	r5, r7
 8007d32:	e7f3      	b.n	8007d1c <read_cb+0x5e>

08007d34 <bt_att_create_pdu>:
{
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	460d      	mov	r5, r1
 8007d38:	4614      	mov	r4, r2
	att = att_chan_get(conn);
 8007d3a:	f7ff fe34 	bl	80079a6 <att_chan_get>
	if (!att) {
 8007d3e:	b180      	cbz	r0, 8007d62 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
 8007d40:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8007d44:	3401      	adds	r4, #1
 8007d46:	429c      	cmp	r4, r3
 8007d48:	d80b      	bhi.n	8007d62 <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	f7ff fb28 	bl	80073a2 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007d52:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
 8007d54:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8007d56:	3008      	adds	r0, #8
 8007d58:	f009 fcd8 	bl	801170c <net_buf_simple_add>
	hdr->code = op;
 8007d5c:	7005      	strb	r5, [r0, #0]
}
 8007d5e:	4620      	mov	r0, r4
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8007d62:	2400      	movs	r4, #0
 8007d64:	e7fb      	b.n	8007d5e <bt_att_create_pdu+0x2a>
	...

08007d68 <att_indicate>:
{
 8007d68:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8007d6a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
 8007d6c:	f101 0008 	add.w	r0, r1, #8
 8007d70:	f009 fd47 	bl	8011802 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
 8007d74:	2200      	movs	r2, #0
 8007d76:	211e      	movs	r1, #30
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7ff ffdb 	bl	8007d34 <bt_att_create_pdu>
	if (!buf) {
 8007d7e:	4602      	mov	r2, r0
 8007d80:	b120      	cbz	r0, 8007d8c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <att_indicate+0x28>)
 8007d84:	2104      	movs	r1, #4
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff fb0e 	bl	80073a8 <bt_l2cap_send_cb>
}
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	bd10      	pop	{r4, pc}
 8007d90:	080079e1 	.word	0x080079e1

08007d94 <att_mtu_req>:
{
 8007d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
 8007d98:	688b      	ldr	r3, [r1, #8]
 8007d9a:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 8007d9c:	2d16      	cmp	r5, #22
{
 8007d9e:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
 8007da0:	d91f      	bls.n	8007de2 <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
 8007da2:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
 8007da6:	2202      	movs	r2, #2
 8007da8:	2103      	movs	r1, #3
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff ffc2 	bl	8007d34 <bt_att_create_pdu>
	if (!pdu) {
 8007db0:	4607      	mov	r7, r0
 8007db2:	b1c8      	cbz	r0, 8007de8 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
 8007db4:	2102      	movs	r1, #2
 8007db6:	3008      	adds	r0, #8
 8007db8:	f009 fca8 	bl	801170c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
 8007dbc:	2400      	movs	r4, #0
 8007dbe:	2345      	movs	r3, #69	; 0x45
 8007dc0:	7003      	strb	r3, [r0, #0]
 8007dc2:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <att_mtu_req+0x5c>)
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	463a      	mov	r2, r7
 8007dca:	2104      	movs	r1, #4
 8007dcc:	f7ff faec 	bl	80073a8 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
 8007dd0:	2d45      	cmp	r5, #69	; 0x45
 8007dd2:	bf28      	it	cs
 8007dd4:	2545      	movcs	r5, #69	; 0x45
 8007dd6:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
 8007dd8:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
 8007ddc:	4620      	mov	r0, r4
 8007dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
 8007de2:	2004      	movs	r0, #4
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
 8007de8:	200e      	movs	r0, #14
}
 8007dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dee:	bf00      	nop
 8007df0:	08007a0f 	.word	0x08007a0f

08007df4 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
 8007df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	4688      	mov	r8, r1
 8007dfa:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
 8007e00:	4605      	mov	r5, r0
 8007e02:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
 8007e04:	f7ff ff96 	bl	8007d34 <bt_att_create_pdu>
	if (!buf) {
 8007e08:	4604      	mov	r4, r0
 8007e0a:	b180      	cbz	r0, 8007e2e <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	3008      	adds	r0, #8
 8007e10:	f009 fc7c 	bl	801170c <net_buf_simple_add>
	rsp->request = req;
 8007e14:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
 8007e18:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
 8007e1a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <send_err_rsp.part.9+0x40>)
 8007e24:	2104      	movs	r1, #4
}
 8007e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
 8007e2a:	f7ff babd 	b.w	80073a8 <bt_l2cap_send_cb>
 8007e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e32:	bf00      	nop
 8007e34:	08007a0f 	.word	0x08007a0f

08007e38 <bt_att_recv>:
{
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
 8007e3c:	898b      	ldrh	r3, [r1, #12]
{
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d05e      	beq.n	8007f04 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
 8007e46:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
 8007e48:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
 8007e4a:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
 8007e4e:	f009 fcc8 	bl	80117e2 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
 8007e52:	4a2d      	ldr	r2, [pc, #180]	; (8007f08 <bt_att_recv+0xd0>)
 8007e54:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007e56:	2300      	movs	r3, #0
 8007e58:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
 8007e5a:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
 8007e5e:	45ae      	cmp	lr, r5
 8007e60:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 8007e64:	d118      	bne.n	8007e98 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
 8007e66:	4402      	add	r2, r0
 8007e68:	7895      	ldrb	r5, [r2, #2]
 8007e6a:	2d01      	cmp	r5, #1
 8007e6c:	d024      	beq.n	8007eb8 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
 8007e6e:	2d05      	cmp	r5, #5
 8007e70:	d133      	bne.n	8007eda <bt_att_recv+0xa2>
 8007e72:	f3bf 8f5b 	dmb	ish
 8007e76:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8007e7a:	e852 3f00 	ldrex	r3, [r2]
 8007e7e:	f043 0e02 	orr.w	lr, r3, #2
 8007e82:	e842 ec00 	strex	ip, lr, [r2]
 8007e86:	f1bc 0f00 	cmp.w	ip, #0
 8007e8a:	d1f6      	bne.n	8007e7a <bt_att_recv+0x42>
 8007e8c:	f3bf 8f5b 	dmb	ish
 8007e90:	079b      	lsls	r3, r3, #30
 8007e92:	d522      	bpl.n	8007eda <bt_att_recv+0xa2>
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
 8007e98:	3301      	adds	r3, #1
 8007e9a:	2b1b      	cmp	r3, #27
 8007e9c:	d1dd      	bne.n	8007e5a <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7ff fb4c 	bl	800753c <att_op_get_type>
 8007ea4:	b370      	cbz	r0, 8007f04 <bt_att_recv+0xcc>
	if (!req) {
 8007ea6:	b36d      	cbz	r5, 8007f04 <bt_att_recv+0xcc>
 8007ea8:	2306      	movs	r3, #6
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4629      	mov	r1, r5
 8007eae:	6820      	ldr	r0, [r4, #0]
}
 8007eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb4:	f7ff bf9e 	b.w	8007df4 <send_err_rsp.part.9>
 8007eb8:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8007ebc:	f3bf 8f5b 	dmb	ish
 8007ec0:	e852 3f00 	ldrex	r3, [r2]
 8007ec4:	f043 0e01 	orr.w	lr, r3, #1
 8007ec8:	e842 ec00 	strex	ip, lr, [r2]
 8007ecc:	f1bc 0f00 	cmp.w	ip, #0
 8007ed0:	d1f6      	bne.n	8007ec0 <bt_att_recv+0x88>
 8007ed2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
 8007ed6:	07da      	lsls	r2, r3, #31
 8007ed8:	d414      	bmi.n	8007f04 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
 8007eda:	180b      	adds	r3, r1, r0
 8007edc:	89b1      	ldrh	r1, [r6, #12]
 8007ede:	785a      	ldrb	r2, [r3, #1]
 8007ee0:	4291      	cmp	r1, r2
 8007ee2:	d30d      	bcc.n	8007f00 <bt_att_recv+0xc8>
		err = handler->func(att, buf);
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4620      	mov	r0, r4
 8007eea:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
 8007eec:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
 8007eee:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
 8007ef0:	d108      	bne.n	8007f04 <bt_att_recv+0xcc>
 8007ef2:	b138      	cbz	r0, 8007f04 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
 8007ef4:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
 8007ef6:	b129      	cbz	r1, 8007f04 <bt_att_recv+0xcc>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	e7d8      	b.n	8007eae <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
 8007efc:	2304      	movs	r3, #4
 8007efe:	e7f9      	b.n	8007ef4 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
 8007f00:	2d01      	cmp	r5, #1
 8007f02:	d0fb      	beq.n	8007efc <bt_att_recv+0xc4>
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	08013814 	.word	0x08013814

08007f0c <att_read_group_req>:
{
 8007f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8007f10:	898b      	ldrh	r3, [r1, #12]
 8007f12:	2b06      	cmp	r3, #6
{
 8007f14:	b08d      	sub	sp, #52	; 0x34
 8007f16:	4680      	mov	r8, r0
 8007f18:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8007f1a:	d001      	beq.n	8007f20 <att_read_group_req+0x14>
 8007f1c:	2b14      	cmp	r3, #20
 8007f1e:	d168      	bne.n	8007ff2 <att_read_group_req+0xe6>
	req = (void *)buf->data;
 8007f20:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
 8007f22:	2104      	movs	r1, #4
	req = (void *)buf->data;
 8007f24:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
 8007f28:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
 8007f2c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8007f2e:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
 8007f30:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
 8007f32:	f009 fc56 	bl	80117e2 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
 8007f36:	4621      	mov	r1, r4
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff fccb 	bl	80078d4 <uuid_create>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d059      	beq.n	8007ff6 <att_read_group_req+0xea>
	if (!start || !end) {
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	d05a      	beq.n	8007ffc <att_read_group_req+0xf0>
 8007f46:	2400      	movs	r4, #0
 8007f48:	2e00      	cmp	r6, #0
 8007f4a:	d056      	beq.n	8007ffa <att_read_group_req+0xee>
	if (start > end) {
 8007f4c:	42b5      	cmp	r5, r6
 8007f4e:	d855      	bhi.n	8007ffc <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8007f50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007f54:	4669      	mov	r1, sp
 8007f56:	4638      	mov	r0, r7
 8007f58:	f88d 4000 	strb.w	r4, [sp]
 8007f5c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007f60:	f7fc ff02 	bl	8004d68 <bt_uuid_cmp>
 8007f64:	bb38      	cbnz	r0, 8007fb6 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
 8007f66:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
 8007f6a:	2214      	movs	r2, #20
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	a807      	add	r0, sp, #28
 8007f70:	f7f8 fcb2 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
 8007f74:	2201      	movs	r2, #1
 8007f76:	2111      	movs	r1, #17
 8007f78:	4648      	mov	r0, r9
 8007f7a:	f7ff fedb 	bl	8007d34 <bt_att_create_pdu>
 8007f7e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d038      	beq.n	8007ff6 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8007f84:	2101      	movs	r1, #1
 8007f86:	3008      	adds	r0, #8
	data.uuid = uuid;
 8007f88:	9708      	str	r7, [sp, #32]
	data.att = att;
 8007f8a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8007f8e:	f009 fbbd 	bl	801170c <net_buf_simple_add>
	data.rsp->len = 0;
 8007f92:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 8007f94:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8007f96:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
 8007f98:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	; (800800c <att_read_group_req+0x100>)
	data.group = NULL;
 8007f9c:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 fe69 	bl	8008c78 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
 8007fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa8:	781c      	ldrb	r4, [r3, #0]
 8007faa:	b9d4      	cbnz	r4, 8007fe2 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
 8007fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fae:	f009 fb8d 	bl	80116cc <net_buf_unref>
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	e00c      	b.n	8007fd0 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
 8007fb6:	f642 0301 	movw	r3, #10241	; 0x2801
 8007fba:	a901      	add	r1, sp, #4
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	f88d 4004 	strb.w	r4, [sp, #4]
 8007fc2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007fc6:	f7fc fecf 	bl	8004d68 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d0cb      	beq.n	8007f66 <att_read_group_req+0x5a>
 8007fce:	2310      	movs	r3, #16
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	2110      	movs	r1, #16
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	f7ff ff0d 	bl	8007df4 <send_err_rsp.part.9>
}
 8007fda:	4620      	mov	r0, r4
 8007fdc:	b00d      	add	sp, #52	; 0x34
 8007fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <att_read_group_req+0x104>)
 8007fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	4648      	mov	r0, r9
 8007fea:	f7ff f9dd 	bl	80073a8 <bt_l2cap_send_cb>
		return 0;
 8007fee:	2400      	movs	r4, #0
 8007ff0:	e7f3      	b.n	8007fda <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
 8007ff2:	2404      	movs	r4, #4
 8007ff4:	e7f1      	b.n	8007fda <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
 8007ff6:	240e      	movs	r4, #14
 8007ff8:	e7ef      	b.n	8007fda <att_read_group_req+0xce>
			*err = 0;
 8007ffa:	4635      	mov	r5, r6
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	462a      	mov	r2, r5
 8008000:	2110      	movs	r1, #16
 8008002:	4648      	mov	r0, r9
 8008004:	f7ff fef6 	bl	8007df4 <send_err_rsp.part.9>
 8008008:	e7f1      	b.n	8007fee <att_read_group_req+0xe2>
 800800a:	bf00      	nop
 800800c:	0800759d 	.word	0x0800759d
 8008010:	08007a0f 	.word	0x08007a0f

08008014 <att_read_mult_req>:
{
 8008014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8008018:	6804      	ldr	r4, [r0, #0]
{
 800801a:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
 800801c:	2214      	movs	r2, #20
{
 800801e:	4606      	mov	r6, r0
 8008020:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
 8008022:	a801      	add	r0, sp, #4
 8008024:	2100      	movs	r1, #0
 8008026:	f7f8 fc57 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
 800802a:	2200      	movs	r2, #0
 800802c:	210f      	movs	r1, #15
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff fe80 	bl	8007d34 <bt_att_create_pdu>
 8008034:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
 8008036:	b368      	cbz	r0, 8008094 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008038:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800809c <att_read_mult_req+0x88>
	data.att = att;
 800803c:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
 800803e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008042:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d806      	bhi.n	800805a <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800804c:	4b12      	ldr	r3, [pc, #72]	; (8008098 <att_read_mult_req+0x84>)
 800804e:	9a03      	ldr	r2, [sp, #12]
 8008050:	2104      	movs	r1, #4
 8008052:	4620      	mov	r0, r4
 8008054:	f7ff f9a8 	bl	80073a8 <bt_l2cap_send_cb>
 8008058:	e018      	b.n	800808c <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
 800805a:	4638      	mov	r0, r7
 800805c:	f009 fbd1 	bl	8011802 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 8008060:	ab01      	add	r3, sp, #4
 8008062:	464a      	mov	r2, r9
 8008064:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
 8008066:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
 8008068:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 800806c:	f000 fe04 	bl	8008c78 <bt_gatt_foreach_attr>
		if (data.err) {
 8008070:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0e6      	beq.n	8008046 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
 8008078:	9803      	ldr	r0, [sp, #12]
 800807a:	f009 fb27 	bl	80116cc <net_buf_unref>
 800807e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008082:	4632      	mov	r2, r6
 8008084:	210e      	movs	r1, #14
 8008086:	4620      	mov	r0, r4
 8008088:	f7ff feb4 	bl	8007df4 <send_err_rsp.part.9>
	return 0;
 800808c:	2000      	movs	r0, #0
}
 800808e:	b007      	add	sp, #28
 8008090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
 8008094:	200e      	movs	r0, #14
 8008096:	e7fa      	b.n	800808e <att_read_mult_req+0x7a>
 8008098:	08007a0f 	.word	0x08007a0f
 800809c:	08007cbf 	.word	0x08007cbf

080080a0 <att_read_rsp>:
{
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4607      	mov	r7, r0
 80080a6:	b086      	sub	sp, #24
 80080a8:	460c      	mov	r4, r1
 80080aa:	4690      	mov	r8, r2
	if (!handle) {
 80080ac:	461d      	mov	r5, r3
 80080ae:	b3a3      	cbz	r3, 800811a <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
 80080b0:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
 80080b2:	2214      	movs	r2, #20
 80080b4:	2100      	movs	r1, #0
 80080b6:	a801      	add	r0, sp, #4
 80080b8:	f7f8 fc0e 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
 80080bc:	2200      	movs	r2, #0
 80080be:	4641      	mov	r1, r8
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff fe37 	bl	8007d34 <bt_att_create_pdu>
 80080c6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
 80080c8:	b348      	cbz	r0, 800811e <att_read_rsp+0x7e>
	data.offset = offset;
 80080ca:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80080ce:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 80080d8:	4a12      	ldr	r2, [pc, #72]	; (8008124 <att_read_rsp+0x84>)
	data.att = att;
 80080da:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
 80080dc:	ab01      	add	r3, sp, #4
 80080de:	4629      	mov	r1, r5
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 fdc9 	bl	8008c78 <bt_gatt_foreach_attr>
	if (data.err) {
 80080e6:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80080ea:	b17f      	cbz	r7, 800810c <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
 80080ec:	9803      	ldr	r0, [sp, #12]
 80080ee:	f009 faed 	bl	80116cc <net_buf_unref>
	if (!req) {
 80080f2:	b13c      	cbz	r4, 8008104 <att_read_rsp+0x64>
 80080f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80080f8:	462a      	mov	r2, r5
 80080fa:	4621      	mov	r1, r4
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff fe79 	bl	8007df4 <send_err_rsp.part.9>
		return 0;
 8008102:	2400      	movs	r4, #0
}
 8008104:	4620      	mov	r0, r4
 8008106:	b006      	add	sp, #24
 8008108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <att_read_rsp+0x88>)
 800810e:	9a03      	ldr	r2, [sp, #12]
 8008110:	2104      	movs	r1, #4
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff f948 	bl	80073a8 <bt_l2cap_send_cb>
 8008118:	e7f3      	b.n	8008102 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
 800811a:	2401      	movs	r4, #1
 800811c:	e7f2      	b.n	8008104 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
 800811e:	240e      	movs	r4, #14
 8008120:	e7f0      	b.n	8008104 <att_read_rsp+0x64>
 8008122:	bf00      	nop
 8008124:	08007cbf 	.word	0x08007cbf
 8008128:	08007a0f 	.word	0x08007a0f

0800812c <att_read_blob_req>:
{
 800812c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
 800812e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
 8008130:	8813      	ldrh	r3, [r2, #0]
 8008132:	8852      	ldrh	r2, [r2, #2]
 8008134:	9200      	str	r2, [sp, #0]
 8008136:	210c      	movs	r1, #12
 8008138:	220d      	movs	r2, #13
 800813a:	f7ff ffb1 	bl	80080a0 <att_read_rsp>
}
 800813e:	b003      	add	sp, #12
 8008140:	f85d fb04 	ldr.w	pc, [sp], #4

08008144 <att_read_req>:
{
 8008144:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
 8008146:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
 8008148:	2200      	movs	r2, #0
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	9200      	str	r2, [sp, #0]
 800814e:	210a      	movs	r1, #10
 8008150:	220b      	movs	r2, #11
 8008152:	f7ff ffa5 	bl	80080a0 <att_read_rsp>
}
 8008156:	b003      	add	sp, #12
 8008158:	f85d fb04 	ldr.w	pc, [sp], #4

0800815c <att_read_type_req>:
{
 800815c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 8008160:	898b      	ldrh	r3, [r1, #12]
 8008162:	2b06      	cmp	r3, #6
{
 8008164:	b08d      	sub	sp, #52	; 0x34
 8008166:	4607      	mov	r7, r0
 8008168:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
 800816a:	d001      	beq.n	8008170 <att_read_type_req+0x14>
 800816c:	2b14      	cmp	r3, #20
 800816e:	d152      	bne.n	8008216 <att_read_type_req+0xba>
	req = (void *)buf->data;
 8008170:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
 8008172:	2104      	movs	r1, #4
	req = (void *)buf->data;
 8008174:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
 8008178:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
 800817c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 800817e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
 8008180:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
 8008184:	f009 fb2d 	bl	80117e2 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
 8008188:	4631      	mov	r1, r6
 800818a:	4640      	mov	r0, r8
 800818c:	f7ff fba2 	bl	80078d4 <uuid_create>
 8008190:	b198      	cbz	r0, 80081ba <att_read_type_req+0x5e>
	if (!start || !end) {
 8008192:	2d00      	cmp	r5, #0
 8008194:	d042      	beq.n	800821c <att_read_type_req+0xc0>
 8008196:	2c00      	cmp	r4, #0
 8008198:	d03f      	beq.n	800821a <att_read_type_req+0xbe>
	if (start > end) {
 800819a:	42a5      	cmp	r5, r4
 800819c:	d83e      	bhi.n	800821c <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
 800819e:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
 80081a0:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
 80081a2:	2100      	movs	r1, #0
 80081a4:	eb0d 0002 	add.w	r0, sp, r2
 80081a8:	f7f8 fb96 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
 80081ac:	2201      	movs	r2, #1
 80081ae:	2109      	movs	r1, #9
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff fdbf 	bl	8007d34 <bt_att_create_pdu>
 80081b6:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
 80081b8:	b908      	cbnz	r0, 80081be <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
 80081ba:	240e      	movs	r4, #14
 80081bc:	e027      	b.n	800820e <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 80081be:	2101      	movs	r1, #1
 80081c0:	3008      	adds	r0, #8
	data.att = att;
 80081c2:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
 80081c4:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 80081c8:	f009 faa0 	bl	801170c <net_buf_simple_add>
	data.rsp->len = 0;
 80081cc:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 80081ce:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
 80081d0:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 80081d2:	4621      	mov	r1, r4
	data.rsp->len = 0;
 80081d4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 80081d6:	4a14      	ldr	r2, [pc, #80]	; (8008228 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 80081d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
 80081dc:	4628      	mov	r0, r5
 80081de:	ab06      	add	r3, sp, #24
 80081e0:	f000 fd4a 	bl	8008c78 <bt_gatt_foreach_attr>
	if (data.err) {
 80081e4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80081e8:	b15c      	cbz	r4, 8008202 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
 80081ea:	9808      	ldr	r0, [sp, #32]
 80081ec:	f009 fa6e 	bl	80116cc <net_buf_unref>
 80081f0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80081f4:	462a      	mov	r2, r5
 80081f6:	2108      	movs	r1, #8
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7ff fdfb 	bl	8007df4 <send_err_rsp.part.9>
		return 0;
 80081fe:	2400      	movs	r4, #0
 8008200:	e005      	b.n	800820e <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 8008202:	4b0a      	ldr	r3, [pc, #40]	; (800822c <att_read_type_req+0xd0>)
 8008204:	9a08      	ldr	r2, [sp, #32]
 8008206:	2104      	movs	r1, #4
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff f8cd 	bl	80073a8 <bt_l2cap_send_cb>
}
 800820e:	4620      	mov	r0, r4
 8008210:	b00d      	add	sp, #52	; 0x34
 8008212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
 8008216:	2404      	movs	r4, #4
 8008218:	e7f9      	b.n	800820e <att_read_type_req+0xb2>
			*err = 0;
 800821a:	4625      	mov	r5, r4
 800821c:	2301      	movs	r3, #1
 800821e:	462a      	mov	r2, r5
 8008220:	2108      	movs	r1, #8
 8008222:	4648      	mov	r0, r9
 8008224:	e7e9      	b.n	80081fa <att_read_type_req+0x9e>
 8008226:	bf00      	nop
 8008228:	08007819 	.word	0x08007819
 800822c:	08007a0f 	.word	0x08007a0f

08008230 <att_find_type_req>:
{
 8008230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 8008234:	f8d0 8000 	ldr.w	r8, [r0]
{
 8008238:	4606      	mov	r6, r0
	req = (void *)buf->data;
 800823a:	4608      	mov	r0, r1
{
 800823c:	b086      	sub	sp, #24
	req = (void *)buf->data;
 800823e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
 8008242:	460f      	mov	r7, r1
	value = net_buf_pull(buf, sizeof(*req));
 8008244:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
 8008246:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008248:	885d      	ldrh	r5, [r3, #2]
	type = sys_le16_to_cpu(req->type);
 800824a:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
 800824e:	f009 fac8 	bl	80117e2 <net_buf_simple_pull>
 8008252:	4681      	mov	r9, r0
	if (!start || !end) {
 8008254:	2c00      	cmp	r4, #0
 8008256:	d046      	beq.n	80082e6 <att_find_type_req+0xb6>
 8008258:	2d00      	cmp	r5, #0
 800825a:	d043      	beq.n	80082e4 <att_find_type_req+0xb4>
	if (start > end) {
 800825c:	42ac      	cmp	r4, r5
 800825e:	d842      	bhi.n	80082e6 <att_find_type_req+0xb6>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
 8008260:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
 8008264:	d12a      	bne.n	80082bc <att_find_type_req+0x8c>
				 buf->len);
 8008266:	f8b7 800c 	ldrh.w	r8, [r7, #12]
	struct bt_conn *conn = att->chan.chan.conn;
 800826a:	6837      	ldr	r7, [r6, #0]
	memset(&data, 0, sizeof(data));
 800826c:	2214      	movs	r2, #20
 800826e:	2100      	movs	r1, #0
 8008270:	a801      	add	r0, sp, #4
 8008272:	f7f8 fb31 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	2107      	movs	r1, #7
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff fd5a 	bl	8007d34 <bt_att_create_pdu>
 8008280:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
 8008282:	b368      	cbz	r0, 80082e0 <att_find_type_req+0xb0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008284:	230a      	movs	r3, #10
	data.att = att;
 8008286:	9601      	str	r6, [sp, #4]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
 8008288:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 800828c:	4629      	mov	r1, r5
	data.group = NULL;
 800828e:	2600      	movs	r6, #0
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008290:	ab01      	add	r3, sp, #4
 8008292:	4a16      	ldr	r2, [pc, #88]	; (80082ec <att_find_type_req+0xbc>)
	data.group = NULL;
 8008294:	9603      	str	r6, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 8008296:	4620      	mov	r0, r4
	data.value = value;
 8008298:	f8cd 9010 	str.w	r9, [sp, #16]
	return att_find_type_rsp(att, start_handle, end_handle, value,
 800829c:	f88d 8014 	strb.w	r8, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
 80082a0:	f000 fcea 	bl	8008c78 <bt_gatt_foreach_attr>
	if (data.err) {
 80082a4:	f89d 5015 	ldrb.w	r5, [sp, #21]
 80082a8:	b19d      	cbz	r5, 80082d2 <att_find_type_req+0xa2>
		net_buf_unref(data.buf);
 80082aa:	9802      	ldr	r0, [sp, #8]
 80082ac:	f009 fa0e 	bl	80116cc <net_buf_unref>
 80082b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80082b4:	4622      	mov	r2, r4
 80082b6:	2106      	movs	r1, #6
 80082b8:	4638      	mov	r0, r7
 80082ba:	e003      	b.n	80082c4 <att_find_type_req+0x94>
 80082bc:	230a      	movs	r3, #10
 80082be:	4622      	mov	r2, r4
 80082c0:	2106      	movs	r1, #6
 80082c2:	4640      	mov	r0, r8
 80082c4:	f7ff fd96 	bl	8007df4 <send_err_rsp.part.9>
		return 0;
 80082c8:	2500      	movs	r5, #0
}
 80082ca:	4628      	mov	r0, r5
 80082cc:	b006      	add	sp, #24
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <att_find_type_req+0xc0>)
 80082d4:	9a02      	ldr	r2, [sp, #8]
 80082d6:	2104      	movs	r1, #4
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff f865 	bl	80073a8 <bt_l2cap_send_cb>
 80082de:	e7f4      	b.n	80082ca <att_find_type_req+0x9a>
		return BT_ATT_ERR_UNLIKELY;
 80082e0:	250e      	movs	r5, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
 80082e2:	e7f2      	b.n	80082ca <att_find_type_req+0x9a>
			*err = 0;
 80082e4:	462c      	mov	r4, r5
 80082e6:	2301      	movs	r3, #1
 80082e8:	e7e9      	b.n	80082be <att_find_type_req+0x8e>
 80082ea:	bf00      	nop
 80082ec:	08007705 	.word	0x08007705
 80082f0:	08007a0f 	.word	0x08007a0f

080082f4 <att_find_info_req>:
{
 80082f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
 80082f6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
 80082f8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
 80082fa:	881d      	ldrh	r5, [r3, #0]
{
 80082fc:	b085      	sub	sp, #20
 80082fe:	4607      	mov	r7, r0
	if (!start || !end) {
 8008300:	b375      	cbz	r5, 8008360 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
 8008302:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
 8008304:	b35c      	cbz	r4, 800835e <att_find_info_req+0x6a>
	if (start > end) {
 8008306:	42a5      	cmp	r5, r4
 8008308:	d82a      	bhi.n	8008360 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
 800830a:	2210      	movs	r2, #16
 800830c:	2100      	movs	r1, #0
 800830e:	4668      	mov	r0, sp
 8008310:	f7f8 fae2 	bl	80008d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	2105      	movs	r1, #5
 8008318:	4630      	mov	r0, r6
 800831a:	f7ff fd0b 	bl	8007d34 <bt_att_create_pdu>
 800831e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
 8008320:	b910      	cbnz	r0, 8008328 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
 8008322:	200e      	movs	r0, #14
}
 8008324:	b005      	add	sp, #20
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 8008328:	4621      	mov	r1, r4
 800832a:	466b      	mov	r3, sp
 800832c:	4a0d      	ldr	r2, [pc, #52]	; (8008364 <att_find_info_req+0x70>)
	data.att = att;
 800832e:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
 8008330:	4628      	mov	r0, r5
 8008332:	f000 fca1 	bl	8008c78 <bt_gatt_foreach_attr>
	if (!data.rsp) {
 8008336:	9c02      	ldr	r4, [sp, #8]
 8008338:	b94c      	cbnz	r4, 800834e <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
 800833a:	9801      	ldr	r0, [sp, #4]
 800833c:	f009 f9c6 	bl	80116cc <net_buf_unref>
 8008340:	230a      	movs	r3, #10
 8008342:	462a      	mov	r2, r5
 8008344:	2104      	movs	r1, #4
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff fd54 	bl	8007df4 <send_err_rsp.part.9>
 800834c:	e005      	b.n	800835a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
 800834e:	4b06      	ldr	r3, [pc, #24]	; (8008368 <att_find_info_req+0x74>)
 8008350:	9a01      	ldr	r2, [sp, #4]
 8008352:	2104      	movs	r1, #4
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff f827 	bl	80073a8 <bt_l2cap_send_cb>
		return 0;
 800835a:	2000      	movs	r0, #0
 800835c:	e7e2      	b.n	8008324 <att_find_info_req+0x30>
			*err = 0;
 800835e:	4625      	mov	r5, r4
 8008360:	2301      	movs	r3, #1
 8008362:	e7ee      	b.n	8008342 <att_find_info_req+0x4e>
 8008364:	0800766b 	.word	0x0800766b
 8008368:	08007a0f 	.word	0x08007a0f

0800836c <att_write_rsp.part.10.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	b086      	sub	sp, #24
 8008372:	4690      	mov	r8, r2
 8008374:	4605      	mov	r5, r0
 8008376:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
 8008378:	2218      	movs	r2, #24
 800837a:	2100      	movs	r1, #0
 800837c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
 800837e:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
 8008380:	f7f8 faaa 	bl	80008d8 <memset>
	if (rsp) {
 8008384:	f1b8 0f00 	cmp.w	r8, #0
 8008388:	d11f      	bne.n	80083ca <att_write_rsp.part.10.constprop.14+0x5e>
	data.offset = offset;
 800838a:	2300      	movs	r3, #0
 800838c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
 8008390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008392:	9303      	str	r3, [sp, #12]
	data.len = len;
 8008394:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8008398:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
 800839c:	2301      	movs	r3, #1
 800839e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 80083a2:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <att_write_rsp.part.10.constprop.14+0xa4>)
	data.conn = conn;
 80083a4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 80083a6:	466b      	mov	r3, sp
 80083a8:	4639      	mov	r1, r7
 80083aa:	4638      	mov	r0, r7
	data.op = op;
 80083ac:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
 80083b0:	f000 fc62 	bl	8008c78 <bt_gatt_foreach_attr>
	if (data.err) {
 80083b4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80083b8:	b98c      	cbnz	r4, 80083de <att_write_rsp.part.10.constprop.14+0x72>
	if (data.buf) {
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	b1b2      	cbz	r2, 80083ec <att_write_rsp.part.10.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
 80083be:	4b15      	ldr	r3, [pc, #84]	; (8008414 <att_write_rsp.part.10.constprop.14+0xa8>)
 80083c0:	2104      	movs	r1, #4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7fe fff0 	bl	80073a8 <bt_l2cap_send_cb>
 80083c8:	e011      	b.n	80083ee <att_write_rsp.part.10.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
 80083ca:	2200      	movs	r2, #0
 80083cc:	4641      	mov	r1, r8
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7ff fcb0 	bl	8007d34 <bt_att_create_pdu>
 80083d4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d1d7      	bne.n	800838a <att_write_rsp.part.10.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
 80083da:	240e      	movs	r4, #14
 80083dc:	e007      	b.n	80083ee <att_write_rsp.part.10.constprop.14+0x82>
		if (rsp) {
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	d00f      	beq.n	8008404 <att_write_rsp.part.10.constprop.14+0x98>
			net_buf_unref(data.buf);
 80083e4:	9801      	ldr	r0, [sp, #4]
 80083e6:	f009 f971 	bl	80116cc <net_buf_unref>
	if (!req) {
 80083ea:	b926      	cbnz	r6, 80083f6 <att_write_rsp.part.10.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 80083ec:	2400      	movs	r4, #0
}
 80083ee:	4620      	mov	r0, r4
 80083f0:	b006      	add	sp, #24
 80083f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80083fa:	463a      	mov	r2, r7
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	f7ff fcf8 	bl	8007df4 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
 8008404:	2e18      	cmp	r6, #24
 8008406:	d1f1      	bne.n	80083ec <att_write_rsp.part.10.constprop.14+0x80>
 8008408:	f89d 4014 	ldrb.w	r4, [sp, #20]
 800840c:	e7ef      	b.n	80083ee <att_write_rsp.part.10.constprop.14+0x82>
 800840e:	bf00      	nop
 8008410:	08007a3d 	.word	0x08007a3d
 8008414:	08007a0f 	.word	0x08007a0f

08008418 <att_signed_write_cmd>:
{
 8008418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
 800841c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
 800841e:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
 8008420:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
 8008424:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
 8008426:	4620      	mov	r0, r4
 8008428:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
 800842a:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
 800842e:	f009 f9b3 	bl	8011798 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
 8008432:	4629      	mov	r1, r5
 8008434:	4630      	mov	r0, r6
 8008436:	f000 fd4a 	bl	8008ece <bt_smp_sign_verify>
	if (err) {
 800843a:	4607      	mov	r7, r0
 800843c:	b9c8      	cbnz	r0, 8008472 <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
 800843e:	2101      	movs	r1, #1
 8008440:	4620      	mov	r0, r4
 8008442:	f009 f9ce 	bl	80117e2 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
 8008446:	2102      	movs	r1, #2
 8008448:	4620      	mov	r0, r4
 800844a:	f009 f9ca 	bl	80117e2 <net_buf_simple_pull>
	if (!handle) {
 800844e:	f1b8 0f00 	cmp.w	r8, #0
 8008452:	d010      	beq.n	8008476 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
 8008454:	7b2b      	ldrb	r3, [r5, #12]
 8008456:	3b0c      	subs	r3, #12
 8008458:	b2db      	uxtb	r3, r3
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	68ab      	ldr	r3, [r5, #8]
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	463a      	mov	r2, r7
 8008462:	4643      	mov	r3, r8
 8008464:	4639      	mov	r1, r7
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ff80 	bl	800836c <att_write_rsp.part.10.constprop.14>
}
 800846c:	b002      	add	sp, #8
 800846e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8008472:	2000      	movs	r0, #0
 8008474:	e7fa      	b.n	800846c <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
 8008476:	2001      	movs	r0, #1
 8008478:	e7f8      	b.n	800846c <att_signed_write_cmd+0x54>

0800847a <att_write_cmd>:
{
 800847a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 800847c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
 800847e:	f101 0008 	add.w	r0, r1, #8
{
 8008482:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 8008484:	f009 f9bd 	bl	8011802 <net_buf_simple_pull_le16>
	if (!handle) {
 8008488:	4603      	mov	r3, r0
 800848a:	b150      	cbz	r0, 80084a2 <att_write_cmd+0x28>
 800848c:	7b22      	ldrb	r2, [r4, #12]
 800848e:	9201      	str	r2, [sp, #4]
 8008490:	68a2      	ldr	r2, [r4, #8]
 8008492:	9200      	str	r2, [sp, #0]
 8008494:	2200      	movs	r2, #0
 8008496:	4611      	mov	r1, r2
 8008498:	4628      	mov	r0, r5
 800849a:	f7ff ff67 	bl	800836c <att_write_rsp.part.10.constprop.14>
}
 800849e:	b003      	add	sp, #12
 80084a0:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
 80084a2:	2001      	movs	r0, #1
 80084a4:	e7fb      	b.n	800849e <att_write_cmd+0x24>

080084a6 <att_write_req>:
{
 80084a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
 80084a8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
 80084aa:	f101 0008 	add.w	r0, r1, #8
{
 80084ae:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
 80084b0:	f009 f9a7 	bl	8011802 <net_buf_simple_pull_le16>
	if (!handle) {
 80084b4:	4603      	mov	r3, r0
 80084b6:	b150      	cbz	r0, 80084ce <att_write_req+0x28>
 80084b8:	7b22      	ldrb	r2, [r4, #12]
 80084ba:	9201      	str	r2, [sp, #4]
 80084bc:	68a2      	ldr	r2, [r4, #8]
 80084be:	9200      	str	r2, [sp, #0]
 80084c0:	2112      	movs	r1, #18
 80084c2:	2213      	movs	r2, #19
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff ff51 	bl	800836c <att_write_rsp.part.10.constprop.14>
}
 80084ca:	b003      	add	sp, #12
 80084cc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
 80084ce:	2001      	movs	r0, #1
 80084d0:	e7fb      	b.n	80084ca <att_write_req+0x24>
	...

080084d4 <bt_att_init>:

void bt_att_init(void)
{
 80084d4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 80084d6:	4803      	ldr	r0, [pc, #12]	; (80084e4 <bt_att_init+0x10>)
 80084d8:	f7fe fec0 	bl	800725c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
 80084dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
 80084e0:	f000 bb3e 	b.w	8008b60 <bt_gatt_init>
 80084e4:	20005a60 	.word	0x20005a60

080084e8 <bt_att_get_mtu>:

u16_t bt_att_get_mtu(struct bt_conn *conn)
{
 80084e8:	b508      	push	{r3, lr}
	struct bt_att *att;

	att = att_chan_get(conn);
 80084ea:	f7ff fa5c 	bl	80079a6 <att_chan_get>
	if (!att) {
 80084ee:	b108      	cbz	r0, 80084f4 <bt_att_get_mtu+0xc>
		return 0;
	}

	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
 80084f0:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
}
 80084f4:	bd08      	pop	{r3, pc}

080084f6 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
 80084f6:	b510      	push	{r4, lr}
 80084f8:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
 80084fa:	b1d8      	cbz	r0, 8008534 <bt_att_req_send+0x3e>
 80084fc:	b1d1      	cbz	r1, 8008534 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
 80084fe:	f7ff fa52 	bl	80079a6 <att_chan_get>
	if (!att) {
 8008502:	4603      	mov	r3, r0
 8008504:	b1c8      	cbz	r0, 800853a <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
 8008506:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800850a:	b172      	cbz	r2, 800852a <bt_att_req_send+0x34>
	if (!list->tail) {
 800850c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	node->next = NULL;
 8008510:	2000      	movs	r0, #0
 8008512:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
 8008514:	b92a      	cbnz	r2, 8008522 <bt_att_req_send+0x2c>
		list->tail = node;
 8008516:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		list->head = node;
 800851a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
 800851e:	4610      	mov	r0, r2
 8008520:	bd10      	pop	{r4, pc}
		list->tail->next = node;
 8008522:	6014      	str	r4, [r2, #0]
		list->tail = node;
 8008524:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 8008528:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
 800852a:	4621      	mov	r1, r4
}
 800852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
 8008530:	f7ff bab0 	b.w	8007a94 <att_send_req>
		return -EINVAL;
 8008534:	f06f 0015 	mvn.w	r0, #21
 8008538:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
 800853a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 800853e:	bd10      	pop	{r4, pc}

08008540 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
 8008540:	4770      	bx	lr

08008542 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
 8008542:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr

08008548 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
 8008548:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
 800854a:	2300      	movs	r3, #0
 800854c:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
 800854e:	461a      	mov	r2, r3
 8008550:	42aa      	cmp	r2, r5
 8008552:	d107      	bne.n	8008564 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
 8008554:	890a      	ldrh	r2, [r1, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	d00d      	beq.n	8008576 <gatt_ccc_changed+0x2e>
		ccc->value = value;
 800855a:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
 800855c:	68ca      	ldr	r2, [r1, #12]
	}
}
 800855e:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
 8008560:	4619      	mov	r1, r3
 8008562:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
 8008564:	680c      	ldr	r4, [r1, #0]
 8008566:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
 800856a:	3201      	adds	r2, #1
 800856c:	8924      	ldrh	r4, [r4, #8]
 800856e:	42a3      	cmp	r3, r4
 8008570:	bf38      	it	cc
 8008572:	4623      	movcc	r3, r4
 8008574:	e7ec      	b.n	8008550 <gatt_ccc_changed+0x8>
}
 8008576:	bc30      	pop	{r4, r5}
 8008578:	4770      	bx	lr

0800857a <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
 800857a:	b410      	push	{r4}
 800857c:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
 800857e:	699c      	ldr	r4, [r3, #24]
 8008580:	460a      	mov	r2, r1
 8008582:	6959      	ldr	r1, [r3, #20]
 8008584:	4623      	mov	r3, r4
}
 8008586:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
 8008588:	4718      	bx	r3

0800858a <bt_gatt_attr_write_ccc>:
{
 800858a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858e:	4689      	mov	r9, r1
 8008590:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
 8008594:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
 8008598:	2902      	cmp	r1, #2
{
 800859a:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
 800859c:	d84d      	bhi.n	800863a <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
 800859e:	4419      	add	r1, r3
 80085a0:	2902      	cmp	r1, #2
 80085a2:	461e      	mov	r6, r3
 80085a4:	dc4c      	bgt.n	8008640 <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
 80085a6:	7853      	ldrb	r3, [r2, #1]
 80085a8:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
 80085aa:	2500      	movs	r5, #0
 80085ac:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	429d      	cmp	r5, r3
 80085b4:	d207      	bcs.n	80085c6 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 80085b6:	6821      	ldr	r1, [r4, #0]
 80085b8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80085bc:	3101      	adds	r1, #1
 80085be:	4650      	mov	r0, sl
 80085c0:	f7fe fc4c 	bl	8006e5c <bt_conn_addr_le_cmp>
 80085c4:	b948      	cbnz	r0, 80085da <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	429d      	cmp	r5, r3
 80085ca:	d130      	bne.n	800862e <bt_gatt_attr_write_ccc+0xa4>
 80085cc:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
 80085d0:	4545      	cmp	r5, r8
 80085d2:	d104      	bne.n	80085de <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
 80085d4:	f06f 0610 	mvn.w	r6, #16
 80085d8:	e026      	b.n	8008628 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
 80085da:	3501      	adds	r5, #1
 80085dc:	e7e8      	b.n	80085b0 <bt_gatt_attr_write_ccc+0x26>
 80085de:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	eb03 000b 	add.w	r0, r3, fp
 80085e8:	f813 300b 	ldrb.w	r3, [r3, fp]
 80085ec:	b113      	cbz	r3, 80085f4 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
 80085ee:	f108 0801 	add.w	r8, r8, #1
 80085f2:	e7ed      	b.n	80085d0 <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
 80085f4:	2207      	movs	r2, #7
 80085f6:	f10a 0144 	add.w	r1, sl, #68	; 0x44
 80085fa:	3001      	adds	r0, #1
 80085fc:	f7f8 f940 	bl	8000880 <memcpy>
			if (value) {
 8008600:	b11f      	cbz	r7, 800860a <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	4598      	cmp	r8, r3
 800860e:	d0e1      	beq.n	80085d4 <bt_gatt_attr_write_ccc+0x4a>
 8008610:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
 8008618:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
 800861a:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
 800861c:	42bb      	cmp	r3, r7
 800861e:	d003      	beq.n	8008628 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
 8008620:	4621      	mov	r1, r4
 8008622:	4648      	mov	r0, r9
 8008624:	f7ff ff90 	bl	8008548 <gatt_ccc_changed>
}
 8008628:	4630      	mov	r0, r6
 800862a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
 800862e:	2f00      	cmp	r7, #0
 8008630:	d1ef      	bne.n	8008612 <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	012b      	lsls	r3, r5, #4
 8008636:	54d7      	strb	r7, [r2, r3]
 8008638:	e7eb      	b.n	8008612 <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800863a:	f06f 0606 	mvn.w	r6, #6
 800863e:	e7f3      	b.n	8008628 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 8008640:	f06f 060c 	mvn.w	r6, #12
 8008644:	e7f0      	b.n	8008628 <bt_gatt_attr_write_ccc+0x9e>

08008646 <gatt_notify>:
{
 8008646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864a:	468a      	mov	sl, r1
 800864c:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
 800864e:	211b      	movs	r1, #27
 8008650:	1c9a      	adds	r2, r3, #2
{
 8008652:	4680      	mov	r8, r0
 8008654:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
 8008656:	f7ff fb6d 	bl	8007d34 <bt_att_create_pdu>
	if (!buf) {
 800865a:	4604      	mov	r4, r0
 800865c:	b1d0      	cbz	r0, 8008694 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
 800865e:	f100 0708 	add.w	r7, r0, #8
 8008662:	2102      	movs	r1, #2
 8008664:	4638      	mov	r0, r7
 8008666:	f009 f851 	bl	801170c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
 800866a:	4605      	mov	r5, r0
	net_buf_add(buf, len);
 800866c:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
 800866e:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
 8008672:	4638      	mov	r0, r7
 8008674:	f009 f84a 	bl	801170c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
 8008678:	4632      	mov	r2, r6
 800867a:	4649      	mov	r1, r9
 800867c:	4628      	mov	r0, r5
 800867e:	f7f8 f8ff 	bl	8000880 <memcpy>
 8008682:	4640      	mov	r0, r8
 8008684:	2300      	movs	r3, #0
 8008686:	4622      	mov	r2, r4
 8008688:	2104      	movs	r1, #4
 800868a:	f7fe fe8d 	bl	80073a8 <bt_l2cap_send_cb>
	return 0;
 800868e:	2000      	movs	r0, #0
 8008690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
 8008694:	f06f 000b 	mvn.w	r0, #11
}
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800869c <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
 800869c:	8c0a      	ldrh	r2, [r1, #32]
{
 800869e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 80086a2:	3202      	adds	r2, #2
{
 80086a4:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 80086a6:	211d      	movs	r1, #29
{
 80086a8:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
 80086aa:	f7ff fb43 	bl	8007d34 <bt_att_create_pdu>
	if (!buf) {
 80086ae:	4605      	mov	r5, r0
 80086b0:	b320      	cbz	r0, 80086fc <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
 80086b2:	f100 0608 	add.w	r6, r0, #8
 80086b6:	2102      	movs	r1, #2
 80086b8:	4630      	mov	r0, r6
 80086ba:	f009 f827 	bl	801170c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 80086be:	6963      	ldr	r3, [r4, #20]

	net_buf_add(buf, params->len);
 80086c0:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 80086c2:	8a1b      	ldrh	r3, [r3, #16]
 80086c4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
 80086c6:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
 80086c8:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
 80086cc:	f009 f81e 	bl	801170c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
 80086d0:	8c22      	ldrh	r2, [r4, #32]
 80086d2:	69e1      	ldr	r1, [r4, #28]
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7f8 f8d3 	bl	8000880 <memcpy>
		req->func = func;
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <gatt_indicate+0x68>)
 80086dc:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
 80086de:	2300      	movs	r3, #0
		req->buf = buf;
 80086e0:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
 80086e2:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
 80086e4:	4621      	mov	r1, r4
 80086e6:	4640      	mov	r0, r8
 80086e8:	f7ff ff05 	bl	80084f6 <bt_att_req_send>
	if (err) {
 80086ec:	4604      	mov	r4, r0
 80086ee:	b110      	cbz	r0, 80086f6 <gatt_indicate+0x5a>
		net_buf_unref(buf);
 80086f0:	4628      	mov	r0, r5
 80086f2:	f008 ffeb 	bl	80116cc <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
 80086f6:	4620      	mov	r0, r4
 80086f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
 80086fc:	f06f 040b 	mvn.w	r4, #11
 8008700:	e7f9      	b.n	80086f6 <gatt_indicate+0x5a>
 8008702:	bf00      	nop
 8008704:	0800857b 	.word	0x0800857b

08008708 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
 8008708:	4a19      	ldr	r2, [pc, #100]	; (8008770 <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
 800870a:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
 800870c:	6813      	ldr	r3, [r2, #0]
{
 800870e:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
 8008710:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
 8008712:	b153      	cbz	r3, 800872a <gatt_register+0x22>
 8008714:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
 8008716:	b343      	cbz	r3, 800876a <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
 8008718:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 800871c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8008720:	2614      	movs	r6, #20
 8008722:	fb06 3304 	mla	r3, r6, r4, r3
 8008726:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 800872a:	2414      	movs	r4, #20
 800872c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
 8008730:	b109      	cbz	r1, 8008736 <gatt_register+0x2e>
 8008732:	42a9      	cmp	r1, r5
 8008734:	d108      	bne.n	8008748 <gatt_register+0x40>
	node->next = NULL;
 8008736:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
 8008738:	f100 0108 	add.w	r1, r0, #8
 800873c:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
 800873e:	6850      	ldr	r0, [r2, #4]
 8008740:	b978      	cbnz	r0, 8008762 <gatt_register+0x5a>
		list->tail = node;
 8008742:	6051      	str	r1, [r2, #4]
		list->head = node;
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
 8008748:	8a0c      	ldrh	r4, [r1, #16]
 800874a:	b92c      	cbnz	r4, 8008758 <gatt_register+0x50>
			attrs->handle = ++handle;
 800874c:	3301      	adds	r3, #1
 800874e:	b29c      	uxth	r4, r3
 8008750:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
 8008752:	3114      	adds	r1, #20
 8008754:	4623      	mov	r3, r4
 8008756:	e7eb      	b.n	8008730 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
 8008758:	42a3      	cmp	r3, r4
 800875a:	d3fa      	bcc.n	8008752 <gatt_register+0x4a>
			return -EINVAL;
 800875c:	f06f 0015 	mvn.w	r0, #21
 8008760:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
 8008762:	6001      	str	r1, [r0, #0]
		list->tail = node;
 8008764:	6051      	str	r1, [r2, #4]
	return 0;
 8008766:	4618      	mov	r0, r3
 8008768:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	deff      	udf	#255	; 0xff
 800876e:	bf00      	nop
 8008770:	20000960 	.word	0x20000960

08008774 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
 8008774:	b510      	push	{r4, lr}
 8008776:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <sc_indicate.constprop.17+0x60>)
 8008778:	f3bf 8f5b 	dmb	ish
 800877c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8008780:	e852 4f00 	ldrex	r4, [r2]
 8008784:	f044 0e01 	orr.w	lr, r4, #1
 8008788:	e842 ec00 	strex	ip, lr, [r2]
 800878c:	f1bc 0f00 	cmp.w	ip, #0
 8008790:	d1f6      	bne.n	8008780 <sc_indicate.constprop.17+0xc>
 8008792:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
 8008796:	07e2      	lsls	r2, r4, #31
 8008798:	d402      	bmi.n	80087a0 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
 800879a:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
 800879c:	84d9      	strh	r1, [r3, #38]	; 0x26
 800879e:	e00a      	b.n	80087b6 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
 80087a0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80087a2:	4282      	cmp	r2, r0
 80087a4:	d803      	bhi.n	80087ae <sc_indicate.constprop.17+0x3a>
 80087a6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80087a8:	428a      	cmp	r2, r1
 80087aa:	d301      	bcc.n	80087b0 <sc_indicate.constprop.17+0x3c>
 80087ac:	bd10      	pop	{r4, pc}
		*start = new_start;
 80087ae:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
 80087b0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80087b2:	428a      	cmp	r2, r1
 80087b4:	d3f2      	bcc.n	800879c <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80087b6:	f3bf 8f5b 	dmb	ish
 80087ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
 80087c0:	079b      	lsls	r3, r3, #30
 80087c2:	d406      	bmi.n	80087d2 <sc_indicate.constprop.17+0x5e>
 80087c4:	220a      	movs	r2, #10
 80087c6:	4904      	ldr	r1, [pc, #16]	; (80087d8 <sc_indicate.constprop.17+0x64>)
 80087c8:	4804      	ldr	r0, [pc, #16]	; (80087dc <sc_indicate.constprop.17+0x68>)
}
 80087ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ce:	f009 bf93 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 80087d2:	bd10      	pop	{r4, pc}
 80087d4:	20000968 	.word	0x20000968
 80087d8:	20000990 	.word	0x20000990
 80087dc:	20001480 	.word	0x20001480

080087e0 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
 80087e0:	6882      	ldr	r2, [r0, #8]
 80087e2:	4b19      	ldr	r3, [pc, #100]	; (8008848 <connected_cb+0x68>)
 80087e4:	429a      	cmp	r2, r3
{
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4607      	mov	r7, r0
 80087ec:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
 80087ee:	d126      	bne.n	800883e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
 80087f0:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
 80087f2:	2600      	movs	r6, #0
 80087f4:	686b      	ldr	r3, [r5, #4]
 80087f6:	429e      	cmp	r6, r3
 80087f8:	d221      	bcs.n	800883e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 80087fa:	6829      	ldr	r1, [r5, #0]
 80087fc:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8008800:	4441      	add	r1, r8
 8008802:	3101      	adds	r1, #1
 8008804:	4620      	mov	r0, r4
 8008806:	f7fe fb29 	bl	8006e5c <bt_conn_addr_le_cmp>
 800880a:	b9d8      	cbnz	r0, 8008844 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	4443      	add	r3, r8
 8008810:	891b      	ldrh	r3, [r3, #8]
 8008812:	b1bb      	cbz	r3, 8008844 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
 8008814:	4629      	mov	r1, r5
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff fe96 	bl	8008548 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
 800881c:	682c      	ldr	r4, [r5, #0]
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <connected_cb+0x6c>)
 8008820:	429c      	cmp	r4, r3
 8008822:	d10c      	bne.n	800883e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
 8008824:	4444      	add	r4, r8
	if (!data->start && !data->end) {
 8008826:	89a0      	ldrh	r0, [r4, #12]
 8008828:	89e1      	ldrh	r1, [r4, #14]
 800882a:	b900      	cbnz	r0, 800882e <connected_cb+0x4e>
 800882c:	b139      	cbz	r1, 800883e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
 800882e:	f7ff ffa1 	bl	8008774 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
 8008832:	2204      	movs	r2, #4
 8008834:	2100      	movs	r1, #0
 8008836:	f104 000c 	add.w	r0, r4, #12
 800883a:	f7f8 f84d 	bl	80008d8 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
 800883e:	2001      	movs	r0, #1
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
 8008844:	3601      	adds	r6, #1
 8008846:	e7d5      	b.n	80087f4 <connected_cb+0x14>
 8008848:	0800858b 	.word	0x0800858b
 800884c:	200009bc 	.word	0x200009bc

08008850 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8008850:	490d      	ldr	r1, [pc, #52]	; (8008888 <sc_indicate_rsp+0x38>)
 8008852:	f3bf 8f5b 	dmb	ish
 8008856:	f101 0350 	add.w	r3, r1, #80	; 0x50
 800885a:	e853 2f00 	ldrex	r2, [r3]
 800885e:	f022 0202 	bic.w	r2, r2, #2
 8008862:	e843 2000 	strex	r0, r2, [r3]
 8008866:	2800      	cmp	r0, #0
 8008868:	d1f7      	bne.n	800885a <sc_indicate_rsp+0xa>
 800886a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800886e:	f3bf 8f5b 	dmb	ish
 8008872:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8008874:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
 8008878:	07db      	lsls	r3, r3, #31
 800887a:	d504      	bpl.n	8008886 <sc_indicate_rsp+0x36>
 800887c:	2200      	movs	r2, #0
 800887e:	3128      	adds	r1, #40	; 0x28
 8008880:	4802      	ldr	r0, [pc, #8]	; (800888c <sc_indicate_rsp+0x3c>)
 8008882:	f009 bf39 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 8008886:	4770      	bx	lr
 8008888:	20000968 	.word	0x20000968
 800888c:	20001480 	.word	0x20001480

08008890 <read_appearance>:
{
 8008890:	b513      	push	{r0, r1, r4, lr}
 8008892:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008896:	4610      	mov	r0, r2
	if (offset > value_len) {
 8008898:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
 80088a2:	d80d      	bhi.n	80088c0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
 80088a4:	f1c1 0402 	rsb	r4, r1, #2
 80088a8:	429c      	cmp	r4, r3
 80088aa:	bfa8      	it	ge
 80088ac:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 80088ae:	f10d 0306 	add.w	r3, sp, #6
 80088b2:	4622      	mov	r2, r4
 80088b4:	4419      	add	r1, r3
 80088b6:	f7f7 ffe3 	bl	8000880 <memcpy>
}
 80088ba:	4620      	mov	r0, r4
 80088bc:	b002      	add	sp, #8
 80088be:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 80088c0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
 80088c4:	e7f9      	b.n	80088ba <read_appearance+0x2a>
	...

080088c8 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
 80088cc:	6882      	ldr	r2, [r0, #8]
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <disconnected_cb+0x98>)
 80088d0:	429a      	cmp	r2, r3
{
 80088d2:	4607      	mov	r7, r0
 80088d4:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
 80088d6:	d129      	bne.n	800892c <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
 80088d8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
 80088da:	8923      	ldrh	r3, [r4, #8]
 80088dc:	b333      	cbz	r3, 800892c <disconnected_cb+0x64>
 80088de:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 80088e0:	f101 0944 	add.w	r9, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	429e      	cmp	r6, r3
 80088e8:	d30b      	bcc.n	8008902 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
 80088ea:	2202      	movs	r2, #2
 80088ec:	2100      	movs	r1, #0
 80088ee:	f104 0008 	add.w	r0, r4, #8
 80088f2:	f7f7 fff1 	bl	80008d8 <memset>
	if (ccc->cfg_changed) {
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	b1c3      	cbz	r3, 800892c <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
 80088fa:	8921      	ldrh	r1, [r4, #8]
 80088fc:	4638      	mov	r0, r7
 80088fe:	4798      	blx	r3
 8008900:	e014      	b.n	800892c <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	0135      	lsls	r5, r6, #4
 8008906:	4429      	add	r1, r5
 8008908:	890b      	ldrh	r3, [r1, #8]
 800890a:	b1a3      	cbz	r3, 8008936 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 800890c:	3101      	adds	r1, #1
 800890e:	4640      	mov	r0, r8
 8008910:	f7fe faa4 	bl	8006e5c <bt_conn_addr_le_cmp>
 8008914:	b188      	cbz	r0, 800893a <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	4428      	add	r0, r5
 800891a:	3001      	adds	r0, #1
 800891c:	f7fe fab6 	bl	8006e8c <bt_conn_lookup_addr_le>
			if (tmp) {
 8008920:	b148      	cbz	r0, 8008936 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
 8008922:	7a43      	ldrb	r3, [r0, #9]
 8008924:	2b03      	cmp	r3, #3
 8008926:	d104      	bne.n	8008932 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
 8008928:	f7fe faf3 	bl	8006f12 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
 800892c:	2001      	movs	r0, #1
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
 8008932:	f7fe faee 	bl	8006f12 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
 8008936:	3601      	adds	r6, #1
 8008938:	e7d4      	b.n	80088e4 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 800893a:	4648      	mov	r0, r9
 800893c:	f7fd fcfc 	bl	8006338 <bt_addr_le_is_bonded>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
 8008944:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
 8008946:	b929      	cbnz	r1, 8008954 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
 8008948:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
 800894a:	2202      	movs	r2, #2
 800894c:	3008      	adds	r0, #8
 800894e:	f7f7 ffc3 	bl	80008d8 <memset>
 8008952:	e7f0      	b.n	8008936 <disconnected_cb+0x6e>
 8008954:	2207      	movs	r2, #7
 8008956:	4649      	mov	r1, r9
 8008958:	3001      	adds	r0, #1
 800895a:	f7f7 ff91 	bl	8000880 <memcpy>
 800895e:	e7ea      	b.n	8008936 <disconnected_cb+0x6e>
 8008960:	0800858b 	.word	0x0800858b

08008964 <read_name>:
{
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
 8008968:	4e0d      	ldr	r6, [pc, #52]	; (80089a0 <read_name+0x3c>)
{
 800896a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
 800896e:	4630      	mov	r0, r6
{
 8008970:	4698      	mov	r8, r3
 8008972:	4617      	mov	r7, r2
				 strlen(gap_name));
 8008974:	f7f7 ff5a 	bl	800082c <strlen>
	if (offset > value_len) {
 8008978:	b283      	uxth	r3, r0
 800897a:	42ab      	cmp	r3, r5
 800897c:	d30d      	bcc.n	800899a <read_name+0x36>
	len = min(buf_len, value_len - offset);
 800897e:	1b5c      	subs	r4, r3, r5
 8008980:	4544      	cmp	r4, r8
 8008982:	4623      	mov	r3, r4
 8008984:	bfa8      	it	ge
 8008986:	4643      	movge	r3, r8
 8008988:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 800898a:	4622      	mov	r2, r4
 800898c:	1971      	adds	r1, r6, r5
 800898e:	4638      	mov	r0, r7
 8008990:	f7f7 ff76 	bl	8000880 <memcpy>
}
 8008994:	4620      	mov	r0, r4
 8008996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 800899a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
 800899e:	e7f9      	b.n	8008994 <read_name+0x30>
 80089a0:	080138ec 	.word	0x080138ec

080089a4 <bt_gatt_attr_read_ccc>:
{
 80089a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
 80089a8:	68ce      	ldr	r6, [r1, #12]
{
 80089aa:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 80089ae:	4604      	mov	r4, r0
 80089b0:	4690      	mov	r8, r2
 80089b2:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
 80089b4:	2500      	movs	r5, #0
 80089b6:	6873      	ldr	r3, [r6, #4]
 80089b8:	429d      	cmp	r5, r3
 80089ba:	d20f      	bcs.n	80089dc <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
 80089bc:	6831      	ldr	r1, [r6, #0]
 80089be:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 80089c2:	4451      	add	r1, sl
 80089c4:	3101      	adds	r1, #1
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7fe fa48 	bl	8006e5c <bt_conn_addr_le_cmp>
 80089cc:	b108      	cbz	r0, 80089d2 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
 80089ce:	3501      	adds	r5, #1
 80089d0:	e7f1      	b.n	80089b6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
 80089d2:	6832      	ldr	r2, [r6, #0]
 80089d4:	4452      	add	r2, sl
 80089d6:	8913      	ldrh	r3, [r2, #8]
 80089d8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
 80089dc:	6873      	ldr	r3, [r6, #4]
 80089de:	429d      	cmp	r5, r3
		value = 0x0000;
 80089e0:	bf04      	itt	eq
 80089e2:	2300      	moveq	r3, #0
 80089e4:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
 80089e8:	2f02      	cmp	r7, #2
 80089ea:	d80f      	bhi.n	8008a0c <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
 80089ec:	f1c7 0402 	rsb	r4, r7, #2
 80089f0:	454c      	cmp	r4, r9
 80089f2:	bfa8      	it	ge
 80089f4:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
 80089f6:	f10d 0306 	add.w	r3, sp, #6
 80089fa:	4622      	mov	r2, r4
 80089fc:	19d9      	adds	r1, r3, r7
 80089fe:	4640      	mov	r0, r8
 8008a00:	f7f7 ff3e 	bl	8000880 <memcpy>
}
 8008a04:	4620      	mov	r0, r4
 8008a06:	b002      	add	sp, #8
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008a0c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
 8008a10:	e7f8      	b.n	8008a04 <bt_gatt_attr_read_ccc+0x60>

08008a12 <bt_gatt_attr_read_service>:
{
 8008a12:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
 8008a14:	68c9      	ldr	r1, [r1, #12]
{
 8008a16:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8008a1a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
 8008a1c:	780a      	ldrb	r2, [r1, #0]
 8008a1e:	b992      	cbnz	r2, 8008a46 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
 8008a20:	884a      	ldrh	r2, [r1, #2]
 8008a22:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
 8008a26:	2d02      	cmp	r5, #2
 8008a28:	d819      	bhi.n	8008a5e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
 8008a2a:	f1c5 0402 	rsb	r4, r5, #2
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	bfa8      	it	ge
 8008a32:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 8008a34:	f10d 0306 	add.w	r3, sp, #6
 8008a38:	4622      	mov	r2, r4
 8008a3a:	1959      	adds	r1, r3, r5
 8008a3c:	f7f7 ff20 	bl	8000880 <memcpy>
}
 8008a40:	4620      	mov	r0, r4
 8008a42:	b003      	add	sp, #12
 8008a44:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
 8008a46:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
 8008a48:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
 8008a4c:	d807      	bhi.n	8008a5e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
 8008a4e:	f1c5 0410 	rsb	r4, r5, #16
 8008a52:	429c      	cmp	r4, r3
 8008a54:	bfa8      	it	ge
 8008a56:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
 8008a58:	4622      	mov	r2, r4
 8008a5a:	4429      	add	r1, r5
 8008a5c:	e7ee      	b.n	8008a3c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008a5e:	f06f 0406 	mvn.w	r4, #6
 8008a62:	e7ed      	b.n	8008a40 <bt_gatt_attr_read_service+0x2e>

08008a64 <notify_cb>:
{
 8008a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
 8008a68:	f642 1302 	movw	r3, #10498	; 0x2902
{
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
 8008a70:	2400      	movs	r4, #0
 8008a72:	4669      	mov	r1, sp
 8008a74:	6800      	ldr	r0, [r0, #0]
 8008a76:	f88d 4000 	strb.w	r4, [sp]
 8008a7a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008a7e:	f7fc f973 	bl	8004d68 <bt_uuid_cmp>
 8008a82:	b178      	cbz	r0, 8008aa4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
 8008a84:	f642 0303 	movw	r3, #10243	; 0x2803
 8008a88:	6828      	ldr	r0, [r5, #0]
 8008a8a:	f88d 4004 	strb.w	r4, [sp, #4]
 8008a8e:	a901      	add	r1, sp, #4
 8008a90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008a94:	f7fc f968 	bl	8004d68 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
 8008a98:	1b00      	subs	r0, r0, r4
 8008a9a:	bf18      	it	ne
 8008a9c:	2001      	movne	r0, #1
}
 8008a9e:	b003      	add	sp, #12
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
 8008aa4:	68aa      	ldr	r2, [r5, #8]
 8008aa6:	4b2c      	ldr	r3, [pc, #176]	; (8008b58 <notify_cb+0xf4>)
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
 8008aac:	2001      	movs	r0, #1
 8008aae:	e7f6      	b.n	8008a9e <notify_cb+0x3a>
	ccc = attr->user_data;
 8008ab0:	68ef      	ldr	r7, [r5, #12]
 8008ab2:	4d2a      	ldr	r5, [pc, #168]	; (8008b5c <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	46a8      	mov	r8, r5
 8008ab8:	4681      	mov	r9, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	429c      	cmp	r4, r3
 8008abe:	d2f5      	bcs.n	8008aac <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
 8008ac0:	6838      	ldr	r0, [r7, #0]
 8008ac2:	88b3      	ldrh	r3, [r6, #4]
 8008ac4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8008ac8:	8902      	ldrh	r2, [r0, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d115      	bne.n	8008afa <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f7fe f9dc 	bl	8006e8c <bt_conn_lookup_addr_le>
		if (!conn) {
 8008ad4:	4683      	mov	fp, r0
 8008ad6:	b9f8      	cbnz	r0, 8008b18 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	4543      	cmp	r3, r8
 8008adc:	d10d      	bne.n	8008afa <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
 8008ade:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
 8008ae0:	a801      	add	r0, sp, #4
 8008ae2:	8c1a      	ldrh	r2, [r3, #32]
 8008ae4:	69d9      	ldr	r1, [r3, #28]
 8008ae6:	f7f7 fecb 	bl	8000880 <memcpy>
	if (!stored->start && !stored->end) {
 8008aea:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
 8008aec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008af0:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
 8008af2:	b928      	cbnz	r0, 8008b00 <notify_cb+0x9c>
 8008af4:	b942      	cbnz	r2, 8008b08 <notify_cb+0xa4>
		*stored = data;
 8008af6:	9801      	ldr	r0, [sp, #4]
 8008af8:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
 8008afa:	3401      	adds	r4, #1
 8008afc:	3510      	adds	r5, #16
 8008afe:	e7dc      	b.n	8008aba <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
 8008b00:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
 8008b04:	4281      	cmp	r1, r0
 8008b06:	d305      	bcc.n	8008b14 <notify_cb+0xb0>
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d2f6      	bcs.n	8008afa <notify_cb+0x96>
	if (*end < new_end) {
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d2f4      	bcs.n	8008afa <notify_cb+0x96>
		*end = new_end;
 8008b10:	81eb      	strh	r3, [r5, #14]
 8008b12:	e7f2      	b.n	8008afa <notify_cb+0x96>
		*start = new_start;
 8008b14:	81a9      	strh	r1, [r5, #12]
 8008b16:	e7f9      	b.n	8008b0c <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
 8008b18:	7a43      	ldrb	r3, [r0, #9]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d002      	beq.n	8008b24 <notify_cb+0xc0>
			bt_conn_unref(conn);
 8008b1e:	f7fe f9f8 	bl	8006f12 <bt_conn_unref>
 8008b22:	e7ea      	b.n	8008afa <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
 8008b24:	88b3      	ldrh	r3, [r6, #4]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d10c      	bne.n	8008b44 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
 8008b2a:	6971      	ldr	r1, [r6, #20]
 8008b2c:	f7ff fdb6 	bl	800869c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
 8008b30:	4682      	mov	sl, r0
		bt_conn_unref(conn);
 8008b32:	4658      	mov	r0, fp
 8008b34:	f7fe f9ed 	bl	8006f12 <bt_conn_unref>
		if (err < 0) {
 8008b38:	f1ba 0f00 	cmp.w	sl, #0
 8008b3c:	db09      	blt.n	8008b52 <notify_cb+0xee>
		data->err = 0;
 8008b3e:	f8c6 9000 	str.w	r9, [r6]
 8008b42:	e7da      	b.n	8008afa <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
 8008b44:	68b1      	ldr	r1, [r6, #8]
 8008b46:	8a33      	ldrh	r3, [r6, #16]
 8008b48:	68f2      	ldr	r2, [r6, #12]
 8008b4a:	8a09      	ldrh	r1, [r1, #16]
 8008b4c:	f7ff fd7b 	bl	8008646 <gatt_notify>
 8008b50:	e7ee      	b.n	8008b30 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
 8008b52:	2000      	movs	r0, #0
 8008b54:	e7a3      	b.n	8008a9e <notify_cb+0x3a>
 8008b56:	bf00      	nop
 8008b58:	0800858b 	.word	0x0800858b
 8008b5c:	200009bc 	.word	0x200009bc

08008b60 <bt_gatt_init>:
{
 8008b60:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
 8008b62:	4806      	ldr	r0, [pc, #24]	; (8008b7c <bt_gatt_init+0x1c>)
 8008b64:	f7ff fdd0 	bl	8008708 <gatt_register>
	gatt_register(&gatt_svc);
 8008b68:	4805      	ldr	r0, [pc, #20]	; (8008b80 <bt_gatt_init+0x20>)
 8008b6a:	f7ff fdcd 	bl	8008708 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
 8008b6e:	4905      	ldr	r1, [pc, #20]	; (8008b84 <bt_gatt_init+0x24>)
 8008b70:	4805      	ldr	r0, [pc, #20]	; (8008b88 <bt_gatt_init+0x28>)
}
 8008b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
 8008b76:	f009 bd55 	b.w	8012624 <k_delayed_work_init>
 8008b7a:	bf00      	nop
 8008b7c:	20005b44 	.word	0x20005b44
 8008b80:	20005ba0 	.word	0x20005ba0
 8008b84:	08008cf9 	.word	0x08008cf9
 8008b88:	20000990 	.word	0x20000990

08008b8c <bt_gatt_service_register>:
{
 8008b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008b8e:	6803      	ldr	r3, [r0, #0]
{
 8008b90:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008b92:	2500      	movs	r5, #0
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f88d 5000 	strb.w	r5, [sp]
 8008b9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b9e:	4669      	mov	r1, sp
 8008ba0:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008ba4:	f7fc f8e0 	bl	8004d68 <bt_uuid_cmp>
 8008ba8:	b918      	cbnz	r0, 8008bb2 <bt_gatt_service_register+0x26>
		return -EALREADY;
 8008baa:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8008bae:	b003      	add	sp, #12
 8008bb0:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	a901      	add	r1, sp, #4
 8008bb6:	6818      	ldr	r0, [r3, #0]
 8008bb8:	f88d 5004 	strb.w	r5, [sp, #4]
 8008bbc:	f641 0301 	movw	r3, #6145	; 0x1801
 8008bc0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008bc4:	f7fc f8d0 	bl	8004d68 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d0ee      	beq.n	8008baa <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7ff fd9b 	bl	8008708 <gatt_register>
	if (err < 0) {
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	dbeb      	blt.n	8008bae <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008bd6:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
 8008bd8:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008bda:	8a10      	ldrh	r0, [r2, #16]
 8008bdc:	2114      	movs	r1, #20
 8008bde:	fb01 2303 	mla	r3, r1, r3, r2
 8008be2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8008be6:	f7ff fdc5 	bl	8008774 <sc_indicate.constprop.17>
	return 0;
 8008bea:	4628      	mov	r0, r5
 8008bec:	e7df      	b.n	8008bae <bt_gatt_service_register+0x22>
	...

08008bf0 <bt_gatt_service_unregister>:
{
 8008bf0:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <bt_gatt_service_unregister+0x54>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	b510      	push	{r4, lr}
	sys_snode_t *prev = NULL;
 8008bf6:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
 8008bf8:	f100 0408 	add.w	r4, r0, #8
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8008bfc:	b912      	cbnz	r2, 8008c04 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
 8008bfe:	f06f 0001 	mvn.w	r0, #1
}
 8008c02:	bd10      	pop	{r4, pc}
		if (test == node) {
 8008c04:	4294      	cmp	r4, r2
 8008c06:	d11a      	bne.n	8008c3e <bt_gatt_service_unregister+0x4e>
 8008c08:	6882      	ldr	r2, [r0, #8]
	if (!prev_node) {
 8008c0a:	b991      	cbnz	r1, 8008c32 <bt_gatt_service_unregister+0x42>
		if (list->tail == node) {
 8008c0c:	6859      	ldr	r1, [r3, #4]
		list->head = node->next;
 8008c0e:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
 8008c10:	428c      	cmp	r4, r1
 8008c12:	d100      	bne.n	8008c16 <bt_gatt_service_unregister+0x26>
			list->tail = list->head;
 8008c14:	605a      	str	r2, [r3, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008c16:	6802      	ldr	r2, [r0, #0]
		    svc->attrs[svc->attr_count - 1].handle);
 8008c18:	8883      	ldrh	r3, [r0, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
 8008c1a:	2114      	movs	r1, #20
 8008c1c:	fb01 2303 	mla	r3, r1, r3, r2
	node->next = NULL;
 8008c20:	2400      	movs	r4, #0
 8008c22:	6084      	str	r4, [r0, #8]
 8008c24:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8008c28:	8a10      	ldrh	r0, [r2, #16]
 8008c2a:	f7ff fda3 	bl	8008774 <sc_indicate.constprop.17>
	return 0;
 8008c2e:	4620      	mov	r0, r4
 8008c30:	bd10      	pop	{r4, pc}
		prev_node->next = node->next;
 8008c32:	600a      	str	r2, [r1, #0]
		if (list->tail == node) {
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	4294      	cmp	r4, r2
			list->tail = prev_node;
 8008c38:	bf08      	it	eq
 8008c3a:	6059      	streq	r1, [r3, #4]
 8008c3c:	e7eb      	b.n	8008c16 <bt_gatt_service_unregister+0x26>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8008c3e:	4611      	mov	r1, r2
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	e7db      	b.n	8008bfc <bt_gatt_service_unregister+0xc>
 8008c44:	20000960 	.word	0x20000960

08008c48 <bt_gatt_attr_read>:
{
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8008c50:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
 8008c54:	4291      	cmp	r1, r2
 8008c56:	d80b      	bhi.n	8008c70 <bt_gatt_attr_read+0x28>
	len = min(buf_len, value_len - offset);
 8008c58:	1a54      	subs	r4, r2, r1
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	bfa8      	it	ge
 8008c5e:	4623      	movge	r3, r4
 8008c60:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	4622      	mov	r2, r4
 8008c66:	4419      	add	r1, r3
 8008c68:	f7f7 fe0a 	bl	8000880 <memcpy>
}
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008c70:	f06f 0406 	mvn.w	r4, #6
 8008c74:	e7fa      	b.n	8008c6c <bt_gatt_attr_read+0x24>
	...

08008c78 <bt_gatt_foreach_attr>:
{
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	4699      	mov	r9, r3
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <bt_gatt_foreach_attr+0x50>)
 8008c80:	681c      	ldr	r4, [r3, #0]
 8008c82:	4606      	mov	r6, r0
 8008c84:	460f      	mov	r7, r1
 8008c86:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008c88:	b1dc      	cbz	r4, 8008cc2 <bt_gatt_foreach_attr+0x4a>
 8008c8a:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
 8008c8c:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008c90:	b1bc      	cbz	r4, 8008cc2 <bt_gatt_foreach_attr+0x4a>
 8008c92:	2500      	movs	r5, #0
 8008c94:	e006      	b.n	8008ca4 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
 8008c96:	6820      	ldr	r0, [r4, #0]
 8008c98:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
 8008c9c:	8a03      	ldrh	r3, [r0, #16]
 8008c9e:	42b3      	cmp	r3, r6
 8008ca0:	d207      	bcs.n	8008cb2 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
 8008ca2:	3501      	adds	r5, #1
 8008ca4:	88a3      	ldrh	r3, [r4, #4]
 8008ca6:	429d      	cmp	r5, r3
 8008ca8:	dbf5      	blt.n	8008c96 <bt_gatt_foreach_attr+0x1e>
	return node->next;
 8008caa:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
 8008cac:	b14c      	cbz	r4, 8008cc2 <bt_gatt_foreach_attr+0x4a>
 8008cae:	3c08      	subs	r4, #8
 8008cb0:	e7ee      	b.n	8008c90 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
 8008cb2:	42bb      	cmp	r3, r7
 8008cb4:	d8f5      	bhi.n	8008ca2 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	47c0      	blx	r8
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d1f1      	bne.n	8008ca2 <bt_gatt_foreach_attr+0x2a>
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000960 	.word	0x20000960

08008ccc <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
 8008ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
 8008cce:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
 8008cd2:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
 8008cd4:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
 8008cd6:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
 8008cde:	4a05      	ldr	r2, [pc, #20]	; (8008cf4 <bt_gatt_indicate.part.8+0x28>)
 8008ce0:	8a00      	ldrh	r0, [r0, #16]
 8008ce2:	466b      	mov	r3, sp
 8008ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ce8:	f7ff ffc6 	bl	8008c78 <bt_gatt_foreach_attr>
}
 8008cec:	9800      	ldr	r0, [sp, #0]
 8008cee:	b007      	add	sp, #28
 8008cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cf4:	08008a65 	.word	0x08008a65

08008cf8 <sc_process>:
{
 8008cf8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
 8008cfa:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 8008cfe:	f8ad 2004 	strh.w	r2, [sp, #4]
{
 8008d02:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
 8008d04:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8008d08:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
 8008d0c:	3828      	subs	r0, #40	; 0x28
 8008d0e:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 8008d12:	f3bf 8f5b 	dmb	ish
 8008d16:	e854 2f00 	ldrex	r2, [r4]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	e844 2100 	strex	r1, r2, [r4]
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d1f7      	bne.n	8008d16 <sc_process+0x1e>
 8008d26:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
 8008d30:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
 8008d34:	4a0e      	ldr	r2, [pc, #56]	; (8008d70 <sc_process+0x78>)
 8008d36:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
 8008d3a:	4a0e      	ldr	r2, [pc, #56]	; (8008d74 <sc_process+0x7c>)
 8008d3c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
 8008d40:	aa01      	add	r2, sp, #4
 8008d42:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
 8008d46:	2204      	movs	r2, #4
 8008d48:	f823 2c08 	strh.w	r2, [r3, #-8]
 8008d4c:	f7ff ffbe 	bl	8008ccc <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
 8008d50:	b958      	cbnz	r0, 8008d6a <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8008d52:	f3bf 8f5b 	dmb	ish
 8008d56:	e854 3f00 	ldrex	r3, [r4]
 8008d5a:	f043 0302 	orr.w	r3, r3, #2
 8008d5e:	e844 3200 	strex	r2, r3, [r4]
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	d1f7      	bne.n	8008d56 <sc_process+0x5e>
 8008d66:	f3bf 8f5b 	dmb	ish
}
 8008d6a:	b002      	add	sp, #8
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	bf00      	nop
 8008d70:	20005b78 	.word	0x20005b78
 8008d74:	08008851 	.word	0x08008851

08008d78 <bt_gatt_attr_next>:
{
 8008d78:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008d7a:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
 8008d7c:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008d7e:	3101      	adds	r1, #1
 8008d80:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
 8008d82:	2200      	movs	r2, #0
 8008d84:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4a03      	ldr	r2, [pc, #12]	; (8008d98 <bt_gatt_attr_next+0x20>)
 8008d8c:	f7ff ff74 	bl	8008c78 <bt_gatt_foreach_attr>
}
 8008d90:	9801      	ldr	r0, [sp, #4]
 8008d92:	b003      	add	sp, #12
 8008d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d98:	08008543 	.word	0x08008543

08008d9c <bt_gatt_attr_read_chrc>:
{
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
 8008d9e:	68cf      	ldr	r7, [r1, #12]
{
 8008da0:	b087      	sub	sp, #28
 8008da2:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
 8008da4:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
 8008da6:	793b      	ldrb	r3, [r7, #4]
{
 8008da8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
 8008dac:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8008db0:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
 8008db2:	f7ff ffe1 	bl	8008d78 <bt_gatt_attr_next>
	if (!next) {
 8008db6:	b9d0      	cbnz	r0, 8008dee <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
 8008db8:	f88d 0005 	strb.w	r0, [sp, #5]
 8008dbc:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	780b      	ldrb	r3, [r1, #0]
 8008dc4:	b9bb      	cbnz	r3, 8008df6 <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
 8008dc6:	884b      	ldrh	r3, [r1, #2]
 8008dc8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
 8008dcc:	2305      	movs	r3, #5
	if (offset > value_len) {
 8008dce:	42ab      	cmp	r3, r5
 8008dd0:	d319      	bcc.n	8008e06 <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
 8008dd2:	1b5b      	subs	r3, r3, r5
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	bfa8      	it	ge
 8008dd8:	4623      	movge	r3, r4
 8008dda:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
 8008ddc:	ab01      	add	r3, sp, #4
 8008dde:	4622      	mov	r2, r4
 8008de0:	1959      	adds	r1, r3, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7f7 fd4c 	bl	8000880 <memcpy>
}
 8008de8:	4620      	mov	r0, r4
 8008dea:	b007      	add	sp, #28
 8008dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
 8008dee:	8a03      	ldrh	r3, [r0, #16]
 8008df0:	f8ad 3005 	strh.w	r3, [sp, #5]
 8008df4:	e7e4      	b.n	8008dc0 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
 8008df6:	2210      	movs	r2, #16
 8008df8:	3101      	adds	r1, #1
 8008dfa:	f10d 0007 	add.w	r0, sp, #7
 8008dfe:	f7f7 fd3f 	bl	8000880 <memcpy>
		value_len += 16;
 8008e02:	2313      	movs	r3, #19
 8008e04:	e7e3      	b.n	8008dce <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
 8008e06:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
 8008e0a:	e7ed      	b.n	8008de8 <bt_gatt_attr_read_chrc+0x4c>

08008e0c <bt_gatt_notify>:
{
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	461d      	mov	r5, r3
 8008e10:	b086      	sub	sp, #24
 8008e12:	8a0c      	ldrh	r4, [r1, #16]
	if (conn) {
 8008e14:	b120      	cbz	r0, 8008e20 <bt_gatt_notify+0x14>
		return gatt_notify(conn, attr->handle, data, len);
 8008e16:	4621      	mov	r1, r4
 8008e18:	f7ff fc15 	bl	8008646 <gatt_notify>
}
 8008e1c:	b006      	add	sp, #24
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
	nfy.err = -ENOTCONN;
 8008e20:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8008e24:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_NOTIFY;
 8008e26:	2301      	movs	r3, #1
	nfy.attr = attr;
 8008e28:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
 8008e2a:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.data = data;
 8008e2e:	9203      	str	r2, [sp, #12]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
 8008e30:	4620      	mov	r0, r4
 8008e32:	466b      	mov	r3, sp
 8008e34:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <bt_gatt_notify+0x3c>)
	nfy.len = len;
 8008e36:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
 8008e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e3e:	f7ff ff1b 	bl	8008c78 <bt_gatt_foreach_attr>
	return nfy.err;
 8008e42:	9800      	ldr	r0, [sp, #0]
 8008e44:	e7ea      	b.n	8008e1c <bt_gatt_notify+0x10>
 8008e46:	bf00      	nop
 8008e48:	08008a65 	.word	0x08008a65

08008e4c <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
 8008e4c:	f7ff bb4c 	b.w	80084e8 <bt_att_get_mtu>

08008e50 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
 8008e50:	4603      	mov	r3, r0
 8008e52:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <bt_gatt_connected+0x10>)
 8008e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f7ff bf0d 	b.w	8008c78 <bt_gatt_foreach_attr>
 8008e5e:	bf00      	nop
 8008e60:	080087e1 	.word	0x080087e1

08008e64 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
 8008e64:	4603      	mov	r3, r0
 8008e66:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <bt_gatt_disconnected+0x10>)
 8008e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	f7ff bf03 	b.w	8008c78 <bt_gatt_foreach_attr>
 8008e72:	bf00      	nop
 8008e74:	080088c9 	.word	0x080088c9

08008e78 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
 8008e78:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <bt_smp_accept+0x14>)
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	b918      	cbnz	r0, 8008e86 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
 8008e7e:	4a04      	ldr	r2, [pc, #16]	; (8008e90 <bt_smp_accept+0x18>)
 8008e80:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
 8008e82:	600b      	str	r3, [r1, #0]

		return 0;
 8008e84:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
 8008e86:	f06f 000b 	mvn.w	r0, #11
}
 8008e8a:	4770      	bx	lr
 8008e8c:	200009cc 	.word	0x200009cc
 8008e90:	20005bb8 	.word	0x20005bb8

08008e94 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008e94:	2100      	movs	r1, #0
{
 8008e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
 8008e9a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	f7fe fa80 	bl	80073a2 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
 8008ea2:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
 8008ea6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f008 fc2e 	bl	801170c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
 8008eb0:	2505      	movs	r5, #5
 8008eb2:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f008 fc28 	bl	801170c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
 8008ebc:	7005      	strb	r5, [r0, #0]
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2106      	movs	r1, #6
}
 8008ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	f7fe ba6d 	b.w	80073a8 <bt_l2cap_send_cb>

08008ece <bt_smp_sign_verify>:
 8008ece:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8008ed2:	4770      	bx	lr

08008ed4 <bt_smp_init>:

int bt_smp_init(void)
{
 8008ed4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
 8008ed6:	4802      	ldr	r0, [pc, #8]	; (8008ee0 <bt_smp_init+0xc>)
 8008ed8:	f7fe f9c0 	bl	800725c <bt_l2cap_le_fixed_chan_register>

	return 0;
}
 8008edc:	2000      	movs	r0, #0
 8008ede:	bd08      	pop	{r3, pc}
 8008ee0:	20005bac 	.word	0x20005bac

08008ee4 <bt_mesh_provision>:
static bool provisioned;

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u32_t seq,
		      u16_t addr, const u8_t dev_key[16])
{
 8008ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee8:	4605      	mov	r5, r0
 8008eea:	460e      	mov	r6, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	4698      	mov	r8, r3
 8008ef0:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	BT_INFO("Primary Element: 0x%04x", addr);
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
	       net_idx, flags, iv_index);

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable();
 8008ef4:	f008 f944 	bl	8011180 <bt_mesh_proxy_prov_disable>
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4643      	mov	r3, r8
 8008efc:	4621      	mov	r1, r4
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 fe36 	bl	8009b70 <bt_mesh_net_create>
	if (err) {
 8008f04:	4605      	mov	r5, r0
 8008f06:	b120      	cbz	r0, 8008f12 <bt_mesh_provision+0x2e>
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
			bt_mesh_proxy_prov_enable();
 8008f08:	f008 f922 	bl	8011150 <bt_mesh_proxy_prov_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_complete(net_idx, addr);
	}

	return 0;
}
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_mesh.seq = seq;
 8008f12:	4c16      	ldr	r4, [pc, #88]	; (8008f6c <bt_mesh_provision+0x88>)
 8008f14:	9a06      	ldr	r2, [sp, #24]
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	f362 0317 	bfi	r3, r2, #0, #24
 8008f1c:	6063      	str	r3, [r4, #4]
	bt_mesh_comp_provision(addr);
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f003 f9d8 	bl	800c2d4 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
 8008f24:	2210      	movs	r2, #16
 8008f26:	9908      	ldr	r1, [sp, #32]
 8008f28:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8008f2c:	f7f7 fca8 	bl	8000880 <memcpy>
	provisioned = true;
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <bt_mesh_provision+0x8c>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	701a      	strb	r2, [r3, #0]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
 8008f36:	f005 fabd 	bl	800e4b4 <bt_mesh_beacon_get>
 8008f3a:	2801      	cmp	r0, #1
 8008f3c:	d112      	bne.n	8008f64 <bt_mesh_provision+0x80>
		bt_mesh_beacon_enable();
 8008f3e:	f000 fb93 	bl	8009668 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
 8008f42:	f005 fb11 	bl	800e568 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 8008f46:	2802      	cmp	r0, #2
 8008f48:	d003      	beq.n	8008f52 <bt_mesh_provision+0x6e>
		bt_mesh_proxy_gatt_enable();
 8008f4a:	f008 f931 	bl	80111b0 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
 8008f4e:	f000 f95d 	bl	800920c <bt_mesh_adv_update>
		bt_mesh_scan_enable();
 8008f52:	f000 f9c9 	bl	80092e8 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
 8008f56:	f006 fcb3 	bl	800f8c0 <bt_mesh_friend_init>
		bt_mesh_prov_complete(net_idx, addr);
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f007 fdf1 	bl	8010b44 <bt_mesh_prov_complete>
	return 0;
 8008f62:	e7d3      	b.n	8008f0c <bt_mesh_provision+0x28>
		bt_mesh_beacon_disable();
 8008f64:	f000 fbaa 	bl	80096bc <bt_mesh_beacon_disable>
 8008f68:	e7eb      	b.n	8008f42 <bt_mesh_provision+0x5e>
 8008f6a:	bf00      	nop
 8008f6c:	20005bd0 	.word	0x20005bd0
 8008f70:	20000a60 	.word	0x20000a60

08008f74 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
 8008f74:	b570      	push	{r4, r5, r6, lr}
	if (!provisioned) {
 8008f76:	4e1e      	ldr	r6, [pc, #120]	; (8008ff0 <bt_mesh_reset+0x7c>)
 8008f78:	7833      	ldrb	r3, [r6, #0]
 8008f7a:	b3bb      	cbz	r3, 8008fec <bt_mesh_reset+0x78>
		return;
	}

	bt_mesh_comp_unprovision();

	bt_mesh.iv_index = 0;
 8008f7c:	4c1d      	ldr	r4, [pc, #116]	; (8008ff4 <bt_mesh_reset+0x80>)
	bt_mesh_comp_unprovision();
 8008f7e:	f003 f9bf 	bl	800c300 <bt_mesh_comp_unprovision>
	bt_mesh.seq = 0;
 8008f82:	6863      	ldr	r3, [r4, #4]
	bt_mesh.iv_index = 0;
 8008f84:	2500      	movs	r5, #0
	bt_mesh.seq = 0;
 8008f86:	f365 0317 	bfi	r3, r5, #0, #24
 8008f8a:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = 0;
 8008f8c:	0e1b      	lsrs	r3, r3, #24
	bt_mesh.pending_update = 0;
	bt_mesh.valid = 0;
	bt_mesh.last_update = 0;
	bt_mesh.ivu_initiator = 0;
 8008f8e:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8008f92:	f365 0341 	bfi	r3, r5, #1, #1
	bt_mesh.last_update = 0;
 8008f96:	2100      	movs	r1, #0
 8008f98:	2000      	movs	r0, #0
	bt_mesh.ivu_initiator = 0;
 8008f9a:	71e3      	strb	r3, [r4, #7]
	bt_mesh.last_update = 0;
 8008f9c:	e9c4 0102 	strd	r0, r1, [r4, #8]

	k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8008fa0:	f504 7096 	add.w	r0, r4, #300	; 0x12c
	bt_mesh.iv_index = 0;
 8008fa4:	6025      	str	r5, [r4, #0]
	k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8008fa6:	f009 fb5b 	bl	8012660 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
 8008faa:	f005 f967 	bl	800e27c <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
 8008fae:	f002 fb09 	bl	800b5c4 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
 8008fb2:	f002 fb13 	bl	800b5dc <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
 8008fb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008fba:	f006 fa15 	bl	800f3e8 <bt_mesh_friend_clear_net_idx>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
 8008fbe:	f008 f91b 	bl	80111f8 <bt_mesh_proxy_gatt_disable>
	}

	memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 8008fca:	f7f7 fc85 	bl	80008d8 <memset>

	memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
 8008fce:	4629      	mov	r1, r5
 8008fd0:	2250      	movs	r2, #80	; 0x50
 8008fd2:	f504 705f 	add.w	r0, r4, #892	; 0x37c
 8008fd6:	f7f7 fc7f 	bl	80008d8 <memset>

	provisioned = false;
 8008fda:	7035      	strb	r5, [r6, #0]

	bt_mesh_scan_disable();
 8008fdc:	f000 f996 	bl	800930c <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
 8008fe0:	f000 fb6c 	bl	80096bc <bt_mesh_beacon_disable>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
 8008fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_reset();
 8008fe8:	f007 bdb4 	b.w	8010b54 <bt_mesh_prov_reset>
 8008fec:	bd70      	pop	{r4, r5, r6, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000a60 	.word	0x20000a60
 8008ff4:	20005bd0 	.word	0x20005bd0

08008ff8 <bt_mesh_is_provisioned>:

bool bt_mesh_is_provisioned(void)
{
	return provisioned;
}
 8008ff8:	4b01      	ldr	r3, [pc, #4]	; (8009000 <bt_mesh_is_provisioned+0x8>)
 8008ffa:	7818      	ldrb	r0, [r3, #0]
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	20000a60 	.word	0x20000a60

08009004 <bt_mesh_prov_enable>:
	return provisioned;
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <bt_mesh_prov_enable+0x30>)

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
	if (bt_mesh_is_provisioned()) {
 8009006:	781b      	ldrb	r3, [r3, #0]
{
 8009008:	b510      	push	{r4, lr}
 800900a:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
 800900c:	b973      	cbnz	r3, 800902c <bt_mesh_prov_enable+0x28>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
 800900e:	07c3      	lsls	r3, r0, #31
 8009010:	d503      	bpl.n	800901a <bt_mesh_prov_enable+0x16>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
 8009012:	f000 f969 	bl	80092e8 <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
 8009016:	f000 fb27 	bl	8009668 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
 800901a:	f014 0002 	ands.w	r0, r4, #2
 800901e:	d007      	beq.n	8009030 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
 8009020:	f008 f896 	bl	8011150 <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
 8009024:	f000 f8f2 	bl	800920c <bt_mesh_adv_update>
	}

	return 0;
 8009028:	2000      	movs	r0, #0
 800902a:	bd10      	pop	{r4, pc}
		return -EALREADY;
 800902c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	20000a60 	.word	0x20000a60

08009038 <bt_mesh_init>:
	return 0;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
 800903c:	4608      	mov	r0, r1
 800903e:	f003 f937 	bl	800c2b0 <bt_mesh_comp_register>
	if (err) {
 8009042:	4604      	mov	r4, r0
 8009044:	b970      	cbnz	r0, 8009064 <bt_mesh_init+0x2c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
 8009046:	4628      	mov	r0, r5
 8009048:	f007 fd58 	bl	8010afc <bt_mesh_prov_init>
		if (err) {
 800904c:	4604      	mov	r4, r0
 800904e:	b948      	cbnz	r0, 8009064 <bt_mesh_init+0x2c>
			return err;
		}
	}

	bt_mesh_net_init();
 8009050:	f001 fb16 	bl	800a680 <bt_mesh_net_init>
	bt_mesh_trans_init();
 8009054:	f002 fac8 	bl	800b5e8 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
 8009058:	f000 faf2 	bl	8009640 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
 800905c:	f000 f92a 	bl	80092b4 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
 8009060:	f008 fa50 	bl	8011504 <bt_mesh_proxy_init>
	}

	return 0;
}
 8009064:	4620      	mov	r0, r4
 8009066:	bd38      	pop	{r3, r4, r5, pc}

08009068 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
 8009068:	4b02      	ldr	r3, [pc, #8]	; (8009074 <adv_alloc+0xc>)
 800906a:	220c      	movs	r2, #12
 800906c:	fb02 3000 	mla	r0, r2, r0, r3
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20000a64 	.word	0x20000a64

08009078 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, s8_t rssi,
			    u8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
 8009078:	2a03      	cmp	r2, #3
{
 800907a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907e:	4688      	mov	r8, r1
 8009080:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
 8009082:	d104      	bne.n	800908e <bt_mesh_scan_cb+0x16>
 8009084:	f103 0908 	add.w	r9, r3, #8
		return;
	}

	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	while (buf->len > 1) {
 8009088:	88a3      	ldrh	r3, [r4, #4]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d801      	bhi.n	8009092 <bt_mesh_scan_cb+0x1a>
 800908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct net_buf_simple_state state;
		u8_t len, type;

		len = net_buf_simple_pull_u8(buf);
 8009092:	4620      	mov	r0, r4
 8009094:	f008 fbad 	bl	80117f2 <net_buf_simple_pull_u8>
		/* Check for early termination */
		if (len == 0) {
 8009098:	4606      	mov	r6, r0
 800909a:	2800      	cmp	r0, #0
 800909c:	d0f7      	beq.n	800908e <bt_mesh_scan_cb+0x16>
			return;
		}

		if (len > buf->len || buf->len < 1) {
 800909e:	88a3      	ldrh	r3, [r4, #4]
 80090a0:	b285      	uxth	r5, r0
 80090a2:	429d      	cmp	r5, r3
 80090a4:	d8f3      	bhi.n	800908e <bt_mesh_scan_cb+0x16>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0f1      	beq.n	800908e <bt_mesh_scan_cb+0x16>
	state->offset = net_buf_simple_headroom(buf);
 80090aa:	4620      	mov	r0, r4
 80090ac:	f008 fbce 	bl	801184c <net_buf_simple_headroom>
 80090b0:	4607      	mov	r7, r0
			return;
		}

		net_buf_simple_save(buf, &state);

		type = net_buf_simple_pull_u8(buf);
 80090b2:	4620      	mov	r0, r4
	state->len = buf->len;
 80090b4:	f8b4 a004 	ldrh.w	sl, [r4, #4]
 80090b8:	f008 fb9b 	bl	80117f2 <net_buf_simple_pull_u8>

		buf->len = len - 1;
 80090bc:	3d01      	subs	r5, #1

		switch (type) {
 80090be:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
 80090c0:	80a5      	strh	r5, [r4, #4]
		switch (type) {
 80090c2:	d007      	beq.n	80090d4 <bt_mesh_scan_cb+0x5c>
 80090c4:	282b      	cmp	r0, #43	; 0x2b
 80090c6:	d014      	beq.n	80090f2 <bt_mesh_scan_cb+0x7a>
 80090c8:	2829      	cmp	r0, #41	; 0x29
 80090ca:	d108      	bne.n	80090de <bt_mesh_scan_cb+0x66>
		case BT_DATA_MESH_MESSAGE:
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
			break;
#if defined(CONFIG_BT_MESH_PB_ADV)
		case BT_DATA_MESH_PROV:
			bt_mesh_pb_adv_recv(buf);
 80090cc:	4620      	mov	r0, r4
 80090ce:	f007 fccb 	bl	8010a68 <bt_mesh_pb_adv_recv>
 80090d2:	e004      	b.n	80090de <bt_mesh_scan_cb+0x66>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
 80090d4:	2200      	movs	r2, #0
 80090d6:	4641      	mov	r1, r8
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 f9af 	bl	800a43c <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
 80090de:	fa19 f787 	uxtah	r7, r9, r7
 80090e2:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
 80090e4:	f8a4 a004 	strh.w	sl, [r4, #4]
		default:
			break;
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
 80090e8:	4631      	mov	r1, r6
 80090ea:	4620      	mov	r0, r4
 80090ec:	f008 fb79 	bl	80117e2 <net_buf_simple_pull>
 80090f0:	e7ca      	b.n	8009088 <bt_mesh_scan_cb+0x10>
			bt_mesh_beacon_recv(buf);
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fa0c 	bl	8009510 <bt_mesh_beacon_recv>
 80090f8:	e7f1      	b.n	80090de <bt_mesh_scan_cb+0x66>
	...

080090fc <adv_thread>:
{
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
 8009100:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8009200 <adv_thread+0x104>
	const s32_t adv_int_min = ((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
 8009104:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8009204 <adv_thread+0x108>
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 8009108:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8009208 <adv_thread+0x10c>
{
 800910c:	b089      	sub	sp, #36	; 0x24
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
 800910e:	2100      	movs	r1, #0
 8009110:	4640      	mov	r0, r8
 8009112:	f008 fa65 	bl	80115e0 <net_buf_get>
 8009116:	4605      	mov	r5, r0
			while (!buf) {
 8009118:	2d00      	cmp	r5, #0
 800911a:	d059      	beq.n	80091d0 <adv_thread+0xd4>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800911c:	89eb      	ldrh	r3, [r5, #14]
 800911e:	442b      	add	r3, r5
 8009120:	3313      	adds	r3, #19
 8009122:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
 8009126:	6819      	ldr	r1, [r3, #0]
 8009128:	7a0a      	ldrb	r2, [r1, #8]
 800912a:	0750      	lsls	r0, r2, #29
 800912c:	d562      	bpl.n	80091f4 <adv_thread+0xf8>
			BT_MESH_ADV(buf)->busy = 0;
 800912e:	f36f 0282 	bfc	r2, #2, #1
 8009132:	720a      	strb	r2, [r1, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
 8009134:	681b      	ldr	r3, [r3, #0]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
 8009136:	f899 200e 	ldrb.w	r2, [r9, #14]
 800913a:	2a09      	cmp	r2, #9
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 800913c:	7a5a      	ldrb	r2, [r3, #9]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
 800913e:	e893 00c0 	ldmia.w	r3, {r6, r7}
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 8009142:	f002 021f 	and.w	r2, r2, #31
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 8009146:	7a1b      	ldrb	r3, [r3, #8]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
 8009148:	bf34      	ite	cc
 800914a:	2164      	movcc	r1, #100	; 0x64
 800914c:	2114      	movcs	r1, #20
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 800914e:	428a      	cmp	r2, r1
 8009150:	bfb8      	it	lt
 8009152:	b28a      	uxthlt	r2, r1
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 8009154:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 8009158:	f003 0303 	and.w	r3, r3, #3
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
 800915c:	bfa8      	it	ge
 800915e:	b292      	uxthge	r2, r2
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
 8009160:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8009164:	f88d 300c 	strb.w	r3, [sp, #12]
	ad.data_len = buf->len;
 8009168:	89ab      	ldrh	r3, [r5, #12]
 800916a:	f88d 300d 	strb.w	r3, [sp, #13]
	ad.data = buf->data;
 800916e:	68ab      	ldr	r3, [r5, #8]
 8009170:	9304      	str	r3, [sp, #16]
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 8009172:	f102 040a 	add.w	r4, r2, #10
	param.options = 0;
 8009176:	2300      	movs	r3, #0
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 8009178:	fb01 4404 	mla	r4, r1, r4, r4
	param.interval_min = ADV_INT(adv_int);
 800917c:	00d2      	lsls	r2, r2, #3
 800917e:	2105      	movs	r1, #5
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 8009180:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_INT(adv_int);
 8009182:	fb92 f2f1 	sdiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 8009186:	a805      	add	r0, sp, #20
	param.interval_min = ADV_INT(adv_int);
 8009188:	f8ad 2016 	strh.w	r2, [sp, #22]
	param.interval_max = param.interval_min;
 800918c:	f8ad 2018 	strh.w	r2, [sp, #24]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 8009190:	a903      	add	r1, sp, #12
 8009192:	2201      	movs	r2, #1
	param.options = 0;
 8009194:	f88d 3014 	strb.w	r3, [sp, #20]
	param.own_addr = NULL;
 8009198:	9307      	str	r3, [sp, #28]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
 800919a:	f7fd f8cf 	bl	800633c <bt_le_adv_start>
 800919e:	4683      	mov	fp, r0
	net_buf_unref(buf);
 80091a0:	4628      	mov	r0, r5
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
 80091a2:	b2a4      	uxth	r4, r4
	net_buf_unref(buf);
 80091a4:	f008 fa92 	bl	80116cc <net_buf_unref>
	if (cb && cb->start) {
 80091a8:	b1e6      	cbz	r6, 80091e4 <adv_thread+0xe8>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	b11b      	cbz	r3, 80091b6 <adv_thread+0xba>
		cb->start(duration, err, cb_data);
 80091ae:	463a      	mov	r2, r7
 80091b0:	4659      	mov	r1, fp
 80091b2:	4620      	mov	r0, r4
 80091b4:	4798      	blx	r3
	if (err) {
 80091b6:	f1bb 0f00 	cmp.w	fp, #0
 80091ba:	d11b      	bne.n	80091f4 <adv_thread+0xf8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
 80091bc:	4620      	mov	r0, r4
 80091be:	f008 fe5f 	bl	8011e80 <_impl_k_sleep>
	err = bt_le_adv_stop();
 80091c2:	f7fd f957 	bl	8006474 <bt_le_adv_stop>
	if (cb && cb->end) {
 80091c6:	6873      	ldr	r3, [r6, #4]
 80091c8:	b1a3      	cbz	r3, 80091f4 <adv_thread+0xf8>
		cb->end(err, cb_data);
 80091ca:	4639      	mov	r1, r7
 80091cc:	4798      	blx	r3
 80091ce:	e011      	b.n	80091f4 <adv_thread+0xf8>
				timeout = bt_mesh_proxy_adv_start();
 80091d0:	f008 f89c 	bl	801130c <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
 80091d4:	4601      	mov	r1, r0
 80091d6:	4640      	mov	r0, r8
 80091d8:	f008 fa02 	bl	80115e0 <net_buf_get>
 80091dc:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
 80091de:	f008 f985 	bl	80114ec <bt_mesh_proxy_adv_stop>
 80091e2:	e799      	b.n	8009118 <adv_thread+0x1c>
	if (err) {
 80091e4:	f1bb 0f00 	cmp.w	fp, #0
 80091e8:	d104      	bne.n	80091f4 <adv_thread+0xf8>
 80091ea:	4620      	mov	r0, r4
 80091ec:	f008 fe48 	bl	8011e80 <_impl_k_sleep>
	err = bt_le_adv_stop();
 80091f0:	f7fd f940 	bl	8006474 <bt_le_adv_stop>
		k_call_stacks_analyze();
 80091f4:	f008 fb68 	bl	80118c8 <k_call_stacks_analyze>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 80091f8:	f008 fe24 	bl	8011e44 <_impl_k_yield>
 80091fc:	e787      	b.n	800910e <adv_thread+0x12>
 80091fe:	bf00      	nop
 8009200:	200064d4 	.word	0x200064d4
 8009204:	200058e8 	.word	0x200058e8
 8009208:	080138f3 	.word	0x080138f3

0800920c <bt_mesh_adv_update>:
	k_fifo_cancel_wait(&adv_queue);
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <bt_mesh_adv_update+0x8>)
 800920e:	f008 bc0f 	b.w	8011a30 <k_queue_cancel_wait>
 8009212:	bf00      	nop
 8009214:	200064d4 	.word	0x200064d4

08009218 <bt_mesh_adv_create_from_pool>:
{
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	460c      	mov	r4, r1
	buf = net_buf_alloc(pool, timeout);
 800921c:	9907      	ldr	r1, [sp, #28]
{
 800921e:	4617      	mov	r7, r2
 8009220:	461e      	mov	r6, r3
	buf = net_buf_alloc(pool, timeout);
 8009222:	f008 f99d 	bl	8011560 <net_buf_alloc>
	if (!buf) {
 8009226:	4605      	mov	r5, r0
 8009228:	b1c8      	cbz	r0, 800925e <bt_mesh_adv_create_from_pool+0x46>
	adv = get_id(net_buf_id(buf));
 800922a:	f008 f983 	bl	8011534 <net_buf_id>
 800922e:	47a0      	blx	r4
 8009230:	89eb      	ldrh	r3, [r5, #14]
 8009232:	442b      	add	r3, r5
 8009234:	3313      	adds	r3, #19
 8009236:	f023 0303 	bic.w	r3, r3, #3
 800923a:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
 800923c:	6018      	str	r0, [r3, #0]
	memset(adv, 0, sizeof(*adv));
 800923e:	220c      	movs	r2, #12
 8009240:	2100      	movs	r1, #0
 8009242:	f7f7 fb49 	bl	80008d8 <memset>
	adv->type         = type;
 8009246:	7a23      	ldrb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
 8009248:	f89d 2018 	ldrb.w	r2, [sp, #24]
	adv->type         = type;
 800924c:	f367 0301 	bfi	r3, r7, #0, #2
	adv->count        = xmit_count;
 8009250:	f366 03c5 	bfi	r3, r6, #3, #3
 8009254:	7223      	strb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
 8009256:	7a63      	ldrb	r3, [r4, #9]
 8009258:	f362 0304 	bfi	r3, r2, #0, #5
 800925c:	7263      	strb	r3, [r4, #9]
}
 800925e:	4628      	mov	r0, r5
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009264 <bt_mesh_adv_create>:
{
 8009264:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
 8009266:	e88d 000c 	stmia.w	sp, {r2, r3}
 800926a:	460b      	mov	r3, r1
 800926c:	4602      	mov	r2, r0
 800926e:	4903      	ldr	r1, [pc, #12]	; (800927c <bt_mesh_adv_create+0x18>)
 8009270:	4803      	ldr	r0, [pc, #12]	; (8009280 <bt_mesh_adv_create+0x1c>)
 8009272:	f7ff ffd1 	bl	8009218 <bt_mesh_adv_create_from_pool>
}
 8009276:	b003      	add	sp, #12
 8009278:	f85d fb04 	ldr.w	pc, [sp], #4
 800927c:	08009069 	.word	0x08009069
 8009280:	20006524 	.word	0x20006524

08009284 <bt_mesh_adv_send>:
{
 8009284:	b510      	push	{r4, lr}
 8009286:	89c3      	ldrh	r3, [r0, #14]
 8009288:	4403      	add	r3, r0
 800928a:	3313      	adds	r3, #19
 800928c:	f023 0303 	bic.w	r3, r3, #3
	BT_MESH_ADV(buf)->cb = cb;
 8009290:	681c      	ldr	r4, [r3, #0]
	BT_MESH_ADV(buf)->cb_data = cb_data;
 8009292:	e884 0006 	stmia.w	r4, {r1, r2}
	BT_MESH_ADV(buf)->busy = 1;
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	7a13      	ldrb	r3, [r2, #8]
 800929a:	f043 0304 	orr.w	r3, r3, #4
 800929e:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
 80092a0:	f008 fa30 	bl	8011704 <net_buf_ref>
}
 80092a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
 80092a8:	4601      	mov	r1, r0
 80092aa:	4801      	ldr	r0, [pc, #4]	; (80092b0 <bt_mesh_adv_send+0x2c>)
 80092ac:	f008 ba00 	b.w	80116b0 <net_buf_put>
 80092b0:	200064d4 	.word	0x200064d4

080092b4 <bt_mesh_adv_init>:
	}
}

void bt_mesh_adv_init(void)
{
 80092b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 80092b6:	2300      	movs	r3, #0
 80092b8:	f06f 0208 	mvn.w	r2, #8
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	9203      	str	r2, [sp, #12]
 80092c2:	9302      	str	r3, [sp, #8]
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <bt_mesh_adv_init+0x28>)
 80092ce:	4904      	ldr	r1, [pc, #16]	; (80092e0 <bt_mesh_adv_init+0x2c>)
 80092d0:	4804      	ldr	r0, [pc, #16]	; (80092e4 <bt_mesh_adv_init+0x30>)
 80092d2:	f009 f8b7 	bl	8012444 <_impl_k_thread_create>
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
}
 80092d6:	b007      	add	sp, #28
 80092d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80092dc:	080090fd 	.word	0x080090fd
 80092e0:	20003530 	.word	0x20003530
 80092e4:	20000b54 	.word	0x20000b54

080092e8 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
 80092e8:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
 80092ea:	4b06      	ldr	r3, [pc, #24]	; (8009304 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
 80092ec:	4906      	ldr	r1, [pc, #24]	; (8009308 <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	9000      	str	r0, [sp, #0]
 80092f2:	889b      	ldrh	r3, [r3, #4]
 80092f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
 80092f8:	4668      	mov	r0, sp
 80092fa:	f7fd f8e1 	bl	80064c0 <bt_le_scan_start>
}
 80092fe:	b003      	add	sp, #12
 8009300:	f85d fb04 	ldr.w	pc, [sp], #4
 8009304:	08012cac 	.word	0x08012cac
 8009308:	08009079 	.word	0x08009079

0800930c <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
 800930c:	f7fd b974 	b.w	80065f8 <bt_le_scan_stop>

08009310 <beacon_complete>:
{
	memcpy(sub->beacon_cache, data, 21);
}

static void beacon_complete(int err, void *user_data)
{
 8009310:	b510      	push	{r4, lr}
 8009312:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 8009314:	f008 febe 	bl	8012094 <_impl_k_uptime_get_32>
	struct bt_mesh_subnet *sub = user_data;

	BT_DBG("err %d", err);

	sub->beacon_sent = k_uptime_get_32();
 8009318:	6020      	str	r0, [r4, #0]
 800931a:	bd10      	pop	{r4, pc}

0800931c <bt_mesh_beacon_ivu_initiator.part.1>:
void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
}

void bt_mesh_beacon_ivu_initiator(bool enable)
 800931c:	b508      	push	{r3, lr}
{
	bt_mesh.ivu_initiator = enable;

	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
 800931e:	f005 f8c9 	bl	800e4b4 <bt_mesh_beacon_get>
 8009322:	b920      	cbnz	r0, 800932e <bt_mesh_beacon_ivu_initiator.part.1+0x12>
		k_delayed_work_cancel(&beacon_timer);
 8009324:	4802      	ldr	r0, [pc, #8]	; (8009330 <bt_mesh_beacon_ivu_initiator.part.1+0x14>)
	}
}
 8009326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
 800932a:	f009 b999 	b.w	8012660 <k_delayed_work_cancel>
 800932e:	bd08      	pop	{r3, pc}
 8009330:	20000bbc 	.word	0x20000bbc

08009334 <k_work_submit_to_queue.constprop.4>:
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <k_work_submit_to_queue.constprop.4+0x28>)
 8009336:	f3bf 8f5b 	dmb	ish
 800933a:	e851 3f00 	ldrex	r3, [r1]
 800933e:	f043 0201 	orr.w	r2, r3, #1
 8009342:	e841 2000 	strex	r0, r2, [r1]
 8009346:	2800      	cmp	r0, #0
 8009348:	d1f7      	bne.n	800933a <k_work_submit_to_queue.constprop.4+0x6>
 800934a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d403      	bmi.n	800935a <k_work_submit_to_queue.constprop.4+0x26>
		k_queue_append(&work_q->queue, work);
 8009352:	3908      	subs	r1, #8
 8009354:	4802      	ldr	r0, [pc, #8]	; (8009360 <k_work_submit_to_queue.constprop.4+0x2c>)
 8009356:	f008 bbaa 	b.w	8011aae <k_queue_append>
 800935a:	4770      	bx	lr
 800935c:	20000bc4 	.word	0x20000bc4
 8009360:	20001480 	.word	0x20001480

08009364 <bt_mesh_beacon_create>:
{
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	460c      	mov	r4, r1
 8009368:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
 800936a:	f000 fbdb 	bl	8009b24 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
 800936e:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
 8009370:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
 8009372:	4620      	mov	r0, r4
 8009374:	f008 f9d9 	bl	801172a <net_buf_simple_add_u8>
	if (sub->kr_flag) {
 8009378:	7fab      	ldrb	r3, [r5, #30]
 800937a:	b1c3      	cbz	r3, 80093ae <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
 800937c:	f105 0689 	add.w	r6, r5, #137	; 0x89
	net_buf_simple_add_u8(buf, flags);
 8009380:	4639      	mov	r1, r7
 8009382:	4620      	mov	r0, r4
 8009384:	f008 f9d1 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
 8009388:	2208      	movs	r2, #8
 800938a:	f106 0121 	add.w	r1, r6, #33	; 0x21
 800938e:	4620      	mov	r0, r4
 8009390:	f008 f9c2 	bl	8011718 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <bt_mesh_beacon_create+0x50>)
 8009396:	4620      	mov	r0, r4
 8009398:	6819      	ldr	r1, [r3, #0]
 800939a:	f008 f9ee 	bl	801177a <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
 800939e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80093a2:	4620      	mov	r0, r4
 80093a4:	2208      	movs	r2, #8
}
 80093a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
 80093aa:	f008 b9b5 	b.w	8011718 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
 80093ae:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80093b2:	e7e5      	b.n	8009380 <bt_mesh_beacon_create+0x1c>
 80093b4:	20005bd0 	.word	0x20005bd0

080093b8 <beacon_send>:
{
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
 80093bc:	f007 fb4c 	bl	8010a58 <bt_prov_active>
 80093c0:	b138      	cbz	r0, 80093d2 <beacon_send+0x1a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 80093c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c6:	494b      	ldr	r1, [pc, #300]	; (80094f4 <beacon_send+0x13c>)
 80093c8:	484b      	ldr	r0, [pc, #300]	; (80094f8 <beacon_send+0x140>)
}
 80093ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ce:	f009 b993 	b.w	80126f8 <k_delayed_work_submit_to_queue>
	if (bt_mesh_is_provisioned()) {
 80093d2:	f7ff fe11 	bl	8008ff8 <bt_mesh_is_provisioned>
 80093d6:	4604      	mov	r4, r0
 80093d8:	2800      	cmp	r0, #0
 80093da:	d063      	beq.n	80094a4 <beacon_send+0xec>
	first_half = !first_half;
 80093dc:	4b47      	ldr	r3, [pc, #284]	; (80094fc <beacon_send+0x144>)
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	f082 0201 	eor.w	r2, r2, #1
 80093e4:	701a      	strb	r2, [r3, #0]
	if (first_half) {
 80093e6:	b9d2      	cbnz	r2, 800941e <beacon_send+0x66>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80093e8:	4b45      	ldr	r3, [pc, #276]	; (8009500 <beacon_send+0x148>)
 80093ea:	f8b3 01d0 	ldrh.w	r0, [r3, #464]	; 0x1d0
 80093ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093f2:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
 80093f4:	bf1c      	itt	ne
 80093f6:	f893 11b9 	ldrbne.w	r1, [r3, #441]	; 0x1b9
 80093fa:	f883 11b8 	strbne.w	r1, [r3, #440]	; 0x1b8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 80093fe:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
		sub->beacons_cur = 0;
 8009402:	bf18      	it	ne
 8009404:	f883 21b9 	strbne.w	r2, [r3, #441]	; 0x1b9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800940c:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
 800940e:	bf1f      	itttt	ne
 8009410:	f893 229d 	ldrbne.w	r2, [r3, #669]	; 0x29d
 8009414:	f883 229c 	strbne.w	r2, [r3, #668]	; 0x29c
		sub->beacons_cur = 0;
 8009418:	2200      	movne	r2, #0
 800941a:	f883 229d 	strbne.w	r2, [r3, #669]	; 0x29d
 800941e:	f008 fe39 	bl	8012094 <_impl_k_uptime_get_32>
 8009422:	4c38      	ldr	r4, [pc, #224]	; (8009504 <beacon_send+0x14c>)
		if (time_diff < K_SECONDS(600) &&
 8009424:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8009508 <beacon_send+0x150>
		bt_mesh_adv_send(buf, &send_cb, sub);
 8009428:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800950c <beacon_send+0x154>
 800942c:	4606      	mov	r6, r0
 800942e:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009432:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8009436:	42ac      	cmp	r4, r5
 8009438:	d018      	beq.n	800946c <beacon_send+0xb4>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800943a:	8ba3      	ldrh	r3, [r4, #28]
 800943c:	42bb      	cmp	r3, r7
 800943e:	d029      	beq.n	8009494 <beacon_send+0xdc>
		time_diff = now - sub->beacon_sent;
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	1ab2      	subs	r2, r6, r2
		if (time_diff < K_SECONDS(600) &&
 8009444:	4542      	cmp	r2, r8
 8009446:	d809      	bhi.n	800945c <beacon_send+0xa4>
		    time_diff < BEACON_THRESHOLD(sub)) {
 8009448:	7921      	ldrb	r1, [r4, #4]
 800944a:	f242 7310 	movw	r3, #10000	; 0x2710
 800944e:	fb01 3303 	mla	r3, r1, r3, r3
 8009452:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8009456:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
 8009458:	429a      	cmp	r2, r3
 800945a:	d31b      	bcc.n	8009494 <beacon_send+0xdc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT_COUNT,
 800945c:	2300      	movs	r3, #0
 800945e:	2214      	movs	r2, #20
 8009460:	4619      	mov	r1, r3
 8009462:	2002      	movs	r0, #2
 8009464:	f7ff fefe 	bl	8009264 <bt_mesh_adv_create>
		if (!buf) {
 8009468:	4682      	mov	sl, r0
 800946a:	b930      	cbnz	r0, 800947a <beacon_send+0xc2>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
 800946c:	f005 f822 	bl	800e4b4 <bt_mesh_beacon_get>
 8009470:	2801      	cmp	r0, #1
 8009472:	d111      	bne.n	8009498 <beacon_send+0xe0>
 8009474:	f242 7210 	movw	r2, #10000	; 0x2710
 8009478:	e7a5      	b.n	80093c6 <beacon_send+0xe>
		bt_mesh_beacon_create(sub, &buf->b);
 800947a:	f100 0108 	add.w	r1, r0, #8
 800947e:	4620      	mov	r0, r4
 8009480:	f7ff ff70 	bl	8009364 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
 8009484:	4650      	mov	r0, sl
 8009486:	4622      	mov	r2, r4
 8009488:	4649      	mov	r1, r9
 800948a:	f7ff fefb 	bl	8009284 <bt_mesh_adv_send>
		net_buf_unref(buf);
 800948e:	4650      	mov	r0, sl
 8009490:	f008 f91c 	bl	80116cc <net_buf_unref>
 8009494:	34e4      	adds	r4, #228	; 0xe4
 8009496:	e7ce      	b.n	8009436 <beacon_send+0x7e>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <beacon_send+0x148>)
 800949a:	79db      	ldrb	r3, [r3, #7]
 800949c:	079b      	lsls	r3, r3, #30
 800949e:	d4e9      	bmi.n	8009474 <beacon_send+0xbc>
 80094a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT_COUNT,
 80094a4:	2102      	movs	r1, #2
 80094a6:	4603      	mov	r3, r0
 80094a8:	2214      	movs	r2, #20
 80094aa:	4608      	mov	r0, r1
 80094ac:	f7ff feda 	bl	8009264 <bt_mesh_adv_create>
	if (!buf) {
 80094b0:	4605      	mov	r5, r0
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d085      	beq.n	80093c2 <beacon_send+0xa>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
 80094b6:	f100 0608 	add.w	r6, r0, #8
 80094ba:	4621      	mov	r1, r4
 80094bc:	4630      	mov	r0, r6
 80094be:	f008 f934 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, bt_mesh_prov_get_uuid(), 16);
 80094c2:	f007 fac3 	bl	8010a4c <bt_mesh_prov_get_uuid>
 80094c6:	2210      	movs	r2, #16
 80094c8:	4601      	mov	r1, r0
 80094ca:	4630      	mov	r0, r6
 80094cc:	f008 f924 	bl	8011718 <net_buf_simple_add_mem>
	memset(net_buf_add(buf, 2 + 4), 0, 2 + 4);
 80094d0:	2106      	movs	r1, #6
 80094d2:	4630      	mov	r0, r6
 80094d4:	f008 f91a 	bl	801170c <net_buf_simple_add>
 80094d8:	4621      	mov	r1, r4
 80094da:	2206      	movs	r2, #6
 80094dc:	f7f7 f9fc 	bl	80008d8 <memset>
	bt_mesh_adv_send(buf, NULL, NULL);
 80094e0:	4628      	mov	r0, r5
 80094e2:	4622      	mov	r2, r4
 80094e4:	4621      	mov	r1, r4
 80094e6:	f7ff fecd 	bl	8009284 <bt_mesh_adv_send>
	net_buf_unref(buf);
 80094ea:	4628      	mov	r0, r5
 80094ec:	f008 f8ee 	bl	80116cc <net_buf_unref>
 80094f0:	e767      	b.n	80093c2 <beacon_send+0xa>
 80094f2:	bf00      	nop
 80094f4:	20000bbc 	.word	0x20000bbc
 80094f8:	20001480 	.word	0x20001480
 80094fc:	20000be4 	.word	0x20000be4
 8009500:	20005bd0 	.word	0x20005bd0
 8009504:	20005d84 	.word	0x20005d84
 8009508:	000927bf 	.word	0x000927bf
 800950c:	080138f8 	.word	0x080138f8

08009510 <bt_mesh_beacon_recv>:
{
 8009510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < 1) {
 8009514:	8883      	ldrh	r3, [r0, #4]
{
 8009516:	b085      	sub	sp, #20
 8009518:	4605      	mov	r5, r0
	if (buf->len < 1) {
 800951a:	2b00      	cmp	r3, #0
 800951c:	d03b      	beq.n	8009596 <bt_mesh_beacon_recv+0x86>
	type = net_buf_simple_pull_u8(buf);
 800951e:	f008 f968 	bl	80117f2 <net_buf_simple_pull_u8>
	switch (type) {
 8009522:	2801      	cmp	r0, #1
 8009524:	d137      	bne.n	8009596 <bt_mesh_beacon_recv+0x86>
	if (buf->len < 21) {
 8009526:	88ab      	ldrh	r3, [r5, #4]
 8009528:	2b14      	cmp	r3, #20
 800952a:	d934      	bls.n	8009596 <bt_mesh_beacon_recv+0x86>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800952c:	4e42      	ldr	r6, [pc, #264]	; (8009638 <bt_mesh_beacon_recv+0x128>)
	sub = cache_check(buf->data);
 800952e:	682c      	ldr	r4, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009530:	f8b6 21d0 	ldrh.w	r2, [r6, #464]	; 0x1d0
 8009534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009538:	429a      	cmp	r2, r3
 800953a:	d006      	beq.n	800954a <bt_mesh_beacon_recv+0x3a>
		if (!memcmp(sub->beacon_cache, data, 21)) {
 800953c:	2215      	movs	r2, #21
 800953e:	4621      	mov	r1, r4
 8009540:	f506 70dd 	add.w	r0, r6, #442	; 0x1ba
 8009544:	f7f7 f987 	bl	8000856 <memcmp>
 8009548:	b348      	cbz	r0, 800959e <bt_mesh_beacon_recv+0x8e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800954a:	f8b6 22b4 	ldrh.w	r2, [r6, #692]	; 0x2b4
 800954e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009552:	429a      	cmp	r2, r3
 8009554:	d005      	beq.n	8009562 <bt_mesh_beacon_recv+0x52>
		if (!memcmp(sub->beacon_cache, data, 21)) {
 8009556:	2215      	movs	r2, #21
 8009558:	4621      	mov	r1, r4
 800955a:	4838      	ldr	r0, [pc, #224]	; (800963c <bt_mesh_beacon_recv+0x12c>)
 800955c:	f7f7 f97b 	bl	8000856 <memcmp>
 8009560:	b1e0      	cbz	r0, 800959c <bt_mesh_beacon_recv+0x8c>
	flags = net_buf_simple_pull_u8(buf);
 8009562:	4628      	mov	r0, r5
	data = buf->data;
 8009564:	f8d5 9000 	ldr.w	r9, [r5]
	flags = net_buf_simple_pull_u8(buf);
 8009568:	f008 f943 	bl	80117f2 <net_buf_simple_pull_u8>
	net_buf_simple_pull(buf, 8);
 800956c:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
 800956e:	4607      	mov	r7, r0
	net_buf_simple_pull(buf, 8);
 8009570:	4628      	mov	r0, r5
	net_id = buf->data;
 8009572:	682c      	ldr	r4, [r5, #0]
	net_buf_simple_pull(buf, 8);
 8009574:	f008 f935 	bl	80117e2 <net_buf_simple_pull>
	iv_index = net_buf_simple_pull_be32(buf);
 8009578:	4628      	mov	r0, r5
 800957a:	f008 f955 	bl	8011828 <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
 800957e:	f10d 030f 	add.w	r3, sp, #15
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
 8009586:	4680      	mov	r8, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	4639      	mov	r1, r7
 800958e:	f000 fdbd 	bl	800a10c <bt_mesh_subnet_find>
	if (!sub) {
 8009592:	4604      	mov	r4, r0
 8009594:	b980      	cbnz	r0, 80095b8 <bt_mesh_beacon_recv+0xa8>
}
 8009596:	b005      	add	sp, #20
 8009598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
 800959c:	20e4      	movs	r0, #228	; 0xe4
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800959e:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
 80095a2:	1834      	adds	r4, r6, r0
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
 80095a4:	f004 ff86 	bl	800e4b4 <bt_mesh_beacon_get>
 80095a8:	2801      	cmp	r0, #1
 80095aa:	d1f4      	bne.n	8009596 <bt_mesh_beacon_recv+0x86>
	    sub->beacons_cur < 0xff) {
 80095ac:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
 80095ae:	2bff      	cmp	r3, #255	; 0xff
 80095b0:	d0f1      	beq.n	8009596 <bt_mesh_beacon_recv+0x86>
		sub->beacons_cur++;
 80095b2:	3301      	adds	r3, #1
 80095b4:	7163      	strb	r3, [r4, #5]
 80095b6:	e7ee      	b.n	8009596 <bt_mesh_beacon_recv+0x86>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
 80095b8:	7fc3      	ldrb	r3, [r0, #31]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d103      	bne.n	80095c6 <bt_mesh_beacon_recv+0xb6>
 80095be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0e7      	beq.n	8009596 <bt_mesh_beacon_recv+0x86>
	memcpy(sub->beacon_cache, data, 21);
 80095c6:	2215      	movs	r2, #21
 80095c8:	4649      	mov	r1, r9
 80095ca:	1da0      	adds	r0, r4, #6
 80095cc:	f7f7 f958 	bl	8000880 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
 80095d0:	2000      	movs	r0, #0
 80095d2:	f000 f931 	bl	8009838 <bt_mesh_subnet_get>
 80095d6:	b110      	cbz	r0, 80095de <bt_mesh_beacon_recv+0xce>
 80095d8:	8ba3      	ldrh	r3, [r4, #28]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e2      	bne.n	80095a4 <bt_mesh_beacon_recv+0x94>
	if (bt_mesh.ivu_initiator &&
 80095de:	79f3      	ldrb	r3, [r6, #7]
 80095e0:	f013 0f02 	tst.w	r3, #2
 80095e4:	ea4f 0557 	mov.w	r5, r7, lsr #1
 80095e8:	d00a      	beq.n	8009600 <bt_mesh_beacon_recv+0xf0>
	    bt_mesh.iv_update == BT_MESH_IV_UPDATE(flags)) {
 80095ea:	f003 0201 	and.w	r2, r3, #1
 80095ee:	f005 0101 	and.w	r1, r5, #1
	if (bt_mesh.ivu_initiator &&
 80095f2:	428a      	cmp	r2, r1
 80095f4:	d104      	bne.n	8009600 <bt_mesh_beacon_recv+0xf0>
	bt_mesh.ivu_initiator = enable;
 80095f6:	f36f 0341 	bfc	r3, #1, #1
 80095fa:	71f3      	strb	r3, [r6, #7]
 80095fc:	f7ff fe8e 	bl	800931c <bt_mesh_beacon_ivu_initiator.part.1>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
 8009600:	f005 0101 	and.w	r1, r5, #1
 8009604:	4640      	mov	r0, r8
 8009606:	f000 fb8b 	bl	8009d20 <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
 800960a:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
 800960e:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
 8009610:	f007 0101 	and.w	r1, r7, #1
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fb31 	bl	8009c7c <bt_mesh_kr_update>
	if (kr_change) {
 800961a:	b148      	cbz	r0, 8009630 <bt_mesh_beacon_recv+0x120>
		bt_mesh_net_beacon_update(sub);
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fa8d 	bl	8009b3c <bt_mesh_net_beacon_update>
	if (iv_change) {
 8009622:	b11d      	cbz	r5, 800962c <bt_mesh_beacon_recv+0x11c>
		bt_mesh_net_sec_update(NULL);
 8009624:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
 8009626:	f000 fb67 	bl	8009cf8 <bt_mesh_net_sec_update>
 800962a:	e7bb      	b.n	80095a4 <bt_mesh_beacon_recv+0x94>
 800962c:	4620      	mov	r0, r4
 800962e:	e7fa      	b.n	8009626 <bt_mesh_beacon_recv+0x116>
	if (iv_change) {
 8009630:	2d00      	cmp	r5, #0
 8009632:	d0b7      	beq.n	80095a4 <bt_mesh_beacon_recv+0x94>
 8009634:	e7f6      	b.n	8009624 <bt_mesh_beacon_recv+0x114>
 8009636:	bf00      	nop
 8009638:	20005bd0 	.word	0x20005bd0
 800963c:	20005e6e 	.word	0x20005e6e

08009640 <bt_mesh_beacon_init>:
	k_delayed_work_init(&beacon_timer, beacon_send);
 8009640:	4901      	ldr	r1, [pc, #4]	; (8009648 <bt_mesh_beacon_init+0x8>)
 8009642:	4802      	ldr	r0, [pc, #8]	; (800964c <bt_mesh_beacon_init+0xc>)
 8009644:	f008 bfee 	b.w	8012624 <k_delayed_work_init>
 8009648:	080093b9 	.word	0x080093b9
 800964c:	20000bbc 	.word	0x20000bbc

08009650 <bt_mesh_beacon_ivu_initiator>:
	bt_mesh.ivu_initiator = enable;
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <bt_mesh_beacon_ivu_initiator+0x14>)
 8009652:	79da      	ldrb	r2, [r3, #7]
 8009654:	f360 0241 	bfi	r2, r0, #1, #1
 8009658:	71da      	strb	r2, [r3, #7]
	if (enable) {
 800965a:	b108      	cbz	r0, 8009660 <bt_mesh_beacon_ivu_initiator+0x10>
	k_work_submit_to_queue(&k_sys_work_q, work);
 800965c:	f7ff be6a 	b.w	8009334 <k_work_submit_to_queue.constprop.4>
 8009660:	f7ff be5c 	b.w	800931c <bt_mesh_beacon_ivu_initiator.part.1>
 8009664:	20005bd0 	.word	0x20005bd0

08009668 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
 8009668:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
 800966a:	f7ff fcc5 	bl	8008ff8 <bt_mesh_is_provisioned>
 800966e:	b1e8      	cbz	r0, 80096ac <bt_mesh_beacon_enable+0x44>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009670:	4c10      	ldr	r4, [pc, #64]	; (80096b4 <bt_mesh_beacon_enable+0x4c>)
 8009672:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8009676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800967a:	429a      	cmp	r2, r3
 800967c:	d008      	beq.n	8009690 <bt_mesh_beacon_enable+0x28>
			continue;
		}

		sub->beacons_last = 0;
 800967e:	2300      	movs	r3, #0
		sub->beacons_cur = 0;

		bt_mesh_net_beacon_update(sub);
 8009680:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
		sub->beacons_last = 0;
 8009684:	f884 31b8 	strb.w	r3, [r4, #440]	; 0x1b8
		sub->beacons_cur = 0;
 8009688:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
		bt_mesh_net_beacon_update(sub);
 800968c:	f000 fa56 	bl	8009b3c <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8009690:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8009694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009698:	429a      	cmp	r2, r3
 800969a:	d007      	beq.n	80096ac <bt_mesh_beacon_enable+0x44>
		sub->beacons_last = 0;
 800969c:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
 800969e:	4806      	ldr	r0, [pc, #24]	; (80096b8 <bt_mesh_beacon_enable+0x50>)
		sub->beacons_last = 0;
 80096a0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
		sub->beacons_cur = 0;
 80096a4:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
		bt_mesh_net_beacon_update(sub);
 80096a8:	f000 fa48 	bl	8009b3c <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b0:	f7ff be40 	b.w	8009334 <k_work_submit_to_queue.constprop.4>
 80096b4:	20005bd0 	.word	0x20005bd0
 80096b8:	20005e68 	.word	0x20005e68

080096bc <bt_mesh_beacon_disable>:

void bt_mesh_beacon_disable(void)
{
	if (!bt_mesh.ivu_initiator) {
 80096bc:	4b03      	ldr	r3, [pc, #12]	; (80096cc <bt_mesh_beacon_disable+0x10>)
 80096be:	79db      	ldrb	r3, [r3, #7]
 80096c0:	079b      	lsls	r3, r3, #30
 80096c2:	d402      	bmi.n	80096ca <bt_mesh_beacon_disable+0xe>
		k_delayed_work_cancel(&beacon_timer);
 80096c4:	4802      	ldr	r0, [pc, #8]	; (80096d0 <bt_mesh_beacon_disable+0x14>)
 80096c6:	f008 bfcb 	b.w	8012660 <k_delayed_work_cancel>
 80096ca:	4770      	bx	lr
 80096cc:	20005bd0 	.word	0x20005bd0
 80096d0:	20000bbc 	.word	0x20000bbc

080096d4 <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
 80096d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80096d8:	4605      	mov	r5, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
 80096da:	f105 0621 	add.w	r6, r5, #33	; 0x21
{
 80096de:	4608      	mov	r0, r1
 80096e0:	4617      	mov	r7, r2
	if (memcmp(net_id, keys->net_id, 8)) {
 80096e2:	4631      	mov	r1, r6
 80096e4:	2208      	movs	r2, #8
{
 80096e6:	4698      	mov	r8, r3
	if (memcmp(net_id, keys->net_id, 8)) {
 80096e8:	f7f7 f8b5 	bl	8000856 <memcmp>
 80096ec:	b998      	cbnz	r0, 8009716 <auth_match+0x42>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
 80096ee:	ac02      	add	r4, sp, #8
 80096f0:	4643      	mov	r3, r8
 80096f2:	4632      	mov	r2, r6
 80096f4:	4639      	mov	r1, r7
 80096f6:	9400      	str	r4, [sp, #0]
 80096f8:	f105 0049 	add.w	r0, r5, #73	; 0x49
 80096fc:	f002 fd0f 	bl	800c11e <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
 8009700:	2208      	movs	r2, #8
 8009702:	4621      	mov	r1, r4
 8009704:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009706:	f7f7 f8a6 	bl	8000856 <memcmp>
 800970a:	fab0 f080 	clz	r0, r0
 800970e:	0940      	lsrs	r0, r0, #5
			bt_hex(auth, 8), bt_hex(net_auth, 8));
		return false;
	}

	return true;
}
 8009710:	b004      	add	sp, #16
 8009712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
 8009716:	2000      	movs	r0, #0
 8009718:	e7fa      	b.n	8009710 <auth_match+0x3c>
	...

0800971c <net_decrypt.isra.2>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 800971c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 8009720:	4d41      	ldr	r5, [pc, #260]	; (8009828 <net_decrypt.isra.2+0x10c>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 8009722:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009724:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009726:	4689      	mov	r9, r1
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 8009728:	6829      	ldr	r1, [r5, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 800972a:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
 800972c:	7813      	ldrb	r3, [r2, #0]
 800972e:	f001 0101 	and.w	r1, r1, #1
 8009732:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
 8009736:	7cbb      	ldrb	r3, [r7, #18]
 8009738:	f361 0300 	bfi	r3, r1, #0, #1
 800973c:	74bb      	strb	r3, [r7, #18]
	buf->data = buf->__buf + reserve_head;
 800973e:	f104 0308 	add.w	r3, r4, #8
 8009742:	6023      	str	r3, [r4, #0]
	buf->len = 0;
 8009744:	2300      	movs	r3, #0
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 8009746:	4690      	mov	r8, r2
 8009748:	80a3      	strh	r3, [r4, #4]

	net_buf_simple_init(buf, 0);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
 800974a:	4651      	mov	r1, sl
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
 800974c:	4606      	mov	r6, r0
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
 800974e:	4620      	mov	r0, r4
 8009750:	f007 ffdc 	bl	801170c <net_buf_simple_add>
 8009754:	4652      	mov	r2, sl
 8009756:	4641      	mov	r1, r8
 8009758:	f7f7 f892 	bl	8000880 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 800975c:	7cbb      	ldrb	r3, [r7, #18]
 800975e:	6829      	ldr	r1, [r5, #0]
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	464a      	mov	r2, r9
 8009768:	1ac9      	subs	r1, r1, r3
 800976a:	f002 fb0f 	bl	800bd8c <bt_mesh_net_obfuscate>
 800976e:	2800      	cmp	r0, #0
 8009770:	d150      	bne.n	8009814 <net_decrypt.isra.2+0xf8>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
 8009772:	7cbb      	ldrb	r3, [r7, #18]
 8009774:	f013 0830 	ands.w	r8, r3, #48	; 0x30
 8009778:	d130      	bne.n	80097dc <net_decrypt.isra.2+0xc0>
 800977a:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
 800977c:	682a      	ldr	r2, [r5, #0]
 800977e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	1ad3      	subs	r3, r2, r3
	memcpy(&hash2, &pdu->data[3], 4);
 8009788:	2204      	movs	r2, #4
 800978a:	3103      	adds	r1, #3
 800978c:	eb0d 0002 	add.w	r0, sp, r2
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
 8009790:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
 8009794:	f7f7 f874 	bl	8000880 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	f8df e094 	ldr.w	lr, [pc, #148]	; 8009830 <net_decrypt.isra.2+0x114>
 800979e:	4640      	mov	r0, r8
 80097a0:	4649      	mov	r1, r9
 80097a2:	4318      	orrs	r0, r3
 80097a4:	f10e 0c50 	add.w	ip, lr, #80	; 0x50
		if (msg_cache[i] == hash) {
 80097a8:	e9fe 2302 	ldrd	r2, r3, [lr, #8]!
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf08      	it	eq
 80097b0:	4282      	cmpeq	r2, r0
 80097b2:	d032      	beq.n	800981a <net_decrypt.isra.2+0xfe>
	for (i = 0; i < ARRAY_SIZE(msg_cache); i++) {
 80097b4:	45f4      	cmp	ip, lr
 80097b6:	d1f7      	bne.n	80097a8 <net_decrypt.isra.2+0x8c>
	msg_cache[msg_cache_next++] = hash;
 80097b8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8009834 <net_decrypt.isra.2+0x118>
 80097bc:	4a1b      	ldr	r2, [pc, #108]	; (800982c <net_decrypt.isra.2+0x110>)
 80097be:	f8be 3000 	ldrh.w	r3, [lr]
 80097c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80097c6:	3301      	adds	r3, #1
 80097c8:	e9c2 0100 	strd	r0, r1, [r2]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	210a      	movs	r1, #10
 80097d0:	fbb3 f2f1 	udiv	r2, r3, r1
 80097d4:	fb01 3312 	mls	r3, r1, r2, r3
 80097d8:	f8ae 3000 	strh.w	r3, [lr]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
 80097dc:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
 80097de:	7951      	ldrb	r1, [r2, #5]
 80097e0:	7993      	ldrb	r3, [r2, #6]
 80097e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80097e6:	b21b      	sxth	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
 80097e8:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
 80097ea:	813b      	strh	r3, [r7, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
 80097ec:	dd18      	ble.n	8009820 <net_decrypt.isra.2+0x104>
		return -EINVAL;
	}

	BT_DBG("src 0x%04x", rx->ctx.addr);

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
 80097ee:	7cba      	ldrb	r2, [r7, #18]
	    rx->net_if == BT_MESH_NET_IF_PROXY_CFG) {
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 80097f0:	6829      	ldr	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
 80097f2:	f002 0330 	and.w	r3, r2, #48	; 0x30
 80097f6:	2b30      	cmp	r3, #48	; 0x30
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 80097f8:	f002 0201 	and.w	r2, r2, #1
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
 80097fc:	eba1 0202 	sub.w	r2, r1, r2
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
 8009800:	bf0c      	ite	eq
 8009802:	2301      	moveq	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
 8009804:	2300      	movne	r3, #0
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f002 fb32 	bl	800be72 <bt_mesh_net_decrypt>
}
 800980e:	b002      	add	sp, #8
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOENT;
 8009814:	f06f 0001 	mvn.w	r0, #1
 8009818:	e7f9      	b.n	800980e <net_decrypt.isra.2+0xf2>
		return -EALREADY;
 800981a:	f06f 0044 	mvn.w	r0, #68	; 0x44
 800981e:	e7f6      	b.n	800980e <net_decrypt.isra.2+0xf2>
		return -EINVAL;
 8009820:	f06f 0015 	mvn.w	r0, #21
 8009824:	e7f3      	b.n	800980e <net_decrypt.isra.2+0xf2>
 8009826:	bf00      	nop
 8009828:	20005bd0 	.word	0x20005bd0
 800982c:	20000c90 	.word	0x20000c90
 8009830:	20000c88 	.word	0x20000c88
 8009834:	20000ce0 	.word	0x20000ce0

08009838 <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
 8009838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800983c:	4298      	cmp	r0, r3
 800983e:	d011      	beq.n	8009864 <bt_mesh_subnet_get+0x2c>
		if (bt_mesh.sub[i].net_idx == net_idx) {
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <bt_mesh_subnet_get+0x34>)
 8009842:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
 8009846:	4282      	cmp	r2, r0
 8009848:	d00a      	beq.n	8009860 <bt_mesh_subnet_get+0x28>
 800984a:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
 800984e:	4282      	cmp	r2, r0
 8009850:	d10a      	bne.n	8009868 <bt_mesh_subnet_get+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8009852:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
 8009854:	22e4      	movs	r2, #228	; 0xe4
 8009856:	fb02 3000 	mla	r0, r2, r0, r3
 800985a:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
 800985e:	4770      	bx	lr
		if (bt_mesh.sub[i].net_idx == net_idx) {
 8009860:	2000      	movs	r0, #0
 8009862:	e7f7      	b.n	8009854 <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
 8009864:	4802      	ldr	r0, [pc, #8]	; (8009870 <bt_mesh_subnet_get+0x38>)
 8009866:	4770      	bx	lr
	return NULL;
 8009868:	2000      	movs	r0, #0
}
 800986a:	4770      	bx	lr
 800986c:	20005bd0 	.word	0x20005bd0
 8009870:	20005d84 	.word	0x20005d84

08009874 <bt_mesh_net_keys_create>:
{
 8009874:	b530      	push	{r4, r5, lr}
 8009876:	b085      	sub	sp, #20
	u8_t p[] = { 0 };
 8009878:	2300      	movs	r3, #0
 800987a:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 800987e:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
 8009882:	460d      	mov	r5, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	f100 0311 	add.w	r3, r0, #17
{
 800988a:	4604      	mov	r4, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	2201      	movs	r2, #1
 8009890:	f10d 030f 	add.w	r3, sp, #15
 8009894:	a903      	add	r1, sp, #12
 8009896:	4628      	mov	r0, r5
 8009898:	f002 f9b4 	bl	800bc04 <bt_mesh_k2>
	if (err) {
 800989c:	b9d0      	cbnz	r0, 80098d4 <bt_mesh_net_keys_create+0x60>
	memcpy(keys->net, key, 16);
 800989e:	4629      	mov	r1, r5
 80098a0:	2210      	movs	r2, #16
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7f6 ffec 	bl	8000880 <memcpy>
	keys->nid = nid;
 80098a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80098ac:	7423      	strb	r3, [r4, #16]
	err = bt_mesh_k3(key, keys->net_id);
 80098ae:	f104 0121 	add.w	r1, r4, #33	; 0x21
 80098b2:	4628      	mov	r0, r5
 80098b4:	f002 f9fe 	bl	800bcb4 <bt_mesh_k3>
	if (err) {
 80098b8:	b960      	cbnz	r0, 80098d4 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
 80098ba:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80098be:	4906      	ldr	r1, [pc, #24]	; (80098d8 <bt_mesh_net_keys_create+0x64>)
 80098c0:	4628      	mov	r0, r5
 80098c2:	f002 fa4d 	bl	800bd60 <bt_mesh_id128>
	if (err) {
 80098c6:	b928      	cbnz	r0, 80098d4 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
 80098c8:	f104 0249 	add.w	r2, r4, #73	; 0x49
 80098cc:	4903      	ldr	r1, [pc, #12]	; (80098dc <bt_mesh_net_keys_create+0x68>)
 80098ce:	4628      	mov	r0, r5
 80098d0:	f002 fa46 	bl	800bd60 <bt_mesh_id128>
}
 80098d4:	b005      	add	sp, #20
 80098d6:	bd30      	pop	{r4, r5, pc}
 80098d8:	08013900 	.word	0x08013900
 80098dc:	08013905 	.word	0x08013905

080098e0 <friend_cred_set>:
{
 80098e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e2:	b087      	sub	sp, #28
 80098e4:	4605      	mov	r5, r0
 80098e6:	4616      	mov	r6, r2
	lpn_addr = cred->addr;
 80098e8:	8847      	ldrh	r7, [r0, #2]
{
 80098ea:	460c      	mov	r4, r1
	frnd_addr = bt_mesh_primary_addr();
 80098ec:	f002 fd12 	bl	800c314 <bt_mesh_primary_addr>
	p[0] = 0x01;
 80098f0:	2301      	movs	r3, #1
 80098f2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst[0] = val >> 8;
 80098f6:	0a3b      	lsrs	r3, r7, #8
 80098f8:	f88d 300d 	strb.w	r3, [sp, #13]
 80098fc:	0a03      	lsrs	r3, r0, #8
 80098fe:	f88d 300f 	strb.w	r3, [sp, #15]
	sys_put_be16(cred->lpn_counter, p + 5);
 8009902:	88ab      	ldrh	r3, [r5, #4]
	dst[1] = val;
 8009904:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
 8009908:	0a1a      	lsrs	r2, r3, #8
	sys_put_be16(cred->frnd_counter, p + 7);
 800990a:	88eb      	ldrh	r3, [r5, #6]
 800990c:	f88d 2011 	strb.w	r2, [sp, #17]
 8009910:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 8009914:	0a1a      	lsrs	r2, r3, #8
 8009916:	f88d 2013 	strb.w	r2, [sp, #19]
	dst[1] = val;
 800991a:	f88d 3014 	strb.w	r3, [sp, #20]
			 cred->cred[idx].enc, cred->cred[idx].privacy);
 800991e:	f101 0219 	add.w	r2, r1, #25
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
 8009922:	f101 0308 	add.w	r3, r1, #8
			 cred->cred[idx].enc, cred->cred[idx].privacy);
 8009926:	3109      	adds	r1, #9
 8009928:	442a      	add	r2, r5
 800992a:	4429      	add	r1, r5
 800992c:	f88d 0010 	strb.w	r0, [sp, #16]
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
 8009930:	9201      	str	r2, [sp, #4]
 8009932:	9100      	str	r1, [sp, #0]
 8009934:	442b      	add	r3, r5
 8009936:	2209      	movs	r2, #9
 8009938:	a903      	add	r1, sp, #12
 800993a:	4630      	mov	r0, r6
 800993c:	f88d 700e 	strb.w	r7, [sp, #14]
 8009940:	f002 f960 	bl	800bc04 <bt_mesh_k2>
}
 8009944:	b007      	add	sp, #28
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009948 <friend_cred_refresh>:
{
 8009948:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 800994a:	4c0f      	ldr	r4, [pc, #60]	; (8009988 <friend_cred_refresh+0x40>)
 800994c:	8863      	ldrh	r3, [r4, #2]
{
 800994e:	4605      	mov	r5, r0
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 8009950:	b14b      	cbz	r3, 8009966 <friend_cred_refresh+0x1e>
 8009952:	8823      	ldrh	r3, [r4, #0]
 8009954:	4283      	cmp	r3, r0
 8009956:	d106      	bne.n	8009966 <friend_cred_refresh+0x1e>
			memcpy(&cred->cred[0], &cred->cred[1],
 8009958:	2221      	movs	r2, #33	; 0x21
 800995a:	f104 0129 	add.w	r1, r4, #41	; 0x29
 800995e:	f104 0008 	add.w	r0, r4, #8
 8009962:	f7f6 ff8d 	bl	8000880 <memcpy>
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
 8009966:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800996a:	b15b      	cbz	r3, 8009984 <friend_cred_refresh+0x3c>
 800996c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8009970:	42ab      	cmp	r3, r5
 8009972:	d107      	bne.n	8009984 <friend_cred_refresh+0x3c>
			memcpy(&cred->cred[0], &cred->cred[1],
 8009974:	4905      	ldr	r1, [pc, #20]	; (800998c <friend_cred_refresh+0x44>)
 8009976:	2221      	movs	r2, #33	; 0x21
 8009978:	f1a1 0021 	sub.w	r0, r1, #33	; 0x21
}
 800997c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(&cred->cred[0], &cred->cred[1],
 8009980:	f7f6 bf7e 	b.w	8000880 <memcpy>
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	20000bfc 	.word	0x20000bfc
 800998c:	20000c6f 	.word	0x20000c6f

08009990 <friend_cred_update>:
{
 8009990:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 8009992:	4c10      	ldr	r4, [pc, #64]	; (80099d4 <friend_cred_update+0x44>)
 8009994:	8863      	ldrh	r3, [r4, #2]
{
 8009996:	4605      	mov	r5, r0
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 8009998:	b153      	cbz	r3, 80099b0 <friend_cred_update+0x20>
 800999a:	8822      	ldrh	r2, [r4, #0]
 800999c:	8b83      	ldrh	r3, [r0, #28]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d106      	bne.n	80099b0 <friend_cred_update+0x20>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 80099a2:	f100 0289 	add.w	r2, r0, #137	; 0x89
 80099a6:	2101      	movs	r1, #1
 80099a8:	4620      	mov	r0, r4
 80099aa:	f7ff ff99 	bl	80098e0 <friend_cred_set>
		if (err) {
 80099ae:	b978      	cbnz	r0, 80099d0 <friend_cred_update+0x40>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
 80099b0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80099b4:	b15b      	cbz	r3, 80099ce <friend_cred_update+0x3e>
 80099b6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80099ba:	8bab      	ldrh	r3, [r5, #28]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d106      	bne.n	80099ce <friend_cred_update+0x3e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 80099c0:	f105 0289 	add.w	r2, r5, #137	; 0x89
 80099c4:	2101      	movs	r1, #1
 80099c6:	4804      	ldr	r0, [pc, #16]	; (80099d8 <friend_cred_update+0x48>)
 80099c8:	f7ff ff8a 	bl	80098e0 <friend_cred_set>
		if (err) {
 80099cc:	b900      	cbnz	r0, 80099d0 <friend_cred_update+0x40>
	return 0;
 80099ce:	2000      	movs	r0, #0
}
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	20000bfc 	.word	0x20000bfc
 80099d8:	20000c46 	.word	0x20000c46

080099dc <friend_cred_clear>:
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
 80099dc:	2100      	movs	r1, #0
	cred->net_idx = BT_MESH_KEY_UNUSED;
 80099de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099e2:	8003      	strh	r3, [r0, #0]
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
 80099e4:	8041      	strh	r1, [r0, #2]
	cred->lpn_counter = 0;
 80099e6:	8081      	strh	r1, [r0, #4]
	cred->frnd_counter = 0;
 80099e8:	80c1      	strh	r1, [r0, #6]
	memset(cred->cred, 0, sizeof(cred->cred));
 80099ea:	2242      	movs	r2, #66	; 0x42
 80099ec:	3008      	adds	r0, #8
 80099ee:	f7f6 bf73 	b.w	80008d8 <memset>
	...

080099f4 <friend_cred_create>:
{
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	4605      	mov	r5, r0
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
 80099f8:	481b      	ldr	r0, [pc, #108]	; (8009a68 <friend_cred_create+0x74>)
 80099fa:	8844      	ldrh	r4, [r0, #2]
 80099fc:	b194      	cbz	r4, 8009a24 <friend_cred_create+0x30>
 80099fe:	42a1      	cmp	r1, r4
 8009a00:	d103      	bne.n	8009a0a <friend_cred_create+0x16>
		    (friend_cred[i].addr == addr &&
 8009a02:	8806      	ldrh	r6, [r0, #0]
 8009a04:	8bac      	ldrh	r4, [r5, #28]
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	d00b      	beq.n	8009a22 <friend_cred_create+0x2e>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
 8009a0a:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
 8009a0e:	b1e4      	cbz	r4, 8009a4a <friend_cred_create+0x56>
 8009a10:	42a1      	cmp	r1, r4
 8009a12:	d104      	bne.n	8009a1e <friend_cred_create+0x2a>
		    (friend_cred[i].addr == addr &&
 8009a14:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
 8009a18:	8bac      	ldrh	r4, [r5, #28]
 8009a1a:	42a6      	cmp	r6, r4
 8009a1c:	d015      	beq.n	8009a4a <friend_cred_create+0x56>
		return NULL;
 8009a1e:	2400      	movs	r4, #0
 8009a20:	e01f      	b.n	8009a62 <friend_cred_create+0x6e>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009a22:	2400      	movs	r4, #0
			cred = &friend_cred[i];
 8009a24:	264a      	movs	r6, #74	; 0x4a
 8009a26:	4366      	muls	r6, r4
 8009a28:	1984      	adds	r4, r0, r6
	cred->net_idx = sub->net_idx;
 8009a2a:	8baf      	ldrh	r7, [r5, #28]
 8009a2c:	5387      	strh	r7, [r0, r6]
	cred->addr = addr;
 8009a2e:	8061      	strh	r1, [r4, #2]
	cred->lpn_counter = lpn_counter;
 8009a30:	80a2      	strh	r2, [r4, #4]
	cred->frnd_counter = frnd_counter;
 8009a32:	80e3      	strh	r3, [r4, #6]
	err = friend_cred_set(cred, 0, sub->keys[0].net);
 8009a34:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff ff50 	bl	80098e0 <friend_cred_set>
	if (err) {
 8009a40:	b128      	cbz	r0, 8009a4e <friend_cred_create+0x5a>
			friend_cred_clear(cred);
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff ffca 	bl	80099dc <friend_cred_clear>
 8009a48:	e7e9      	b.n	8009a1e <friend_cred_create+0x2a>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009a4a:	2401      	movs	r4, #1
 8009a4c:	e7ea      	b.n	8009a24 <friend_cred_create+0x30>
	if (sub->kr_flag) {
 8009a4e:	7fab      	ldrb	r3, [r5, #30]
 8009a50:	b13b      	cbz	r3, 8009a62 <friend_cred_create+0x6e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
 8009a52:	f105 0289 	add.w	r2, r5, #137	; 0x89
 8009a56:	2101      	movs	r1, #1
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7ff ff41 	bl	80098e0 <friend_cred_set>
		if (err) {
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d1ef      	bne.n	8009a42 <friend_cred_create+0x4e>
}
 8009a62:	4620      	mov	r0, r4
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000bfc 	.word	0x20000bfc

08009a6c <friend_cred_del>:
		if (cred->addr == addr && cred->net_idx == net_idx) {
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <friend_cred_del+0x38>)
 8009a6e:	885a      	ldrh	r2, [r3, #2]
 8009a70:	428a      	cmp	r2, r1
{
 8009a72:	b510      	push	{r4, lr}
 8009a74:	461a      	mov	r2, r3
		if (cred->addr == addr && cred->net_idx == net_idx) {
 8009a76:	d102      	bne.n	8009a7e <friend_cred_del+0x12>
 8009a78:	881c      	ldrh	r4, [r3, #0]
 8009a7a:	4284      	cmp	r4, r0
 8009a7c:	d00c      	beq.n	8009a98 <friend_cred_del+0x2c>
 8009a7e:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
 8009a82:	428b      	cmp	r3, r1
 8009a84:	d10a      	bne.n	8009a9c <friend_cred_del+0x30>
 8009a86:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	d106      	bne.n	8009a9c <friend_cred_del+0x30>
		struct friend_cred *cred = &friend_cred[i];
 8009a8e:	4806      	ldr	r0, [pc, #24]	; (8009aa8 <friend_cred_del+0x3c>)
			friend_cred_clear(cred);
 8009a90:	f7ff ffa4 	bl	80099dc <friend_cred_clear>
			return 0;
 8009a94:	2000      	movs	r0, #0
 8009a96:	bd10      	pop	{r4, pc}
		struct friend_cred *cred = &friend_cred[i];
 8009a98:	4618      	mov	r0, r3
 8009a9a:	e7f9      	b.n	8009a90 <friend_cred_del+0x24>
	return -ENOENT;
 8009a9c:	f06f 0001 	mvn.w	r0, #1
}
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000bfc 	.word	0x20000bfc
 8009aa8:	20000c46 	.word	0x20000c46

08009aac <friend_cred_get>:
{
 8009aac:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (cred->net_idx != sub->net_idx) {
 8009aae:	4c1c      	ldr	r4, [pc, #112]	; (8009b20 <friend_cred_get+0x74>)
 8009ab0:	8b86      	ldrh	r6, [r0, #28]
 8009ab2:	8827      	ldrh	r7, [r4, #0]
{
 8009ab4:	9d05      	ldr	r5, [sp, #20]
		if (cred->net_idx != sub->net_idx) {
 8009ab6:	42b7      	cmp	r7, r6
 8009ab8:	d103      	bne.n	8009ac2 <friend_cred_get+0x16>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
 8009aba:	b161      	cbz	r1, 8009ad6 <friend_cred_get+0x2a>
 8009abc:	8867      	ldrh	r7, [r4, #2]
 8009abe:	428f      	cmp	r7, r1
 8009ac0:	d029      	beq.n	8009b16 <friend_cred_get+0x6a>
		if (cred->net_idx != sub->net_idx) {
 8009ac2:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
 8009ac6:	42b7      	cmp	r7, r6
 8009ac8:	d127      	bne.n	8009b1a <friend_cred_get+0x6e>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
 8009aca:	b119      	cbz	r1, 8009ad4 <friend_cred_get+0x28>
 8009acc:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
 8009ad0:	428e      	cmp	r6, r1
 8009ad2:	d122      	bne.n	8009b1a <friend_cred_get+0x6e>
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009ad4:	2101      	movs	r1, #1
		if (nid) {
 8009ad6:	b142      	cbz	r2, 8009aea <friend_cred_get+0x3e>
			*nid = cred->cred[sub->kr_flag].nid;
 8009ad8:	7f86      	ldrb	r6, [r0, #30]
 8009ada:	eb06 1746 	add.w	r7, r6, r6, lsl #5
 8009ade:	264a      	movs	r6, #74	; 0x4a
 8009ae0:	fb06 7601 	mla	r6, r6, r1, r7
 8009ae4:	4426      	add	r6, r4
 8009ae6:	7a36      	ldrb	r6, [r6, #8]
 8009ae8:	7016      	strb	r6, [r2, #0]
		if (enc) {
 8009aea:	b143      	cbz	r3, 8009afe <friend_cred_get+0x52>
			*enc = cred->cred[sub->kr_flag].enc;
 8009aec:	7f82      	ldrb	r2, [r0, #30]
 8009aee:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8009af2:	3209      	adds	r2, #9
 8009af4:	264a      	movs	r6, #74	; 0x4a
 8009af6:	fb06 2201 	mla	r2, r6, r1, r2
 8009afa:	4422      	add	r2, r4
 8009afc:	601a      	str	r2, [r3, #0]
		if (priv) {
 8009afe:	b145      	cbz	r5, 8009b12 <friend_cred_get+0x66>
			*priv = cred->cred[sub->kr_flag].privacy;
 8009b00:	7f83      	ldrb	r3, [r0, #30]
 8009b02:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8009b06:	3319      	adds	r3, #25
 8009b08:	224a      	movs	r2, #74	; 0x4a
 8009b0a:	fb02 3101 	mla	r1, r2, r1, r3
 8009b0e:	4421      	add	r1, r4
 8009b10:	6029      	str	r1, [r5, #0]
		return 0;
 8009b12:	2000      	movs	r0, #0
 8009b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
 8009b16:	2100      	movs	r1, #0
 8009b18:	e7dd      	b.n	8009ad6 <friend_cred_get+0x2a>
	return -ENOENT;
 8009b1a:	f06f 0001 	mvn.w	r0, #1
 8009b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b20:	20000bfc 	.word	0x20000bfc

08009b24 <bt_mesh_net_flags>:
	if (sub && sub->kr_flag) {
 8009b24:	b100      	cbz	r0, 8009b28 <bt_mesh_net_flags+0x4>
 8009b26:	7f80      	ldrb	r0, [r0, #30]
	if (bt_mesh.iv_update) {
 8009b28:	4b03      	ldr	r3, [pc, #12]	; (8009b38 <bt_mesh_net_flags+0x14>)
 8009b2a:	79db      	ldrb	r3, [r3, #7]
 8009b2c:	07db      	lsls	r3, r3, #31
		flags |= BT_MESH_NET_FLAG_IVU;
 8009b2e:	bf48      	it	mi
 8009b30:	f040 0002 	orrmi.w	r0, r0, #2
}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20005bd0 	.word	0x20005bd0

08009b3c <bt_mesh_net_beacon_update>:
{
 8009b3c:	b507      	push	{r0, r1, r2, lr}
 8009b3e:	4602      	mov	r2, r0
	u8_t flags = bt_mesh_net_flags(sub);
 8009b40:	f7ff fff0 	bl	8009b24 <bt_mesh_net_flags>
	if (sub->kr_flag) {
 8009b44:	7f93      	ldrb	r3, [r2, #30]
	u8_t flags = bt_mesh_net_flags(sub);
 8009b46:	4601      	mov	r1, r0
	if (sub->kr_flag) {
 8009b48:	b16b      	cbz	r3, 8009b66 <bt_mesh_net_beacon_update+0x2a>
		keys = &sub->keys[1];
 8009b4a:	f102 0089 	add.w	r0, r2, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
 8009b4e:	3228      	adds	r2, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <bt_mesh_net_beacon_update+0x30>)
 8009b52:	9200      	str	r2, [sp, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f100 0221 	add.w	r2, r0, #33	; 0x21
 8009b5a:	3049      	adds	r0, #73	; 0x49
 8009b5c:	f002 fadf 	bl	800c11e <bt_mesh_beacon_auth>
}
 8009b60:	b003      	add	sp, #12
 8009b62:	f85d fb04 	ldr.w	pc, [sp], #4
		keys = &sub->keys[0];
 8009b66:	f102 0030 	add.w	r0, r2, #48	; 0x30
 8009b6a:	e7f0      	b.n	8009b4e <bt_mesh_net_beacon_update+0x12>
 8009b6c:	20005bd0 	.word	0x20005bd0

08009b70 <bt_mesh_net_create>:
{
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (bt_mesh.valid) {
 8009b74:	4c24      	ldr	r4, [pc, #144]	; (8009c08 <bt_mesh_net_create+0x98>)
 8009b76:	79e5      	ldrb	r5, [r4, #7]
 8009b78:	f015 0510 	ands.w	r5, r5, #16
{
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	460e      	mov	r6, r1
 8009b80:	4691      	mov	r9, r2
 8009b82:	461f      	mov	r7, r3
	if (bt_mesh.valid) {
 8009b84:	d13c      	bne.n	8009c00 <bt_mesh_net_create+0x90>
	memset(msg_cache, 0, sizeof(msg_cache));
 8009b86:	4629      	mov	r1, r5
 8009b88:	2250      	movs	r2, #80	; 0x50
 8009b8a:	4820      	ldr	r0, [pc, #128]	; (8009c0c <bt_mesh_net_create+0x9c>)
 8009b8c:	f7f6 fea4 	bl	80008d8 <memset>
	msg_cache_next = 0;
 8009b90:	4b1f      	ldr	r3, [pc, #124]	; (8009c10 <bt_mesh_net_create+0xa0>)
 8009b92:	801d      	strh	r5, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
 8009b94:	f006 0301 	and.w	r3, r6, #1
 8009b98:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
 8009b9c:	4649      	mov	r1, r9
	if (sub->kr_flag) {
 8009b9e:	b343      	cbz	r3, 8009bf2 <bt_mesh_net_create+0x82>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
 8009ba0:	f204 203d 	addw	r0, r4, #573	; 0x23d
 8009ba4:	f7ff fe66 	bl	8009874 <bt_mesh_net_keys_create>
		if (err) {
 8009ba8:	b118      	cbz	r0, 8009bb2 <bt_mesh_net_create+0x42>
			return -EIO;
 8009baa:	f06f 0004 	mvn.w	r0, #4
 8009bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
	bt_mesh.valid = 1;
 8009bb8:	79e3      	ldrb	r3, [r4, #7]
	sub->net_idx = idx;
 8009bba:	f8a4 81d0 	strh.w	r8, [r4, #464]	; 0x1d0
	bt_mesh.valid = 1;
 8009bbe:	f043 0310 	orr.w	r3, r3, #16
 8009bc2:	71e3      	strb	r3, [r4, #7]
		sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f884 31d4 	strb.w	r3, [r4, #468]	; 0x1d4
 8009bca:	f008 fa63 	bl	8012094 <_impl_k_uptime_get_32>
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
 8009bce:	79e3      	ldrb	r3, [r4, #7]
		sub->node_id_start = k_uptime_get_32();
 8009bd0:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
 8009bd4:	0876      	lsrs	r6, r6, #1
 8009bd6:	f366 0300 	bfi	r3, r6, #0, #1
 8009bda:	71e3      	strb	r3, [r4, #7]
	bt_mesh.iv_index = iv_index;
 8009bdc:	6027      	str	r7, [r4, #0]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 8009bde:	f008 fa6d 	bl	80120bc <_impl_k_uptime_get>
	bt_mesh.last_update = k_uptime_get();
 8009be2:	e9c4 0102 	strd	r0, r1, [r4, #8]
	bt_mesh_net_beacon_update(sub);
 8009be6:	480b      	ldr	r0, [pc, #44]	; (8009c14 <bt_mesh_net_create+0xa4>)
 8009be8:	f7ff ffa8 	bl	8009b3c <bt_mesh_net_beacon_update>
	return 0;
 8009bec:	2000      	movs	r0, #0
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
 8009bf2:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009bf6:	f7ff fe3d 	bl	8009874 <bt_mesh_net_keys_create>
		if (err) {
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0dc      	beq.n	8009bb8 <bt_mesh_net_create+0x48>
 8009bfe:	e7d4      	b.n	8009baa <bt_mesh_net_create+0x3a>
		return -EALREADY;
 8009c00:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
 8009c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c08:	20005bd0 	.word	0x20005bd0
 8009c0c:	20000c90 	.word	0x20000c90
 8009c10:	20000ce0 	.word	0x20000ce0
 8009c14:	20005d84 	.word	0x20005d84

08009c18 <bt_mesh_net_revoke_keys>:
{
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4605      	mov	r5, r0
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009c1c:	4c15      	ldr	r4, [pc, #84]	; (8009c74 <bt_mesh_net_revoke_keys+0x5c>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
 8009c1e:	2259      	movs	r2, #89	; 0x59
 8009c20:	f100 0189 	add.w	r1, r0, #137	; 0x89
 8009c24:	3030      	adds	r0, #48	; 0x30
 8009c26:	f7f6 fe2b 	bl	8000880 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009c2a:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 8009c2e:	8bab      	ldrh	r3, [r5, #28]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d10c      	bne.n	8009c4e <bt_mesh_net_revoke_keys+0x36>
 8009c34:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 8009c38:	b14b      	cbz	r3, 8009c4e <bt_mesh_net_revoke_keys+0x36>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
 8009c3a:	2211      	movs	r2, #17
 8009c3c:	f504 71bd 	add.w	r1, r4, #378	; 0x17a
 8009c40:	f204 1069 	addw	r0, r4, #361	; 0x169
 8009c44:	f7f6 fe1c 	bl	8000880 <memcpy>
		key->updated = false;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		if (key->net_idx != sub->net_idx || !key->updated) {
 8009c4e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 8009c52:	8bab      	ldrh	r3, [r5, #28]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d10b      	bne.n	8009c70 <bt_mesh_net_revoke_keys+0x58>
 8009c58:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
 8009c5c:	b143      	cbz	r3, 8009c70 <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
 8009c5e:	4906      	ldr	r1, [pc, #24]	; (8009c78 <bt_mesh_net_revoke_keys+0x60>)
 8009c60:	2211      	movs	r2, #17
 8009c62:	f1a1 0011 	sub.w	r0, r1, #17
 8009c66:	f7f6 fe0b 	bl	8000880 <memcpy>
		key->updated = false;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	20005bd0 	.word	0x20005bd0
 8009c78:	20005d72 	.word	0x20005d72

08009c7c <bt_mesh_kr_update>:
{
 8009c7c:	b510      	push	{r4, lr}
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
 8009c7e:	7f83      	ldrb	r3, [r0, #30]
 8009c80:	428b      	cmp	r3, r1
{
 8009c82:	4604      	mov	r4, r0
 8009c84:	7fc0      	ldrb	r0, [r0, #31]
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
 8009c86:	d002      	beq.n	8009c8e <bt_mesh_kr_update+0x12>
 8009c88:	b908      	cbnz	r0, 8009c8e <bt_mesh_kr_update+0x12>
		return false;
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	bd10      	pop	{r4, pc}
	sub->kr_flag = new_kr;
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	bf14      	ite	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	2300      	moveq	r3, #0
 8009c96:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
 8009c98:	d004      	beq.n	8009ca4 <bt_mesh_kr_update+0x28>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
 8009c9a:	2801      	cmp	r0, #1
 8009c9c:	d1f5      	bne.n	8009c8a <bt_mesh_kr_update+0xe>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	77e3      	strb	r3, [r4, #31]
			return true;
 8009ca2:	bd10      	pop	{r4, pc}
		switch (sub->kr_phase) {
 8009ca4:	2801      	cmp	r0, #1
 8009ca6:	d00b      	beq.n	8009cc0 <bt_mesh_kr_update+0x44>
 8009ca8:	2802      	cmp	r0, #2
 8009caa:	d1ee      	bne.n	8009c8a <bt_mesh_kr_update+0xe>
			bt_mesh_net_revoke_keys(sub);
 8009cac:	4620      	mov	r0, r4
 8009cae:	f7ff ffb3 	bl	8009c18 <bt_mesh_net_revoke_keys>
				friend_cred_refresh(sub->net_idx);
 8009cb2:	8ba0      	ldrh	r0, [r4, #28]
 8009cb4:	f7ff fe48 	bl	8009948 <friend_cred_refresh>
			sub->kr_phase = BT_MESH_KR_NORMAL;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	77e3      	strb	r3, [r4, #31]
			return true;
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	bd10      	pop	{r4, pc}
			if (!new_key) {
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d1f3      	bne.n	8009cac <bt_mesh_kr_update+0x30>
 8009cc4:	e7e1      	b.n	8009c8a <bt_mesh_kr_update+0xe>
	...

08009cc8 <bt_mesh_rpl_reset>:
{
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	4c0a      	ldr	r4, [pc, #40]	; (8009cf4 <bt_mesh_rpl_reset+0x2c>)
				rpl->old_iv = true;
 8009ccc:	2601      	movs	r6, #1
 8009cce:	f104 0550 	add.w	r5, r4, #80	; 0x50
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 8009cd2:	42ac      	cmp	r4, r5
 8009cd4:	d100      	bne.n	8009cd8 <bt_mesh_rpl_reset+0x10>
}
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
		if (rpl->src) {
 8009cd8:	8823      	ldrh	r3, [r4, #0]
 8009cda:	b133      	cbz	r3, 8009cea <bt_mesh_rpl_reset+0x22>
			if (rpl->old_iv) {
 8009cdc:	78a3      	ldrb	r3, [r4, #2]
 8009cde:	b133      	cbz	r3, 8009cee <bt_mesh_rpl_reset+0x26>
				memset(rpl, 0, sizeof(*rpl));
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f7f6 fdf7 	bl	80008d8 <memset>
 8009cea:	3408      	adds	r4, #8
 8009cec:	e7f1      	b.n	8009cd2 <bt_mesh_rpl_reset+0xa>
				rpl->old_iv = true;
 8009cee:	70a6      	strb	r6, [r4, #2]
 8009cf0:	e7fb      	b.n	8009cea <bt_mesh_rpl_reset+0x22>
 8009cf2:	bf00      	nop
 8009cf4:	20005f4c 	.word	0x20005f4c

08009cf8 <bt_mesh_net_sec_update>:
{
 8009cf8:	b510      	push	{r4, lr}
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	b158      	cbz	r0, 8009d16 <bt_mesh_net_sec_update+0x1e>
 8009cfe:	8b80      	ldrh	r0, [r0, #28]
 8009d00:	f005 fb98 	bl	800f434 <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 8009d04:	f004 fc30 	bl	800e568 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 8009d08:	2801      	cmp	r0, #1
 8009d0a:	d107      	bne.n	8009d1c <bt_mesh_net_sec_update+0x24>
		bt_mesh_proxy_beacon_send(sub);
 8009d0c:	4620      	mov	r0, r4
}
 8009d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
 8009d12:	f007 b9cf 	b.w	80110b4 <bt_mesh_proxy_beacon_send>
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
 8009d16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009d1a:	e7f1      	b.n	8009d00 <bt_mesh_net_sec_update+0x8>
 8009d1c:	bd10      	pop	{r4, pc}
	...

08009d20 <bt_mesh_net_iv_update>:
{
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_mesh.iv_update) {
 8009d22:	4c39      	ldr	r4, [pc, #228]	; (8009e08 <bt_mesh_net_iv_update+0xe8>)
 8009d24:	79e7      	ldrb	r7, [r4, #7]
		if (iv_index != bt_mesh.iv_index) {
 8009d26:	6823      	ldr	r3, [r4, #0]
	if (bt_mesh.iv_update) {
 8009d28:	f017 0701 	ands.w	r7, r7, #1
{
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	460d      	mov	r5, r1
	if (bt_mesh.iv_update) {
 8009d30:	d01c      	beq.n	8009d6c <bt_mesh_net_iv_update+0x4c>
		if (iv_index != bt_mesh.iv_index) {
 8009d32:	4283      	cmp	r3, r0
 8009d34:	d002      	beq.n	8009d3c <bt_mesh_net_iv_update+0x1c>
			return false;
 8009d36:	2500      	movs	r5, #0
}
 8009d38:	4628      	mov	r0, r5
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_update) {
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	d1fa      	bne.n	8009d36 <bt_mesh_net_iv_update+0x16>
 8009d40:	f008 f9bc 	bl	80120bc <_impl_k_uptime_get>
		s64_t delta = k_uptime_get() - bt_mesh.last_update;
 8009d44:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8009d48:	1a80      	subs	r0, r0, r2
 8009d4a:	eb61 0103 	sbc.w	r1, r1, r3
		if (delta < K_HOURS(96)) {
 8009d4e:	a32c      	add	r3, pc, #176	; (adr r3, 8009e00 <bt_mesh_net_iv_update+0xe0>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	4282      	cmp	r2, r0
 8009d56:	418b      	sbcs	r3, r1
 8009d58:	daed      	bge.n	8009d36 <bt_mesh_net_iv_update+0x16>
	if (!iv_update && bt_mesh_tx_in_progress()) {
 8009d5a:	b9dd      	cbnz	r5, 8009d94 <bt_mesh_net_iv_update+0x74>
 8009d5c:	f001 f880 	bl	800ae60 <bt_mesh_tx_in_progress>
 8009d60:	b1c0      	cbz	r0, 8009d94 <bt_mesh_net_iv_update+0x74>
		bt_mesh.pending_update = 1;
 8009d62:	79e3      	ldrb	r3, [r4, #7]
 8009d64:	f043 0308 	orr.w	r3, r3, #8
 8009d68:	71e3      	strb	r3, [r4, #7]
		return false;
 8009d6a:	e7e5      	b.n	8009d38 <bt_mesh_net_iv_update+0x18>
		if (iv_index < bt_mesh.iv_index ||
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	d9e2      	bls.n	8009d36 <bt_mesh_net_iv_update+0x16>
		    iv_index > bt_mesh.iv_index + 42) {
 8009d70:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
 8009d74:	4290      	cmp	r0, r2
 8009d76:	d8de      	bhi.n	8009d36 <bt_mesh_net_iv_update+0x16>
		if (iv_index > bt_mesh.iv_index + 1) {
 8009d78:	3301      	adds	r3, #1
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	d931      	bls.n	8009de2 <bt_mesh_net_iv_update+0xc2>
			memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
 8009d7e:	2250      	movs	r2, #80	; 0x50
 8009d80:	4639      	mov	r1, r7
 8009d82:	f504 705f 	add.w	r0, r4, #892	; 0x37c
 8009d86:	f7f6 fda7 	bl	80008d8 <memset>
			bt_mesh.seq = 0;
 8009d8a:	6863      	ldr	r3, [r4, #4]
			bt_mesh.iv_index = iv_index;
 8009d8c:	6026      	str	r6, [r4, #0]
			bt_mesh.seq = 0;
 8009d8e:	f367 0317 	bfi	r3, r7, #0, #24
 8009d92:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = iv_update;
 8009d94:	79e3      	ldrb	r3, [r4, #7]
 8009d96:	f365 0300 	bfi	r3, r5, #0, #1
 8009d9a:	71e3      	strb	r3, [r4, #7]
	if (bt_mesh.iv_update) {
 8009d9c:	f013 0301 	ands.w	r3, r3, #1
 8009da0:	d023      	beq.n	8009dea <bt_mesh_net_iv_update+0xca>
		bt_mesh.iv_index = iv_index;
 8009da2:	6026      	str	r6, [r4, #0]
		bt_mesh_rpl_reset();
 8009da4:	f7ff ff90 	bl	8009cc8 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 8009da8:	4a18      	ldr	r2, [pc, #96]	; (8009e0c <bt_mesh_net_iv_update+0xec>)
 8009daa:	4919      	ldr	r1, [pc, #100]	; (8009e10 <bt_mesh_net_iv_update+0xf0>)
 8009dac:	4819      	ldr	r0, [pc, #100]	; (8009e14 <bt_mesh_net_iv_update+0xf4>)
 8009dae:	f008 fca3 	bl	80126f8 <k_delayed_work_submit_to_queue>
 8009db2:	f008 f983 	bl	80120bc <_impl_k_uptime_get>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009db6:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8009dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dbe:	429a      	cmp	r2, r3
	bt_mesh.last_update = k_uptime_get();
 8009dc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009dc4:	d002      	beq.n	8009dcc <bt_mesh_net_iv_update+0xac>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
 8009dc6:	4814      	ldr	r0, [pc, #80]	; (8009e18 <bt_mesh_net_iv_update+0xf8>)
 8009dc8:	f7ff feb8 	bl	8009b3c <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 8009dcc:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8009dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d002      	beq.n	8009dde <bt_mesh_net_iv_update+0xbe>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
 8009dd8:	4810      	ldr	r0, [pc, #64]	; (8009e1c <bt_mesh_net_iv_update+0xfc>)
 8009dda:	f7ff feaf 	bl	8009b3c <bt_mesh_net_beacon_update>
	return true;
 8009dde:	2501      	movs	r5, #1
 8009de0:	e7aa      	b.n	8009d38 <bt_mesh_net_iv_update+0x18>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
 8009de2:	d1a8      	bne.n	8009d36 <bt_mesh_net_iv_update+0x16>
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d1ab      	bne.n	8009d40 <bt_mesh_net_iv_update+0x20>
 8009de8:	e7a5      	b.n	8009d36 <bt_mesh_net_iv_update+0x16>
		bt_mesh.seq = 0;
 8009dea:	6862      	ldr	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8009dec:	4808      	ldr	r0, [pc, #32]	; (8009e10 <bt_mesh_net_iv_update+0xf0>)
		bt_mesh.seq = 0;
 8009dee:	f363 0217 	bfi	r2, r3, #0, #24
 8009df2:	6062      	str	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
 8009df4:	f008 fc34 	bl	8012660 <k_delayed_work_cancel>
 8009df8:	e7db      	b.n	8009db2 <bt_mesh_net_iv_update+0x92>
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w
 8009e00:	14996fff 	.word	0x14996fff
 8009e04:	00000000 	.word	0x00000000
 8009e08:	20005bd0 	.word	0x20005bd0
 8009e0c:	19bfcc00 	.word	0x19bfcc00
 8009e10:	20005cfc 	.word	0x20005cfc
 8009e14:	20001480 	.word	0x20001480
 8009e18:	20005d84 	.word	0x20005d84
 8009e1c:	20005e68 	.word	0x20005e68

08009e20 <ivu_complete>:
		bt_mesh_net_relay(buf, &rx);
	}
}

static void ivu_complete(struct k_work *work)
{
 8009e20:	b508      	push	{r3, lr}
	BT_DBG("");

	bt_mesh_beacon_ivu_initiator(true);
 8009e22:	2001      	movs	r0, #1
 8009e24:	f7ff fc14 	bl	8009650 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <ivu_complete+0x18>)
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6818      	ldr	r0, [r3, #0]
}
 8009e2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
 8009e32:	f7ff bf75 	b.w	8009d20 <bt_mesh_net_iv_update>
 8009e36:	bf00      	nop
 8009e38:	20005bd0 	.word	0x20005bd0

08009e3c <bt_mesh_net_resend>:
{
 8009e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009e40:	4c34      	ldr	r4, [pc, #208]	; (8009f14 <bt_mesh_net_resend+0xd8>)
 8009e42:	2759      	movs	r7, #89	; 0x59
 8009e44:	4357      	muls	r7, r2
{
 8009e46:	4699      	mov	r9, r3
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009e48:	79e3      	ldrb	r3, [r4, #7]
{
 8009e4a:	460e      	mov	r6, r1
	priv = sub->keys[new_key].privacy;
 8009e4c:	f107 0869 	add.w	r8, r7, #105	; 0x69
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009e50:	6821      	ldr	r1, [r4, #0]
	priv = sub->keys[new_key].privacy;
 8009e52:	4480      	add	r8, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009e54:	f003 0301 	and.w	r3, r3, #1
{
 8009e58:	4682      	mov	sl, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009e5a:	4642      	mov	r2, r8
 8009e5c:	1ac9      	subs	r1, r1, r3
 8009e5e:	68b0      	ldr	r0, [r6, #8]
 8009e60:	f001 ff94 	bl	800bd8c <bt_mesh_net_obfuscate>
	if (err) {
 8009e64:	4605      	mov	r5, r0
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d151      	bne.n	8009f0e <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009e6a:	79e2      	ldrb	r2, [r4, #7]
 8009e6c:	6821      	ldr	r1, [r4, #0]
	enc = sub->keys[new_key].enc;
 8009e6e:	3741      	adds	r7, #65	; 0x41
 8009e70:	4457      	add	r7, sl
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009e72:	f002 0201 	and.w	r2, r2, #1
 8009e76:	f106 0a08 	add.w	sl, r6, #8
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	1a8a      	subs	r2, r1, r2
 8009e7e:	4638      	mov	r0, r7
 8009e80:	4651      	mov	r1, sl
 8009e82:	f001 fff6 	bl	800be72 <bt_mesh_net_decrypt>
	if (err) {
 8009e86:	4605      	mov	r5, r0
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d140      	bne.n	8009f0e <bt_mesh_net_resend+0xd2>
	buf->data[2] = (bt_mesh.seq >> 16);
 8009e8c:	68b3      	ldr	r3, [r6, #8]
 8009e8e:	79a2      	ldrb	r2, [r4, #6]
 8009e90:	709a      	strb	r2, [r3, #2]
	buf->data[3] = (bt_mesh.seq >> 8);
 8009e92:	6863      	ldr	r3, [r4, #4]
 8009e94:	68b2      	ldr	r2, [r6, #8]
 8009e96:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009e9a:	70d3      	strb	r3, [r2, #3]
	buf->data[4] = bt_mesh.seq++;
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	68b1      	ldr	r1, [r6, #8]
 8009ea0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8009ea4:	1c50      	adds	r0, r2, #1
 8009ea6:	f360 0317 	bfi	r3, r0, #0, #24
 8009eaa:	6063      	str	r3, [r4, #4]
 8009eac:	710a      	strb	r2, [r1, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
 8009eae:	79e2      	ldrb	r2, [r4, #7]
 8009eb0:	6821      	ldr	r1, [r4, #0]
 8009eb2:	f002 0201 	and.w	r2, r2, #1
 8009eb6:	462b      	mov	r3, r5
 8009eb8:	1a8a      	subs	r2, r1, r2
 8009eba:	4638      	mov	r0, r7
 8009ebc:	4651      	mov	r1, sl
 8009ebe:	f001 ff8d 	bl	800bddc <bt_mesh_net_encrypt>
	if (err) {
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	bb18      	cbnz	r0, 8009f0e <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ec6:	79e3      	ldrb	r3, [r4, #7]
 8009ec8:	6821      	ldr	r1, [r4, #0]
 8009eca:	68b0      	ldr	r0, [r6, #8]
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	1ac9      	subs	r1, r1, r3
 8009ed4:	f001 ff5a 	bl	800bd8c <bt_mesh_net_obfuscate>
	if (err) {
 8009ed8:	4605      	mov	r5, r0
 8009eda:	b9c0      	cbnz	r0, 8009f0e <bt_mesh_net_resend+0xd2>
	bt_mesh_adv_send(buf, cb, cb_data);
 8009edc:	9a08      	ldr	r2, [sp, #32]
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff f9cf 	bl	8009284 <bt_mesh_adv_send>
	if (!bt_mesh.iv_update && bt_mesh.seq > IV_UPDATE_SEQ_LIMIT) {
 8009ee6:	79e3      	ldrb	r3, [r4, #7]
 8009ee8:	07db      	lsls	r3, r3, #31
 8009eea:	d410      	bmi.n	8009f0e <bt_mesh_net_resend+0xd2>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	4a0a      	ldr	r2, [pc, #40]	; (8009f18 <bt_mesh_net_resend+0xdc>)
 8009ef0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	dd0a      	ble.n	8009f0e <bt_mesh_net_resend+0xd2>
		bt_mesh_beacon_ivu_initiator(true);
 8009ef8:	2001      	movs	r0, #1
 8009efa:	f7ff fba9 	bl	8009650 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	2101      	movs	r1, #1
 8009f02:	4408      	add	r0, r1
 8009f04:	f7ff ff0c 	bl	8009d20 <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7ff fef5 	bl	8009cf8 <bt_mesh_net_sec_update>
}
 8009f0e:	4628      	mov	r0, r5
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f14:	20005bd0 	.word	0x20005bd0
 8009f18:	007a1200 	.word	0x007a1200

08009f1c <bt_mesh_net_encode>:
{
 8009f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 8009f20:	6843      	ldr	r3, [r0, #4]
 8009f22:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f2a:	4598      	cmp	r8, r3
{
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460e      	mov	r6, r1
 8009f30:	4617      	mov	r7, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009f32:	d008      	beq.n	8009f46 <bt_mesh_net_encode+0x2a>
	} else if (net_buf_simple_tailroom(buf) < 4) {
 8009f34:	4630      	mov	r0, r6
 8009f36:	f007 fc8e 	bl	8011856 <net_buf_simple_tailroom>
 8009f3a:	2803      	cmp	r0, #3
 8009f3c:	d809      	bhi.n	8009f52 <bt_mesh_net_encode+0x36>
		return -EINVAL;
 8009f3e:	f06f 0015 	mvn.w	r0, #21
 8009f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
 8009f46:	4608      	mov	r0, r1
 8009f48:	f007 fc85 	bl	8011856 <net_buf_simple_tailroom>
 8009f4c:	2807      	cmp	r0, #7
 8009f4e:	d8f1      	bhi.n	8009f34 <bt_mesh_net_encode+0x18>
 8009f50:	e7f5      	b.n	8009f3e <bt_mesh_net_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
 8009f52:	686b      	ldr	r3, [r5, #4]
	seq[0] = (bt_mesh.seq >> 16);
 8009f54:	4c2d      	ldr	r4, [pc, #180]	; (800a00c <bt_mesh_net_encode+0xf0>)
	net_buf_simple_push_be16(buf, tx->ctx->addr);
 8009f56:	8899      	ldrh	r1, [r3, #4]
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f007 fc25 	bl	80117a8 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
 8009f5e:	8929      	ldrh	r1, [r5, #8]
 8009f60:	4630      	mov	r0, r6
 8009f62:	f007 fc21 	bl	80117a8 <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
 8009f66:	2103      	movs	r1, #3
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f007 fc15 	bl	8011798 <net_buf_simple_push>
	seq[0] = (bt_mesh.seq >> 16);
 8009f6e:	79a3      	ldrb	r3, [r4, #6]
 8009f70:	7003      	strb	r3, [r0, #0]
	seq[1] = (bt_mesh.seq >> 8);
 8009f72:	6863      	ldr	r3, [r4, #4]
 8009f74:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8009f78:	7043      	strb	r3, [r0, #1]
	seq[2] = bt_mesh.seq++;
 8009f7a:	6863      	ldr	r3, [r4, #4]
 8009f7c:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8009f80:	1c51      	adds	r1, r2, #1
 8009f82:	f361 0317 	bfi	r3, r1, #0, #24
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	7082      	strb	r2, [r0, #2]
	if (ctl) {
 8009f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f8e:	4598      	cmp	r8, r3
 8009f90:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
 8009f92:	79d9      	ldrb	r1, [r3, #7]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
 8009f94:	4630      	mov	r0, r6
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
 8009f96:	bf08      	it	eq
 8009f98:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
 8009f9c:	f007 fc18 	bl	80117d0 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 8009fa0:	f8d5 8000 	ldr.w	r8, [r5]
		tx->friend_cred = 0;
 8009fa4:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 8009fa6:	f898 201e 	ldrb.w	r2, [r8, #30]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 8009faa:	6821      	ldr	r1, [r4, #0]
		tx->friend_cred = 0;
 8009fac:	f36f 0300 	bfc	r3, #0, #1
 8009fb0:	72eb      	strb	r3, [r5, #11]
 8009fb2:	2559      	movs	r5, #89	; 0x59
 8009fb4:	4355      	muls	r5, r2
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 8009fb6:	79e3      	ldrb	r3, [r4, #7]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
 8009fb8:	eb08 0205 	add.w	r2, r8, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
 8009fbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fc0:	1acb      	subs	r3, r1, r3
 8009fc2:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8009fc6:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 8009fca:	b2c9      	uxtb	r1, r1
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f007 fbff 	bl	80117d0 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
 8009fd2:	79e2      	ldrb	r2, [r4, #7]
 8009fd4:	6821      	ldr	r1, [r4, #0]
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
 8009fd6:	f105 0941 	add.w	r9, r5, #65	; 0x41
 8009fda:	44c1      	add	r9, r8
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
 8009fdc:	f002 0201 	and.w	r2, r2, #1
 8009fe0:	1a8a      	subs	r2, r1, r2
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f001 fef8 	bl	800bddc <bt_mesh_net_encrypt>
	if (err) {
 8009fec:	b960      	cbnz	r0, 800a008 <bt_mesh_net_encode+0xec>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009fee:	79e3      	ldrb	r3, [r4, #7]
 8009ff0:	6821      	ldr	r1, [r4, #0]
 8009ff2:	6830      	ldr	r0, [r6, #0]
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
 8009ff4:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	4442      	add	r2, r8
 8009ffe:	1ac9      	subs	r1, r1, r3
}
 800a000:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
 800a004:	f001 bec2 	b.w	800bd8c <bt_mesh_net_obfuscate>
}
 800a008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00c:	20005bd0 	.word	0x20005bd0

0800a010 <bt_mesh_net_send>:
{
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a014:	6846      	ldr	r6, [r0, #4]
{
 800a016:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a018:	79f3      	ldrb	r3, [r6, #7]
 800a01a:	2bff      	cmp	r3, #255	; 0xff
{
 800a01c:	4605      	mov	r5, r0
 800a01e:	4688      	mov	r8, r1
 800a020:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
 800a022:	d102      	bne.n	800a02a <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
 800a024:	f004 fc44 	bl	800e8b0 <bt_mesh_default_ttl_get>
 800a028:	71f0      	strb	r0, [r6, #7]
	err = bt_mesh_net_encode(tx, &buf->b, false);
 800a02a:	f108 0908 	add.w	r9, r8, #8
 800a02e:	2200      	movs	r2, #0
 800a030:	4649      	mov	r1, r9
 800a032:	4628      	mov	r0, r5
 800a034:	f7ff ff72 	bl	8009f1c <bt_mesh_net_encode>
	if (err) {
 800a038:	4606      	mov	r6, r0
 800a03a:	b9c8      	cbnz	r0, 800a070 <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1) {
 800a03c:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a03e:	79da      	ldrb	r2, [r3, #7]
 800a040:	2a01      	cmp	r2, #1
 800a042:	d01b      	beq.n	800a07c <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
 800a044:	8899      	ldrh	r1, [r3, #4]
 800a046:	4648      	mov	r0, r9
 800a048:	f007 f924 	bl	8011294 <bt_mesh_proxy_relay>
 800a04c:	b1b0      	cbz	r0, 800a07c <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800a04e:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
 800a050:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dd11      	ble.n	800a07c <bt_mesh_net_send+0x6c>
			if (cb) {
 800a058:	b154      	cbz	r4, 800a070 <bt_mesh_net_send+0x60>
				if (cb->start) {
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	b11b      	cbz	r3, 800a066 <bt_mesh_net_send+0x56>
					cb->start(0, 0, cb_data);
 800a05e:	463a      	mov	r2, r7
 800a060:	4631      	mov	r1, r6
 800a062:	4630      	mov	r0, r6
 800a064:	4798      	blx	r3
				if (cb->end) {
 800a066:	6863      	ldr	r3, [r4, #4]
 800a068:	b113      	cbz	r3, 800a070 <bt_mesh_net_send+0x60>
					cb->end(0, cb_data);
 800a06a:	4639      	mov	r1, r7
 800a06c:	2000      	movs	r0, #0
 800a06e:	4798      	blx	r3
	net_buf_unref(buf);
 800a070:	4640      	mov	r0, r8
 800a072:	f007 fb2b 	bl	80116cc <net_buf_unref>
}
 800a076:	4630      	mov	r0, r6
 800a078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
 800a07c:	686b      	ldr	r3, [r5, #4]
 800a07e:	8898      	ldrh	r0, [r3, #4]
 800a080:	f002 f9b2 	bl	800c3e8 <bt_mesh_fixed_group_match>
 800a084:	b318      	cbz	r0, 800a0ce <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
 800a086:	bb94      	cbnz	r4, 800a0ee <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
 800a088:	4640      	mov	r0, r8
 800a08a:	f007 fb3b 	bl	8011704 <net_buf_ref>
 800a08e:	4601      	mov	r1, r0
 800a090:	481b      	ldr	r0, [pc, #108]	; (800a100 <bt_mesh_net_send+0xf0>)
 800a092:	f007 fac3 	bl	801161c <net_buf_slist_put>
		if (cb && cb->end) {
 800a096:	b124      	cbz	r4, 800a0a2 <bt_mesh_net_send+0x92>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	b113      	cbz	r3, 800a0a2 <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
 800a09c:	4639      	mov	r1, r7
 800a09e:	2000      	movs	r0, #0
 800a0a0:	4798      	blx	r3
 800a0a2:	f3bf 8f5b 	dmb	ish
 800a0a6:	4917      	ldr	r1, [pc, #92]	; (800a104 <bt_mesh_net_send+0xf4>)
 800a0a8:	e851 3f00 	ldrex	r3, [r1]
 800a0ac:	f043 0201 	orr.w	r2, r3, #1
 800a0b0:	e841 2000 	strex	r0, r2, [r1]
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d1f7      	bne.n	800a0a8 <bt_mesh_net_send+0x98>
 800a0b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800a0bc:	f013 0401 	ands.w	r4, r3, #1
 800a0c0:	d1d6      	bne.n	800a070 <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
 800a0c2:	3908      	subs	r1, #8
 800a0c4:	4810      	ldr	r0, [pc, #64]	; (800a108 <bt_mesh_net_send+0xf8>)
 800a0c6:	f007 fcf2 	bl	8011aae <k_queue_append>
 800a0ca:	4626      	mov	r6, r4
 800a0cc:	e7d0      	b.n	800a070 <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
 800a0ce:	686b      	ldr	r3, [r5, #4]
 800a0d0:	8898      	ldrh	r0, [r3, #4]
 800a0d2:	f002 f95f 	bl	800c394 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d1d5      	bne.n	800a086 <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1) {
 800a0da:	686b      	ldr	r3, [r5, #4]
 800a0dc:	79db      	ldrb	r3, [r3, #7]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d0c6      	beq.n	800a070 <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	f7ff f8cc 	bl	8009284 <bt_mesh_adv_send>
 800a0ec:	e7c0      	b.n	800a070 <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0c9      	beq.n	800a088 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	463a      	mov	r2, r7
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4798      	blx	r3
 800a0fc:	e7c4      	b.n	800a088 <bt_mesh_net_send+0x78>
 800a0fe:	bf00      	nop
 800a100:	20005bec 	.word	0x20005bec
 800a104:	20005be8 	.word	0x20005be8
 800a108:	20001480 	.word	0x20001480

0800a10c <bt_mesh_subnet_find>:
{
 800a10c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a110:	4c28      	ldr	r4, [pc, #160]	; (800a1b4 <bt_mesh_subnet_find+0xa8>)
{
 800a112:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800a116:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a118:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
{
 800a11c:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a11e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a122:	429a      	cmp	r2, r3
{
 800a124:	4605      	mov	r5, r0
 800a126:	460e      	mov	r6, r1
 800a128:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a12a:	d016      	beq.n	800a15a <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
 800a12c:	460a      	mov	r2, r1
 800a12e:	f8cd 8000 	str.w	r8, [sp]
 800a132:	4601      	mov	r1, r0
 800a134:	463b      	mov	r3, r7
 800a136:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800a13a:	f7ff facb 	bl	80096d4 <auth_match>
 800a13e:	bb58      	cbnz	r0, 800a198 <bt_mesh_subnet_find+0x8c>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a140:	f894 31d3 	ldrb.w	r3, [r4, #467]	; 0x1d3
 800a144:	b14b      	cbz	r3, 800a15a <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
 800a146:	f8cd 8000 	str.w	r8, [sp]
 800a14a:	463b      	mov	r3, r7
 800a14c:	4632      	mov	r2, r6
 800a14e:	4629      	mov	r1, r5
 800a150:	f204 203d 	addw	r0, r4, #573	; 0x23d
 800a154:	f7ff fabe 	bl	80096d4 <auth_match>
 800a158:	bb30      	cbnz	r0, 800a1a8 <bt_mesh_subnet_find+0x9c>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a15a:	f8ba 22b4 	ldrh.w	r2, [sl, #692]	; 0x2b4
 800a15e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a162:	429a      	cmp	r2, r3
 800a164:	d014      	beq.n	800a190 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
 800a166:	f8cd 8000 	str.w	r8, [sp]
 800a16a:	463b      	mov	r3, r7
 800a16c:	4632      	mov	r2, r6
 800a16e:	4629      	mov	r1, r5
 800a170:	4811      	ldr	r0, [pc, #68]	; (800a1b8 <bt_mesh_subnet_find+0xac>)
 800a172:	f7ff faaf 	bl	80096d4 <auth_match>
 800a176:	b9a8      	cbnz	r0, 800a1a4 <bt_mesh_subnet_find+0x98>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a178:	f89a 32b7 	ldrb.w	r3, [sl, #695]	; 0x2b7
 800a17c:	b143      	cbz	r3, 800a190 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
 800a17e:	f8cd 8000 	str.w	r8, [sp]
 800a182:	463b      	mov	r3, r7
 800a184:	4632      	mov	r2, r6
 800a186:	4629      	mov	r1, r5
 800a188:	480c      	ldr	r0, [pc, #48]	; (800a1bc <bt_mesh_subnet_find+0xb0>)
 800a18a:	f7ff faa3 	bl	80096d4 <auth_match>
 800a18e:	b978      	cbnz	r0, 800a1b0 <bt_mesh_subnet_find+0xa4>
	return NULL;
 800a190:	2000      	movs	r0, #0
}
 800a192:	b002      	add	sp, #8
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a198:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = false;
 800a19c:	2300      	movs	r3, #0
			*new_key = true;
 800a19e:	f889 3000 	strb.w	r3, [r9]
			return sub;
 800a1a2:	e7f6      	b.n	800a192 <bt_mesh_subnet_find+0x86>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a1a4:	4806      	ldr	r0, [pc, #24]	; (800a1c0 <bt_mesh_subnet_find+0xb4>)
 800a1a6:	e7f9      	b.n	800a19c <bt_mesh_subnet_find+0x90>
 800a1a8:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = true;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e7f6      	b.n	800a19e <bt_mesh_subnet_find+0x92>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
 800a1b0:	4803      	ldr	r0, [pc, #12]	; (800a1c0 <bt_mesh_subnet_find+0xb4>)
 800a1b2:	e7fb      	b.n	800a1ac <bt_mesh_subnet_find+0xa0>
 800a1b4:	20005bd0 	.word	0x20005bd0
 800a1b8:	20005e98 	.word	0x20005e98
 800a1bc:	20005ef1 	.word	0x20005ef1
 800a1c0:	20005e68 	.word	0x20005e68

0800a1c4 <bt_mesh_net_decode>:
{
 800a1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
 800a1c8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800a1cc:	f1b8 0f11 	cmp.w	r8, #17
{
 800a1d0:	468b      	mov	fp, r1
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	4699      	mov	r9, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
 800a1d6:	f240 811b 	bls.w	800a410 <bt_mesh_net_decode+0x24c>
 800a1da:	6806      	ldr	r6, [r0, #0]
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
 800a1dc:	bb81      	cbnz	r1, 800a240 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
 800a1de:	eb06 0208 	add.w	r2, r6, r8
	return ((u16_t)src[0] << 8) | src[1];
 800a1e2:	f812 3c07 	ldrb.w	r3, [r2, #-7]
 800a1e6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 800a1ea:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a1ee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 800a1f2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a1f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a1fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
 800a1fe:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800a202:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a206:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 800a20a:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 800a20e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 800a212:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a216:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		if (dup_cache[i] == val) {
 800a21a:	487f      	ldr	r0, [pc, #508]	; (800a418 <bt_mesh_net_decode+0x254>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
 800a21c:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
 800a21e:	465a      	mov	r2, fp
		if (dup_cache[i] == val) {
 800a220:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800a224:	428b      	cmp	r3, r1
 800a226:	f000 80f3 	beq.w	800a410 <bt_mesh_net_decode+0x24c>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
 800a22a:	3201      	adds	r2, #1
 800a22c:	2a04      	cmp	r2, #4
 800a22e:	d1f7      	bne.n	800a220 <bt_mesh_net_decode+0x5c>
	dup_cache[dup_cache_next++] = val;
 800a230:	497a      	ldr	r1, [pc, #488]	; (800a41c <bt_mesh_net_decode+0x258>)
 800a232:	680a      	ldr	r2, [r1, #0]
 800a234:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a238:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
 800a23a:	f002 0203 	and.w	r2, r2, #3
 800a23e:	600a      	str	r2, [r1, #0]
	rx->net_if = net_if;
 800a240:	7ca3      	ldrb	r3, [r4, #18]
 800a242:	4d77      	ldr	r5, [pc, #476]	; (800a420 <bt_mesh_net_decode+0x25c>)
		if (cred->net_idx != sub->net_idx) {
 800a244:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800a438 <bt_mesh_net_decode+0x274>
	rx->net_if = net_if;
 800a248:	f36b 1305 	bfi	r3, fp, #4, #2
 800a24c:	74a3      	strb	r3, [r4, #18]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800a24e:	2700      	movs	r7, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800a250:	8bab      	ldrh	r3, [r5, #28]
 800a252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a256:	4293      	cmp	r3, r2
 800a258:	f000 80ca 	beq.w	800a3f0 <bt_mesh_net_decode+0x22c>
		if (cred->net_idx != sub->net_idx) {
 800a25c:	f8ba 2000 	ldrh.w	r2, [sl]
 800a260:	429a      	cmp	r2, r3
 800a262:	d126      	bne.n	800a2b2 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[0].nid &&
 800a264:	7833      	ldrb	r3, [r6, #0]
 800a266:	f89a 2008 	ldrb.w	r2, [sl, #8]
 800a26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26e:	429a      	cmp	r2, r3
 800a270:	d10b      	bne.n	800a28a <bt_mesh_net_decode+0xc6>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
 800a272:	496c      	ldr	r1, [pc, #432]	; (800a424 <bt_mesh_net_decode+0x260>)
 800a274:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a278:	4643      	mov	r3, r8
 800a27a:	4632      	mov	r2, r6
 800a27c:	f1a1 0010 	sub.w	r0, r1, #16
 800a280:	f7ff fa4c 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
 800a284:	2800      	cmp	r0, #0
 800a286:	f000 8091 	beq.w	800a3ac <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a28a:	7feb      	ldrb	r3, [r5, #31]
 800a28c:	b18b      	cbz	r3, 800a2b2 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[1].nid &&
 800a28e:	7833      	ldrb	r3, [r6, #0]
 800a290:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a298:	429a      	cmp	r2, r3
 800a29a:	d10a      	bne.n	800a2b2 <bt_mesh_net_decode+0xee>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
 800a29c:	4962      	ldr	r1, [pc, #392]	; (800a428 <bt_mesh_net_decode+0x264>)
 800a29e:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a2a2:	4643      	mov	r3, r8
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	f1a1 0010 	sub.w	r0, r1, #16
 800a2aa:	f7ff fa37 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d078      	beq.n	800a3a4 <bt_mesh_net_decode+0x1e0>
		if (cred->net_idx != sub->net_idx) {
 800a2b2:	f8ba 204a 	ldrh.w	r2, [sl, #74]	; 0x4a
 800a2b6:	8bab      	ldrh	r3, [r5, #28]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d125      	bne.n	800a308 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[0].nid &&
 800a2bc:	7833      	ldrb	r3, [r6, #0]
 800a2be:	f89a 2052 	ldrb.w	r2, [sl, #82]	; 0x52
 800a2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d10a      	bne.n	800a2e0 <bt_mesh_net_decode+0x11c>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
 800a2ca:	4958      	ldr	r1, [pc, #352]	; (800a42c <bt_mesh_net_decode+0x268>)
 800a2cc:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	f1a1 0010 	sub.w	r0, r1, #16
 800a2d8:	f7ff fa20 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d065      	beq.n	800a3ac <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a2e0:	7feb      	ldrb	r3, [r5, #31]
 800a2e2:	b18b      	cbz	r3, 800a308 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[1].nid &&
 800a2e4:	7833      	ldrb	r3, [r6, #0]
 800a2e6:	f89a 2073 	ldrb.w	r2, [sl, #115]	; 0x73
 800a2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d10a      	bne.n	800a308 <bt_mesh_net_decode+0x144>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
 800a2f2:	494f      	ldr	r1, [pc, #316]	; (800a430 <bt_mesh_net_decode+0x26c>)
 800a2f4:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a2f8:	4643      	mov	r3, r8
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	f1a1 0010 	sub.w	r0, r1, #16
 800a300:	f7ff fa0c 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
 800a304:	2800      	cmp	r0, #0
 800a306:	d04d      	beq.n	800a3a4 <bt_mesh_net_decode+0x1e0>
		if (NID(data) == sub->keys[0].nid &&
 800a308:	7833      	ldrb	r3, [r6, #0]
 800a30a:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800a30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a312:	429a      	cmp	r2, r3
 800a314:	d153      	bne.n	800a3be <bt_mesh_net_decode+0x1fa>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
 800a316:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a31a:	4643      	mov	r3, r8
 800a31c:	4632      	mov	r2, r6
 800a31e:	f105 0169 	add.w	r1, r5, #105	; 0x69
 800a322:	f105 0041 	add.w	r0, r5, #65	; 0x41
 800a326:	f7ff f9f9 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == sub->keys[0].nid &&
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d147      	bne.n	800a3be <bt_mesh_net_decode+0x1fa>
			rx->ctx.net_idx = sub->net_idx;
 800a32e:	4a41      	ldr	r2, [pc, #260]	; (800a434 <bt_mesh_net_decode+0x270>)
 800a330:	23e4      	movs	r3, #228	; 0xe4
 800a332:	fb03 2707 	mla	r7, r3, r7, r2
	rx->ctx.recv_ttl = TTL(buf->data);
 800a336:	f8d9 2000 	ldr.w	r2, [r9]
			rx->ctx.net_idx = sub->net_idx;
 800a33a:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800a33e:	80a3      	strh	r3, [r4, #4]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
 800a340:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a344:	80e1      	strh	r1, [r4, #6]
			rx->sub = sub;
 800a346:	6025      	str	r5, [r4, #0]
	rx->ctx.recv_ttl = TTL(buf->data);
 800a348:	7850      	ldrb	r0, [r2, #1]
 800a34a:	7aa3      	ldrb	r3, [r4, #10]
 800a34c:	f360 0306 	bfi	r3, r0, #0, #7
 800a350:	72a3      	strb	r3, [r4, #10]
		rx->ctx.send_ttl = BT_MESH_TTL_DEFAULT;
 800a352:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a356:	bf18      	it	ne
 800a358:	460b      	movne	r3, r1
 800a35a:	72e3      	strb	r3, [r4, #11]
	rx->ctl = CTL(buf->data);
 800a35c:	7853      	ldrb	r3, [r2, #1]
 800a35e:	7ca1      	ldrb	r1, [r4, #18]
 800a360:	09db      	lsrs	r3, r3, #7
 800a362:	f363 01c3 	bfi	r1, r3, #3, #1
 800a366:	74a1      	strb	r1, [r4, #18]
	rx->seq = SEQ(buf->data);
 800a368:	78d3      	ldrb	r3, [r2, #3]
 800a36a:	7891      	ldrb	r1, [r2, #2]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a372:	7911      	ldrb	r1, [r2, #4]
 800a374:	430b      	orrs	r3, r1
 800a376:	60e3      	str	r3, [r4, #12]
	return ((u16_t)src[0] << 8) | src[1];
 800a378:	79d1      	ldrb	r1, [r2, #7]
 800a37a:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a37c:	f1bb 0f03 	cmp.w	fp, #3
 800a380:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->dst = DST(buf->data);
 800a384:	8223      	strh	r3, [r4, #16]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a386:	d13e      	bne.n	800a406 <bt_mesh_net_decode+0x242>
	if (BT_MESH_ADDR_IS_RFU(rx->dst)) {
 800a388:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2bfb      	cmp	r3, #251	; 0xfb
 800a390:	d93b      	bls.n	800a40a <bt_mesh_net_decode+0x246>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
 800a392:	f1bb 0f01 	cmp.w	fp, #1
 800a396:	d003      	beq.n	800a3a0 <bt_mesh_net_decode+0x1dc>
 800a398:	8920      	ldrh	r0, [r4, #8]
 800a39a:	f001 fffb 	bl	800c394 <bt_mesh_elem_find>
 800a39e:	bba0      	cbnz	r0, 800a40a <bt_mesh_net_decode+0x246>
	return 0;
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e02d      	b.n	800a400 <bt_mesh_net_decode+0x23c>
			rx->new_key = 1;
 800a3a4:	7ca3      	ldrb	r3, [r4, #18]
 800a3a6:	f043 0302 	orr.w	r3, r3, #2
 800a3aa:	74a3      	strb	r3, [r4, #18]
			rx->friend_cred = 1;
 800a3ac:	7ca3      	ldrb	r3, [r4, #18]
 800a3ae:	f043 0304 	orr.w	r3, r3, #4
 800a3b2:	74a3      	strb	r3, [r4, #18]
			rx->ctx.net_idx = sub->net_idx;
 800a3b4:	4b1f      	ldr	r3, [pc, #124]	; (800a434 <bt_mesh_net_decode+0x270>)
 800a3b6:	22e4      	movs	r2, #228	; 0xe4
 800a3b8:	fb02 3707 	mla	r7, r2, r7, r3
 800a3bc:	e7bb      	b.n	800a336 <bt_mesh_net_decode+0x172>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
 800a3be:	7feb      	ldrb	r3, [r5, #31]
 800a3c0:	b1b3      	cbz	r3, 800a3f0 <bt_mesh_net_decode+0x22c>
		if (NID(data) == sub->keys[1].nid &&
 800a3c2:	7833      	ldrb	r3, [r6, #0]
 800a3c4:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
 800a3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d10f      	bne.n	800a3f0 <bt_mesh_net_decode+0x22c>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
 800a3d0:	e88d 0210 	stmia.w	sp, {r4, r9}
 800a3d4:	4643      	mov	r3, r8
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	f105 01c2 	add.w	r1, r5, #194	; 0xc2
 800a3dc:	f105 009a 	add.w	r0, r5, #154	; 0x9a
 800a3e0:	f7ff f99c 	bl	800971c <net_decrypt.isra.2>
		if (NID(data) == sub->keys[1].nid &&
 800a3e4:	b920      	cbnz	r0, 800a3f0 <bt_mesh_net_decode+0x22c>
			rx->new_key = 1;
 800a3e6:	7ca3      	ldrb	r3, [r4, #18]
 800a3e8:	f043 0302 	orr.w	r3, r3, #2
 800a3ec:	74a3      	strb	r3, [r4, #18]
 800a3ee:	e79e      	b.n	800a32e <bt_mesh_net_decode+0x16a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800a3f0:	3701      	adds	r7, #1
 800a3f2:	2f02      	cmp	r7, #2
 800a3f4:	f105 05e4 	add.w	r5, r5, #228	; 0xe4
 800a3f8:	f47f af2a 	bne.w	800a250 <bt_mesh_net_decode+0x8c>
		return -ENOENT;
 800a3fc:	f06f 0001 	mvn.w	r0, #1
}
 800a400:	b003      	add	sp, #12
 800a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1be      	bne.n	800a388 <bt_mesh_net_decode+0x1c4>
		return -EBADMSG;
 800a40a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
 800a40e:	e7f7      	b.n	800a400 <bt_mesh_net_decode+0x23c>
		return -EINVAL;
 800a410:	f06f 0015 	mvn.w	r0, #21
 800a414:	e7f4      	b.n	800a400 <bt_mesh_net_decode+0x23c>
 800a416:	bf00      	nop
 800a418:	20000be8 	.word	0x20000be8
 800a41c:	20000bf8 	.word	0x20000bf8
 800a420:	20005d84 	.word	0x20005d84
 800a424:	20000c15 	.word	0x20000c15
 800a428:	20000c36 	.word	0x20000c36
 800a42c:	20000c5f 	.word	0x20000c5f
 800a430:	20000c80 	.word	0x20000c80
 800a434:	20005bd0 	.word	0x20005bd0
 800a438:	20000bfc 	.word	0x20000bfc

0800a43c <bt_mesh_net_recv>:
{
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	b090      	sub	sp, #64	; 0x40
 800a442:	460c      	mov	r4, r1
 800a444:	4605      	mov	r5, r0
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a446:	2100      	movs	r1, #0
{
 800a448:	4616      	mov	r6, r2
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a44a:	a806      	add	r0, sp, #24
 800a44c:	2228      	movs	r2, #40	; 0x28
 800a44e:	f7f6 fa43 	bl	80008d8 <memset>
 800a452:	231d      	movs	r3, #29
	struct bt_mesh_net_rx rx = { .rssi = rssi };
 800a454:	2214      	movs	r2, #20
 800a456:	2100      	movs	r1, #0
 800a458:	a801      	add	r0, sp, #4
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 800a45a:	f8ad 301e 	strh.w	r3, [sp, #30]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
 800a45e:	f7f6 fa3b 	bl	80008d8 <memset>
 800a462:	f88d 4017 	strb.w	r4, [sp, #23]
	if (!bt_mesh_is_provisioned()) {
 800a466:	f7fe fdc7 	bl	8008ff8 <bt_mesh_is_provisioned>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d059      	beq.n	800a522 <bt_mesh_net_recv+0xe6>
	if (bt_mesh_net_decode(data, net_if, &rx, buf)) {
 800a46e:	ab06      	add	r3, sp, #24
 800a470:	aa01      	add	r2, sp, #4
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	f7ff fea5 	bl	800a1c4 <bt_mesh_net_decode>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d151      	bne.n	800a522 <bt_mesh_net_recv+0xe6>
	state->offset = net_buf_simple_headroom(buf);
 800a47e:	a806      	add	r0, sp, #24
 800a480:	f007 f9e4 	bl	801184c <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a484:	2e02      	cmp	r6, #2
 800a486:	4604      	mov	r4, r0
	state->len = buf->len;
 800a488:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800a48c:	d104      	bne.n	800a498 <bt_mesh_net_recv+0x5c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
 800a48e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a492:	4628      	mov	r0, r5
 800a494:	f006 febe 	bl	8011214 <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a498:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800a49c:	f001 ffa4 	bl	800c3e8 <bt_mesh_fixed_group_match>
 800a4a0:	bb88      	cbnz	r0, 800a506 <bt_mesh_net_recv+0xca>
			  bt_mesh_elem_find(rx.dst));
 800a4a2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800a4a6:	f001 ff75 	bl	800c394 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a4aa:	3000      	adds	r0, #0
 800a4ac:	bf18      	it	ne
 800a4ae:	2001      	movne	r0, #1
 800a4b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
 800a4b4:	a901      	add	r1, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a4b6:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(buf, &rx);
 800a4ba:	a806      	add	r0, sp, #24
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a4bc:	f88d 3016 	strb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
 800a4c0:	f000 fe78 	bl	800b1b4 <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.dst) ||
 800a4c4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a4c8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd02      	ble.n	800a4d6 <bt_mesh_net_recv+0x9a>
 800a4d0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800a4d4:	d125      	bne.n	800a522 <bt_mesh_net_recv+0xe6>
	buf->data = buf->__buf + state->offset;
 800a4d6:	ab08      	add	r3, sp, #32
 800a4d8:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800a4dc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800a4e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a4e4:	9406      	str	r4, [sp, #24]
 800a4e6:	2a10      	cmp	r2, #16
	buf->len = state->len;
 800a4e8:	f8ad 701c 	strh.w	r7, [sp, #28]
		if (rx->ctx.recv_ttl == 1) {
 800a4ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800a4f0:	d10b      	bne.n	800a50a <bt_mesh_net_recv+0xce>
		if (rx->ctx.recv_ttl == 1) {
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d015      	beq.n	800a522 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
 800a4f6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a4fa:	f013 0f30 	tst.w	r3, #48	; 0x30
 800a4fe:	d013      	beq.n	800a528 <bt_mesh_net_recv+0xec>
		transmit = bt_mesh_net_transmit_get();
 800a500:	f003 ff46 	bl	800e390 <bt_mesh_net_transmit_get>
 800a504:	e012      	b.n	800a52c <bt_mesh_net_recv+0xf0>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
 800a506:	2001      	movs	r0, #1
 800a508:	e7d2      	b.n	800a4b0 <bt_mesh_net_recv+0x74>
		if (rx->ctx.recv_ttl <= 1) {
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	dd09      	ble.n	800a522 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
 800a50e:	2a00      	cmp	r2, #0
 800a510:	d1f1      	bne.n	800a4f6 <bt_mesh_net_recv+0xba>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
 800a512:	f003 ff8b 	bl	800e42c <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
 800a516:	2801      	cmp	r0, #1
 800a518:	d0ed      	beq.n	800a4f6 <bt_mesh_net_recv+0xba>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
 800a51a:	f004 f825 	bl	800e568 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
 800a51e:	2801      	cmp	r0, #1
 800a520:	d0e9      	beq.n	800a4f6 <bt_mesh_net_recv+0xba>
}
 800a522:	b010      	add	sp, #64	; 0x40
 800a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		transmit = bt_mesh_relay_retransmit_get();
 800a528:	f003 ff94 	bl	800e454 <bt_mesh_relay_retransmit_get>
				 BT_MESH_TRANSMIT_INT(transmit), K_NO_WAIT);
 800a52c:	f3c0 02c7 	ubfx	r2, r0, #3, #8
 800a530:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a532:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a536:	0052      	lsls	r2, r2, #1
 800a538:	f000 0107 	and.w	r1, r0, #7
 800a53c:	2300      	movs	r3, #0
 800a53e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a542:	2001      	movs	r0, #1
 800a544:	f7fe fe8e 	bl	8009264 <bt_mesh_adv_create>
	if (!buf) {
 800a548:	4604      	mov	r4, r0
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d0e9      	beq.n	800a522 <bt_mesh_net_recv+0xe6>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
 800a54e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a556:	2b10      	cmp	r3, #16
 800a558:	d00d      	beq.n	800a576 <bt_mesh_net_recv+0x13a>
		sbuf->data[1] &= 0x80;
 800a55a:	9a06      	ldr	r2, [sp, #24]
 800a55c:	7853      	ldrb	r3, [r2, #1]
 800a55e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a562:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
 800a564:	9a06      	ldr	r2, [sp, #24]
 800a566:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800a56a:	7851      	ldrb	r1, [r2, #1]
 800a56c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a570:	3b01      	subs	r3, #1
 800a572:	430b      	orrs	r3, r1
 800a574:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
 800a576:	f104 0708 	add.w	r7, r4, #8
 800a57a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a57e:	9906      	ldr	r1, [sp, #24]
 800a580:	4638      	mov	r0, r7
 800a582:	f007 f8c9 	bl	8011718 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a586:	9e01      	ldr	r6, [sp, #4]
	if (rx->friend_cred) {
 800a588:	f89d 3016 	ldrb.w	r3, [sp, #22]
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a58c:	7fb2      	ldrb	r2, [r6, #30]
 800a58e:	2559      	movs	r5, #89	; 0x59
 800a590:	4355      	muls	r5, r2
 800a592:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
 800a596:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
 800a598:	4430      	add	r0, r6
	if (rx->friend_cred) {
 800a59a:	d50b      	bpl.n	800a5b4 <bt_mesh_net_recv+0x178>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a59c:	68a1      	ldr	r1, [r4, #8]
 800a59e:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
 800a5a0:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a5a2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
 800a5a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
 800a5aa:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
 800a5ac:	68a2      	ldr	r2, [r4, #8]
 800a5ae:	7811      	ldrb	r1, [r2, #0]
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
 800a5b4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800a654 <bt_mesh_net_recv+0x218>
 800a5b8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800a5bc:	f8d8 1000 	ldr.w	r1, [r8]
 800a5c0:	f002 0201 	and.w	r2, r2, #1
 800a5c4:	1a8a      	subs	r2, r1, r2
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	f001 fc07 	bl	800bddc <bt_mesh_net_encrypt>
 800a5ce:	bb00      	cbnz	r0, 800a612 <bt_mesh_net_recv+0x1d6>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 800a5d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a5d4:	f8d8 1000 	ldr.w	r1, [r8]
 800a5d8:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
 800a5da:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	4432      	add	r2, r6
 800a5e4:	1ac9      	subs	r1, r1, r3
 800a5e6:	f001 fbd1 	bl	800bd8c <bt_mesh_net_obfuscate>
 800a5ea:	b990      	cbnz	r0, 800a612 <bt_mesh_net_recv+0x1d6>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
 800a5ec:	f003 ffbc 	bl	800e568 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a5f0:	2801      	cmp	r0, #1
 800a5f2:	d012      	beq.n	800a61a <bt_mesh_net_recv+0x1de>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
 800a5f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800a5f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d00c      	beq.n	800a61a <bt_mesh_net_recv+0x1de>
	if (relay_to_adv(rx->net_if)) {
 800a600:	f89d 3016 	ldrb.w	r3, [sp, #22]
	switch (net_if) {
 800a604:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d019      	beq.n	800a640 <bt_mesh_net_recv+0x204>
 800a60c:	d311      	bcc.n	800a632 <bt_mesh_net_recv+0x1f6>
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d01c      	beq.n	800a64c <bt_mesh_net_recv+0x210>
	net_buf_unref(buf);
 800a612:	4620      	mov	r0, r4
 800a614:	f007 f85a 	bl	80116cc <net_buf_unref>
 800a618:	e783      	b.n	800a522 <bt_mesh_net_recv+0xe6>
		if (bt_mesh_proxy_relay(&buf->b, rx->dst) &&
 800a61a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a61e:	4638      	mov	r0, r7
 800a620:	f006 fe38 	bl	8011294 <bt_mesh_proxy_relay>
 800a624:	2800      	cmp	r0, #0
 800a626:	d0eb      	beq.n	800a600 <bt_mesh_net_recv+0x1c4>
 800a628:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dcf0      	bgt.n	800a612 <bt_mesh_net_recv+0x1d6>
 800a630:	e7e6      	b.n	800a600 <bt_mesh_net_recv+0x1c4>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
 800a632:	f003 fefb 	bl	800e42c <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 800a636:	1e43      	subs	r3, r0, #1
 800a638:	4258      	negs	r0, r3
 800a63a:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d0e8      	beq.n	800a612 <bt_mesh_net_recv+0x1d6>
		bt_mesh_adv_send(buf, NULL, NULL);
 800a640:	2200      	movs	r2, #0
 800a642:	4611      	mov	r1, r2
 800a644:	4620      	mov	r0, r4
 800a646:	f7fe fe1d 	bl	8009284 <bt_mesh_adv_send>
 800a64a:	e7e2      	b.n	800a612 <bt_mesh_net_recv+0x1d6>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 800a64c:	f003 ff8c 	bl	800e568 <bt_mesh_gatt_proxy_get>
 800a650:	e7f1      	b.n	800a636 <bt_mesh_net_recv+0x1fa>
 800a652:	bf00      	nop
 800a654:	20005bd0 	.word	0x20005bd0

0800a658 <bt_mesh_net_local>:
{
 800a658:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
 800a65a:	4d08      	ldr	r5, [pc, #32]	; (800a67c <bt_mesh_net_local+0x24>)
 800a65c:	4628      	mov	r0, r5
 800a65e:	f006 fff6 	bl	801164e <net_buf_slist_get>
 800a662:	4604      	mov	r4, r0
 800a664:	b900      	cbnz	r0, 800a668 <bt_mesh_net_local+0x10>
}
 800a666:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
 800a668:	f104 0008 	add.w	r0, r4, #8
 800a66c:	2201      	movs	r2, #1
 800a66e:	2100      	movs	r1, #0
 800a670:	f7ff fee4 	bl	800a43c <bt_mesh_net_recv>
		net_buf_unref(buf);
 800a674:	4620      	mov	r0, r4
 800a676:	f007 f829 	bl	80116cc <net_buf_unref>
 800a67a:	e7ef      	b.n	800a65c <bt_mesh_net_local+0x4>
 800a67c:	20005bec 	.word	0x20005bec

0800a680 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
 800a680:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_complete, ivu_complete);
 800a682:	4c0b      	ldr	r4, [pc, #44]	; (800a6b0 <bt_mesh_net_init+0x30>)
 800a684:	490b      	ldr	r1, [pc, #44]	; (800a6b4 <bt_mesh_net_init+0x34>)
 800a686:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 800a68a:	f007 ffcb 	bl	8012624 <k_delayed_work_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800a68e:	f3bf 8f5b 	dmb	ish
 800a692:	f104 0318 	add.w	r3, r4, #24
 800a696:	e853 2f00 	ldrex	r2, [r3]
 800a69a:	f022 0201 	bic.w	r2, r2, #1
 800a69e:	e843 2100 	strex	r1, r2, [r3]
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d1f7      	bne.n	800a696 <bt_mesh_net_init+0x16>
 800a6a6:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
 800a6aa:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <bt_mesh_net_init+0x38>)
 800a6ac:	6163      	str	r3, [r4, #20]
 800a6ae:	bd10      	pop	{r4, pc}
 800a6b0:	20005bd0 	.word	0x20005bd0
 800a6b4:	08009e21 	.word	0x08009e21
 800a6b8:	0800a659 	.word	0x0800a659

0800a6bc <seg_send_start>:

static void seg_send_start(u16_t duration, int err, void *user_data)
{
	struct seg_tx *tx = user_data;

	if (tx->cb && tx->cb->start) {
 800a6bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a6be:	b11b      	cbz	r3, 800a6c8 <seg_send_start+0xc>
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	b10b      	cbz	r3, 800a6c8 <seg_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
 800a6c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a6c6:	4718      	bx	r3
 800a6c8:	4770      	bx	lr
	...

0800a6cc <is_replay>:

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
 800a6cc:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <is_replay+0x70>)
{
 800a6ce:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4614      	mov	r4, r2
		if (!rpl->src) {
 800a6d4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a6d8:	f8b1 137c 	ldrh.w	r1, [r1, #892]	; 0x37c
 800a6dc:	b961      	cbnz	r1, 800a6f8 <is_replay+0x2c>
			rpl->src = rx->ctx.addr;
 800a6de:	336f      	adds	r3, #111	; 0x6f
 800a6e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6e4:	8902      	ldrh	r2, [r0, #8]
 800a6e6:	809a      	strh	r2, [r3, #4]
			rpl->seq = rx->seq;
 800a6e8:	68c2      	ldr	r2, [r0, #12]
 800a6ea:	609a      	str	r2, [r3, #8]
			rpl->old_iv = rx->old_iv;
 800a6ec:	7c82      	ldrb	r2, [r0, #18]
 800a6ee:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800a6f2:	719a      	strb	r2, [r3, #6]

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
				rpl->old_iv = rx->old_iv;
				return false;
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	bd30      	pop	{r4, r5, pc}
		if (rpl->src == rx->ctx.addr) {
 800a6f8:	8905      	ldrh	r5, [r0, #8]
 800a6fa:	428d      	cmp	r5, r1
 800a6fc:	d119      	bne.n	800a732 <is_replay+0x66>
			if (rx->old_iv && !rpl->old_iv) {
 800a6fe:	7c81      	ldrb	r1, [r0, #18]
 800a700:	336f      	adds	r3, #111	; 0x6f
 800a702:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a706:	f011 0f01 	tst.w	r1, #1
 800a70a:	7992      	ldrb	r2, [r2, #6]
 800a70c:	d002      	beq.n	800a714 <is_replay+0x48>
 800a70e:	b912      	cbnz	r2, 800a716 <is_replay+0x4a>
				return true;
 800a710:	2001      	movs	r0, #1
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
 800a712:	bd30      	pop	{r4, r5, pc}
			if ((!rx->old_iv && rpl->old_iv) ||
 800a714:	b92a      	cbnz	r2, 800a722 <is_replay+0x56>
			    rpl->seq < rx->seq) {
 800a716:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
 800a71a:	6895      	ldr	r5, [r2, #8]
 800a71c:	68c2      	ldr	r2, [r0, #12]
 800a71e:	4295      	cmp	r5, r2
 800a720:	d2f6      	bcs.n	800a710 <is_replay+0x44>
				rpl->seq = rx->seq;
 800a722:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a726:	68c2      	ldr	r2, [r0, #12]
 800a728:	609a      	str	r2, [r3, #8]
				rpl->old_iv = rx->old_iv;
 800a72a:	f3c1 0100 	ubfx	r1, r1, #0, #1
 800a72e:	7199      	strb	r1, [r3, #6]
 800a730:	e7e0      	b.n	800a6f4 <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
 800a732:	3301      	adds	r3, #1
 800a734:	2b0a      	cmp	r3, #10
 800a736:	d1cd      	bne.n	800a6d4 <is_replay+0x8>
 800a738:	e7ea      	b.n	800a710 <is_replay+0x44>
 800a73a:	bf00      	nop
 800a73c:	20005bd0 	.word	0x20005bd0

0800a740 <send_unseg>:
{
 800a740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a744:	460d      	mov	r5, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
 800a746:	7a81      	ldrb	r1, [r0, #10]
{
 800a748:	4616      	mov	r6, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
 800a74a:	08ca      	lsrs	r2, r1, #3
 800a74c:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a74e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a752:	0052      	lsls	r2, r2, #1
{
 800a754:	4604      	mov	r4, r0
 800a756:	461f      	mov	r7, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800a758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a75c:	2300      	movs	r3, #0
 800a75e:	f001 0107 	and.w	r1, r1, #7
 800a762:	2001      	movs	r0, #1
 800a764:	f7fe fd7e 	bl	8009264 <bt_mesh_adv_create>
	if (!buf) {
 800a768:	4681      	mov	r9, r0
 800a76a:	b390      	cbz	r0, 800a7d2 <send_unseg+0x92>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
 800a76c:	2109      	movs	r1, #9
 800a76e:	f006 ff50 	bl	8011612 <net_buf_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	885a      	ldrh	r2, [r3, #2]
 800a776:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a77a:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
 800a77c:	bf18      	it	ne
 800a77e:	7ae1      	ldrbne	r1, [r4, #11]
 800a780:	f109 0808 	add.w	r8, r9, #8
 800a784:	bf16      	itet	ne
 800a786:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
 800a788:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
 800a78a:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
 800a78e:	4640      	mov	r0, r8
 800a790:	f006 ffcb 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
 800a794:	88aa      	ldrh	r2, [r5, #4]
 800a796:	6829      	ldr	r1, [r5, #0]
 800a798:	4640      	mov	r0, r8
 800a79a:	f006 ffbd 	bl	8011718 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4643      	mov	r3, r8
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f005 f94d 	bl	800fa44 <bt_mesh_friend_enqueue_tx>
 800a7aa:	b150      	cbz	r0, 800a7c2 <send_unseg+0x82>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800a7ac:	6863      	ldr	r3, [r4, #4]
					      NULL, &buf->b) &&
 800a7ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd05      	ble.n	800a7c2 <send_unseg+0x82>
			net_buf_unref(buf);
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f006 ff88 	bl	80116cc <net_buf_unref>
			return 0;
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	4620      	mov	r0, r4
}
 800a7ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800a7ce:	f7ff bc1f 	b.w	800a010 <bt_mesh_net_send>
		return -ENOBUFS;
 800a7d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800a7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a7dc <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u8_t hdr, u8_t aszmic,
		    struct net_buf_simple *buf)
{
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	b0eb      	sub	sp, #428	; 0x1ac
	struct net_buf_simple *sdu =
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a7e2:	ad09      	add	r5, sp, #36	; 0x24
{
 800a7e4:	461f      	mov	r7, r3
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	4604      	mov	r4, r0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a7ea:	f44f 72c2 	mov.w	r2, #388	; 0x184
{
 800a7ee:	468b      	mov	fp, r1
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f7f6 f870 	bl	80008d8 <memset>
 800a7f8:	f44f 73be 	mov.w	r3, #380	; 0x17c
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
 800a800:	80eb      	strh	r3, [r5, #6]
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
 800a802:	88bb      	ldrh	r3, [r7, #4]
 800a804:	bf14      	ite	ne
 800a806:	2209      	movne	r2, #9
 800a808:	2205      	moveq	r2, #5
 800a80a:	429a      	cmp	r2, r3
 800a80c:	dd05      	ble.n	800a81a <sdu_recv+0x3e>
		BT_ERR("Too short SDU + MIC");
		return -EINVAL;
 800a80e:	f06f 0315 	mvn.w	r3, #21
	}

	BT_WARN("No matching AppKey");

	return -EINVAL;
}
 800a812:	4618      	mov	r0, r3
 800a814:	b06b      	add	sp, #428	; 0x1ac
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
 800a81a:	7ca3      	ldrb	r3, [r4, #18]
 800a81c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a820:	d0f7      	beq.n	800a812 <sdu_recv+0x36>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->dst)) {
 800a822:	8a20      	ldrh	r0, [r4, #16]
 800a824:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800a828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a82c:	d232      	bcs.n	800a894 <sdu_recv+0xb8>
		ad = bt_mesh_label_uuid_get(rx->dst);
 800a82e:	f004 f893 	bl	800e958 <bt_mesh_label_uuid_get>
 800a832:	4682      	mov	sl, r0
	buf->len -= APP_MIC_LEN(aszmic);
 800a834:	88bb      	ldrh	r3, [r7, #4]
 800a836:	f1b9 0f00 	cmp.w	r9, #0
 800a83a:	bf14      	ite	ne
 800a83c:	2208      	movne	r2, #8
 800a83e:	2204      	moveq	r2, #4
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	80bb      	strh	r3, [r7, #4]
	if (!AKF(&hdr)) {
 800a844:	f3cb 1380 	ubfx	r3, fp, #6, #1
 800a848:	bb3b      	cbnz	r3, 800a89a <sdu_recv+0xbe>
	buf->len = 0;
 800a84a:	80ab      	strh	r3, [r5, #4]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a84c:	4835      	ldr	r0, [pc, #212]	; (800a924 <sdu_recv+0x148>)
 800a84e:	7ca3      	ldrb	r3, [r4, #18]
	buf->data = buf->__buf + reserve_head;
 800a850:	aa0b      	add	r2, sp, #44	; 0x2c
 800a852:	602a      	str	r2, [r5, #0]
 800a854:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
 800a858:	6803      	ldr	r3, [r0, #0]
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	68e3      	ldr	r3, [r4, #12]
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	8a23      	ldrh	r3, [r4, #16]
 800a864:	9303      	str	r3, [sp, #12]
 800a866:	8923      	ldrh	r3, [r4, #8]
 800a868:	9302      	str	r3, [sp, #8]
 800a86a:	e88d 0420 	stmia.w	sp, {r5, sl}
 800a86e:	463b      	mov	r3, r7
 800a870:	464a      	mov	r2, r9
 800a872:	2101      	movs	r1, #1
 800a874:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 800a878:	f001 fb87 	bl	800bf8a <bt_mesh_app_decrypt>
		if (err) {
 800a87c:	9007      	str	r0, [sp, #28]
 800a87e:	2800      	cmp	r0, #0
 800a880:	d1c5      	bne.n	800a80e <sdu_recv+0x32>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
 800a882:	f64f 72fe 	movw	r2, #65534	; 0xfffe
		rx->ctx.app_idx = key->app_idx;
 800a886:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, sdu);
 800a888:	4629      	mov	r1, r5
 800a88a:	4620      	mov	r0, r4
 800a88c:	f001 fdc4 	bl	800c418 <bt_mesh_model_recv>
		return 0;
 800a890:	9b07      	ldr	r3, [sp, #28]
 800a892:	e7be      	b.n	800a812 <sdu_recv+0x36>
		ad = NULL;
 800a894:	f04f 0a00 	mov.w	sl, #0
 800a898:	e7cc      	b.n	800a834 <sdu_recv+0x58>
 800a89a:	4e23      	ldr	r6, [pc, #140]	; (800a928 <sdu_recv+0x14c>)
		if (AID(&hdr) != keys->id) {
 800a89c:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
	if (!AKF(&hdr)) {
 800a8a0:	f04f 0800 	mov.w	r8, #0
		if (AID(&hdr) != keys->id) {
 800a8a4:	9307      	str	r3, [sp, #28]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a8a6:	f5a6 7bbd 	sub.w	fp, r6, #378	; 0x17a
		if (key->net_idx != rx->sub->net_idx) {
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	f836 2c16 	ldrh.w	r2, [r6, #-22]
 800a8b0:	8b9b      	ldrh	r3, [r3, #28]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d12d      	bne.n	800a912 <sdu_recv+0x136>
		if (rx->new_key && key->updated) {
 800a8b6:	7ca3      	ldrb	r3, [r4, #18]
 800a8b8:	079b      	lsls	r3, r3, #30
 800a8ba:	d502      	bpl.n	800a8c2 <sdu_recv+0xe6>
 800a8bc:	f816 3c12 	ldrb.w	r3, [r6, #-18]
 800a8c0:	bb2b      	cbnz	r3, 800a90e <sdu_recv+0x132>
 800a8c2:	f1a6 0011 	sub.w	r0, r6, #17
		if (AID(&hdr) != keys->id) {
 800a8c6:	7803      	ldrb	r3, [r0, #0]
 800a8c8:	9a07      	ldr	r2, [sp, #28]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d121      	bne.n	800a912 <sdu_recv+0x136>
 800a8ce:	ab0b      	add	r3, sp, #44	; 0x2c
 800a8d0:	602b      	str	r3, [r5, #0]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
 800a8d2:	7ca3      	ldrb	r3, [r4, #18]
 800a8d4:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
 800a8d8:	f8db 3000 	ldr.w	r3, [fp]
	buf->len = 0;
 800a8dc:	2100      	movs	r1, #0
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	80a9      	strh	r1, [r5, #4]
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	68e3      	ldr	r3, [r4, #12]
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	8a23      	ldrh	r3, [r4, #16]
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	8923      	ldrh	r3, [r4, #8]
 800a8ee:	9302      	str	r3, [sp, #8]
 800a8f0:	e88d 0420 	stmia.w	sp, {r5, sl}
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	464a      	mov	r2, r9
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	f001 fb46 	bl	800bf8a <bt_mesh_app_decrypt>
		if (err) {
 800a8fe:	b940      	cbnz	r0, 800a912 <sdu_recv+0x136>
		rx->ctx.app_idx = key->app_idx;
 800a900:	2228      	movs	r2, #40	; 0x28
 800a902:	fb02 b808 	mla	r8, r2, r8, fp
 800a906:	9007      	str	r0, [sp, #28]
 800a908:	f8b8 2166 	ldrh.w	r2, [r8, #358]	; 0x166
 800a90c:	e7bb      	b.n	800a886 <sdu_recv+0xaa>
 800a90e:	4630      	mov	r0, r6
 800a910:	e7d9      	b.n	800a8c6 <sdu_recv+0xea>
 800a912:	f108 0801 	add.w	r8, r8, #1
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
 800a916:	f1b8 0f02 	cmp.w	r8, #2
 800a91a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a91e:	f43f af76 	beq.w	800a80e <sdu_recv+0x32>
 800a922:	e7c2      	b.n	800a8aa <sdu_recv+0xce>
 800a924:	20005bd0 	.word	0x20005bd0
 800a928:	20005d4a 	.word	0x20005d4a

0800a92c <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx)
{
 800a92c:	b510      	push	{r4, lr}
 800a92e:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
 800a930:	3020      	adds	r0, #32
 800a932:	f007 fe95 	bl	8012660 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a936:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da12      	bge.n	800a964 <seg_rx_reset+0x38>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
 800a93e:	7c22      	ldrb	r2, [r4, #16]
 800a940:	f002 021f 	and.w	r2, r2, #31
 800a944:	3201      	adds	r2, #1
 800a946:	2001      	movs	r0, #1
 800a948:	2100      	movs	r1, #0
 800a94a:	f7f5 fd77 	bl	800043c <__aeabi_llsl>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a94e:	69a3      	ldr	r3, [r4, #24]
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
 800a950:	3801      	subs	r0, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
 800a952:	4283      	cmp	r3, r0
 800a954:	d006      	beq.n	800a964 <seg_rx_reset+0x38>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
 800a956:	f104 0308 	add.w	r3, r4, #8
 800a95a:	8ae2      	ldrh	r2, [r4, #22]
 800a95c:	8aa1      	ldrh	r1, [r4, #20]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	f005 f8f2 	bl	800fb48 <bt_mesh_friend_clear_incomplete>
	/* We don't reset rx->net and rx->seq_auth here since we need to
	 * be able to send an ack if we receive a segment after we've
	 * already received the full SDU.
	 */

	rx->in_use = 0;
 800a964:	7c23      	ldrb	r3, [r4, #16]
 800a966:	f36f 1386 	bfc	r3, #6, #1
 800a96a:	7423      	strb	r3, [r4, #16]
 800a96c:	bd10      	pop	{r4, pc}
	...

0800a970 <seg_tx_reset>:
{
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
 800a974:	305c      	adds	r0, #92	; 0x5c
 800a976:	f007 fe73 	bl	8012660 <k_delayed_work_cancel>
	if (!tx->nack_count) {
 800a97a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tx->cb = NULL;
 800a97e:	2500      	movs	r5, #0
	tx->seq_auth = 0;
 800a980:	2000      	movs	r0, #0
 800a982:	2100      	movs	r1, #0
	tx->cb = NULL;
 800a984:	6565      	str	r5, [r4, #84]	; 0x54
	tx->cb_data = NULL;
 800a986:	65a5      	str	r5, [r4, #88]	; 0x58
	tx->seq_auth = 0;
 800a988:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
	tx->sub = NULL;
 800a98c:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
 800a98e:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
	if (!tx->nack_count) {
 800a992:	b31a      	cbz	r2, 800a9dc <seg_tx_reset+0x6c>
 800a994:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
 800a996:	462f      	mov	r7, r5
	for (i = 0; i <= tx->seg_n; i++) {
 800a998:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800a99c:	f003 031f 	and.w	r3, r3, #31
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	dd13      	ble.n	800a9cc <seg_tx_reset+0x5c>
	tx->nack_count = 0;
 800a9a4:	2500      	movs	r5, #0
	if (bt_mesh.pending_update) {
 800a9a6:	4a0e      	ldr	r2, [pc, #56]	; (800a9e0 <seg_tx_reset+0x70>)
	tx->nack_count = 0;
 800a9a8:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	if (bt_mesh.pending_update) {
 800a9ac:	79d3      	ldrb	r3, [r2, #7]
 800a9ae:	0719      	lsls	r1, r3, #28
 800a9b0:	d514      	bpl.n	800a9dc <seg_tx_reset+0x6c>
		bt_mesh.pending_update = 0;
 800a9b2:	f365 03c3 	bfi	r3, r5, #3, #1
 800a9b6:	71d3      	strb	r3, [r2, #7]
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	6810      	ldr	r0, [r2, #0]
 800a9bc:	f7ff f9b0 	bl	8009d20 <bt_mesh_net_iv_update>
 800a9c0:	b160      	cbz	r0, 800a9dc <seg_tx_reset+0x6c>
			bt_mesh_net_sec_update(NULL);
 800a9c2:	4628      	mov	r0, r5
}
 800a9c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
 800a9c8:	f7ff b996 	b.w	8009cf8 <bt_mesh_net_sec_update>
		if (!tx->seg[i]) {
 800a9cc:	6830      	ldr	r0, [r6, #0]
 800a9ce:	b110      	cbz	r0, 800a9d6 <seg_tx_reset+0x66>
		net_buf_unref(tx->seg[i]);
 800a9d0:	f006 fe7c 	bl	80116cc <net_buf_unref>
		tx->seg[i] = NULL;
 800a9d4:	6037      	str	r7, [r6, #0]
	for (i = 0; i <= tx->seg_n; i++) {
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	3604      	adds	r6, #4
 800a9da:	e7dd      	b.n	800a998 <seg_tx_reset+0x28>
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20005bd0 	.word	0x20005bd0

0800a9e4 <send_seg>:
{
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	4604      	mov	r4, r0
	if (sdu->len < 1) {
 800a9ea:	8888      	ldrh	r0, [r1, #4]
{
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	4689      	mov	r9, r1
	if (sdu->len < 1) {
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f000 80d6 	beq.w	800aba2 <send_seg+0x1be>
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
 800a9f6:	28cc      	cmp	r0, #204	; 0xcc
 800a9f8:	f200 80d6 	bhi.w	800aba8 <send_seg+0x1c4>
		if (!seg_tx[i].nack_count) {
 800a9fc:	4970      	ldr	r1, [pc, #448]	; (800abc0 <send_seg+0x1dc>)
 800a9fe:	f891 5053 	ldrb.w	r5, [r1, #83]	; 0x53
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	f000 80d3 	beq.w	800abae <send_seg+0x1ca>
		return -EBUSY;
 800aa08:	f06f 050f 	mvn.w	r5, #15
}
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	b005      	add	sp, #20
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		seg_hdr = SEG_HDR(1, net_tx->aid);
 800aa14:	7ae7      	ldrb	r7, [r4, #11]
 800aa16:	08bf      	lsrs	r7, r7, #2
 800aa18:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
	tx->dst = net_tx->ctx->addr;
 800aa1c:	88ad      	ldrh	r5, [r5, #4]
 800aa1e:	f8a1 5050 	strh.w	r5, [r1, #80]	; 0x50
	tx->seg_n = (sdu->len - 1) / 12;
 800aa22:	3801      	subs	r0, #1
 800aa24:	250c      	movs	r5, #12
 800aa26:	fb90 f0f5 	sdiv	r0, r0, r5
 800aa2a:	f891 5052 	ldrb.w	r5, [r1, #82]	; 0x52
 800aa2e:	f360 0504 	bfi	r5, r0, #0, #5
 800aa32:	f881 5052 	strb.w	r5, [r1, #82]	; 0x52
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aa36:	4d63      	ldr	r5, [pc, #396]	; (800abc4 <send_seg+0x1e0>)
	tx->nack_count = tx->seg_n + 1;
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f881 0053 	strb.w	r0, [r1, #83]	; 0x53
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aa3e:	79e8      	ldrb	r0, [r5, #7]
 800aa40:	f000 0601 	and.w	r6, r0, #1
 800aa44:	6828      	ldr	r0, [r5, #0]
 800aa46:	1b80      	subs	r0, r0, r6
 800aa48:	ea4f 2b10 	mov.w	fp, r0, lsr #8
 800aa4c:	ea4f 6a00 	mov.w	sl, r0, lsl #24
 800aa50:	6868      	ldr	r0, [r5, #4]
	tx->sub = net_tx->sub;
 800aa52:	6825      	ldr	r5, [r4, #0]
 800aa54:	600d      	str	r5, [r1, #0]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aa56:	f3c0 0017 	ubfx	r0, r0, #0, #24
 800aa5a:	ea4a 0a00 	orr.w	sl, sl, r0
	tx->new_key = net_tx->sub->kr_flag;
 800aa5e:	7fad      	ldrb	r5, [r5, #30]
 800aa60:	f891 0052 	ldrb.w	r0, [r1, #82]	; 0x52
	tx->cb_data = cb_data;
 800aa64:	658b      	str	r3, [r1, #88]	; 0x58
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aa66:	e9c1 ab12 	strd	sl, fp, [r1, #72]	; 0x48
	seq_zero = tx->seq_auth & 0x1fff;
 800aa6a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800aa6e:	ea4f 139a 	mov.w	r3, sl, lsr #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800aa72:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
	tx->new_key = net_tx->sub->kr_flag;
 800aa76:	f365 1045 	bfi	r0, r5, #5, #1
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800aa7a:	9301      	str	r3, [sp, #4]
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
 800aa7c:	f8df b140 	ldr.w	fp, [pc, #320]	; 800abc0 <send_seg+0x1dc>
	tx->new_key = net_tx->sub->kr_flag;
 800aa80:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800aa84:	fa4f f38a 	sxtb.w	r3, sl
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
 800aa88:	2600      	movs	r6, #0
	tx->cb = cb;
 800aa8a:	654a      	str	r2, [r1, #84]	; 0x54
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800aa8c:	9302      	str	r3, [sp, #8]
	for (seg_o = 0; sdu->len; seg_o++) {
 800aa8e:	f8b9 5004 	ldrh.w	r5, [r9, #4]
 800aa92:	fa5f fa86 	uxtb.w	sl, r6
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	d0b8      	beq.n	800aa0c <send_seg+0x28>
					 BT_MESH_TRANSMIT_COUNT(net_tx->xmit),
 800aa9a:	7aa1      	ldrb	r1, [r4, #10]
					 BT_MESH_TRANSMIT_INT(net_tx->xmit),
 800aa9c:	08ca      	lsrs	r2, r1, #3
 800aa9e:	3201      	adds	r2, #1
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800aaa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800aaa4:	0052      	lsls	r2, r2, #1
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aaac:	f001 0107 	and.w	r1, r1, #7
 800aab0:	2001      	movs	r0, #1
 800aab2:	f7fe fbd7 	bl	8009264 <bt_mesh_adv_create>
		if (!seg) {
 800aab6:	4680      	mov	r8, r0
 800aab8:	b928      	cbnz	r0, 800aac6 <send_seg+0xe2>
			seg_tx_reset(tx);
 800aaba:	4841      	ldr	r0, [pc, #260]	; (800abc0 <send_seg+0x1dc>)
 800aabc:	f7ff ff58 	bl	800a970 <seg_tx_reset>
			return -ENOBUFS;
 800aac0:	f06f 0536 	mvn.w	r5, #54	; 0x36
 800aac4:	e7a2      	b.n	800aa0c <send_seg+0x28>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800aac6:	89c3      	ldrh	r3, [r0, #14]
 800aac8:	4403      	add	r3, r0
 800aaca:	3313      	adds	r3, #19
 800aacc:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
 800aad0:	2204      	movs	r2, #4
 800aad2:	681b      	ldr	r3, [r3, #0]
		net_buf_add_u8(seg, seg_hdr);
 800aad4:	f108 0508 	add.w	r5, r8, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
 800aad8:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
 800aada:	2109      	movs	r1, #9
 800aadc:	f006 fd99 	bl	8011612 <net_buf_reserve>
		net_buf_add_u8(seg, seg_hdr);
 800aae0:	4639      	mov	r1, r7
 800aae2:	4628      	mov	r0, r5
 800aae4:	f006 fe21 	bl	801172a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
 800aae8:	7ae1      	ldrb	r1, [r4, #11]
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800aaf0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f006 fe18 	bl	801172a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
 800aafa:	9b02      	ldr	r3, [sp, #8]
 800aafc:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
 800ab00:	b2c9      	uxtb	r1, r1
 800ab02:	4628      	mov	r0, r5
 800ab04:	f006 fe11 	bl	801172a <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
 800ab08:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
 800ab0c:	f3c1 0104 	ubfx	r1, r1, #0, #5
 800ab10:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
 800ab14:	b2c9      	uxtb	r1, r1
 800ab16:	4628      	mov	r0, r5
 800ab18:	f006 fe07 	bl	801172a <net_buf_simple_add_u8>
		len = min(sdu->len, 12);
 800ab1c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		net_buf_add_mem(seg, sdu->data, len);
 800ab20:	f8d9 1000 	ldr.w	r1, [r9]
 800ab24:	2b0c      	cmp	r3, #12
 800ab26:	bf28      	it	cs
 800ab28:	230c      	movcs	r3, #12
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	9303      	str	r3, [sp, #12]
 800ab30:	f006 fdf2 	bl	8011718 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	4648      	mov	r0, r9
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f006 fe52 	bl	80117e2 <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f006 fde0 	bl	8011704 <net_buf_ref>
			if (seg_o == tx->seg_n) {
 800ab44:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
 800ab48:	4a1f      	ldr	r2, [pc, #124]	; (800abc8 <send_seg+0x1e4>)
		tx->seg[seg_o] = net_buf_ref(seg);
 800ab4a:	eb0b 038a 	add.w	r3, fp, sl, lsl #2
			if (seg_o == tx->seg_n) {
 800ab4e:	f001 011f 	and.w	r1, r1, #31
		tx->seg[seg_o] = net_buf_ref(seg);
 800ab52:	6058      	str	r0, [r3, #4]
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
 800ab54:	4551      	cmp	r1, sl
 800ab56:	bf0c      	ite	eq
 800ab58:	2102      	moveq	r1, #2
 800ab5a:	2101      	movne	r1, #1
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f004 ff70 	bl	800fa44 <bt_mesh_friend_enqueue_tx>
 800ab64:	b148      	cbz	r0, 800ab7a <send_seg+0x196>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
 800ab66:	6863      	ldr	r3, [r4, #4]
						      &seg->b) &&
 800ab68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd04      	ble.n	800ab7a <send_seg+0x196>
				net_buf_unref(seg);
 800ab70:	4640      	mov	r0, r8
 800ab72:	f006 fdab 	bl	80116cc <net_buf_unref>
				return 0;
 800ab76:	2500      	movs	r5, #0
 800ab78:	e748      	b.n	800aa0c <send_seg+0x28>
		err = bt_mesh_net_send(net_tx, seg,
 800ab7a:	4914      	ldr	r1, [pc, #80]	; (800abcc <send_seg+0x1e8>)
 800ab7c:	4a14      	ldr	r2, [pc, #80]	; (800abd0 <send_seg+0x1ec>)
 800ab7e:	465b      	mov	r3, fp
 800ab80:	f1ba 0f00 	cmp.w	sl, #0
 800ab84:	bf18      	it	ne
 800ab86:	460a      	movne	r2, r1
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	f7ff fa40 	bl	800a010 <bt_mesh_net_send>
 800ab90:	3601      	adds	r6, #1
		if (err) {
 800ab92:	4605      	mov	r5, r0
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f43f af7a 	beq.w	800aa8e <send_seg+0xaa>
			seg_tx_reset(tx);
 800ab9a:	4809      	ldr	r0, [pc, #36]	; (800abc0 <send_seg+0x1dc>)
 800ab9c:	f7ff fee8 	bl	800a970 <seg_tx_reset>
			return err;
 800aba0:	e734      	b.n	800aa0c <send_seg+0x28>
		return -EINVAL;
 800aba2:	f06f 0515 	mvn.w	r5, #21
 800aba6:	e731      	b.n	800aa0c <send_seg+0x28>
		return -EMSGSIZE;
 800aba8:	f06f 0523 	mvn.w	r5, #35	; 0x23
 800abac:	e72e      	b.n	800aa0c <send_seg+0x28>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800abae:	6865      	ldr	r5, [r4, #4]
 800abb0:	886f      	ldrh	r7, [r5, #2]
 800abb2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800abb6:	42b7      	cmp	r7, r6
 800abb8:	f47f af2c 	bne.w	800aa14 <send_seg+0x30>
		seg_hdr = SEG_HDR(0, 0);
 800abbc:	2780      	movs	r7, #128	; 0x80
 800abbe:	e72d      	b.n	800aa1c <send_seg+0x38>
 800abc0:	20000ce8 	.word	0x20000ce8
 800abc4:	20005bd0 	.word	0x20005bd0
 800abc8:	20000d30 	.word	0x20000d30
 800abcc:	08013914 	.word	0x08013914
 800abd0:	0801390c 	.word	0x0801390c

0800abd4 <seg_tx_complete>:
{
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
 800abda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800abdc:	b11b      	cbz	r3, 800abe6 <seg_tx_complete+0x12>
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	b10b      	cbz	r3, 800abe6 <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
 800abe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800abe4:	4798      	blx	r3
	seg_tx_reset(tx);
 800abe6:	4620      	mov	r0, r4
}
 800abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
 800abec:	f7ff bec0 	b.w	800a970 <seg_tx_reset>

0800abf0 <seg_tx_send_unacked>:
{
 800abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
 800abf2:	4f19      	ldr	r7, [pc, #100]	; (800ac58 <seg_tx_send_unacked+0x68>)
{
 800abf4:	4604      	mov	r4, r0
 800abf6:	1d06      	adds	r6, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
 800abf8:	2500      	movs	r5, #0
 800abfa:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800abfe:	f003 031f 	and.w	r3, r3, #31
 800ac02:	429d      	cmp	r5, r3
 800ac04:	dd01      	ble.n	800ac0a <seg_tx_send_unacked+0x1a>
}
 800ac06:	b003      	add	sp, #12
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct net_buf *seg = tx->seg[i];
 800ac0a:	f856 1b04 	ldr.w	r1, [r6], #4
		if (!seg) {
 800ac0e:	b309      	cbz	r1, 800ac54 <seg_tx_send_unacked+0x64>
 800ac10:	89cb      	ldrh	r3, [r1, #14]
 800ac12:	440b      	add	r3, r1
 800ac14:	3313      	adds	r3, #19
 800ac16:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(seg)->busy) {
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	7a1a      	ldrb	r2, [r3, #8]
 800ac1e:	0752      	lsls	r2, r2, #29
 800ac20:	d418      	bmi.n	800ac54 <seg_tx_send_unacked+0x64>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
 800ac22:	7a9a      	ldrb	r2, [r3, #10]
 800ac24:	1e50      	subs	r0, r2, #1
 800ac26:	7298      	strb	r0, [r3, #10]
 800ac28:	b93a      	cbnz	r2, 800ac3a <seg_tx_send_unacked+0x4a>
			seg_tx_complete(tx, -ETIMEDOUT);
 800ac2a:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
 800ac2e:	4620      	mov	r0, r4
}
 800ac30:	b003      	add	sp, #12
 800ac32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			seg_tx_complete(tx, -EIO);
 800ac36:	f7ff bfcd 	b.w	800abd4 <seg_tx_complete>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
 800ac3a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800ac3e:	9400      	str	r4, [sp, #0]
 800ac40:	463b      	mov	r3, r7
 800ac42:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ac46:	6820      	ldr	r0, [r4, #0]
 800ac48:	f7ff f8f8 	bl	8009e3c <bt_mesh_net_resend>
		if (err) {
 800ac4c:	b110      	cbz	r0, 800ac54 <seg_tx_send_unacked+0x64>
			seg_tx_complete(tx, -EIO);
 800ac4e:	f06f 0104 	mvn.w	r1, #4
 800ac52:	e7ec      	b.n	800ac2e <seg_tx_send_unacked+0x3e>
	for (i = 0; i <= tx->seg_n; i++) {
 800ac54:	3501      	adds	r5, #1
 800ac56:	e7d0      	b.n	800abfa <seg_tx_send_unacked+0xa>
 800ac58:	08013914 	.word	0x08013914

0800ac5c <ctl_recv>:
{
 800ac5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
 800ac60:	f011 087f 	ands.w	r8, r1, #127	; 0x7f
{
 800ac64:	4604      	mov	r4, r0
 800ac66:	4615      	mov	r5, r2
 800ac68:	469b      	mov	fp, r3
	switch (ctl_op) {
 800ac6a:	d013      	beq.n	800ac94 <ctl_recv+0x38>
 800ac6c:	f1b8 0f0a 	cmp.w	r8, #10
 800ac70:	f000 809c 	beq.w	800adac <ctl_recv+0x150>
	if (!rx->local_match) {
 800ac74:	7c83      	ldrb	r3, [r0, #18]
 800ac76:	f013 0140 	ands.w	r1, r3, #64	; 0x40
 800ac7a:	d02c      	beq.n	800acd6 <ctl_recv+0x7a>
		switch (ctl_op) {
 800ac7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac80:	f1b8 0f07 	cmp.w	r8, #7
 800ac84:	f200 80cf 	bhi.w	800ae26 <ctl_recv+0x1ca>
 800ac88:	e8df f008 	tbb	[pc, r8]
 800ac8c:	cdb4cdaf 	.word	0xcdb4cdaf
 800ac90:	c8c3beb9 	.word	0xc8c3beb9
	if (buf->len < 6) {
 800ac94:	8893      	ldrh	r3, [r2, #4]
 800ac96:	2b05      	cmp	r3, #5
 800ac98:	d804      	bhi.n	800aca4 <ctl_recv+0x48>
		return -EINVAL;
 800ac9a:	f06f 0415 	mvn.w	r4, #21
}
 800ac9e:	4620      	mov	r0, r4
 800aca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
 800aca4:	4610      	mov	r0, r2
 800aca6:	f006 fdb4 	bl	8011812 <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800acaa:	f994 3012 	ldrsb.w	r3, [r4, #18]
	seq_zero = (seq_zero >> 2) & 0x1fff;
 800acae:	f3c0 068c 	ubfx	r6, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800acb2:	2b00      	cmp	r3, #0
	seq_zero = net_buf_simple_pull_be16(buf);
 800acb4:	4682      	mov	sl, r0
 800acb6:	b2b6      	uxth	r6, r6
 800acb8:	f04f 0700 	mov.w	r7, #0
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
 800acbc:	da0d      	bge.n	800acda <ctl_recv+0x7e>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
 800acbe:	7ca1      	ldrb	r1, [r4, #18]
 800acc0:	4a5a      	ldr	r2, [pc, #360]	; (800ae2c <ctl_recv+0x1d0>)
 800acc2:	f001 0301 	and.w	r3, r1, #1
 800acc6:	6811      	ldr	r1, [r2, #0]
 800acc8:	1ac9      	subs	r1, r1, r3
 800acca:	0a0b      	lsrs	r3, r1, #8
 800accc:	060a      	lsls	r2, r1, #24
 800acce:	4316      	orrs	r6, r2
 800acd0:	431f      	orrs	r7, r3
 800acd2:	e9cb 6700 	strd	r6, r7, [fp]
		return 0;
 800acd6:	2400      	movs	r4, #0
 800acd8:	e7e1      	b.n	800ac9e <ctl_recv+0x42>
	ack = net_buf_simple_pull_be32(buf);
 800acda:	4628      	mov	r0, r5
 800acdc:	f006 fda4 	bl	8011828 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
 800ace0:	4953      	ldr	r1, [pc, #332]	; (800ae30 <ctl_recv+0x1d4>)
 800ace2:	e9d1 8912 	ldrd	r8, r9, [r1, #72]	; 0x48
 800ace6:	2300      	movs	r3, #0
 800ace8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800acec:	ea03 0309 	and.w	r3, r3, r9
 800acf0:	ea02 0208 	and.w	r2, r2, r8
 800acf4:	42bb      	cmp	r3, r7
 800acf6:	bf08      	it	eq
 800acf8:	42b2      	cmpeq	r2, r6
	ack = net_buf_simple_pull_be32(buf);
 800acfa:	4605      	mov	r5, r0
 800acfc:	460e      	mov	r6, r1
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
 800acfe:	d1cc      	bne.n	800ac9a <ctl_recv+0x3e>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
 800ad00:	8922      	ldrh	r2, [r4, #8]
		if (tx->dst == addr) {
 800ad02:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00e      	beq.n	800ad28 <ctl_recv+0xcc>
		if (obo && tx->nack_count == tx->seg_n + 1) {
 800ad0a:	f3ca 33cf 	ubfx	r3, sl, #15, #16
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0c3      	beq.n	800ac9a <ctl_recv+0x3e>
 800ad12:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
 800ad16:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 800ad1a:	f003 031f 	and.w	r3, r3, #31
 800ad1e:	3301      	adds	r3, #1
 800ad20:	4299      	cmp	r1, r3
 800ad22:	d1ba      	bne.n	800ac9a <ctl_recv+0x3e>
			tx->dst = addr;
 800ad24:	f8a6 2050 	strh.w	r2, [r6, #80]	; 0x50
	*seq_auth = tx->seq_auth;
 800ad28:	e9cb 8900 	strd	r8, r9, [fp]
	if (!ack) {
 800ad2c:	b92d      	cbnz	r5, 800ad3a <ctl_recv+0xde>
		seg_tx_complete(tx, -ECANCELED);
 800ad2e:	f06f 0147 	mvn.w	r1, #71	; 0x47
 800ad32:	483f      	ldr	r0, [pc, #252]	; (800ae30 <ctl_recv+0x1d4>)
 800ad34:	f7ff ff4e 	bl	800abd4 <seg_tx_complete>
 800ad38:	e7cd      	b.n	800acd6 <ctl_recv+0x7a>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
 800ad3a:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
	return 32 - __builtin_clz(op);
 800ad3e:	fab5 f285 	clz	r2, r5
 800ad42:	f1c2 021f 	rsb	r2, r2, #31
 800ad46:	f003 031f 	and.w	r3, r3, #31
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d8a5      	bhi.n	800ac9a <ctl_recv+0x3e>
	k_delayed_work_cancel(&tx->retransmit);
 800ad4e:	4839      	ldr	r0, [pc, #228]	; (800ae34 <ctl_recv+0x1d8>)
 800ad50:	f007 fc86 	bl	8012660 <k_delayed_work_cancel>
			tx->seg[bit - 1] = NULL;
 800ad54:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
 800ad58:	f04f 0901 	mov.w	r9, #1
	return __builtin_ffs(op);
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	fa95 f7a5 	rbit	r7, r5
 800ad62:	fab7 f787 	clz	r7, r7
 800ad66:	bf08      	it	eq
 800ad68:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
 800ad6c:	1c7c      	adds	r4, r7, #1
 800ad6e:	d106      	bne.n	800ad7e <ctl_recv+0x122>
	if (tx->nack_count) {
 800ad70:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
 800ad74:	b1ab      	cbz	r3, 800ada2 <ctl_recv+0x146>
		seg_tx_send_unacked(tx);
 800ad76:	482e      	ldr	r0, [pc, #184]	; (800ae30 <ctl_recv+0x1d4>)
 800ad78:	f7ff ff3a 	bl	800abf0 <seg_tx_send_unacked>
 800ad7c:	e78f      	b.n	800ac9e <ctl_recv+0x42>
		if (tx->seg[bit - 1]) {
 800ad7e:	eb06 0487 	add.w	r4, r6, r7, lsl #2
 800ad82:	6860      	ldr	r0, [r4, #4]
 800ad84:	b140      	cbz	r0, 800ad98 <ctl_recv+0x13c>
			net_buf_unref(tx->seg[bit - 1]);
 800ad86:	f006 fca1 	bl	80116cc <net_buf_unref>
			tx->nack_count--;
 800ad8a:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
			tx->seg[bit - 1] = NULL;
 800ad8e:	f8c4 8004 	str.w	r8, [r4, #4]
			tx->nack_count--;
 800ad92:	3b01      	subs	r3, #1
 800ad94:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		ack &= ~BIT(bit - 1);
 800ad98:	fa09 f707 	lsl.w	r7, r9, r7
 800ad9c:	ea25 0507 	bic.w	r5, r5, r7
 800ada0:	e7dc      	b.n	800ad5c <ctl_recv+0x100>
		seg_tx_complete(tx, 0);
 800ada2:	4621      	mov	r1, r4
 800ada4:	4822      	ldr	r0, [pc, #136]	; (800ae30 <ctl_recv+0x1d4>)
 800ada6:	f7ff ff15 	bl	800abd4 <seg_tx_complete>
 800adaa:	e778      	b.n	800ac9e <ctl_recv+0x42>
	if (buf->len < 3) {
 800adac:	8893      	ldrh	r3, [r2, #4]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	f67f af73 	bls.w	800ac9a <ctl_recv+0x3e>
	if (rx->dst != hb_sub_dst) {
 800adb4:	4b20      	ldr	r3, [pc, #128]	; (800ae38 <ctl_recv+0x1dc>)
 800adb6:	8a02      	ldrh	r2, [r0, #16]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d18b      	bne.n	800acd6 <ctl_recv+0x7a>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
 800adbe:	4628      	mov	r0, r5
 800adc0:	f006 fd17 	bl	80117f2 <net_buf_simple_pull_u8>
 800adc4:	4606      	mov	r6, r0
	feat = net_buf_simple_pull_be16(buf);
 800adc6:	4628      	mov	r0, r5
 800adc8:	f006 fd23 	bl	8011812 <net_buf_simple_pull_be16>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800adcc:	7aa2      	ldrb	r2, [r4, #10]
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
 800adce:	8a21      	ldrh	r1, [r4, #16]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800add0:	f3c2 0206 	ubfx	r2, r2, #0, #7
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
 800add4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
 800add8:	f1c2 0201 	rsb	r2, r2, #1
 800addc:	4432      	add	r2, r6
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
 800adde:	4603      	mov	r3, r0
 800ade0:	b2d2      	uxtb	r2, r2
 800ade2:	8920      	ldrh	r0, [r4, #8]
 800ade4:	f003 fa9e 	bl	800e324 <bt_mesh_heartbeat>
 800ade8:	e775      	b.n	800acd6 <ctl_recv+0x7a>
			return bt_mesh_friend_poll(rx, buf);
 800adea:	4611      	mov	r1, r2
}
 800adec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
 800adf0:	f004 bc0a 	b.w	800f608 <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
 800adf4:	4611      	mov	r1, r2
}
 800adf6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
 800adfa:	f004 bc7d 	b.w	800f6f8 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
 800adfe:	4611      	mov	r1, r2
}
 800ae00:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
 800ae04:	f004 bb3c 	b.w	800f480 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
 800ae08:	4611      	mov	r1, r2
}
 800ae0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
 800ae0e:	f004 bc41 	b.w	800f694 <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
 800ae12:	4611      	mov	r1, r2
}
 800ae14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
 800ae18:	f004 bb7d 	b.w	800f516 <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
 800ae1c:	4611      	mov	r1, r2
}
 800ae1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
 800ae22:	f004 bbb2 	b.w	800f58a <bt_mesh_friend_sub_rem>
	return -ENOENT;
 800ae26:	f06f 0401 	mvn.w	r4, #1
 800ae2a:	e738      	b.n	800ac9e <ctl_recv+0x42>
 800ae2c:	20005bd0 	.word	0x20005bd0
 800ae30:	20000ce8 	.word	0x20000ce8
 800ae34:	20000d44 	.word	0x20000d44
 800ae38:	20000ce2 	.word	0x20000ce2

0800ae3c <seg_retransmit>:
	seg_tx_send_unacked(tx);
 800ae3c:	385c      	subs	r0, #92	; 0x5c
 800ae3e:	f7ff bed7 	b.w	800abf0 <seg_tx_send_unacked>
	...

0800ae44 <seg_sent>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800ae44:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ae48:	315c      	adds	r1, #92	; 0x5c
 800ae4a:	4801      	ldr	r0, [pc, #4]	; (800ae50 <seg_sent+0xc>)
 800ae4c:	f007 bc54 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 800ae50:	20001480 	.word	0x20001480

0800ae54 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
 800ae54:	4b01      	ldr	r3, [pc, #4]	; (800ae5c <bt_mesh_set_hb_sub_dst+0x8>)
 800ae56:	8018      	strh	r0, [r3, #0]
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	20000ce2 	.word	0x20000ce2

0800ae60 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
 800ae60:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <bt_mesh_tx_in_progress+0x10>)
 800ae62:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
}
 800ae66:	3000      	adds	r0, #0
 800ae68:	bf18      	it	ne
 800ae6a:	2001      	movne	r0, #1
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	20000ce8 	.word	0x20000ce8

0800ae74 <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800ae74:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <bt_mesh_app_key_find+0x40>)
 800ae76:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
 800ae7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae7e:	4291      	cmp	r1, r2
 800ae80:	461a      	mov	r2, r3
 800ae82:	d003      	beq.n	800ae8c <bt_mesh_app_key_find+0x18>
 800ae84:	f8b3 1166 	ldrh.w	r1, [r3, #358]	; 0x166
 800ae88:	4281      	cmp	r1, r0
 800ae8a:	d00d      	beq.n	800aea8 <bt_mesh_app_key_find+0x34>
 800ae8c:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
 800ae90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d00a      	beq.n	800aeae <bt_mesh_app_key_find+0x3a>
 800ae98:	f8b2 218e 	ldrh.w	r2, [r2, #398]	; 0x18e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800ae9c:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <bt_mesh_app_key_find+0x44>)
 800ae9e:	4282      	cmp	r2, r0
 800aea0:	bf0c      	ite	eq
 800aea2:	4618      	moveq	r0, r3
 800aea4:	2000      	movne	r0, #0
 800aea6:	4770      	bx	lr
 800aea8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 800aeac:	4770      	bx	lr
	return NULL;
 800aeae:	2000      	movs	r0, #0
}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20005bd0 	.word	0x20005bd0
 800aeb8:	20005d5c 	.word	0x20005d5c

0800aebc <bt_mesh_trans_send>:
{
 800aebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4604      	mov	r4, r0
 800aec2:	b087      	sub	sp, #28
	if (net_buf_simple_tailroom(msg) < 4) {
 800aec4:	4608      	mov	r0, r1
{
 800aec6:	460d      	mov	r5, r1
 800aec8:	4617      	mov	r7, r2
 800aeca:	4698      	mov	r8, r3
	if (net_buf_simple_tailroom(msg) < 4) {
 800aecc:	f006 fcc3 	bl	8011856 <net_buf_simple_tailroom>
 800aed0:	2803      	cmp	r0, #3
 800aed2:	d804      	bhi.n	800aede <bt_mesh_trans_send+0x22>
		return -EINVAL;
 800aed4:	f06f 0015 	mvn.w	r0, #21
}
 800aed8:	b007      	add	sp, #28
 800aeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > 11) {
 800aede:	88ab      	ldrh	r3, [r5, #4]
 800aee0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aee4:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
 800aee6:	bf88      	it	hi
 800aee8:	f899 3006 	ldrbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800aeec:	f8b9 0002 	ldrh.w	r0, [r9, #2]
		tx->ctx->send_rel = 1;
 800aef0:	bf84      	itt	hi
 800aef2:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
 800aef6:	f889 3006 	strbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
 800aefa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800aefe:	4298      	cmp	r0, r3
 800af00:	d148      	bne.n	800af94 <bt_mesh_trans_send+0xd8>
		tx->aid = 0;
 800af02:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
 800af04:	4e36      	ldr	r6, [pc, #216]	; (800afe0 <bt_mesh_trans_send+0x124>)
		tx->aid = 0;
 800af06:	f36f 0387 	bfc	r3, #2, #6
 800af0a:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
 800af0c:	f999 3006 	ldrsb.w	r3, [r9, #6]
 800af10:	2b00      	cmp	r3, #0
 800af12:	db54      	blt.n	800afbe <bt_mesh_trans_send+0x102>
		tx->aszmic = 0;
 800af14:	7ae3      	ldrb	r3, [r4, #11]
 800af16:	f36f 0341 	bfc	r3, #1, #1
		tx->aszmic = 1;
 800af1a:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
 800af1c:	6863      	ldr	r3, [r4, #4]
 800af1e:	8898      	ldrh	r0, [r3, #4]
 800af20:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
 800af24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af28:	d252      	bcs.n	800afd0 <bt_mesh_trans_send+0x114>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
 800af2a:	f003 fd15 	bl	800e958 <bt_mesh_label_uuid_get>
				  BT_MESH_NET_IVI_TX);
 800af2e:	4b2d      	ldr	r3, [pc, #180]	; (800afe4 <bt_mesh_trans_send+0x128>)
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800af30:	f8d4 c004 	ldr.w	ip, [r4, #4]
				  BT_MESH_NET_IVI_TX);
 800af34:	79da      	ldrb	r2, [r3, #7]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800af36:	6819      	ldr	r1, [r3, #0]
 800af38:	f8bc 9002 	ldrh.w	r9, [ip, #2]
				  tx->aszmic, msg, ad, tx->src,
 800af3c:	f894 e00b 	ldrb.w	lr, [r4, #11]
				  BT_MESH_NET_IVI_TX);
 800af40:	f002 0201 	and.w	r2, r2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800af44:	1a8a      	subs	r2, r1, r2
 800af46:	9204      	str	r2, [sp, #16]
				  tx->ctx->addr, bt_mesh.seq,
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f3c3 0317 	ubfx	r3, r3, #0, #24
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
 800af4e:	9303      	str	r3, [sp, #12]
 800af50:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800af54:	9302      	str	r3, [sp, #8]
 800af56:	8923      	ldrh	r3, [r4, #8]
 800af58:	e88d 0009 	stmia.w	sp, {r0, r3}
 800af5c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800af60:	eba9 0000 	sub.w	r0, r9, r0
 800af64:	4241      	negs	r1, r0
 800af66:	4141      	adcs	r1, r0
 800af68:	462b      	mov	r3, r5
 800af6a:	f3ce 0240 	ubfx	r2, lr, #1, #1
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 ffc6 	bl	800bf00 <bt_mesh_app_encrypt>
	if (err) {
 800af74:	2800      	cmp	r0, #0
 800af76:	d1af      	bne.n	800aed8 <bt_mesh_trans_send+0x1c>
	if (tx->ctx->send_rel) {
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800af7e:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
 800af80:	463a      	mov	r2, r7
 800af82:	4643      	mov	r3, r8
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
 800af88:	da24      	bge.n	800afd4 <bt_mesh_trans_send+0x118>
}
 800af8a:	b007      	add	sp, #28
 800af8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_seg(tx, msg, cb, cb_data);
 800af90:	f7ff bd28 	b.w	800a9e4 <send_seg>
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
 800af94:	f7ff ff6e 	bl	800ae74 <bt_mesh_app_key_find>
		if (!app_key) {
 800af98:	2800      	cmp	r0, #0
 800af9a:	d09b      	beq.n	800aed4 <bt_mesh_trans_send+0x18>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	7fdb      	ldrb	r3, [r3, #31]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	7ae3      	ldrb	r3, [r4, #11]
 800afa4:	d108      	bne.n	800afb8 <bt_mesh_trans_send+0xfc>
 800afa6:	7902      	ldrb	r2, [r0, #4]
 800afa8:	b132      	cbz	r2, 800afb8 <bt_mesh_trans_send+0xfc>
			tx->aid = app_key->keys[1].id;
 800afaa:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
 800afac:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
 800afb0:	f362 0387 	bfi	r3, r2, #2, #6
 800afb4:	72e3      	strb	r3, [r4, #11]
 800afb6:	e7a9      	b.n	800af0c <bt_mesh_trans_send+0x50>
			key = app_key->keys[0].val;
 800afb8:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
 800afba:	7942      	ldrb	r2, [r0, #5]
 800afbc:	e7f8      	b.n	800afb0 <bt_mesh_trans_send+0xf4>
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
 800afbe:	4628      	mov	r0, r5
 800afc0:	f006 fc49 	bl	8011856 <net_buf_simple_tailroom>
 800afc4:	2807      	cmp	r0, #7
 800afc6:	d9a5      	bls.n	800af14 <bt_mesh_trans_send+0x58>
		tx->aszmic = 1;
 800afc8:	7ae3      	ldrb	r3, [r4, #11]
 800afca:	f043 0302 	orr.w	r3, r3, #2
 800afce:	e7a4      	b.n	800af1a <bt_mesh_trans_send+0x5e>
		ad = NULL;
 800afd0:	2000      	movs	r0, #0
 800afd2:	e7ac      	b.n	800af2e <bt_mesh_trans_send+0x72>
}
 800afd4:	b007      	add	sp, #28
 800afd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_unseg(tx, msg, cb, cb_data);
 800afda:	f7ff bbb1 	b.w	800a740 <send_unseg>
 800afde:	bf00      	nop
 800afe0:	20005d24 	.word	0x20005d24
 800afe4:	20005bd0 	.word	0x20005bd0

0800afe8 <bt_mesh_ctl_send>:
{
 800afe8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	468a      	mov	sl, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
 800afee:	7a81      	ldrb	r1, [r0, #10]
{
 800aff0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aff2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aff4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aff6:	4690      	mov	r8, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
 800aff8:	08ca      	lsrs	r2, r1, #3
 800affa:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800affc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b000:	0052      	lsls	r2, r2, #1
{
 800b002:	4604      	mov	r4, r0
 800b004:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
 800b006:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b00a:	2300      	movs	r3, #0
 800b00c:	f001 0107 	and.w	r1, r1, #7
 800b010:	2001      	movs	r0, #1
 800b012:	f7fe f927 	bl	8009264 <bt_mesh_adv_create>
	if (!buf) {
 800b016:	4683      	mov	fp, r0
 800b018:	b358      	cbz	r0, 800b072 <bt_mesh_ctl_send+0x8a>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
 800b01a:	2109      	movs	r1, #9
 800b01c:	f006 faf9 	bl	8011612 <net_buf_reserve>
	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
 800b020:	f10b 0308 	add.w	r3, fp, #8
 800b024:	f00a 017f 	and.w	r1, sl, #127	; 0x7f
 800b028:	4618      	mov	r0, r3
 800b02a:	469a      	mov	sl, r3
 800b02c:	f006 fb7d 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
 800b030:	464a      	mov	r2, r9
 800b032:	4641      	mov	r1, r8
 800b034:	4650      	mov	r0, sl
 800b036:	f006 fb6f 	bl	8011718 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
 800b03a:	4653      	mov	r3, sl
 800b03c:	463a      	mov	r2, r7
 800b03e:	2100      	movs	r1, #0
 800b040:	4620      	mov	r0, r4
 800b042:	f004 fcff 	bl	800fa44 <bt_mesh_friend_enqueue_tx>
 800b046:	b158      	cbz	r0, 800b060 <bt_mesh_ctl_send+0x78>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
 800b048:	6863      	ldr	r3, [r4, #4]
					      seq_auth, &buf->b) &&
 800b04a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	dd06      	ble.n	800b060 <bt_mesh_ctl_send+0x78>
			net_buf_unref(buf);
 800b052:	4658      	mov	r0, fp
 800b054:	f006 fb3a 	bl	80116cc <net_buf_unref>
			return 0;
 800b058:	2000      	movs	r0, #0
}
 800b05a:	b001      	add	sp, #4
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800b060:	4633      	mov	r3, r6
 800b062:	462a      	mov	r2, r5
 800b064:	4659      	mov	r1, fp
 800b066:	4620      	mov	r0, r4
}
 800b068:	b001      	add	sp, #4
 800b06a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
 800b06e:	f7fe bfcf 	b.w	800a010 <bt_mesh_net_send>
		return -ENOBUFS;
 800b072:	f06f 0036 	mvn.w	r0, #54	; 0x36
 800b076:	e7f0      	b.n	800b05a <bt_mesh_ctl_send+0x72>

0800b078 <send_ack>:
{
 800b078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b07a:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
 800b07c:	f8b0 e01c 	ldrh.w	lr, [r0, #28]
{
 800b080:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
	struct bt_mesh_msg_ctx ctx = {
 800b084:	f8ad e01c 	strh.w	lr, [sp, #28]
 800b088:	2700      	movs	r7, #0
{
 800b08a:	460c      	mov	r4, r1
	struct bt_mesh_msg_ctx ctx = {
 800b08c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800b090:	a907      	add	r1, sp, #28
 800b092:	9708      	str	r7, [sp, #32]
{
 800b094:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	struct bt_mesh_msg_ctx ctx = {
 800b096:	f8ad e01e 	strh.w	lr, [sp, #30]
 800b09a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b09e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	struct bt_mesh_net_tx tx = {
 800b0a2:	970b      	str	r7, [sp, #44]	; 0x2c
 800b0a4:	9009      	str	r0, [sp, #36]	; 0x24
 800b0a6:	910a      	str	r1, [sp, #40]	; 0x28
 800b0a8:	b386      	cbz	r6, 800b10c <send_ack+0x94>
 800b0aa:	f001 f933 	bl	800c314 <bt_mesh_primary_addr>
 800b0ae:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
 800b0b2:	f003 f96d 	bl	800e390 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
 800b0b6:	b224      	sxth	r4, r4
 800b0b8:	2c00      	cmp	r4, #0
	struct bt_mesh_net_tx tx = {
 800b0ba:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
 800b0be:	dd27      	ble.n	800b110 <send_ack+0x98>
	u16_t seq_zero = *seq_auth & 0x1fff;
 800b0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
	dst[1] = val;
 800b0c2:	f88d 5019 	strb.w	r5, [sp, #25]
 800b0c6:	881a      	ldrh	r2, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
 800b0c8:	f647 73fc 	movw	r3, #32764	; 0x7ffc
 800b0cc:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800b0d0:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
 800b0d4:	b21b      	sxth	r3, r3
	dst[0] = val >> 8;
 800b0d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[1] = val;
 800b0da:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be16(val >> 16, dst);
 800b0de:	0c2b      	lsrs	r3, r5, #16
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
 800b0e0:	2100      	movs	r1, #0
	dst[0] = val >> 8;
 800b0e2:	f88d 2014 	strb.w	r2, [sp, #20]
	dst[1] = val;
 800b0e6:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[0] = val >> 8;
 800b0ea:	0a1a      	lsrs	r2, r3, #8
 800b0ec:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b0f0:	f88d 2016 	strb.w	r2, [sp, #22]
 800b0f4:	f88d 3018 	strb.w	r3, [sp, #24]
 800b0f8:	9102      	str	r1, [sp, #8]
 800b0fa:	9101      	str	r1, [sp, #4]
 800b0fc:	9100      	str	r1, [sp, #0]
 800b0fe:	2306      	movs	r3, #6
 800b100:	aa05      	add	r2, sp, #20
 800b102:	a809      	add	r0, sp, #36	; 0x24
 800b104:	f7ff ff70 	bl	800afe8 <bt_mesh_ctl_send>
}
 800b108:	b00d      	add	sp, #52	; 0x34
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
 800b10c:	4620      	mov	r0, r4
 800b10e:	e7ce      	b.n	800b0ae <send_ack+0x36>
		return 0;
 800b110:	2000      	movs	r0, #0
 800b112:	e7f9      	b.n	800b108 <send_ack+0x90>

0800b114 <seg_ack>:
}

static void seg_ack(struct k_work *work)
{
 800b114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b116:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 800b118:	f006 ffbc 	bl	8012094 <_impl_k_uptime_get_32>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
 800b11c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b120:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
 800b124:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
 800b128:	1ac0      	subs	r0, r0, r3
 800b12a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b12e:	4298      	cmp	r0, r3
 800b130:	f814 0c10 	ldrb.w	r0, [r4, #-16]
 800b134:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
		BT_WARN("Incomplete timer expired");
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
 800b138:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 800b13c:	f1a4 0518 	sub.w	r5, r4, #24
 800b140:	9002      	str	r0, [sp, #8]
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
 800b142:	d90e      	bls.n	800b162 <seg_ack+0x4e>
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
 800b144:	2000      	movs	r0, #0
 800b146:	9001      	str	r0, [sp, #4]
 800b148:	9500      	str	r5, [sp, #0]
 800b14a:	f854 0c20 	ldr.w	r0, [r4, #-32]
 800b14e:	f7ff ff93 	bl	800b078 <send_ack>
 800b152:	f1a4 0620 	sub.w	r6, r4, #32
			 &rx->seq_auth, 0, rx->obo);
		seg_rx_reset(rx);
 800b156:	4630      	mov	r0, r6

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
 800b158:	b004      	add	sp, #16
 800b15a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx);
 800b15e:	f7ff bbe5 	b.w	800a92c <seg_rx_reset>
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
 800b162:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800b166:	9001      	str	r0, [sp, #4]
 800b168:	9500      	str	r5, [sp, #0]
 800b16a:	f854 0c20 	ldr.w	r0, [r4, #-32]
 800b16e:	f7ff ff83 	bl	800b078 <send_ack>
	to = K_MSEC(150 + (50 * rx->ttl));
 800b172:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b176:	f854 0c08 	ldr.w	r0, [r4, #-8]
	to = K_MSEC(150 + (50 * rx->ttl));
 800b17a:	2232      	movs	r2, #50	; 0x32
 800b17c:	2596      	movs	r5, #150	; 0x96
 800b17e:	fb12 5503 	smlabb	r5, r2, r3, r5
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b182:	f7f5 f9cf 	bl	8000524 <__popcountsi2>
 800b186:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 800b18a:	f003 031f 	and.w	r3, r3, #31
 800b18e:	1a18      	subs	r0, r3, r0
 800b190:	2364      	movs	r3, #100	; 0x64
 800b192:	fb00 3303 	mla	r3, r0, r3, r3
 800b196:	195a      	adds	r2, r3, r5
 800b198:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800b19c:	4804      	ldr	r0, [pc, #16]	; (800b1b0 <seg_ack+0x9c>)
 800b19e:	bfb8      	it	lt
 800b1a0:	f44f 72c8 	movlt.w	r2, #400	; 0x190
 800b1a4:	4621      	mov	r1, r4
}
 800b1a6:	b004      	add	sp, #16
 800b1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1ac:	f007 baa4 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 800b1b0:	20001480 	.word	0x20001480

0800b1b4 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
 800b1b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 800b1bc:	b08d      	sub	sp, #52	; 0x34
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
	struct net_buf_simple_state state;
	int err;

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
 800b1c6:	680b      	ldr	r3, [r1, #0]
{
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
 800b1cc:	8b98      	ldrh	r0, [r3, #28]
 800b1ce:	8a09      	ldrh	r1, [r1, #16]
 800b1d0:	f004 fbac 	bl	800f92c <bt_mesh_friend_match>
 800b1d4:	7ca3      	ldrb	r3, [r4, #18]
 800b1d6:	f360 13c7 	bfi	r3, r0, #7, #1
 800b1da:	74a3      	strb	r3, [r4, #18]

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
 800b1dc:	2109      	movs	r1, #9
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f006 faff 	bl	80117e2 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f006 fb31 	bl	801184c <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
 800b1ea:	682f      	ldr	r7, [r5, #0]
 800b1ec:	9008      	str	r0, [sp, #32]
 800b1ee:	f997 3000 	ldrsb.w	r3, [r7]
	state->len = buf->len;
 800b1f2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f280 816f 	bge.w	800b4da <bt_mesh_trans_recv+0x326>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
 800b1fc:	7ca6      	ldrb	r6, [r4, #18]
 800b1fe:	f016 06c0 	ands.w	r6, r6, #192	; 0xc0
 800b202:	f000 812d 	beq.w	800b460 <bt_mesh_trans_recv+0x2ac>
	if (buf->len < 5) {
 800b206:	f1bb 0f04 	cmp.w	fp, #4
 800b20a:	d804      	bhi.n	800b216 <bt_mesh_trans_recv+0x62>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b20c:	f04f 0a00 	mov.w	sl, #0
		return -EINVAL;
 800b210:	f06f 0615 	mvn.w	r6, #21
 800b214:	e108      	b.n	800b428 <bt_mesh_trans_recv+0x274>
	net_buf_simple_pull(buf, 1);
 800b216:	2101      	movs	r1, #1
 800b218:	4628      	mov	r0, r5
 800b21a:	f006 fae2 	bl	80117e2 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
 800b21e:	4628      	mov	r0, r5
 800b220:	f006 faf7 	bl	8011812 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
 800b224:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
 800b226:	f3c0 098c 	ubfx	r9, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
 800b22a:	4628      	mov	r0, r5
 800b22c:	f006 fae1 	bl	80117f2 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
 800b230:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
 800b234:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
 800b238:	b2f6      	uxtb	r6, r6
	seg_n &= 0x1f;
 800b23a:	f000 081f 	and.w	r8, r0, #31
	if (seg_o > seg_n) {
 800b23e:	4546      	cmp	r6, r8
	seg_n = net_buf_simple_pull_u8(buf);
 800b240:	4682      	mov	sl, r0
	if (seg_o > seg_n) {
 800b242:	d8e3      	bhi.n	800b20c <bt_mesh_trans_recv+0x58>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b244:	4abd      	ldr	r2, [pc, #756]	; (800b53c <bt_mesh_trans_recv+0x388>)
 800b246:	f894 c012 	ldrb.w	ip, [r4, #18]
 800b24a:	6811      	ldr	r1, [r2, #0]
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b24c:	f8b4 e008 	ldrh.w	lr, [r4, #8]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b250:	f00c 0301 	and.w	r3, ip, #1
 800b254:	1ac9      	subs	r1, r1, r3
 800b256:	0a0b      	lsrs	r3, r1, #8
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	060b      	lsls	r3, r1, #24
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	68e1      	ldr	r1, [r4, #12]
 800b260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b264:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800b268:	f021 011f 	bic.w	r1, r1, #31
 800b26c:	ea42 0201 	orr.w	r2, r2, r1
 800b270:	ea42 0209 	orr.w	r2, r2, r9
 800b274:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b278:	4619      	mov	r1, r3
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b27a:	4bb1      	ldr	r3, [pc, #708]	; (800b540 <bt_mesh_trans_recv+0x38c>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
 800b27c:	4610      	mov	r0, r2
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
 800b27e:	8a9a      	ldrh	r2, [r3, #20]
 800b280:	9204      	str	r2, [sp, #16]
 800b282:	4596      	cmp	lr, r2
 800b284:	4699      	mov	r9, r3
 800b286:	d113      	bne.n	800b2b0 <bt_mesh_trans_recv+0xfc>
 800b288:	8adb      	ldrh	r3, [r3, #22]
 800b28a:	9307      	str	r3, [sp, #28]
 800b28c:	9a07      	ldr	r2, [sp, #28]
 800b28e:	8a23      	ldrh	r3, [r4, #16]
 800b290:	4293      	cmp	r3, r2
 800b292:	d10d      	bne.n	800b2b0 <bt_mesh_trans_recv+0xfc>
		if (rx->seq_auth == *seq_auth) {
 800b294:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 800b298:	4299      	cmp	r1, r3
 800b29a:	bf08      	it	eq
 800b29c:	4290      	cmpeq	r0, r2
 800b29e:	f000 815b 	beq.w	800b558 <bt_mesh_trans_recv+0x3a4>
		if (rx->in_use) {
 800b2a2:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b2a6:	0659      	lsls	r1, r3, #25
 800b2a8:	d502      	bpl.n	800b2b0 <bt_mesh_trans_recv+0xfc>
			seg_rx_reset(rx);
 800b2aa:	4648      	mov	r0, r9
 800b2ac:	f7ff fb3e 	bl	800a92c <seg_rx_reset>
		if (rx->in_use) {
 800b2b0:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b2b4:	f013 0140 	ands.w	r1, r3, #64	; 0x40
 800b2b8:	f040 813b 	bne.w	800b532 <bt_mesh_trans_recv+0x37e>
		rx->in_use = 1;
 800b2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c0:	f889 3010 	strb.w	r3, [r9, #16]
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
 800b2c4:	7ca2      	ldrb	r2, [r4, #18]
		rx->ctl = net_rx->ctl;
 800b2c6:	f899 0010 	ldrb.w	r0, [r9, #16]
	buf->data = buf->__buf + reserve_head;
 800b2ca:	4b9e      	ldr	r3, [pc, #632]	; (800b544 <bt_mesh_trans_recv+0x390>)
 800b2cc:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
 800b2d0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		rx->sub = net_rx->sub;
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	f8c9 3000 	str.w	r3, [r9]
		rx->ctl = net_rx->ctl;
 800b2da:	f362 1045 	bfi	r0, r2, #5, #1
		rx->seq_auth = *seq_auth;
 800b2de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2e2:	e9c9 2302 	strd	r2, r3, [r9, #8]
		rx->seg_n = seg_n;
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f36a 0304 	bfi	r3, sl, #0, #5
 800b2ec:	f889 3010 	strb.w	r3, [r9, #16]
	buf->len = 0;
 800b2f0:	f8a9 104c 	strh.w	r1, [r9, #76]	; 0x4c
		rx->hdr = *hdr;
 800b2f4:	783b      	ldrb	r3, [r7, #0]
 800b2f6:	f889 3011 	strb.w	r3, [r9, #17]
		rx->ttl = net_rx->ctx.send_ttl;
 800b2fa:	7ae3      	ldrb	r3, [r4, #11]
 800b2fc:	f889 3012 	strb.w	r3, [r9, #18]
		rx->src = net_rx->ctx.addr;
 800b300:	8923      	ldrh	r3, [r4, #8]
 800b302:	f8a9 3014 	strh.w	r3, [r9, #20]
		rx->dst = net_rx->dst;
 800b306:	8a23      	ldrh	r3, [r4, #16]
 800b308:	f8a9 3016 	strh.w	r3, [r9, #22]
	rx->obo = net_rx->friend_match;
 800b30c:	7ca3      	ldrb	r3, [r4, #18]
 800b30e:	f899 2010 	ldrb.w	r2, [r9, #16]
		rx->block = 0;
 800b312:	f8c9 1018 	str.w	r1, [r9, #24]
	rx->obo = net_rx->friend_match;
 800b316:	09db      	lsrs	r3, r3, #7
 800b318:	f363 12c7 	bfi	r2, r3, #7, #1
 800b31c:	f889 2010 	strb.w	r2, [r9, #16]
	if (BIT(seg_o) & rx->block) {
 800b320:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800b324:	fa21 fa06 	lsr.w	sl, r1, r6
 800b328:	f01a 0a01 	ands.w	sl, sl, #1
 800b32c:	f040 80fc 	bne.w	800b528 <bt_mesh_trans_recv+0x374>
	if (seg_o == seg_n) {
 800b330:	4546      	cmp	r6, r8
 800b332:	f899 0010 	ldrb.w	r0, [r9, #16]
 800b336:	f040 8097 	bne.w	800b468 <bt_mesh_trans_recv+0x2b4>
		return 8;
 800b33a:	f010 0f20 	tst.w	r0, #32
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b33e:	88aa      	ldrh	r2, [r5, #4]
		return 8;
 800b340:	bf0c      	ite	eq
 800b342:	230c      	moveq	r3, #12
 800b344:	2308      	movne	r3, #8
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b346:	fb03 2306 	mla	r3, r3, r6, r2
 800b34a:	b29b      	uxth	r3, r3
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
 800b34c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
 800b350:	f8a9 304c 	strh.w	r3, [r9, #76]	; 0x4c
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
 800b354:	d857      	bhi.n	800b406 <bt_mesh_trans_recv+0x252>
 800b356:	f006 fe9d 	bl	8012094 <_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
 800b35a:	f8c9 001c 	str.w	r0, [r9, #28]
 *
 * @return Remaining time (in milliseconds).
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return _timeout_remaining_get(&work->timeout);
 800b35e:	487a      	ldr	r0, [pc, #488]	; (800b548 <bt_mesh_trans_recv+0x394>)
 800b360:	f007 fa2e 	bl	80127c0 <_timeout_remaining_get>
	if (!k_delayed_work_remaining_get(&rx->ack) &&
 800b364:	b9e8      	cbnz	r0, 800b3a2 <bt_mesh_trans_recv+0x1ee>
	to = K_MSEC(150 + (50 * rx->ttl));
 800b366:	f899 2012 	ldrb.w	r2, [r9, #18]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b36a:	f8d9 0018 	ldr.w	r0, [r9, #24]
	to = K_MSEC(150 + (50 * rx->ttl));
 800b36e:	2196      	movs	r1, #150	; 0x96
 800b370:	f04f 0a32 	mov.w	sl, #50	; 0x32
 800b374:	fb1a 1a02 	smlabb	sl, sl, r2, r1
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
 800b378:	f7f5 f8d4 	bl	8000524 <__popcountsi2>
 800b37c:	f899 3010 	ldrb.w	r3, [r9, #16]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800b380:	4972      	ldr	r1, [pc, #456]	; (800b54c <bt_mesh_trans_recv+0x398>)
 800b382:	f003 031f 	and.w	r3, r3, #31
 800b386:	1a18      	subs	r0, r3, r0
 800b388:	2364      	movs	r3, #100	; 0x64
 800b38a:	fb00 3303 	mla	r3, r0, r3, r3
 800b38e:	eb03 020a 	add.w	r2, r3, sl
 800b392:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800b396:	bfb8      	it	lt
 800b398:	f44f 72c8 	movlt.w	r2, #400	; 0x190
 800b39c:	486c      	ldr	r0, [pc, #432]	; (800b550 <bt_mesh_trans_recv+0x39c>)
 800b39e:	f007 f9ab 	bl	80126f8 <k_delayed_work_submit_to_queue>
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b3a2:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b3a6:	88aa      	ldrh	r2, [r5, #4]
 800b3a8:	6829      	ldr	r1, [r5, #0]
		return 8;
 800b3aa:	f013 0f20 	tst.w	r3, #32
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b3ae:	4b65      	ldr	r3, [pc, #404]	; (800b544 <bt_mesh_trans_recv+0x390>)
		return 8;
 800b3b0:	bf0c      	ite	eq
 800b3b2:	200c      	moveq	r0, #12
 800b3b4:	2008      	movne	r0, #8
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
 800b3b6:	fb06 3000 	mla	r0, r6, r0, r3
 800b3ba:	f7f5 fa61 	bl	8000880 <memcpy>
	rx->block |= BIT(seg_o);
 800b3be:	f04f 0a01 	mov.w	sl, #1
 800b3c2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b3c6:	fa0a f606 	lsl.w	r6, sl, r6
 800b3ca:	4333      	orrs	r3, r6
 800b3cc:	f8c9 3018 	str.w	r3, [r9, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
 800b3d0:	eb08 020a 	add.w	r2, r8, sl
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	2100      	movs	r1, #0
	rx->block |= BIT(seg_o);
 800b3d8:	9304      	str	r3, [sp, #16]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
 800b3da:	f7f5 f82f 	bl	800043c <__aeabi_llsl>
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	3801      	subs	r0, #1
 800b3e2:	4283      	cmp	r3, r0
 800b3e4:	f040 80a3 	bne.w	800b52e <bt_mesh_trans_recv+0x37a>
	if (net_rx->local_match && is_replay(net_rx)) {
 800b3e8:	7ca3      	ldrb	r3, [r4, #18]
 800b3ea:	065a      	lsls	r2, r3, #25
 800b3ec:	d546      	bpl.n	800b47c <bt_mesh_trans_recv+0x2c8>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff f96c 	bl	800a6cc <is_replay>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d041      	beq.n	800b47c <bt_mesh_trans_recv+0x2c8>
		rx->block &= ~BIT(seg_o);
 800b3f8:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b3fc:	ea23 0606 	bic.w	r6, r3, r6
 800b400:	f8c9 6018 	str.w	r6, [r9, #24]
 800b404:	e702      	b.n	800b20c <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b406:	09c0      	lsrs	r0, r0, #7
 800b408:	9002      	str	r0, [sp, #8]
 800b40a:	a80a      	add	r0, sp, #40	; 0x28
 800b40c:	7ae3      	ldrb	r3, [r4, #11]
 800b40e:	8922      	ldrh	r2, [r4, #8]
 800b410:	8a21      	ldrh	r1, [r4, #16]
 800b412:	9000      	str	r0, [sp, #0]
 800b414:	f8cd a004 	str.w	sl, [sp, #4]
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	f7ff fe2d 	bl	800b078 <send_ack>
			seg_rx_reset(rx);
 800b41e:	4848      	ldr	r0, [pc, #288]	; (800b540 <bt_mesh_trans_recv+0x38c>)
 800b420:	f7ff fa84 	bl	800a92c <seg_rx_reset>
			return -EMSGSIZE;
 800b424:	f06f 0623 	mvn.w	r6, #35	; 0x23
	buf->data = buf->__buf + state->offset;
 800b428:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	buf->len = state->len;
 800b42c:	f8a5 b004 	strh.w	fp, [r5, #4]
	buf->data = buf->__buf + state->offset;
 800b430:	f105 0308 	add.w	r3, r5, #8
 800b434:	fa13 f382 	uxtah	r3, r3, r2
 800b438:	602b      	str	r3, [r5, #0]
		bt_mesh_lpn_msg_received(rx);
	}

	net_buf_simple_restore(buf, &state);

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
 800b43a:	f994 3012 	ldrsb.w	r3, [r4, #18]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	da0e      	bge.n	800b460 <bt_mesh_trans_recv+0x2ac>
 800b442:	b96e      	cbnz	r6, 800b460 <bt_mesh_trans_recv+0x2ac>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
 800b444:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b448:	3101      	adds	r1, #1
 800b44a:	bf08      	it	eq
 800b44c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL, buf);
 800b450:	462b      	mov	r3, r5
 800b452:	bf0c      	ite	eq
 800b454:	4632      	moveq	r2, r6
		} else {
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
 800b456:	aa0a      	addne	r2, sp, #40	; 0x28
 800b458:	4651      	mov	r1, sl
 800b45a:	4620      	mov	r0, r4
 800b45c:	f004 fa7c 	bl	800f958 <bt_mesh_friend_enqueue_rx>
		}
	}

	return err;
}
 800b460:	4630      	mov	r0, r6
 800b462:	b00d      	add	sp, #52	; 0x34
 800b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
 800b468:	f010 0f20 	tst.w	r0, #32
		if (buf->len != seg_len(rx->ctl)) {
 800b46c:	88aa      	ldrh	r2, [r5, #4]
 800b46e:	bf0c      	ite	eq
 800b470:	230c      	moveq	r3, #12
 800b472:	2308      	movne	r3, #8
 800b474:	429a      	cmp	r2, r3
 800b476:	f43f af6e 	beq.w	800b356 <bt_mesh_trans_recv+0x1a2>
 800b47a:	e6c7      	b.n	800b20c <bt_mesh_trans_recv+0x58>
	net_rx->seq = (rx->seq_auth & 0xffffff);
 800b47c:	f8d9 3008 	ldr.w	r3, [r9, #8]
	k_delayed_work_cancel(&rx->ack);
 800b480:	4832      	ldr	r0, [pc, #200]	; (800b54c <bt_mesh_trans_recv+0x398>)
	net_rx->seq = (rx->seq_auth & 0xffffff);
 800b482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b486:	60e3      	str	r3, [r4, #12]
	k_delayed_work_cancel(&rx->ack);
 800b488:	f007 f8ea 	bl	8012660 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
 800b48c:	f899 0010 	ldrb.w	r0, [r9, #16]
	send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b490:	7ae3      	ldrb	r3, [r4, #11]
 800b492:	8a21      	ldrh	r1, [r4, #16]
 800b494:	8922      	ldrh	r2, [r4, #8]
 800b496:	09c0      	lsrs	r0, r0, #7
 800b498:	9002      	str	r0, [sp, #8]
 800b49a:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800b49e:	9001      	str	r0, [sp, #4]
 800b4a0:	ae0a      	add	r6, sp, #40	; 0x28
 800b4a2:	9600      	str	r6, [sp, #0]
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	f7ff fde7 	bl	800b078 <send_ack>
	if (net_rx->ctl) {
 800b4aa:	7ca3      	ldrb	r3, [r4, #18]
 800b4ac:	7839      	ldrb	r1, [r7, #0]
 800b4ae:	f013 0f08 	tst.w	r3, #8
 800b4b2:	d00b      	beq.n	800b4cc <bt_mesh_trans_recv+0x318>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
 800b4b4:	4633      	mov	r3, r6
 800b4b6:	4a27      	ldr	r2, [pc, #156]	; (800b554 <bt_mesh_trans_recv+0x3a0>)
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff fbcf 	bl	800ac5c <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
 800b4be:	4606      	mov	r6, r0
	seg_rx_reset(rx);
 800b4c0:	481f      	ldr	r0, [pc, #124]	; (800b540 <bt_mesh_trans_recv+0x38c>)
 800b4c2:	f7ff fa33 	bl	800a92c <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
 800b4c6:	f04f 0a02 	mov.w	sl, #2
 800b4ca:	e7ad      	b.n	800b428 <bt_mesh_trans_recv+0x274>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
 800b4cc:	787a      	ldrb	r2, [r7, #1]
 800b4ce:	4b21      	ldr	r3, [pc, #132]	; (800b554 <bt_mesh_trans_recv+0x3a0>)
 800b4d0:	09d2      	lsrs	r2, r2, #7
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7ff f982 	bl	800a7dc <sdu_recv>
 800b4d8:	e7f1      	b.n	800b4be <bt_mesh_trans_recv+0x30a>
	if (buf->len < 1) {
 800b4da:	f1bb 0f00 	cmp.w	fp, #0
 800b4de:	f43f ae95 	beq.w	800b20c <bt_mesh_trans_recv+0x58>
	if (rx->local_match && is_replay(rx)) {
 800b4e2:	7ca3      	ldrb	r3, [r4, #18]
 800b4e4:	065b      	lsls	r3, r3, #25
 800b4e6:	d410      	bmi.n	800b50a <bt_mesh_trans_recv+0x356>
	hdr = net_buf_simple_pull_u8(buf);
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f006 f982 	bl	80117f2 <net_buf_simple_pull_u8>
	if (rx->ctl) {
 800b4ee:	7ca3      	ldrb	r3, [r4, #18]
 800b4f0:	f013 0708 	ands.w	r7, r3, #8
	hdr = net_buf_simple_pull_u8(buf);
 800b4f4:	4601      	mov	r1, r0
	if (rx->ctl) {
 800b4f6:	d00e      	beq.n	800b516 <bt_mesh_trans_recv+0x362>
		return ctl_recv(rx, hdr, buf, seq_auth);
 800b4f8:	ab0a      	add	r3, sp, #40	; 0x28
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7ff fbad 	bl	800ac5c <ctl_recv>
 800b502:	4606      	mov	r6, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b504:	f04f 0a00 	mov.w	sl, #0
 800b508:	e78e      	b.n	800b428 <bt_mesh_trans_recv+0x274>
	if (rx->local_match && is_replay(rx)) {
 800b50a:	4620      	mov	r0, r4
 800b50c:	f7ff f8de 	bl	800a6cc <is_replay>
 800b510:	2800      	cmp	r0, #0
 800b512:	d0e9      	beq.n	800b4e8 <bt_mesh_trans_recv+0x334>
 800b514:	e67a      	b.n	800b20c <bt_mesh_trans_recv+0x58>
		if (!rx->local_match && !rx->friend_match) {
 800b516:	f013 0ac0 	ands.w	sl, r3, #192	; 0xc0
 800b51a:	d008      	beq.n	800b52e <bt_mesh_trans_recv+0x37a>
		return sdu_recv(rx, hdr, 0, buf);
 800b51c:	462b      	mov	r3, r5
 800b51e:	463a      	mov	r2, r7
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff f95b 	bl	800a7dc <sdu_recv>
 800b526:	e7ec      	b.n	800b502 <bt_mesh_trans_recv+0x34e>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b528:	f04f 0a00 	mov.w	sl, #0
 800b52c:	e047      	b.n	800b5be <bt_mesh_trans_recv+0x40a>
		return 0;
 800b52e:	2600      	movs	r6, #0
 800b530:	e77a      	b.n	800b428 <bt_mesh_trans_recv+0x274>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
 800b532:	f04f 0a00 	mov.w	sl, #0
		return -ENOMEM;
 800b536:	f06f 060b 	mvn.w	r6, #11
 800b53a:	e775      	b.n	800b428 <bt_mesh_trans_recv+0x274>
 800b53c:	20005bd0 	.word	0x20005bd0
 800b540:	20005fa0 	.word	0x20005fa0
 800b544:	20005ff0 	.word	0x20005ff0
 800b548:	20005fcc 	.word	0x20005fcc
 800b54c:	20005fc0 	.word	0x20005fc0
 800b550:	20001480 	.word	0x20001480
 800b554:	20005fe8 	.word	0x20005fe8
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
 800b558:	783a      	ldrb	r2, [r7, #0]
 800b55a:	f899 3011 	ldrb.w	r3, [r9, #17]
 800b55e:	429a      	cmp	r2, r3
 800b560:	f47f ae54 	bne.w	800b20c <bt_mesh_trans_recv+0x58>
 800b564:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b568:	f003 021f 	and.w	r2, r3, #31
 800b56c:	4542      	cmp	r2, r8
 800b56e:	f47f ae4d 	bne.w	800b20c <bt_mesh_trans_recv+0x58>
	if (rx->ctl != net_rx->ctl) {
 800b572:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b576:	f3cc 00c0 	ubfx	r0, ip, #3, #1
 800b57a:	4283      	cmp	r3, r0
 800b57c:	f47f ae46 	bne.w	800b20c <bt_mesh_trans_recv+0x58>
		if (rx->in_use) {
 800b580:	f899 3010 	ldrb.w	r3, [r9, #16]
 800b584:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
 800b588:	f47f aeca 	bne.w	800b320 <bt_mesh_trans_recv+0x16c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
 800b58c:	3201      	adds	r2, #1
 800b58e:	2001      	movs	r0, #1
 800b590:	2100      	movs	r1, #0
 800b592:	9309      	str	r3, [sp, #36]	; 0x24
 800b594:	f7f4 ff52 	bl	800043c <__aeabi_llsl>
 800b598:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	3801      	subs	r0, #1
 800b5a0:	4286      	cmp	r6, r0
 800b5a2:	f47f ae33 	bne.w	800b20c <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
 800b5a6:	7ae2      	ldrb	r2, [r4, #11]
 800b5a8:	9601      	str	r6, [sp, #4]
 800b5aa:	09db      	lsrs	r3, r3, #7
 800b5ac:	9302      	str	r3, [sp, #8]
 800b5ae:	ab0a      	add	r3, sp, #40	; 0x28
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	9907      	ldr	r1, [sp, #28]
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	9a04      	ldr	r2, [sp, #16]
 800b5ba:	f7ff fd5d 	bl	800b078 <send_ack>
		return -EALREADY;
 800b5be:	f06f 0644 	mvn.w	r6, #68	; 0x44
 800b5c2:	e731      	b.n	800b428 <bt_mesh_trans_recv+0x274>

0800b5c4 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
 800b5c4:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i]);
 800b5c6:	4c04      	ldr	r4, [pc, #16]	; (800b5d8 <bt_mesh_rx_reset+0x14>)
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7ff f9af 	bl	800a92c <seg_rx_reset>
		seg_rx[i].src = BT_MESH_ADDR_UNASSIGNED;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	82a3      	strh	r3, [r4, #20]
		seg_rx[i].dst = BT_MESH_ADDR_UNASSIGNED;
 800b5d2:	82e3      	strh	r3, [r4, #22]
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20005fa0 	.word	0x20005fa0

0800b5dc <bt_mesh_tx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
 800b5dc:	4801      	ldr	r0, [pc, #4]	; (800b5e4 <bt_mesh_tx_reset+0x8>)
 800b5de:	f7ff b9c7 	b.w	800a970 <seg_tx_reset>
 800b5e2:	bf00      	nop
 800b5e4:	20000ce8 	.word	0x20000ce8

0800b5e8 <bt_mesh_trans_init>:
	}
}

void bt_mesh_trans_init(void)
{
 800b5e8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
 800b5ea:	4905      	ldr	r1, [pc, #20]	; (800b600 <bt_mesh_trans_init+0x18>)
 800b5ec:	4805      	ldr	r0, [pc, #20]	; (800b604 <bt_mesh_trans_init+0x1c>)
 800b5ee:	f007 f819 	bl	8012624 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
 800b5f2:	4905      	ldr	r1, [pc, #20]	; (800b608 <bt_mesh_trans_init+0x20>)
 800b5f4:	4805      	ldr	r0, [pc, #20]	; (800b60c <bt_mesh_trans_init+0x24>)
	}
}
 800b5f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
 800b5fa:	f007 b813 	b.w	8012624 <k_delayed_work_init>
 800b5fe:	bf00      	nop
 800b600:	0800ae3d 	.word	0x0800ae3d
 800b604:	20000d44 	.word	0x20000d44
 800b608:	0800b115 	.word	0x0800b115
 800b60c:	20005fc0 	.word	0x20005fc0

0800b610 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
 800b610:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
 800b612:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
 800b614:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
 800b616:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b61a:	700a      	strb	r2, [r1, #0]
 800b61c:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
 800b61e:	70c8      	strb	r0, [r1, #3]
 800b620:	4770      	bx	lr

0800b622 <bt_mesh_ccm_encrypt>:

static int bt_mesh_ccm_encrypt(const u8_t key[16], u8_t nonce[13],
			       const u8_t *msg, size_t msg_len,
			       const u8_t *aad, size_t aad_len,
			       u8_t *out_msg, size_t mic_size)
{
 800b622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b626:	b09b      	sub	sp, #108	; 0x6c
 800b628:	4607      	mov	r7, r0
 800b62a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b62e:	9102      	str	r1, [sp, #8]
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00) {
 800b630:	f5b8 4f7f 	cmp.w	r8, #65280	; 0xff00
{
 800b634:	4616      	mov	r6, r2
 800b636:	9301      	str	r3, [sp, #4]
	if (aad_len >= 0xff00) {
 800b638:	f080 8135 	bcs.w	800b8a6 <bt_mesh_ccm_encrypt+0x284>
		return -EINVAL;
	}

	/* C_mic = e(AppKey, 0x01 || nonce || 0x0000) */
	pmsg[0] = 0x01;
 800b63c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800b640:	2301      	movs	r3, #1
 800b642:	f809 3d50 	strb.w	r3, [r9, #-80]!
	memcpy(pmsg + 1, nonce, 13);
 800b646:	220d      	movs	r2, #13
 800b648:	f10d 0019 	add.w	r0, sp, #25
 800b64c:	f7f5 f918 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b650:	2300      	movs	r3, #0
	sys_put_be16(0x0000, pmsg + 14);

	err = bt_encrypt_be(key, pmsg, cmic);
 800b652:	aa0a      	add	r2, sp, #40	; 0x28
 800b654:	4649      	mov	r1, r9
 800b656:	4638      	mov	r0, r7
 800b658:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
 800b65c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b660:	f7fb f914 	bl	800688c <bt_encrypt_be>
	if (err) {
 800b664:	4604      	mov	r4, r0
 800b666:	2800      	cmp	r0, #0
 800b668:	d13e      	bne.n	800b6e8 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* X_0 = e(AppKey, 0x09 || nonce || length) */
	if (mic_size == sizeof(u64_t)) {
 800b66a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d13f      	bne.n	800b6f0 <bt_mesh_ccm_encrypt+0xce>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	bf14      	ite	ne
 800b676:	2359      	movne	r3, #89	; 0x59
 800b678:	2319      	moveq	r3, #25
	} else {
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
	}

	memcpy(pmsg + 1, nonce, 13);
 800b67a:	220d      	movs	r2, #13
 800b67c:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b67e:	f88d 3018 	strb.w	r3, [sp, #24]
	memcpy(pmsg + 1, nonce, 13);
 800b682:	f10d 0019 	add.w	r0, sp, #25
 800b686:	f7f5 f8fb 	bl	8000880 <memcpy>
	sys_put_be16(msg_len, pmsg + 14);
 800b68a:	f8bd 5004 	ldrh.w	r5, [sp, #4]

	err = bt_encrypt_be(key, pmsg, Xn);
 800b68e:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
	dst[0] = val >> 8;
 800b692:	0a2b      	lsrs	r3, r5, #8
 800b694:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800b698:	465a      	mov	r2, fp
	dst[1] = val;
 800b69a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b69e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7fb f8f1 	bl	800688c <bt_encrypt_be>
	if (err) {
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	b9e0      	cbnz	r0, 800b6e8 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* If AAD is being used to authenticate, include it here */
	if (aad_len) {
 800b6ae:	f1b8 0f00 	cmp.w	r8, #0
 800b6b2:	d123      	bne.n	800b6fc <bt_mesh_ccm_encrypt+0xda>
			return err;
		}
	}

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 800b6ba:	330f      	adds	r3, #15
 800b6bc:	091b      	lsrs	r3, r3, #4
	if (!last_blk) {
		last_blk = 16;
 800b6be:	f015 050f 	ands.w	r5, r5, #15
 800b6c2:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
 800b6c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b6ca:	bf08      	it	eq
 800b6cc:	2510      	moveq	r5, #16
	}

	for (j = 0; j < blk_cnt; j++) {
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	45d8      	cmp	r8, fp
 800b6d6:	d35e      	bcc.n	800b796 <bt_mesh_ccm_encrypt+0x174>
			}

		}
	}

	memcpy(out_msg + msg_len, mic, mic_size);
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800b6dc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b6de:	442b      	add	r3, r5
 800b6e0:	a912      	add	r1, sp, #72	; 0x48
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f5 f8cc 	bl	8000880 <memcpy>

	return 0;
}
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	b01b      	add	sp, #108	; 0x6c
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b6f0:	f1b8 0f00 	cmp.w	r8, #0
 800b6f4:	bf14      	ite	ne
 800b6f6:	2349      	movne	r3, #73	; 0x49
 800b6f8:	2309      	moveq	r3, #9
 800b6fa:	e7be      	b.n	800b67a <bt_mesh_ccm_encrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
 800b6fc:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800b700:	f3c8 2307 	ubfx	r3, r8, #8, #8
 800b704:	4053      	eors	r3, r2
 800b706:	f88d 3018 	strb.w	r3, [sp, #24]
 800b70a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 800b70e:	ea83 0308 	eor.w	r3, r3, r8
 800b712:	f88d 3019 	strb.w	r3, [sp, #25]
		aad_len += sizeof(u16_t);
 800b716:	f108 0802 	add.w	r8, r8, #2
		j = 0;
 800b71a:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
 800b71c:	2302      	movs	r3, #2
		while (aad_len > 16) {
 800b71e:	f1b8 0f10 	cmp.w	r8, #16
 800b722:	d815      	bhi.n	800b750 <bt_mesh_ccm_encrypt+0x12e>
			pmsg[i] = Xn[i] ^ aad[j];
 800b724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b726:	2300      	movs	r3, #0
 800b728:	4492      	add	sl, r2
 800b72a:	aa16      	add	r2, sp, #88	; 0x58
 800b72c:	5c98      	ldrb	r0, [r3, r2]
 800b72e:	f81a 1003 	ldrb.w	r1, [sl, r3]
 800b732:	4041      	eors	r1, r0
 800b734:	a806      	add	r0, sp, #24
 800b736:	54c1      	strb	r1, [r0, r3]
		for (i = 0; i < aad_len; i++, j++) {
 800b738:	3301      	adds	r3, #1
 800b73a:	4598      	cmp	r8, r3
 800b73c:	d1f6      	bne.n	800b72c <bt_mesh_ccm_encrypt+0x10a>
		for (i = aad_len; i < 16; i++) {
 800b73e:	2b10      	cmp	r3, #16
 800b740:	d124      	bne.n	800b78c <bt_mesh_ccm_encrypt+0x16a>
		err = bt_encrypt_be(key, pmsg, Xn);
 800b742:	a906      	add	r1, sp, #24
 800b744:	4638      	mov	r0, r7
 800b746:	f7fb f8a1 	bl	800688c <bt_encrypt_be>
		if (err) {
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0b2      	beq.n	800b6b4 <bt_mesh_ccm_encrypt+0x92>
 800b74e:	e01b      	b.n	800b788 <bt_mesh_ccm_encrypt+0x166>
				pmsg[i] = Xn[i] ^ aad[j];
 800b750:	9924      	ldr	r1, [sp, #144]	; 0x90
 800b752:	ebaa 0003 	sub.w	r0, sl, r3
 800b756:	461a      	mov	r2, r3
 800b758:	4408      	add	r0, r1
 800b75a:	5c81      	ldrb	r1, [r0, r2]
 800b75c:	f812 e00b 	ldrb.w	lr, [r2, fp]
 800b760:	ea81 010e 	eor.w	r1, r1, lr
 800b764:	f802 1009 	strb.w	r1, [r2, r9]
				i++, j++;
 800b768:	3201      	adds	r2, #1
			} while (i < 16);
 800b76a:	2a10      	cmp	r2, #16
 800b76c:	d1f5      	bne.n	800b75a <bt_mesh_ccm_encrypt+0x138>
 800b76e:	f1c3 0310 	rsb	r3, r3, #16
			err = bt_encrypt_be(key, pmsg, Xn);
 800b772:	465a      	mov	r2, fp
 800b774:	4649      	mov	r1, r9
 800b776:	4638      	mov	r0, r7
 800b778:	449a      	add	sl, r3
 800b77a:	f7fb f887 	bl	800688c <bt_encrypt_be>
			aad_len -= 16;
 800b77e:	f1a8 0810 	sub.w	r8, r8, #16
			i = 0;
 800b782:	2300      	movs	r3, #0
			if (err) {
 800b784:	2800      	cmp	r0, #0
 800b786:	d0ca      	beq.n	800b71e <bt_mesh_ccm_encrypt+0xfc>
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b788:	4604      	mov	r4, r0
 800b78a:	e7ad      	b.n	800b6e8 <bt_mesh_ccm_encrypt+0xc6>
			pmsg[i] = Xn[i];
 800b78c:	a806      	add	r0, sp, #24
 800b78e:	5cd1      	ldrb	r1, [r2, r3]
 800b790:	54c1      	strb	r1, [r0, r3]
		for (i = aad_len; i < 16; i++) {
 800b792:	3301      	adds	r3, #1
 800b794:	e7d3      	b.n	800b73e <bt_mesh_ccm_encrypt+0x11c>
		if (j + 1 == blk_cnt) {
 800b796:	f108 0801 	add.w	r8, r8, #1
 800b79a:	45c3      	cmp	fp, r8
 800b79c:	f04f 0300 	mov.w	r3, #0
 800b7a0:	d14f      	bne.n	800b842 <bt_mesh_ccm_encrypt+0x220>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b7a2:	a916      	add	r1, sp, #88	; 0x58
			for (i = 0; i < last_blk; i++) {
 800b7a4:	42ab      	cmp	r3, r5
 800b7a6:	d33f      	bcc.n	800b828 <bt_mesh_ccm_encrypt+0x206>
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
			for (i = last_blk; i < 16; i++) {
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d141      	bne.n	800b836 <bt_mesh_ccm_encrypt+0x214>
			err = bt_encrypt_be(key, pmsg, Xn);
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	a906      	add	r1, sp, #24
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	f7fb f868 	bl	800688c <bt_encrypt_be>
			if (err) {
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d1e3      	bne.n	800b788 <bt_mesh_ccm_encrypt+0x166>
				mic[i] = cmic[i] ^ Xn[i];
 800b7c0:	aa12      	add	r2, sp, #72	; 0x48
 800b7c2:	a90a      	add	r1, sp, #40	; 0x28
 800b7c4:	5c43      	ldrb	r3, [r0, r1]
 800b7c6:	f810 e00a 	ldrb.w	lr, [r0, sl]
 800b7ca:	ea83 030e 	eor.w	r3, r3, lr
 800b7ce:	5483      	strb	r3, [r0, r2]
			for (i = 0; i < sizeof(mic); i++) {
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	2810      	cmp	r0, #16
 800b7d4:	d1f6      	bne.n	800b7c4 <bt_mesh_ccm_encrypt+0x1a2>
			pmsg[0] = 0x01;
 800b7d6:	ab1a      	add	r3, sp, #104	; 0x68
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f803 2d50 	strb.w	r2, [r3, #-80]!
			memcpy(pmsg + 1, nonce, 13);
 800b7de:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
 800b7e0:	9304      	str	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
 800b7e2:	220d      	movs	r2, #13
 800b7e4:	f10d 0019 	add.w	r0, sp, #25
			pmsg[0] = 0x01;
 800b7e8:	9305      	str	r3, [sp, #20]
			memcpy(pmsg + 1, nonce, 13);
 800b7ea:	f7f5 f849 	bl	8000880 <memcpy>
 800b7ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b7f2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b7f6:	9b04      	ldr	r3, [sp, #16]
	dst[1] = val;
 800b7f8:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 800b7fc:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800b800:	4652      	mov	r2, sl
 800b802:	4619      	mov	r1, r3
 800b804:	4638      	mov	r0, r7
 800b806:	f7fb f841 	bl	800688c <bt_encrypt_be>
			if (err) {
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1bc      	bne.n	800b788 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
 800b80e:	5c33      	ldrb	r3, [r6, r0]
 800b810:	f810 200a 	ldrb.w	r2, [r0, sl]
 800b814:	4053      	eors	r3, r2
 800b816:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < last_blk; i++) {
 800b81a:	3001      	adds	r0, #1
 800b81c:	4285      	cmp	r5, r0
 800b81e:	d8f6      	bhi.n	800b80e <bt_mesh_ccm_encrypt+0x1ec>
 800b820:	3610      	adds	r6, #16
 800b822:	f109 0910 	add.w	r9, r9, #16
 800b826:	e755      	b.n	800b6d4 <bt_mesh_ccm_encrypt+0xb2>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b828:	5cf0      	ldrb	r0, [r6, r3]
 800b82a:	5c5a      	ldrb	r2, [r3, r1]
 800b82c:	4042      	eors	r2, r0
 800b82e:	a806      	add	r0, sp, #24
 800b830:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
 800b832:	3301      	adds	r3, #1
 800b834:	e7b6      	b.n	800b7a4 <bt_mesh_ccm_encrypt+0x182>
				pmsg[i] = Xn[i] ^ 0x00;
 800b836:	a906      	add	r1, sp, #24
 800b838:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b83c:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
 800b83e:	3301      	adds	r3, #1
 800b840:	e7b5      	b.n	800b7ae <bt_mesh_ccm_encrypt+0x18c>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
 800b842:	aa16      	add	r2, sp, #88	; 0x58
 800b844:	5cf0      	ldrb	r0, [r6, r3]
 800b846:	5c99      	ldrb	r1, [r3, r2]
 800b848:	4041      	eors	r1, r0
 800b84a:	a806      	add	r0, sp, #24
 800b84c:	54c1      	strb	r1, [r0, r3]
			for (i = 0; i < 16; i++) {
 800b84e:	3301      	adds	r3, #1
 800b850:	2b10      	cmp	r3, #16
 800b852:	d1f7      	bne.n	800b844 <bt_mesh_ccm_encrypt+0x222>
			err = bt_encrypt_be(key, pmsg, Xn);
 800b854:	4601      	mov	r1, r0
 800b856:	4638      	mov	r0, r7
 800b858:	f7fb f818 	bl	800688c <bt_encrypt_be>
			if (err) {
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d193      	bne.n	800b788 <bt_mesh_ccm_encrypt+0x166>
			pmsg[0] = 0x01;
 800b860:	2301      	movs	r3, #1
			memcpy(pmsg + 1, nonce, 13);
 800b862:	220d      	movs	r2, #13
 800b864:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
 800b866:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(pmsg + 1, nonce, 13);
 800b86a:	f10d 0019 	add.w	r0, sp, #25
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b86e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
			memcpy(pmsg + 1, nonce, 13);
 800b872:	f7f5 f805 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b876:	f3c8 2307 	ubfx	r3, r8, #8, #8
			err = bt_encrypt_be(key, pmsg, cmsg);
 800b87a:	4652      	mov	r2, sl
 800b87c:	a906      	add	r1, sp, #24
 800b87e:	4638      	mov	r0, r7
 800b880:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
 800b884:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
 800b888:	f7fb f800 	bl	800688c <bt_encrypt_be>
			if (err) {
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f47f af7b 	bne.w	800b788 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
 800b892:	5c33      	ldrb	r3, [r6, r0]
 800b894:	f810 200a 	ldrb.w	r2, [r0, sl]
 800b898:	4053      	eors	r3, r2
 800b89a:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < 16; i++) {
 800b89e:	3001      	adds	r0, #1
 800b8a0:	2810      	cmp	r0, #16
 800b8a2:	d1f6      	bne.n	800b892 <bt_mesh_ccm_encrypt+0x270>
 800b8a4:	e7bc      	b.n	800b820 <bt_mesh_ccm_encrypt+0x1fe>
		return -EINVAL;
 800b8a6:	f06f 0415 	mvn.w	r4, #21
 800b8aa:	e71d      	b.n	800b6e8 <bt_mesh_ccm_encrypt+0xc6>

0800b8ac <bt_mesh_ccm_decrypt>:
{
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	b09d      	sub	sp, #116	; 0x74
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	e88d 0006 	stmia.w	sp, {r1, r2}
 800b8b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
	if (msg_len < 1 || aad_len >= 0xff00) {
 800b8ba:	461f      	mov	r7, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8143 	beq.w	800bb48 <bt_mesh_ccm_decrypt+0x29c>
 800b8c2:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800b8c6:	f080 813f 	bcs.w	800bb48 <bt_mesh_ccm_decrypt+0x29c>
	pmsg[0] = 0x01;
 800b8ca:	ae1c      	add	r6, sp, #112	; 0x70
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f806 3d50 	strb.w	r3, [r6, #-80]!
	memcpy(pmsg + 1, nonce, 13);
 800b8d2:	220d      	movs	r2, #13
 800b8d4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800b8d8:	f7f4 ffd2 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b8dc:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
 800b8de:	aa0c      	add	r2, sp, #48	; 0x30
 800b8e0:	4631      	mov	r1, r6
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
 800b8e8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800b8ec:	f7fa ffce 	bl	800688c <bt_encrypt_be>
	if (err) {
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	f040 808a 	bne.w	800ba0a <bt_mesh_ccm_decrypt+0x15e>
	if (mic_size == sizeof(u64_t)) {
 800b8f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b8f8:	2b08      	cmp	r3, #8
 800b8fa:	d13c      	bne.n	800b976 <bt_mesh_ccm_decrypt+0xca>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
 800b8fc:	2c00      	cmp	r4, #0
 800b8fe:	bf14      	ite	ne
 800b900:	2359      	movne	r3, #89	; 0x59
 800b902:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
 800b904:	220d      	movs	r2, #13
 800b906:	9900      	ldr	r1, [sp, #0]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b908:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
 800b90c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	sys_put_be16(msg_len, pmsg + 14);
 800b910:	fa1f fb87 	uxth.w	fp, r7
	err = bt_encrypt_be(key, pmsg, Xn);
 800b914:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
 800b918:	f7f4 ffb2 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800b91c:	ea4f 231b 	mov.w	r3, fp, lsr #8
	err = bt_encrypt_be(key, pmsg, Xn);
 800b920:	4642      	mov	r2, r8
 800b922:	4631      	mov	r1, r6
 800b924:	4628      	mov	r0, r5
 800b926:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
 800b92a:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
 800b92e:	f7fa ffad 	bl	800688c <bt_encrypt_be>
	if (err) {
 800b932:	2800      	cmp	r0, #0
 800b934:	d169      	bne.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
	if (aad_len) {
 800b936:	bb1c      	cbnz	r4, 800b980 <bt_mesh_ccm_decrypt+0xd4>
	blk_cnt = (msg_len + 15) / 16;
 800b938:	f107 030f 	add.w	r3, r7, #15
 800b93c:	091b      	lsrs	r3, r3, #4
		last_blk = 16;
 800b93e:	f01b 040f 	ands.w	r4, fp, #15
 800b942:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
 800b946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b94a:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
 800b94e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b952:	bf08      	it	eq
 800b954:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
 800b956:	2600      	movs	r6, #0
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	455e      	cmp	r6, fp
 800b95c:	d35c      	bcc.n	800ba18 <bt_mesh_ccm_decrypt+0x16c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b962:	443b      	add	r3, r7
 800b964:	4619      	mov	r1, r3
 800b966:	a818      	add	r0, sp, #96	; 0x60
 800b968:	f7f4 ff75 	bl	8000856 <memcmp>
		return -EBADMSG;
 800b96c:	2800      	cmp	r0, #0
 800b96e:	bf18      	it	ne
 800b970:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
 800b974:	e049      	b.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
 800b976:	2c00      	cmp	r4, #0
 800b978:	bf14      	ite	ne
 800b97a:	2349      	movne	r3, #73	; 0x49
 800b97c:	2309      	moveq	r3, #9
 800b97e:	e7c1      	b.n	800b904 <bt_mesh_ccm_decrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
 800b980:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800b984:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b988:	4053      	eors	r3, r2
 800b98a:	f88d 3020 	strb.w	r3, [sp, #32]
 800b98e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 800b992:	4063      	eors	r3, r4
 800b994:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		aad_len += sizeof(u16_t);
 800b998:	3402      	adds	r4, #2
		j = 0;
 800b99a:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
 800b99c:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
 800b99e:	46b1      	mov	r9, r6
		while (aad_len > 16) {
 800b9a0:	2c10      	cmp	r4, #16
 800b9a2:	d816      	bhi.n	800b9d2 <bt_mesh_ccm_decrypt+0x126>
			pmsg[i] = Xn[i] ^ aad[j];
 800b9a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	eb02 090a 	add.w	r9, r2, sl
 800b9ac:	aa14      	add	r2, sp, #80	; 0x50
 800b9ae:	f819 1003 	ldrb.w	r1, [r9, r3]
 800b9b2:	5c98      	ldrb	r0, [r3, r2]
 800b9b4:	4041      	eors	r1, r0
 800b9b6:	54f1      	strb	r1, [r6, r3]
		for (i = 0; i < aad_len; i++, j++) {
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	429c      	cmp	r4, r3
 800b9bc:	d1f7      	bne.n	800b9ae <bt_mesh_ccm_decrypt+0x102>
			pmsg[i] = Xn[i];
 800b9be:	a908      	add	r1, sp, #32
		for (i = aad_len; i < 16; i++) {
 800b9c0:	2b10      	cmp	r3, #16
 800b9c2:	d125      	bne.n	800ba10 <bt_mesh_ccm_decrypt+0x164>
		err = bt_encrypt_be(key, pmsg, Xn);
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f7fa ff60 	bl	800688c <bt_encrypt_be>
		if (err) {
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0b3      	beq.n	800b938 <bt_mesh_ccm_decrypt+0x8c>
 800b9d0:	e01b      	b.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
				pmsg[i] = Xn[i] ^ aad[j];
 800b9d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9d4:	ebaa 0e02 	sub.w	lr, sl, r2
 800b9d8:	4611      	mov	r1, r2
 800b9da:	449e      	add	lr, r3
 800b9dc:	f81e 0001 	ldrb.w	r0, [lr, r1]
 800b9e0:	f811 c008 	ldrb.w	ip, [r1, r8]
 800b9e4:	ea80 000c 	eor.w	r0, r0, ip
 800b9e8:	f801 0009 	strb.w	r0, [r1, r9]
				i++, j++;
 800b9ec:	3101      	adds	r1, #1
			} while (i < 16);
 800b9ee:	2910      	cmp	r1, #16
 800b9f0:	d1f4      	bne.n	800b9dc <bt_mesh_ccm_decrypt+0x130>
 800b9f2:	f1c2 0210 	rsb	r2, r2, #16
 800b9f6:	4492      	add	sl, r2
			err = bt_encrypt_be(key, pmsg, Xn);
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	4642      	mov	r2, r8
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f7fa ff45 	bl	800688c <bt_encrypt_be>
			aad_len -= 16;
 800ba02:	3c10      	subs	r4, #16
			i = 0;
 800ba04:	2200      	movs	r2, #0
			if (err) {
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0ca      	beq.n	800b9a0 <bt_mesh_ccm_decrypt+0xf4>
}
 800ba0a:	b01d      	add	sp, #116	; 0x74
 800ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
 800ba10:	5cd0      	ldrb	r0, [r2, r3]
 800ba12:	5458      	strb	r0, [r3, r1]
		for (i = aad_len; i < 16; i++) {
 800ba14:	3301      	adds	r3, #1
 800ba16:	e7d3      	b.n	800b9c0 <bt_mesh_ccm_decrypt+0x114>
		if (j + 1 == blk_cnt) {
 800ba18:	3601      	adds	r6, #1
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	45b3      	cmp	fp, r6
			pmsg[0] = 0x01;
 800ba1e:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
 800ba22:	f04f 020d 	mov.w	r2, #13
 800ba26:	9900      	ldr	r1, [sp, #0]
 800ba28:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
 800ba2c:	d158      	bne.n	800bae0 <bt_mesh_ccm_decrypt+0x234>
			err = bt_encrypt_be(key, pmsg, cmsg);
 800ba2e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
			memcpy(pmsg + 1, nonce, 13);
 800ba32:	f7f4 ff25 	bl	8000880 <memcpy>
 800ba36:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ba3a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
 800ba3e:	4642      	mov	r2, r8
 800ba40:	a908      	add	r1, sp, #32
 800ba42:	4628      	mov	r0, r5
	dst[1] = val;
 800ba44:	f88d b02f 	strb.w	fp, [sp, #47]	; 0x2f
 800ba48:	f7fa ff20 	bl	800688c <bt_encrypt_be>
			if (err) {
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1dc      	bne.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
 800ba50:	ab04      	add	r3, sp, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800ba52:	4642      	mov	r2, r8
			for (i = 0; i < last_blk; i++) {
 800ba54:	42a0      	cmp	r0, r4
 800ba56:	46a0      	mov	r8, r4
 800ba58:	d332      	bcc.n	800bac0 <bt_mesh_ccm_decrypt+0x214>
			memcpy(out_msg + (j * 16), msg, last_blk);
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	4650      	mov	r0, sl
 800ba60:	9303      	str	r3, [sp, #12]
 800ba62:	f7f4 ff0d 	bl	8000880 <memcpy>
				pmsg[i] = Xn[i] ^ msg[i];
 800ba66:	9b03      	ldr	r3, [sp, #12]
			for (i = 0; i < last_blk; i++) {
 800ba68:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
 800ba6a:	a908      	add	r1, sp, #32
 800ba6c:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 800ba70:	f812 000e 	ldrb.w	r0, [r2, lr]
 800ba74:	f812 c003 	ldrb.w	ip, [r2, r3]
 800ba78:	ea80 000c 	eor.w	r0, r0, ip
 800ba7c:	5450      	strb	r0, [r2, r1]
			for (i = 0; i < last_blk; i++) {
 800ba7e:	3201      	adds	r2, #1
 800ba80:	4294      	cmp	r4, r2
 800ba82:	d8f5      	bhi.n	800ba70 <bt_mesh_ccm_decrypt+0x1c4>
 800ba84:	ab14      	add	r3, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
 800ba86:	f1b8 0f10 	cmp.w	r8, #16
 800ba8a:	d122      	bne.n	800bad2 <bt_mesh_ccm_decrypt+0x226>
			err = bt_encrypt_be(key, pmsg, Xn);
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4628      	mov	r0, r5
 800ba90:	9303      	str	r3, [sp, #12]
 800ba92:	f7fa fefb 	bl	800688c <bt_encrypt_be>
			if (err) {
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d1b7      	bne.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
				mic[i] = cmic[i] ^ Xn[i];
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	a918      	add	r1, sp, #96	; 0x60
 800ba9e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800baa2:	f810 200e 	ldrb.w	r2, [r0, lr]
 800baa6:	f810 c003 	ldrb.w	ip, [r0, r3]
 800baaa:	ea82 020c 	eor.w	r2, r2, ip
 800baae:	5442      	strb	r2, [r0, r1]
			for (i = 0; i < sizeof(mic); i++) {
 800bab0:	3001      	adds	r0, #1
 800bab2:	2810      	cmp	r0, #16
 800bab4:	d1f5      	bne.n	800baa2 <bt_mesh_ccm_decrypt+0x1f6>
 800bab6:	f10a 0a10 	add.w	sl, sl, #16
 800baba:	f109 0910 	add.w	r9, r9, #16
 800babe:	e74c      	b.n	800b95a <bt_mesh_ccm_decrypt+0xae>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800bac0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800bac4:	f810 e002 	ldrb.w	lr, [r0, r2]
 800bac8:	ea81 010e 	eor.w	r1, r1, lr
 800bacc:	5419      	strb	r1, [r3, r0]
			for (i = 0; i < last_blk; i++) {
 800bace:	3001      	adds	r0, #1
 800bad0:	e7c0      	b.n	800ba54 <bt_mesh_ccm_decrypt+0x1a8>
				pmsg[i] = Xn[i] ^ 0x00;
 800bad2:	f813 2008 	ldrb.w	r2, [r3, r8]
 800bad6:	f801 2008 	strb.w	r2, [r1, r8]
			for (i = last_blk; i < 16; i++) {
 800bada:	f108 0801 	add.w	r8, r8, #1
 800bade:	e7d2      	b.n	800ba86 <bt_mesh_ccm_decrypt+0x1da>
			memcpy(pmsg + 1, nonce, 13);
 800bae0:	f7f4 fece 	bl	8000880 <memcpy>
	dst[0] = val >> 8;
 800bae4:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800bae8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
 800baec:	ab10      	add	r3, sp, #64	; 0x40
 800baee:	461a      	mov	r2, r3
 800baf0:	a908      	add	r1, sp, #32
 800baf2:	4628      	mov	r0, r5
	dst[1] = val;
 800baf4:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 800baf8:	9303      	str	r3, [sp, #12]
 800bafa:	f7fa fec7 	bl	800688c <bt_encrypt_be>
			if (err) {
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d183      	bne.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	4602      	mov	r2, r0
 800bb06:	f10d 0810 	add.w	r8, sp, #16
 800bb0a:	f819 1002 	ldrb.w	r1, [r9, r2]
 800bb0e:	5cd0      	ldrb	r0, [r2, r3]
 800bb10:	4041      	eors	r1, r0
 800bb12:	f802 1008 	strb.w	r1, [r2, r8]
			for (i = 0; i < 16; i++) {
 800bb16:	3201      	adds	r2, #1
 800bb18:	2a10      	cmp	r2, #16
 800bb1a:	d1f6      	bne.n	800bb0a <bt_mesh_ccm_decrypt+0x25e>
			memcpy(out_msg + (j * 16), msg, 16);
 800bb1c:	4641      	mov	r1, r8
 800bb1e:	4650      	mov	r0, sl
 800bb20:	f7f4 feae 	bl	8000880 <memcpy>
			for (i = 0; i < 16; i++) {
 800bb24:	2300      	movs	r3, #0
				pmsg[i] = Xn[i] ^ msg[i];
 800bb26:	a908      	add	r1, sp, #32
 800bb28:	aa14      	add	r2, sp, #80	; 0x50
 800bb2a:	5c98      	ldrb	r0, [r3, r2]
 800bb2c:	f813 e008 	ldrb.w	lr, [r3, r8]
 800bb30:	ea80 000e 	eor.w	r0, r0, lr
 800bb34:	5458      	strb	r0, [r3, r1]
			for (i = 0; i < 16; i++) {
 800bb36:	3301      	adds	r3, #1
 800bb38:	2b10      	cmp	r3, #16
 800bb3a:	d1f6      	bne.n	800bb2a <bt_mesh_ccm_decrypt+0x27e>
			err = bt_encrypt_be(key, pmsg, Xn);
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f7fa fea5 	bl	800688c <bt_encrypt_be>
			if (err) {
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d0b7      	beq.n	800bab6 <bt_mesh_ccm_decrypt+0x20a>
 800bb46:	e760      	b.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>
		return -EINVAL;
 800bb48:	f06f 0015 	mvn.w	r0, #21
 800bb4c:	e75d      	b.n	800ba0a <bt_mesh_ccm_decrypt+0x15e>

0800bb4e <bt_mesh_aes_cmac>:
{
 800bb4e:	b570      	push	{r4, r5, r6, lr}
 800bb50:	b0c2      	sub	sp, #264	; 0x108
 800bb52:	460d      	mov	r5, r1
 800bb54:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 800bb56:	4601      	mov	r1, r0
 800bb58:	aa16      	add	r2, sp, #88	; 0x58
 800bb5a:	4668      	mov	r0, sp
{
 800bb5c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
 800bb5e:	f7f6 fabf 	bl	80020e0 <tc_cmac_setup>
 800bb62:	b140      	cbz	r0, 800bb76 <bt_mesh_aes_cmac+0x28>
 800bb64:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
 800bb66:	b954      	cbnz	r4, 800bb7e <bt_mesh_aes_cmac+0x30>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
 800bb68:	4669      	mov	r1, sp
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7f6 fb48 	bl	8002200 <tc_cmac_final>
 800bb70:	b108      	cbz	r0, 800bb76 <bt_mesh_aes_cmac+0x28>
	return 0;
 800bb72:	4620      	mov	r0, r4
 800bb74:	e001      	b.n	800bb7a <bt_mesh_aes_cmac+0x2c>
		return -EIO;
 800bb76:	f06f 0004 	mvn.w	r0, #4
}
 800bb7a:	b042      	add	sp, #264	; 0x108
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
 800bb7e:	e915 0006 	ldmdb	r5, {r1, r2}
 800bb82:	4668      	mov	r0, sp
 800bb84:	f7f6 fad8 	bl	8002138 <tc_cmac_update>
 800bb88:	3508      	adds	r5, #8
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0f3      	beq.n	800bb76 <bt_mesh_aes_cmac+0x28>
	for (; sg_len; sg_len--, sg++) {
 800bb8e:	3c01      	subs	r4, #1
 800bb90:	e7e9      	b.n	800bb66 <bt_mesh_aes_cmac+0x18>

0800bb92 <bt_mesh_aes_cmac_one>:
{
 800bb92:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
 800bb94:	e88d 0006 	stmia.w	sp, {r1, r2}
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
 800bb98:	2201      	movs	r2, #1
 800bb9a:	4669      	mov	r1, sp
 800bb9c:	f7ff ffd7 	bl	800bb4e <bt_mesh_aes_cmac>
}
 800bba0:	b003      	add	sp, #12
 800bba2:	f85d fb04 	ldr.w	pc, [sp], #4

0800bba6 <bt_mesh_s1>:
{
 800bba6:	b530      	push	{r4, r5, lr}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
 800bbae:	2210      	movs	r2, #16
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	4668      	mov	r0, sp
 800bbb4:	f7f4 fe90 	bl	80008d8 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f7f4 fe37 	bl	800082c <strlen>
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4668      	mov	r0, sp
 800bbc6:	f7ff ffe4 	bl	800bb92 <bt_mesh_aes_cmac_one>
}
 800bbca:	3000      	adds	r0, #0
 800bbcc:	bf18      	it	ne
 800bbce:	2001      	movne	r0, #1
 800bbd0:	b005      	add	sp, #20
 800bbd2:	bd30      	pop	{r4, r5, pc}

0800bbd4 <bt_mesh_k1>:
{
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	9d04      	ldr	r5, [sp, #16]
 800bbd8:	4616      	mov	r6, r2
 800bbda:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
 800bbdc:	460a      	mov	r2, r1
 800bbde:	462b      	mov	r3, r5
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ffd5 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err < 0) {
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	db0a      	blt.n	800bc02 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7f4 fe1d 	bl	800082c <strlen>
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
}
 800bbfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
 800bbfe:	f7ff bfc8 	b.w	800bb92 <bt_mesh_aes_cmac_one>
}
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <bt_mesh_k2>:
{
 800bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc06:	b095      	sub	sp, #84	; 0x54
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460f      	mov	r7, r1
	err = bt_mesh_s1("smk2", salt);
 800bc0c:	4828      	ldr	r0, [pc, #160]	; (800bcb0 <bt_mesh_k2+0xac>)
 800bc0e:	a902      	add	r1, sp, #8
{
 800bc10:	4615      	mov	r5, r2
 800bc12:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
 800bc14:	f7ff ffc7 	bl	800bba6 <bt_mesh_s1>
	if (err) {
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d146      	bne.n	800bcaa <bt_mesh_k2+0xa6>
	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	ab0a      	add	r3, sp, #40	; 0x28
 800bc20:	2210      	movs	r2, #16
 800bc22:	a802      	add	r0, sp, #8
 800bc24:	f7ff ffb5 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800bc28:	4604      	mov	r4, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d13a      	bne.n	800bca4 <bt_mesh_k2+0xa0>
	pad = 0x01;
 800bc2e:	2301      	movs	r3, #1
	sg[1].len  = p_len;
 800bc30:	9511      	str	r5, [sp, #68]	; 0x44
	sg[2].data = &pad;
 800bc32:	f10d 0207 	add.w	r2, sp, #7
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc36:	ad06      	add	r5, sp, #24
	pad = 0x01;
 800bc38:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].data = NULL;
 800bc3c:	900e      	str	r0, [sp, #56]	; 0x38
	sg[0].len  = 0;
 800bc3e:	900f      	str	r0, [sp, #60]	; 0x3c
	sg[2].data = &pad;
 800bc40:	9212      	str	r2, [sp, #72]	; 0x48
	sg[2].len  = sizeof(pad);
 800bc42:	9313      	str	r3, [sp, #76]	; 0x4c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc44:	2203      	movs	r2, #3
 800bc46:	462b      	mov	r3, r5
 800bc48:	a90e      	add	r1, sp, #56	; 0x38
 800bc4a:	a80a      	add	r0, sp, #40	; 0x28
	sg[1].data = p;
 800bc4c:	9710      	str	r7, [sp, #64]	; 0x40
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc4e:	f7ff ff7e 	bl	800bb4e <bt_mesh_aes_cmac>
	if (err) {
 800bc52:	4604      	mov	r4, r0
 800bc54:	bb30      	cbnz	r0, 800bca4 <bt_mesh_k2+0xa0>
	net_id[0] = out[15] & 0x7f;
 800bc56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	sg[0].data = out;
 800bc5a:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
 800bc5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc60:	7033      	strb	r3, [r6, #0]
	pad = 0x02;
 800bc62:	2302      	movs	r3, #2
 800bc64:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
 800bc68:	2610      	movs	r6, #16
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	a90e      	add	r1, sp, #56	; 0x38
 800bc70:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
 800bc72:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc74:	f7ff ff6b 	bl	800bb4e <bt_mesh_aes_cmac>
	if (err) {
 800bc78:	4604      	mov	r4, r0
 800bc7a:	b998      	cbnz	r0, 800bca4 <bt_mesh_k2+0xa0>
	memcpy(enc_key, out, 16);
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	4629      	mov	r1, r5
 800bc80:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bc82:	f7f4 fdfd 	bl	8000880 <memcpy>
	pad = 0x03;
 800bc86:	2203      	movs	r2, #3
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc88:	462b      	mov	r3, r5
 800bc8a:	a90e      	add	r1, sp, #56	; 0x38
 800bc8c:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
 800bc8e:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
 800bc92:	f7ff ff5c 	bl	800bb4e <bt_mesh_aes_cmac>
	if (err) {
 800bc96:	4604      	mov	r4, r0
 800bc98:	b920      	cbnz	r0, 800bca4 <bt_mesh_k2+0xa0>
	memcpy(priv_key, out, 16);
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bca0:	f7f4 fdee 	bl	8000880 <memcpy>
}
 800bca4:	4620      	mov	r0, r4
 800bca6:	b015      	add	sp, #84	; 0x54
 800bca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcaa:	2401      	movs	r4, #1
 800bcac:	e7fa      	b.n	800bca4 <bt_mesh_k2+0xa0>
 800bcae:	bf00      	nop
 800bcb0:	08013923 	.word	0x08013923

0800bcb4 <bt_mesh_k3>:
{
 800bcb4:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bcb6:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <bt_mesh_k3+0x54>)
{
 800bcb8:	b08b      	sub	sp, #44	; 0x2c
 800bcba:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	9000      	str	r0, [sp, #0]
{
 800bcc0:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bcc2:	791b      	ldrb	r3, [r3, #4]
	err = bt_mesh_s1("smk3", tmp);
 800bcc4:	4811      	ldr	r0, [pc, #68]	; (800bd0c <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
 800bcc6:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
 800bcca:	a902      	add	r1, sp, #8
 800bccc:	f7ff ff6b 	bl	800bba6 <bt_mesh_s1>
	if (err) {
 800bcd0:	b9b8      	cbnz	r0, 800bd02 <bt_mesh_k3+0x4e>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	ab06      	add	r3, sp, #24
 800bcd6:	2210      	movs	r2, #16
 800bcd8:	a802      	add	r0, sp, #8
 800bcda:	f7ff ff5a 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800bcde:	4604      	mov	r4, r0
 800bce0:	b960      	cbnz	r0, 800bcfc <bt_mesh_k3+0x48>
	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
 800bce2:	ab02      	add	r3, sp, #8
 800bce4:	2205      	movs	r2, #5
 800bce6:	4669      	mov	r1, sp
 800bce8:	a806      	add	r0, sp, #24
 800bcea:	f7ff ff52 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800bcee:	4604      	mov	r4, r0
 800bcf0:	b920      	cbnz	r0, 800bcfc <bt_mesh_k3+0x48>
	memcpy(out, tmp + 8, 8);
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f7f4 fdc2 	bl	8000880 <memcpy>
}
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	b00b      	add	sp, #44	; 0x2c
 800bd00:	bd30      	pop	{r4, r5, pc}
 800bd02:	2401      	movs	r4, #1
 800bd04:	e7fa      	b.n	800bcfc <bt_mesh_k3+0x48>
 800bd06:	bf00      	nop
 800bd08:	08012cb2 	.word	0x08012cb2
 800bd0c:	08013928 	.word	0x08013928

0800bd10 <bt_mesh_k4>:
{
 800bd10:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
 800bd12:	4b11      	ldr	r3, [pc, #68]	; (800bd58 <bt_mesh_k4+0x48>)
{
 800bd14:	b08b      	sub	sp, #44	; 0x2c
 800bd16:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	9001      	str	r0, [sp, #4]
{
 800bd1c:	460c      	mov	r4, r1
	err = bt_mesh_s1("smk4", tmp);
 800bd1e:	480f      	ldr	r0, [pc, #60]	; (800bd5c <bt_mesh_k4+0x4c>)
 800bd20:	a902      	add	r1, sp, #8
 800bd22:	f7ff ff40 	bl	800bba6 <bt_mesh_s1>
	if (err) {
 800bd26:	b9a8      	cbnz	r0, 800bd54 <bt_mesh_k4+0x44>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
 800bd28:	ab06      	add	r3, sp, #24
 800bd2a:	2210      	movs	r2, #16
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	a802      	add	r0, sp, #8
 800bd30:	f7ff ff2f 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800bd34:	b960      	cbnz	r0, 800bd50 <bt_mesh_k4+0x40>
	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
 800bd36:	2204      	movs	r2, #4
 800bd38:	ab02      	add	r3, sp, #8
 800bd3a:	eb0d 0102 	add.w	r1, sp, r2
 800bd3e:	a806      	add	r0, sp, #24
 800bd40:	f7ff ff27 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800bd44:	b920      	cbnz	r0, 800bd50 <bt_mesh_k4+0x40>
	out[0] = tmp[15] & BIT_MASK(6);
 800bd46:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800bd4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd4e:	7023      	strb	r3, [r4, #0]
}
 800bd50:	b00b      	add	sp, #44	; 0x2c
 800bd52:	bd30      	pop	{r4, r5, pc}
 800bd54:	2001      	movs	r0, #1
 800bd56:	e7fb      	b.n	800bd50 <bt_mesh_k4+0x40>
 800bd58:	08012cb7 	.word	0x08012cb7
 800bd5c:	0801392d 	.word	0x0801392d

0800bd60 <bt_mesh_id128>:
{
 800bd60:	b530      	push	{r4, r5, lr}
 800bd62:	b087      	sub	sp, #28
 800bd64:	4604      	mov	r4, r0
 800bd66:	4608      	mov	r0, r1
	err = bt_mesh_s1(s, salt);
 800bd68:	a902      	add	r1, sp, #8
{
 800bd6a:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
 800bd6c:	f7ff ff1b 	bl	800bba6 <bt_mesh_s1>
	if (err) {
 800bd70:	b940      	cbnz	r0, 800bd84 <bt_mesh_id128+0x24>
	return bt_mesh_k1(n, 16, salt, id128, out);
 800bd72:	9500      	str	r5, [sp, #0]
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <bt_mesh_id128+0x28>)
 800bd76:	aa02      	add	r2, sp, #8
 800bd78:	2110      	movs	r1, #16
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff ff2a 	bl	800bbd4 <bt_mesh_k1>
}
 800bd80:	b007      	add	sp, #28
 800bd82:	bd30      	pop	{r4, r5, pc}
 800bd84:	2001      	movs	r0, #1
 800bd86:	e7fb      	b.n	800bd80 <bt_mesh_id128+0x20>
 800bd88:	0801391c 	.word	0x0801391c

0800bd8c <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(u8_t *pdu, u32_t iv_index,
			  const u8_t privacy_key[16])
{
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	460d      	mov	r5, r1
 800bd92:	4604      	mov	r4, r0
 800bd94:	4616      	mov	r6, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
 800bd96:	2100      	movs	r1, #0
 800bd98:	2210      	movs	r2, #16
 800bd9a:	4668      	mov	r0, sp
 800bd9c:	f7f4 fd9c 	bl	80008d8 <memset>
	u8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
 800bda0:	4628      	mov	r0, r5
 800bda2:	f10d 0105 	add.w	r1, sp, #5
 800bda6:	f7ff fc33 	bl	800b610 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
 800bdaa:	2207      	movs	r2, #7
 800bdac:	18a1      	adds	r1, r4, r2
 800bdae:	f10d 0009 	add.w	r0, sp, #9

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
 800bdb2:	ad04      	add	r5, sp, #16
	memcpy(&priv_rand[9], &pdu[7], 7);
 800bdb4:	f7f4 fd64 	bl	8000880 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
 800bdb8:	462a      	mov	r2, r5
 800bdba:	4669      	mov	r1, sp
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7fa fd65 	bl	800688c <bt_encrypt_be>
	if (err) {
 800bdc2:	b948      	cbnz	r0, 800bdd8 <bt_mesh_net_obfuscate+0x4c>
 800bdc4:	4623      	mov	r3, r4
 800bdc6:	4602      	mov	r2, r0
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
 800bdc8:	7859      	ldrb	r1, [r3, #1]
 800bdca:	5cac      	ldrb	r4, [r5, r2]
 800bdcc:	3201      	adds	r2, #1
 800bdce:	4061      	eors	r1, r4
	for (i = 0; i < 6; i++) {
 800bdd0:	2a06      	cmp	r2, #6
		pdu[1 + i] ^= tmp[i];
 800bdd2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < 6; i++) {
 800bdd6:	d1f7      	bne.n	800bdc8 <bt_mesh_net_obfuscate+0x3c>
	}

	return 0;
}
 800bdd8:	b008      	add	sp, #32
 800bdda:	bd70      	pop	{r4, r5, r6, pc}

0800bddc <bt_mesh_net_encrypt>:

int bt_mesh_net_encrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
 800bddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bde0:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800bde2:	6809      	ldr	r1, [r1, #0]
 800bde4:	f891 9001 	ldrb.w	r9, [r1, #1]
 800bde8:	f891 8002 	ldrb.w	r8, [r1, #2]
 800bdec:	f891 c003 	ldrb.w	ip, [r1, #3]
 800bdf0:	f891 e004 	ldrb.w	lr, [r1, #4]
 800bdf4:	794f      	ldrb	r7, [r1, #5]
 800bdf6:	f019 0f80 	tst.w	r9, #128	; 0x80
{
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	b089      	sub	sp, #36	; 0x24
 800bdfe:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800be00:	bf14      	ite	ne
 800be02:	2608      	movne	r6, #8
 800be04:	2604      	moveq	r6, #4
 800be06:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("IVIndex %u EncKey %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);
	BT_DBG("PDU (len %u) %s", buf->len, bt_hex(buf->data, buf->len));

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
 800be08:	b373      	cbz	r3, 800be68 <bt_mesh_net_encrypt+0x8c>
	nonce[0] = 0x03;
 800be0a:	2303      	movs	r3, #3
 800be0c:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
 800be10:	2300      	movs	r3, #0
 800be12:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
 800be16:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
 800be1a:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
 800be1e:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
 800be22:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
 800be26:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
 800be2a:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
 800be2e:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
 800be32:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
 800be36:	f7ff fbeb 	bl	800b610 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	88a3      	ldrh	r3, [r4, #4]
 800be3e:	9603      	str	r6, [sp, #12]
 800be40:	2100      	movs	r1, #0
 800be42:	3207      	adds	r2, #7
 800be44:	9101      	str	r1, [sp, #4]
 800be46:	9100      	str	r1, [sp, #0]
 800be48:	4628      	mov	r0, r5
 800be4a:	9202      	str	r2, [sp, #8]
 800be4c:	3b07      	subs	r3, #7
 800be4e:	a904      	add	r1, sp, #16
 800be50:	f7ff fbe7 	bl	800b622 <bt_mesh_ccm_encrypt>
				  NULL, 0, &buf->data[7], mic_len);
	if (!err) {
 800be54:	4605      	mov	r5, r0
 800be56:	b918      	cbnz	r0, 800be60 <bt_mesh_net_encrypt+0x84>
		net_buf_simple_add(buf, mic_len);
 800be58:	4631      	mov	r1, r6
 800be5a:	4620      	mov	r0, r4
 800be5c:	f005 fc56 	bl	801170c <net_buf_simple_add>
	}

	return err;
}
 800be60:	4628      	mov	r0, r5
 800be62:	b009      	add	sp, #36	; 0x24
 800be64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
 800be68:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
 800be6c:	f88d 9011 	strb.w	r9, [sp, #17]
 800be70:	e7d1      	b.n	800be16 <bt_mesh_net_encrypt+0x3a>

0800be72 <bt_mesh_net_decrypt>:

int bt_mesh_net_decrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
 800be72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be76:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800be78:	6809      	ldr	r1, [r1, #0]
 800be7a:	f891 9001 	ldrb.w	r9, [r1, #1]
 800be7e:	f891 8002 	ldrb.w	r8, [r1, #2]
 800be82:	f891 c003 	ldrb.w	ip, [r1, #3]
 800be86:	f891 e004 	ldrb.w	lr, [r1, #4]
 800be8a:	794f      	ldrb	r7, [r1, #5]
 800be8c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
 800be90:	4605      	mov	r5, r0
 800be92:	b089      	sub	sp, #36	; 0x24
 800be94:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
 800be96:	bf14      	ite	ne
 800be98:	2408      	movne	r4, #8
 800be9a:	2404      	moveq	r4, #4
 800be9c:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("PDU (%u bytes) %s", buf->len, bt_hex(buf->data, buf->len));
	BT_DBG("iv_index %u, key %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
 800be9e:	b353      	cbz	r3, 800bef6 <bt_mesh_net_decrypt+0x84>
	nonce[0] = 0x03;
 800bea0:	2303      	movs	r3, #3
 800bea2:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
 800bea6:	2300      	movs	r3, #0
 800bea8:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
 800beac:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
 800beb0:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
 800beb4:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
 800beb8:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
 800bebc:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
 800bec0:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
 800bec4:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
 800bec8:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
 800becc:	f7ff fba0 	bl	800b610 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	buf->len -= mic_len;
 800bed0:	88b3      	ldrh	r3, [r6, #4]

	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bed2:	6832      	ldr	r2, [r6, #0]
 800bed4:	9403      	str	r4, [sp, #12]
	buf->len -= mic_len;
 800bed6:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bed8:	3207      	adds	r2, #7
 800beda:	2100      	movs	r1, #0
	buf->len -= mic_len;
 800bedc:	b29b      	uxth	r3, r3
 800bede:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
 800bee0:	9101      	str	r1, [sp, #4]
 800bee2:	9100      	str	r1, [sp, #0]
 800bee4:	9202      	str	r2, [sp, #8]
 800bee6:	3b07      	subs	r3, #7
 800bee8:	a904      	add	r1, sp, #16
 800beea:	4628      	mov	r0, r5
 800beec:	f7ff fcde 	bl	800b8ac <bt_mesh_ccm_decrypt>
				   NULL, 0, &buf->data[7], mic_len);
}
 800bef0:	b009      	add	sp, #36	; 0x24
 800bef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
 800bef6:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
 800befa:	f88d 9011 	strb.w	r9, [sp, #17]
 800befe:	e7d5      	b.n	800beac <bt_mesh_net_decrypt+0x3a>

0800bf00 <bt_mesh_app_encrypt>:
}

int bt_mesh_app_encrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, const u8_t *ad,
			u16_t src, u16_t dst, u32_t seq_num, u32_t iv_index)
{
 800bf00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf04:	b089      	sub	sp, #36	; 0x24
 800bf06:	4681      	mov	r9, r0
 800bf08:	4616      	mov	r6, r2
 800bf0a:	461c      	mov	r4, r3
 800bf0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bf0e:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 800bf12:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
	if (dev_key) {
 800bf16:	2900      	cmp	r1, #0
 800bf18:	d035      	beq.n	800bf86 <bt_mesh_app_encrypt+0x86>
		nonce[0] = 0x02;
 800bf1a:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bf1c:	9813      	ldr	r0, [sp, #76]	; 0x4c
		nonce[0] = 0x01;
 800bf1e:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bf22:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
 800bf26:	f10d 0111 	add.w	r1, sp, #17
 800bf2a:	f7ff fb71 	bl	800b610 <sys_put_be32>
	dst[0] = val >> 8;
 800bf2e:	ea4f 2318 	mov.w	r3, r8, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
 800bf32:	f10d 0119 	add.w	r1, sp, #25
 800bf36:	f88d 3015 	strb.w	r3, [sp, #21]
 800bf3a:	9814      	ldr	r0, [sp, #80]	; 0x50
	dst[1] = val;
 800bf3c:	f88d 8016 	strb.w	r8, [sp, #22]
	dst[0] = val >> 8;
 800bf40:	0a3b      	lsrs	r3, r7, #8
 800bf42:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
 800bf46:	f88d 7018 	strb.w	r7, [sp, #24]
 800bf4a:	f7ff fb61 	bl	800b610 <sys_put_be32>

	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	bf14      	ite	ne
 800bf52:	2110      	movne	r1, #16
 800bf54:	2100      	moveq	r1, #0
 800bf56:	2e00      	cmp	r6, #0
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	9101      	str	r1, [sp, #4]
 800bf5c:	bf14      	ite	ne
 800bf5e:	2608      	movne	r6, #8
 800bf60:	2604      	moveq	r6, #4
 800bf62:	9500      	str	r5, [sp, #0]
 800bf64:	88a3      	ldrh	r3, [r4, #4]
 800bf66:	9603      	str	r6, [sp, #12]
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	a904      	add	r1, sp, #16
 800bf6c:	4648      	mov	r0, r9
 800bf6e:	f7ff fb58 	bl	800b622 <bt_mesh_ccm_encrypt>
				  ad ? 16 : 0, buf->data, APP_MIC_LEN(aszmic));
	if (!err) {
 800bf72:	4605      	mov	r5, r0
 800bf74:	b918      	cbnz	r0, 800bf7e <bt_mesh_app_encrypt+0x7e>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
 800bf76:	4631      	mov	r1, r6
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f005 fbc7 	bl	801170c <net_buf_simple_add>
		BT_DBG("Encr: %s", bt_hex(buf->data, buf->len));
	}

	return err;
}
 800bf7e:	4628      	mov	r0, r5
 800bf80:	b009      	add	sp, #36	; 0x24
 800bf82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nonce[0] = 0x01;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e7c8      	b.n	800bf1c <bt_mesh_app_encrypt+0x1c>

0800bf8a <bt_mesh_app_decrypt>:

int bt_mesh_app_decrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, struct net_buf_simple *out,
			const u8_t *ad, u16_t src, u16_t dst, u32_t seq_num,
			u32_t iv_index)
{
 800bf8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	4682      	mov	sl, r0
 800bf92:	4617      	mov	r7, r2
 800bf94:	461c      	mov	r4, r3
 800bf96:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800bf98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bf9a:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
 800bf9e:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	d037      	beq.n	800c016 <bt_mesh_app_decrypt+0x8c>
		nonce[0] = 0x02;
 800bfa6:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bfa8:	9814      	ldr	r0, [sp, #80]	; 0x50
		nonce[0] = 0x01;
 800bfaa:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
 800bfae:	f10d 0111 	add.w	r1, sp, #17
 800bfb2:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
 800bfb6:	f7ff fb2b 	bl	800b610 <sys_put_be32>
	dst[0] = val >> 8;
 800bfba:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
 800bfbe:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bfc0:	f88d 3015 	strb.w	r3, [sp, #21]
 800bfc4:	f10d 0119 	add.w	r1, sp, #25
 800bfc8:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800bfcc:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
 800bfd0:	f88d 9016 	strb.w	r9, [sp, #22]
 800bfd4:	f88d 8018 	strb.w	r8, [sp, #24]
 800bfd8:	f7ff fb1a 	bl	800b610 <sys_put_be32>
	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("AppKey %s", bt_hex(key, 16));
	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	bf14      	ite	ne
 800bfe0:	2210      	movne	r2, #16
 800bfe2:	2200      	moveq	r2, #0
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	6831      	ldr	r1, [r6, #0]
 800bfe8:	9102      	str	r1, [sp, #8]
 800bfea:	bf14      	ite	ne
 800bfec:	2008      	movne	r0, #8
 800bfee:	2004      	moveq	r0, #4
 800bff0:	9003      	str	r0, [sp, #12]
 800bff2:	9201      	str	r2, [sp, #4]
 800bff4:	9500      	str	r5, [sp, #0]
 800bff6:	88a3      	ldrh	r3, [r4, #4]
 800bff8:	6822      	ldr	r2, [r4, #0]
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	4650      	mov	r0, sl
 800bffe:	f7ff fc55 	bl	800b8ac <bt_mesh_ccm_decrypt>
				  ad ? 16 : 0, out->data, APP_MIC_LEN(aszmic));
	if (!err) {
 800c002:	4605      	mov	r5, r0
 800c004:	b918      	cbnz	r0, 800c00e <bt_mesh_app_decrypt+0x84>
		net_buf_simple_add(out, buf->len);
 800c006:	88a1      	ldrh	r1, [r4, #4]
 800c008:	4630      	mov	r0, r6
 800c00a:	f005 fb7f 	bl	801170c <net_buf_simple_add>
	}

	return err;
}
 800c00e:	4628      	mov	r0, r5
 800c010:	b008      	add	sp, #32
 800c012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nonce[0] = 0x01;
 800c016:	2301      	movs	r3, #1
 800c018:	e7c6      	b.n	800bfa8 <bt_mesh_app_decrypt+0x1e>
	...

0800c01c <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
 800c01c:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
 800c01e:	4a06      	ldr	r2, [pc, #24]	; (800c038 <bt_mesh_fcs_calc+0x1c>)
 800c020:	4401      	add	r1, r0
	u8_t fcs = 0xff;
 800c022:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
 800c024:	4288      	cmp	r0, r1
 800c026:	d102      	bne.n	800c02e <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
 800c028:	43d8      	mvns	r0, r3
}
 800c02a:	b2c0      	uxtb	r0, r0
 800c02c:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
 800c02e:	f810 4b01 	ldrb.w	r4, [r0], #1
 800c032:	4063      	eors	r3, r4
 800c034:	5cd3      	ldrb	r3, [r2, r3]
 800c036:	e7f5      	b.n	800c024 <bt_mesh_fcs_calc+0x8>
 800c038:	0801393c 	.word	0x0801393c

0800c03c <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
 800c03c:	6802      	ldr	r2, [r0, #0]
 800c03e:	8880      	ldrh	r0, [r0, #4]
{
 800c040:	b530      	push	{r4, r5, lr}
 800c042:	4c08      	ldr	r4, [pc, #32]	; (800c064 <bt_mesh_fcs_check+0x28>)
 800c044:	4410      	add	r0, r2
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;
 800c046:	23ff      	movs	r3, #255	; 0xff

	while (data_len--) {
 800c048:	4282      	cmp	r2, r0
 800c04a:	d106      	bne.n	800c05a <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
 800c04c:	404b      	eors	r3, r1
 800c04e:	5ce0      	ldrb	r0, [r4, r3]
}
 800c050:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
 800c054:	4258      	negs	r0, r3
 800c056:	4158      	adcs	r0, r3
 800c058:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
 800c05a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c05e:	406b      	eors	r3, r5
 800c060:	5ce3      	ldrb	r3, [r4, r3]
 800c062:	e7f1      	b.n	800c048 <bt_mesh_fcs_check+0xc>
 800c064:	0801393c 	.word	0x0801393c

0800c068 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
 800c068:	b530      	push	{r4, r5, lr}
 800c06a:	b089      	sub	sp, #36	; 0x24
 800c06c:	4605      	mov	r5, r0
 800c06e:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
 800c070:	480e      	ldr	r0, [pc, #56]	; (800c0ac <bt_mesh_virtual_addr+0x44>)
 800c072:	4669      	mov	r1, sp
 800c074:	f7ff fd97 	bl	800bba6 <bt_mesh_s1>
	if (err) {
 800c078:	b9a8      	cbnz	r0, 800c0a6 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
 800c07a:	ab04      	add	r3, sp, #16
 800c07c:	2210      	movs	r2, #16
 800c07e:	4629      	mov	r1, r5
 800c080:	4668      	mov	r0, sp
 800c082:	f7ff fd86 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (err) {
 800c086:	b960      	cbnz	r0, 800c0a2 <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
 800c088:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800c08c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800c090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
 800c094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a0:	8023      	strh	r3, [r4, #0]

	return 0;
}
 800c0a2:	b009      	add	sp, #36	; 0x24
 800c0a4:	bd30      	pop	{r4, r5, pc}
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e7fb      	b.n	800c0a2 <bt_mesh_virtual_addr+0x3a>
 800c0aa:	bf00      	nop
 800c0ac:	08013937 	.word	0x08013937

0800c0b0 <bt_mesh_prov_conf_salt>:

int bt_mesh_prov_conf_salt(const u8_t conf_inputs[145], u8_t salt[16])
{
 800c0b0:	b530      	push	{r4, r5, lr}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	4668      	mov	r0, sp
 800c0be:	f7f4 fc0b 	bl	80008d8 <memset>

	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
 800c0c2:	462b      	mov	r3, r5
 800c0c4:	2291      	movs	r2, #145	; 0x91
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	4668      	mov	r0, sp
 800c0ca:	f7ff fd62 	bl	800bb92 <bt_mesh_aes_cmac_one>
}
 800c0ce:	b005      	add	sp, #20
 800c0d0:	bd30      	pop	{r4, r5, pc}
	...

0800c0d4 <bt_mesh_prov_conf_key>:

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
 800c0d4:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
 800c0d6:	4b04      	ldr	r3, [pc, #16]	; (800c0e8 <bt_mesh_prov_conf_key+0x14>)
 800c0d8:	9200      	str	r2, [sp, #0]
 800c0da:	460a      	mov	r2, r1
 800c0dc:	2120      	movs	r1, #32
 800c0de:	f7ff fd79 	bl	800bbd4 <bt_mesh_k1>
}
 800c0e2:	b003      	add	sp, #12
 800c0e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0e8:	08013932 	.word	0x08013932

0800c0ec <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
 800c0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
 800c0ee:	9100      	str	r1, [sp, #0]
 800c0f0:	2110      	movs	r1, #16
 800c0f2:	9101      	str	r1, [sp, #4]
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	4669      	mov	r1, sp
 800c0fc:	f7ff fd27 	bl	800bb4e <bt_mesh_aes_cmac>
}
 800c100:	b005      	add	sp, #20
 800c102:	f85d fb04 	ldr.w	pc, [sp], #4

0800c106 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
 800c106:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
 800c108:	2408      	movs	r4, #8
 800c10a:	9302      	str	r3, [sp, #8]
 800c10c:	2300      	movs	r3, #0
 800c10e:	9301      	str	r3, [sp, #4]
 800c110:	9300      	str	r3, [sp, #0]
 800c112:	9403      	str	r4, [sp, #12]
 800c114:	2319      	movs	r3, #25
 800c116:	f7ff fbc9 	bl	800b8ac <bt_mesh_ccm_decrypt>
}
 800c11a:	b004      	add	sp, #16
 800c11c:	bd10      	pop	{r4, pc}

0800c11e <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
 800c11e:	b570      	push	{r4, r5, r6, lr}
 800c120:	b088      	sub	sp, #32

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
 800c122:	ac08      	add	r4, sp, #32
{
 800c124:	4605      	mov	r5, r0
 800c126:	4610      	mov	r0, r2
 800c128:	461e      	mov	r6, r3
	msg[0] = flags;
 800c12a:	f804 1d20 	strb.w	r1, [r4, #-32]!
	memcpy(&msg[1], net_id, 8);
 800c12e:	2208      	movs	r2, #8
 800c130:	4601      	mov	r1, r0
 800c132:	f10d 0001 	add.w	r0, sp, #1
 800c136:	f7f4 fba3 	bl	8000880 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
 800c13a:	f10d 0109 	add.w	r1, sp, #9
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff fa66 	bl	800b610 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
 800c144:	4621      	mov	r1, r4
 800c146:	ab04      	add	r3, sp, #16
 800c148:	220d      	movs	r2, #13
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7ff fd21 	bl	800bb92 <bt_mesh_aes_cmac_one>
	if (!err) {
 800c150:	4604      	mov	r4, r0
 800c152:	b920      	cbnz	r0, 800c15e <bt_mesh_beacon_auth+0x40>
		memcpy(auth, tmp, 8);
 800c154:	2208      	movs	r2, #8
 800c156:	a904      	add	r1, sp, #16
 800c158:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c15a:	f7f4 fb91 	bl	8000880 <memcpy>
	}

	return err;
}
 800c15e:	4620      	mov	r0, r4
 800c160:	b008      	add	sp, #32
 800c162:	bd70      	pop	{r4, r5, r6, pc}

0800c164 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	4604      	mov	r4, r0
	int i;

	mod->elem = elem;
 800c168:	6041      	str	r1, [r0, #4]

	if (mod->pub) {
 800c16a:	6880      	ldr	r0, [r0, #8]
{
 800c16c:	4616      	mov	r6, r2
 800c16e:	461d      	mov	r5, r3
	if (mod->pub) {
 800c170:	b120      	cbz	r0, 800c17c <mod_init+0x18>
		mod->pub->mod = mod;
 800c172:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
 800c176:	490b      	ldr	r1, [pc, #44]	; (800c1a4 <mod_init+0x40>)
 800c178:	f006 fa54 	bl	8012624 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
 800c17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c180:	81a3      	strh	r3, [r4, #12]
	}

	if (vnd) {
 800c182:	b976      	cbnz	r6, 800c1a2 <mod_init+0x3e>
		return;
	}

	for (i = 0; i < ARRAY_SIZE(model_init); i++) {
		if (model_init[i].id == mod->id) {
 800c184:	8823      	ldrh	r3, [r4, #0]
 800c186:	b91b      	cbnz	r3, 800c190 <mod_init+0x2c>
			model_init[i].init(mod, primary);
 800c188:	4629      	mov	r1, r5
 800c18a:	4620      	mov	r0, r4
 800c18c:	f002 f850 	bl	800e230 <bt_mesh_cfg_srv_init>
		if (model_init[i].id == mod->id) {
 800c190:	8823      	ldrh	r3, [r4, #0]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d105      	bne.n	800c1a2 <mod_init+0x3e>
			model_init[i].init(mod, primary);
 800c196:	4629      	mov	r1, r5
 800c198:	4620      	mov	r0, r4
		}
	}
}
 800c19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			model_init[i].init(mod, primary);
 800c19e:	f002 bd8b 	b.w	800ecb8 <bt_mesh_health_srv_init>
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	0800c6f9 	.word	0x0800c6f9

0800c1a8 <bt_mesh_model_foreach>:
{
 800c1a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c1ac:	f8df a068 	ldr.w	sl, [pc, #104]	; 800c218 <bt_mesh_model_foreach+0x70>
{
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c1b4:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
 800c1b6:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c1ba:	f8da 3000 	ldr.w	r3, [sl]
 800c1be:	689a      	ldr	r2, [r3, #8]
 800c1c0:	42aa      	cmp	r2, r5
 800c1c2:	d802      	bhi.n	800c1ca <bt_mesh_model_foreach+0x22>
}
 800c1c4:	b002      	add	sp, #8
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c1ca:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
 800c1cc:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c1ce:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
 800c1d2:	7923      	ldrb	r3, [r4, #4]
 800c1d4:	429e      	cmp	r6, r3
 800c1d6:	db05      	blt.n	800c1e4 <bt_mesh_model_foreach+0x3c>
 800c1d8:	2600      	movs	r6, #0
		for (j = 0; j < elem->vnd_model_count; j++) {
 800c1da:	7963      	ldrb	r3, [r4, #5]
 800c1dc:	429e      	cmp	r6, r3
 800c1de:	db0e      	blt.n	800c1fe <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	e7ea      	b.n	800c1ba <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
 800c1e4:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
 800c1e6:	f8cd 8000 	str.w	r8, [sp]
 800c1ea:	fab5 f385 	clz	r3, r5
 800c1ee:	fb09 0006 	mla	r0, r9, r6, r0
 800c1f2:	095b      	lsrs	r3, r3, #5
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
 800c1fa:	3601      	adds	r6, #1
 800c1fc:	e7e9      	b.n	800c1d2 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
 800c1fe:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
 800c200:	f8cd 8000 	str.w	r8, [sp]
 800c204:	fab5 f385 	clz	r3, r5
 800c208:	fb09 0006 	mla	r0, r9, r6, r0
 800c20c:	095b      	lsrs	r3, r3, #5
 800c20e:	2201      	movs	r2, #1
 800c210:	4621      	mov	r1, r4
 800c212:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
 800c214:	3601      	adds	r6, #1
 800c216:	e7e0      	b.n	800c1da <bt_mesh_model_foreach+0x32>
 800c218:	20000d70 	.word	0x20000d70

0800c21c <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
 800c21c:	6880      	ldr	r0, [r0, #8]
 800c21e:	b178      	cbz	r0, 800c240 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
 800c220:	7a83      	ldrb	r3, [r0, #10]
 800c222:	099a      	lsrs	r2, r3, #6
 800c224:	2a02      	cmp	r2, #2
 800c226:	d012      	beq.n	800c24e <bt_mesh_model_pub_period_get+0x32>
 800c228:	2a03      	cmp	r2, #3
 800c22a:	d015      	beq.n	800c258 <bt_mesh_model_pub_period_get+0x3c>
 800c22c:	2a01      	cmp	r2, #1
 800c22e:	d008      	beq.n	800c242 <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
 800c230:	2264      	movs	r2, #100	; 0x64
 800c232:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
 800c236:	7ac0      	ldrb	r0, [r0, #11]
 800c238:	f000 000f 	and.w	r0, r0, #15
 800c23c:	fa43 f000 	asr.w	r0, r3, r0
}
 800c240:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
 800c242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
 800c24a:	4353      	muls	r3, r2
		break;
 800c24c:	e7f3      	b.n	800c236 <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
 800c24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c252:	f242 7210 	movw	r2, #10000	; 0x2710
 800c256:	e7f8      	b.n	800c24a <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
 800c258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c25c:	4a00      	ldr	r2, [pc, #0]	; (800c260 <bt_mesh_model_pub_period_get+0x44>)
 800c25e:	e7f4      	b.n	800c24a <bt_mesh_model_pub_period_get+0x2e>
 800c260:	000927c0 	.word	0x000927c0

0800c264 <publish_sent>:
{
 800c264:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
 800c266:	688e      	ldr	r6, [r1, #8]
 800c268:	7af3      	ldrb	r3, [r6, #11]
 800c26a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
 800c26e:	460d      	mov	r5, r1
	if (mod->pub->count) {
 800c270:	d00b      	beq.n	800c28a <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
 800c272:	7a72      	ldrb	r2, [r6, #9]
 800c274:	08d4      	lsrs	r4, r2, #3
 800c276:	2232      	movs	r2, #50	; 0x32
 800c278:	fb04 2202 	mla	r2, r4, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
 800c27c:	68a9      	ldr	r1, [r5, #8]
 800c27e:	480b      	ldr	r0, [pc, #44]	; (800c2ac <publish_sent+0x48>)
 800c280:	3118      	adds	r1, #24
}
 800c282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c286:	f006 ba37 	b.w	80126f8 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
 800c28a:	4608      	mov	r0, r1
 800c28c:	f7ff ffc6 	bl	800c21c <bt_mesh_model_pub_period_get>
	if (!period) {
 800c290:	4604      	mov	r4, r0
 800c292:	b138      	cbz	r0, 800c2a4 <publish_sent+0x40>
 800c294:	f005 fefe 	bl	8012094 <_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
 800c298:	68f2      	ldr	r2, [r6, #12]
 800c29a:	1a82      	subs	r2, r0, r2
	if (elapsed > period) {
 800c29c:	4294      	cmp	r4, r2
 800c29e:	d302      	bcc.n	800c2a6 <publish_sent+0x42>
	if (delay) {
 800c2a0:	1aa2      	subs	r2, r4, r2
 800c2a2:	d1eb      	bne.n	800c27c <publish_sent+0x18>
 800c2a4:	bd70      	pop	{r4, r5, r6, pc}
		return K_MSEC(1);
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	e7e8      	b.n	800c27c <publish_sent+0x18>
 800c2aa:	bf00      	nop
 800c2ac:	20001480 	.word	0x20001480

0800c2b0 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
 800c2b0:	b508      	push	{r3, lr}
	/* There must be at least one element */
	if (!comp->elem_count) {
 800c2b2:	6883      	ldr	r3, [r0, #8]
 800c2b4:	b13b      	cbz	r3, 800c2c6 <bt_mesh_comp_register+0x16>
		return -EINVAL;
	}

	dev_comp = comp;
 800c2b6:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <bt_mesh_comp_register+0x1c>)

	bt_mesh_model_foreach(mod_init, NULL);
 800c2b8:	2100      	movs	r1, #0
	dev_comp = comp;
 800c2ba:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
 800c2bc:	4804      	ldr	r0, [pc, #16]	; (800c2d0 <bt_mesh_comp_register+0x20>)
 800c2be:	f7ff ff73 	bl	800c1a8 <bt_mesh_model_foreach>

	return 0;
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800c2c6:	f06f 0015 	mvn.w	r0, #21
}
 800c2ca:	bd08      	pop	{r3, pc}
 800c2cc:	20000d70 	.word	0x20000d70
 800c2d0:	0800c165 	.word	0x0800c165

0800c2d4 <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(u16_t addr)
{
	int i;

	dev_primary_addr = addr;
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <bt_mesh_comp_provision+0x24>)
{
 800c2d6:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
 800c2d8:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
 800c2da:	4b08      	ldr	r3, [pc, #32]	; (800c2fc <bt_mesh_comp_provision+0x28>)
 800c2dc:	6819      	ldr	r1, [r3, #0]
 800c2de:	688c      	ldr	r4, [r1, #8]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	18c2      	adds	r2, r0, r3
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	b292      	uxth	r2, r2
 800c2e8:	d100      	bne.n	800c2ec <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
 800c2ec:	011d      	lsls	r5, r3, #4
 800c2ee:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c2f0:	3301      	adds	r3, #1
		elem->addr = addr++;
 800c2f2:	5372      	strh	r2, [r6, r5]
 800c2f4:	e7f5      	b.n	800c2e2 <bt_mesh_comp_provision+0xe>
 800c2f6:	bf00      	nop
 800c2f8:	20000d74 	.word	0x20000d74
 800c2fc:	20000d70 	.word	0x20000d70

0800c300 <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
 800c300:	4b02      	ldr	r3, [pc, #8]	; (800c30c <bt_mesh_comp_unprovision+0xc>)

	bt_mesh_model_foreach(mod_init, NULL);
 800c302:	4803      	ldr	r0, [pc, #12]	; (800c310 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
 800c304:	2100      	movs	r1, #0
 800c306:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
 800c308:	f7ff bf4e 	b.w	800c1a8 <bt_mesh_model_foreach>
 800c30c:	20000d74 	.word	0x20000d74
 800c310:	0800c165 	.word	0x0800c165

0800c314 <bt_mesh_primary_addr>:
}

u16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
 800c314:	4b01      	ldr	r3, [pc, #4]	; (800c31c <bt_mesh_primary_addr+0x8>)
 800c316:	8818      	ldrh	r0, [r3, #0]
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	20000d74 	.word	0x20000d74

0800c320 <bt_mesh_model_find_group>:
u16_t *bt_mesh_model_find_group(struct bt_mesh_model *mod, u16_t addr)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] == addr) {
 800c320:	89c3      	ldrh	r3, [r0, #14]
 800c322:	428b      	cmp	r3, r1
 800c324:	d007      	beq.n	800c336 <bt_mesh_model_find_group+0x16>
 800c326:	8a03      	ldrh	r3, [r0, #16]
 800c328:	428b      	cmp	r3, r1
 800c32a:	d106      	bne.n	800c33a <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800c32c:	2301      	movs	r3, #1
			return &mod->groups[i];
 800c32e:	3307      	adds	r3, #7
 800c330:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c334:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800c336:	2300      	movs	r3, #0
 800c338:	e7f9      	b.n	800c32e <bt_mesh_model_find_group+0xe>
		}
	}

	return NULL;
 800c33a:	2000      	movs	r0, #0
}
 800c33c:	4770      	bx	lr

0800c33e <bt_mesh_elem_find_group>:

static struct bt_mesh_model *bt_mesh_elem_find_group(struct bt_mesh_elem *elem,
						     u16_t group_addr)
{
 800c33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model *model;
	u16_t *match;
	int i;

	for (i = 0; i < elem->model_count; i++) {
 800c342:	7907      	ldrb	r7, [r0, #4]
{
 800c344:	4605      	mov	r5, r0
 800c346:	460e      	mov	r6, r1
	for (i = 0; i < elem->model_count; i++) {
 800c348:	2400      	movs	r4, #0
		model = &elem->models[i];
 800c34a:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->model_count; i++) {
 800c34e:	42bc      	cmp	r4, r7
 800c350:	db09      	blt.n	800c366 <bt_mesh_elem_find_group+0x28>
		if (match) {
			return model;
		}
	}

	for (i = 0; i < elem->vnd_model_count; i++) {
 800c352:	796f      	ldrb	r7, [r5, #5]
 800c354:	2400      	movs	r4, #0
		model = &elem->vnd_models[i];
 800c356:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c35a:	42bc      	cmp	r4, r7
 800c35c:	db0e      	blt.n	800c37c <bt_mesh_elem_find_group+0x3e>
		if (match) {
			return model;
		}
	}

	return NULL;
 800c35e:	2200      	movs	r2, #0
}
 800c360:	4610      	mov	r0, r2
 800c362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		model = &elem->models[i];
 800c366:	68aa      	ldr	r2, [r5, #8]
 800c368:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
 800c36c:	4631      	mov	r1, r6
 800c36e:	4610      	mov	r0, r2
 800c370:	f7ff ffd6 	bl	800c320 <bt_mesh_model_find_group>
		if (match) {
 800c374:	2800      	cmp	r0, #0
 800c376:	d1f3      	bne.n	800c360 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->model_count; i++) {
 800c378:	3401      	adds	r4, #1
 800c37a:	e7e8      	b.n	800c34e <bt_mesh_elem_find_group+0x10>
		model = &elem->vnd_models[i];
 800c37c:	68ea      	ldr	r2, [r5, #12]
 800c37e:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
 800c382:	4631      	mov	r1, r6
 800c384:	4610      	mov	r0, r2
 800c386:	f7ff ffcb 	bl	800c320 <bt_mesh_model_find_group>
		if (match) {
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d1e8      	bne.n	800c360 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c38e:	3401      	adds	r4, #1
 800c390:	e7e3      	b.n	800c35a <bt_mesh_elem_find_group+0x1c>
	...

0800c394 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(u16_t addr)
{
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;

	for (i = 0; i < dev_comp->elem_count; i++) {
 800c398:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <bt_mesh_elem_find+0x44>)
 800c39a:	681f      	ldr	r7, [r3, #0]
 800c39c:	f8d7 8008 	ldr.w	r8, [r7, #8]
{
 800c3a0:	4606      	mov	r6, r0
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c3a2:	2400      	movs	r4, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];

		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c3a4:	f480 4900 	eor.w	r9, r0, #32768	; 0x8000
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c3a8:	4544      	cmp	r4, r8
 800c3aa:	d101      	bne.n	800c3b0 <bt_mesh_elem_find+0x1c>
		} else if (elem->addr == addr) {
			return elem;
		}
	}

	return NULL;
 800c3ac:	2500      	movs	r5, #0
 800c3ae:	e00b      	b.n	800c3c8 <bt_mesh_elem_find+0x34>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	0123      	lsls	r3, r4, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c3b4:	f5b9 4ffe 	cmp.w	r9, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c3b8:	eb02 0503 	add.w	r5, r2, r3
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
 800c3bc:	d807      	bhi.n	800c3ce <bt_mesh_elem_find+0x3a>
			if (bt_mesh_elem_find_group(elem, addr)) {
 800c3be:	4631      	mov	r1, r6
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7ff ffbc 	bl	800c33e <bt_mesh_elem_find_group>
 800c3c6:	b128      	cbz	r0, 800c3d4 <bt_mesh_elem_find+0x40>
}
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (elem->addr == addr) {
 800c3ce:	5ad3      	ldrh	r3, [r2, r3]
 800c3d0:	42b3      	cmp	r3, r6
 800c3d2:	d0f9      	beq.n	800c3c8 <bt_mesh_elem_find+0x34>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c3d4:	3401      	adds	r4, #1
 800c3d6:	e7e7      	b.n	800c3a8 <bt_mesh_elem_find+0x14>
 800c3d8:	20000d70 	.word	0x20000d70

0800c3dc <bt_mesh_elem_count>:

u8_t bt_mesh_elem_count(void)
{
	return dev_comp->elem_count;
 800c3dc:	4b01      	ldr	r3, [pc, #4]	; (800c3e4 <bt_mesh_elem_count+0x8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
}
 800c3e0:	7a18      	ldrb	r0, [r3, #8]
 800c3e2:	4770      	bx	lr
 800c3e4:	20000d70 	.word	0x20000d70

0800c3e8 <bt_mesh_fixed_group_match>:

	CODE_UNREACHABLE;
}

bool bt_mesh_fixed_group_match(u16_t addr)
{
 800c3e8:	b508      	push	{r3, lr}
	/* Check for fixed group addresses */
	switch (addr) {
 800c3ea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c3ee:	4298      	cmp	r0, r3
 800c3f0:	d00c      	beq.n	800c40c <bt_mesh_fixed_group_match+0x24>
 800c3f2:	d80e      	bhi.n	800c412 <bt_mesh_fixed_group_match+0x2a>
 800c3f4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800c3f8:	4298      	cmp	r0, r3
 800c3fa:	d001      	beq.n	800c400 <bt_mesh_fixed_group_match+0x18>
	case BT_MESH_ADDR_ALL_NODES:
		return true;
	case BT_MESH_ADDR_PROXIES:
		/* TODO: Proxy not yet supported */
		return false;
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	bd08      	pop	{r3, pc}
	case BT_MESH_ADDR_FRIENDS:
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
 800c400:	f002 f81e 	bl	800e440 <bt_mesh_friend_get>
	case BT_MESH_ADDR_RELAYS:
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
 800c404:	1e43      	subs	r3, r0, #1
 800c406:	4258      	negs	r0, r3
 800c408:	4158      	adcs	r0, r3
 800c40a:	bd08      	pop	{r3, pc}
 800c40c:	f002 f80e 	bl	800e42c <bt_mesh_relay_get>
 800c410:	e7f8      	b.n	800c404 <bt_mesh_fixed_group_match+0x1c>
		return true;
 800c412:	2001      	movs	r0, #1
	default:
		return false;
	}
}
 800c414:	bd08      	pop	{r3, pc}
	...

0800c418 <bt_mesh_model_recv>:

void bt_mesh_model_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
 800c418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
 800c41c:	680b      	ldr	r3, [r1, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	099a      	lsrs	r2, r3, #6
 800c422:	2a02      	cmp	r2, #2
{
 800c424:	4680      	mov	r8, r0
 800c426:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
 800c428:	d00e      	beq.n	800c448 <bt_mesh_model_recv+0x30>
 800c42a:	2a03      	cmp	r2, #3
 800c42c:	d013      	beq.n	800c456 <bt_mesh_model_recv+0x3e>
		if (buf->data[0] == 0x7f) {
 800c42e:	2b7f      	cmp	r3, #127	; 0x7f
 800c430:	d044      	beq.n	800c4bc <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf);
 800c432:	4608      	mov	r0, r1
 800c434:	f005 f9dd 	bl	80117f2 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
 800c438:	4606      	mov	r6, r0
			/* The callback will likely parse the buffer, so
			 * store the parsing state in case multiple models
			 * receive the message.
			 */
			net_buf_simple_save(buf, &state);
			op->func(model, &rx->ctx, buf);
 800c43a:	f108 0304 	add.w	r3, r8, #4
			models = elem->models;
 800c43e:	2700      	movs	r7, #0
			op->func(model, &rx->ctx, buf);
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	f104 0a08 	add.w	sl, r4, #8
 800c446:	e034      	b.n	800c4b2 <bt_mesh_model_recv+0x9a>
		if (buf->len < 2) {
 800c448:	888b      	ldrh	r3, [r1, #4]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d936      	bls.n	800c4bc <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_be16(buf);
 800c44e:	4608      	mov	r0, r1
 800c450:	f005 f9df 	bl	8011812 <net_buf_simple_pull_be16>
 800c454:	e7f0      	b.n	800c438 <bt_mesh_model_recv+0x20>
		if (buf->len < 3) {
 800c456:	888b      	ldrh	r3, [r1, #4]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d92f      	bls.n	800c4bc <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
 800c45c:	4608      	mov	r0, r1
 800c45e:	f005 f9c8 	bl	80117f2 <net_buf_simple_pull_u8>
 800c462:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
 800c464:	4620      	mov	r0, r4
 800c466:	f005 f9cc 	bl	8011802 <net_buf_simple_pull_le16>
 800c46a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c46e:	e7e4      	b.n	800c43a <bt_mesh_model_recv+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c470:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c474:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c476:	b208      	sxth	r0, r1
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c478:	013a      	lsls	r2, r7, #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c47a:	2800      	cmp	r0, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
 800c47c:	eb03 0902 	add.w	r9, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
 800c480:	dd0c      	ble.n	800c49c <bt_mesh_model_recv+0x84>
			if (elem->addr != rx->dst) {
 800c482:	5a9b      	ldrh	r3, [r3, r2]
 800c484:	428b      	cmp	r3, r1
 800c486:	d113      	bne.n	800c4b0 <bt_mesh_model_recv+0x98>
		if (opcode < 0x10000) {
 800c488:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			models = elem->models;
 800c48c:	f8d9 2008 	ldr.w	r2, [r9, #8]
			models = elem->vnd_models;
 800c490:	f8d9 500c 	ldr.w	r5, [r9, #12]
		if (opcode < 0x10000) {
 800c494:	d31b      	bcc.n	800c4ce <bt_mesh_model_recv+0xb6>
			count = elem->vnd_model_count;
 800c496:	f899 3005 	ldrb.w	r3, [r9, #5]
 800c49a:	e01b      	b.n	800c4d4 <bt_mesh_model_recv+0xbc>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->dst) ||
 800c49c:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
 800c4a0:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 800c4a4:	d80d      	bhi.n	800c4c2 <bt_mesh_model_recv+0xaa>
			if (!bt_mesh_elem_find_group(elem, rx->dst)) {
 800c4a6:	4648      	mov	r0, r9
 800c4a8:	f7ff ff49 	bl	800c33e <bt_mesh_elem_find_group>
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1eb      	bne.n	800c488 <bt_mesh_model_recv+0x70>
	for (i = 0; i < dev_comp->elem_count; i++) {
 800c4b0:	3701      	adds	r7, #1
 800c4b2:	4b1f      	ldr	r3, [pc, #124]	; (800c530 <bt_mesh_model_recv+0x118>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	42ba      	cmp	r2, r7
 800c4ba:	d8d9      	bhi.n	800c470 <bt_mesh_model_recv+0x58>

		} else {
			BT_DBG("No OpCode 0x%08x for elem %d", opcode, i);
		}
	}
}
 800c4bc:	b003      	add	sp, #12
 800c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
 800c4c2:	2f00      	cmp	r7, #0
 800c4c4:	d1f4      	bne.n	800c4b0 <bt_mesh_model_recv+0x98>
 800c4c6:	4608      	mov	r0, r1
 800c4c8:	f7ff ff8e 	bl	800c3e8 <bt_mesh_fixed_group_match>
 800c4cc:	e7ee      	b.n	800c4ac <bt_mesh_model_recv+0x94>
			count = elem->model_count;
 800c4ce:	f899 3004 	ldrb.w	r3, [r9, #4]
			models = elem->models;
 800c4d2:	4615      	mov	r5, r2
 800c4d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		op = find_op(models, count, rx->ctx.app_idx, opcode, &model);
 800c4d8:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800c4dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	for (i = 0; i < model_count; i++) {
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	d0e5      	beq.n	800c4b0 <bt_mesh_model_recv+0x98>
		if (mod->keys[i] == key) {
 800c4e4:	89aa      	ldrh	r2, [r5, #12]
 800c4e6:	4282      	cmp	r2, r0
 800c4e8:	d108      	bne.n	800c4fc <bt_mesh_model_recv+0xe4>
		for (op = (*model)->op; op->func; op++) {
 800c4ea:	696a      	ldr	r2, [r5, #20]
 800c4ec:	e003      	b.n	800c4f6 <bt_mesh_model_recv+0xde>
			if (op->opcode == opcode) {
 800c4ee:	6811      	ldr	r1, [r2, #0]
 800c4f0:	42b1      	cmp	r1, r6
 800c4f2:	d005      	beq.n	800c500 <bt_mesh_model_recv+0xe8>
		for (op = (*model)->op; op->func; op++) {
 800c4f4:	320c      	adds	r2, #12
 800c4f6:	6891      	ldr	r1, [r2, #8]
 800c4f8:	2900      	cmp	r1, #0
 800c4fa:	d1f8      	bne.n	800c4ee <bt_mesh_model_recv+0xd6>
 800c4fc:	351c      	adds	r5, #28
 800c4fe:	e7ef      	b.n	800c4e0 <bt_mesh_model_recv+0xc8>
			if (buf->len < op->min_len) {
 800c500:	88a1      	ldrh	r1, [r4, #4]
 800c502:	6853      	ldr	r3, [r2, #4]
 800c504:	4299      	cmp	r1, r3
 800c506:	d3d3      	bcc.n	800c4b0 <bt_mesh_model_recv+0x98>
	state->offset = net_buf_simple_headroom(buf);
 800c508:	4620      	mov	r0, r4
 800c50a:	9201      	str	r2, [sp, #4]
 800c50c:	f005 f99e 	bl	801184c <net_buf_simple_headroom>
			op->func(model, &rx->ctx, buf);
 800c510:	9a01      	ldr	r2, [sp, #4]
 800c512:	9900      	ldr	r1, [sp, #0]
 800c514:	6893      	ldr	r3, [r2, #8]
	state->len = buf->len;
 800c516:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
 800c51a:	4681      	mov	r9, r0
 800c51c:	4622      	mov	r2, r4
 800c51e:	4628      	mov	r0, r5
 800c520:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
 800c522:	fa1a f389 	uxtah	r3, sl, r9
 800c526:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
 800c528:	f8a4 b004 	strh.w	fp, [r4, #4]
 800c52c:	e7c0      	b.n	800c4b0 <bt_mesh_model_recv+0x98>
 800c52e:	bf00      	nop
 800c530:	20000d70 	.word	0x20000d70

0800c534 <bt_mesh_model_msg_init>:

void bt_mesh_model_msg_init(struct net_buf_simple *msg, u32_t opcode)
{
 800c534:	b538      	push	{r3, r4, r5, lr}
	buf->data = buf->__buf + reserve_head;
 800c536:	f100 0308 	add.w	r3, r0, #8
 800c53a:	6003      	str	r3, [r0, #0]
	net_buf_simple_init(msg, 0);

	if (opcode < 0x100) {
 800c53c:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
 800c53e:	f04f 0300 	mov.w	r3, #0
{
 800c542:	4604      	mov	r4, r0
 800c544:	8083      	strh	r3, [r0, #4]
	if (opcode < 0x100) {
 800c546:	d804      	bhi.n	800c552 <bt_mesh_model_msg_init+0x1e>
		/* 1-byte OpCode */
		net_buf_simple_add_u8(msg, opcode);
 800c548:	b2c9      	uxtb	r1, r1
	}

	/* 3-byte OpCode */
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
	net_buf_simple_add_le16(msg, opcode & 0xffff);
}
 800c54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
 800c54e:	f005 b8ec 	b.w	801172a <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
 800c552:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c556:	b28d      	uxth	r5, r1
 800c558:	d204      	bcs.n	800c564 <bt_mesh_model_msg_init+0x30>
		net_buf_simple_add_be16(msg, opcode);
 800c55a:	4629      	mov	r1, r5
}
 800c55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
 800c560:	f005 b8fa 	b.w	8011758 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
 800c564:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c568:	f005 f8df 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
 800c56c:	4629      	mov	r1, r5
 800c56e:	4620      	mov	r0, r4
}
 800c570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
 800c574:	f005 b8e1 	b.w	801173a <net_buf_simple_add_le16>

0800c578 <bt_mesh_model_send>:

int bt_mesh_model_send(struct bt_mesh_model *model,
		       struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *msg,
		       const struct bt_mesh_send_cb *cb, void *cb_data)
{
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	4605      	mov	r5, r0
 800c57c:	b085      	sub	sp, #20
	struct bt_mesh_net_tx tx = {
		.sub = bt_mesh_subnet_get(ctx->net_idx),
 800c57e:	8808      	ldrh	r0, [r1, #0]
{
 800c580:	461f      	mov	r7, r3
	struct bt_mesh_net_tx tx = {
 800c582:	2300      	movs	r3, #0
{
 800c584:	460e      	mov	r6, r1
 800c586:	4614      	mov	r4, r2
	struct bt_mesh_net_tx tx = {
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	9302      	str	r3, [sp, #8]
 800c58c:	9303      	str	r3, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
 800c58e:	f7fd f953 	bl	8009838 <bt_mesh_subnet_get>
		.ctx = ctx,
		.src = model->elem->addr,
 800c592:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
 800c594:	9001      	str	r0, [sp, #4]
 800c596:	881b      	ldrh	r3, [r3, #0]
 800c598:	9602      	str	r6, [sp, #8]
 800c59a:	f8ad 300c 	strh.w	r3, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
 800c59e:	f001 fef7 	bl	800e390 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
 800c5a2:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!bt_mesh_is_provisioned()) {
 800c5a6:	f7fc fd27 	bl	8008ff8 <bt_mesh_is_provisioned>
 800c5aa:	b178      	cbz	r0, 800c5cc <bt_mesh_model_send+0x54>
	if (net_buf_simple_tailroom(msg) < 4) {
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f005 f952 	bl	8011856 <net_buf_simple_tailroom>
 800c5b2:	2803      	cmp	r0, #3
 800c5b4:	d907      	bls.n	800c5c6 <bt_mesh_model_send+0x4e>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
 800c5b6:	88a3      	ldrh	r3, [r4, #4]
 800c5b8:	2bc8      	cmp	r3, #200	; 0xc8
 800c5ba:	d80b      	bhi.n	800c5d4 <bt_mesh_model_send+0x5c>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
 800c5bc:	9b02      	ldr	r3, [sp, #8]
		if (mod->keys[i] == key) {
 800c5be:	885a      	ldrh	r2, [r3, #2]
 800c5c0:	89ab      	ldrh	r3, [r5, #12]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d009      	beq.n	800c5da <bt_mesh_model_send+0x62>
		return -EINVAL;
 800c5c6:	f06f 0015 	mvn.w	r0, #21
 800c5ca:	e001      	b.n	800c5d0 <bt_mesh_model_send+0x58>
		return -EAGAIN;
 800c5cc:	f06f 000a 	mvn.w	r0, #10
		.friend_cred = 0,
	};

	return model_send(model, &tx, false, msg, cb, cb_data);
}
 800c5d0:	b005      	add	sp, #20
 800c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
 800c5d4:	f06f 0023 	mvn.w	r0, #35	; 0x23
	return model_send(model, &tx, false, msg, cb, cb_data);
 800c5d8:	e7fa      	b.n	800c5d0 <bt_mesh_model_send+0x58>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
 800c5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5dc:	463a      	mov	r2, r7
 800c5de:	4621      	mov	r1, r4
 800c5e0:	a801      	add	r0, sp, #4
 800c5e2:	f7fe fc6b 	bl	800aebc <bt_mesh_trans_send>
 800c5e6:	e7f3      	b.n	800c5d0 <bt_mesh_model_send+0x58>

0800c5e8 <bt_mesh_model_publish>:

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	b0ba      	sub	sp, #232	; 0xe8
 800c5ec:	4605      	mov	r5, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c5ee:	22d4      	movs	r2, #212	; 0xd4
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	a805      	add	r0, sp, #20
 800c5f4:	f7f4 f970 	bl	80008d8 <memset>
 800c5f8:	23cc      	movs	r3, #204	; 0xcc
 800c5fa:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
 800c5fe:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
 800c600:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_tx tx = {
 800c606:	9302      	str	r3, [sp, #8]
		.ctx = &ctx,
		.src = model->elem->addr,
 800c608:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_model_pub *pub = model->pub;
 800c60a:	68ac      	ldr	r4, [r5, #8]
	struct bt_mesh_net_tx tx = {
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	f8cd d00c 	str.w	sp, [sp, #12]
 800c612:	f8ad 3010 	strh.w	r3, [sp, #16]
		.xmit = bt_mesh_net_transmit_get(),
 800c616:	f001 febb 	bl	800e390 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
 800c61a:	f88d 0012 	strb.w	r0, [sp, #18]
	};
	int err;

	BT_DBG("");

	if (!pub) {
 800c61e:	2c00      	cmp	r4, #0
 800c620:	d062      	beq.n	800c6e8 <bt_mesh_model_publish+0x100>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
 800c622:	88a3      	ldrh	r3, [r4, #4]
 800c624:	b91b      	cbnz	r3, 800c62e <bt_mesh_model_publish+0x46>
		return -EADDRNOTAVAIL;
 800c626:	f06f 0030 	mvn.w	r0, #48	; 0x30
		pub->count = 0;
		return err;
	}

	return 0;
}
 800c62a:	b03a      	add	sp, #232	; 0xe8
 800c62c:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
 800c62e:	88e0      	ldrh	r0, [r4, #6]
 800c630:	f7fe fc20 	bl	800ae74 <bt_mesh_app_key_find>
	if (!key) {
 800c634:	4606      	mov	r6, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d0f5      	beq.n	800c626 <bt_mesh_model_publish+0x3e>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	889b      	ldrh	r3, [r3, #4]
 800c63e:	3304      	adds	r3, #4
 800c640:	2bcc      	cmp	r3, #204	; 0xcc
 800c642:	dc54      	bgt.n	800c6ee <bt_mesh_model_publish+0x106>
	if (pub->count) {
 800c644:	7ae3      	ldrb	r3, [r4, #11]
 800c646:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800c64a:	d003      	beq.n	800c654 <bt_mesh_model_publish+0x6c>
		k_delayed_work_cancel(&pub->timer);
 800c64c:	f104 0018 	add.w	r0, r4, #24
 800c650:	f006 f806 	bl	8012660 <k_delayed_work_cancel>
	buf->data = buf->__buf + reserve_head;
 800c654:	ab07      	add	r3, sp, #28
 800c656:	9305      	str	r3, [sp, #20]
	buf->len = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	f8ad 3018 	strh.w	r3, [sp, #24]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c65e:	6923      	ldr	r3, [r4, #16]
 800c660:	a805      	add	r0, sp, #20
 800c662:	889a      	ldrh	r2, [r3, #4]
 800c664:	6819      	ldr	r1, [r3, #0]
 800c666:	f005 f857 	bl	8011718 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
 800c66a:	88a3      	ldrh	r3, [r4, #4]
 800c66c:	f8ad 3004 	strh.w	r3, [sp, #4]
	ctx.send_ttl = pub->ttl;
 800c670:	7a23      	ldrb	r3, [r4, #8]
 800c672:	f88d 3007 	strb.w	r3, [sp, #7]
	ctx.app_idx = key->app_idx;
 800c676:	8873      	ldrh	r3, [r6, #2]
	ctx.net_idx = key->net_idx;
 800c678:	8830      	ldrh	r0, [r6, #0]
	ctx.app_idx = key->app_idx;
 800c67a:	f8ad 3002 	strh.w	r3, [sp, #2]
	tx.friend_cred = pub->cred;
 800c67e:	7ae3      	ldrb	r3, [r4, #11]
 800c680:	f89d 2013 	ldrb.w	r2, [sp, #19]
	ctx.net_idx = key->net_idx;
 800c684:	f8ad 0000 	strh.w	r0, [sp]
	tx.friend_cred = pub->cred;
 800c688:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c68c:	f363 0200 	bfi	r2, r3, #0, #1
 800c690:	f88d 2013 	strb.w	r2, [sp, #19]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
 800c694:	f7fd f8d0 	bl	8009838 <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
 800c698:	7ae3      	ldrb	r3, [r4, #11]
 800c69a:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
 800c69c:	9002      	str	r0, [sp, #8]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
 800c69e:	f362 1347 	bfi	r3, r2, #5, #3
 800c6a2:	72e3      	strb	r3, [r4, #11]
	if (!bt_mesh_is_provisioned()) {
 800c6a4:	f7fc fca8 	bl	8008ff8 <bt_mesh_is_provisioned>
 800c6a8:	b1a8      	cbz	r0, 800c6d6 <bt_mesh_model_publish+0xee>
	if (net_buf_simple_tailroom(msg) < 4) {
 800c6aa:	a805      	add	r0, sp, #20
 800c6ac:	f005 f8d3 	bl	8011856 <net_buf_simple_tailroom>
 800c6b0:	2803      	cmp	r0, #3
 800c6b2:	d913      	bls.n	800c6dc <bt_mesh_model_publish+0xf4>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
 800c6b4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c6b8:	2bc8      	cmp	r3, #200	; 0xc8
 800c6ba:	d812      	bhi.n	800c6e2 <bt_mesh_model_publish+0xfa>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
 800c6bc:	462b      	mov	r3, r5
 800c6be:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <bt_mesh_model_publish+0x10c>)
 800c6c0:	a905      	add	r1, sp, #20
 800c6c2:	a802      	add	r0, sp, #8
 800c6c4:	f7fe fbfa 	bl	800aebc <bt_mesh_trans_send>
	if (err) {
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d0ae      	beq.n	800c62a <bt_mesh_model_publish+0x42>
		pub->count = 0;
 800c6cc:	7ae3      	ldrb	r3, [r4, #11]
 800c6ce:	f36f 1347 	bfc	r3, #5, #3
 800c6d2:	72e3      	strb	r3, [r4, #11]
		return err;
 800c6d4:	e7a9      	b.n	800c62a <bt_mesh_model_publish+0x42>
		return -EAGAIN;
 800c6d6:	f06f 000a 	mvn.w	r0, #10
 800c6da:	e7f7      	b.n	800c6cc <bt_mesh_model_publish+0xe4>
		return -EINVAL;
 800c6dc:	f06f 0015 	mvn.w	r0, #21
 800c6e0:	e7f4      	b.n	800c6cc <bt_mesh_model_publish+0xe4>
		return -EMSGSIZE;
 800c6e2:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800c6e6:	e7f1      	b.n	800c6cc <bt_mesh_model_publish+0xe4>
		return -ENOTSUP;
 800c6e8:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800c6ec:	e79d      	b.n	800c62a <bt_mesh_model_publish+0x42>
		return -EMSGSIZE;
 800c6ee:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800c6f2:	e79a      	b.n	800c62a <bt_mesh_model_publish+0x42>
 800c6f4:	08013a3c 	.word	0x08013a3c

0800c6f8 <mod_publish>:
{
 800c6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c6fc:	f850 7c18 	ldr.w	r7, [r0, #-24]
{
 800c700:	4604      	mov	r4, r0
 800c702:	b0bb      	sub	sp, #236	; 0xec
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c704:	4638      	mov	r0, r7
 800c706:	f7ff fd89 	bl	800c21c <bt_mesh_model_pub_period_get>
	if (pub->count) {
 800c70a:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c70e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
 800c712:	4681      	mov	r9, r0
	if (pub->count) {
 800c714:	d05c      	beq.n	800c7d0 <mod_publish+0xd8>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c716:	22d4      	movs	r2, #212	; 0xd4
 800c718:	2100      	movs	r1, #0
 800c71a:	a805      	add	r0, sp, #20
 800c71c:	f7f4 f8dc 	bl	80008d8 <memset>
	struct bt_mesh_model_pub *pub = mod->pub;
 800c720:	68bd      	ldr	r5, [r7, #8]
	struct bt_mesh_msg_ctx ctx = {
 800c722:	2600      	movs	r6, #0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c724:	23cc      	movs	r3, #204	; 0xcc
	struct bt_mesh_msg_ctx ctx = {
 800c726:	9601      	str	r6, [sp, #4]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800c728:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_msg_ctx ctx = {
 800c72c:	88ab      	ldrh	r3, [r5, #4]
 800c72e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c732:	7a2b      	ldrb	r3, [r5, #8]
 800c734:	f88d 3007 	strb.w	r3, [sp, #7]
		.src = mod->elem->addr,
 800c738:	687b      	ldr	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
 800c73a:	9604      	str	r6, [sp, #16]
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
 800c742:	9600      	str	r6, [sp, #0]
	struct bt_mesh_net_tx tx = {
 800c744:	9602      	str	r6, [sp, #8]
 800c746:	f8cd d00c 	str.w	sp, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
 800c74a:	f001 fe21 	bl	800e390 <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
 800c74e:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
 800c750:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c754:	f88d 0012 	strb.w	r0, [sp, #18]
 800c758:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c75c:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
 800c760:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
 800c762:	f88d 2013 	strb.w	r2, [sp, #19]
	key = bt_mesh_app_key_find(pub->key);
 800c766:	f7fe fb85 	bl	800ae74 <bt_mesh_app_key_find>
	if (!key) {
 800c76a:	4680      	mov	r8, r0
 800c76c:	b1f8      	cbz	r0, 800c7ae <mod_publish+0xb6>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
 800c76e:	8800      	ldrh	r0, [r0, #0]
 800c770:	f7fd f862 	bl	8009838 <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
 800c774:	f8b8 3000 	ldrh.w	r3, [r8]
 800c778:	f8ad 3000 	strh.w	r3, [sp]
	ctx.app_idx = key->app_idx;
 800c77c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c780:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf->data = buf->__buf + reserve_head;
 800c784:	ab07      	add	r3, sp, #28
 800c786:	9305      	str	r3, [sp, #20]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c788:	692b      	ldr	r3, [r5, #16]
	buf->len = 0;
 800c78a:	f8ad 6018 	strh.w	r6, [sp, #24]
 800c78e:	889a      	ldrh	r2, [r3, #4]
 800c790:	6819      	ldr	r1, [r3, #0]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
 800c792:	9002      	str	r0, [sp, #8]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
 800c794:	a805      	add	r0, sp, #20
 800c796:	f004 ffbf 	bl	8011718 <net_buf_simple_add_mem>
	pub->count--;
 800c79a:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
 800c79c:	4a19      	ldr	r2, [pc, #100]	; (800c804 <mod_publish+0x10c>)
	pub->count--;
 800c79e:	33e0      	adds	r3, #224	; 0xe0
 800c7a0:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
 800c7a2:	a905      	add	r1, sp, #20
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	a802      	add	r0, sp, #8
 800c7a8:	f7fe fb88 	bl	800aebc <bt_mesh_trans_send>
		if (err) {
 800c7ac:	b168      	cbz	r0, 800c7ca <mod_publish+0xd2>
			pub->count = 0;
 800c7ae:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c7b2:	f36f 1347 	bfc	r3, #5, #3
 800c7b6:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
 800c7ba:	f1b9 0f00 	cmp.w	r9, #0
 800c7be:	d004      	beq.n	800c7ca <mod_publish+0xd2>
 800c7c0:	464a      	mov	r2, r9
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4810      	ldr	r0, [pc, #64]	; (800c808 <mod_publish+0x110>)
 800c7c6:	f005 ff97 	bl	80126f8 <k_delayed_work_submit_to_queue>
}
 800c7ca:	b03b      	add	sp, #236	; 0xec
 800c7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!period_ms) {
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0fa      	beq.n	800c7ca <mod_publish+0xd2>
 800c7d4:	f005 fc5e 	bl	8012094 <_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
 800c7d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
 800c7dc:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
 800c7e0:	f854 0c18 	ldr.w	r0, [r4, #-24]
 800c7e4:	4798      	blx	r3
	if (err) {
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d1ef      	bne.n	800c7ca <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
 800c7ea:	f854 0c18 	ldr.w	r0, [r4, #-24]
 800c7ee:	f7ff fefb 	bl	800c5e8 <bt_mesh_model_publish>
	if (pub->count) {
 800c7f2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 800c7f6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800c7fa:	d0e6      	beq.n	800c7ca <mod_publish+0xd2>
		k_delayed_work_cancel(&pub->timer);
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f005 ff2f 	bl	8012660 <k_delayed_work_cancel>
 800c802:	e7e2      	b.n	800c7ca <mod_publish+0xd2>
 800c804:	08013a3c 	.word	0x08013a3c
 800c808:	20001480 	.word	0x20001480

0800c80c <bt_mesh_model_find_vnd>:

struct bt_mesh_model *bt_mesh_model_find_vnd(struct bt_mesh_elem *elem,
					     u16_t company, u16_t id)
{
 800c80c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->vnd_model_count; i++) {
 800c80e:	7947      	ldrb	r7, [r0, #5]
{
 800c810:	4605      	mov	r5, r0
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c812:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
 800c814:	f04f 0e1c 	mov.w	lr, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
 800c818:	b2d8      	uxtb	r0, r3
 800c81a:	4287      	cmp	r7, r0
 800c81c:	d801      	bhi.n	800c822 <bt_mesh_model_find_vnd+0x16>
		    elem->vnd_models[i].vnd.id == id) {
			return &elem->vnd_models[i];
		}
	}

	return NULL;
 800c81e:	2000      	movs	r0, #0
}
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
 800c822:	fb0e f403 	mul.w	r4, lr, r3
 800c826:	68ee      	ldr	r6, [r5, #12]
 800c828:	1930      	adds	r0, r6, r4
 800c82a:	5b34      	ldrh	r4, [r6, r4]
 800c82c:	428c      	cmp	r4, r1
 800c82e:	d102      	bne.n	800c836 <bt_mesh_model_find_vnd+0x2a>
 800c830:	8844      	ldrh	r4, [r0, #2]
 800c832:	4294      	cmp	r4, r2
 800c834:	d0f4      	beq.n	800c820 <bt_mesh_model_find_vnd+0x14>
 800c836:	3301      	adds	r3, #1
 800c838:	e7ee      	b.n	800c818 <bt_mesh_model_find_vnd+0xc>

0800c83a <bt_mesh_model_find>:

struct bt_mesh_model *bt_mesh_model_find(struct bt_mesh_elem *elem,
					 u16_t id)
{
 800c83a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->model_count; i++) {
 800c83c:	7906      	ldrb	r6, [r0, #4]
 800c83e:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
 800c840:	271c      	movs	r7, #28
	for (i = 0; i < elem->model_count; i++) {
 800c842:	b2da      	uxtb	r2, r3
 800c844:	4296      	cmp	r6, r2
 800c846:	d801      	bhi.n	800c84c <bt_mesh_model_find+0x12>
			return &elem->models[i];
		}
	}

	return NULL;
 800c848:	2200      	movs	r2, #0
 800c84a:	e008      	b.n	800c85e <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
 800c84c:	fb07 f403 	mul.w	r4, r7, r3
 800c850:	6885      	ldr	r5, [r0, #8]
 800c852:	192a      	adds	r2, r5, r4
 800c854:	5b2c      	ldrh	r4, [r5, r4]
 800c856:	428c      	cmp	r4, r1
 800c858:	f103 0301 	add.w	r3, r3, #1
 800c85c:	d1f1      	bne.n	800c842 <bt_mesh_model_find+0x8>
}
 800c85e:	4610      	mov	r0, r2
 800c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c864 <bt_mesh_comp_get>:

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
 800c864:	4b01      	ldr	r3, [pc, #4]	; (800c86c <bt_mesh_comp_get+0x8>)
 800c866:	6818      	ldr	r0, [r3, #0]
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	20000d70 	.word	0x20000d70

0800c870 <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
 800c870:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
 800c872:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
 800c876:	4605      	mov	r5, r0
 800c878:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
 800c87a:	b289      	uxth	r1, r1
 800c87c:	f004 ff5d 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
 800c880:	f3c4 1107 	ubfx	r1, r4, #4, #8
 800c884:	4628      	mov	r0, r5
}
 800c886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
 800c88a:	f004 bf4e 	b.w	801172a <net_buf_simple_add_u8>

0800c88e <send_krp_status>:
}

static void send_krp_status(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    u16_t idx, u8_t phase, u8_t status)
{
 800c88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c890:	b089      	sub	sp, #36	; 0x24
 800c892:	4604      	mov	r4, r0
 800c894:	460d      	mov	r5, r1
 800c896:	4617      	mov	r7, r2
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c898:	2100      	movs	r1, #0
 800c89a:	2214      	movs	r2, #20
 800c89c:	a803      	add	r0, sp, #12
{
 800c89e:	461e      	mov	r6, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c8a0:	f7f4 f81a 	bl	80008d8 <memset>
 800c8a4:	230a      	movs	r3, #10

	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
 800c8a6:	a803      	add	r0, sp, #12
 800c8a8:	f248 0117 	movw	r1, #32791	; 0x8017
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800c8ac:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
 800c8b0:	f7ff fe40 	bl	800c534 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800c8b4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c8b8:	a803      	add	r0, sp, #12
 800c8ba:	f004 ff36 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800c8be:	4639      	mov	r1, r7
 800c8c0:	a803      	add	r0, sp, #12
 800c8c2:	f004 ff3a 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, phase);
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	a803      	add	r0, sp, #12
 800c8ca:	f004 ff2e 	bl	801172a <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	aa03      	add	r2, sp, #12
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7ff fe4e 	bl	800c578 <bt_mesh_model_send>
		BT_ERR("Unable to send Key Refresh State Status");
	}
}
 800c8dc:	b009      	add	sp, #36	; 0x24
 800c8de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8e0 <lpn_timeout_get>:
{
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c8e8:	2214      	movs	r2, #20
{
 800c8ea:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c8ec:	a803      	add	r0, sp, #12
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	f7f3 fff2 	bl	80008d8 <memset>
 800c8f4:	230b      	movs	r3, #11
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c8f6:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
 800c8f8:	f8ad 3012 	strh.w	r3, [sp, #18]
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c8fc:	f004 ff81 	bl	8011802 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
 800c900:	b203      	sxth	r3, r0
 800c902:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
 800c904:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
 800c906:	dd1b      	ble.n	800c940 <lpn_timeout_get+0x60>
	bt_mesh_model_msg_init(msg, OP_LPN_TIMEOUT_STATUS);
 800c908:	f248 012e 	movw	r1, #32814	; 0x802e
 800c90c:	a803      	add	r0, sp, #12
 800c90e:	f7ff fe11 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, lpn_addr);
 800c912:	4621      	mov	r1, r4
 800c914:	a803      	add	r0, sp, #12
 800c916:	f004 ff10 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, timeout);
 800c91a:	2100      	movs	r1, #0
 800c91c:	a803      	add	r0, sp, #12
 800c91e:	f004 ff04 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 8);
 800c922:	2100      	movs	r1, #0
 800c924:	a803      	add	r0, sp, #12
 800c926:	f004 ff00 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 16);
 800c92a:	2100      	movs	r1, #0
 800c92c:	a803      	add	r0, sp, #12
 800c92e:	f004 fefc 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c932:	2300      	movs	r3, #0
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	aa03      	add	r2, sp, #12
 800c938:	4631      	mov	r1, r6
 800c93a:	4628      	mov	r0, r5
 800c93c:	f7ff fe1c 	bl	800c578 <bt_mesh_model_send>
}
 800c940:	b008      	add	sp, #32
 800c942:	bd70      	pop	{r4, r5, r6, pc}

0800c944 <send_friend_status>:
{
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4604      	mov	r4, r0
 800c948:	b086      	sub	sp, #24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c94a:	2210      	movs	r2, #16
{
 800c94c:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c94e:	a802      	add	r0, sp, #8
 800c950:	2100      	movs	r1, #0
 800c952:	f7f3 ffc1 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800c956:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c958:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
 800c95a:	a802      	add	r0, sp, #8
 800c95c:	f248 0111 	movw	r1, #32785	; 0x8011
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800c960:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
 800c964:	f7ff fde6 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, cfg->frnd);
 800c968:	7a71      	ldrb	r1, [r6, #9]
 800c96a:	a802      	add	r0, sp, #8
 800c96c:	f004 fedd 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c970:	2300      	movs	r3, #0
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	aa02      	add	r2, sp, #8
 800c976:	4629      	mov	r1, r5
 800c978:	4620      	mov	r0, r4
 800c97a:	f7ff fdfd 	bl	800c578 <bt_mesh_model_send>
}
 800c97e:	b006      	add	sp, #24
 800c980:	bd70      	pop	{r4, r5, r6, pc}

0800c982 <friend_get>:
	send_friend_status(model, ctx);
 800c982:	f7ff bfdf 	b.w	800c944 <send_friend_status>
	...

0800c988 <net_key_get>:
{
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	b088      	sub	sp, #32
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800c98c:	2214      	movs	r2, #20
{
 800c98e:	4605      	mov	r5, r0
 800c990:	460e      	mov	r6, r1
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800c992:	a803      	add	r0, sp, #12
 800c994:	2100      	movs	r1, #0
 800c996:	f7f3 ff9f 	bl	80008d8 <memset>
 800c99a:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
 800c99c:	f248 0143 	movw	r1, #32835	; 0x8043
 800c9a0:	a803      	add	r0, sp, #12
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
 800c9a2:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
 800c9a6:	f7ff fdc5 	bl	800c534 <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 800c9aa:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <net_key_get+0x64>)
 800c9ac:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
 800c9b0:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 800c9b4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800c9b8:	42a2      	cmp	r2, r4
 800c9ba:	d005      	beq.n	800c9c8 <net_key_get+0x40>
		if (prev == BT_MESH_KEY_UNUSED) {
 800c9bc:	42a1      	cmp	r1, r4
 800c9be:	d013      	beq.n	800c9e8 <net_key_get+0x60>
		key_idx_pack(msg, prev, sub->net_idx);
 800c9c0:	a803      	add	r0, sp, #12
 800c9c2:	f7ff ff55 	bl	800c870 <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
 800c9c6:	4621      	mov	r1, r4
	if (prev != BT_MESH_KEY_UNUSED) {
 800c9c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	d002      	beq.n	800c9d6 <net_key_get+0x4e>
		net_buf_simple_add_le16(msg, prev);
 800c9d0:	a803      	add	r0, sp, #12
 800c9d2:	f004 feb2 	bl	801173a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	aa03      	add	r2, sp, #12
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f7ff fdca 	bl	800c578 <bt_mesh_model_send>
}
 800c9e4:	b008      	add	sp, #32
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	e7ed      	b.n	800c9c8 <net_key_get+0x40>
 800c9ec:	20005bd0 	.word	0x20005bd0

0800c9f0 <send_net_key_status>:
{
 800c9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9f2:	b089      	sub	sp, #36	; 0x24
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2214      	movs	r2, #20
 800c9fe:	a803      	add	r0, sp, #12
{
 800ca00:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800ca02:	f7f3 ff69 	bl	80008d8 <memset>
 800ca06:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
 800ca08:	a803      	add	r0, sp, #12
 800ca0a:	f248 0144 	movw	r1, #32836	; 0x8044
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
 800ca0e:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
 800ca12:	f7ff fd8f 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800ca16:	4639      	mov	r1, r7
 800ca18:	a803      	add	r0, sp, #12
 800ca1a:	f004 fe86 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800ca1e:	4631      	mov	r1, r6
 800ca20:	a803      	add	r0, sp, #12
 800ca22:	f004 fe8a 	bl	801173a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ca26:	2300      	movs	r3, #0
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	aa03      	add	r2, sp, #12
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff fda2 	bl	800c578 <bt_mesh_model_send>
}
 800ca34:	b009      	add	sp, #36	; 0x24
 800ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca38 <krp_get>:

static void krp_get(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		    struct net_buf_simple *buf)
{
 800ca38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca3a:	4605      	mov	r5, r0
	struct bt_mesh_subnet *sub;
	u16_t idx;

	idx = net_buf_simple_pull_le16(buf);
 800ca3c:	4610      	mov	r0, r2
{
 800ca3e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
 800ca40:	f004 fedf 	bl	8011802 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800ca44:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800ca48:	4604      	mov	r4, r0
	if (idx > 0xfff) {
 800ca4a:	d20a      	bcs.n	800ca62 <krp_get+0x2a>
		return;
	}

	BT_DBG("idx 0x%04x", idx);

	sub = bt_mesh_subnet_get(idx);
 800ca4c:	f7fc fef4 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800ca50:	4603      	mov	r3, r0
 800ca52:	b940      	cbnz	r0, 800ca66 <krp_get+0x2e>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
 800ca54:	2204      	movs	r2, #4
	} else {
		send_krp_status(model, ctx, idx, sub->kr_phase,
 800ca56:	9200      	str	r2, [sp, #0]
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff ff16 	bl	800c88e <send_krp_status>
				STATUS_SUCCESS);
	}
}
 800ca62:	b002      	add	sp, #8
 800ca64:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
 800ca66:	7fc3      	ldrb	r3, [r0, #31]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	e7f4      	b.n	800ca56 <krp_get+0x1e>

0800ca6c <node_identity_get>:
{
 800ca6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6e:	b089      	sub	sp, #36	; 0x24
 800ca70:	4614      	mov	r4, r2
 800ca72:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800ca74:	2214      	movs	r2, #20
{
 800ca76:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800ca78:	a803      	add	r0, sp, #12
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	f7f3 ff2c 	bl	80008d8 <memset>
 800ca80:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
 800ca82:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800ca84:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
 800ca88:	f004 febb 	bl	8011802 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800ca8c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800ca90:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800ca92:	d21c      	bcs.n	800cace <node_identity_get+0x62>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
 800ca94:	f248 0148 	movw	r1, #32840	; 0x8048
 800ca98:	a803      	add	r0, sp, #12
 800ca9a:	f7ff fd4b 	bl	800c534 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f7fc feca 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800caa4:	4604      	mov	r4, r0
 800caa6:	b9a0      	cbnz	r0, 800cad2 <node_identity_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
 800caa8:	2104      	movs	r1, #4
 800caaa:	a803      	add	r0, sp, #12
 800caac:	f004 fe3d 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
 800cab0:	4629      	mov	r1, r5
 800cab2:	a803      	add	r0, sp, #12
 800cab4:	f004 fe41 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, node_id);
 800cab8:	4621      	mov	r1, r4
 800caba:	a803      	add	r0, sp, #12
 800cabc:	f004 fe35 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cac0:	2300      	movs	r3, #0
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	aa03      	add	r2, sp, #12
 800cac6:	4639      	mov	r1, r7
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff fd55 	bl	800c578 <bt_mesh_model_send>
}
 800cace:	b009      	add	sp, #36	; 0x24
 800cad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800cad2:	2100      	movs	r1, #0
 800cad4:	a803      	add	r0, sp, #12
 800cad6:	f004 fe28 	bl	801172a <net_buf_simple_add_u8>
		node_id = sub->node_id;
 800cada:	f894 4020 	ldrb.w	r4, [r4, #32]
 800cade:	e7e7      	b.n	800cab0 <node_identity_get+0x44>

0800cae0 <app_key_get>:
{
 800cae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae4:	b089      	sub	sp, #36	; 0x24
 800cae6:	4614      	mov	r4, r2
 800cae8:	4606      	mov	r6, r0
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800caea:	2214      	movs	r2, #20
{
 800caec:	460f      	mov	r7, r1
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800caee:	a803      	add	r0, sp, #12
 800caf0:	2100      	movs	r1, #0
 800caf2:	f7f3 fef1 	bl	80008d8 <memset>
 800caf6:	230c      	movs	r3, #12
	get_idx = net_buf_simple_pull_le16(buf);
 800caf8:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 3 + 4 +
 800cafa:	f8ad 3012 	strh.w	r3, [sp, #18]
	get_idx = net_buf_simple_pull_le16(buf);
 800cafe:	f004 fe80 	bl	8011802 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
 800cb02:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
 800cb06:	4605      	mov	r5, r0
	if (get_idx > 0xfff) {
 800cb08:	d234      	bcs.n	800cb74 <app_key_get+0x94>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_LIST);
 800cb0a:	f248 0102 	movw	r1, #32770	; 0x8002
 800cb0e:	a803      	add	r0, sp, #12
 800cb10:	f7ff fd10 	bl	800c534 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7fc fe8f 	bl	8009838 <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	bf0c      	ite	eq
 800cb1e:	2404      	moveq	r4, #4
 800cb20:	2400      	movne	r4, #0
	net_buf_simple_add_u8(msg, status);
 800cb22:	4621      	mov	r1, r4
 800cb24:	a803      	add	r0, sp, #12
 800cb26:	f004 fe00 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, get_idx);
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	a803      	add	r0, sp, #12
 800cb2e:	f004 fe04 	bl	801173a <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
 800cb32:	b9c4      	cbnz	r4, 800cb66 <app_key_get+0x86>
 800cb34:	4c14      	ldr	r4, [pc, #80]	; (800cb88 <app_key_get+0xa8>)
 800cb36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb3a:	f104 0850 	add.w	r8, r4, #80	; 0x50
		if (prev == BT_MESH_KEY_UNUSED) {
 800cb3e:	4689      	mov	r9, r1
		if (key->net_idx != get_idx) {
 800cb40:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
 800cb44:	42ab      	cmp	r3, r5
 800cb46:	d104      	bne.n	800cb52 <app_key_get+0x72>
		if (prev == BT_MESH_KEY_UNUSED) {
 800cb48:	4549      	cmp	r1, r9
 800cb4a:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
 800cb4e:	d114      	bne.n	800cb7a <app_key_get+0x9a>
			prev = key->app_idx;
 800cb50:	4611      	mov	r1, r2
 800cb52:	3428      	adds	r4, #40	; 0x28
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
 800cb54:	45a0      	cmp	r8, r4
 800cb56:	d1f3      	bne.n	800cb40 <app_key_get+0x60>
	if (prev != BT_MESH_KEY_UNUSED) {
 800cb58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	d002      	beq.n	800cb66 <app_key_get+0x86>
		net_buf_simple_add_le16(msg, prev);
 800cb60:	a803      	add	r0, sp, #12
 800cb62:	f004 fdea 	bl	801173a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cb66:	2300      	movs	r3, #0
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	aa03      	add	r2, sp, #12
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7ff fd02 	bl	800c578 <bt_mesh_model_send>
}
 800cb74:	b009      	add	sp, #36	; 0x24
 800cb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		key_idx_pack(msg, prev, key->app_idx);
 800cb7a:	a803      	add	r0, sp, #12
 800cb7c:	f7ff fe78 	bl	800c870 <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
 800cb80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cb84:	e7e5      	b.n	800cb52 <app_key_get+0x72>
 800cb86:	bf00      	nop
 800cb88:	20005bd0 	.word	0x20005bd0

0800cb8c <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	b088      	sub	sp, #32
 800cb92:	4605      	mov	r5, r0
 800cb94:	4690      	mov	r8, r2
 800cb96:	460e      	mov	r6, r1
	/* Needed size: opcode (1 byte) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cb98:	2218      	movs	r2, #24
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	a802      	add	r0, sp, #8
{
 800cb9e:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cba0:	f7f3 fe9a 	bl	80008d8 <memset>
 800cba4:	230f      	movs	r3, #15
	struct bt_mesh_cfg_srv *cfg = model->user_data;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
 800cba6:	2106      	movs	r1, #6
 800cba8:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
 800cbaa:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800cbae:	69ac      	ldr	r4, [r5, #24]
	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
 800cbb0:	f7ff fcc0 	bl	800c534 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800cbb4:	4641      	mov	r1, r8
 800cbb6:	a802      	add	r0, sp, #8
 800cbb8:	f004 fdb7 	bl	801172a <net_buf_simple_add_u8>

	if (orig_msg) {
 800cbbc:	b18f      	cbz	r7, 800cbe2 <hb_pub_send_status+0x56>
		memcpy(net_buf_simple_add(msg, sizeof(*orig_msg)), orig_msg,
 800cbbe:	2109      	movs	r1, #9
 800cbc0:	a802      	add	r0, sp, #8
 800cbc2:	f004 fda3 	bl	801170c <net_buf_simple_add>
 800cbc6:	2209      	movs	r2, #9
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fe59 	bl	8000880 <memcpy>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cbce:	2300      	movs	r3, #0
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	aa02      	add	r2, sp, #8
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f7ff fcce 	bl	800c578 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Publication Status");
	}
}
 800cbdc:	b008      	add	sp, #32
 800cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(msg, cfg->hb_pub.dst);
 800cbe2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800cbe4:	a802      	add	r0, sp, #8
 800cbe6:	f004 fda8 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
 800cbea:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	if (!val) {
 800cbec:	b171      	cbz	r1, 800cc0c <hb_pub_send_status+0x80>
	} else if (val == 0x01) {
 800cbee:	2901      	cmp	r1, #1
 800cbf0:	d00c      	beq.n	800cc0c <hb_pub_send_status+0x80>
	} else if (val == 0xffff) {
 800cbf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbf6:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
 800cbf8:	bf1f      	itttt	ne
 800cbfa:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 800cbfe:	fab1 f181 	clzne	r1, r1
 800cc02:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
 800cc06:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800cc08:	bf08      	it	eq
 800cc0a:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
 800cc0c:	a802      	add	r0, sp, #8
 800cc0e:	f004 fd8c 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.period);
 800cc12:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800cc16:	a802      	add	r0, sp, #8
 800cc18:	f004 fd87 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
 800cc1c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800cc20:	a802      	add	r0, sp, #8
 800cc22:	f004 fd82 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
 800cc26:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800cc28:	a802      	add	r0, sp, #8
 800cc2a:	f004 fd86 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);
 800cc2e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800cc30:	a802      	add	r0, sp, #8
 800cc32:	f004 fd82 	bl	801173a <net_buf_simple_add_le16>
 800cc36:	e7ca      	b.n	800cbce <hb_pub_send_status+0x42>

0800cc38 <heartbeat_pub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
 800cc38:	2300      	movs	r3, #0
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	f7ff bfa6 	b.w	800cb8c <hb_pub_send_status>

0800cc40 <send_mod_sub_status>:
{
 800cc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc44:	b088      	sub	sp, #32
 800cc46:	4690      	mov	r8, r2
 800cc48:	4604      	mov	r4, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800cc4a:	2218      	movs	r2, #24
{
 800cc4c:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800cc4e:	a802      	add	r0, sp, #8
 800cc50:	2100      	movs	r1, #0
{
 800cc52:	461f      	mov	r7, r3
 800cc54:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800cc58:	f7f3 fe3e 	bl	80008d8 <memset>
 800cc5c:	230f      	movs	r3, #15
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
 800cc5e:	f248 011f 	movw	r1, #32799	; 0x801f
 800cc62:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800cc64:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
 800cc68:	f7ff fc64 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	a802      	add	r0, sp, #8
 800cc70:	f004 fd5b 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800cc74:	4639      	mov	r1, r7
 800cc76:	a802      	add	r0, sp, #8
 800cc78:	f004 fd5f 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, sub_addr);
 800cc7c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800cc80:	a802      	add	r0, sp, #8
 800cc82:	f004 fd5a 	bl	801173a <net_buf_simple_add_le16>
	if (vnd) {
 800cc86:	b18e      	cbz	r6, 800ccac <send_mod_sub_status+0x6c>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800cc88:	2104      	movs	r1, #4
 800cc8a:	a802      	add	r0, sp, #8
 800cc8c:	f004 fd3e 	bl	801170c <net_buf_simple_add>
 800cc90:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800cc92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc94:	f7f3 fdf4 	bl	8000880 <memcpy>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cc98:	2300      	movs	r3, #0
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	aa02      	add	r2, sp, #8
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7ff fc69 	bl	800c578 <bt_mesh_model_send>
}
 800cca6:	b008      	add	sp, #32
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800ccac:	2102      	movs	r1, #2
 800ccae:	a802      	add	r0, sp, #8
 800ccb0:	f004 fd2c 	bl	801170c <net_buf_simple_add>
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	e7ec      	b.n	800cc92 <send_mod_sub_status+0x52>

0800ccb8 <krp_set>:
{
 800ccb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ccbc:	4680      	mov	r8, r0
	idx = net_buf_simple_pull_le16(buf);
 800ccbe:	4610      	mov	r0, r2
{
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
 800ccc4:	f004 fd9d 	bl	8011802 <net_buf_simple_pull_le16>
 800ccc8:	4606      	mov	r6, r0
	phase = net_buf_simple_pull_u8(buf);
 800ccca:	4620      	mov	r0, r4
 800cccc:	f004 fd91 	bl	80117f2 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
 800ccd0:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
 800ccd4:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800ccd6:	d215      	bcs.n	800cd04 <krp_set+0x4c>
	sub = bt_mesh_subnet_get(idx);
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f7fc fdad 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800ccde:	4604      	mov	r4, r0
 800cce0:	b940      	cbnz	r0, 800ccf4 <krp_set+0x3c>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
 800cce2:	2304      	movs	r3, #4
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
 800cce8:	4632      	mov	r2, r6
 800ccea:	4639      	mov	r1, r7
 800ccec:	4640      	mov	r0, r8
 800ccee:	f7ff fdce 	bl	800c88e <send_krp_status>
 800ccf2:	e007      	b.n	800cd04 <krp_set+0x4c>
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
 800ccf4:	1eab      	subs	r3, r5, #2
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d803      	bhi.n	800cd04 <krp_set+0x4c>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
 800ccfc:	7fc3      	ldrb	r3, [r0, #31]
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
 800ccfe:	b923      	cbnz	r3, 800cd0a <krp_set+0x52>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
 800cd00:	2d02      	cmp	r5, #2
 800cd02:	d10e      	bne.n	800cd22 <krp_set+0x6a>
}
 800cd04:	b002      	add	sp, #8
 800cd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d109      	bne.n	800cd22 <krp_set+0x6a>
 800cd0e:	2d02      	cmp	r5, #2
 800cd10:	d107      	bne.n	800cd22 <krp_set+0x6a>
		sub->kr_phase = BT_MESH_KR_PHASE_2;
 800cd12:	77c5      	strb	r5, [r0, #31]
		sub->kr_flag = 1;
 800cd14:	7783      	strb	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
 800cd16:	f7fc ff11 	bl	8009b3c <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	7fe3      	ldrb	r3, [r4, #31]
 800cd1e:	9200      	str	r2, [sp, #0]
 800cd20:	e7e2      	b.n	800cce8 <krp_set+0x30>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
 800cd22:	3b01      	subs	r3, #1
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d8f8      	bhi.n	800cd1a <krp_set+0x62>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
 800cd28:	2d03      	cmp	r5, #3
 800cd2a:	d1f6      	bne.n	800cd1a <krp_set+0x62>
		bt_mesh_net_revoke_keys(sub);
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f7fc ff73 	bl	8009c18 <bt_mesh_net_revoke_keys>
			friend_cred_refresh(ctx->net_idx);
 800cd32:	8838      	ldrh	r0, [r7, #0]
 800cd34:	f7fc fe08 	bl	8009948 <friend_cred_refresh>
		sub->kr_phase = BT_MESH_KR_NORMAL;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	77e3      	strb	r3, [r4, #31]
		sub->kr_flag = 0;
 800cd3c:	77a3      	strb	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
 800cd3e:	4620      	mov	r0, r4
 800cd40:	e7e9      	b.n	800cd16 <krp_set+0x5e>

0800cd42 <node_reset>:
{
 800cd42:	b530      	push	{r4, r5, lr}
 800cd44:	b087      	sub	sp, #28
 800cd46:	4604      	mov	r4, r0
 800cd48:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
 800cd4a:	2210      	movs	r2, #16
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	a802      	add	r0, sp, #8
 800cd50:	f7f3 fdc2 	bl	80008d8 <memset>
 800cd54:	2306      	movs	r3, #6
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
 800cd56:	a802      	add	r0, sp, #8
 800cd58:	f248 014a 	movw	r1, #32842	; 0x804a
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
 800cd5c:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
 800cd60:	f7ff fbe8 	bl	800c534 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cd64:	2300      	movs	r3, #0
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	aa02      	add	r2, sp, #8
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7ff fc03 	bl	800c578 <bt_mesh_model_send>
	bt_mesh_reset();
 800cd72:	f7fc f8ff 	bl	8008f74 <bt_mesh_reset>
}
 800cd76:	b007      	add	sp, #28
 800cd78:	bd30      	pop	{r4, r5, pc}

0800cd7a <mod_sub_get>:
{
 800cd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	4614      	mov	r4, r2
 800cd82:	4607      	mov	r7, r0
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800cd84:	2218      	movs	r2, #24
{
 800cd86:	4688      	mov	r8, r1
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800cd88:	a802      	add	r0, sp, #8
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	f7f3 fda4 	bl	80008d8 <memset>
 800cd90:	230f      	movs	r3, #15
	addr = net_buf_simple_pull_le16(buf);
 800cd92:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 5 + 4 +
 800cd94:	f8ad 300e 	strh.w	r3, [sp, #14]
	addr = net_buf_simple_pull_le16(buf);
 800cd98:	f004 fd33 	bl	8011802 <net_buf_simple_pull_le16>
 800cd9c:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f004 fd2f 	bl	8011802 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
 800cda4:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
 800cda8:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
 800cdaa:	a802      	add	r0, sp, #8
 800cdac:	f7ff fbc2 	bl	800c534 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f7ff faef 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800cdb6:	b960      	cbnz	r0, 800cdd2 <mod_sub_get+0x58>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
 800cdb8:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800cdba:	a802      	add	r0, sp, #8
 800cdbc:	f004 fcb5 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	a802      	add	r0, sp, #8
 800cdc4:	f004 fcb9 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
 800cdc8:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800cdca:	a802      	add	r0, sp, #8
 800cdcc:	f004 fcb5 	bl	801173a <net_buf_simple_add_le16>
 800cdd0:	e01a      	b.n	800ce08 <mod_sub_get+0x8e>
	mod = bt_mesh_model_find(elem, id);
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	f7ff fd31 	bl	800c83a <bt_mesh_model_find>
	if (!mod) {
 800cdd8:	4606      	mov	r6, r0
 800cdda:	b908      	cbnz	r0, 800cde0 <mod_sub_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800cddc:	2102      	movs	r1, #2
 800cdde:	e7ec      	b.n	800cdba <mod_sub_get+0x40>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800cde0:	2100      	movs	r1, #0
 800cde2:	a802      	add	r0, sp, #8
 800cde4:	f004 fca1 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
 800cde8:	4629      	mov	r1, r5
 800cdea:	a802      	add	r0, sp, #8
 800cdec:	f004 fca5 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	a802      	add	r0, sp, #8
 800cdf4:	f004 fca1 	bl	801173a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800cdf8:	89f1      	ldrh	r1, [r6, #14]
 800cdfa:	b111      	cbz	r1, 800ce02 <mod_sub_get+0x88>
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800cdfc:	a802      	add	r0, sp, #8
 800cdfe:	f004 fc9c 	bl	801173a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800ce02:	8a31      	ldrh	r1, [r6, #16]
 800ce04:	2900      	cmp	r1, #0
 800ce06:	d1e0      	bne.n	800cdca <mod_sub_get+0x50>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ce08:	2300      	movs	r3, #0
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	aa02      	add	r2, sp, #8
 800ce0e:	4641      	mov	r1, r8
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff fbb1 	bl	800c578 <bt_mesh_model_send>
}
 800ce16:	b008      	add	sp, #32
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce1c <mod_sub_get_vnd>:
{
 800ce1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce20:	b08b      	sub	sp, #44	; 0x2c
 800ce22:	4614      	mov	r4, r2
 800ce24:	4680      	mov	r8, r0
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800ce26:	221c      	movs	r2, #28
{
 800ce28:	4689      	mov	r9, r1
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800ce2a:	a803      	add	r0, sp, #12
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	f7f3 fd53 	bl	80008d8 <memset>
 800ce32:	2311      	movs	r3, #17
	addr = net_buf_simple_pull_le16(buf);
 800ce34:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 7 + 4 +
 800ce36:	f8ad 3012 	strh.w	r3, [sp, #18]
	addr = net_buf_simple_pull_le16(buf);
 800ce3a:	f004 fce2 	bl	8011802 <net_buf_simple_pull_le16>
 800ce3e:	4606      	mov	r6, r0
	company = net_buf_simple_pull_le16(buf);
 800ce40:	4620      	mov	r0, r4
 800ce42:	f004 fcde 	bl	8011802 <net_buf_simple_pull_le16>
 800ce46:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f004 fcda 	bl	8011802 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
 800ce4e:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
 800ce52:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
 800ce54:	a803      	add	r0, sp, #12
 800ce56:	f7ff fb6d 	bl	800c534 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7ff fa9a 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800ce60:	b980      	cbnz	r0, 800ce84 <mod_sub_get_vnd+0x68>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
 800ce62:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800ce64:	a803      	add	r0, sp, #12
 800ce66:	f004 fc60 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	a803      	add	r0, sp, #12
 800ce6e:	f004 fc64 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, company);
 800ce72:	4629      	mov	r1, r5
 800ce74:	a803      	add	r0, sp, #12
 800ce76:	f004 fc60 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
 800ce7a:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800ce7c:	a803      	add	r0, sp, #12
 800ce7e:	f004 fc5c 	bl	801173a <net_buf_simple_add_le16>
 800ce82:	e01f      	b.n	800cec4 <mod_sub_get_vnd+0xa8>
	mod = bt_mesh_model_find_vnd(elem, company, id);
 800ce84:	4622      	mov	r2, r4
 800ce86:	4629      	mov	r1, r5
 800ce88:	f7ff fcc0 	bl	800c80c <bt_mesh_model_find_vnd>
	if (!mod) {
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	b908      	cbnz	r0, 800ce94 <mod_sub_get_vnd+0x78>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
 800ce90:	2102      	movs	r1, #2
 800ce92:	e7e7      	b.n	800ce64 <mod_sub_get_vnd+0x48>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800ce94:	2100      	movs	r1, #0
 800ce96:	a803      	add	r0, sp, #12
 800ce98:	f004 fc47 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	a803      	add	r0, sp, #12
 800cea0:	f004 fc4b 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, company);
 800cea4:	4629      	mov	r1, r5
 800cea6:	a803      	add	r0, sp, #12
 800cea8:	f004 fc47 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
 800ceac:	4621      	mov	r1, r4
 800ceae:	a803      	add	r0, sp, #12
 800ceb0:	f004 fc43 	bl	801173a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800ceb4:	89f9      	ldrh	r1, [r7, #14]
 800ceb6:	b111      	cbz	r1, 800cebe <mod_sub_get_vnd+0xa2>
			net_buf_simple_add_le16(msg, mod->groups[i]);
 800ceb8:	a803      	add	r0, sp, #12
 800ceba:	f004 fc3e 	bl	801173a <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
 800cebe:	8a39      	ldrh	r1, [r7, #16]
 800cec0:	2900      	cmp	r1, #0
 800cec2:	d1db      	bne.n	800ce7c <mod_sub_get_vnd+0x60>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800cec4:	2300      	movs	r3, #0
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	aa03      	add	r2, sp, #12
 800ceca:	4649      	mov	r1, r9
 800cecc:	4640      	mov	r0, r8
 800cece:	f7ff fb53 	bl	800c578 <bt_mesh_model_send>
}
 800ced2:	b00b      	add	sp, #44	; 0x2c
 800ced4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ced8 <_app_key_del>:
{
 800ced8:	b510      	push	{r4, lr}
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
 800ceda:	1c81      	adds	r1, r0, #2
{
 800cedc:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
 800cede:	4807      	ldr	r0, [pc, #28]	; (800cefc <_app_key_del+0x24>)
 800cee0:	f7ff f962 	bl	800c1a8 <bt_mesh_model_foreach>
	key->net_idx = BT_MESH_KEY_UNUSED;
 800cee4:	4620      	mov	r0, r4
 800cee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceea:	f820 3b05 	strh.w	r3, [r0], #5
	memset(key->keys, 0, sizeof(key->keys));
 800ceee:	2222      	movs	r2, #34	; 0x22
 800cef0:	2100      	movs	r1, #0
}
 800cef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(key->keys, 0, sizeof(key->keys));
 800cef6:	f7f3 bcef 	b.w	80008d8 <memset>
 800cefa:	bf00      	nop
 800cefc:	0800da41 	.word	0x0800da41

0800cf00 <net_key_update>:
{
 800cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
 800cf06:	4610      	mov	r0, r2
{
 800cf08:	460f      	mov	r7, r1
 800cf0a:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
 800cf0c:	f004 fc79 	bl	8011802 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800cf10:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800cf14:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800cf16:	d23e      	bcs.n	800cf96 <net_key_update+0x96>
	sub = bt_mesh_subnet_get(idx);
 800cf18:	f7fc fc8e 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	b938      	cbnz	r0, 800cf30 <net_key_update+0x30>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
 800cf20:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800cf22:	462a      	mov	r2, r5
 800cf24:	4639      	mov	r1, r7
 800cf26:	4630      	mov	r0, r6
}
 800cf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800cf2c:	f7ff bd60 	b.w	800c9f0 <send_net_key_status>
	switch (sub->kr_phase) {
 800cf30:	7fc3      	ldrb	r3, [r0, #31]
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d819      	bhi.n	800cf6a <net_key_update+0x6a>
 800cf36:	e8df f003 	tbb	[pc, r3]
 800cf3a:	0c02      	.short	0x0c02
 800cf3c:	1616      	.short	0x1616
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
 800cf3e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800cf42:	2210      	movs	r2, #16
 800cf44:	f8d8 0000 	ldr.w	r0, [r8]
 800cf48:	f7f3 fc85 	bl	8000856 <memcmp>
 800cf4c:	b968      	cbnz	r0, 800cf6a <net_key_update+0x6a>
 800cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
 800cf52:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800cf56:	2210      	movs	r2, #16
 800cf58:	f8d8 0000 	ldr.w	r0, [r8]
 800cf5c:	f7f3 fc7b 	bl	8000856 <memcmp>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d0dd      	beq.n	800cf22 <net_key_update+0x22>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
 800cf66:	230b      	movs	r3, #11
 800cf68:	e7db      	b.n	800cf22 <net_key_update+0x22>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
 800cf6a:	f8d8 1000 	ldr.w	r1, [r8]
 800cf6e:	f104 0089 	add.w	r0, r4, #137	; 0x89
 800cf72:	f7fc fc7f 	bl	8009874 <bt_mesh_net_keys_create>
	if (!err && (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) ||
 800cf76:	b108      	cbz	r0, 800cf7c <net_key_update+0x7c>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
 800cf78:	2310      	movs	r3, #16
 800cf7a:	e7d2      	b.n	800cf22 <net_key_update+0x22>
		err = friend_cred_update(sub);
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7fc fd07 	bl	8009990 <friend_cred_update>
	if (err) {
 800cf82:	4680      	mov	r8, r0
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d1f7      	bne.n	800cf78 <net_key_update+0x78>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	77e3      	strb	r3, [r4, #31]
	bt_mesh_net_beacon_update(sub);
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f7fc fdd5 	bl	8009b3c <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800cf92:	4643      	mov	r3, r8
 800cf94:	e7c5      	b.n	800cf22 <net_key_update+0x22>
 800cf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cf9c <net_key_add>:
{
 800cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa0:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
 800cfa2:	4610      	mov	r0, r2
{
 800cfa4:	460f      	mov	r7, r1
 800cfa6:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
 800cfa8:	f004 fc2b 	bl	8011802 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800cfac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800cfb0:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800cfb2:	d241      	bcs.n	800d038 <net_key_add+0x9c>
	sub = bt_mesh_subnet_get(idx);
 800cfb4:	f7fc fc40 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800cfb8:	4604      	mov	r4, r0
 800cfba:	b980      	cbnz	r0, 800cfde <net_key_add+0x42>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
 800cfbc:	4b1f      	ldr	r3, [pc, #124]	; (800d03c <net_key_add+0xa0>)
 800cfbe:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 800cfc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfc6:	4291      	cmp	r1, r2
 800cfc8:	d004      	beq.n	800cfd4 <net_key_add+0x38>
 800cfca:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
 800cfce:	4291      	cmp	r1, r2
 800cfd0:	d130      	bne.n	800d034 <net_key_add+0x98>
		for (sub = NULL, i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 800cfd2:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
 800cfd4:	22e4      	movs	r2, #228	; 0xe4
 800cfd6:	fb02 3404 	mla	r4, r2, r4, r3
 800cfda:	f504 74da 	add.w	r4, r4, #436	; 0x1b4
	if (sub->net_idx == idx) {
 800cfde:	8ba3      	ldrh	r3, [r4, #28]
 800cfe0:	42ab      	cmp	r3, r5
 800cfe2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800cfe6:	d110      	bne.n	800d00a <net_key_add+0x6e>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
 800cfe8:	4601      	mov	r1, r0
 800cfea:	2210      	movs	r2, #16
 800cfec:	f8d8 0000 	ldr.w	r0, [r8]
 800cff0:	f7f3 fc31 	bl	8000856 <memcmp>
			status = STATUS_SUCCESS;
 800cff4:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
 800cff6:	bf14      	ite	ne
 800cff8:	2306      	movne	r3, #6
 800cffa:	2300      	moveq	r3, #0
			send_net_key_status(model, ctx, idx,
 800cffc:	462a      	mov	r2, r5
 800cffe:	4639      	mov	r1, r7
 800d000:	4630      	mov	r0, r6
}
 800d002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			send_net_key_status(model, ctx, idx,
 800d006:	f7ff bcf3 	b.w	800c9f0 <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
 800d00a:	f8d8 1000 	ldr.w	r1, [r8]
 800d00e:	f7fc fc31 	bl	8009874 <bt_mesh_net_keys_create>
	if (err) {
 800d012:	4680      	mov	r8, r0
 800d014:	b108      	cbz	r0, 800d01a <net_key_add+0x7e>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
 800d016:	2310      	movs	r3, #16
 800d018:	e7f0      	b.n	800cffc <net_key_add+0x60>
	sub->net_idx = idx;
 800d01a:	83a5      	strh	r5, [r4, #28]
	bt_mesh_net_beacon_update(sub);
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7fc fd8d 	bl	8009b3c <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
 800d022:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 800d024:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
 800d028:	f004 f844 	bl	80110b4 <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
 800d02c:	f7fc f8ee 	bl	800920c <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
 800d030:	4643      	mov	r3, r8
 800d032:	e7e3      	b.n	800cffc <net_key_add+0x60>
			send_net_key_status(model, ctx, idx,
 800d034:	2305      	movs	r3, #5
 800d036:	e7e1      	b.n	800cffc <net_key_add+0x60>
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	20005bd0 	.word	0x20005bd0

0800d040 <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
 800d040:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
 800d042:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
 800d044:	7865      	ldrb	r5, [r4, #1]
 800d046:	7823      	ldrb	r3, [r4, #0]
 800d048:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d04c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d050:	800b      	strh	r3, [r1, #0]
 800d052:	78a1      	ldrb	r1, [r4, #2]
 800d054:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
 800d056:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d05a:	091b      	lsrs	r3, r3, #4
 800d05c:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
 800d05e:	2103      	movs	r1, #3
}
 800d060:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
 800d062:	f004 bbbe 	b.w	80117e2 <net_buf_simple_pull>

0800d066 <app_key_del>:
{
 800d066:	b570      	push	{r4, r5, r6, lr}
 800d068:	b088      	sub	sp, #32
 800d06a:	4614      	mov	r4, r2
 800d06c:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d06e:	2214      	movs	r2, #20
{
 800d070:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d072:	a803      	add	r0, sp, #12
 800d074:	2100      	movs	r1, #0
 800d076:	f7f3 fc2f 	bl	80008d8 <memset>
 800d07a:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d07c:	4620      	mov	r0, r4
 800d07e:	eb0d 0203 	add.w	r2, sp, r3
 800d082:	a902      	add	r1, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d084:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d088:	f7ff ffda 	bl	800d040 <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
 800d08c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d090:	f7fc fbd2 	bl	8009838 <bt_mesh_subnet_get>
 800d094:	b330      	cbz	r0, 800d0e4 <app_key_del+0x7e>
	key = bt_mesh_app_key_find(key_app_idx);
 800d096:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800d09a:	f7fd feeb 	bl	800ae74 <bt_mesh_app_key_find>
	if (!key) {
 800d09e:	4604      	mov	r4, r0
 800d0a0:	b138      	cbz	r0, 800d0b2 <app_key_del+0x4c>
	if (key->net_idx != key_net_idx) {
 800d0a2:	8802      	ldrh	r2, [r0, #0]
 800d0a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d11d      	bne.n	800d0e8 <app_key_del+0x82>
	_app_key_del(key);
 800d0ac:	f7ff ff14 	bl	800ced8 <_app_key_del>
	status = STATUS_SUCCESS;
 800d0b0:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d0b2:	a803      	add	r0, sp, #12
 800d0b4:	f248 0103 	movw	r1, #32771	; 0x8003
 800d0b8:	f7ff fa3c 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d0bc:	4621      	mov	r1, r4
 800d0be:	a803      	add	r0, sp, #12
 800d0c0:	f004 fb33 	bl	801172a <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d0c4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d0c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d0cc:	a803      	add	r0, sp, #12
 800d0ce:	f7ff fbcf 	bl	800c870 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	aa03      	add	r2, sp, #12
 800d0d8:	4631      	mov	r1, r6
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7ff fa4c 	bl	800c578 <bt_mesh_model_send>
}
 800d0e0:	b008      	add	sp, #32
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
 800d0e4:	2404      	movs	r4, #4
 800d0e6:	e7e4      	b.n	800d0b2 <app_key_del+0x4c>
		status = STATUS_INVALID_BINDING;
 800d0e8:	2411      	movs	r4, #17
 800d0ea:	e7e2      	b.n	800d0b2 <app_key_del+0x4c>

0800d0ec <app_key_set>:
{
 800d0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4689      	mov	r9, r1
 800d0f4:	4617      	mov	r7, r2
 800d0f6:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
 800d0f8:	f7fc fb9e 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d04d      	beq.n	800d19e <app_key_set+0xb2>
	key = bt_mesh_app_key_find(app_idx);
 800d102:	4648      	mov	r0, r9
 800d104:	f7fd feb6 	bl	800ae74 <bt_mesh_app_key_find>
 800d108:	4604      	mov	r4, r0
	if (update) {
 800d10a:	f1ba 0f00 	cmp.w	sl, #0
 800d10e:	d026      	beq.n	800d15e <app_key_set+0x72>
		if (!key) {
 800d110:	2800      	cmp	r0, #0
 800d112:	d051      	beq.n	800d1b8 <app_key_set+0xcc>
		if (key->net_idx != net_idx) {
 800d114:	8803      	ldrh	r3, [r0, #0]
 800d116:	42b3      	cmp	r3, r6
 800d118:	d151      	bne.n	800d1be <app_key_set+0xd2>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
 800d11a:	7feb      	ldrb	r3, [r5, #31]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d002      	beq.n	800d126 <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
 800d120:	200b      	movs	r0, #11
 800d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
 800d126:	7902      	ldrb	r2, [r0, #4]
 800d128:	b14a      	cbz	r2, 800d13e <app_key_set+0x52>
			if (memcmp(keys->val, val, 16)) {
 800d12a:	2210      	movs	r2, #16
 800d12c:	4639      	mov	r1, r7
 800d12e:	3017      	adds	r0, #23
 800d130:	f7f3 fb91 	bl	8000856 <memcmp>
 800d134:	2800      	cmp	r0, #0
 800d136:	d1f3      	bne.n	800d120 <app_key_set+0x34>
				return STATUS_SUCCESS;
 800d138:	2000      	movs	r0, #0
 800d13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		keys = &key->keys[1];
 800d13e:	f100 0816 	add.w	r8, r0, #22
		key->updated = true;
 800d142:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
 800d144:	4641      	mov	r1, r8
 800d146:	4638      	mov	r0, r7
 800d148:	f7fe fde2 	bl	800bd10 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
 800d14c:	b350      	cbz	r0, 800d1a4 <app_key_set+0xb8>
		if (update) {
 800d14e:	f1ba 0f00 	cmp.w	sl, #0
 800d152:	d001      	beq.n	800d158 <app_key_set+0x6c>
			key->updated = false;
 800d154:	2300      	movs	r3, #0
 800d156:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
 800d158:	2009      	movs	r0, #9
 800d15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key) {
 800d15e:	b968      	cbnz	r0, 800d17c <app_key_set+0x90>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
 800d160:	4c1c      	ldr	r4, [pc, #112]	; (800d1d4 <app_key_set+0xe8>)
 800d162:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 800d166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d02a      	beq.n	800d1c4 <app_key_set+0xd8>
 800d16e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 800d172:	429a      	cmp	r2, r3
 800d174:	d02b      	beq.n	800d1ce <app_key_set+0xe2>
			return STATUS_INSUFF_RESOURCES;
 800d176:	2005      	movs	r0, #5
 800d178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (key->net_idx == net_idx &&
 800d17c:	8803      	ldrh	r3, [r0, #0]
 800d17e:	42b3      	cmp	r3, r6
 800d180:	d005      	beq.n	800d18e <app_key_set+0xa2>
			if (key->net_idx == net_idx) {
 800d182:	8823      	ldrh	r3, [r4, #0]
 800d184:	42b3      	cmp	r3, r6
 800d186:	d10a      	bne.n	800d19e <app_key_set+0xb2>
				return STATUS_IDX_ALREADY_STORED;
 800d188:	2006      	movs	r0, #6
 800d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			    !memcmp(key->keys[0].val, val, 16)) {
 800d18e:	2210      	movs	r2, #16
 800d190:	4639      	mov	r1, r7
 800d192:	3006      	adds	r0, #6
 800d194:	f7f3 fb5f 	bl	8000856 <memcmp>
			if (key->net_idx == net_idx &&
 800d198:	2800      	cmp	r0, #0
 800d19a:	d1f2      	bne.n	800d182 <app_key_set+0x96>
 800d19c:	e7cc      	b.n	800d138 <app_key_set+0x4c>
				return STATUS_INVALID_NETKEY;
 800d19e:	2004      	movs	r0, #4
 800d1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	key->net_idx = net_idx;
 800d1a4:	8026      	strh	r6, [r4, #0]
	key->app_idx = app_idx;
 800d1a6:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
 800d1aa:	2210      	movs	r2, #16
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	f108 0001 	add.w	r0, r8, #1
 800d1b2:	f7f3 fb65 	bl	8000880 <memcpy>
 800d1b6:	e7bf      	b.n	800d138 <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
 800d1b8:	2003      	movs	r0, #3
 800d1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return STATUS_INVALID_BINDING;
 800d1be:	2011      	movs	r0, #17
 800d1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800d1c4:	f504 74b2 	add.w	r4, r4, #356	; 0x164
		keys = &key->keys[0];
 800d1c8:	f104 0805 	add.w	r8, r4, #5
 800d1cc:	e7ba      	b.n	800d144 <app_key_set+0x58>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
 800d1ce:	f504 74c6 	add.w	r4, r4, #396	; 0x18c
 800d1d2:	e7f9      	b.n	800d1c8 <app_key_set+0xdc>
 800d1d4:	20005bd0 	.word	0x20005bd0

0800d1d8 <app_key_update>:
{
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	4614      	mov	r4, r2
 800d1de:	4605      	mov	r5, r0
 800d1e0:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d1e2:	2214      	movs	r2, #20
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	a803      	add	r0, sp, #12
 800d1e8:	f7f3 fb76 	bl	80008d8 <memset>
 800d1ec:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d1ee:	eb0d 0203 	add.w	r2, sp, r3
 800d1f2:	a902      	add	r1, sp, #8
 800d1f4:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d1f6:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d1fa:	f7ff ff21 	bl	800d040 <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d1fe:	a803      	add	r0, sp, #12
 800d200:	f248 0103 	movw	r1, #32771	; 0x8003
 800d204:	f7ff f996 	bl	800c534 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
 800d208:	2301      	movs	r3, #1
 800d20a:	6822      	ldr	r2, [r4, #0]
 800d20c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d210:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d214:	f7ff ff6a 	bl	800d0ec <app_key_set>
	net_buf_simple_add_u8(msg, status);
 800d218:	4601      	mov	r1, r0
 800d21a:	a803      	add	r0, sp, #12
 800d21c:	f004 fa85 	bl	801172a <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d220:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d224:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d228:	a803      	add	r0, sp, #12
 800d22a:	f7ff fb21 	bl	800c870 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d22e:	2300      	movs	r3, #0
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	aa03      	add	r2, sp, #12
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	f7ff f99e 	bl	800c578 <bt_mesh_model_send>
}
 800d23c:	b008      	add	sp, #32
 800d23e:	bd70      	pop	{r4, r5, r6, pc}

0800d240 <app_key_add>:
{
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	4614      	mov	r4, r2
 800d246:	4605      	mov	r5, r0
 800d248:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d24a:	2214      	movs	r2, #20
 800d24c:	2100      	movs	r1, #0
 800d24e:	a803      	add	r0, sp, #12
 800d250:	f7f3 fb42 	bl	80008d8 <memset>
 800d254:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d256:	eb0d 0203 	add.w	r2, sp, r3
 800d25a:	a902      	add	r1, sp, #8
 800d25c:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800d25e:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
 800d262:	f7ff feed 	bl	800d040 <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
 800d266:	a803      	add	r0, sp, #12
 800d268:	f248 0103 	movw	r1, #32771	; 0x8003
 800d26c:	f7ff f962 	bl	800c534 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
 800d270:	2300      	movs	r3, #0
 800d272:	6822      	ldr	r2, [r4, #0]
 800d274:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800d278:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800d27c:	f7ff ff36 	bl	800d0ec <app_key_set>
	net_buf_simple_add_u8(msg, status);
 800d280:	4601      	mov	r1, r0
 800d282:	a803      	add	r0, sp, #12
 800d284:	f004 fa51 	bl	801172a <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
 800d288:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d28c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d290:	a803      	add	r0, sp, #12
 800d292:	f7ff faed 	bl	800c870 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d296:	2300      	movs	r3, #0
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	aa03      	add	r2, sp, #12
 800d29c:	4631      	mov	r1, r6
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f7ff f96a 	bl	800c578 <bt_mesh_model_send>
}
 800d2a4:	b008      	add	sp, #32
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}

0800d2a8 <create_mod_app_status.isra.4>:
static void create_mod_app_status(struct net_buf_simple *msg,
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800d2b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
 800d2b6:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
 800d2ba:	4690      	mov	r8, r2
 800d2bc:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
 800d2be:	f7ff f939 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f004 fa30 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f004 fa34 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
 800d2d2:	4639      	mov	r1, r7
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f004 fa30 	bl	801173a <net_buf_simple_add_le16>
	if (vnd) {
 800d2da:	b14e      	cbz	r6, 800d2f0 <create_mod_app_status.isra.4+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800d2dc:	2104      	movs	r1, #4
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f004 fa14 	bl	801170c <net_buf_simple_add>
 800d2e4:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d2e6:	4629      	mov	r1, r5
}
 800d2e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d2ec:	f7f3 bac8 	b.w	8000880 <memcpy>
 800d2f0:	2102      	movs	r1, #2
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f004 fa0a 	bl	801170c <net_buf_simple_add>
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	e7f4      	b.n	800d2e6 <create_mod_app_status.isra.4+0x3e>

0800d2fc <send_mod_pub_status.isra.6>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d300:	b08a      	sub	sp, #40	; 0x28
 800d302:	4692      	mov	sl, r2
 800d304:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800d308:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 800d30c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d30e:	221c      	movs	r2, #28
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d310:	4606      	mov	r6, r0
 800d312:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d314:	a803      	add	r0, sp, #12
 800d316:	2100      	movs	r1, #0
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
 800d318:	4699      	mov	r9, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d31a:	f7f3 fadd 	bl	80008d8 <memset>
 800d31e:	2314      	movs	r3, #20
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
 800d320:	f248 0119 	movw	r1, #32793	; 0x8019
 800d324:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
 800d326:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
 800d32a:	f7ff f903 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d32e:	4629      	mov	r1, r5
 800d330:	a803      	add	r0, sp, #12
 800d332:	f004 f9fa 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d336:	4651      	mov	r1, sl
 800d338:	a803      	add	r0, sp, #12
 800d33a:	f004 f9fe 	bl	801173a <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
 800d33e:	b1e5      	cbz	r5, 800d37a <send_mod_pub_status.isra.6+0x7e>
		memset(net_buf_simple_add(msg, 7), 0, 7);
 800d340:	2107      	movs	r1, #7
 800d342:	a803      	add	r0, sp, #12
 800d344:	f004 f9e2 	bl	801170c <net_buf_simple_add>
 800d348:	2207      	movs	r2, #7
 800d34a:	2100      	movs	r1, #0
 800d34c:	f7f3 fac4 	bl	80008d8 <memset>
	if (vnd) {
 800d350:	f1b8 0f00 	cmp.w	r8, #0
 800d354:	d02f      	beq.n	800d3b6 <send_mod_pub_status.isra.6+0xba>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
 800d356:	2104      	movs	r1, #4
 800d358:	a803      	add	r0, sp, #12
 800d35a:	f004 f9d7 	bl	801170c <net_buf_simple_add>
 800d35e:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d360:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d362:	f7f3 fa8d 	bl	8000880 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, msg, NULL, NULL)) {
 800d366:	2300      	movs	r3, #0
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	aa03      	add	r2, sp, #12
 800d36c:	4639      	mov	r1, r7
 800d36e:	4630      	mov	r0, r6
 800d370:	f7ff f902 	bl	800c578 <bt_mesh_model_send>
}
 800d374:	b00a      	add	sp, #40	; 0x28
 800d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(msg, pub_addr);
 800d37a:	4649      	mov	r1, r9
 800d37c:	a803      	add	r0, sp, #12
 800d37e:	f004 f9dc 	bl	801173a <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
 800d382:	6822      	ldr	r2, [r4, #0]
 800d384:	7ad3      	ldrb	r3, [r2, #11]
 800d386:	88d1      	ldrh	r1, [r2, #6]
 800d388:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(msg, idx_cred);
 800d38c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800d390:	a803      	add	r0, sp, #12
 800d392:	f004 f9d2 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, mod->pub->ttl);
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	a803      	add	r0, sp, #12
 800d39a:	7a19      	ldrb	r1, [r3, #8]
 800d39c:	f004 f9c5 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->period);
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	a803      	add	r0, sp, #12
 800d3a4:	7a99      	ldrb	r1, [r3, #10]
 800d3a6:	f004 f9c0 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->retransmit);
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	a803      	add	r0, sp, #12
 800d3ae:	7a59      	ldrb	r1, [r3, #9]
 800d3b0:	f004 f9bb 	bl	801172a <net_buf_simple_add_u8>
 800d3b4:	e7cc      	b.n	800d350 <send_mod_pub_status.isra.6+0x54>
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
 800d3b6:	2102      	movs	r1, #2
 800d3b8:	a803      	add	r0, sp, #12
 800d3ba:	f004 f9a7 	bl	801170c <net_buf_simple_add>
 800d3be:	2202      	movs	r2, #2
 800d3c0:	e7ce      	b.n	800d360 <send_mod_pub_status.isra.6+0x64>

0800d3c2 <get_model>:
{
 800d3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
 800d3c4:	888b      	ldrh	r3, [r1, #4]
 800d3c6:	2b03      	cmp	r3, #3
{
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
 800d3ce:	4608      	mov	r0, r1
	if (buf->len < 4) {
 800d3d0:	d809      	bhi.n	800d3e6 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
 800d3d2:	f004 fa16 	bl	8011802 <net_buf_simple_pull_le16>
		*vnd = false;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
 800d3da:	4601      	mov	r1, r0
 800d3dc:	4628      	mov	r0, r5
}
 800d3de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
 800d3e2:	f7ff ba2a 	b.w	800c83a <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
 800d3e6:	f004 fa0c 	bl	8011802 <net_buf_simple_pull_le16>
 800d3ea:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f004 fa08 	bl	8011802 <net_buf_simple_pull_le16>
		*vnd = true;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	4639      	mov	r1, r7
 800d3fa:	4628      	mov	r0, r5
}
 800d3fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
 800d400:	f7ff ba04 	b.w	800c80c <bt_mesh_model_find_vnd>

0800d404 <mod_app_get>:
{
 800d404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d408:	b08b      	sub	sp, #44	; 0x2c
 800d40a:	4615      	mov	r5, r2
 800d40c:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d40e:	221c      	movs	r2, #28
{
 800d410:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d412:	a803      	add	r0, sp, #12
 800d414:	2100      	movs	r1, #0
 800d416:	f7f3 fa5f 	bl	80008d8 <memset>
 800d41a:	2311      	movs	r3, #17
	elem_addr = net_buf_simple_pull_le16(buf);
 800d41c:	4628      	mov	r0, r5
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
 800d41e:	f8ad 3012 	strh.w	r3, [sp, #18]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d422:	f004 f9ee 	bl	8011802 <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d426:	682e      	ldr	r6, [r5, #0]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d428:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d42a:	f7fe ffb3 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d42e:	4604      	mov	r4, r0
 800d430:	bb88      	cbnz	r0, 800d496 <mod_app_get+0x92>
		vnd = (buf->len == 4);
 800d432:	88ab      	ldrh	r3, [r5, #4]
 800d434:	1f1a      	subs	r2, r3, #4
 800d436:	4253      	negs	r3, r2
 800d438:	4153      	adcs	r3, r2
 800d43a:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
 800d43e:	2501      	movs	r5, #1
	if (vnd) {
 800d440:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d444:	b393      	cbz	r3, 800d4ac <mod_app_get+0xa8>
		bt_mesh_model_msg_init(msg, OP_VND_MOD_APP_LIST);
 800d446:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
 800d44a:	a803      	add	r0, sp, #12
 800d44c:	f7ff f872 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
 800d450:	4629      	mov	r1, r5
 800d452:	a803      	add	r0, sp, #12
 800d454:	f004 f969 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
 800d458:	4649      	mov	r1, r9
 800d45a:	a803      	add	r0, sp, #12
 800d45c:	f004 f96d 	bl	801173a <net_buf_simple_add_le16>
	if (vnd) {
 800d460:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d464:	b32b      	cbz	r3, 800d4b2 <mod_app_get+0xae>
		net_buf_simple_add_mem(msg, mod_id, 4);
 800d466:	2204      	movs	r2, #4
		net_buf_simple_add_mem(msg, mod_id, 2);
 800d468:	4631      	mov	r1, r6
 800d46a:	a803      	add	r0, sp, #12
 800d46c:	f004 f954 	bl	8011718 <net_buf_simple_add_mem>
	if (mod) {
 800d470:	b13c      	cbz	r4, 800d482 <mod_app_get+0x7e>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
 800d472:	89a1      	ldrh	r1, [r4, #12]
 800d474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d478:	4299      	cmp	r1, r3
 800d47a:	d002      	beq.n	800d482 <mod_app_get+0x7e>
				net_buf_simple_add_le16(msg, mod->keys[i]);
 800d47c:	a803      	add	r0, sp, #12
 800d47e:	f004 f95c 	bl	801173a <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800d482:	2300      	movs	r3, #0
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	aa03      	add	r2, sp, #12
 800d488:	4641      	mov	r1, r8
 800d48a:	4638      	mov	r0, r7
 800d48c:	f7ff f874 	bl	800c578 <bt_mesh_model_send>
}
 800d490:	b00b      	add	sp, #44	; 0x2c
 800d492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800d496:	4629      	mov	r1, r5
 800d498:	f10d 020b 	add.w	r2, sp, #11
 800d49c:	f7ff ff91 	bl	800d3c2 <get_model>
	status = STATUS_SUCCESS;
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	bf0c      	ite	eq
 800d4a6:	2502      	moveq	r5, #2
 800d4a8:	2500      	movne	r5, #0
 800d4aa:	e7c9      	b.n	800d440 <mod_app_get+0x3c>
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
 800d4ac:	f248 014c 	movw	r1, #32844	; 0x804c
 800d4b0:	e7cb      	b.n	800d44a <mod_app_get+0x46>
		net_buf_simple_add_mem(msg, mod_id, 2);
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	e7d8      	b.n	800d468 <mod_app_get+0x64>

0800d4b6 <mod_sub_del_all>:
{
 800d4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4be:	4610      	mov	r0, r2
{
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	460e      	mov	r6, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4c4:	f004 f99d 	bl	8011802 <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d4c8:	f8d4 8000 	ldr.w	r8, [r4]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d4cc:	4607      	mov	r7, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d4ce:	f7fe ff61 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d4d2:	b9a8      	cbnz	r0, 800d500 <mod_sub_del_all+0x4a>
		vnd = (buf->len == 4);
 800d4d4:	88a3      	ldrh	r3, [r4, #4]
 800d4d6:	1f1a      	subs	r2, r3, #4
 800d4d8:	4253      	negs	r3, r2
 800d4da:	4153      	adcs	r3, r2
 800d4dc:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d4e0:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
 800d4e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d4e6:	9302      	str	r3, [sp, #8]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	f8cd 8004 	str.w	r8, [sp, #4]
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff fba3 	bl	800cc40 <send_mod_sub_status>
}
 800d4fa:	b006      	add	sp, #24
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
 800d500:	f10d 0217 	add.w	r2, sp, #23
 800d504:	4621      	mov	r1, r4
 800d506:	f7ff ff5c 	bl	800d3c2 <get_model>
	if (!mod) {
 800d50a:	b130      	cbz	r0, 800d51a <mod_sub_del_all+0x64>
	memset(mod->groups, 0, sizeof(mod->groups));
 800d50c:	2204      	movs	r2, #4
 800d50e:	2100      	movs	r1, #0
 800d510:	300e      	adds	r0, #14
 800d512:	f7f3 f9e1 	bl	80008d8 <memset>
	status = STATUS_SUCCESS;
 800d516:	2200      	movs	r2, #0
 800d518:	e7e3      	b.n	800d4e2 <mod_sub_del_all+0x2c>
		status = STATUS_INVALID_MODEL;
 800d51a:	2202      	movs	r2, #2
 800d51c:	e7e1      	b.n	800d4e2 <mod_sub_del_all+0x2c>

0800d51e <mod_sub_overwrite>:
{
 800d51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d522:	4607      	mov	r7, r0
 800d524:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d526:	4610      	mov	r0, r2
{
 800d528:	4614      	mov	r4, r2
 800d52a:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d52c:	f004 f969 	bl	8011802 <net_buf_simple_pull_le16>
 800d530:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d532:	4620      	mov	r0, r4
 800d534:	f004 f965 	bl	8011802 <net_buf_simple_pull_le16>
 800d538:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d53a:	4630      	mov	r0, r6
	mod_id = buf->data;
 800d53c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800d540:	f7fe ff28 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d544:	b938      	cbnz	r0, 800d556 <mod_sub_overwrite+0x38>
		vnd = (buf->len == 4);
 800d546:	88a3      	ldrh	r3, [r4, #4]
 800d548:	1f1a      	subs	r2, r3, #4
 800d54a:	4253      	negs	r3, r2
 800d54c:	4153      	adcs	r3, r2
 800d54e:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d552:	2201      	movs	r2, #1
 800d554:	e013      	b.n	800d57e <mod_sub_overwrite+0x60>
	mod = get_model(elem, buf, &vnd);
 800d556:	4621      	mov	r1, r4
 800d558:	f10d 0217 	add.w	r2, sp, #23
 800d55c:	f7ff ff31 	bl	800d3c2 <get_model>
	if (!mod) {
 800d560:	4604      	mov	r4, r0
 800d562:	b1c8      	cbz	r0, 800d598 <mod_sub_overwrite+0x7a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d564:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
 800d568:	b29b      	uxth	r3, r3
 800d56a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d56e:	d8f0      	bhi.n	800d552 <mod_sub_overwrite+0x34>
	memset(mod->groups, 0, sizeof(mod->groups));
 800d570:	2204      	movs	r2, #4
 800d572:	2100      	movs	r1, #0
 800d574:	300e      	adds	r0, #14
 800d576:	f7f3 f9af 	bl	80008d8 <memset>
		mod->groups[0] = sub_addr;
 800d57a:	81e5      	strh	r5, [r4, #14]
		status = STATUS_SUCCESS;
 800d57c:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d57e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d582:	9302      	str	r3, [sp, #8]
 800d584:	e88d 0220 	stmia.w	sp, {r5, r9}
 800d588:	4633      	mov	r3, r6
 800d58a:	4641      	mov	r1, r8
 800d58c:	4638      	mov	r0, r7
 800d58e:	f7ff fb57 	bl	800cc40 <send_mod_sub_status>
}
 800d592:	b007      	add	sp, #28
 800d594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
 800d598:	2202      	movs	r2, #2
 800d59a:	e7f0      	b.n	800d57e <mod_sub_overwrite+0x60>

0800d59c <mod_pub_get>:
{
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d5a4:	4610      	mov	r0, r2
{
 800d5a6:	4690      	mov	r8, r2
 800d5a8:	460d      	mov	r5, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d5aa:	f004 f92a 	bl	8011802 <net_buf_simple_pull_le16>
	mod_id = buf->data;
 800d5ae:	f8d8 7000 	ldr.w	r7, [r8]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d5b2:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d5b4:	f7fe feee 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	b9b0      	cbnz	r0, 800d5ea <mod_pub_get+0x4e>
		vnd = (buf->len == 4);
 800d5bc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d5c0:	1f11      	subs	r1, r2, #4
 800d5c2:	424a      	negs	r2, r1
 800d5c4:	414a      	adcs	r2, r1
 800d5c6:	f88d 2017 	strb.w	r2, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d5ca:	2201      	movs	r2, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800d5cc:	9202      	str	r2, [sp, #8]
 800d5ce:	3008      	adds	r0, #8
 800d5d0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d5d4:	9001      	str	r0, [sp, #4]
 800d5d6:	9200      	str	r2, [sp, #0]
 800d5d8:	9703      	str	r7, [sp, #12]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff fe8c 	bl	800d2fc <send_mod_pub_status.isra.6>
}
 800d5e4:	b006      	add	sp, #24
 800d5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
 800d5ea:	f10d 0217 	add.w	r2, sp, #23
 800d5ee:	4641      	mov	r1, r8
 800d5f0:	f7ff fee7 	bl	800d3c2 <get_model>
	if (!mod) {
 800d5f4:	b120      	cbz	r0, 800d600 <mod_pub_get+0x64>
	if (!mod->pub) {
 800d5f6:	6883      	ldr	r3, [r0, #8]
 800d5f8:	b12b      	cbz	r3, 800d606 <mod_pub_get+0x6a>
	pub_addr = mod->pub->addr;
 800d5fa:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	e7e5      	b.n	800d5cc <mod_pub_get+0x30>
		status = STATUS_INVALID_MODEL;
 800d600:	2202      	movs	r2, #2
	u16_t elem_addr, pub_addr = 0;
 800d602:	4603      	mov	r3, r0
 800d604:	e7e2      	b.n	800d5cc <mod_pub_get+0x30>
		status = STATUS_NVAL_PUB_PARAM;
 800d606:	2207      	movs	r2, #7
 800d608:	e7e0      	b.n	800d5cc <mod_pub_get+0x30>
	...

0800d60c <mod_sub_va_del>:
{
 800d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	4607      	mov	r7, r0
 800d612:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d614:	4610      	mov	r0, r2
{
 800d616:	4614      	mov	r4, r2
 800d618:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d61a:	f004 f8f2 	bl	8011802 <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800d61e:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800d620:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
 800d622:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800d624:	f8d4 a000 	ldr.w	sl, [r4]
	net_buf_simple_pull(buf, 16);
 800d628:	f004 f8db 	bl	80117e2 <net_buf_simple_pull>
	mod_id = buf->data;
 800d62c:	6823      	ldr	r3, [r4, #0]
 800d62e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
 800d630:	4630      	mov	r0, r6
 800d632:	f7fe feaf 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d636:	4605      	mov	r5, r0
 800d638:	b9a0      	cbnz	r0, 800d664 <mod_sub_va_del+0x58>
		vnd = (buf->len == 4);
 800d63a:	88a3      	ldrh	r3, [r4, #4]
 800d63c:	1f1a      	subs	r2, r3, #4
 800d63e:	4253      	negs	r3, r2
 800d640:	4153      	adcs	r3, r2
 800d642:	f88d 301f 	strb.w	r3, [sp, #31]
		status = STATUS_INVALID_ADDRESS;
 800d646:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d648:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d64c:	9302      	str	r3, [sp, #8]
 800d64e:	9b05      	ldr	r3, [sp, #20]
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	9500      	str	r5, [sp, #0]
 800d654:	4633      	mov	r3, r6
 800d656:	4641      	mov	r1, r8
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff faf1 	bl	800cc40 <send_mod_sub_status>
}
 800d65e:	b009      	add	sp, #36	; 0x24
 800d660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800d664:	f10d 021f 	add.w	r2, sp, #31
 800d668:	4621      	mov	r1, r4
 800d66a:	f7ff feaa 	bl	800d3c2 <get_model>
	if (!mod) {
 800d66e:	4683      	mov	fp, r0
 800d670:	b330      	cbz	r0, 800d6c0 <mod_sub_va_del+0xb4>
 800d672:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800d6cc <mod_sub_va_del+0xc0>
 800d676:	2500      	movs	r5, #0
		if (!BT_MESH_ADDR_IS_VIRTUAL(labels[i].addr)) {
 800d678:	f839 2c02 	ldrh.w	r2, [r9, #-2]
 800d67c:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 800d680:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d684:	d20e      	bcs.n	800d6a4 <mod_sub_va_del+0x98>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
 800d686:	2210      	movs	r2, #16
 800d688:	4651      	mov	r1, sl
 800d68a:	4648      	mov	r0, r9
 800d68c:	f7f3 f8e3 	bl	8000856 <memcmp>
 800d690:	4604      	mov	r4, r0
 800d692:	b938      	cbnz	r0, 800d6a4 <mod_sub_va_del+0x98>
			return labels[i].addr;
 800d694:	2312      	movs	r3, #18
 800d696:	435d      	muls	r5, r3
 800d698:	4b0b      	ldr	r3, [pc, #44]	; (800d6c8 <mod_sub_va_del+0xbc>)
 800d69a:	5b5d      	ldrh	r5, [r3, r5]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d69c:	b945      	cbnz	r5, 800d6b0 <mod_sub_va_del+0xa4>
		status = STATUS_CANNOT_REMOVE;
 800d69e:	220c      	movs	r2, #12
 800d6a0:	2500      	movs	r5, #0
 800d6a2:	e7d1      	b.n	800d648 <mod_sub_va_del+0x3c>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	2d03      	cmp	r5, #3
 800d6a8:	f109 0912 	add.w	r9, r9, #18
 800d6ac:	d1e4      	bne.n	800d678 <mod_sub_va_del+0x6c>
 800d6ae:	e7f6      	b.n	800d69e <mod_sub_va_del+0x92>
	match = bt_mesh_model_find_group(mod, sub_addr);
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4658      	mov	r0, fp
 800d6b4:	f7fe fe34 	bl	800c320 <bt_mesh_model_find_group>
	if (match) {
 800d6b8:	b120      	cbz	r0, 800d6c4 <mod_sub_va_del+0xb8>
		*match = BT_MESH_ADDR_UNASSIGNED;
 800d6ba:	8004      	strh	r4, [r0, #0]
		status = STATUS_SUCCESS;
 800d6bc:	4622      	mov	r2, r4
 800d6be:	e7c3      	b.n	800d648 <mod_sub_va_del+0x3c>
		status = STATUS_INVALID_MODEL;
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	e7ed      	b.n	800d6a0 <mod_sub_va_del+0x94>
		status = STATUS_CANNOT_REMOVE;
 800d6c4:	220c      	movs	r2, #12
 800d6c6:	e7bf      	b.n	800d648 <mod_sub_va_del+0x3c>
 800d6c8:	20000d7c 	.word	0x20000d7c
 800d6cc:	20000d7e 	.word	0x20000d7e

0800d6d0 <mod_sub_del>:
{
 800d6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d6d8:	4610      	mov	r0, r2
{
 800d6da:	4614      	mov	r4, r2
 800d6dc:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d6de:	f004 f890 	bl	8011802 <net_buf_simple_pull_le16>
 800d6e2:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f004 f88c 	bl	8011802 <net_buf_simple_pull_le16>
 800d6ea:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d6ec:	4630      	mov	r0, r6
	mod_id = buf->data;
 800d6ee:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800d6f2:	f7fe fe4f 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d6f6:	b938      	cbnz	r0, 800d708 <mod_sub_del+0x38>
		vnd = (buf->len == 4);
 800d6f8:	88a3      	ldrh	r3, [r4, #4]
 800d6fa:	1f1a      	subs	r2, r3, #4
 800d6fc:	4253      	negs	r3, r2
 800d6fe:	4153      	adcs	r3, r2
 800d700:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d704:	2201      	movs	r2, #1
 800d706:	e011      	b.n	800d72c <mod_sub_del+0x5c>
	mod = get_model(elem, buf, &vnd);
 800d708:	f10d 0217 	add.w	r2, sp, #23
 800d70c:	4621      	mov	r1, r4
 800d70e:	f7ff fe58 	bl	800d3c2 <get_model>
	if (!mod) {
 800d712:	b1c0      	cbz	r0, 800d746 <mod_sub_del+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d714:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
 800d718:	b29b      	uxth	r3, r3
 800d71a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d71e:	d8f1      	bhi.n	800d704 <mod_sub_del+0x34>
	match = bt_mesh_model_find_group(mod, sub_addr);
 800d720:	4629      	mov	r1, r5
 800d722:	f7fe fdfd 	bl	800c320 <bt_mesh_model_find_group>
 800d726:	2200      	movs	r2, #0
	if (match) {
 800d728:	b178      	cbz	r0, 800d74a <mod_sub_del+0x7a>
		*match = BT_MESH_ADDR_UNASSIGNED;
 800d72a:	8002      	strh	r2, [r0, #0]
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d72c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d730:	9302      	str	r3, [sp, #8]
 800d732:	e88d 0220 	stmia.w	sp, {r5, r9}
 800d736:	4633      	mov	r3, r6
 800d738:	4641      	mov	r1, r8
 800d73a:	4638      	mov	r0, r7
 800d73c:	f7ff fa80 	bl	800cc40 <send_mod_sub_status>
}
 800d740:	b007      	add	sp, #28
 800d742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
 800d746:	2202      	movs	r2, #2
 800d748:	e7f0      	b.n	800d72c <mod_sub_del+0x5c>
	status = STATUS_SUCCESS;
 800d74a:	4602      	mov	r2, r0
 800d74c:	e7ee      	b.n	800d72c <mod_sub_del+0x5c>

0800d74e <mod_sub_add>:
{
 800d74e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d752:	4606      	mov	r6, r0
 800d754:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800d756:	4610      	mov	r0, r2
{
 800d758:	4691      	mov	r9, r2
 800d75a:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d75c:	f004 f851 	bl	8011802 <net_buf_simple_pull_le16>
 800d760:	4605      	mov	r5, r0
	sub_addr = net_buf_simple_pull_le16(buf);
 800d762:	4648      	mov	r0, r9
 800d764:	f004 f84d 	bl	8011802 <net_buf_simple_pull_le16>
 800d768:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d76a:	4628      	mov	r0, r5
	mod_id = buf->data;
 800d76c:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
 800d770:	f7fe fe10 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d774:	b940      	cbnz	r0, 800d788 <mod_sub_add+0x3a>
		vnd = (buf->len == 4);
 800d776:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800d77a:	1f1a      	subs	r2, r3, #4
 800d77c:	4253      	negs	r3, r2
 800d77e:	4153      	adcs	r3, r2
 800d780:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
 800d784:	2201      	movs	r2, #1
 800d786:	e01e      	b.n	800d7c6 <mod_sub_add+0x78>
	mod = get_model(elem, buf, &vnd);
 800d788:	4649      	mov	r1, r9
 800d78a:	f10d 0217 	add.w	r2, sp, #23
 800d78e:	f7ff fe18 	bl	800d3c2 <get_model>
	if (!mod) {
 800d792:	4681      	mov	r9, r0
 800d794:	b1b0      	cbz	r0, 800d7c4 <mod_sub_add+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
 800d796:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 800d7a0:	d8f0      	bhi.n	800d784 <mod_sub_add+0x36>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	f7fe fdbc 	bl	800c320 <bt_mesh_model_find_group>
 800d7a8:	b950      	cbnz	r0, 800d7c0 <mod_sub_add+0x72>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800d7aa:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800d7ae:	b11b      	cbz	r3, 800d7b8 <mod_sub_add+0x6a>
 800d7b0:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800d7b4:	b9a3      	cbnz	r3, 800d7e0 <mod_sub_add+0x92>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800d7b6:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 800d7be:	80dc      	strh	r4, [r3, #6]
		status = STATUS_SUCCESS;
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	e000      	b.n	800d7c6 <mod_sub_add+0x78>
		status = STATUS_INVALID_MODEL;
 800d7c4:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800d7c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800d7ca:	9302      	str	r3, [sp, #8]
 800d7cc:	e88d 0110 	stmia.w	sp, {r4, r8}
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	f7ff fa33 	bl	800cc40 <send_mod_sub_status>
}
 800d7da:	b007      	add	sp, #28
 800d7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
 800d7e0:	2205      	movs	r2, #5
 800d7e2:	e7f0      	b.n	800d7c6 <mod_sub_add+0x78>

0800d7e4 <_mod_pub_set>:
{
 800d7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e8:	4605      	mov	r5, r0
	if (!model->pub) {
 800d7ea:	6880      	ldr	r0, [r0, #8]
{
 800d7ec:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800d7f0:	460e      	mov	r6, r1
 800d7f2:	4617      	mov	r7, r2
 800d7f4:	461c      	mov	r4, r3
	if (!model->pub) {
 800d7f6:	b380      	cbz	r0, 800d85a <_mod_pub_set+0x76>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
 800d7f8:	bb6b      	cbnz	r3, 800d856 <_mod_pub_set+0x72>
	if (!model->pub->update && period) {
 800d7fa:	6943      	ldr	r3, [r0, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d13c      	bne.n	800d87a <_mod_pub_set+0x96>
 800d800:	f1b8 0f00 	cmp.w	r8, #0
 800d804:	d129      	bne.n	800d85a <_mod_pub_set+0x76>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d806:	b361      	cbz	r1, 800d862 <_mod_pub_set+0x7e>
	if (!bt_mesh_app_key_find(app_idx)) {
 800d808:	4638      	mov	r0, r7
 800d80a:	f7fd fb33 	bl	800ae74 <bt_mesh_app_key_find>
 800d80e:	b330      	cbz	r0, 800d85e <_mod_pub_set+0x7a>
	model->pub->addr = pub_addr;
 800d810:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
 800d812:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
 800d814:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
 800d816:	f36f 1204 	bfc	r2, #4, #1
 800d81a:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
 800d81c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800d820:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
 800d822:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->key = app_idx;
 800d826:	80df      	strh	r7, [r3, #6]
	model->pub->period = period;
 800d828:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
 800d82c:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
 800d82e:	695b      	ldr	r3, [r3, #20]
 800d830:	b14b      	cbz	r3, 800d846 <_mod_pub_set+0x62>
		period_ms = bt_mesh_model_pub_period_get(model);
 800d832:	4628      	mov	r0, r5
 800d834:	f7fe fcf2 	bl	800c21c <bt_mesh_model_pub_period_get>
 800d838:	68a9      	ldr	r1, [r5, #8]
		if (period_ms) {
 800d83a:	4602      	mov	r2, r0
 800d83c:	b130      	cbz	r0, 800d84c <_mod_pub_set+0x68>
 800d83e:	3118      	adds	r1, #24
 800d840:	4815      	ldr	r0, [pc, #84]	; (800d898 <_mod_pub_set+0xb4>)
 800d842:	f004 ff59 	bl	80126f8 <k_delayed_work_submit_to_queue>
}
 800d846:	4620      	mov	r0, r4
 800d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			k_delayed_work_cancel(&model->pub->timer);
 800d84c:	f101 0018 	add.w	r0, r1, #24
			k_delayed_work_cancel(&model->pub->timer);
 800d850:	f004 ff06 	bl	8012660 <k_delayed_work_cancel>
 800d854:	e7f7      	b.n	800d846 <_mod_pub_set+0x62>
		return STATUS_FEAT_NOT_SUPP;
 800d856:	240a      	movs	r4, #10
 800d858:	e7f5      	b.n	800d846 <_mod_pub_set+0x62>
		return STATUS_NVAL_PUB_PARAM;
 800d85a:	2407      	movs	r4, #7
 800d85c:	e7f3      	b.n	800d846 <_mod_pub_set+0x62>
		return STATUS_INVALID_APPKEY;
 800d85e:	2403      	movs	r4, #3
 800d860:	e7f1      	b.n	800d846 <_mod_pub_set+0x62>
		model->pub->cred = 0;
 800d862:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
 800d864:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
 800d866:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
 800d86a:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
 800d86e:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
 800d870:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
 800d872:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
 800d874:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
 800d876:	72c3      	strb	r3, [r0, #11]
 800d878:	e7e5      	b.n	800d846 <_mod_pub_set+0x62>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
 800d87a:	2900      	cmp	r1, #0
 800d87c:	d1c4      	bne.n	800d808 <_mod_pub_set+0x24>
		model->pub->cred = 0;
 800d87e:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
 800d880:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
 800d882:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
 800d886:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
 800d88a:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
 800d88c:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
 800d88e:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
 800d890:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
 800d892:	72c3      	strb	r3, [r0, #11]
			k_delayed_work_cancel(&model->pub->timer);
 800d894:	3018      	adds	r0, #24
 800d896:	e7db      	b.n	800d850 <_mod_pub_set+0x6c>
 800d898:	20001480 	.word	0x20001480

0800d89c <mod_pub_set>:
{
 800d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a0:	4681      	mov	r9, r0
 800d8a2:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800d8a4:	4610      	mov	r0, r2
{
 800d8a6:	4614      	mov	r4, r2
 800d8a8:	468a      	mov	sl, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800d8aa:	f003 ffaa 	bl	8011802 <net_buf_simple_pull_le16>
 800d8ae:	4605      	mov	r5, r0
	pub_addr = net_buf_simple_pull_le16(buf);
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f003 ffa6 	bl	8011802 <net_buf_simple_pull_le16>
 800d8b6:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f003 ffa2 	bl	8011802 <net_buf_simple_pull_le16>
 800d8be:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f003 ff96 	bl	80117f2 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800d8c6:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
 800d8ce:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800d8d0:	d923      	bls.n	800d91a <mod_pub_set+0x7e>
	pub_period = net_buf_simple_pull_u8(buf);
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f003 ff8d 	bl	80117f2 <net_buf_simple_pull_u8>
 800d8d8:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f003 ff89 	bl	80117f2 <net_buf_simple_pull_u8>
	mod_id = buf->data;
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
 800d8e4:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7fe fd54 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d8ec:	b9c0      	cbnz	r0, 800d920 <mod_pub_set+0x84>
		vnd = (buf->len == 4);
 800d8ee:	88a3      	ldrh	r3, [r4, #4]
 800d8f0:	1f19      	subs	r1, r3, #4
 800d8f2:	424b      	negs	r3, r1
 800d8f4:	414b      	adcs	r3, r1
		mod = NULL;
 800d8f6:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
 800d8f8:	f88d 301f 	strb.w	r3, [sp, #31]
		status = STATUS_INVALID_ADDRESS;
 800d8fc:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	9303      	str	r3, [sp, #12]
 800d902:	3408      	adds	r4, #8
 800d904:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d908:	9002      	str	r0, [sp, #8]
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	9401      	str	r4, [sp, #4]
 800d90e:	4633      	mov	r3, r6
 800d910:	462a      	mov	r2, r5
 800d912:	4651      	mov	r1, sl
 800d914:	4648      	mov	r0, r9
 800d916:	f7ff fcf1 	bl	800d2fc <send_mod_pub_status.isra.6>
}
 800d91a:	b009      	add	sp, #36	; 0x24
 800d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800d920:	4621      	mov	r1, r4
 800d922:	f10d 021f 	add.w	r2, sp, #31
 800d926:	f7ff fd4c 	bl	800d3c2 <get_model>
	if (!mod) {
 800d92a:	4604      	mov	r4, r0
 800d92c:	b168      	cbz	r0, 800d94a <mod_pub_set+0xae>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
 800d92e:	9b05      	ldr	r3, [sp, #20]
 800d930:	9301      	str	r3, [sp, #4]
 800d932:	f8cd b008 	str.w	fp, [sp, #8]
 800d936:	f8cd 8000 	str.w	r8, [sp]
 800d93a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800d93e:	f3c7 020b 	ubfx	r2, r7, #0, #12
 800d942:	4631      	mov	r1, r6
 800d944:	f7ff ff4e 	bl	800d7e4 <_mod_pub_set>
 800d948:	e7d9      	b.n	800d8fe <mod_pub_set+0x62>
		status = STATUS_INVALID_MODEL;
 800d94a:	2002      	movs	r0, #2
 800d94c:	e7d7      	b.n	800d8fe <mod_pub_set+0x62>
	...

0800d950 <mod_unbind>:
{
 800d950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800d952:	4b19      	ldr	r3, [pc, #100]	; (800d9b8 <mod_unbind+0x68>)
 800d954:	f8b3 4164 	ldrh.w	r4, [r3, #356]	; 0x164
 800d958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d95c:	4294      	cmp	r4, r2
 800d95e:	d003      	beq.n	800d968 <mod_unbind+0x18>
 800d960:	f8b3 2166 	ldrh.w	r2, [r3, #358]	; 0x166
 800d964:	428a      	cmp	r2, r1
 800d966:	d010      	beq.n	800d98a <mod_unbind+0x3a>
 800d968:	f8b3 418c 	ldrh.w	r4, [r3, #396]	; 0x18c
 800d96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d970:	4294      	cmp	r4, r2
 800d972:	d003      	beq.n	800d97c <mod_unbind+0x2c>
 800d974:	f8b3 318e 	ldrh.w	r3, [r3, #398]	; 0x18e
 800d978:	428b      	cmp	r3, r1
 800d97a:	d006      	beq.n	800d98a <mod_unbind+0x3a>
		return STATUS_INVALID_APPKEY;
 800d97c:	2003      	movs	r0, #3
}
 800d97e:	b004      	add	sp, #16
 800d980:	bd10      	pop	{r4, pc}
		return STATUS_SUCCESS;
 800d982:	4618      	mov	r0, r3
 800d984:	e7fb      	b.n	800d97e <mod_unbind+0x2e>
	return STATUS_CANNOT_BIND;
 800d986:	200d      	movs	r0, #13
 800d988:	e7f9      	b.n	800d97e <mod_unbind+0x2e>
		if (model->keys[i] != key_idx) {
 800d98a:	8983      	ldrh	r3, [r0, #12]
 800d98c:	428b      	cmp	r3, r1
 800d98e:	d1fa      	bne.n	800d986 <mod_unbind+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
 800d990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d994:	8183      	strh	r3, [r0, #12]
		if (model->pub && model->pub->key == key_idx) {
 800d996:	6883      	ldr	r3, [r0, #8]
 800d998:	2400      	movs	r4, #0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f1      	beq.n	800d982 <mod_unbind+0x32>
 800d99e:	88db      	ldrh	r3, [r3, #6]
 800d9a0:	428b      	cmp	r3, r1
 800d9a2:	d107      	bne.n	800d9b4 <mod_unbind+0x64>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
 800d9a4:	9402      	str	r4, [sp, #8]
 800d9a6:	9401      	str	r4, [sp, #4]
 800d9a8:	9400      	str	r4, [sp, #0]
 800d9aa:	4623      	mov	r3, r4
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	f7ff ff18 	bl	800d7e4 <_mod_pub_set>
		return STATUS_SUCCESS;
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	e7e2      	b.n	800d97e <mod_unbind+0x2e>
 800d9b8:	20005bd0 	.word	0x20005bd0

0800d9bc <mod_app_unbind>:
{
 800d9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9c0:	b08b      	sub	sp, #44	; 0x2c
 800d9c2:	4614      	mov	r4, r2
 800d9c4:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800d9c6:	2218      	movs	r2, #24
{
 800d9c8:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800d9ca:	a804      	add	r0, sp, #16
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	f7f2 ff83 	bl	80008d8 <memset>
 800d9d2:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
 800d9d4:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800d9d6:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800d9da:	f003 ff12 	bl	8011802 <net_buf_simple_pull_le16>
 800d9de:	4605      	mov	r5, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f003 ff0e 	bl	8011802 <net_buf_simple_pull_le16>
 800d9e6:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
 800d9e8:	4628      	mov	r0, r5
	mod_id = buf->data;
 800d9ea:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800d9ee:	f7fe fcd1 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800d9f2:	b9c8      	cbnz	r0, 800da28 <mod_app_unbind+0x6c>
		vnd = (buf->len == 4);
 800d9f4:	88a3      	ldrh	r3, [r4, #4]
 800d9f6:	1f1a      	subs	r2, r3, #4
 800d9f8:	4253      	negs	r3, r2
 800d9fa:	4153      	adcs	r3, r2
 800d9fc:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
 800da00:	2001      	movs	r0, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
 800da02:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800da06:	e88d 0201 	stmia.w	sp, {r0, r9}
 800da0a:	4633      	mov	r3, r6
 800da0c:	462a      	mov	r2, r5
 800da0e:	a804      	add	r0, sp, #16
 800da10:	f7ff fc4a 	bl	800d2a8 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800da14:	2300      	movs	r3, #0
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	aa04      	add	r2, sp, #16
 800da1a:	4641      	mov	r1, r8
 800da1c:	4638      	mov	r0, r7
 800da1e:	f7fe fdab 	bl	800c578 <bt_mesh_model_send>
}
 800da22:	b00b      	add	sp, #44	; 0x2c
 800da24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800da28:	f10d 020f 	add.w	r2, sp, #15
 800da2c:	4621      	mov	r1, r4
 800da2e:	f7ff fcc8 	bl	800d3c2 <get_model>
	if (!mod) {
 800da32:	b118      	cbz	r0, 800da3c <mod_app_unbind+0x80>
	status = mod_unbind(mod, key_app_idx);
 800da34:	4631      	mov	r1, r6
 800da36:	f7ff ff8b 	bl	800d950 <mod_unbind>
 800da3a:	e7e2      	b.n	800da02 <mod_app_unbind+0x46>
		status = STATUS_INVALID_MODEL;
 800da3c:	2002      	movs	r0, #2
 800da3e:	e7e0      	b.n	800da02 <mod_app_unbind+0x46>

0800da40 <_mod_unbind>:
	mod_unbind(mod, *key_idx);
 800da40:	9b00      	ldr	r3, [sp, #0]
 800da42:	8819      	ldrh	r1, [r3, #0]
 800da44:	f7ff bf84 	b.w	800d950 <mod_unbind>

0800da48 <dev_comp_data_get>:
{
 800da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	b0b9      	sub	sp, #228	; 0xe4
 800da4e:	4614      	mov	r4, r2
 800da50:	4680      	mov	r8, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800da52:	22d4      	movs	r2, #212	; 0xd4
{
 800da54:	4689      	mov	r9, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800da56:	a803      	add	r0, sp, #12
 800da58:	2100      	movs	r1, #0
 800da5a:	f7f2 ff3d 	bl	80008d8 <memset>
 800da5e:	23cc      	movs	r3, #204	; 0xcc
	page = net_buf_simple_pull_u8(buf);
 800da60:	4620      	mov	r0, r4
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800da62:	f8ad 3012 	strh.w	r3, [sp, #18]
	page = net_buf_simple_pull_u8(buf);
 800da66:	f003 fec4 	bl	80117f2 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(sdu, OP_DEV_COMP_DATA_STATUS);
 800da6a:	2102      	movs	r1, #2
 800da6c:	a803      	add	r0, sp, #12
 800da6e:	f7fe fd61 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(sdu, page);
 800da72:	2100      	movs	r1, #0
 800da74:	a803      	add	r0, sp, #12
 800da76:	f003 fe58 	bl	801172a <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
 800da7a:	f7fe fef3 	bl	800c864 <bt_mesh_comp_get>
 800da7e:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
 800da80:	8801      	ldrh	r1, [r0, #0]
 800da82:	a803      	add	r0, sp, #12
 800da84:	f003 fe59 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
 800da88:	8869      	ldrh	r1, [r5, #2]
 800da8a:	a803      	add	r0, sp, #12
 800da8c:	f003 fe55 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
 800da90:	88a9      	ldrh	r1, [r5, #4]
 800da92:	a803      	add	r0, sp, #12
 800da94:	f003 fe51 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
 800da98:	210a      	movs	r1, #10
 800da9a:	a803      	add	r0, sp, #12
 800da9c:	f003 fe4d 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
 800daa0:	2107      	movs	r1, #7
 800daa2:	a803      	add	r0, sp, #12
 800daa4:	f003 fe49 	bl	801173a <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
 800daa8:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
 800daaa:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
 800daac:	68ab      	ldr	r3, [r5, #8]
 800daae:	429e      	cmp	r6, r3
 800dab0:	d309      	bcc.n	800dac6 <dev_comp_data_get+0x7e>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
 800dab2:	2300      	movs	r3, #0
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	aa03      	add	r2, sp, #12
 800dab8:	4649      	mov	r1, r9
 800daba:	4640      	mov	r0, r8
 800dabc:	f7fe fd5c 	bl	800c578 <bt_mesh_model_send>
}
 800dac0:	b039      	add	sp, #228	; 0xe4
 800dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
 800dac6:	68ec      	ldr	r4, [r5, #12]
 800dac8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
 800dacc:	a803      	add	r0, sp, #12
 800dace:	f003 fec2 	bl	8011856 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
 800dad2:	7923      	ldrb	r3, [r4, #4]
 800dad4:	7962      	ldrb	r2, [r4, #5]
 800dad6:	3302      	adds	r3, #2
 800dad8:	4413      	add	r3, r2
	if (net_buf_simple_tailroom(buf) <
 800dada:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800dade:	d3ef      	bcc.n	800dac0 <dev_comp_data_get+0x78>
	net_buf_simple_add_le16(buf, elem->loc);
 800dae0:	8861      	ldrh	r1, [r4, #2]
 800dae2:	a803      	add	r0, sp, #12
 800dae4:	f003 fe29 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
 800dae8:	7921      	ldrb	r1, [r4, #4]
 800daea:	a803      	add	r0, sp, #12
 800daec:	f003 fe1d 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
 800daf0:	7961      	ldrb	r1, [r4, #5]
 800daf2:	a803      	add	r0, sp, #12
 800daf4:	f003 fe19 	bl	801172a <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
 800daf8:	f04f 0a00 	mov.w	sl, #0
 800dafc:	7923      	ldrb	r3, [r4, #4]
 800dafe:	459a      	cmp	sl, r3
 800db00:	db06      	blt.n	800db10 <dev_comp_data_get+0xc8>
 800db02:	f04f 0a00 	mov.w	sl, #0
	for (i = 0; i < elem->vnd_model_count; i++) {
 800db06:	7963      	ldrb	r3, [r4, #5]
 800db08:	459a      	cmp	sl, r3
 800db0a:	db0b      	blt.n	800db24 <dev_comp_data_get+0xdc>
	for (i = 0; i < comp->elem_count; i++) {
 800db0c:	3601      	adds	r6, #1
 800db0e:	e7cd      	b.n	800daac <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
 800db10:	fb07 f30a 	mul.w	r3, r7, sl
 800db14:	68a2      	ldr	r2, [r4, #8]
 800db16:	a803      	add	r0, sp, #12
 800db18:	5ad1      	ldrh	r1, [r2, r3]
 800db1a:	f003 fe0e 	bl	801173a <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
 800db1e:	f10a 0a01 	add.w	sl, sl, #1
 800db22:	e7eb      	b.n	800dafc <dev_comp_data_get+0xb4>
		mod = &elem->vnd_models[i];
 800db24:	68e2      	ldr	r2, [r4, #12]
 800db26:	fb07 f30a 	mul.w	r3, r7, sl
 800db2a:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
 800db2e:	5ad1      	ldrh	r1, [r2, r3]
 800db30:	a803      	add	r0, sp, #12
 800db32:	f003 fe02 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
 800db36:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 800db3a:	a803      	add	r0, sp, #12
 800db3c:	f003 fdfd 	bl	801173a <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
 800db40:	f10a 0a01 	add.w	sl, sl, #1
 800db44:	e7df      	b.n	800db06 <dev_comp_data_get+0xbe>
	...

0800db48 <mod_app_bind>:
{
 800db48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db4c:	b08b      	sub	sp, #44	; 0x2c
 800db4e:	4691      	mov	r9, r2
 800db50:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800db52:	2218      	movs	r2, #24
{
 800db54:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800db56:	a804      	add	r0, sp, #16
 800db58:	2100      	movs	r1, #0
 800db5a:	f7f2 febd 	bl	80008d8 <memset>
 800db5e:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
 800db60:	4648      	mov	r0, r9
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800db62:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800db66:	f003 fe4c 	bl	8011802 <net_buf_simple_pull_le16>
 800db6a:	4605      	mov	r5, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
 800db6c:	4648      	mov	r0, r9
 800db6e:	f003 fe48 	bl	8011802 <net_buf_simple_pull_le16>
 800db72:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
 800db74:	4628      	mov	r0, r5
	mod_id = buf->data;
 800db76:	f8d9 7000 	ldr.w	r7, [r9]
	elem = bt_mesh_elem_find(elem_addr);
 800db7a:	f7fe fc0b 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800db7e:	b9d0      	cbnz	r0, 800dbb6 <mod_app_bind+0x6e>
		vnd = (buf->len == 4);
 800db80:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800db84:	1f1a      	subs	r2, r3, #4
 800db86:	4253      	negs	r3, r2
 800db88:	4153      	adcs	r3, r2
 800db8a:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
 800db8e:	2201      	movs	r2, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
 800db90:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800db94:	e88d 0084 	stmia.w	sp, {r2, r7}
 800db98:	4623      	mov	r3, r4
 800db9a:	462a      	mov	r2, r5
 800db9c:	a804      	add	r0, sp, #16
 800db9e:	f7ff fb83 	bl	800d2a8 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800dba2:	2300      	movs	r3, #0
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	aa04      	add	r2, sp, #16
 800dba8:	4641      	mov	r1, r8
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7fe fce4 	bl	800c578 <bt_mesh_model_send>
}
 800dbb0:	b00b      	add	sp, #44	; 0x2c
 800dbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800dbb6:	f10d 020f 	add.w	r2, sp, #15
 800dbba:	4649      	mov	r1, r9
 800dbbc:	f7ff fc01 	bl	800d3c2 <get_model>
	if (!mod) {
 800dbc0:	b1c0      	cbz	r0, 800dbf4 <mod_app_bind+0xac>
	if (model == mod) {
 800dbc2:	42b0      	cmp	r0, r6
 800dbc4:	d018      	beq.n	800dbf8 <mod_app_bind+0xb0>
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
 800dbc6:	4a13      	ldr	r2, [pc, #76]	; (800dc14 <mod_app_bind+0xcc>)
 800dbc8:	f8b2 1164 	ldrh.w	r1, [r2, #356]	; 0x164
 800dbcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	d003      	beq.n	800dbdc <mod_app_bind+0x94>
 800dbd4:	f8b2 3166 	ldrh.w	r3, [r2, #358]	; 0x166
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d011      	beq.n	800dc00 <mod_app_bind+0xb8>
 800dbdc:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
 800dbe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbe4:	4299      	cmp	r1, r3
 800dbe6:	d003      	beq.n	800dbf0 <mod_app_bind+0xa8>
 800dbe8:	f8b2 318e 	ldrh.w	r3, [r2, #398]	; 0x18e
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d007      	beq.n	800dc00 <mod_app_bind+0xb8>
		return STATUS_INVALID_APPKEY;
 800dbf0:	2203      	movs	r2, #3
 800dbf2:	e7cd      	b.n	800db90 <mod_app_bind+0x48>
		status = STATUS_INVALID_MODEL;
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	e7cb      	b.n	800db90 <mod_app_bind+0x48>
		status = STATUS_CANNOT_BIND;
 800dbf8:	220d      	movs	r2, #13
 800dbfa:	e7c9      	b.n	800db90 <mod_app_bind+0x48>
	return STATUS_INSUFF_RESOURCES;
 800dbfc:	2205      	movs	r2, #5
 800dbfe:	e7c7      	b.n	800db90 <mod_app_bind+0x48>
		if (model->keys[i] == key_idx) {
 800dc00:	8983      	ldrh	r3, [r0, #12]
 800dc02:	429c      	cmp	r4, r3
 800dc04:	d004      	beq.n	800dc10 <mod_app_bind+0xc8>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
 800dc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d1f6      	bne.n	800dbfc <mod_app_bind+0xb4>
			model->keys[i] = key_idx;
 800dc0e:	8184      	strh	r4, [r0, #12]
			return STATUS_SUCCESS;
 800dc10:	2200      	movs	r2, #0
 800dc12:	e7bd      	b.n	800db90 <mod_app_bind+0x48>
 800dc14:	20005bd0 	.word	0x20005bd0

0800dc18 <va_add>:
{
 800dc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		*free_slot = NULL;
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	4c1d      	ldr	r4, [pc, #116]	; (800dc94 <va_add+0x7c>)
{
 800dc20:	4607      	mov	r7, r0
 800dc22:	4688      	mov	r8, r1
		*free_slot = NULL;
 800dc24:	462e      	mov	r6, r5
		if (!BT_MESH_ADDR_IS_VIRTUAL(labels[i].addr)) {
 800dc26:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 800dc2a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800dc2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc32:	d307      	bcc.n	800dc44 <va_add+0x2c>
 800dc34:	1ea5      	subs	r5, r4, #2
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800dc36:	3601      	adds	r6, #1
 800dc38:	2e03      	cmp	r6, #3
 800dc3a:	f104 0412 	add.w	r4, r4, #18
 800dc3e:	d1f2      	bne.n	800dc26 <va_add+0xe>
	return BT_MESH_ADDR_UNASSIGNED;
 800dc40:	2400      	movs	r4, #0
 800dc42:	e00a      	b.n	800dc5a <va_add+0x42>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
 800dc44:	2210      	movs	r2, #16
 800dc46:	4639      	mov	r1, r7
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7f2 fe04 	bl	8000856 <memcmp>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d1f1      	bne.n	800dc36 <va_add+0x1e>
			return labels[i].addr;
 800dc52:	2312      	movs	r3, #18
 800dc54:	435e      	muls	r6, r3
 800dc56:	4b10      	ldr	r3, [pc, #64]	; (800dc98 <va_add+0x80>)
 800dc58:	5b9c      	ldrh	r4, [r3, r6]
	*addr = va_find(label_uuid, &free_slot);
 800dc5a:	f8a8 4000 	strh.w	r4, [r8]
	if (*addr != BT_MESH_ADDR_UNASSIGNED) {
 800dc5e:	b97c      	cbnz	r4, 800dc80 <va_add+0x68>
	if (!free_slot) {
 800dc60:	b18d      	cbz	r5, 800dc86 <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
 800dc62:	4641      	mov	r1, r8
 800dc64:	4638      	mov	r0, r7
 800dc66:	f7fe f9ff 	bl	800c068 <bt_mesh_virtual_addr>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	db0e      	blt.n	800dc8c <va_add+0x74>
	free_slot->addr = *addr;
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f8b8 3000 	ldrh.w	r3, [r8]
 800dc74:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(free_slot->uuid, label_uuid, 16);
 800dc78:	2210      	movs	r2, #16
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	f7f2 fe00 	bl	8000880 <memcpy>
		return STATUS_SUCCESS;
 800dc80:	2000      	movs	r0, #0
 800dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_INSUFF_RESOURCES;
 800dc86:	2005      	movs	r0, #5
 800dc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_UNSPECIFIED;
 800dc8c:	2010      	movs	r0, #16
}
 800dc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc92:	bf00      	nop
 800dc94:	20000d7e 	.word	0x20000d7e
 800dc98:	20000d7c 	.word	0x20000d7c

0800dc9c <mod_sub_va_overwrite>:
{
 800dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	b086      	sub	sp, #24
 800dca2:	4606      	mov	r6, r0
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800dca4:	f04f 0900 	mov.w	r9, #0
	elem_addr = net_buf_simple_pull_le16(buf);
 800dca8:	4610      	mov	r0, r2
{
 800dcaa:	4614      	mov	r4, r2
 800dcac:	460f      	mov	r7, r1
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800dcae:	f8ad 9016 	strh.w	r9, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
 800dcb2:	f003 fda6 	bl	8011802 <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800dcb6:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800dcb8:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
 800dcba:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800dcbc:	f8d4 a000 	ldr.w	sl, [r4]
	net_buf_simple_pull(buf, 16);
 800dcc0:	f003 fd8f 	bl	80117e2 <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
 800dcc4:	4628      	mov	r0, r5
	mod_id = buf->data;
 800dcc6:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800dcca:	f7fe fb63 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800dcce:	b9b0      	cbnz	r0, 800dcfe <mod_sub_va_overwrite+0x62>
		vnd = (buf->len == 4);
 800dcd0:	88a3      	ldrh	r3, [r4, #4]
 800dcd2:	1f1a      	subs	r2, r3, #4
 800dcd4:	4253      	negs	r3, r2
 800dcd6:	4153      	adcs	r3, r2
 800dcd8:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
 800dcdc:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800dcde:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	f8cd 8004 	str.w	r8, [sp, #4]
 800dcee:	462b      	mov	r3, r5
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7fe ffa4 	bl	800cc40 <send_mod_sub_status>
}
 800dcf8:	b006      	add	sp, #24
 800dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
 800dcfe:	4621      	mov	r1, r4
 800dd00:	f10d 0215 	add.w	r2, sp, #21
 800dd04:	f7ff fb5d 	bl	800d3c2 <get_model>
	if (!mod) {
 800dd08:	4604      	mov	r4, r0
 800dd0a:	b180      	cbz	r0, 800dd2e <mod_sub_va_overwrite+0x92>
	memset(mod->groups, 0, sizeof(mod->groups));
 800dd0c:	2204      	movs	r2, #4
 800dd0e:	4649      	mov	r1, r9
 800dd10:	300e      	adds	r0, #14
 800dd12:	f7f2 fde1 	bl	80008d8 <memset>
		status = va_add(label_uuid, &sub_addr);
 800dd16:	f10d 0116 	add.w	r1, sp, #22
 800dd1a:	4650      	mov	r0, sl
 800dd1c:	f7ff ff7c 	bl	800dc18 <va_add>
		if (status == STATUS_SUCCESS) {
 800dd20:	4602      	mov	r2, r0
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d1db      	bne.n	800dcde <mod_sub_va_overwrite+0x42>
			mod->groups[0] = sub_addr;
 800dd26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dd2a:	81e3      	strh	r3, [r4, #14]
 800dd2c:	e7d7      	b.n	800dcde <mod_sub_va_overwrite+0x42>
		status = STATUS_INVALID_MODEL;
 800dd2e:	2202      	movs	r2, #2
 800dd30:	e7d5      	b.n	800dcde <mod_sub_va_overwrite+0x42>

0800dd32 <mod_pub_va_set>:
{
 800dd32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd36:	4680      	mov	r8, r0
 800dd38:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd3a:	4610      	mov	r0, r2
{
 800dd3c:	4614      	mov	r4, r2
 800dd3e:	4689      	mov	r9, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd40:	f003 fd5f 	bl	8011802 <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800dd44:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800dd46:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
 800dd48:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800dd4a:	f8d4 b000 	ldr.w	fp, [r4]
	net_buf_simple_pull(buf, 16);
 800dd4e:	f003 fd48 	bl	80117e2 <net_buf_simple_pull>
	pub_app_idx = net_buf_simple_pull_le16(buf);
 800dd52:	4620      	mov	r0, r4
 800dd54:	f003 fd55 	bl	8011802 <net_buf_simple_pull_le16>
 800dd58:	4606      	mov	r6, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f003 fd49 	bl	80117f2 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800dd60:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
 800dd68:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
 800dd6a:	d926      	bls.n	800ddba <mod_pub_va_set+0x88>
	pub_period = net_buf_simple_pull_u8(buf);
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f003 fd40 	bl	80117f2 <net_buf_simple_pull_u8>
 800dd72:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
 800dd74:	4620      	mov	r0, r4
 800dd76:	f003 fd3c 	bl	80117f2 <net_buf_simple_pull_u8>
	mod_id = buf->data;
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
 800dd7e:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
 800dd80:	4628      	mov	r0, r5
 800dd82:	f7fe fb07 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800dd86:	b9d8      	cbnz	r0, 800ddc0 <mod_pub_va_set+0x8e>
		vnd = (buf->len == 4);
 800dd88:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0;
 800dd8a:	f8ad 001e 	strh.w	r0, [sp, #30]
		vnd = (buf->len == 4);
 800dd8e:	1f19      	subs	r1, r3, #4
 800dd90:	424b      	negs	r3, r1
 800dd92:	414b      	adcs	r3, r1
		mod = NULL;
 800dd94:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
 800dd96:	f88d 301d 	strb.w	r3, [sp, #29]
		status = STATUS_INVALID_ADDRESS;
 800dd9a:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
 800dd9c:	9a04      	ldr	r2, [sp, #16]
 800dd9e:	9203      	str	r2, [sp, #12]
 800dda0:	3408      	adds	r4, #8
 800dda2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800dda6:	9002      	str	r0, [sp, #8]
 800dda8:	9200      	str	r2, [sp, #0]
 800ddaa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ddae:	9401      	str	r4, [sp, #4]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	f7ff faa1 	bl	800d2fc <send_mod_pub_status.isra.6>
}
 800ddba:	b009      	add	sp, #36	; 0x24
 800ddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	f10d 021d 	add.w	r2, sp, #29
 800ddc6:	f7ff fafc 	bl	800d3c2 <get_model>
	if (!mod) {
 800ddca:	4604      	mov	r4, r0
 800ddcc:	b918      	cbnz	r0, 800ddd6 <mod_pub_va_set+0xa4>
		pub_addr = 0;
 800ddce:	f8ad 001e 	strh.w	r0, [sp, #30]
		status = STATUS_INVALID_MODEL;
 800ddd2:	2002      	movs	r0, #2
		goto send_status;
 800ddd4:	e7e2      	b.n	800dd9c <mod_pub_va_set+0x6a>
	status = va_add(label_uuid, &pub_addr);
 800ddd6:	f10d 011e 	add.w	r1, sp, #30
 800ddda:	4658      	mov	r0, fp
 800dddc:	f7ff ff1c 	bl	800dc18 <va_add>
	if (status == STATUS_SUCCESS) {
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d1db      	bne.n	800dd9c <mod_pub_va_set+0x6a>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
 800dde4:	9b05      	ldr	r3, [sp, #20]
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800ddec:	f8cd a008 	str.w	sl, [sp, #8]
 800ddf0:	9700      	str	r7, [sp, #0]
 800ddf2:	f3c6 3300 	ubfx	r3, r6, #12, #1
 800ddf6:	f3c6 020b 	ubfx	r2, r6, #0, #12
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7ff fcf2 	bl	800d7e4 <_mod_pub_set>
 800de00:	e7cc      	b.n	800dd9c <mod_pub_va_set+0x6a>

0800de02 <mod_sub_va_add>:
{
 800de02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de06:	4607      	mov	r7, r0
 800de08:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
 800de0a:	4610      	mov	r0, r2
{
 800de0c:	4614      	mov	r4, r2
 800de0e:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
 800de10:	f003 fcf7 	bl	8011802 <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
 800de14:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
 800de16:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
 800de18:	4620      	mov	r0, r4
	label_uuid = buf->data;
 800de1a:	6825      	ldr	r5, [r4, #0]
	net_buf_simple_pull(buf, 16);
 800de1c:	f003 fce1 	bl	80117e2 <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
 800de20:	4630      	mov	r0, r6
	mod_id = buf->data;
 800de22:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
 800de26:	f7fe fab5 	bl	800c394 <bt_mesh_elem_find>
	if (!elem) {
 800de2a:	b9c8      	cbnz	r0, 800de60 <mod_sub_va_add+0x5e>
		vnd = (buf->len == 4);
 800de2c:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800de2e:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
 800de32:	1f19      	subs	r1, r3, #4
 800de34:	424b      	negs	r3, r1
 800de36:	414b      	adcs	r3, r1
 800de38:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
 800de3c:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
 800de3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800de42:	9302      	str	r3, [sp, #8]
 800de44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	f8cd 9004 	str.w	r9, [sp, #4]
 800de4e:	4633      	mov	r3, r6
 800de50:	462a      	mov	r2, r5
 800de52:	4641      	mov	r1, r8
 800de54:	4638      	mov	r0, r7
 800de56:	f7fe fef3 	bl	800cc40 <send_mod_sub_status>
}
 800de5a:	b007      	add	sp, #28
 800de5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
 800de60:	4621      	mov	r1, r4
 800de62:	f10d 0215 	add.w	r2, sp, #21
 800de66:	f7ff faac 	bl	800d3c2 <get_model>
	if (!mod) {
 800de6a:	4604      	mov	r4, r0
 800de6c:	b918      	cbnz	r0, 800de76 <mod_sub_va_add+0x74>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
 800de6e:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
 800de72:	2502      	movs	r5, #2
		goto send_status;
 800de74:	e7e3      	b.n	800de3e <mod_sub_va_add+0x3c>
	status = va_add(label_uuid, &sub_addr);
 800de76:	4628      	mov	r0, r5
 800de78:	f10d 0116 	add.w	r1, sp, #22
 800de7c:	f7ff fecc 	bl	800dc18 <va_add>
	if (status != STATUS_SUCCESS) {
 800de80:	4605      	mov	r5, r0
 800de82:	2800      	cmp	r0, #0
 800de84:	d1db      	bne.n	800de3e <mod_sub_va_add+0x3c>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
 800de86:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7fe fa48 	bl	800c320 <bt_mesh_model_find_group>
 800de90:	2800      	cmp	r0, #0
 800de92:	d1d4      	bne.n	800de3e <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800de94:	89e3      	ldrh	r3, [r4, #14]
 800de96:	b14b      	cbz	r3, 800deac <mod_sub_va_add+0xaa>
 800de98:	8a23      	ldrh	r3, [r4, #16]
 800de9a:	b94b      	cbnz	r3, 800deb0 <mod_sub_va_add+0xae>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
 800de9c:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
 800de9e:	3304      	adds	r3, #4
 800dea0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800dea4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dea8:	80e3      	strh	r3, [r4, #6]
 800deaa:	e7c8      	b.n	800de3e <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
 800deac:	462b      	mov	r3, r5
 800deae:	e7f6      	b.n	800de9e <mod_sub_va_add+0x9c>
		status = STATUS_INSUFF_RESOURCES;
 800deb0:	2505      	movs	r5, #5
 800deb2:	e7c4      	b.n	800de3e <mod_sub_va_add+0x3c>

0800deb4 <hb_sub_send_status.constprop.12>:

failed:
	hb_pub_send_status(model, ctx, status, param);
}

static void hb_sub_send_status(struct bt_mesh_model *model,
 800deb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800deb8:	4606      	mov	r6, r0
 800deba:	b089      	sub	sp, #36	; 0x24
			       struct bt_mesh_msg_ctx *ctx, u8_t status)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800debc:	2218      	movs	r2, #24
static void hb_sub_send_status(struct bt_mesh_model *model,
 800debe:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800dec0:	a802      	add	r0, sp, #8
 800dec2:	2100      	movs	r1, #0
 800dec4:	f7f2 fd08 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800dec8:	69b5      	ldr	r5, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
 800deca:	230f      	movs	r3, #15
 800decc:	f8ad 300e 	strh.w	r3, [sp, #14]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 800ded0:	f004 f8f4 	bl	80120bc <_impl_k_uptime_get>
	s64_t uptime;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	uptime = k_uptime_get();
	if (uptime > cfg->hb_sub.expiry) {
 800ded4:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
 800ded8:	4580      	cmp	r8, r0
 800deda:	eb79 0301 	sbcs.w	r3, r9, r1
 800dede:	db35      	blt.n	800df4c <hb_sub_send_status.constprop.12+0x98>
		period = 0;
	} else {
		period = (cfg->hb_sub.expiry - uptime) / 1000;
 800dee0:	ebb8 0000 	subs.w	r0, r8, r0
 800dee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dee8:	f04f 0300 	mov.w	r3, #0
 800deec:	eb69 0101 	sbc.w	r1, r9, r1
 800def0:	f7f2 fab0 	bl	8000454 <__aeabi_ldivmod>
 800def4:	4604      	mov	r4, r0
	}

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_SUB_STATUS);
 800def6:	f248 013c 	movw	r1, #32828	; 0x803c
 800defa:	a802      	add	r0, sp, #8
 800defc:	f7fe fb1a 	bl	800c534 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
 800df00:	2100      	movs	r1, #0
 800df02:	a802      	add	r0, sp, #8
 800df04:	f003 fc11 	bl	801172a <net_buf_simple_add_u8>

	net_buf_simple_add_le16(msg, cfg->hb_sub.src);
 800df08:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
 800df0c:	a802      	add	r0, sp, #8
 800df0e:	f003 fc14 	bl	801173a <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_sub.dst);
 800df12:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
 800df16:	a802      	add	r0, sp, #8
 800df18:	f003 fc0f 	bl	801173a <net_buf_simple_add_le16>

	if (cfg->hb_sub.src == BT_MESH_ADDR_UNASSIGNED ||
 800df1c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800df20:	b113      	cbz	r3, 800df28 <hb_sub_send_status.constprop.12+0x74>
 800df22:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 800df26:	b99b      	cbnz	r3, 800df50 <hb_sub_send_status.constprop.12+0x9c>
	    cfg->hb_sub.dst == BT_MESH_ADDR_UNASSIGNED) {
		memset(net_buf_simple_add(msg, 4), 0, 4);
 800df28:	2104      	movs	r1, #4
 800df2a:	a802      	add	r0, sp, #8
 800df2c:	f003 fbee 	bl	801170c <net_buf_simple_add>
 800df30:	2204      	movs	r2, #4
 800df32:	2100      	movs	r1, #0
 800df34:	f7f2 fcd0 	bl	80008d8 <memset>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
	}

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800df38:	2300      	movs	r3, #0
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	aa02      	add	r2, sp, #8
 800df3e:	4639      	mov	r1, r7
 800df40:	4630      	mov	r0, r6
 800df42:	f7fe fb19 	bl	800c578 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Subscription Status");
	}
}
 800df46:	b009      	add	sp, #36	; 0x24
 800df48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (uptime > cfg->hb_sub.expiry) {
 800df4c:	2400      	movs	r4, #0
 800df4e:	e7d2      	b.n	800def6 <hb_sub_send_status.constprop.12+0x42>
 800df50:	b2a1      	uxth	r1, r4
	if (!val) {
 800df52:	b149      	cbz	r1, 800df68 <hb_sub_send_status.constprop.12+0xb4>
	} else if (val == 0xffff) {
 800df54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df58:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
 800df5a:	bf1d      	ittte	ne
 800df5c:	fab1 f181 	clzne	r1, r1
 800df60:	f1c1 0120 	rsbne	r1, r1, #32
 800df64:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800df66:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(period));
 800df68:	a802      	add	r0, sp, #8
 800df6a:	f003 fbde 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
 800df6e:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if (!val) {
 800df72:	b149      	cbz	r1, 800df88 <hb_sub_send_status.constprop.12+0xd4>
	} else if (val == 0xffff) {
 800df74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df78:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
 800df7a:	bf1d      	ittte	ne
 800df7c:	fab1 f181 	clzne	r1, r1
 800df80:	f1c1 0120 	rsbne	r1, r1, #32
 800df84:	b2c9      	uxtbne	r1, r1
		return 0xff;
 800df86:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
 800df88:	a802      	add	r0, sp, #8
 800df8a:	f003 fbce 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
 800df8e:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
 800df92:	a802      	add	r0, sp, #8
 800df94:	f003 fbc9 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
 800df98:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
 800df9c:	a802      	add	r0, sp, #8
 800df9e:	f003 fbc4 	bl	801172a <net_buf_simple_add_u8>
 800dfa2:	e7c9      	b.n	800df38 <hb_sub_send_status.constprop.12+0x84>

0800dfa4 <heartbeat_sub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800dfa4:	f7ff bf86 	b.w	800deb4 <hb_sub_send_status.constprop.12>

0800dfa8 <heartbeat_sub_set>:
}

static void heartbeat_sub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
 800dfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800dfac:	6984      	ldr	r4, [r0, #24]
{
 800dfae:	4607      	mov	r7, r0
	u8_t sub_period;
	s32_t period_ms;

	BT_DBG("src 0x%04x", ctx->addr);

	sub_src = net_buf_simple_pull_le16(buf);
 800dfb0:	4610      	mov	r0, r2
{
 800dfb2:	4615      	mov	r5, r2
 800dfb4:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
 800dfb6:	f003 fc24 	bl	8011802 <net_buf_simple_pull_le16>
 800dfba:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f003 fc20 	bl	8011802 <net_buf_simple_pull_le16>
 800dfc2:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f003 fc14 	bl	80117f2 <net_buf_simple_pull_u8>

	BT_DBG("sub_src 0x%04x sub_dst 0x%04x period 0x%02x",
	       sub_src, sub_dst, sub_period);

	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
 800dfca:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
 800dfce:	4605      	mov	r5, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
 800dfd0:	d115      	bne.n	800dffe <heartbeat_sub_set+0x56>
	    !BT_MESH_ADDR_IS_UNICAST(sub_src)) {
		BT_WARN("Prohibited source address");
		return;
	}

	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
 800dfd2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfdc:	d30f      	bcc.n	800dffe <heartbeat_sub_set+0x56>
 800dfde:	f506 7380 	add.w	r3, r6, #256	; 0x100
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	2bfb      	cmp	r3, #251	; 0xfb
 800dfe6:	d90a      	bls.n	800dffe <heartbeat_sub_set+0x56>
 800dfe8:	b233      	sxth	r3, r6
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	dc03      	bgt.n	800dff6 <heartbeat_sub_set+0x4e>
	     sub_dst != bt_mesh_primary_addr())) {
		BT_WARN("Prohibited destination address");
		return;
	}

	if (sub_period > 0x11) {
 800dfee:	2d11      	cmp	r5, #17
 800dff0:	d907      	bls.n	800e002 <heartbeat_sub_set+0x5a>
 800dff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     sub_dst != bt_mesh_primary_addr())) {
 800dff6:	f7fe f98d 	bl	800c314 <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
 800dffa:	4286      	cmp	r6, r0
 800dffc:	d0f7      	beq.n	800dfee <heartbeat_sub_set+0x46>
 800dffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
		return;
	}

	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
 800e002:	f1b9 0f00 	cmp.w	r9, #0
 800e006:	d001      	beq.n	800e00c <heartbeat_sub_set+0x64>
 800e008:	b106      	cbz	r6, 800e00c <heartbeat_sub_set+0x64>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
 800e00a:	bb05      	cbnz	r5, 800e04e <heartbeat_sub_set+0xa6>
	    sub_period == 0x00) {
		/* Setting the same addresses with zero period should retain
		 * the addresses according to MESH/NODE/CFG/HBS/BV-02-C.
		 */
		if (cfg->hb_sub.src != sub_src || cfg->hb_sub.dst != sub_dst) {
 800e00c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e010:	454b      	cmp	r3, r9
 800e012:	f04f 0500 	mov.w	r5, #0
 800e016:	d103      	bne.n	800e020 <heartbeat_sub_set+0x78>
 800e018:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800e01c:	42b3      	cmp	r3, r6
 800e01e:	d004      	beq.n	800e02a <heartbeat_sub_set+0x82>
			cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e020:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
			cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e024:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
		}

		period_ms = 0;
 800e028:	2500      	movs	r5, #0
		cfg->hb_sub.count = 0;
		period_ms = hb_pwr2(sub_period, 1) * 1000;
	}

	/* Let the transport layer know it needs to handle this address */
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
 800e02a:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 800e02e:	f7fc ff11 	bl	800ae54 <bt_mesh_set_hb_sub_dst>

	BT_DBG("period_ms %u", period_ms);

	if (period_ms) {
 800e032:	b32d      	cbz	r5, 800e080 <heartbeat_sub_set+0xd8>
 800e034:	f004 f842 	bl	80120bc <_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
 800e038:	1940      	adds	r0, r0, r5
 800e03a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
 800e03e:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	} else {
		cfg->hb_sub.expiry = 0;
	}

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800e042:	4641      	mov	r1, r8
 800e044:	4638      	mov	r0, r7
}
 800e046:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
 800e04a:	f7ff bf33 	b.w	800deb4 <hb_sub_send_status.constprop.12>
		cfg->hb_sub.min_hops = BT_MESH_TTL_MAX;
 800e04e:	237f      	movs	r3, #127	; 0x7f
	} else if (val == 0xff || val == 0x11) {
 800e050:	2d11      	cmp	r5, #17
		cfg->hb_sub.min_hops = BT_MESH_TTL_MAX;
 800e052:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		cfg->hb_sub.max_hops = 0;
 800e056:	f04f 0300 	mov.w	r3, #0
 800e05a:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
		cfg->hb_sub.count = 0;
 800e05e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		return (1 << (val - sub));
 800e062:	bf1d      	ittte	ne
 800e064:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
 800e068:	2301      	movne	r3, #1
 800e06a:	40ab      	lslne	r3, r5
	} else if (val == 0xff || val == 0x11) {
 800e06c:	f64f 73ff 	movweq	r3, #65535	; 0xffff
		period_ms = hb_pwr2(sub_period, 1) * 1000;
 800e070:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
		cfg->hb_sub.src = sub_src;
 800e074:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
		cfg->hb_sub.dst = sub_dst;
 800e078:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
		period_ms = hb_pwr2(sub_period, 1) * 1000;
 800e07c:	435d      	muls	r5, r3
 800e07e:	e7d4      	b.n	800e02a <heartbeat_sub_set+0x82>
		cfg->hb_sub.expiry = 0;
 800e080:	2200      	movs	r2, #0
 800e082:	2300      	movs	r3, #0
 800e084:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 800e088:	e7db      	b.n	800e042 <heartbeat_sub_set+0x9a>
	...

0800e08c <net_key_del>:
{
 800e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e090:	6986      	ldr	r6, [r0, #24]
{
 800e092:	4607      	mov	r7, r0
	del_idx = net_buf_simple_pull_le16(buf);
 800e094:	4610      	mov	r0, r2
{
 800e096:	4688      	mov	r8, r1
	del_idx = net_buf_simple_pull_le16(buf);
 800e098:	f003 fbb3 	bl	8011802 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
 800e09c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
 800e0a0:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
 800e0a2:	d23a      	bcs.n	800e11a <net_key_del+0x8e>
	sub = bt_mesh_subnet_get(del_idx);
 800e0a4:	f7fb fbc8 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	b360      	cbz	r0, 800e106 <net_key_del+0x7a>
	if (ctx->net_idx == del_idx) {
 800e0ac:	f8b8 3000 	ldrh.w	r3, [r8]
 800e0b0:	42ab      	cmp	r3, r5
 800e0b2:	d030      	beq.n	800e116 <net_key_del+0x8a>
	if (cfg->hb_pub.net_idx == del_idx) {
 800e0b4:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
 800e0b6:	42ab      	cmp	r3, r5
 800e0b8:	d10a      	bne.n	800e0d0 <net_key_del+0x44>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	86b3      	strh	r3, [r6, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e0be:	86f3      	strh	r3, [r6, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e0c0:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e0c4:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e0c8:	f106 000c 	add.w	r0, r6, #12
 800e0cc:	f004 fac8 	bl	8012660 <k_delayed_work_cancel>
		if (key->net_idx == del_idx) {
 800e0d0:	4e13      	ldr	r6, [pc, #76]	; (800e120 <net_key_del+0x94>)
 800e0d2:	f8b6 3164 	ldrh.w	r3, [r6, #356]	; 0x164
 800e0d6:	42ab      	cmp	r3, r5
 800e0d8:	d103      	bne.n	800e0e2 <net_key_del+0x56>
			_app_key_del(key);
 800e0da:	f506 70b2 	add.w	r0, r6, #356	; 0x164
 800e0de:	f7fe fefb 	bl	800ced8 <_app_key_del>
		if (key->net_idx == del_idx) {
 800e0e2:	f8b6 318c 	ldrh.w	r3, [r6, #396]	; 0x18c
 800e0e6:	42ab      	cmp	r3, r5
 800e0e8:	d102      	bne.n	800e0f0 <net_key_del+0x64>
			_app_key_del(key);
 800e0ea:	480e      	ldr	r0, [pc, #56]	; (800e124 <net_key_del+0x98>)
 800e0ec:	f7fe fef4 	bl	800ced8 <_app_key_del>
		bt_mesh_friend_clear_net_idx(del_idx);
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f001 f979 	bl	800f3e8 <bt_mesh_friend_clear_net_idx>
	memset(sub, 0, sizeof(*sub));
 800e0f6:	22e4      	movs	r2, #228	; 0xe4
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7f2 fbec 	bl	80008d8 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
 800e100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e104:	83a3      	strh	r3, [r4, #28]
	status = STATUS_SUCCESS;
 800e106:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
 800e108:	462a      	mov	r2, r5
 800e10a:	4641      	mov	r1, r8
 800e10c:	4638      	mov	r0, r7
}
 800e10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, del_idx, status);
 800e112:	f7fe bc6d 	b.w	800c9f0 <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
 800e116:	230c      	movs	r3, #12
 800e118:	e7f6      	b.n	800e108 <net_key_del+0x7c>
 800e11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e11e:	bf00      	nop
 800e120:	20005bd0 	.word	0x20005bd0
 800e124:	20005d5c 	.word	0x20005d5c

0800e128 <heartbeat_pub_set>:
{
 800e128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
 800e12c:	6815      	ldr	r5, [r2, #0]
	dst = sys_le16_to_cpu(param->dst);
 800e12e:	f8b5 9000 	ldrh.w	r9, [r5]
 800e132:	fa1f fa89 	uxth.w	sl, r9
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
 800e136:	f48a 4300 	eor.w	r3, sl, #32768	; 0x8000
 800e13a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
 800e142:	d368      	bcc.n	800e216 <heartbeat_pub_set+0xee>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
 800e144:	78ab      	ldrb	r3, [r5, #2]
 800e146:	3b12      	subs	r3, #18
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2bec      	cmp	r3, #236	; 0xec
 800e14c:	d966      	bls.n	800e21c <heartbeat_pub_set+0xf4>
	if (param->period_log > 0x10) {
 800e14e:	78eb      	ldrb	r3, [r5, #3]
 800e150:	2b10      	cmp	r3, #16
 800e152:	d863      	bhi.n	800e21c <heartbeat_pub_set+0xf4>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
 800e154:	792b      	ldrb	r3, [r5, #4]
 800e156:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800e15a:	2b7e      	cmp	r3, #126	; 0x7e
 800e15c:	d962      	bls.n	800e224 <heartbeat_pub_set+0xfc>
	idx = sys_le16_to_cpu(param->net_idx);
 800e15e:	f8b5 b007 	ldrh.w	fp, [r5, #7]
	if (idx > 0xfff) {
 800e162:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
	idx = sys_le16_to_cpu(param->net_idx);
 800e166:	4658      	mov	r0, fp
	if (idx > 0xfff) {
 800e168:	d25c      	bcs.n	800e224 <heartbeat_pub_set+0xfc>
	feat = sys_le16_to_cpu(param->feat);
 800e16a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e16e:	69b4      	ldr	r4, [r6, #24]
	feat = sys_le16_to_cpu(param->feat);
 800e170:	9301      	str	r3, [sp, #4]
	if (!bt_mesh_subnet_get(idx)) {
 800e172:	f7fb fb61 	bl	8009838 <bt_mesh_subnet_get>
 800e176:	2800      	cmp	r0, #0
 800e178:	d052      	beq.n	800e220 <heartbeat_pub_set+0xf8>
	cfg->hb_pub.dst = dst;
 800e17a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.period = param->period_log;
 800e17e:	78e9      	ldrb	r1, [r5, #3]
	cfg->hb_pub.feat = feat;
 800e180:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
 800e182:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	cfg->hb_pub.feat = feat;
 800e186:	8763      	strh	r3, [r4, #58]	; 0x3a
	cfg->hb_pub.net_idx = idx;
 800e188:	f8a4 b03c 	strh.w	fp, [r4, #60]	; 0x3c
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
 800e18c:	f1ba 0f00 	cmp.w	sl, #0
 800e190:	d10c      	bne.n	800e1ac <heartbeat_pub_set+0x84>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e192:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e196:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e19a:	f884 9039 	strb.w	r9, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e19e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
			k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e1a2:	f104 000c 	add.w	r0, r4, #12
 800e1a6:	f004 fa5b 	bl	8012660 <k_delayed_work_cancel>
 800e1aa:	e026      	b.n	800e1fa <heartbeat_pub_set+0xd2>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
 800e1ac:	78aa      	ldrb	r2, [r5, #2]
	if (!val) {
 800e1ae:	b36a      	cbz	r2, 800e20c <heartbeat_pub_set+0xe4>
	} else if (val == 0xff || val == 0x11) {
 800e1b0:	2aff      	cmp	r2, #255	; 0xff
 800e1b2:	d02d      	beq.n	800e210 <heartbeat_pub_set+0xe8>
 800e1b4:	2a11      	cmp	r2, #17
 800e1b6:	d02b      	beq.n	800e210 <heartbeat_pub_set+0xe8>
		return (1 << (val - sub));
 800e1b8:	1e50      	subs	r0, r2, #1
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	4083      	lsls	r3, r0
 800e1be:	b29b      	uxth	r3, r3
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
 800e1c0:	86e3      	strh	r3, [r4, #54]	; 0x36
		cfg->hb_pub.ttl = param->ttl;
 800e1c2:	792b      	ldrb	r3, [r5, #4]
 800e1c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if (param->period_log && param->count_log) {
 800e1c8:	2900      	cmp	r1, #0
 800e1ca:	d0ea      	beq.n	800e1a2 <heartbeat_pub_set+0x7a>
 800e1cc:	2a00      	cmp	r2, #0
 800e1ce:	d0e8      	beq.n	800e1a2 <heartbeat_pub_set+0x7a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800e1d0:	f3bf 8f5b 	dmb	ish
 800e1d4:	f104 0314 	add.w	r3, r4, #20
 800e1d8:	e853 2f00 	ldrex	r2, [r3]
 800e1dc:	f042 0101 	orr.w	r1, r2, #1
 800e1e0:	e843 1000 	strex	r0, r1, [r3]
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d1f7      	bne.n	800e1d8 <heartbeat_pub_set+0xb0>
 800e1e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 800e1ec:	07d3      	lsls	r3, r2, #31
 800e1ee:	d404      	bmi.n	800e1fa <heartbeat_pub_set+0xd2>
		k_queue_append(&work_q->queue, work);
 800e1f0:	f104 010c 	add.w	r1, r4, #12
 800e1f4:	480d      	ldr	r0, [pc, #52]	; (800e22c <heartbeat_pub_set+0x104>)
 800e1f6:	f003 fc5a 	bl	8011aae <k_queue_append>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
 800e1fe:	4639      	mov	r1, r7
 800e200:	4630      	mov	r0, r6
}
 800e202:	b003      	add	sp, #12
 800e204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
 800e208:	f7fe bcc0 	b.w	800cb8c <hb_pub_send_status>
		return 0x0000;
 800e20c:	4613      	mov	r3, r2
 800e20e:	e7d7      	b.n	800e1c0 <heartbeat_pub_set+0x98>
		return 0xffff;
 800e210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e214:	e7d4      	b.n	800e1c0 <heartbeat_pub_set+0x98>
		status = STATUS_INVALID_ADDRESS;
 800e216:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
 800e218:	462b      	mov	r3, r5
 800e21a:	e7f0      	b.n	800e1fe <heartbeat_pub_set+0xd6>
		status = STATUS_CANNOT_SET;
 800e21c:	220f      	movs	r2, #15
 800e21e:	e7fb      	b.n	800e218 <heartbeat_pub_set+0xf0>
		status = STATUS_INVALID_NETKEY;
 800e220:	2204      	movs	r2, #4
 800e222:	e7f9      	b.n	800e218 <heartbeat_pub_set+0xf0>
}
 800e224:	b003      	add	sp, #12
 800e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22a:	bf00      	nop
 800e22c:	20001480 	.word	0x20001480

0800e230 <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
 800e230:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e232:	6984      	ldr	r4, [r0, #24]
{
 800e234:	4605      	mov	r5, r0

	if (!cfg) {
 800e236:	b14c      	cbz	r4, 800e24c <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->relay > 0x02) {
 800e238:	7963      	ldrb	r3, [r4, #5]
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d806      	bhi.n	800e24c <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->beacon > 0x01) {
 800e23e:	79e3      	ldrb	r3, [r4, #7]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d803      	bhi.n	800e24c <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
 800e244:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da02      	bge.n	800e252 <bt_mesh_cfg_srv_init+0x22>
		BT_ERR("No Configuration Server context provided");
		return -EINVAL;
 800e24c:	f06f 0015 	mvn.w	r0, #21
 800e250:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid values in configuration");
		return -EINVAL;
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
 800e252:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800e256:	8183      	strh	r3, [r0, #12]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
 800e258:	4906      	ldr	r1, [pc, #24]	; (800e274 <bt_mesh_cfg_srv_init+0x44>)
 800e25a:	f104 000c 	add.w	r0, r4, #12
 800e25e:	f004 f9e1 	bl	8012624 <k_delayed_work_init>
	cfg->hb_sub.expiry = 0;
 800e262:	2200      	movs	r2, #0
 800e264:	2300      	movs	r3, #0
 800e266:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40

	cfg->model = model;

	conf = cfg;
 800e26a:	4b03      	ldr	r3, [pc, #12]	; (800e278 <bt_mesh_cfg_srv_init+0x48>)
	cfg->model = model;
 800e26c:	6025      	str	r5, [r4, #0]
	conf = cfg;
 800e26e:	601c      	str	r4, [r3, #0]

	return 0;
 800e270:	2000      	movs	r0, #0
}
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	0800e6d9 	.word	0x0800e6d9
 800e278:	20000d78 	.word	0x20000d78

0800e27c <bt_mesh_cfg_reset>:

void bt_mesh_cfg_reset(void)
{
 800e27c:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
 800e27e:	4b23      	ldr	r3, [pc, #140]	; (800e30c <bt_mesh_cfg_reset+0x90>)
 800e280:	681c      	ldr	r4, [r3, #0]
	int i;

	if (!cfg) {
 800e282:	2c00      	cmp	r4, #0
 800e284:	d040      	beq.n	800e308 <bt_mesh_cfg_reset+0x8c>
		return;
	}

	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
 800e286:	2000      	movs	r0, #0
 800e288:	f7fc fde4 	bl	800ae54 <bt_mesh_set_hb_sub_dst>

	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e28c:	2300      	movs	r3, #0
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
	cfg->hb_sub.expiry = 0;
 800e28e:	2000      	movs	r0, #0
 800e290:	2100      	movs	r1, #0
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
 800e292:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e296:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	cfg->hb_sub.expiry = 0;
 800e29a:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e29e:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
 800e2a0:	86e3      	strh	r3, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
 800e2a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
 800e2a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e2aa:	f104 000c 	add.w	r0, r4, #12

	/* Delete all app keys */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e2ae:	4c18      	ldr	r4, [pc, #96]	; (800e310 <bt_mesh_cfg_reset+0x94>)
	k_delayed_work_cancel(&cfg->hb_pub.timer);
 800e2b0:	f004 f9d6 	bl	8012660 <k_delayed_work_cancel>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e2b4:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
 800e2b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d003      	beq.n	800e2c8 <bt_mesh_cfg_reset+0x4c>
			_app_key_del(key);
 800e2c0:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 800e2c4:	f7fe fe08 	bl	800ced8 <_app_key_del>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
 800e2c8:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
 800e2cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d002      	beq.n	800e2da <bt_mesh_cfg_reset+0x5e>
			_app_key_del(key);
 800e2d4:	480f      	ldr	r0, [pc, #60]	; (800e314 <bt_mesh_cfg_reset+0x98>)
 800e2d6:	f7fe fdff 	bl	800ced8 <_app_key_del>

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		memset(sub, 0, sizeof(*sub));
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e2da:	f64f 75ff 	movw	r5, #65535	; 0xffff
		memset(sub, 0, sizeof(*sub));
 800e2de:	22e4      	movs	r2, #228	; 0xe4
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	480d      	ldr	r0, [pc, #52]	; (800e318 <bt_mesh_cfg_reset+0x9c>)
 800e2e4:	f7f2 faf8 	bl	80008d8 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e2e8:	f8a4 51d0 	strh.w	r5, [r4, #464]	; 0x1d0
		memset(sub, 0, sizeof(*sub));
 800e2ec:	22e4      	movs	r2, #228	; 0xe4
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	480a      	ldr	r0, [pc, #40]	; (800e31c <bt_mesh_cfg_reset+0xa0>)
 800e2f2:	f7f2 faf1 	bl	80008d8 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
 800e2f6:	f8a4 52b4 	strh.w	r5, [r4, #692]	; 0x2b4
	}

	memset(labels, 0, sizeof(labels));
 800e2fa:	2236      	movs	r2, #54	; 0x36
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	4808      	ldr	r0, [pc, #32]	; (800e320 <bt_mesh_cfg_reset+0xa4>)
}
 800e300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(labels, 0, sizeof(labels));
 800e304:	f7f2 bae8 	b.w	80008d8 <memset>
 800e308:	bd38      	pop	{r3, r4, r5, pc}
 800e30a:	bf00      	nop
 800e30c:	20000d78 	.word	0x20000d78
 800e310:	20005bd0 	.word	0x20005bd0
 800e314:	20005d5c 	.word	0x20005d5c
 800e318:	20005d84 	.word	0x20005d84
 800e31c:	20005e68 	.word	0x20005e68
 800e320:	20000d7c 	.word	0x20000d7c

0800e324 <bt_mesh_heartbeat>:

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
 800e328:	4b18      	ldr	r3, [pc, #96]	; (800e38c <bt_mesh_heartbeat+0x68>)
 800e32a:	681c      	ldr	r4, [r3, #0]
{
 800e32c:	4615      	mov	r5, r2

	if (!cfg) {
 800e32e:	b364      	cbz	r4, 800e38a <bt_mesh_heartbeat+0x66>
		BT_WARN("No configuaration server context available");
		return;
	}

	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
 800e330:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e334:	4283      	cmp	r3, r0
 800e336:	d128      	bne.n	800e38a <bt_mesh_heartbeat+0x66>
 800e338:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800e33c:	428b      	cmp	r3, r1
 800e33e:	d124      	bne.n	800e38a <bt_mesh_heartbeat+0x66>
 800e340:	f003 febc 	bl	80120bc <_impl_k_uptime_get>
		BT_WARN("No subscription for received heartbeat");
		return;
	}

	if (k_uptime_get() > cfg->hb_sub.expiry) {
 800e344:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 800e348:	4282      	cmp	r2, r0
 800e34a:	418b      	sbcs	r3, r1
 800e34c:	db1d      	blt.n	800e38a <bt_mesh_heartbeat+0x66>
		BT_WARN("Heartbeat subscription period expired");
		return;
	}

	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
 800e34e:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);

	if (cfg->hb_sub.count < 0xffff) {
 800e352:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
 800e356:	42aa      	cmp	r2, r5
 800e358:	bf28      	it	cs
 800e35a:	462a      	movcs	r2, r5
 800e35c:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e360:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
	if (cfg->hb_sub.count < 0xffff) {
 800e364:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e368:	42aa      	cmp	r2, r5
 800e36a:	bf38      	it	cc
 800e36c:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
 800e36e:	4299      	cmp	r1, r3

	BT_DBG("src 0x%04x dst 0x%04x hops %u min %u max %u count %u", src,
	       dst, hops, cfg->hb_sub.min_hops, cfg->hb_sub.max_hops,
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
 800e370:	6d23      	ldr	r3, [r4, #80]	; 0x50
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
 800e372:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
		cfg->hb_sub.count++;
 800e376:	bf1c      	itt	ne
 800e378:	3101      	addne	r1, #1
 800e37a:	f8a4 104c 	strhne.w	r1, [r4, #76]	; 0x4c
	if (cfg->hb_sub.func) {
 800e37e:	b123      	cbz	r3, 800e38a <bt_mesh_heartbeat+0x66>
		cfg->hb_sub.func(hops, feat);
 800e380:	4631      	mov	r1, r6
 800e382:	4628      	mov	r0, r5
	}
}
 800e384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
 800e388:	4718      	bx	r3
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	20000d78 	.word	0x20000d78

0800e390 <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
 800e390:	4b02      	ldr	r3, [pc, #8]	; (800e39c <bt_mesh_net_transmit_get+0xc>)
 800e392:	6818      	ldr	r0, [r3, #0]
 800e394:	b100      	cbz	r0, 800e398 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
 800e396:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	20000d78 	.word	0x20000d78

0800e3a0 <net_transmit_set>:
{
 800e3a0:	b570      	push	{r4, r5, r6, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	460d      	mov	r5, r1
 800e3a8:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	2210      	movs	r2, #16
 800e3ae:	a802      	add	r0, sp, #8
 800e3b0:	f7f2 fa92 	bl	80008d8 <memset>
 800e3b4:	2307      	movs	r3, #7
 800e3b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e3ba:	69a3      	ldr	r3, [r4, #24]
	if (!cfg) {
 800e3bc:	b113      	cbz	r3, 800e3c4 <net_transmit_set+0x24>
		cfg->net_transmit = buf->data[0];
 800e3be:	6832      	ldr	r2, [r6, #0]
 800e3c0:	7812      	ldrb	r2, [r2, #0]
 800e3c2:	711a      	strb	r2, [r3, #4]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e3c4:	f248 0125 	movw	r1, #32805	; 0x8025
 800e3c8:	a802      	add	r0, sp, #8
 800e3ca:	f7fe f8b3 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
 800e3ce:	f7ff ffdf 	bl	800e390 <bt_mesh_net_transmit_get>
 800e3d2:	4601      	mov	r1, r0
 800e3d4:	a802      	add	r0, sp, #8
 800e3d6:	f003 f9a8 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e3da:	2300      	movs	r3, #0
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	aa02      	add	r2, sp, #8
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f7fe f8c8 	bl	800c578 <bt_mesh_model_send>
}
 800e3e8:	b006      	add	sp, #24
 800e3ea:	bd70      	pop	{r4, r5, r6, pc}

0800e3ec <net_transmit_get>:
{
 800e3ec:	b530      	push	{r4, r5, lr}
 800e3ee:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e3f0:	2210      	movs	r2, #16
{
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e3f6:	a802      	add	r0, sp, #8
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	f7f2 fa6d 	bl	80008d8 <memset>
 800e3fe:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e400:	f248 0125 	movw	r1, #32805	; 0x8025
 800e404:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e406:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
 800e40a:	f7fe f893 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
 800e40e:	f7ff ffbf 	bl	800e390 <bt_mesh_net_transmit_get>
 800e412:	4601      	mov	r1, r0
 800e414:	a802      	add	r0, sp, #8
 800e416:	f003 f988 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e41a:	2300      	movs	r3, #0
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	aa02      	add	r2, sp, #8
 800e420:	4629      	mov	r1, r5
 800e422:	4620      	mov	r0, r4
 800e424:	f7fe f8a8 	bl	800c578 <bt_mesh_model_send>
}
 800e428:	b007      	add	sp, #28
 800e42a:	bd30      	pop	{r4, r5, pc}

0800e42c <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
 800e42c:	4b03      	ldr	r3, [pc, #12]	; (800e43c <bt_mesh_relay_get+0x10>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	b10b      	cbz	r3, 800e436 <bt_mesh_relay_get+0xa>
		return conf->relay;
 800e432:	7958      	ldrb	r0, [r3, #5]
 800e434:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
 800e436:	2002      	movs	r0, #2
}
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	20000d78 	.word	0x20000d78

0800e440 <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
 800e440:	4b03      	ldr	r3, [pc, #12]	; (800e450 <bt_mesh_friend_get+0x10>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	b10b      	cbz	r3, 800e44a <bt_mesh_friend_get+0xa>
		return conf->frnd;
 800e446:	7a58      	ldrb	r0, [r3, #9]
 800e448:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
 800e44a:	2002      	movs	r0, #2
}
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	20000d78 	.word	0x20000d78

0800e454 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
 800e454:	4b02      	ldr	r3, [pc, #8]	; (800e460 <bt_mesh_relay_retransmit_get+0xc>)
 800e456:	6818      	ldr	r0, [r3, #0]
 800e458:	b100      	cbz	r0, 800e45c <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
 800e45a:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	20000d78 	.word	0x20000d78

0800e464 <relay_get>:
{
 800e464:	b530      	push	{r4, r5, lr}
 800e466:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e468:	2210      	movs	r2, #16
{
 800e46a:	4604      	mov	r4, r0
 800e46c:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e46e:	a802      	add	r0, sp, #8
 800e470:	2100      	movs	r1, #0
 800e472:	f7f2 fa31 	bl	80008d8 <memset>
 800e476:	2308      	movs	r3, #8
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e478:	eb0d 0003 	add.w	r0, sp, r3
 800e47c:	f248 0128 	movw	r1, #32808	; 0x8028
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e480:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e484:	f7fe f856 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
 800e488:	f7ff ffd0 	bl	800e42c <bt_mesh_relay_get>
 800e48c:	4601      	mov	r1, r0
 800e48e:	a802      	add	r0, sp, #8
 800e490:	f003 f94b 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
 800e494:	f7ff ffde 	bl	800e454 <bt_mesh_relay_retransmit_get>
 800e498:	4601      	mov	r1, r0
 800e49a:	a802      	add	r0, sp, #8
 800e49c:	f003 f945 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	aa02      	add	r2, sp, #8
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f7fe f865 	bl	800c578 <bt_mesh_model_send>
}
 800e4ae:	b007      	add	sp, #28
 800e4b0:	bd30      	pop	{r4, r5, pc}
	...

0800e4b4 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
 800e4b4:	4b02      	ldr	r3, [pc, #8]	; (800e4c0 <bt_mesh_beacon_get+0xc>)
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	b100      	cbz	r0, 800e4bc <bt_mesh_beacon_get+0x8>
		return conf->beacon;
 800e4ba:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	20000d78 	.word	0x20000d78

0800e4c4 <beacon_set>:
{
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b086      	sub	sp, #24
 800e4ca:	460d      	mov	r5, r1
 800e4cc:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	2210      	movs	r2, #16
 800e4d2:	a802      	add	r0, sp, #8
 800e4d4:	f7f2 fa00 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e4d8:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e4da:	2307      	movs	r3, #7
 800e4dc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e4e0:	b152      	cbz	r2, 800e4f8 <beacon_set+0x34>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
 800e4e2:	6833      	ldr	r3, [r6, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d818      	bhi.n	800e51c <beacon_set+0x58>
		if (buf->data[0] != cfg->beacon) {
 800e4ea:	79d1      	ldrb	r1, [r2, #7]
 800e4ec:	4299      	cmp	r1, r3
 800e4ee:	d003      	beq.n	800e4f8 <beacon_set+0x34>
			cfg->beacon = buf->data[0];
 800e4f0:	71d3      	strb	r3, [r2, #7]
			if (cfg->beacon) {
 800e4f2:	b1ab      	cbz	r3, 800e520 <beacon_set+0x5c>
				bt_mesh_beacon_enable();
 800e4f4:	f7fb f8b8 	bl	8009668 <bt_mesh_beacon_enable>
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e4f8:	f248 010b 	movw	r1, #32779	; 0x800b
 800e4fc:	a802      	add	r0, sp, #8
 800e4fe:	f7fe f819 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
 800e502:	f7ff ffd7 	bl	800e4b4 <bt_mesh_beacon_get>
 800e506:	4601      	mov	r1, r0
 800e508:	a802      	add	r0, sp, #8
 800e50a:	f003 f90e 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e50e:	2300      	movs	r3, #0
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	aa02      	add	r2, sp, #8
 800e514:	4629      	mov	r1, r5
 800e516:	4620      	mov	r0, r4
 800e518:	f7fe f82e 	bl	800c578 <bt_mesh_model_send>
}
 800e51c:	b006      	add	sp, #24
 800e51e:	bd70      	pop	{r4, r5, r6, pc}
				bt_mesh_beacon_disable();
 800e520:	f7fb f8cc 	bl	80096bc <bt_mesh_beacon_disable>
 800e524:	e7e8      	b.n	800e4f8 <beacon_set+0x34>

0800e526 <beacon_get>:
{
 800e526:	b530      	push	{r4, r5, lr}
 800e528:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e52a:	2210      	movs	r2, #16
{
 800e52c:	4604      	mov	r4, r0
 800e52e:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e530:	a802      	add	r0, sp, #8
 800e532:	2100      	movs	r1, #0
 800e534:	f7f2 f9d0 	bl	80008d8 <memset>
 800e538:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e53a:	f248 010b 	movw	r1, #32779	; 0x800b
 800e53e:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e540:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
 800e544:	f7fd fff6 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
 800e548:	f7ff ffb4 	bl	800e4b4 <bt_mesh_beacon_get>
 800e54c:	4601      	mov	r1, r0
 800e54e:	a802      	add	r0, sp, #8
 800e550:	f003 f8eb 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e554:	2300      	movs	r3, #0
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	aa02      	add	r2, sp, #8
 800e55a:	4629      	mov	r1, r5
 800e55c:	4620      	mov	r0, r4
 800e55e:	f7fe f80b 	bl	800c578 <bt_mesh_model_send>
}
 800e562:	b007      	add	sp, #28
 800e564:	bd30      	pop	{r4, r5, pc}
	...

0800e568 <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
 800e568:	4b03      	ldr	r3, [pc, #12]	; (800e578 <bt_mesh_gatt_proxy_get+0x10>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	b10b      	cbz	r3, 800e572 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
 800e56e:	7a18      	ldrb	r0, [r3, #8]
 800e570:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
 800e572:	2002      	movs	r0, #2
}
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	20000d78 	.word	0x20000d78

0800e57c <hb_send>:
{
 800e57c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e57e:	6984      	ldr	r4, [r0, #24]
{
 800e580:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
 800e582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e586:	2300      	movs	r3, #0
{
 800e588:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
 800e58a:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e58e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800e590:	9306      	str	r3, [sp, #24]
		.net_idx = cfg->hb_pub.net_idx,
 800e592:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
	struct bt_mesh_msg_ctx ctx = {
 800e594:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e598:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800e59c:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
 800e5a0:	9307      	str	r3, [sp, #28]
 800e5a2:	9308      	str	r3, [sp, #32]
 800e5a4:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
 800e5a6:	f8ad 0014 	strh.w	r0, [sp, #20]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
 800e5aa:	f7fb f945 	bl	8009838 <bt_mesh_subnet_get>
		.src = model->elem->addr,
 800e5ae:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
 800e5b0:	9007      	str	r0, [sp, #28]
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
 800e5b8:	ae05      	add	r6, sp, #20
	struct bt_mesh_net_tx tx = {
 800e5ba:	9608      	str	r6, [sp, #32]
		.xmit = bt_mesh_net_transmit_get(),
 800e5bc:	f7ff fee8 	bl	800e390 <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
 800e5c0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800e5c4:	f88d 3010 	strb.w	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
 800e5c8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
 800e5cc:	f7ff ff2e 	bl	800e42c <bt_mesh_relay_get>
	u16_t feat = 0;
 800e5d0:	1e43      	subs	r3, r0, #1
 800e5d2:	425a      	negs	r2, r3
 800e5d4:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 800e5d6:	f7ff ffc7 	bl	800e568 <bt_mesh_gatt_proxy_get>
 800e5da:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
 800e5dc:	bf08      	it	eq
 800e5de:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
 800e5e2:	f7ff ff2d 	bl	800e440 <bt_mesh_friend_get>
 800e5e6:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
 800e5e8:	bf08      	it	eq
 800e5ea:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
 800e5ee:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
 800e5f0:	0212      	lsls	r2, r2, #8
 800e5f2:	f8ad 2011 	strh.w	r2, [sp, #17]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
 800e5f6:	9302      	str	r3, [sp, #8]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	aa04      	add	r2, sp, #16
 800e5fe:	2303      	movs	r3, #3
 800e600:	210a      	movs	r1, #10
 800e602:	a807      	add	r0, sp, #28
 800e604:	f7fc fcf0 	bl	800afe8 <bt_mesh_ctl_send>
}
 800e608:	b00a      	add	sp, #40	; 0x28
 800e60a:	bd70      	pop	{r4, r5, r6, pc}

0800e60c <friend_set>:
{
 800e60c:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e60e:	6813      	ldr	r3, [r2, #0]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b01      	cmp	r3, #1
{
 800e614:	4605      	mov	r5, r0
 800e616:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e618:	d81a      	bhi.n	800e650 <friend_set+0x44>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e61a:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
 800e61c:	b194      	cbz	r4, 800e644 <friend_set+0x38>
	if (cfg->frnd == buf->data[0]) {
 800e61e:	7a62      	ldrb	r2, [r4, #9]
 800e620:	429a      	cmp	r2, r3
 800e622:	d00f      	beq.n	800e644 <friend_set+0x38>
		cfg->frnd = buf->data[0];
 800e624:	7263      	strb	r3, [r4, #9]
		if (cfg->frnd == BT_MESH_FRIEND_DISABLED) {
 800e626:	b91b      	cbnz	r3, 800e630 <friend_set+0x24>
			bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
 800e628:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e62c:	f000 fedc 	bl	800f3e8 <bt_mesh_friend_clear_net_idx>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e630:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e632:	f7fb f901 	bl	8009838 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
 800e636:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e638:	075b      	lsls	r3, r3, #29
 800e63a:	d503      	bpl.n	800e644 <friend_set+0x38>
 800e63c:	b110      	cbz	r0, 800e644 <friend_set+0x38>
		hb_send(model);
 800e63e:	4628      	mov	r0, r5
 800e640:	f7ff ff9c 	bl	800e57c <hb_send>
	send_friend_status(model, ctx);
 800e644:	4631      	mov	r1, r6
 800e646:	4628      	mov	r0, r5
}
 800e648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
 800e64c:	f7fe b97a 	b.w	800c944 <send_friend_status>
 800e650:	bd70      	pop	{r4, r5, r6, pc}

0800e652 <relay_set>:
{
 800e652:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e654:	4606      	mov	r6, r0
 800e656:	b087      	sub	sp, #28
 800e658:	460f      	mov	r7, r1
 800e65a:	4615      	mov	r5, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e65c:	2100      	movs	r1, #0
 800e65e:	2210      	movs	r2, #16
 800e660:	a802      	add	r0, sp, #8
 800e662:	f7f2 f939 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e666:	69b4      	ldr	r4, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
 800e668:	2308      	movs	r3, #8
 800e66a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e66e:	b1bc      	cbz	r4, 800e6a0 <relay_set+0x4e>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
 800e670:	682a      	ldr	r2, [r5, #0]
 800e672:	7813      	ldrb	r3, [r2, #0]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d82b      	bhi.n	800e6d0 <relay_set+0x7e>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
 800e678:	7965      	ldrb	r5, [r4, #5]
 800e67a:	2d02      	cmp	r5, #2
 800e67c:	d02a      	beq.n	800e6d4 <relay_set+0x82>
			cfg->relay = buf->data[0];
 800e67e:	7163      	strb	r3, [r4, #5]
			change = (cfg->relay != buf->data[0]);
 800e680:	1b5d      	subs	r5, r3, r5
			cfg->relay_retransmit = buf->data[1];
 800e682:	7853      	ldrb	r3, [r2, #1]
 800e684:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
 800e686:	bf18      	it	ne
 800e688:	2501      	movne	r5, #1
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e68a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e68c:	f7fb f8d4 	bl	8009838 <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
 800e690:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e692:	07db      	lsls	r3, r3, #31
 800e694:	d504      	bpl.n	800e6a0 <relay_set+0x4e>
 800e696:	b118      	cbz	r0, 800e6a0 <relay_set+0x4e>
 800e698:	b115      	cbz	r5, 800e6a0 <relay_set+0x4e>
			hb_send(model);
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7ff ff6e 	bl	800e57c <hb_send>
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
 800e6a0:	f248 0128 	movw	r1, #32808	; 0x8028
 800e6a4:	a802      	add	r0, sp, #8
 800e6a6:	f7fd ff45 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
 800e6aa:	f7ff febf 	bl	800e42c <bt_mesh_relay_get>
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	a802      	add	r0, sp, #8
 800e6b2:	f003 f83a 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
 800e6b6:	f7ff fecd 	bl	800e454 <bt_mesh_relay_retransmit_get>
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	a802      	add	r0, sp, #8
 800e6be:	f003 f834 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	aa02      	add	r2, sp, #8
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7fd ff54 	bl	800c578 <bt_mesh_model_send>
}
 800e6d0:	b007      	add	sp, #28
 800e6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			change = false;
 800e6d4:	2500      	movs	r5, #0
 800e6d6:	e7d8      	b.n	800e68a <relay_set+0x38>

0800e6d8 <hb_publish>:
{
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4604      	mov	r4, r0
	struct bt_mesh_model *model = cfg->model;
 800e6dc:	f850 5c0c 	ldr.w	r5, [r0, #-12]
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e6e0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800e6e2:	f7fb f8a9 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800e6e6:	b908      	cbnz	r0, 800e6ec <hb_publish+0x14>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
 800e6e8:	8520      	strh	r0, [r4, #40]	; 0x28
		return;
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
	hb_send(model);
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f7ff ff45 	bl	800e57c <hb_send>
	if (cfg->hb_pub.count == 0) {
 800e6f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e6f4:	b313      	cbz	r3, 800e73c <hb_publish+0x64>
	if (cfg->hb_pub.count != 0xffff) {
 800e6f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6fa:	4293      	cmp	r3, r2
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
 800e6fc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
		cfg->hb_pub.count--;
 800e700:	bf1c      	itt	ne
 800e702:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800e706:	8563      	strhne	r3, [r4, #42]	; 0x2a
	if (!val) {
 800e708:	b142      	cbz	r2, 800e71c <hb_publish+0x44>
	} else if (val == 0xff || val == 0x11) {
 800e70a:	2aff      	cmp	r2, #255	; 0xff
 800e70c:	d013      	beq.n	800e736 <hb_publish+0x5e>
 800e70e:	2a11      	cmp	r2, #17
 800e710:	d011      	beq.n	800e736 <hb_publish+0x5e>
		return (1 << (val - sub));
 800e712:	3a01      	subs	r2, #1
 800e714:	2301      	movs	r3, #1
 800e716:	fa03 f202 	lsl.w	r2, r3, r2
 800e71a:	b292      	uxth	r2, r2
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
 800e71c:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 800e720:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e724:	00d2      	lsls	r2, r2, #3
 800e726:	b292      	uxth	r2, r2
	if (period_ms) {
 800e728:	b142      	cbz	r2, 800e73c <hb_publish+0x64>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800e72a:	4621      	mov	r1, r4
 800e72c:	4804      	ldr	r0, [pc, #16]	; (800e740 <hb_publish+0x68>)
}
 800e72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e732:	f003 bfe1 	b.w	80126f8 <k_delayed_work_submit_to_queue>
		return 0xffff;
 800e736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e73a:	e7ef      	b.n	800e71c <hb_publish+0x44>
 800e73c:	bd38      	pop	{r3, r4, r5, pc}
 800e73e:	bf00      	nop
 800e740:	20001480 	.word	0x20001480

0800e744 <node_identity_set>:
{
 800e744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e748:	b088      	sub	sp, #32
 800e74a:	4614      	mov	r4, r2
 800e74c:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e74e:	2214      	movs	r2, #20
{
 800e750:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e752:	a803      	add	r0, sp, #12
 800e754:	2100      	movs	r1, #0
 800e756:	f7f2 f8bf 	bl	80008d8 <memset>
 800e75a:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
 800e75c:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
 800e75e:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
 800e762:	f003 f84e 	bl	8011802 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
 800e766:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
 800e76a:	4605      	mov	r5, r0
	if (idx > 0xfff) {
 800e76c:	d222      	bcs.n	800e7b4 <node_identity_set+0x70>
	node_id = net_buf_simple_pull_u8(buf);
 800e76e:	4620      	mov	r0, r4
 800e770:	f003 f83f 	bl	80117f2 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
 800e774:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
 800e776:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
 800e778:	d81c      	bhi.n	800e7b4 <node_identity_set+0x70>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
 800e77a:	f248 0148 	movw	r1, #32840	; 0x8048
 800e77e:	a803      	add	r0, sp, #12
 800e780:	f7fd fed8 	bl	800c534 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
 800e784:	4628      	mov	r0, r5
 800e786:	f7fb f857 	bl	8009838 <bt_mesh_subnet_get>
	if (!sub) {
 800e78a:	4604      	mov	r4, r0
 800e78c:	b9a8      	cbnz	r0, 800e7ba <node_identity_set+0x76>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
 800e78e:	2104      	movs	r1, #4
 800e790:	a803      	add	r0, sp, #12
 800e792:	f002 ffca 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
 800e796:	4629      	mov	r1, r5
 800e798:	a803      	add	r0, sp, #12
 800e79a:	f002 ffce 	bl	801173a <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, node_id);
 800e79e:	4631      	mov	r1, r6
		net_buf_simple_add_u8(msg, sub->node_id);
 800e7a0:	a803      	add	r0, sp, #12
 800e7a2:	f002 ffc2 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	aa03      	add	r2, sp, #12
 800e7ac:	4641      	mov	r1, r8
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7fd fee2 	bl	800c578 <bt_mesh_model_send>
}
 800e7b4:	b008      	add	sp, #32
 800e7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	a803      	add	r0, sp, #12
 800e7be:	f002 ffb4 	bl	801172a <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	a803      	add	r0, sp, #12
 800e7c6:	f002 ffb8 	bl	801173a <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 800e7ca:	f7ff fecd 	bl	800e568 <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
 800e7ce:	2801      	cmp	r0, #1
 800e7d0:	d105      	bne.n	800e7de <node_identity_set+0x9a>
				bt_mesh_proxy_identity_start(sub);
 800e7d2:	4620      	mov	r0, r4
			if (node_id) {
 800e7d4:	b136      	cbz	r6, 800e7e4 <node_identity_set+0xa0>
				bt_mesh_proxy_identity_start(sub);
 800e7d6:	f002 fc91 	bl	80110fc <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
 800e7da:	f7fa fd17 	bl	800920c <bt_mesh_adv_update>
		net_buf_simple_add_u8(msg, sub->node_id);
 800e7de:	f894 1020 	ldrb.w	r1, [r4, #32]
 800e7e2:	e7dd      	b.n	800e7a0 <node_identity_set+0x5c>
				bt_mesh_proxy_identity_stop(sub);
 800e7e4:	f002 fca4 	bl	8011130 <bt_mesh_proxy_identity_stop>
 800e7e8:	e7f7      	b.n	800e7da <node_identity_set+0x96>

0800e7ea <send_gatt_proxy_status>:
{
 800e7ea:	b530      	push	{r4, r5, lr}
 800e7ec:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e7ee:	2210      	movs	r2, #16
{
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e7f4:	a802      	add	r0, sp, #8
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	f7f2 f86e 	bl	80008d8 <memset>
 800e7fc:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
 800e7fe:	f248 0114 	movw	r1, #32788	; 0x8014
 800e802:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e804:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
 800e808:	f7fd fe94 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_gatt_proxy_get());
 800e80c:	f7ff feac 	bl	800e568 <bt_mesh_gatt_proxy_get>
 800e810:	4601      	mov	r1, r0
 800e812:	a802      	add	r0, sp, #8
 800e814:	f002 ff89 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e818:	2300      	movs	r3, #0
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	aa02      	add	r2, sp, #8
 800e81e:	4629      	mov	r1, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f7fd fea9 	bl	800c578 <bt_mesh_model_send>
}
 800e826:	b007      	add	sp, #28
 800e828:	bd30      	pop	{r4, r5, pc}

0800e82a <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
 800e82a:	f7ff bfde 	b.w	800e7ea <send_gatt_proxy_status>
	...

0800e830 <gatt_proxy_set>:
{
 800e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e832:	6813      	ldr	r3, [r2, #0]
 800e834:	781a      	ldrb	r2, [r3, #0]
 800e836:	2a01      	cmp	r2, #1
{
 800e838:	4606      	mov	r6, r0
 800e83a:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
 800e83c:	d832      	bhi.n	800e8a4 <gatt_proxy_set+0x74>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
 800e83e:	f7ff fe93 	bl	800e568 <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
 800e842:	2802      	cmp	r0, #2
 800e844:	d028      	beq.n	800e898 <gatt_proxy_set+0x68>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e846:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
 800e848:	b334      	cbz	r4, 800e898 <gatt_proxy_set+0x68>
	if (cfg->gatt_proxy == buf->data[0]) {
 800e84a:	7a23      	ldrb	r3, [r4, #8]
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d023      	beq.n	800e898 <gatt_proxy_set+0x68>
	cfg->gatt_proxy = buf->data[0];
 800e850:	7222      	strb	r2, [r4, #8]
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
 800e852:	b9aa      	cbnz	r2, 800e880 <gatt_proxy_set+0x50>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 800e854:	4d14      	ldr	r5, [pc, #80]	; (800e8a8 <gatt_proxy_set+0x78>)
 800e856:	f8b5 21d0 	ldrh.w	r2, [r5, #464]	; 0x1d0
 800e85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e85e:	429a      	cmp	r2, r3
 800e860:	d003      	beq.n	800e86a <gatt_proxy_set+0x3a>
				bt_mesh_proxy_identity_stop(sub);
 800e862:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
 800e866:	f002 fc63 	bl	8011130 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 800e86a:	f8b5 22b4 	ldrh.w	r2, [r5, #692]	; 0x2b4
 800e86e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e872:	429a      	cmp	r2, r3
 800e874:	d002      	beq.n	800e87c <gatt_proxy_set+0x4c>
				bt_mesh_proxy_identity_stop(sub);
 800e876:	480d      	ldr	r0, [pc, #52]	; (800e8ac <gatt_proxy_set+0x7c>)
 800e878:	f002 fc5a 	bl	8011130 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
 800e87c:	f002 fcac 	bl	80111d8 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
 800e880:	f7fa fcc4 	bl	800920c <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
 800e884:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800e886:	f7fa ffd7 	bl	8009838 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
 800e88a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800e88c:	079b      	lsls	r3, r3, #30
 800e88e:	d503      	bpl.n	800e898 <gatt_proxy_set+0x68>
 800e890:	b110      	cbz	r0, 800e898 <gatt_proxy_set+0x68>
		hb_send(model);
 800e892:	4630      	mov	r0, r6
 800e894:	f7ff fe72 	bl	800e57c <hb_send>
	send_gatt_proxy_status(model, ctx);
 800e898:	4639      	mov	r1, r7
 800e89a:	4630      	mov	r0, r6
}
 800e89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
 800e8a0:	f7ff bfa3 	b.w	800e7ea <send_gatt_proxy_status>
 800e8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20005bd0 	.word	0x20005bd0
 800e8ac:	20005e68 	.word	0x20005e68

0800e8b0 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
 800e8b0:	4b03      	ldr	r3, [pc, #12]	; (800e8c0 <bt_mesh_default_ttl_get+0x10>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	b10b      	cbz	r3, 800e8ba <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
 800e8b6:	7a98      	ldrb	r0, [r3, #10]
 800e8b8:	4770      	bx	lr
	}

	return DEFAULT_TTL;
 800e8ba:	2007      	movs	r0, #7
}
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	20000d78 	.word	0x20000d78

0800e8c4 <default_ttl_set>:
{
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	b086      	sub	sp, #24
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	2210      	movs	r2, #16
 800e8d2:	a802      	add	r0, sp, #8
 800e8d4:	f7f2 f800 	bl	80008d8 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
 800e8d8:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e8da:	2307      	movs	r3, #7
 800e8dc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
 800e8e0:	b132      	cbz	r2, 800e8f0 <default_ttl_set+0x2c>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
 800e8e2:	6833      	ldr	r3, [r6, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	0619      	lsls	r1, r3, #24
 800e8e8:	d414      	bmi.n	800e914 <default_ttl_set+0x50>
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d012      	beq.n	800e914 <default_ttl_set+0x50>
		cfg->default_ttl = buf->data[0];
 800e8ee:	7293      	strb	r3, [r2, #10]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e8f0:	f248 010e 	movw	r1, #32782	; 0x800e
 800e8f4:	a802      	add	r0, sp, #8
 800e8f6:	f7fd fe1d 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
 800e8fa:	f7ff ffd9 	bl	800e8b0 <bt_mesh_default_ttl_get>
 800e8fe:	4601      	mov	r1, r0
 800e900:	a802      	add	r0, sp, #8
 800e902:	f002 ff12 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e906:	2300      	movs	r3, #0
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	aa02      	add	r2, sp, #8
 800e90c:	4629      	mov	r1, r5
 800e90e:	4620      	mov	r0, r4
 800e910:	f7fd fe32 	bl	800c578 <bt_mesh_model_send>
}
 800e914:	b006      	add	sp, #24
 800e916:	bd70      	pop	{r4, r5, r6, pc}

0800e918 <default_ttl_get>:
{
 800e918:	b530      	push	{r4, r5, lr}
 800e91a:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e91c:	2210      	movs	r2, #16
{
 800e91e:	4604      	mov	r4, r0
 800e920:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e922:	a802      	add	r0, sp, #8
 800e924:	2100      	movs	r1, #0
 800e926:	f7f1 ffd7 	bl	80008d8 <memset>
 800e92a:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e92c:	f248 010e 	movw	r1, #32782	; 0x800e
 800e930:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e932:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
 800e936:	f7fd fdfd 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
 800e93a:	f7ff ffb9 	bl	800e8b0 <bt_mesh_default_ttl_get>
 800e93e:	4601      	mov	r1, r0
 800e940:	a802      	add	r0, sp, #8
 800e942:	f002 fef2 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e946:	2300      	movs	r3, #0
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	aa02      	add	r2, sp, #8
 800e94c:	4629      	mov	r1, r5
 800e94e:	4620      	mov	r0, r4
 800e950:	f7fd fe12 	bl	800c578 <bt_mesh_model_send>
}
 800e954:	b007      	add	sp, #28
 800e956:	bd30      	pop	{r4, r5, pc}

0800e958 <bt_mesh_label_uuid_get>:
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
 800e958:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <bt_mesh_label_uuid_get+0x2c>)
 800e95a:	881a      	ldrh	r2, [r3, #0]
 800e95c:	4282      	cmp	r2, r0
 800e95e:	d00b      	beq.n	800e978 <bt_mesh_label_uuid_get+0x20>
 800e960:	8a5a      	ldrh	r2, [r3, #18]
 800e962:	4282      	cmp	r2, r0
 800e964:	d00a      	beq.n	800e97c <bt_mesh_label_uuid_get+0x24>
 800e966:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e968:	4282      	cmp	r2, r0
 800e96a:	d109      	bne.n	800e980 <bt_mesh_label_uuid_get+0x28>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800e96c:	2002      	movs	r0, #2
			BT_DBG("Found Label UUID for 0x%04x: %s", addr,
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
 800e96e:	2212      	movs	r2, #18
 800e970:	fb02 3000 	mla	r0, r2, r0, r3
 800e974:	3002      	adds	r0, #2
 800e976:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
 800e978:	2000      	movs	r0, #0
 800e97a:	e7f8      	b.n	800e96e <bt_mesh_label_uuid_get+0x16>
 800e97c:	2001      	movs	r0, #1
 800e97e:	e7f6      	b.n	800e96e <bt_mesh_label_uuid_get+0x16>
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
 800e980:	2000      	movs	r0, #0
}
 800e982:	4770      	bx	lr
 800e984:	20000d7c 	.word	0x20000d7c

0800e988 <attention_off>:
	struct bt_mesh_health_srv *srv = CONTAINER_OF(work,
						      struct bt_mesh_health_srv,
						      attn_timer.work);
	BT_DBG("");

	if (srv->cb && srv->cb->attn_off) {
 800e988:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e98c:	b123      	cbz	r3, 800e998 <attention_off+0x10>
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	b113      	cbz	r3, 800e998 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
 800e992:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800e996:	4718      	bx	r3
 800e998:	4770      	bx	lr

0800e99a <health_period_set_unrel>:
{
 800e99a:	b510      	push	{r4, lr}
 800e99c:	4604      	mov	r4, r0
	period = net_buf_simple_pull_u8(buf);
 800e99e:	4610      	mov	r0, r2
 800e9a0:	f002 ff27 	bl	80117f2 <net_buf_simple_pull_u8>
	if (period > 15) {
 800e9a4:	280f      	cmp	r0, #15
	model->pub->period_div = period;
 800e9a6:	bf9f      	itttt	ls
 800e9a8:	68a3      	ldrls	r3, [r4, #8]
 800e9aa:	7ada      	ldrbls	r2, [r3, #11]
 800e9ac:	f360 0203 	bfils	r2, r0, #0, #4
 800e9b0:	72da      	strbls	r2, [r3, #11]
 800e9b2:	bd10      	pop	{r4, pc}

0800e9b4 <send_health_period_status>:
{
 800e9b4:	b530      	push	{r4, r5, lr}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	4604      	mov	r4, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9ba:	2210      	movs	r2, #16
{
 800e9bc:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9be:	a802      	add	r0, sp, #8
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	f7f1 ff89 	bl	80008d8 <memset>
 800e9c6:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_HEALTH_PERIOD_STATUS);
 800e9c8:	a802      	add	r0, sp, #8
 800e9ca:	f248 0137 	movw	r1, #32823	; 0x8037
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800e9ce:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_HEALTH_PERIOD_STATUS);
 800e9d2:	f7fd fdaf 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, model->pub->period_div);
 800e9d6:	68a3      	ldr	r3, [r4, #8]
 800e9d8:	7ad9      	ldrb	r1, [r3, #11]
 800e9da:	a802      	add	r0, sp, #8
 800e9dc:	f001 010f 	and.w	r1, r1, #15
 800e9e0:	f002 fea3 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	aa02      	add	r2, sp, #8
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7fd fdc3 	bl	800c578 <bt_mesh_model_send>
}
 800e9f2:	b007      	add	sp, #28
 800e9f4:	bd30      	pop	{r4, r5, pc}

0800e9f6 <health_period_set>:
{
 800e9f6:	b538      	push	{r3, r4, r5, lr}
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
 800e9fc:	f7ff ffcd 	bl	800e99a <health_period_set_unrel>
	send_health_period_status(model, ctx);
 800ea00:	4629      	mov	r1, r5
 800ea02:	4620      	mov	r0, r4
}
 800ea04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
 800ea08:	f7ff bfd4 	b.w	800e9b4 <send_health_period_status>

0800ea0c <health_period_get>:
	send_health_period_status(model, ctx);
 800ea0c:	f7ff bfd2 	b.w	800e9b4 <send_health_period_status>

0800ea10 <send_attention_status>:
{
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	4605      	mov	r5, r0
 800ea14:	b086      	sub	sp, #24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800ea16:	2210      	movs	r2, #16
{
 800ea18:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
 800ea1a:	a802      	add	r0, sp, #8
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	f7f1 ff5b 	bl	80008d8 <memset>
	return _timeout_remaining_get(&work->timeout);
 800ea22:	69a8      	ldr	r0, [r5, #24]
 800ea24:	2307      	movs	r3, #7
 800ea26:	3014      	adds	r0, #20
 800ea28:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea2c:	f003 fec8 	bl	80127c0 <_timeout_remaining_get>
	bt_mesh_model_msg_init(msg, OP_ATTENTION_STATUS);
 800ea30:	f248 0107 	movw	r1, #32775	; 0x8007
 800ea34:	4604      	mov	r4, r0
 800ea36:	a802      	add	r0, sp, #8
 800ea38:	f7fd fd7c 	bl	800c534 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, time);
 800ea3c:	a802      	add	r0, sp, #8
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
 800ea3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ea42:	fb94 f1f1 	sdiv	r1, r4, r1
	net_buf_simple_add_u8(msg, time);
 800ea46:	b2c9      	uxtb	r1, r1
 800ea48:	f002 fe6f 	bl	801172a <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	aa02      	add	r2, sp, #8
 800ea52:	4631      	mov	r1, r6
 800ea54:	4628      	mov	r0, r5
 800ea56:	f7fd fd8f 	bl	800c578 <bt_mesh_model_send>
}
 800ea5a:	b006      	add	sp, #24
 800ea5c:	bd70      	pop	{r4, r5, r6, pc}

0800ea5e <attention_get>:
	send_attention_status(model, ctx);
 800ea5e:	f7ff bfd7 	b.w	800ea10 <send_attention_status>

0800ea62 <health_fault_test_unrel>:
{
 800ea62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
 800ea66:	6987      	ldr	r7, [r0, #24]
{
 800ea68:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
 800ea6a:	4610      	mov	r0, r2
{
 800ea6c:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
 800ea6e:	f002 fec0 	bl	80117f2 <net_buf_simple_pull_u8>
 800ea72:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
 800ea74:	4628      	mov	r0, r5
 800ea76:	f002 fec4 	bl	8011802 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
 800ea7c:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
 800ea7e:	b133      	cbz	r3, 800ea8e <health_fault_test_unrel+0x2c>
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	b123      	cbz	r3, 800ea8e <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
 800ea84:	4631      	mov	r1, r6
 800ea86:	4620      	mov	r0, r4
}
 800ea88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
 800ea8c:	4718      	bx	r3
 800ea8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea92 <health_fault_clear_unrel>:
{
 800ea92:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
 800ea94:	6985      	ldr	r5, [r0, #24]
{
 800ea96:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f002 feb2 	bl	8011802 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
 800ea9e:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
 800eaa0:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
 800eaa2:	b12b      	cbz	r3, 800eab0 <health_fault_clear_unrel+0x1e>
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	b11b      	cbz	r3, 800eab0 <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
 800eaa8:	4620      	mov	r0, r4
}
 800eaaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
 800eaae:	4718      	bx	r3
 800eab0:	bd70      	pop	{r4, r5, r6, pc}

0800eab2 <health_get_registered>:
{
 800eab2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800eab6:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
 800eab8:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 800eabc:	460f      	mov	r7, r1
 800eabe:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
 800eac0:	2105      	movs	r1, #5
 800eac2:	4610      	mov	r0, r2
 800eac4:	f7fd fd36 	bl	800c534 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
 800eac8:	2101      	movs	r1, #1
 800eaca:	4620      	mov	r0, r4
 800eacc:	f002 fe1e 	bl	801170c <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
 800ead0:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
 800ead2:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
 800ead4:	4620      	mov	r0, r4
 800ead6:	f002 fe30 	bl	801173a <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
 800eada:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eade:	b1ab      	cbz	r3, 800eb0c <health_get_registered+0x5a>
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b19b      	cbz	r3, 800eb0c <health_get_registered+0x5a>
		u8_t fault_count = net_buf_simple_tailroom(msg) - 4;
 800eae4:	4620      	mov	r0, r4
 800eae6:	f002 feb6 	bl	8011856 <net_buf_simple_tailroom>
 800eaea:	aa04      	add	r2, sp, #16
 800eaec:	3804      	subs	r0, #4
 800eaee:	f802 0d01 	strb.w	r0, [r2, #-1]!
	return buf->data + buf->len;
 800eaf2:	6821      	ldr	r1, [r4, #0]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
 800eaf4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eaf8:	88a3      	ldrh	r3, [r4, #4]
 800eafa:	9200      	str	r2, [sp, #0]
 800eafc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800eb00:	440b      	add	r3, r1
 800eb02:	462a      	mov	r2, r5
 800eb04:	4639      	mov	r1, r7
 800eb06:	4630      	mov	r0, r6
 800eb08:	47c0      	blx	r8
		if (err) {
 800eb0a:	b110      	cbz	r0, 800eb12 <health_get_registered+0x60>
		*test_id = HEALTH_TEST_STANDARD;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	702b      	strb	r3, [r5, #0]
}
 800eb10:	e004      	b.n	800eb1c <health_get_registered+0x6a>
			net_buf_simple_add(msg, fault_count);
 800eb12:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800eb16:	4620      	mov	r0, r4
 800eb18:	f002 fdf8 	bl	801170c <net_buf_simple_add>
}
 800eb1c:	b004      	add	sp, #16
 800eb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb22 <health_fault_test>:
{
 800eb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb26:	b0b8      	sub	sp, #224	; 0xe0
 800eb28:	4615      	mov	r5, r2
 800eb2a:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800eb2c:	22d4      	movs	r2, #212	; 0xd4
{
 800eb2e:	460f      	mov	r7, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800eb30:	a803      	add	r0, sp, #12
 800eb32:	2100      	movs	r1, #0
 800eb34:	f7f1 fed0 	bl	80008d8 <memset>
 800eb38:	23cc      	movs	r3, #204	; 0xcc
	test_id = net_buf_simple_pull_u8(buf);
 800eb3a:	4628      	mov	r0, r5
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800eb3c:	f8ad 3012 	strh.w	r3, [sp, #18]
	struct bt_mesh_health_srv *srv = model->user_data;
 800eb40:	f8d4 8018 	ldr.w	r8, [r4, #24]
	test_id = net_buf_simple_pull_u8(buf);
 800eb44:	f002 fe55 	bl	80117f2 <net_buf_simple_pull_u8>
 800eb48:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f002 fe59 	bl	8011802 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
 800eb50:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
 800eb54:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
 800eb56:	b973      	cbnz	r3, 800eb76 <health_fault_test+0x54>
	health_get_registered(model, company_id, sdu);
 800eb58:	aa03      	add	r2, sp, #12
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f7ff ffa8 	bl	800eab2 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
 800eb62:	2300      	movs	r3, #0
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	aa03      	add	r2, sp, #12
 800eb68:	4639      	mov	r1, r7
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f7fd fd04 	bl	800c578 <bt_mesh_model_send>
}
 800eb70:	b038      	add	sp, #224	; 0xe0
 800eb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (srv->cb && srv->cb->fault_test) {
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0ed      	beq.n	800eb58 <health_fault_test+0x36>
		err = srv->cb->fault_test(model, test_id, company_id);
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	4631      	mov	r1, r6
 800eb80:	4620      	mov	r0, r4
 800eb82:	4798      	blx	r3
		if (err) {
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d0e7      	beq.n	800eb58 <health_fault_test+0x36>
 800eb88:	e7f2      	b.n	800eb70 <health_fault_test+0x4e>

0800eb8a <health_fault_clear>:
{
 800eb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	b0b9      	sub	sp, #228	; 0xe4
 800eb90:	4615      	mov	r5, r2
 800eb92:	460e      	mov	r6, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800eb94:	22d4      	movs	r2, #212	; 0xd4
 800eb96:	2100      	movs	r1, #0
 800eb98:	a803      	add	r0, sp, #12
 800eb9a:	f7f1 fe9d 	bl	80008d8 <memset>
 800eb9e:	23cc      	movs	r3, #204	; 0xcc
	struct bt_mesh_health_srv *srv = model->user_data;
 800eba0:	69a7      	ldr	r7, [r4, #24]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800eba2:	f8ad 3012 	strh.w	r3, [sp, #18]
	company_id = net_buf_simple_pull_le16(buf);
 800eba6:	4628      	mov	r0, r5
 800eba8:	f002 fe2b 	bl	8011802 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
 800ebac:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
 800ebae:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
 800ebb0:	b123      	cbz	r3, 800ebbc <health_fault_clear+0x32>
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	b113      	cbz	r3, 800ebbc <health_fault_clear+0x32>
		srv->cb->fault_clear(model, company_id);
 800ebb6:	4601      	mov	r1, r0
 800ebb8:	4620      	mov	r0, r4
 800ebba:	4798      	blx	r3
	health_get_registered(model, company_id, sdu);
 800ebbc:	aa03      	add	r2, sp, #12
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7ff ff76 	bl	800eab2 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	aa03      	add	r2, sp, #12
 800ebcc:	4631      	mov	r1, r6
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f7fd fcd2 	bl	800c578 <bt_mesh_model_send>
}
 800ebd4:	b039      	add	sp, #228	; 0xe4
 800ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebd8 <health_fault_get>:
{
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	b0b8      	sub	sp, #224	; 0xe0
 800ebdc:	4604      	mov	r4, r0
 800ebde:	460d      	mov	r5, r1
 800ebe0:	4616      	mov	r6, r2
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	22d4      	movs	r2, #212	; 0xd4
 800ebe6:	a803      	add	r0, sp, #12
 800ebe8:	f7f1 fe76 	bl	80008d8 <memset>
 800ebec:	23cc      	movs	r3, #204	; 0xcc
	company_id = net_buf_simple_pull_le16(buf);
 800ebee:	4630      	mov	r0, r6
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
 800ebf0:	f8ad 3012 	strh.w	r3, [sp, #18]
	company_id = net_buf_simple_pull_le16(buf);
 800ebf4:	f002 fe05 	bl	8011802 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, sdu);
 800ebf8:	aa03      	add	r2, sp, #12
 800ebfa:	4601      	mov	r1, r0
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f7ff ff58 	bl	800eab2 <health_get_registered>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
 800ec02:	2300      	movs	r3, #0
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	aa03      	add	r2, sp, #12
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7fd fcb4 	bl	800c578 <bt_mesh_model_send>
}
 800ec10:	b038      	add	sp, #224	; 0xe0
 800ec12:	bd70      	pop	{r4, r5, r6, pc}

0800ec14 <health_pub_update>:
{
 800ec14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
 800ec18:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
 800ec1a:	f8d0 a018 	ldr.w	sl, [r0, #24]
	count = health_get_current(mod, pub->msg);
 800ec1e:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
 800ec20:	2104      	movs	r1, #4
{
 800ec22:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
 800ec24:	4620      	mov	r0, r4
 800ec26:	f7fd fc85 	bl	800c534 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f002 fd6d 	bl	801170c <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
 800ec32:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
 800ec34:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
 800ec36:	4620      	mov	r0, r4
 800ec38:	f002 fd68 	bl	801170c <net_buf_simple_add>
 800ec3c:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
 800ec3e:	f7fd fe11 	bl	800c864 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
 800ec42:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
 800ec46:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
 800ec48:	b1b3      	cbz	r3, 800ec78 <health_pub_update+0x64>
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	b1a3      	cbz	r3, 800ec78 <health_pub_update+0x64>
		fault_count = net_buf_simple_tailroom(msg);
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f002 fe01 	bl	8011856 <net_buf_simple_tailroom>
 800ec54:	f88d 000d 	strb.w	r0, [sp, #13]
 800ec58:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
 800ec5a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ec5e:	88a3      	ldrh	r3, [r4, #4]
 800ec60:	f10d 000d 	add.w	r0, sp, #13
 800ec64:	9000      	str	r0, [sp, #0]
 800ec66:	f8d1 a000 	ldr.w	sl, [r1]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	f10d 020e 	add.w	r2, sp, #14
 800ec72:	4640      	mov	r0, r8
 800ec74:	47d0      	blx	sl
		if (err) {
 800ec76:	b148      	cbz	r0, 800ec8c <health_pub_update+0x78>
		sys_put_le16(comp->cid, company_ptr);
 800ec78:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
 800ec7c:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
 800ec7e:	0a1b      	lsrs	r3, r3, #8
 800ec80:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
 800ec82:	2300      	movs	r3, #0
 800ec84:	703b      	strb	r3, [r7, #0]
		fault_count = 0;
 800ec86:	f88d 300d 	strb.w	r3, [sp, #13]
 800ec8a:	e009      	b.n	800eca0 <health_pub_update+0x8c>
			sys_put_le16(company_id, company_ptr);
 800ec8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
 800ec90:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
 800ec92:	0a1b      	lsrs	r3, r3, #8
 800ec94:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
 800ec96:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f002 fd36 	bl	801170c <net_buf_simple_add>
	return fault_count;
 800eca0:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
 800eca4:	b91a      	cbnz	r2, 800ecae <health_pub_update+0x9a>
		pub->period_div = 0;
 800eca6:	7af3      	ldrb	r3, [r6, #11]
 800eca8:	f362 0303 	bfi	r3, r2, #0, #4
 800ecac:	72f3      	strb	r3, [r6, #11]
}
 800ecae:	2000      	movs	r0, #0
 800ecb0:	b004      	add	sp, #16
 800ecb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800ecb8 <bt_mesh_health_srv_init>:
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
 800ecba:	6984      	ldr	r4, [r0, #24]
{
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	460e      	mov	r6, r1

	if (!srv) {
 800ecc0:	b914      	cbnz	r4, 800ecc8 <bt_mesh_health_srv_init+0x10>
		if (!primary) {
 800ecc2:	b981      	cbnz	r1, 800ece6 <bt_mesh_health_srv_init+0x2e>

	if (primary) {
		health_srv = srv;
	}

	return 0;
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
 800ecc8:	6883      	ldr	r3, [r0, #8]
 800ecca:	b163      	cbz	r3, 800ece6 <bt_mesh_health_srv_init+0x2e>
	model->pub->update = health_pub_update,
 800eccc:	4a07      	ldr	r2, [pc, #28]	; (800ecec <bt_mesh_health_srv_init+0x34>)
 800ecce:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
 800ecd0:	4907      	ldr	r1, [pc, #28]	; (800ecf0 <bt_mesh_health_srv_init+0x38>)
 800ecd2:	f104 0008 	add.w	r0, r4, #8
 800ecd6:	f003 fca5 	bl	8012624 <k_delayed_work_init>
	srv->model = model;
 800ecda:	6025      	str	r5, [r4, #0]
	if (primary) {
 800ecdc:	2e00      	cmp	r6, #0
 800ecde:	d0f1      	beq.n	800ecc4 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
 800ece0:	4b04      	ldr	r3, [pc, #16]	; (800ecf4 <bt_mesh_health_srv_init+0x3c>)
 800ece2:	601c      	str	r4, [r3, #0]
 800ece4:	e7ee      	b.n	800ecc4 <bt_mesh_health_srv_init+0xc>
		return -EINVAL;
 800ece6:	f06f 0015 	mvn.w	r0, #21
}
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	0800ec15 	.word	0x0800ec15
 800ecf0:	0800e989 	.word	0x0800e989
 800ecf4:	20001468 	.word	0x20001468

0800ecf8 <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
 800ecf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfc:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
 800ecfe:	4605      	mov	r5, r0
 800ed00:	b9a8      	cbnz	r0, 800ed2e <bt_mesh_attention+0x36>
		srv = health_srv;
 800ed02:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <bt_mesh_attention+0x54>)
 800ed04:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
 800ed06:	b1fc      	cbz	r4, 800ed48 <bt_mesh_attention+0x50>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
 800ed08:	6825      	ldr	r5, [r4, #0]
 800ed0a:	f104 0608 	add.w	r6, r4, #8
	} else {
		srv = model->user_data;
	}

	if (time) {
 800ed0e:	b187      	cbz	r7, 800ed32 <bt_mesh_attention+0x3a>
		if (srv->cb && srv->cb->attn_on) {
 800ed10:	6863      	ldr	r3, [r4, #4]
 800ed12:	b11b      	cbz	r3, 800ed1c <bt_mesh_attention+0x24>
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	b10b      	cbz	r3, 800ed1c <bt_mesh_attention+0x24>
			srv->cb->attn_on(model);
 800ed18:	4628      	mov	r0, r5
 800ed1a:	4798      	blx	r3
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
 800ed1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed20:	437a      	muls	r2, r7
 800ed22:	4631      	mov	r1, r6
 800ed24:	480a      	ldr	r0, [pc, #40]	; (800ed50 <bt_mesh_attention+0x58>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
 800ed26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2a:	f003 bce5 	b.w	80126f8 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
 800ed2e:	6984      	ldr	r4, [r0, #24]
 800ed30:	e7eb      	b.n	800ed0a <bt_mesh_attention+0x12>
		k_delayed_work_cancel(&srv->attn_timer);
 800ed32:	4630      	mov	r0, r6
 800ed34:	f003 fc94 	bl	8012660 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
 800ed38:	6863      	ldr	r3, [r4, #4]
 800ed3a:	b12b      	cbz	r3, 800ed48 <bt_mesh_attention+0x50>
 800ed3c:	695b      	ldr	r3, [r3, #20]
 800ed3e:	b11b      	cbz	r3, 800ed48 <bt_mesh_attention+0x50>
			srv->cb->attn_off(model);
 800ed40:	4628      	mov	r0, r5
}
 800ed42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
 800ed46:	4718      	bx	r3
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	20001468 	.word	0x20001468
 800ed50:	20001480 	.word	0x20001480

0800ed54 <attention_set_unrel>:
{
 800ed54:	b510      	push	{r4, lr}
 800ed56:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
 800ed58:	4610      	mov	r0, r2
 800ed5a:	f002 fd4a 	bl	80117f2 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
 800ed5e:	4601      	mov	r1, r0
 800ed60:	4620      	mov	r0, r4
}
 800ed62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
 800ed66:	f7ff bfc7 	b.w	800ecf8 <bt_mesh_attention>

0800ed6a <attention_set>:
{
 800ed6a:	b538      	push	{r3, r4, r5, lr}
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
 800ed70:	f7ff fff0 	bl	800ed54 <attention_set_unrel>
	send_attention_status(model, ctx);
 800ed74:	4629      	mov	r1, r5
 800ed76:	4620      	mov	r0, r4
}
 800ed78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
 800ed7c:	f7ff be48 	b.w	800ea10 <send_attention_status>

0800ed80 <net_buf_user_data>:
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800ed80:	89c3      	ldrh	r3, [r0, #14]
 800ed82:	4418      	add	r0, r3
 800ed84:	3013      	adds	r0, #19
}
 800ed86:	f020 0003 	bic.w	r0, r0, #3
 800ed8a:	4770      	bx	lr

0800ed8c <adv_alloc>:
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id].adv;
}
 800ed8c:	4b02      	ldr	r3, [pc, #8]	; (800ed98 <adv_alloc+0xc>)
 800ed8e:	2218      	movs	r2, #24
 800ed90:	fb02 3000 	mla	r0, r2, r0, r3
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	20000db8 	.word	0x20000db8

0800ed9c <friend_purge_old_ack>:
	return 0;
}

static void friend_purge_old_ack(struct bt_mesh_friend *frnd, u64_t *seq_auth,
				 u16_t src)
{
 800ed9c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800eda0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800eda2:	4605      	mov	r5, r0
	sys_snode_t *cur, *prev = NULL;
 800eda4:	2600      	movs	r6, #0

	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);

	for (cur = sys_slist_peek_head(&frnd->queue);
 800eda6:	b90c      	cbnz	r4, 800edac <friend_purge_old_ack+0x10>

			net_buf_unref(buf);
			break;
		}
	}
}
 800eda8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
		if (BT_MESH_ADV(buf)->addr == src &&
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff ffe7 	bl	800ed80 <net_buf_user_data>
 800edb2:	6800      	ldr	r0, [r0, #0]
 800edb4:	8943      	ldrh	r3, [r0, #10]
 800edb6:	4293      	cmp	r3, r2
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	d11c      	bne.n	800edf6 <friend_purge_old_ack+0x5a>
 800edbc:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
 800edc0:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800edc4:	45d9      	cmp	r9, fp
 800edc6:	bf08      	it	eq
 800edc8:	45d0      	cmpeq	r8, sl
 800edca:	d114      	bne.n	800edf6 <friend_purge_old_ack+0x5a>
 800edcc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
	if (!prev_node) {
 800edce:	b96e      	cbnz	r6, 800edec <friend_purge_old_ack+0x50>
		if (list->tail == node) {
 800edd0:	4294      	cmp	r4, r2
		list->head = node->next;
 800edd2:	64ab      	str	r3, [r5, #72]	; 0x48
		if (list->tail == node) {
 800edd4:	d100      	bne.n	800edd8 <friend_purge_old_ack+0x3c>
			list->tail = list->head;
 800edd6:	64eb      	str	r3, [r5, #76]	; 0x4c
			frnd->queue_size--;
 800edd8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800edda:	3b01      	subs	r3, #1
 800eddc:	652b      	str	r3, [r5, #80]	; 0x50
			buf->frags = NULL;
 800edde:	2300      	movs	r3, #0
 800ede0:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
 800ede2:	4620      	mov	r0, r4
}
 800ede4:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
 800ede8:	f002 bc70 	b.w	80116cc <net_buf_unref>
		if (list->tail == node) {
 800edec:	4294      	cmp	r4, r2
		prev_node->next = node->next;
 800edee:	6033      	str	r3, [r6, #0]
			list->tail = prev_node;
 800edf0:	bf08      	it	eq
 800edf2:	64ee      	streq	r6, [r5, #76]	; 0x4c
 800edf4:	e7f0      	b.n	800edd8 <friend_purge_old_ack+0x3c>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
 800edf6:	4626      	mov	r6, r4
 800edf8:	461c      	mov	r4, r3
 800edfa:	e7d4      	b.n	800eda6 <friend_purge_old_ack+0xa>

0800edfc <friend_clear>:
{
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
 800ee00:	3014      	adds	r0, #20
 800ee02:	f003 fc2d 	bl	8012660 <k_delayed_work_cancel>
	friend_cred_del(frnd->net_idx, frnd->lpn);
 800ee06:	8821      	ldrh	r1, [r4, #0]
 800ee08:	89a0      	ldrh	r0, [r4, #12]
 800ee0a:	f7fa fe2f 	bl	8009a6c <friend_cred_del>
	if (frnd->last) {
 800ee0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ee10:	b17a      	cbz	r2, 800ee32 <friend_clear+0x36>
		if (frnd->pending_buf) {
 800ee12:	78e3      	ldrb	r3, [r4, #3]
 800ee14:	06db      	lsls	r3, r3, #27
 800ee16:	d507      	bpl.n	800ee28 <friend_clear+0x2c>
			BT_MESH_ADV(frnd->last)->busy = 0;
 800ee18:	4610      	mov	r0, r2
 800ee1a:	f7ff ffb1 	bl	800ed80 <net_buf_user_data>
 800ee1e:	6803      	ldr	r3, [r0, #0]
 800ee20:	7a19      	ldrb	r1, [r3, #8]
 800ee22:	f36f 0182 	bfc	r1, #2, #1
 800ee26:	7219      	strb	r1, [r3, #8]
		net_buf_unref(frnd->last);
 800ee28:	4610      	mov	r0, r2
 800ee2a:	f002 fc4f 	bl	80116cc <net_buf_unref>
		frnd->last = NULL;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	6463      	str	r3, [r4, #68]	; 0x44
		net_buf_unref(net_buf_slist_get(&frnd->queue));
 800ee32:	f104 0548 	add.w	r5, r4, #72	; 0x48
	while (!sys_slist_is_empty(&frnd->queue)) {
 800ee36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee38:	b9bb      	cbnz	r3, 800ee6a <friend_clear+0x6e>
		while (!sys_slist_is_empty(&seg->queue)) {
 800ee3a:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 800ee3e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ee40:	b9c9      	cbnz	r1, 800ee76 <friend_clear+0x7a>
	frnd->valid = 0;
 800ee42:	78e3      	ldrb	r3, [r4, #3]
	frnd->queue_size = 0;
 800ee44:	6521      	str	r1, [r4, #80]	; 0x50
	frnd->valid = 0;
 800ee46:	f361 1345 	bfi	r3, r1, #5, #1
	frnd->established = 0;
 800ee4a:	f361 1386 	bfi	r3, r1, #6, #1
	frnd->pending_buf = 0;
 800ee4e:	f361 1304 	bfi	r3, r1, #4, #1
	frnd->fsn = 0;
 800ee52:	f361 0300 	bfi	r3, r1, #0, #1
	frnd->pending_req = 0;
 800ee56:	f361 0382 	bfi	r3, r1, #2, #1
 800ee5a:	70e3      	strb	r3, [r4, #3]
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
 800ee5c:	f104 000e 	add.w	r0, r4, #14
 800ee60:	2206      	movs	r2, #6
}
 800ee62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
 800ee66:	f7f1 bd37 	b.w	80008d8 <memset>
		net_buf_unref(net_buf_slist_get(&frnd->queue));
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f002 fbef 	bl	801164e <net_buf_slist_get>
 800ee70:	f002 fc2c 	bl	80116cc <net_buf_unref>
 800ee74:	e7df      	b.n	800ee36 <friend_clear+0x3a>
			net_buf_unref(net_buf_slist_get(&seg->queue));
 800ee76:	4628      	mov	r0, r5
 800ee78:	f002 fbe9 	bl	801164e <net_buf_slist_get>
 800ee7c:	f002 fc26 	bl	80116cc <net_buf_unref>
 800ee80:	e7dd      	b.n	800ee3e <friend_clear+0x42>
	...

0800ee84 <send_friend_clear>:
{
 800ee84:	b530      	push	{r4, r5, lr}
 800ee86:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
 800ee88:	8982      	ldrh	r2, [r0, #12]
 800ee8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ee8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee92:	2500      	movs	r5, #0
 800ee94:	f8ad 2016 	strh.w	r2, [sp, #22]
 800ee98:	f8b0 2058 	ldrh.w	r2, [r0, #88]	; 0x58
 800ee9c:	9506      	str	r5, [sp, #24]
 800ee9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 800eea2:	227f      	movs	r2, #127	; 0x7f
 800eea4:	ab05      	add	r3, sp, #20
 800eea6:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
 800eeaa:	4a12      	ldr	r2, [pc, #72]	; (800eef4 <send_friend_clear+0x70>)
 800eeac:	9207      	str	r2, [sp, #28]
{
 800eeae:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
 800eeb0:	9308      	str	r3, [sp, #32]
 800eeb2:	9509      	str	r5, [sp, #36]	; 0x24
		.src  = bt_mesh_primary_addr(),
 800eeb4:	f7fd fa2e 	bl	800c314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
 800eeb8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
 800eebc:	f7ff fa68 	bl	800e390 <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
 800eec0:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
 800eec2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
 800eec6:	0213      	lsls	r3, r2, #8
 800eec8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
 800eecc:	8922      	ldrh	r2, [r4, #8]
	struct bt_mesh_ctl_friend_clear req = {
 800eece:	f8ad 3010 	strh.w	r3, [sp, #16]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
 800eed2:	0213      	lsls	r3, r2, #8
 800eed4:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
 800eed8:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
 800eedc:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <send_friend_clear+0x74>)
 800eede:	9301      	str	r3, [sp, #4]
 800eee0:	9402      	str	r4, [sp, #8]
 800eee2:	9500      	str	r5, [sp, #0]
 800eee4:	2304      	movs	r3, #4
 800eee6:	aa04      	add	r2, sp, #16
 800eee8:	2105      	movs	r1, #5
 800eeea:	a807      	add	r0, sp, #28
 800eeec:	f7fc f87c 	bl	800afe8 <bt_mesh_ctl_send>
}
 800eef0:	b00b      	add	sp, #44	; 0x2c
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	20005d84 	.word	0x20005d84
 800eef8:	08013d1c 	.word	0x08013d1c

0800eefc <k_delayed_work_submit>:
 800eefc:	460a      	mov	r2, r1
 800eefe:	4601      	mov	r1, r0
 800ef00:	4801      	ldr	r0, [pc, #4]	; (800ef08 <k_delayed_work_submit+0xc>)
 800ef02:	f003 bbf9 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 800ef06:	bf00      	nop
 800ef08:	20001480 	.word	0x20001480

0800ef0c <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
 800ef0c:	f8b1 305a 	ldrh.w	r3, [r1, #90]	; 0x5a
{
 800ef10:	b510      	push	{r4, lr}
 800ef12:	460c      	mov	r4, r1
	k_delayed_work_submit(&frnd->clear.timer,
 800ef14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ef18:	4359      	muls	r1, r3
 800ef1a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef1e:	f7ff ffed 	bl	800eefc <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2;
 800ef22:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800ef26:	005b      	lsls	r3, r3, #1
 800ef28:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ef2c:	bd10      	pop	{r4, pc}
	...

0800ef30 <create_friend_pdu>:
{
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	4681      	mov	r9, r0
 800ef36:	b089      	sub	sp, #36	; 0x24
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ef38:	8980      	ldrh	r0, [r0, #12]
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
 800ef3a:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f094 <create_friend_pdu+0x164>
{
 800ef3e:	460c      	mov	r4, r1
 800ef40:	4690      	mov	r8, r2
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ef42:	f7fa fc79 	bl	8009838 <bt_mesh_subnet_get>
	buf = friend_buf_alloc(info->src);
 800ef46:	f8b4 a000 	ldrh.w	sl, [r4]
	sub = bt_mesh_subnet_get(frnd->net_idx);
 800ef4a:	4606      	mov	r6, r0
	u8_t xmit = bt_mesh_net_transmit_get();
 800ef4c:	f7ff fa20 	bl	800e390 <bt_mesh_net_transmit_get>
						   BT_MESH_TRANSMIT_INT(xmit),
 800ef50:	f3c0 03c7 	ubfx	r3, r0, #3, #8
 800ef54:	3301      	adds	r3, #1
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
 800ef56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	9303      	str	r3, [sp, #12]
 800ef60:	f000 0707 	and.w	r7, r0, #7
 800ef64:	2300      	movs	r3, #0
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	463b      	mov	r3, r7
 800ef70:	4946      	ldr	r1, [pc, #280]	; (800f08c <create_friend_pdu+0x15c>)
 800ef72:	4658      	mov	r0, fp
 800ef74:	f7fa f950 	bl	8009218 <bt_mesh_adv_create_from_pool>
		if (!buf) {
 800ef78:	4605      	mov	r5, r0
 800ef7a:	bb10      	cbnz	r0, 800efc2 <create_friend_pdu+0x92>
		if (bt_mesh.frnd[i].queue_size > frnd->queue_size) {
 800ef7c:	4b44      	ldr	r3, [pc, #272]	; (800f090 <create_friend_pdu+0x160>)
 800ef7e:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 800ef82:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ef84:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 800ef88:	3324      	adds	r3, #36	; 0x24
 800ef8a:	4291      	cmp	r1, r2
 800ef8c:	bf98      	it	ls
 800ef8e:	4618      	movls	r0, r3
	buf = net_buf_slist_get(&frnd->queue);
 800ef90:	3048      	adds	r0, #72	; 0x48
 800ef92:	f002 fb5c 	bl	801164e <net_buf_slist_get>
	net_buf_unref(buf);
 800ef96:	f002 fb99 	bl	80116cc <net_buf_unref>
 800ef9a:	e7e3      	b.n	800ef64 <create_friend_pdu+0x34>
		if (friend_cred_get(sub, frnd->lpn, &nid, &enc, &priv)) {
 800ef9c:	ab07      	add	r3, sp, #28
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	f8b9 1000 	ldrh.w	r1, [r9]
 800efa4:	ab06      	add	r3, sp, #24
 800efa6:	f10d 0217 	add.w	r2, sp, #23
 800efaa:	4630      	mov	r0, r6
 800efac:	f7fa fd7e 	bl	8009aac <friend_cred_get>
 800efb0:	b388      	cbz	r0, 800f016 <create_friend_pdu+0xe6>
	net_buf_unref(buf);
 800efb2:	4628      	mov	r0, r5
 800efb4:	f002 fb8a 	bl	80116cc <net_buf_unref>
	return NULL;
 800efb8:	2500      	movs	r5, #0
}
 800efba:	4628      	mov	r0, r5
 800efbc:	b009      	add	sp, #36	; 0x24
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BT_MESH_ADV(buf)->addr = src;
 800efc2:	f7ff fedd 	bl	800ed80 <net_buf_user_data>
 800efc6:	6803      	ldr	r3, [r0, #0]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800efc8:	4628      	mov	r0, r5
	BT_MESH_ADV(buf)->addr = src;
 800efca:	f8a3 a00a 	strh.w	sl, [r3, #10]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800efce:	f7ff fed7 	bl	800ed80 <net_buf_user_data>
 800efd2:	6803      	ldr	r3, [r0, #0]
 800efd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800efd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efdc:	e9c3 0104 	strd	r0, r1, [r3, #16]
	if (info->ctl && TRANS_CTL_OP(sdu->data) == TRANS_CTL_OP_FRIEND_OFFER) {
 800efe0:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	dad9      	bge.n	800ef9c <create_friend_pdu+0x6c>
 800efe8:	f8d8 3000 	ldr.w	r3, [r8]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eff2:	2b04      	cmp	r3, #4
 800eff4:	d1d2      	bne.n	800ef9c <create_friend_pdu+0x6c>
		enc = sub->keys[sub->kr_flag].enc;
 800eff6:	7fb2      	ldrb	r2, [r6, #30]
 800eff8:	2359      	movs	r3, #89	; 0x59
 800effa:	4353      	muls	r3, r2
 800effc:	f103 0241 	add.w	r2, r3, #65	; 0x41
 800f000:	4432      	add	r2, r6
 800f002:	9206      	str	r2, [sp, #24]
		priv = sub->keys[sub->kr_flag].privacy;
 800f004:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800f008:	4432      	add	r2, r6
		nid = sub->keys[sub->kr_flag].nid;
 800f00a:	441e      	add	r6, r3
		priv = sub->keys[sub->kr_flag].privacy;
 800f00c:	9207      	str	r2, [sp, #28]
		nid = sub->keys[sub->kr_flag].nid;
 800f00e:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800f012:	f88d 3017 	strb.w	r3, [sp, #23]
	net_buf_add_u8(buf, (nid | (info->iv_index & 1) << 7));
 800f016:	68a3      	ldr	r3, [r4, #8]
 800f018:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800f01c:	f105 0608 	add.w	r6, r5, #8
 800f020:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 800f024:	b2c9      	uxtb	r1, r1
 800f026:	4630      	mov	r0, r6
 800f028:	f002 fb7f 	bl	801172a <net_buf_simple_add_u8>
	if (info->ctl) {
 800f02c:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800f030:	79e1      	ldrb	r1, [r4, #7]
 800f032:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
 800f034:	bfb4      	ite	lt
 800f036:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
		net_buf_add_u8(buf, info->ttl);
 800f03a:	f001 017f 	andge.w	r1, r1, #127	; 0x7f
 800f03e:	4630      	mov	r0, r6
 800f040:	f002 fb73 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, info->seq, sizeof(info->seq));
 800f044:	2203      	movs	r2, #3
 800f046:	1d21      	adds	r1, r4, #4
 800f048:	4630      	mov	r0, r6
 800f04a:	f002 fb65 	bl	8011718 <net_buf_simple_add_mem>
	net_buf_add_be16(buf, info->src);
 800f04e:	8821      	ldrh	r1, [r4, #0]
 800f050:	4630      	mov	r0, r6
 800f052:	f002 fb81 	bl	8011758 <net_buf_simple_add_be16>
	net_buf_add_be16(buf, info->dst);
 800f056:	8861      	ldrh	r1, [r4, #2]
 800f058:	4630      	mov	r0, r6
 800f05a:	f002 fb7d 	bl	8011758 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, sdu->data, sdu->len);
 800f05e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800f062:	f8d8 1000 	ldr.w	r1, [r8]
 800f066:	4630      	mov	r0, r6
 800f068:	f002 fb56 	bl	8011718 <net_buf_simple_add_mem>
	if (bt_mesh_net_encrypt(enc, &buf->b, info->iv_index, false)) {
 800f06c:	2300      	movs	r3, #0
 800f06e:	68a2      	ldr	r2, [r4, #8]
 800f070:	9806      	ldr	r0, [sp, #24]
 800f072:	4631      	mov	r1, r6
 800f074:	f7fc feb2 	bl	800bddc <bt_mesh_net_encrypt>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d19a      	bne.n	800efb2 <create_friend_pdu+0x82>
	if (bt_mesh_net_obfuscate(buf->data, info->iv_index, priv)) {
 800f07c:	9a07      	ldr	r2, [sp, #28]
 800f07e:	68a1      	ldr	r1, [r4, #8]
 800f080:	68a8      	ldr	r0, [r5, #8]
 800f082:	f7fc fe83 	bl	800bd8c <bt_mesh_net_obfuscate>
 800f086:	2800      	cmp	r0, #0
 800f088:	d097      	beq.n	800efba <create_friend_pdu+0x8a>
 800f08a:	e792      	b.n	800efb2 <create_friend_pdu+0x82>
 800f08c:	0800ed8d 	.word	0x0800ed8d
 800f090:	20005bd0 	.word	0x20005bd0
 800f094:	20006544 	.word	0x20006544

0800f098 <encode_friend_ctl>:
{
 800f098:	b530      	push	{r4, r5, lr}
 800f09a:	4604      	mov	r4, r0
 800f09c:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
 800f09e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800f0a2:	4610      	mov	r0, r2
{
 800f0a4:	4615      	mov	r5, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
 800f0a6:	f002 fb93 	bl	80117d0 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
 800f0aa:	f7fd f933 	bl	800c314 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
 800f0ae:	8823      	ldrh	r3, [r4, #0]
 800f0b0:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ctl = 1;
 800f0b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
 800f0b8:	4a11      	ldr	r2, [pc, #68]	; (800f100 <encode_friend_ctl+0x68>)
	info.src = bt_mesh_primary_addr();
 800f0ba:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.ttl = 0;
 800f0be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0c2:	f36f 0306 	bfc	r3, #0, #7
 800f0c6:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
 800f0ca:	6853      	ldr	r3, [r2, #4]
 800f0cc:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800f0d0:	1408      	asrs	r0, r1, #16
 800f0d2:	f88d 0008 	strb.w	r0, [sp, #8]
	info.seq[1] = (bt_mesh.seq >> 8);
 800f0d6:	1208      	asrs	r0, r1, #8
 800f0d8:	f88d 0009 	strb.w	r0, [sp, #9]
	info.seq[2] = bt_mesh.seq++;
 800f0dc:	1c48      	adds	r0, r1, #1
 800f0de:	f360 0317 	bfi	r3, r0, #0, #24
 800f0e2:	6053      	str	r3, [r2, #4]
 800f0e4:	f88d 100a 	strb.w	r1, [sp, #10]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800f0e8:	6811      	ldr	r1, [r2, #0]
 800f0ea:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800f0ee:	1acb      	subs	r3, r1, r3
	return create_friend_pdu(frnd, &info, sdu);
 800f0f0:	462a      	mov	r2, r5
 800f0f2:	a901      	add	r1, sp, #4
 800f0f4:	4620      	mov	r0, r4
	info.iv_index = BT_MESH_NET_IVI_TX;
 800f0f6:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
 800f0f8:	f7ff ff1a 	bl	800ef30 <create_friend_pdu>
}
 800f0fc:	b005      	add	sp, #20
 800f0fe:	bd30      	pop	{r4, r5, pc}
 800f100:	20005bd0 	.word	0x20005bd0

0800f104 <enqueue_sub_cfm>:
{
 800f104:	b530      	push	{r4, r5, lr}
 800f106:	b085      	sub	sp, #20
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
 800f108:	2300      	movs	r3, #0
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	2302      	movs	r3, #2
{
 800f110:	460d      	mov	r5, r1
 800f112:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
 800f114:	f8ad 300a 	strh.w	r3, [sp, #10]
	cfm = net_buf_simple_add(sdu, sizeof(*cfm));
 800f118:	2101      	movs	r1, #1
	buf->data = buf->__buf + reserve_head;
 800f11a:	f10d 030d 	add.w	r3, sp, #13
 800f11e:	a801      	add	r0, sp, #4
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f002 faf3 	bl	801170c <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
 800f126:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
 800f128:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
 800f12a:	2109      	movs	r1, #9
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff ffb3 	bl	800f098 <encode_friend_ctl>
	if (!buf) {
 800f132:	4605      	mov	r5, r0
 800f134:	b140      	cbz	r0, 800f148 <enqueue_sub_cfm+0x44>
	if (frnd->last) {
 800f136:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f138:	b108      	cbz	r0, 800f13e <enqueue_sub_cfm+0x3a>
		net_buf_unref(frnd->last);
 800f13a:	f002 fac7 	bl	80116cc <net_buf_unref>
	frnd->send_last = 1;
 800f13e:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
 800f140:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
 800f142:	f043 0302 	orr.w	r3, r3, #2
 800f146:	70e3      	strb	r3, [r4, #3]
}
 800f148:	b005      	add	sp, #20
 800f14a:	bd30      	pop	{r4, r5, pc}

0800f14c <clear_timeout>:
{
 800f14c:	b510      	push	{r4, lr}
 800f14e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 800f150:	f002 ffa0 	bl	8012094 <_impl_k_uptime_get_32>
	duration = k_uptime_get_32() - frnd->clear.start;
 800f154:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800f158:	1ac0      	subs	r0, r0, r3
	if (duration > 2 * frnd->poll_to) {
 800f15a:	f854 3c58 	ldr.w	r3, [r4, #-88]
 800f15e:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f162:	d903      	bls.n	800f16c <clear_timeout+0x20>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
 800f164:	2300      	movs	r3, #0
 800f166:	f824 3c04 	strh.w	r3, [r4, #-4]
		return;
 800f16a:	bd10      	pop	{r4, pc}
	send_friend_clear(frnd);
 800f16c:	f1a4 005c 	sub.w	r0, r4, #92	; 0x5c
}
 800f170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_friend_clear(frnd);
 800f174:	f7ff be86 	b.w	800ee84 <send_friend_clear>

0800f178 <friend_timeout>:
{
 800f178:	b538      	push	{r3, r4, r5, lr}
	if (frnd->send_last && frnd->last) {
 800f17a:	f810 3c11 	ldrb.w	r3, [r0, #-17]
 800f17e:	079a      	lsls	r2, r3, #30
{
 800f180:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
 800f182:	f1a0 0514 	sub.w	r5, r0, #20
	if (frnd->send_last && frnd->last) {
 800f186:	d514      	bpl.n	800f1b2 <friend_timeout+0x3a>
 800f188:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f18a:	b192      	cbz	r2, 800f1b2 <friend_timeout+0x3a>
		frnd->send_last = 0;
 800f18c:	f36f 0341 	bfc	r3, #1, #1
 800f190:	f800 3c11 	strb.w	r3, [r0, #-17]
	frnd->pending_req = 0;
 800f194:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800f198:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f19a:	4910      	ldr	r1, [pc, #64]	; (800f1dc <friend_timeout+0x64>)
	frnd->pending_buf = 1;
 800f19c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800f1a0:	f043 0310 	orr.w	r3, r3, #16
 800f1a4:	f804 3c11 	strb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800f1a8:	462a      	mov	r2, r5
}
 800f1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
 800f1ae:	f7fa b869 	b.w	8009284 <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
 800f1b2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f1b6:	2b40      	cmp	r3, #64	; 0x40
 800f1b8:	d104      	bne.n	800f1c4 <friend_timeout+0x4c>
		friend_clear(frnd);
 800f1ba:	4628      	mov	r0, r5
}
 800f1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		friend_clear(frnd);
 800f1c0:	f7ff be1c 	b.w	800edfc <friend_clear>
	frnd->last = net_buf_slist_get(&frnd->queue);
 800f1c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f1c8:	f002 fa41 	bl	801164e <net_buf_slist_get>
 800f1cc:	6320      	str	r0, [r4, #48]	; 0x30
	if (!frnd->last) {
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	d0f3      	beq.n	800f1ba <friend_timeout+0x42>
	frnd->queue_size--;
 800f1d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f1d8:	e7dc      	b.n	800f194 <friend_timeout+0x1c>
 800f1da:	bf00      	nop
 800f1dc:	08013d14 	.word	0x08013d14

0800f1e0 <friend_lpn_matches>:
static bool friend_lpn_matches(struct bt_mesh_friend *frnd, u16_t net_idx,
			       u16_t addr)
{
	int i;

	if (!frnd->established) {
 800f1e0:	78c3      	ldrb	r3, [r0, #3]
 800f1e2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800f1e6:	d012      	beq.n	800f20e <friend_lpn_matches+0x2e>
		return false;
	}

	if (net_idx != frnd->net_idx) {
 800f1e8:	8983      	ldrh	r3, [r0, #12]
 800f1ea:	428b      	cmp	r3, r1
 800f1ec:	d10f      	bne.n	800f20e <friend_lpn_matches+0x2e>
		return false;
	}

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
 800f1ee:	b213      	sxth	r3, r2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dc0a      	bgt.n	800f20a <friend_lpn_matches+0x2a>

		return false;
	}

	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
		if (frnd->sub_list[i] == addr) {
 800f1f4:	89c3      	ldrh	r3, [r0, #14]
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d00b      	beq.n	800f212 <friend_lpn_matches+0x32>
 800f1fa:	8a03      	ldrh	r3, [r0, #16]
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d008      	beq.n	800f212 <friend_lpn_matches+0x32>
 800f200:	8a40      	ldrh	r0, [r0, #18]
		if (addr == frnd->lpn) {
 800f202:	1a83      	subs	r3, r0, r2
 800f204:	4258      	negs	r0, r3
 800f206:	4158      	adcs	r0, r3
 800f208:	4770      	bx	lr
 800f20a:	8800      	ldrh	r0, [r0, #0]
 800f20c:	e7f9      	b.n	800f202 <friend_lpn_matches+0x22>
		return false;
 800f20e:	2000      	movs	r0, #0
 800f210:	4770      	bx	lr
			return true;
 800f212:	2001      	movs	r0, #1
		}
	}

	return false;
}
 800f214:	4770      	bx	lr

0800f216 <buf_send_start>:
{
 800f216:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0;
 800f218:	78d3      	ldrb	r3, [r2, #3]
 800f21a:	f36f 1304 	bfc	r3, #4, #1
	if (!frnd->established) {
 800f21e:	f013 0440 	ands.w	r4, r3, #64	; 0x40
{
 800f222:	4615      	mov	r5, r2
	frnd->pending_buf = 0;
 800f224:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established) {
 800f226:	d103      	bne.n	800f230 <buf_send_start+0x1a>
		net_buf_unref(frnd->last);
 800f228:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800f22a:	f002 fa4f 	bl	80116cc <net_buf_unref>
		frnd->last = NULL;
 800f22e:	646c      	str	r4, [r5, #68]	; 0x44
 800f230:	bd38      	pop	{r3, r4, r5, pc}

0800f232 <buf_send_end>:
	if (frnd->pending_req) {
 800f232:	78cb      	ldrb	r3, [r1, #3]
 800f234:	075a      	lsls	r2, r3, #29
 800f236:	d409      	bmi.n	800f24c <buf_send_end+0x1a>
	if (frnd->established) {
 800f238:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f23c:	f101 0014 	add.w	r0, r1, #20
		k_delayed_work_submit(&frnd->timer, frnd->poll_to);
 800f240:	bf14      	ite	ne
 800f242:	6849      	ldrne	r1, [r1, #4]
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
 800f244:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
 800f248:	f7ff be58 	b.w	800eefc <k_delayed_work_submit>
 800f24c:	4770      	bx	lr
	...

0800f250 <enqueue_update>:
{
 800f250:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f254:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f256:	2210      	movs	r2, #16
{
 800f258:	460f      	mov	r7, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f25a:	4668      	mov	r0, sp
 800f25c:	2100      	movs	r1, #0
 800f25e:	f7f1 fb3b 	bl	80008d8 <memset>
 800f262:	2307      	movs	r3, #7
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f264:	89a0      	ldrh	r0, [r4, #12]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
 800f266:	f8ad 3006 	strh.w	r3, [sp, #6]
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f26a:	f7fa fae5 	bl	8009838 <bt_mesh_subnet_get>
	buf->len = 0;
 800f26e:	2600      	movs	r6, #0
	buf->data = buf->__buf + reserve_head;
 800f270:	f10d 0309 	add.w	r3, sp, #9
	upd = net_buf_simple_add(sdu, sizeof(*upd));
 800f274:	2106      	movs	r1, #6
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
 800f276:	4680      	mov	r8, r0
	upd = net_buf_simple_add(sdu, sizeof(*upd));
 800f278:	4668      	mov	r0, sp
 800f27a:	9300      	str	r3, [sp, #0]
	buf->len = 0;
 800f27c:	f8ad 6004 	strh.w	r6, [sp, #4]
 800f280:	f002 fa44 	bl	801170c <net_buf_simple_add>
 800f284:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(sub);
 800f286:	4640      	mov	r0, r8
 800f288:	f7fa fc4c 	bl	8009b24 <bt_mesh_net_flags>
 800f28c:	4b0d      	ldr	r3, [pc, #52]	; (800f2c4 <enqueue_update+0x74>)
 800f28e:	7028      	strb	r0, [r5, #0]
 800f290:	681b      	ldr	r3, [r3, #0]
	upd->md = md;
 800f292:	716f      	strb	r7, [r5, #5]
 800f294:	ba1b      	rev	r3, r3
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
 800f296:	2102      	movs	r1, #2
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
 800f298:	f8c5 3001 	str.w	r3, [r5, #1]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
 800f29c:	466a      	mov	r2, sp
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f7ff fefa 	bl	800f098 <encode_friend_ctl>
	if (!buf) {
 800f2a4:	4601      	mov	r1, r0
 800f2a6:	b150      	cbz	r0, 800f2be <enqueue_update+0x6e>
	frnd->sec_update = 0;
 800f2a8:	78e3      	ldrb	r3, [r4, #3]
 800f2aa:	f366 03c3 	bfi	r3, r6, #3, #1
 800f2ae:	70e3      	strb	r3, [r4, #3]
	net_buf_slist_put(&frnd->queue, buf);
 800f2b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f2b4:	f002 f9b2 	bl	801161c <net_buf_slist_put>
	frnd->queue_size++;
 800f2b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	6523      	str	r3, [r4, #80]	; 0x50
}
 800f2be:	b004      	add	sp, #16
 800f2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c4:	20005bd0 	.word	0x20005bd0

0800f2c8 <enqueue_friend_pdu>:
{
 800f2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	4615      	mov	r5, r2
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
 800f2d0:	460e      	mov	r6, r1
 800f2d2:	b979      	cbnz	r1, 800f2f4 <enqueue_friend_pdu+0x2c>
		if (frnd->sec_update) {
 800f2d4:	78c3      	ldrb	r3, [r0, #3]
 800f2d6:	071a      	lsls	r2, r3, #28
 800f2d8:	d502      	bpl.n	800f2e0 <enqueue_friend_pdu+0x18>
			enqueue_update(frnd, 1);
 800f2da:	2101      	movs	r1, #1
 800f2dc:	f7ff ffb8 	bl	800f250 <enqueue_update>
	net_buf_slist_put(&frnd->queue, buf);
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f2e6:	f002 f999 	bl	801161c <net_buf_slist_put>
	frnd->queue_size++;
 800f2ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	6523      	str	r3, [r4, #80]	; 0x50
 800f2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	adv = FRIEND_ADV(buf);
 800f2f4:	4610      	mov	r0, r2
 800f2f6:	f7ff fd43 	bl	800ed80 <net_buf_user_data>
 800f2fa:	6801      	ldr	r1, [r0, #0]
 800f2fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	seg = get_seg(frnd, BT_MESH_ADV(buf)->addr, &adv->seq_auth);
 800f2fe:	894f      	ldrh	r7, [r1, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
 800f300:	f104 023c 	add.w	r2, r4, #60	; 0x3c
		if (buf && BT_MESH_ADV(buf)->addr == src &&
 800f304:	b358      	cbz	r0, 800f35e <enqueue_friend_pdu+0x96>
 800f306:	f7ff fd3b 	bl	800ed80 <net_buf_user_data>
 800f30a:	6803      	ldr	r3, [r0, #0]
 800f30c:	8958      	ldrh	r0, [r3, #10]
 800f30e:	42b8      	cmp	r0, r7
 800f310:	d127      	bne.n	800f362 <enqueue_friend_pdu+0x9a>
 800f312:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800f316:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800f31a:	4589      	cmp	r9, r1
 800f31c:	bf08      	it	eq
 800f31e:	4580      	cmpeq	r8, r0
 800f320:	d11f      	bne.n	800f362 <enqueue_friend_pdu+0x9a>
	net_buf_slist_put(&seg->queue, buf);
 800f322:	4629      	mov	r1, r5
 800f324:	4610      	mov	r0, r2
 800f326:	f002 f979 	bl	801161c <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
 800f32a:	2e02      	cmp	r6, #2
 800f32c:	d115      	bne.n	800f35a <enqueue_friend_pdu+0x92>
		if (frnd->sec_update) {
 800f32e:	78e3      	ldrb	r3, [r4, #3]
 800f330:	071b      	lsls	r3, r3, #28
 800f332:	d503      	bpl.n	800f33c <enqueue_friend_pdu+0x74>
			enqueue_update(frnd, 1);
 800f334:	2101      	movs	r1, #1
 800f336:	4620      	mov	r0, r4
 800f338:	f7ff ff8a 	bl	800f250 <enqueue_update>
 800f33c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f33e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
{
 800f342:	460a      	mov	r2, r1
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f344:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		SYS_SLIST_FOR_EACH_CONTAINER(&seg->queue, buf, node) {
 800f348:	b982      	cbnz	r2, 800f36c <enqueue_friend_pdu+0xa4>
	if (!list->tail) {
 800f34a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				    list_to_append->tail);
 800f34c:	6c23      	ldr	r3, [r4, #64]	; 0x40
	if (!list->tail) {
 800f34e:	b9c2      	cbnz	r2, 800f382 <enqueue_friend_pdu+0xba>
		list->head = (sys_snode_t *)head;
 800f350:	64a1      	str	r1, [r4, #72]	; 0x48
		list->tail = (sys_snode_t *)tail;
 800f352:	64e3      	str	r3, [r4, #76]	; 0x4c
	list->head = NULL;
 800f354:	2300      	movs	r3, #0
 800f356:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
 800f358:	6423      	str	r3, [r4, #64]	; 0x40
 800f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!seg) {
 800f35e:	2a00      	cmp	r2, #0
 800f360:	d1df      	bne.n	800f322 <enqueue_friend_pdu+0x5a>
		net_buf_unref(buf);
 800f362:	4628      	mov	r0, r5
}
 800f364:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
 800f368:	f002 b9b0 	b.w	80116cc <net_buf_unref>
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
 800f36c:	4610      	mov	r0, r2
 800f36e:	f7ff fd07 	bl	800ed80 <net_buf_user_data>
 800f372:	6803      	ldr	r3, [r0, #0]
	return node->next;
 800f374:	6812      	ldr	r2, [r2, #0]
 800f376:	e9c3 6704 	strd	r6, r7, [r3, #16]
			frnd->queue_size++;
 800f37a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f37c:	3301      	adds	r3, #1
 800f37e:	6523      	str	r3, [r4, #80]	; 0x50
 800f380:	e7e2      	b.n	800f348 <enqueue_friend_pdu+0x80>
		list->tail->next = (sys_snode_t *)head;
 800f382:	6011      	str	r1, [r2, #0]
 800f384:	e7e5      	b.n	800f352 <enqueue_friend_pdu+0x8a>
	...

0800f388 <bt_mesh_friend_find>:
{
 800f388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f38a:	4d16      	ldr	r5, [pc, #88]	; (800f3e4 <bt_mesh_friend_find+0x5c>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f38c:	2400      	movs	r4, #0
 800f38e:	462e      	mov	r6, r5
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
 800f390:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
 800f394:	2784      	movs	r7, #132	; 0x84
		if (valid && !frnd->valid) {
 800f396:	b132      	cbz	r2, 800f3a6 <bt_mesh_friend_find+0x1e>
 800f398:	fb07 6c04 	mla	ip, r7, r4, r6
 800f39c:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
 800f3a0:	f01c 0f20 	tst.w	ip, #32
 800f3a4:	d016      	beq.n	800f3d4 <bt_mesh_friend_find+0x4c>
		if (established && !frnd->established) {
 800f3a6:	b133      	cbz	r3, 800f3b6 <bt_mesh_friend_find+0x2e>
 800f3a8:	fb07 6c04 	mla	ip, r7, r4, r6
 800f3ac:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
 800f3b0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f3b4:	d00e      	beq.n	800f3d4 <bt_mesh_friend_find+0x4c>
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
 800f3b6:	4570      	cmp	r0, lr
 800f3b8:	d003      	beq.n	800f3c2 <bt_mesh_friend_find+0x3a>
 800f3ba:	f8b5 c030 	ldrh.w	ip, [r5, #48]	; 0x30
 800f3be:	4584      	cmp	ip, r0
 800f3c0:	d108      	bne.n	800f3d4 <bt_mesh_friend_find+0x4c>
		if (frnd->lpn == lpn_addr) {
 800f3c2:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
 800f3c6:	458c      	cmp	ip, r1
 800f3c8:	d104      	bne.n	800f3d4 <bt_mesh_friend_find+0x4c>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f3ca:	2084      	movs	r0, #132	; 0x84
 800f3cc:	fb00 6004 	mla	r0, r0, r4, r6
 800f3d0:	3024      	adds	r0, #36	; 0x24
 800f3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f3d4:	3401      	adds	r4, #1
 800f3d6:	2c02      	cmp	r4, #2
 800f3d8:	f105 0584 	add.w	r5, r5, #132	; 0x84
 800f3dc:	d1db      	bne.n	800f396 <bt_mesh_friend_find+0xe>
	return NULL;
 800f3de:	2000      	movs	r0, #0
}
 800f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20005bd0 	.word	0x20005bd0

0800f3e8 <bt_mesh_friend_clear_net_idx>:
{
 800f3e8:	b538      	push	{r3, r4, r5, lr}
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f3ea:	4d0f      	ldr	r5, [pc, #60]	; (800f428 <bt_mesh_friend_clear_net_idx+0x40>)
 800f3ec:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800f3ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3f2:	428a      	cmp	r2, r1
{
 800f3f4:	4604      	mov	r4, r0
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f3f6:	d004      	beq.n	800f402 <bt_mesh_friend_clear_net_idx+0x1a>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f3f8:	4288      	cmp	r0, r1
 800f3fa:	d10f      	bne.n	800f41c <bt_mesh_friend_clear_net_idx+0x34>
			friend_clear(frnd);
 800f3fc:	480b      	ldr	r0, [pc, #44]	; (800f42c <bt_mesh_friend_clear_net_idx+0x44>)
 800f3fe:	f7ff fcfd 	bl	800edfc <friend_clear>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f402:	f8b5 30b4 	ldrh.w	r3, [r5, #180]	; 0xb4
 800f406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d00b      	beq.n	800f426 <bt_mesh_friend_clear_net_idx+0x3e>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f40e:	4294      	cmp	r4, r2
 800f410:	d107      	bne.n	800f422 <bt_mesh_friend_clear_net_idx+0x3a>
			friend_clear(frnd);
 800f412:	4807      	ldr	r0, [pc, #28]	; (800f430 <bt_mesh_friend_clear_net_idx+0x48>)
}
 800f414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			friend_clear(frnd);
 800f418:	f7ff bcf0 	b.w	800edfc <friend_clear>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f41c:	4290      	cmp	r0, r2
 800f41e:	d1f0      	bne.n	800f402 <bt_mesh_friend_clear_net_idx+0x1a>
 800f420:	e7ec      	b.n	800f3fc <bt_mesh_friend_clear_net_idx+0x14>
 800f422:	429c      	cmp	r4, r3
 800f424:	d0f5      	beq.n	800f412 <bt_mesh_friend_clear_net_idx+0x2a>
 800f426:	bd38      	pop	{r3, r4, r5, pc}
 800f428:	20005bd0 	.word	0x20005bd0
 800f42c:	20005bf4 	.word	0x20005bf4
 800f430:	20005c78 	.word	0x20005c78

0800f434 <bt_mesh_friend_sec_update>:
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f434:	4b11      	ldr	r3, [pc, #68]	; (800f47c <bt_mesh_friend_sec_update+0x48>)
 800f436:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f438:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f43c:	428a      	cmp	r2, r1
 800f43e:	d007      	beq.n	800f450 <bt_mesh_friend_sec_update+0x1c>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f440:	4288      	cmp	r0, r1
 800f442:	d114      	bne.n	800f46e <bt_mesh_friend_sec_update+0x3a>
			frnd->sec_update = 1;
 800f444:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f448:	f042 0208 	orr.w	r2, r2, #8
 800f44c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
 800f450:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 800f454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f458:	428a      	cmp	r2, r1
 800f45a:	d00d      	beq.n	800f478 <bt_mesh_friend_sec_update+0x44>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f45c:	4288      	cmp	r0, r1
 800f45e:	d109      	bne.n	800f474 <bt_mesh_friend_sec_update+0x40>
			frnd->sec_update = 1;
 800f460:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800f464:	f042 0208 	orr.w	r2, r2, #8
 800f468:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800f46c:	4770      	bx	lr
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
 800f46e:	4290      	cmp	r0, r2
 800f470:	d1ee      	bne.n	800f450 <bt_mesh_friend_sec_update+0x1c>
 800f472:	e7e7      	b.n	800f444 <bt_mesh_friend_sec_update+0x10>
 800f474:	4290      	cmp	r0, r2
 800f476:	d0f3      	beq.n	800f460 <bt_mesh_friend_sec_update+0x2c>
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	20005bd0 	.word	0x20005bd0

0800f480 <bt_mesh_friend_clear>:
{
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_net_tx tx = {
 800f484:	4603      	mov	r3, r0
{
 800f486:	b088      	sub	sp, #32
	struct bt_mesh_net_tx tx = {
 800f488:	f853 2b04 	ldr.w	r2, [r3], #4
 800f48c:	9306      	str	r3, [sp, #24]
 800f48e:	2400      	movs	r4, #0
{
 800f490:	460f      	mov	r7, r1
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
 800f492:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
 800f494:	9205      	str	r2, [sp, #20]
{
 800f496:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
 800f498:	9407      	str	r4, [sp, #28]
		.src  = bt_mesh_primary_addr(),
 800f49a:	f7fc ff3b 	bl	800c314 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
 800f49e:	f8ad 001c 	strh.w	r0, [sp, #28]
		.xmit = bt_mesh_net_transmit_get(),
 800f4a2:	f7fe ff75 	bl	800e390 <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
 800f4a6:	88bb      	ldrh	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
 800f4a8:	f88d 001e 	strb.w	r0, [sp, #30]
	if (buf->len < sizeof(*msg)) {
 800f4ac:	2b03      	cmp	r3, #3
 800f4ae:	d92c      	bls.n	800f50a <bt_mesh_friend_clear+0x8a>
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f4b0:	f8b5 8000 	ldrh.w	r8, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f4b4:	6830      	ldr	r0, [r6, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f4b6:	886f      	ldrh	r7, [r5, #2]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f4b8:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f4ba:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800f4be:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
 800f4c2:	4623      	mov	r3, r4
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	b289      	uxth	r1, r1
 800f4c8:	f7ff ff5e 	bl	800f388 <bt_mesh_friend_find>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f4cc:	023d      	lsls	r5, r7, #8
 800f4ce:	ea45 2517 	orr.w	r5, r5, r7, lsr #8
 800f4d2:	b2ad      	uxth	r5, r5
	if (!frnd) {
 800f4d4:	4606      	mov	r6, r0
 800f4d6:	b1e8      	cbz	r0, 800f514 <bt_mesh_friend_clear+0x94>
	if (lpn_counter - frnd->lpn_counter > 255) {
 800f4d8:	8903      	ldrh	r3, [r0, #8]
 800f4da:	1aed      	subs	r5, r5, r3
 800f4dc:	2dff      	cmp	r5, #255	; 0xff
 800f4de:	dc12      	bgt.n	800f506 <bt_mesh_friend_clear+0x86>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
 800f4e0:	9b06      	ldr	r3, [sp, #24]
	cfm.lpn_addr    = msg->lpn_addr;
 800f4e2:	f8ad 8010 	strh.w	r8, [sp, #16]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
 800f4e6:	227f      	movs	r2, #127	; 0x7f
 800f4e8:	71da      	strb	r2, [r3, #7]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
 800f4ea:	2106      	movs	r1, #6
 800f4ec:	9402      	str	r4, [sp, #8]
 800f4ee:	9401      	str	r4, [sp, #4]
 800f4f0:	9400      	str	r4, [sp, #0]
 800f4f2:	2304      	movs	r3, #4
 800f4f4:	aa04      	add	r2, sp, #16
 800f4f6:	a805      	add	r0, sp, #20
	cfm.lpn_counter = msg->lpn_counter;
 800f4f8:	f8ad 7012 	strh.w	r7, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
 800f4fc:	f7fb fd74 	bl	800afe8 <bt_mesh_ctl_send>
	friend_clear(frnd);
 800f500:	4630      	mov	r0, r6
 800f502:	f7ff fc7b 	bl	800edfc <friend_clear>
		return 0;
 800f506:	4620      	mov	r0, r4
 800f508:	e001      	b.n	800f50e <bt_mesh_friend_clear+0x8e>
		return -EINVAL;
 800f50a:	f06f 0015 	mvn.w	r0, #21
}
 800f50e:	b008      	add	sp, #32
 800f510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f514:	e7fb      	b.n	800f50e <bt_mesh_friend_clear+0x8e>

0800f516 <bt_mesh_friend_sub_add>:
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f516:	888b      	ldrh	r3, [r1, #4]
 800f518:	2b02      	cmp	r3, #2
{
 800f51a:	b570      	push	{r4, r5, r6, lr}
 800f51c:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f51e:	d931      	bls.n	800f584 <bt_mesh_friend_sub_add+0x6e>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
 800f520:	6804      	ldr	r4, [r0, #0]
 800f522:	8901      	ldrh	r1, [r0, #8]
 800f524:	8ba0      	ldrh	r0, [r4, #28]
 800f526:	2301      	movs	r3, #1
 800f528:	461a      	mov	r2, r3
 800f52a:	f7ff ff2d 	bl	800f388 <bt_mesh_friend_find>
	if (!frnd) {
 800f52e:	4604      	mov	r4, r0
 800f530:	b1a8      	cbz	r0, 800f55e <bt_mesh_friend_sub_add+0x48>
	if (frnd->pending_buf) {
 800f532:	78c3      	ldrb	r3, [r0, #3]
 800f534:	06da      	lsls	r2, r3, #27
 800f536:	d412      	bmi.n	800f55e <bt_mesh_friend_sub_add+0x48>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f538:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f53a:	f043 0304 	orr.w	r3, r3, #4
 800f53e:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f540:	3133      	adds	r1, #51	; 0x33
 800f542:	3014      	adds	r0, #20
 800f544:	f7ff fcda 	bl	800eefc <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
 800f548:	4628      	mov	r0, r5
 800f54a:	f002 f952 	bl	80117f2 <net_buf_simple_pull_u8>
 800f54e:	4606      	mov	r6, r0
	while (buf->len >= 2) {
 800f550:	88ab      	ldrh	r3, [r5, #4]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d805      	bhi.n	800f562 <bt_mesh_friend_sub_add+0x4c>
	enqueue_sub_cfm(frnd, xact);
 800f556:	4631      	mov	r1, r6
 800f558:	4620      	mov	r0, r4
 800f55a:	f7ff fdd3 	bl	800f104 <enqueue_sub_cfm>
		return 0;
 800f55e:	2000      	movs	r0, #0
}
 800f560:	bd70      	pop	{r4, r5, r6, pc}
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
 800f562:	4628      	mov	r0, r5
 800f564:	f002 f955 	bl	8011812 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
 800f568:	89e3      	ldrh	r3, [r4, #14]
 800f56a:	b12b      	cbz	r3, 800f578 <bt_mesh_friend_sub_add+0x62>
 800f56c:	8a23      	ldrh	r3, [r4, #16]
 800f56e:	b13b      	cbz	r3, 800f580 <bt_mesh_friend_sub_add+0x6a>
 800f570:	8a63      	ldrh	r3, [r4, #18]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1ec      	bne.n	800f550 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f576:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
 800f578:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f57c:	81d8      	strh	r0, [r3, #14]
 800f57e:	e7e7      	b.n	800f550 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f580:	2301      	movs	r3, #1
 800f582:	e7f9      	b.n	800f578 <bt_mesh_friend_sub_add+0x62>
		return -EINVAL;
 800f584:	f06f 0015 	mvn.w	r0, #21
 800f588:	bd70      	pop	{r4, r5, r6, pc}

0800f58a <bt_mesh_friend_sub_rem>:
{
 800f58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f58c:	888b      	ldrh	r3, [r1, #4]
 800f58e:	2b02      	cmp	r3, #2
{
 800f590:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
 800f592:	d936      	bls.n	800f602 <bt_mesh_friend_sub_rem+0x78>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
 800f594:	6804      	ldr	r4, [r0, #0]
 800f596:	8901      	ldrh	r1, [r0, #8]
 800f598:	8ba0      	ldrh	r0, [r4, #28]
 800f59a:	2301      	movs	r3, #1
 800f59c:	461a      	mov	r2, r3
 800f59e:	f7ff fef3 	bl	800f388 <bt_mesh_friend_find>
	if (!frnd) {
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	b1b0      	cbz	r0, 800f5d4 <bt_mesh_friend_sub_rem+0x4a>
	if (frnd->pending_buf) {
 800f5a6:	78c3      	ldrb	r3, [r0, #3]
 800f5a8:	f013 0610 	ands.w	r6, r3, #16
 800f5ac:	d112      	bne.n	800f5d4 <bt_mesh_friend_sub_rem+0x4a>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f5ae:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f5b0:	f043 0304 	orr.w	r3, r3, #4
 800f5b4:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f5b6:	3133      	adds	r1, #51	; 0x33
 800f5b8:	3014      	adds	r0, #20
 800f5ba:	f7ff fc9f 	bl	800eefc <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
 800f5be:	4628      	mov	r0, r5
 800f5c0:	f002 f917 	bl	80117f2 <net_buf_simple_pull_u8>
 800f5c4:	4607      	mov	r7, r0
	while (buf->len >= 2) {
 800f5c6:	88ab      	ldrh	r3, [r5, #4]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d805      	bhi.n	800f5d8 <bt_mesh_friend_sub_rem+0x4e>
	enqueue_sub_cfm(frnd, xact);
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7ff fd98 	bl	800f104 <enqueue_sub_cfm>
		return 0;
 800f5d4:	2000      	movs	r0, #0
}
 800f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f002 f91a 	bl	8011812 <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
 800f5de:	89e3      	ldrh	r3, [r4, #14]
 800f5e0:	4283      	cmp	r3, r0
 800f5e2:	d00a      	beq.n	800f5fa <bt_mesh_friend_sub_rem+0x70>
 800f5e4:	8a23      	ldrh	r3, [r4, #16]
 800f5e6:	4283      	cmp	r3, r0
 800f5e8:	d009      	beq.n	800f5fe <bt_mesh_friend_sub_rem+0x74>
 800f5ea:	8a63      	ldrh	r3, [r4, #18]
 800f5ec:	4283      	cmp	r3, r0
 800f5ee:	d1ea      	bne.n	800f5c6 <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f5f0:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
 800f5f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f5f6:	81de      	strh	r6, [r3, #14]
 800f5f8:	e7e5      	b.n	800f5c6 <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e7f9      	b.n	800f5f2 <bt_mesh_friend_sub_rem+0x68>
 800f5fe:	2301      	movs	r3, #1
 800f600:	e7f7      	b.n	800f5f2 <bt_mesh_friend_sub_rem+0x68>
		return -EINVAL;
 800f602:	f06f 0015 	mvn.w	r0, #21
 800f606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f608 <bt_mesh_friend_poll>:
	if (buf->len < sizeof(*msg)) {
 800f608:	888b      	ldrh	r3, [r1, #4]
{
 800f60a:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
 800f60c:	680e      	ldr	r6, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d03d      	beq.n	800f68e <bt_mesh_friend_poll+0x86>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
 800f612:	6804      	ldr	r4, [r0, #0]
 800f614:	8901      	ldrh	r1, [r0, #8]
 800f616:	8ba0      	ldrh	r0, [r4, #28]
 800f618:	2300      	movs	r3, #0
 800f61a:	2201      	movs	r2, #1
 800f61c:	f7ff feb4 	bl	800f388 <bt_mesh_friend_find>
	if (!frnd) {
 800f620:	4604      	mov	r4, r0
 800f622:	b910      	cbnz	r0, 800f62a <bt_mesh_friend_poll+0x22>
		return 0;
 800f624:	2500      	movs	r5, #0
}
 800f626:	4628      	mov	r0, r5
 800f628:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->fsn & ~1) {
 800f62a:	7835      	ldrb	r5, [r6, #0]
 800f62c:	f035 0501 	bics.w	r5, r5, #1
 800f630:	d12d      	bne.n	800f68e <bt_mesh_friend_poll+0x86>
	if (frnd->pending_buf) {
 800f632:	78c3      	ldrb	r3, [r0, #3]
 800f634:	06d9      	lsls	r1, r3, #27
 800f636:	d4f5      	bmi.n	800f624 <bt_mesh_friend_poll+0x1c>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
 800f638:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
 800f63a:	f043 0304 	orr.w	r3, r3, #4
 800f63e:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
 800f640:	3133      	adds	r1, #51	; 0x33
 800f642:	3014      	adds	r0, #20
 800f644:	f7ff fc5a 	bl	800eefc <k_delayed_work_submit>
	if (!frnd->established) {
 800f648:	78e3      	ldrb	r3, [r4, #3]
 800f64a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f64c:	065a      	lsls	r2, r3, #25
		frnd->established = 1;
 800f64e:	bf5c      	itt	pl
 800f650:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800f654:	70e3      	strbpl	r3, [r4, #3]
	if (msg->fsn == frnd->fsn && frnd->last) {
 800f656:	78e3      	ldrb	r3, [r4, #3]
 800f658:	7831      	ldrb	r1, [r6, #0]
 800f65a:	f003 0201 	and.w	r2, r3, #1
 800f65e:	4291      	cmp	r1, r2
 800f660:	d104      	bne.n	800f66c <bt_mesh_friend_poll+0x64>
 800f662:	b140      	cbz	r0, 800f676 <bt_mesh_friend_poll+0x6e>
		frnd->send_last = 1;
 800f664:	f043 0302 	orr.w	r3, r3, #2
 800f668:	70e3      	strb	r3, [r4, #3]
 800f66a:	e7dc      	b.n	800f626 <bt_mesh_friend_poll+0x1e>
		if (frnd->last) {
 800f66c:	b118      	cbz	r0, 800f676 <bt_mesh_friend_poll+0x6e>
			net_buf_unref(frnd->last);
 800f66e:	f002 f82d 	bl	80116cc <net_buf_unref>
			frnd->last = NULL;
 800f672:	2300      	movs	r3, #0
 800f674:	6463      	str	r3, [r4, #68]	; 0x44
		frnd->fsn = msg->fsn;
 800f676:	78e3      	ldrb	r3, [r4, #3]
 800f678:	7832      	ldrb	r2, [r6, #0]
		if (sys_slist_is_empty(&frnd->queue)) {
 800f67a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		frnd->fsn = msg->fsn;
 800f67c:	f362 0300 	bfi	r3, r2, #0, #1
 800f680:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
 800f682:	2900      	cmp	r1, #0
 800f684:	d1ce      	bne.n	800f624 <bt_mesh_friend_poll+0x1c>
			enqueue_update(frnd, 0);
 800f686:	4620      	mov	r0, r4
 800f688:	f7ff fde2 	bl	800f250 <enqueue_update>
 800f68c:	e7cb      	b.n	800f626 <bt_mesh_friend_poll+0x1e>
		return -EINVAL;
 800f68e:	f06f 0515 	mvn.w	r5, #21
 800f692:	e7c8      	b.n	800f626 <bt_mesh_friend_poll+0x1e>

0800f694 <bt_mesh_friend_clear_cfm>:
{
 800f694:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
 800f696:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
 800f698:	680a      	ldr	r2, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f69a:	2b03      	cmp	r3, #3
 800f69c:	d90b      	bls.n	800f6b6 <bt_mesh_friend_clear_cfm+0x22>
		if (frnd->clear.frnd == prev_friend) {
 800f69e:	4c15      	ldr	r4, [pc, #84]	; (800f6f4 <bt_mesh_friend_clear_cfm+0x60>)
	frnd = find_clear(rx->ctx.addr);
 800f6a0:	8903      	ldrh	r3, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
 800f6a2:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	d008      	beq.n	800f6bc <bt_mesh_friend_clear_cfm+0x28>
 800f6aa:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
 800f6ae:	4299      	cmp	r1, r3
 800f6b0:	d01e      	beq.n	800f6f0 <bt_mesh_friend_clear_cfm+0x5c>
		return 0;
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800f6b6:	f06f 0015 	mvn.w	r0, #21
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f6bc:	3424      	adds	r4, #36	; 0x24
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
 800f6be:	8811      	ldrh	r1, [r2, #0]
 800f6c0:	020b      	lsls	r3, r1, #8
 800f6c2:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
	if (lpn_addr != frnd->lpn) {
 800f6c6:	8821      	ldrh	r1, [r4, #0]
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	4299      	cmp	r1, r3
 800f6cc:	d1f1      	bne.n	800f6b2 <bt_mesh_friend_clear_cfm+0x1e>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f6ce:	8852      	ldrh	r2, [r2, #2]
 800f6d0:	0213      	lsls	r3, r2, #8
 800f6d2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
 800f6d6:	8922      	ldrh	r2, [r4, #8]
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	f04f 0500 	mov.w	r5, #0
 800f6e0:	d1e7      	bne.n	800f6b2 <bt_mesh_friend_clear_cfm+0x1e>
	k_delayed_work_cancel(&frnd->clear.timer);
 800f6e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6e6:	f002 ffbb 	bl	8012660 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
 800f6ea:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
 800f6ee:	e7e0      	b.n	800f6b2 <bt_mesh_friend_clear_cfm+0x1e>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
 800f6f0:	34a8      	adds	r4, #168	; 0xa8
 800f6f2:	e7e4      	b.n	800f6be <bt_mesh_friend_clear_cfm+0x2a>
 800f6f4:	20005bd0 	.word	0x20005bd0

0800f6f8 <bt_mesh_friend_req>:
{
 800f6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*msg)) {
 800f6fc:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
 800f6fe:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
 800f700:	2b09      	cmp	r3, #9
{
 800f702:	b085      	sub	sp, #20
 800f704:	4607      	mov	r7, r0
	if (buf->len < sizeof(*msg)) {
 800f706:	f240 80ce 	bls.w	800f8a6 <bt_mesh_friend_req+0x1ae>
	if (msg->recv_delay <= 0x09) {
 800f70a:	786b      	ldrb	r3, [r5, #1]
 800f70c:	2b09      	cmp	r3, #9
 800f70e:	f240 80ca 	bls.w	800f8a6 <bt_mesh_friend_req+0x1ae>
		   ((u32_t)msg->poll_to[1] << 8) |
 800f712:	78ee      	ldrb	r6, [r5, #3]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f714:	78ab      	ldrb	r3, [r5, #2]
		   ((u32_t)msg->poll_to[1] << 8) |
 800f716:	0236      	lsls	r6, r6, #8
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f718:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
		   ((u32_t)msg->poll_to[2]));
 800f71c:	792b      	ldrb	r3, [r5, #4]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
 800f71e:	431e      	orrs	r6, r3
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
 800f720:	4b64      	ldr	r3, [pc, #400]	; (800f8b4 <bt_mesh_friend_req+0x1bc>)
 800f722:	f1a6 020a 	sub.w	r2, r6, #10
 800f726:	429a      	cmp	r2, r3
 800f728:	f200 80bd 	bhi.w	800f8a6 <bt_mesh_friend_req+0x1ae>
	if (msg->num_elem == 0x00) {
 800f72c:	79eb      	ldrb	r3, [r5, #7]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f000 80b9 	beq.w	800f8a6 <bt_mesh_friend_req+0x1ae>
 800f734:	782b      	ldrb	r3, [r5, #0]
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
 800f736:	f013 0307 	ands.w	r3, r3, #7
 800f73a:	f000 80b4 	beq.w	800f8a6 <bt_mesh_friend_req+0x1ae>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
 800f73e:	2201      	movs	r2, #1
 800f740:	fa02 f303 	lsl.w	r3, r2, r3
 800f744:	2b10      	cmp	r3, #16
 800f746:	d903      	bls.n	800f750 <bt_mesh_friend_req+0x58>
	return 0;
 800f748:	2000      	movs	r0, #0
}
 800f74a:	b005      	add	sp, #20
 800f74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	old_friend = sys_be16_to_cpu(msg->prev_addr);
 800f750:	f8b5 3005 	ldrh.w	r3, [r5, #5]
 800f754:	6800      	ldr	r0, [r0, #0]
 800f756:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800f75a:	ea48 2813 	orr.w	r8, r8, r3, lsr #8
 800f75e:	fa0f f888 	sxth.w	r8, r8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend)) {
 800f762:	f1b8 0f00 	cmp.w	r8, #0
	old_friend = sys_be16_to_cpu(msg->prev_addr);
 800f766:	fa1f f988 	uxth.w	r9, r8
		frnd = bt_mesh_friend_find(rx->sub->net_idx, old_friend,
 800f76a:	f04f 0300 	mov.w	r3, #0
 800f76e:	bfcc      	ite	gt
 800f770:	4649      	movgt	r1, r9
		frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr,
 800f772:	8939      	ldrhle	r1, [r7, #8]
 800f774:	8b80      	ldrh	r0, [r0, #28]
 800f776:	f7ff fe07 	bl	800f388 <bt_mesh_friend_find>
 800f77a:	4604      	mov	r4, r0
	if (frnd) {
 800f77c:	b9b8      	cbnz	r0, 800f7ae <bt_mesh_friend_req+0xb6>
		if (!bt_mesh.frnd[i].valid) {
 800f77e:	4b4e      	ldr	r3, [pc, #312]	; (800f8b8 <bt_mesh_friend_req+0x1c0>)
 800f780:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f784:	0691      	lsls	r1, r2, #26
 800f786:	d505      	bpl.n	800f794 <bt_mesh_friend_req+0x9c>
 800f788:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800f78c:	0692      	lsls	r2, r2, #26
 800f78e:	f100 808d 	bmi.w	800f8ac <bt_mesh_friend_req+0x1b4>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f792:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
 800f794:	2284      	movs	r2, #132	; 0x84
 800f796:	4362      	muls	r2, r4
 800f798:	f102 0424 	add.w	r4, r2, #36	; 0x24
 800f79c:	441c      	add	r4, r3
			frnd->valid = 1;
 800f79e:	4413      	add	r3, r2
 800f7a0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f7a4:	f042 0220 	orr.w	r2, r2, #32
 800f7a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800f7ac:	e001      	b.n	800f7b2 <bt_mesh_friend_req+0xba>
		friend_clear(frnd);
 800f7ae:	f7ff fb25 	bl	800edfc <friend_clear>
	frnd->lpn = rx->ctx.addr;
 800f7b2:	893b      	ldrh	r3, [r7, #8]
 800f7b4:	8023      	strh	r3, [r4, #0]
	frnd->net_idx = rx->sub->net_idx;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	8b9b      	ldrh	r3, [r3, #28]
 800f7ba:	81a3      	strh	r3, [r4, #12]
	frnd->recv_delay = msg->recv_delay;
 800f7bc:	786b      	ldrb	r3, [r5, #1]
 800f7be:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100;
 800f7c0:	2364      	movs	r3, #100	; 0x64
 800f7c2:	435e      	muls	r6, r3
 800f7c4:	6066      	str	r6, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
 800f7c6:	892a      	ldrh	r2, [r5, #8]
 800f7c8:	0213      	lsls	r3, r2, #8
 800f7ca:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800f7ce:	8123      	strh	r3, [r4, #8]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
 800f7d0:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 800f7d4:	0213      	lsls	r3, r2, #8
 800f7d6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f7da:	f1b8 0f00 	cmp.w	r8, #0
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
 800f7de:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f7e2:	dd0f      	ble.n	800f804 <bt_mesh_friend_req+0x10c>
	    !bt_mesh_elem_find(old_friend)) {
 800f7e4:	4648      	mov	r0, r9
 800f7e6:	f7fc fdd5 	bl	800c394 <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
 800f7ea:	b958      	cbnz	r0, 800f804 <bt_mesh_friend_req+0x10c>
 800f7ec:	f002 fc52 	bl	8012094 <_impl_k_uptime_get_32>
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
 800f7f0:	6863      	ldr	r3, [r4, #4]
 800f7f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	frnd->clear.repeat_sec = 1;
 800f7f6:	2301      	movs	r3, #1
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
 800f7f8:	6560      	str	r0, [r4, #84]	; 0x54
	frnd->clear.repeat_sec = 1;
 800f7fa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	send_friend_clear(frnd);
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7ff fb40 	bl	800ee84 <send_friend_clear>
	k_delayed_work_submit(&frnd->timer,
 800f804:	782a      	ldrb	r2, [r5, #0]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f806:	482d      	ldr	r0, [pc, #180]	; (800f8bc <bt_mesh_friend_req+0x1c4>)
 800f808:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f80c:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f810:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f812:	5c82      	ldrb	r2, [r0, r2]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
 800f814:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
 800f818:	f997 1013 	ldrsb.w	r1, [r7, #19]
 800f81c:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
 800f820:	230a      	movs	r3, #10
 800f822:	fb91 f1f3 	sdiv	r1, r1, r3
	k_delayed_work_submit(&frnd->timer,
 800f826:	2964      	cmp	r1, #100	; 0x64
 800f828:	bfb8      	it	lt
 800f82a:	2164      	movlt	r1, #100	; 0x64
 800f82c:	f104 0014 	add.w	r0, r4, #20
 800f830:	f7ff fb64 	bl	800eefc <k_delayed_work_submit>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f834:	2510      	movs	r5, #16
	friend_cred_create(rx->sub, frnd->lpn, frnd->lpn_counter,
 800f836:	8963      	ldrh	r3, [r4, #10]
 800f838:	8922      	ldrh	r2, [r4, #8]
 800f83a:	8821      	ldrh	r1, [r4, #0]
 800f83c:	6838      	ldr	r0, [r7, #0]
 800f83e:	f7fa f8d9 	bl	80099f4 <friend_cred_create>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f842:	462a      	mov	r2, r5
 800f844:	2100      	movs	r1, #0
 800f846:	4668      	mov	r0, sp
	enqueue_offer(frnd, rx->rssi);
 800f848:	f997 6013 	ldrsb.w	r6, [r7, #19]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
 800f84c:	f7f1 f844 	bl	80008d8 <memset>
 800f850:	2307      	movs	r3, #7
 800f852:	f8ad 3006 	strh.w	r3, [sp, #6]
	off = net_buf_simple_add(sdu, sizeof(*off));
 800f856:	2106      	movs	r1, #6
	buf->data = buf->__buf + reserve_head;
 800f858:	f10d 0309 	add.w	r3, sp, #9
 800f85c:	4668      	mov	r0, sp
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	f001 ff54 	bl	801170c <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
 800f864:	23ff      	movs	r3, #255	; 0xff
 800f866:	7003      	strb	r3, [r0, #0]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
 800f868:	2303      	movs	r3, #3
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
 800f86a:	7045      	strb	r5, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
 800f86c:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
 800f86e:	70c6      	strb	r6, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
 800f870:	8962      	ldrh	r2, [r4, #10]
 800f872:	0213      	lsls	r3, r2, #8
 800f874:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800f878:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, sdu);
 800f87a:	466a      	mov	r2, sp
 800f87c:	2104      	movs	r1, #4
 800f87e:	4620      	mov	r0, r4
 800f880:	f7ff fc0a 	bl	800f098 <encode_friend_ctl>
	if (!buf) {
 800f884:	4605      	mov	r5, r0
 800f886:	2800      	cmp	r0, #0
 800f888:	f43f af5e 	beq.w	800f748 <bt_mesh_friend_req+0x50>
	frnd->counter++;
 800f88c:	8963      	ldrh	r3, [r4, #10]
	if (frnd->last) {
 800f88e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	frnd->counter++;
 800f890:	3301      	adds	r3, #1
 800f892:	8163      	strh	r3, [r4, #10]
	if (frnd->last) {
 800f894:	b108      	cbz	r0, 800f89a <bt_mesh_friend_req+0x1a2>
		net_buf_unref(frnd->last);
 800f896:	f001 ff19 	bl	80116cc <net_buf_unref>
	frnd->send_last = 1;
 800f89a:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
 800f89c:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
 800f89e:	f043 0302 	orr.w	r3, r3, #2
 800f8a2:	70e3      	strb	r3, [r4, #3]
 800f8a4:	e750      	b.n	800f748 <bt_mesh_friend_req+0x50>
		return -EINVAL;
 800f8a6:	f06f 0015 	mvn.w	r0, #21
 800f8aa:	e74e      	b.n	800f74a <bt_mesh_friend_req+0x52>
		return -ENOMEM;
 800f8ac:	f06f 000b 	mvn.w	r0, #11
 800f8b0:	e74b      	b.n	800f74a <bt_mesh_friend_req+0x52>
 800f8b2:	bf00      	nop
 800f8b4:	0034bbf5 	.word	0x0034bbf5
 800f8b8:	20005bd0 	.word	0x20005bd0
 800f8bc:	08013d24 	.word	0x08013d24

0800f8c0 <bt_mesh_friend_init>:
{
 800f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f8c4:	4c16      	ldr	r4, [pc, #88]	; (800f920 <bt_mesh_friend_init+0x60>)
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f8c6:	4f17      	ldr	r7, [pc, #92]	; (800f924 <bt_mesh_friend_init+0x64>)
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f8c8:	4e17      	ldr	r6, [pc, #92]	; (800f928 <bt_mesh_friend_init+0x68>)
	list->head = NULL;
 800f8ca:	2500      	movs	r5, #0
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f8cc:	f64f 78ff 	movw	r8, #65535	; 0xffff
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f8d0:	4639      	mov	r1, r7
 800f8d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f8d6:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
 800f8da:	66e5      	str	r5, [r4, #108]	; 0x6c
	list->tail = NULL;
 800f8dc:	6725      	str	r5, [r4, #112]	; 0x70
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f8de:	f002 fea1 	bl	8012624 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f8e8:	f002 fe9c 	bl	8012624 <k_delayed_work_init>
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
	list->head = NULL;
 800f8f2:	6625      	str	r5, [r4, #96]	; 0x60
	list->tail = NULL;
 800f8f4:	6665      	str	r5, [r4, #100]	; 0x64
		frnd->net_idx = BT_MESH_KEY_UNUSED;
 800f8f6:	f8a4 80b4 	strh.w	r8, [r4, #180]	; 0xb4
	list->head = NULL;
 800f8fa:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
	list->tail = NULL;
 800f8fe:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		k_delayed_work_init(&frnd->timer, friend_timeout);
 800f902:	f002 fe8f 	bl	8012624 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
 800f906:	f504 7082 	add.w	r0, r4, #260	; 0x104
 800f90a:	4631      	mov	r1, r6
 800f90c:	f002 fe8a 	bl	8012624 <k_delayed_work_init>
	list->head = NULL;
 800f910:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
	list->tail = NULL;
 800f914:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
}
 800f918:	4628      	mov	r0, r5
 800f91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f91e:	bf00      	nop
 800f920:	20005bd0 	.word	0x20005bd0
 800f924:	0800f179 	.word	0x0800f179
 800f928:	0800f14d 	.word	0x0800f14d

0800f92c <bt_mesh_friend_match>:

bool bt_mesh_friend_match(u16_t net_idx, u16_t addr)
{
 800f92c:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f92e:	460a      	mov	r2, r1
{
 800f930:	4604      	mov	r4, r0
 800f932:	460d      	mov	r5, r1
		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f934:	4601      	mov	r1, r0
 800f936:	4806      	ldr	r0, [pc, #24]	; (800f950 <bt_mesh_friend_match+0x24>)
 800f938:	f7ff fc52 	bl	800f1e0 <friend_lpn_matches>
 800f93c:	b930      	cbnz	r0, 800f94c <bt_mesh_friend_match+0x20>
 800f93e:	462a      	mov	r2, r5
 800f940:	4621      	mov	r1, r4
 800f942:	4804      	ldr	r0, [pc, #16]	; (800f954 <bt_mesh_friend_match+0x28>)
	}

	BT_DBG("No matching LPN for address 0x%04x", addr);

	return false;
}
 800f944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
 800f948:	f7ff bc4a 	b.w	800f1e0 <friend_lpn_matches>
}
 800f94c:	bd38      	pop	{r3, r4, r5, pc}
 800f94e:	bf00      	nop
 800f950:	20005bf4 	.word	0x20005bf4
 800f954:	20005c78 	.word	0x20005c78

0800f958 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
 800f95e:	7c83      	ldrb	r3, [r0, #18]
{
 800f960:	4616      	mov	r6, r2
	if (!rx->friend_match ||
 800f962:	061a      	lsls	r2, r3, #24
{
 800f964:	b085      	sub	sp, #20
 800f966:	4604      	mov	r4, r0
 800f968:	460f      	mov	r7, r1
	if (!rx->friend_match ||
 800f96a:	d513      	bpl.n	800f994 <bt_mesh_friend_enqueue_rx+0x3c>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f96c:	7a82      	ldrb	r2, [r0, #10]
 800f96e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (!rx->friend_match ||
 800f972:	2a01      	cmp	r2, #1
 800f974:	dc03      	bgt.n	800f97e <bt_mesh_friend_enqueue_rx+0x26>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f976:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f97a:	2b10      	cmp	r3, #16
 800f97c:	d10a      	bne.n	800f994 <bt_mesh_friend_enqueue_rx+0x3c>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
 800f97e:	f7fe fd5f 	bl	800e440 <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
 800f982:	2801      	cmp	r0, #1
 800f984:	d106      	bne.n	800f994 <bt_mesh_friend_enqueue_rx+0x3c>
 800f986:	4d2e      	ldr	r5, [pc, #184]	; (800fa40 <bt_mesh_friend_enqueue_rx+0xe8>)
 800f988:	f505 7884 	add.w	r8, r5, #264	; 0x108
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800f98c:	f1a5 0a24 	sub.w	sl, r5, #36	; 0x24
	}

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr, rx->dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800f990:	45a8      	cmp	r8, r5
 800f992:	d102      	bne.n	800f99a <bt_mesh_friend_enqueue_rx+0x42>

		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
			friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, sbuf);
		}
	}
}
 800f994:	b005      	add	sp, #20
 800f996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
 800f99a:	6823      	ldr	r3, [r4, #0]
 800f99c:	8a22      	ldrh	r2, [r4, #16]
 800f99e:	8b99      	ldrh	r1, [r3, #28]
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f7ff fc1d 	bl	800f1e0 <friend_lpn_matches>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d048      	beq.n	800fa3c <bt_mesh_friend_enqueue_rx+0xe4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
 800f9aa:	b92f      	cbnz	r7, 800f9b8 <bt_mesh_friend_enqueue_rx+0x60>
 800f9ac:	b126      	cbz	r6, 800f9b8 <bt_mesh_friend_enqueue_rx+0x60>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
 800f9ae:	8922      	ldrh	r2, [r4, #8]
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f7ff f9f2 	bl	800ed9c <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800f9b8:	7ca1      	ldrb	r1, [r4, #18]
	info.src = rx->ctx.addr;
 800f9ba:	8923      	ldrh	r3, [r4, #8]
 800f9bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	info.dst = rx->dst;
 800f9c0:	8a23      	ldrh	r3, [r4, #16]
 800f9c2:	7aa2      	ldrb	r2, [r4, #10]
 800f9c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
 800f9c8:	f001 0330 	and.w	r3, r1, #48	; 0x30
 800f9cc:	2b10      	cmp	r3, #16
		info.ttl = rx->ctx.recv_ttl - 1;
 800f9ce:	bf18      	it	ne
 800f9d0:	f3c2 0206 	ubfxne	r2, r2, #0, #7
 800f9d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f9d8:	bf18      	it	ne
 800f9da:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800f9de:	f362 0306 	bfi	r3, r2, #0, #7
 800f9e2:	f88d 300b 	strb.w	r3, [sp, #11]
	info.ctl = rx->ctl;
 800f9e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f9ea:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 800f9ee:	f362 13c7 	bfi	r3, r2, #7, #1
 800f9f2:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (rx->seq >> 16);
 800f9f6:	68e3      	ldr	r3, [r4, #12]
	info.seq[2] = rx->seq;
 800f9f8:	f88d 300a 	strb.w	r3, [sp, #10]
	info.seq[0] = (rx->seq >> 16);
 800f9fc:	0c1a      	lsrs	r2, r3, #16
 800f9fe:	f88d 2008 	strb.w	r2, [sp, #8]
	info.seq[1] = (rx->seq >> 8);
 800fa02:	0a1a      	lsrs	r2, r3, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800fa04:	f8da 3000 	ldr.w	r3, [sl]
	info.seq[1] = (rx->seq >> 8);
 800fa08:	f88d 2009 	strb.w	r2, [sp, #9]
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
 800fa0c:	f001 0101 	and.w	r1, r1, #1
 800fa10:	1a59      	subs	r1, r3, r1
 800fa12:	9103      	str	r1, [sp, #12]
	buf = create_friend_pdu(frnd, &info, sbuf);
 800fa14:	464a      	mov	r2, r9
 800fa16:	a901      	add	r1, sp, #4
 800fa18:	4628      	mov	r0, r5
 800fa1a:	f7ff fa89 	bl	800ef30 <create_friend_pdu>
	if (!buf) {
 800fa1e:	4683      	mov	fp, r0
 800fa20:	b160      	cbz	r0, 800fa3c <bt_mesh_friend_enqueue_rx+0xe4>
	if (seq_auth) {
 800fa22:	b136      	cbz	r6, 800fa32 <bt_mesh_friend_enqueue_rx+0xda>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
 800fa24:	f7ff f9ac 	bl	800ed80 <net_buf_user_data>
 800fa28:	e9d6 1200 	ldrd	r1, r2, [r6]
 800fa2c:	6803      	ldr	r3, [r0, #0]
 800fa2e:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
 800fa32:	465a      	mov	r2, fp
 800fa34:	4639      	mov	r1, r7
 800fa36:	4628      	mov	r0, r5
 800fa38:	f7ff fc46 	bl	800f2c8 <enqueue_friend_pdu>
 800fa3c:	3584      	adds	r5, #132	; 0x84
 800fa3e:	e7a7      	b.n	800f990 <bt_mesh_friend_enqueue_rx+0x38>
 800fa40:	20005bf4 	.word	0x20005bf4

0800fa44 <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
 800fa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa48:	b087      	sub	sp, #28
 800fa4a:	4617      	mov	r7, r2
 800fa4c:	9301      	str	r3, [sp, #4]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800fa4e:	6842      	ldr	r2, [r0, #4]
 800fa50:	6803      	ldr	r3, [r0, #0]
{
 800fa52:	4604      	mov	r4, r0
 800fa54:	468a      	mov	sl, r1
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800fa56:	8b98      	ldrh	r0, [r3, #28]
 800fa58:	8891      	ldrh	r1, [r2, #4]
 800fa5a:	f7ff ff67 	bl	800f92c <bt_mesh_friend_match>
 800fa5e:	b920      	cbnz	r0, 800fa6a <bt_mesh_friend_enqueue_tx+0x26>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
 800fa60:	2300      	movs	r3, #0
			matched = true;
		}
	}

	return matched;
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	b007      	add	sp, #28
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
 800fa6a:	f7fe fce9 	bl	800e440 <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
 800fa6e:	2801      	cmp	r0, #1
 800fa70:	d1f6      	bne.n	800fa60 <bt_mesh_friend_enqueue_tx+0x1c>
 800fa72:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800fb44 <bt_mesh_friend_enqueue_tx+0x100>
 800fa76:	2600      	movs	r6, #0
 800fa78:	4633      	mov	r3, r6
 800fa7a:	46d8      	mov	r8, fp
		if (friend_lpn_matches(frnd, tx->sub->net_idx, tx->ctx->addr)) {
 800fa7c:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fa80:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800fa84:	445d      	add	r5, fp
 800fa86:	8892      	ldrh	r2, [r2, #4]
 800fa88:	8b89      	ldrh	r1, [r1, #28]
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f7ff fba7 	bl	800f1e0 <friend_lpn_matches>
 800fa92:	9b00      	ldr	r3, [sp, #0]
 800fa94:	4681      	mov	r9, r0
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d04e      	beq.n	800fb38 <bt_mesh_friend_enqueue_tx+0xf4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
 800fa9a:	f1ba 0f00 	cmp.w	sl, #0
 800fa9e:	d105      	bne.n	800faac <bt_mesh_friend_enqueue_tx+0x68>
 800faa0:	b127      	cbz	r7, 800faac <bt_mesh_friend_enqueue_tx+0x68>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
 800faa2:	8922      	ldrh	r2, [r4, #8]
 800faa4:	4639      	mov	r1, r7
 800faa6:	4628      	mov	r0, r5
 800faa8:	f7ff f978 	bl	800ed9c <friend_purge_old_ack>
	info.src = tx->src;
 800faac:	8923      	ldrh	r3, [r4, #8]
 800faae:	f8ad 300c 	strh.w	r3, [sp, #12]
	info.dst = tx->ctx->addr;
 800fab2:	6863      	ldr	r3, [r4, #4]
 800fab4:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
 800fab6:	79d9      	ldrb	r1, [r3, #7]
	info.dst = tx->ctx->addr;
 800fab8:	f8ad 200e 	strh.w	r2, [sp, #14]
	info.ttl = tx->ctx->send_ttl;
 800fabc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fac0:	f361 0206 	bfi	r2, r1, #0, #7
 800fac4:	f88d 2013 	strb.w	r2, [sp, #19]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 800fac8:	885b      	ldrh	r3, [r3, #2]
 800faca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800face:	1a9a      	subs	r2, r3, r2
 800fad0:	4253      	negs	r3, r2
 800fad2:	4153      	adcs	r3, r2
 800fad4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fad8:	f363 12c7 	bfi	r2, r3, #7, #1
	info.seq[0] = (bt_mesh.seq >> 16);
 800fadc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
 800fae0:	f88d 2013 	strb.w	r2, [sp, #19]
	info.seq[0] = (bt_mesh.seq >> 16);
 800fae4:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800fae8:	1411      	asrs	r1, r2, #16
 800faea:	f88d 1010 	strb.w	r1, [sp, #16]
	info.seq[1] = (bt_mesh.seq >> 8);
 800faee:	1211      	asrs	r1, r2, #8
 800faf0:	f88d 1011 	strb.w	r1, [sp, #17]
	info.seq[2] = bt_mesh.seq++;
 800faf4:	1c51      	adds	r1, r2, #1
 800faf6:	f361 0317 	bfi	r3, r1, #0, #24
 800fafa:	f8c8 3004 	str.w	r3, [r8, #4]
 800fafe:	f88d 2012 	strb.w	r2, [sp, #18]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800fb02:	f8d8 2000 	ldr.w	r2, [r8]
 800fb06:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800fb0a:	1ad3      	subs	r3, r2, r3
	buf = create_friend_pdu(frnd, &info, sbuf);
 800fb0c:	a903      	add	r1, sp, #12
 800fb0e:	9a01      	ldr	r2, [sp, #4]
	info.iv_index = BT_MESH_NET_IVI_TX;
 800fb10:	9305      	str	r3, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7ff fa0c 	bl	800ef30 <create_friend_pdu>
	if (!buf) {
 800fb18:	9000      	str	r0, [sp, #0]
 800fb1a:	b160      	cbz	r0, 800fb36 <bt_mesh_friend_enqueue_tx+0xf2>
	if (seq_auth) {
 800fb1c:	b137      	cbz	r7, 800fb2c <bt_mesh_friend_enqueue_tx+0xe8>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
 800fb1e:	f7ff f92f 	bl	800ed80 <net_buf_user_data>
 800fb22:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fb26:	6803      	ldr	r3, [r0, #0]
 800fb28:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
 800fb2c:	9a00      	ldr	r2, [sp, #0]
 800fb2e:	4651      	mov	r1, sl
 800fb30:	4628      	mov	r0, r5
 800fb32:	f7ff fbc9 	bl	800f2c8 <enqueue_friend_pdu>
			matched = true;
 800fb36:	464b      	mov	r3, r9
 800fb38:	3684      	adds	r6, #132	; 0x84
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800fb3a:	f5b6 7f84 	cmp.w	r6, #264	; 0x108
 800fb3e:	d19d      	bne.n	800fa7c <bt_mesh_friend_enqueue_tx+0x38>
 800fb40:	e78f      	b.n	800fa62 <bt_mesh_friend_enqueue_tx+0x1e>
 800fb42:	bf00      	nop
 800fb44:	20005bd0 	.word	0x20005bd0

0800fb48 <bt_mesh_friend_clear_incomplete>:

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, u16_t src,
				     u16_t dst, u64_t *seq_auth)
{
 800fb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb4c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800fbb4 <bt_mesh_friend_clear_incomplete+0x6c>
 800fb50:	4604      	mov	r4, r0
 800fb52:	460d      	mov	r5, r1
 800fb54:	4616      	mov	r6, r2
 800fb56:	461f      	mov	r7, r3
 800fb58:	f508 7a84 	add.w	sl, r8, #264	; 0x108
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
 800fb5c:	45c2      	cmp	sl, r8
 800fb5e:	d101      	bne.n	800fb64 <bt_mesh_friend_clear_incomplete+0x1c>
			while (!sys_slist_is_empty(&seg->queue)) {
				net_buf_unref(net_buf_slist_get(&seg->queue));
			}
		}
	}
}
 800fb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
 800fb64:	4632      	mov	r2, r6
 800fb66:	8ba1      	ldrh	r1, [r4, #28]
 800fb68:	4640      	mov	r0, r8
 800fb6a:	f7ff fb39 	bl	800f1e0 <friend_lpn_matches>
 800fb6e:	b910      	cbnz	r0, 800fb76 <bt_mesh_friend_clear_incomplete+0x2e>
 800fb70:	f108 0884 	add.w	r8, r8, #132	; 0x84
 800fb74:	e7f2      	b.n	800fb5c <bt_mesh_friend_clear_incomplete+0x14>
 800fb76:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800fb7a:	f108 093c 	add.w	r9, r8, #60	; 0x3c
			if (!buf) {
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d0f6      	beq.n	800fb70 <bt_mesh_friend_clear_incomplete+0x28>
			if (BT_MESH_ADV(buf)->addr != src) {
 800fb82:	f7ff f8fd 	bl	800ed80 <net_buf_user_data>
 800fb86:	6803      	ldr	r3, [r0, #0]
 800fb88:	895a      	ldrh	r2, [r3, #10]
 800fb8a:	42aa      	cmp	r2, r5
 800fb8c:	d1f0      	bne.n	800fb70 <bt_mesh_friend_clear_incomplete+0x28>
			if (FRIEND_ADV(buf)->seq_auth != *seq_auth) {
 800fb8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb96:	4299      	cmp	r1, r3
 800fb98:	bf08      	it	eq
 800fb9a:	4290      	cmpeq	r0, r2
 800fb9c:	d1e8      	bne.n	800fb70 <bt_mesh_friend_clear_incomplete+0x28>
			while (!sys_slist_is_empty(&seg->queue)) {
 800fb9e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0e4      	beq.n	800fb70 <bt_mesh_friend_clear_incomplete+0x28>
				net_buf_unref(net_buf_slist_get(&seg->queue));
 800fba6:	4648      	mov	r0, r9
 800fba8:	f001 fd51 	bl	801164e <net_buf_slist_get>
 800fbac:	f001 fd8e 	bl	80116cc <net_buf_unref>
 800fbb0:	e7f5      	b.n	800fb9e <bt_mesh_friend_clear_incomplete+0x56>
 800fbb2:	bf00      	nop
 800fbb4:	20005bf4 	.word	0x20005bf4

0800fbb8 <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
 800fbb8:	4b01      	ldr	r3, [pc, #4]	; (800fbc0 <ack_complete+0x8>)
 800fbba:	22ff      	movs	r2, #255	; 0xff
 800fbbc:	701a      	strb	r2, [r3, #0]
 800fbbe:	4770      	bx	lr
 800fbc0:	20006178 	.word	0x20006178

0800fbc4 <prov_failed>:
{
	BT_DBG("");
}

static void prov_failed(const u8_t *data)
{
 800fbc4:	4770      	bx	lr

0800fbc6 <adv_buf_create>:
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT_COUNT,
 800fbc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800fbca:	2214      	movs	r2, #20
 800fbcc:	2102      	movs	r1, #2
 800fbce:	2000      	movs	r0, #0
 800fbd0:	f7f9 bb48 	b.w	8009264 <bt_mesh_adv_create>

0800fbd4 <send_reliable>:
{
 800fbd4:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
 800fbd6:	f002 fa71 	bl	80120bc <_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
 800fbda:	4c0c      	ldr	r4, [pc, #48]	; (800fc0c <send_reliable+0x38>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800fbdc:	4e0c      	ldr	r6, [pc, #48]	; (800fc10 <send_reliable+0x3c>)
	link.tx.start = k_uptime_get();
 800fbde:	e9c4 0100 	strd	r0, r1, [r4]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800fbe2:	2500      	movs	r5, #0
 800fbe4:	340c      	adds	r4, #12
		struct net_buf *buf = link.tx.buf[i];
 800fbe6:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
 800fbea:	b158      	cbz	r0, 800fc04 <send_reliable+0x30>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 800fbec:	3501      	adds	r5, #1
 800fbee:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
 800fbf0:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 800fbf4:	d007      	beq.n	800fc06 <send_reliable+0x32>
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	b12b      	cbz	r3, 800fc06 <send_reliable+0x32>
			bt_mesh_adv_send(buf, NULL, NULL);
 800fbfa:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800fbfc:	f7f9 fb42 	bl	8009284 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800fc00:	2d03      	cmp	r5, #3
 800fc02:	d1f0      	bne.n	800fbe6 <send_reliable+0x12>
 800fc04:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 800fc06:	4631      	mov	r1, r6
 800fc08:	e7f8      	b.n	800fbfc <send_reliable+0x28>
 800fc0a:	bf00      	nop
 800fc0c:	20001218 	.word	0x20001218
 800fc10:	20006170 	.word	0x20006170

0800fc14 <atomic_or>:
{
 800fc14:	b500      	push	{lr}
}
 800fc16:	f3bf 8f5b 	dmb	ish
 800fc1a:	e850 3f00 	ldrex	r3, [r0]
 800fc1e:	ea43 0201 	orr.w	r2, r3, r1
 800fc22:	e840 2e00 	strex	lr, r2, [r0]
 800fc26:	f1be 0f00 	cmp.w	lr, #0
 800fc2a:	d1f6      	bne.n	800fc1a <atomic_or+0x6>
 800fc2c:	f3bf 8f5b 	dmb	ish
 800fc30:	4618      	mov	r0, r3
 800fc32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800fc38 <gen_prov_ack_send>:
{
 800fc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
 800fc3a:	4d16      	ldr	r5, [pc, #88]	; (800fc94 <gen_prov_ack_send+0x5c>)
 800fc3c:	782b      	ldrb	r3, [r5, #0]
 800fc3e:	4283      	cmp	r3, r0
{
 800fc40:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
 800fc42:	d025      	beq.n	800fc90 <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
 800fc44:	f7ff ffbf 	bl	800fbc6 <adv_buf_create>
	if (!buf) {
 800fc48:	4604      	mov	r4, r0
 800fc4a:	b308      	cbz	r0, 800fc90 <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
 800fc4c:	782b      	ldrb	r3, [r5, #0]
 800fc4e:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
 800fc52:	bf08      	it	eq
 800fc54:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
 800fc56:	f100 0508 	add.w	r5, r0, #8
 800fc5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
 800fc5e:	bf08      	it	eq
 800fc60:	4f0e      	ldreq	r7, [pc, #56]	; (800fc9c <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
 800fc62:	4628      	mov	r0, r5
		complete = NULL;
 800fc64:	bf18      	it	ne
 800fc66:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
 800fc68:	f001 fd87 	bl	801177a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f001 fd5b 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
 800fc74:	2101      	movs	r1, #1
 800fc76:	4628      	mov	r0, r5
 800fc78:	f001 fd57 	bl	801172a <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	4639      	mov	r1, r7
 800fc80:	2200      	movs	r2, #0
 800fc82:	f7f9 faff 	bl	8009284 <bt_mesh_adv_send>
	net_buf_unref(buf);
 800fc86:	4620      	mov	r0, r4
}
 800fc88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
 800fc8c:	f001 bd1e 	b.w	80116cc <net_buf_unref>
 800fc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc92:	bf00      	nop
 800fc94:	20006178 	.word	0x20006178
 800fc98:	200010e8 	.word	0x200010e8
 800fc9c:	08013d34 	.word	0x08013d34

0800fca0 <prov_input_complete>:
 800fca0:	4770      	bx	lr

0800fca2 <sys_memcpy_swap.constprop.19>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
 800fca2:	f101 0320 	add.w	r3, r1, #32
 800fca6:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
 800fca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcac:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	d1f9      	bne.n	800fca8 <sys_memcpy_swap.constprop.19+0x6>
}
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <buf_sent>:
	if (!link.tx.buf[0]) {
 800fcb8:	4905      	ldr	r1, [pc, #20]	; (800fcd0 <buf_sent+0x18>)
 800fcba:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
 800fcbe:	b133      	cbz	r3, 800fcce <buf_sent+0x16>
 800fcc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800fcc4:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 800fcc8:	4802      	ldr	r0, [pc, #8]	; (800fcd4 <buf_sent+0x1c>)
 800fcca:	f002 bd15 	b.w	80126f8 <k_delayed_work_submit_to_queue>
 800fcce:	4770      	bx	lr
 800fcd0:	200010e8 	.word	0x200010e8
 800fcd4:	20001480 	.word	0x20001480

0800fcd8 <atomic_test_bit.constprop.24>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
 800fcd8:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800fcda:	4b07      	ldr	r3, [pc, #28]	; (800fcf8 <atomic_test_bit.constprop.24+0x20>)
 800fcdc:	f3bf 8f5b 	dmb	ish
 800fce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
 800fce8:	f000 001f 	and.w	r0, r0, #31
 800fcec:	fa43 f000 	asr.w	r0, r3, r0
}
 800fcf0:	f000 0001 	and.w	r0, r0, #1
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	200010e8 	.word	0x200010e8

0800fcfc <prov_complete>:
 800fcfc:	4770      	bx	lr

0800fcfe <prov_capabilities>:
 800fcfe:	4770      	bx	lr

0800fd00 <free_segments>:
{
 800fd00:	b570      	push	{r4, r5, r6, lr}
 800fd02:	4c0c      	ldr	r4, [pc, #48]	; (800fd34 <free_segments+0x34>)
		link.tx.buf[i] = NULL;
 800fd04:	2500      	movs	r5, #0
 800fd06:	f104 060c 	add.w	r6, r4, #12
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 800fd0a:	42b4      	cmp	r4, r6
 800fd0c:	d100      	bne.n	800fd10 <free_segments+0x10>
 800fd0e:	bd70      	pop	{r4, r5, r6, pc}
		struct net_buf *buf = link.tx.buf[i];
 800fd10:	f854 0f04 	ldr.w	r0, [r4, #4]!
		if (!buf) {
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0fa      	beq.n	800fd0e <free_segments+0xe>
		link.tx.buf[i] = NULL;
 800fd18:	6025      	str	r5, [r4, #0]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 800fd1a:	89c3      	ldrh	r3, [r0, #14]
 800fd1c:	4403      	add	r3, r0
 800fd1e:	3313      	adds	r3, #19
 800fd20:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(buf)->busy = 0;
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	7a1a      	ldrb	r2, [r3, #8]
 800fd28:	f365 0282 	bfi	r2, r5, #2, #1
 800fd2c:	721a      	strb	r2, [r3, #8]
		net_buf_unref(buf);
 800fd2e:	f001 fccd 	bl	80116cc <net_buf_unref>
 800fd32:	e7ea      	b.n	800fd0a <free_segments+0xa>
 800fd34:	20001220 	.word	0x20001220

0800fd38 <prov_clear_tx>:
{
 800fd38:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
 800fd3a:	4803      	ldr	r0, [pc, #12]	; (800fd48 <prov_clear_tx+0x10>)
 800fd3c:	f002 fc90 	bl	8012660 <k_delayed_work_cancel>
}
 800fd40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
 800fd44:	f7ff bfdc 	b.w	800fd00 <free_segments>
 800fd48:	20001230 	.word	0x20001230

0800fd4c <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
 800fd4c:	4b05      	ldr	r3, [pc, #20]	; (800fd64 <gen_prov_ack+0x18>)
 800fd4e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fd52:	b132      	cbz	r2, 800fd62 <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
 800fd54:	7902      	ldrb	r2, [r0, #4]
 800fd56:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d101      	bne.n	800fd62 <gen_prov_ack+0x16>
		prov_clear_tx();
 800fd5e:	f7ff bfeb 	b.w	800fd38 <prov_clear_tx>
 800fd62:	4770      	bx	lr
 800fd64:	200010e8 	.word	0x200010e8

0800fd68 <bearer_ctl_send>:
{
 800fd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	4688      	mov	r8, r1
 800fd70:	4691      	mov	r9, r2
	prov_clear_tx();
 800fd72:	f7ff ffe1 	bl	800fd38 <prov_clear_tx>
	buf = adv_buf_create();
 800fd76:	f7ff ff26 	bl	800fbc6 <adv_buf_create>
	if (!buf) {
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	b1f0      	cbz	r0, 800fdbc <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
 800fd7e:	4f11      	ldr	r7, [pc, #68]	; (800fdc4 <bearer_ctl_send+0x5c>)
 800fd80:	f100 0508 	add.w	r5, r0, #8
 800fd84:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800fd88:	4628      	mov	r0, r5
 800fd8a:	f001 fcf6 	bl	801177a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
 800fd8e:	2100      	movs	r1, #0
 800fd90:	4628      	mov	r0, r5
 800fd92:	f001 fcca 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
 800fd96:	00a1      	lsls	r1, r4, #2
 800fd98:	f041 0103 	orr.w	r1, r1, #3
 800fd9c:	b2c9      	uxtb	r1, r1
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f001 fcc3 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
 800fda4:	464a      	mov	r2, r9
 800fda6:	4641      	mov	r1, r8
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f001 fcb5 	bl	8011718 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
 800fdae:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
 800fdb2:	f7ff ff0f 	bl	800fbd4 <send_reliable>
	return 0;
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
 800fdbc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800fdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc4:	200010e8 	.word	0x200010e8

0800fdc8 <prov_send>:
{
 800fdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
 800fdcc:	4e4e      	ldr	r6, [pc, #312]	; (800ff08 <prov_send+0x140>)
{
 800fdce:	4604      	mov	r4, r0
	if (link.conn) {
 800fdd0:	6870      	ldr	r0, [r6, #4]
 800fdd2:	b128      	cbz	r0, 800fde0 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
 800fdd4:	4622      	mov	r2, r4
 800fdd6:	2103      	movs	r1, #3
}
 800fdd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
 800fddc:	f001 ba3b 	b.w	8011256 <bt_mesh_proxy_send>
	prov_clear_tx();
 800fde0:	f7ff ffaa 	bl	800fd38 <prov_clear_tx>
	start = adv_buf_create();
 800fde4:	f7ff feef 	bl	800fbc6 <adv_buf_create>
	if (!start) {
 800fde8:	4680      	mov	r8, r0
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d060      	beq.n	800feb0 <prov_send+0xe8>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
 800fdee:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
 800fdf2:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
 800fdf6:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800ff0c <prov_send+0x144>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
 800fdfa:	1e6b      	subs	r3, r5, #1
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
 800fe00:	bf98      	it	ls
 800fe02:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
 800fe04:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
 800fe08:	bf94      	ite	ls
 800fe0a:	b2ed      	uxtbls	r5, r5
	link.tx.id = 0x80;
 800fe0c:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
 800fe0e:	4638      	mov	r0, r7
	link.tx.id = 0x80;
 800fe10:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
 800fe14:	f001 fcb1 	bl	801177a <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
 800fe18:	4629      	mov	r1, r5
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	f001 fc85 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
 800fe20:	7923      	ldrb	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
 800fe22:	2b14      	cmp	r3, #20
	len -= START_PAYLOAD_MAX;
 800fe24:	bf81      	itttt	hi
 800fe26:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
 800fe2a:	b2c9      	uxtbhi	r1, r1
 800fe2c:	2317      	movhi	r3, #23
 800fe2e:	fbb1 f1f3 	udivhi	r1, r1, r3
 800fe32:	bf86      	itte	hi
 800fe34:	3101      	addhi	r1, #1
 800fe36:	b2c9      	uxtbhi	r1, r1
		return 0;
 800fe38:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
 800fe3a:	0089      	lsls	r1, r1, #2
 800fe3c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800fe40:	4638      	mov	r0, r7
 800fe42:	f001 fc72 	bl	801172a <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
 800fe46:	88a1      	ldrh	r1, [r4, #4]
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f001 fc85 	bl	8011758 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
 800fe4e:	7921      	ldrb	r1, [r4, #4]
 800fe50:	6820      	ldr	r0, [r4, #0]
 800fe52:	f7fc f8e3 	bl	800c01c <bt_mesh_fcs_calc>
 800fe56:	4601      	mov	r1, r0
 800fe58:	4638      	mov	r0, r7
 800fe5a:	f001 fc66 	bl	801172a <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
 800fe5e:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = min(msg->len, START_PAYLOAD_MAX);
 800fe62:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
 800fe66:	6821      	ldr	r1, [r4, #0]
	seg_len = min(msg->len, START_PAYLOAD_MAX);
 800fe68:	f1b8 0f14 	cmp.w	r8, #20
 800fe6c:	bf28      	it	cs
 800fe6e:	f04f 0814 	movcs.w	r8, #20
	net_buf_add_mem(start, msg->data, seg_len);
 800fe72:	4642      	mov	r2, r8
 800fe74:	4638      	mov	r0, r7
 800fe76:	f001 fc4f 	bl	8011718 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
 800fe7a:	4641      	mov	r1, r8
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f001 fcb0 	bl	80117e2 <net_buf_simple_pull>
 800fe82:	f04f 0804 	mov.w	r8, #4
	for (seg_id = 1; msg->len > 0; seg_id++) {
 800fe86:	88a7      	ldrh	r7, [r4, #4]
 800fe88:	b927      	cbnz	r7, 800fe94 <prov_send+0xcc>
	send_reliable();
 800fe8a:	f7ff fea3 	bl	800fbd4 <send_reliable>
	return 0;
 800fe8e:	4638      	mov	r0, r7
 800fe90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
 800fe94:	f1b8 0f0c 	cmp.w	r8, #12
 800fe98:	d105      	bne.n	800fea6 <prov_send+0xde>
			free_segments();
 800fe9a:	f7ff ff31 	bl	800fd00 <free_segments>
			return -E2BIG;
 800fe9e:	f06f 0006 	mvn.w	r0, #6
 800fea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
 800fea6:	f7ff fe8e 	bl	800fbc6 <adv_buf_create>
		if (!buf) {
 800feaa:	b928      	cbnz	r0, 800feb8 <prov_send+0xf0>
			free_segments();
 800feac:	f7ff ff28 	bl	800fd00 <free_segments>
		return -ENOBUFS;
 800feb0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
 800feb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800feb8:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
 800febc:	f849 0f04 	str.w	r0, [r9, #4]!
		net_buf_add_be32(buf, link.id);
 800fec0:	f100 0708 	add.w	r7, r0, #8
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800fec4:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
 800fec8:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
 800fecc:	4638      	mov	r0, r7
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
 800fece:	bf28      	it	cs
 800fed0:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
 800fed4:	f001 fc51 	bl	801177a <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
 800fed8:	4629      	mov	r1, r5
 800feda:	4638      	mov	r0, r7
 800fedc:	f001 fc25 	bl	801172a <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
 800fee0:	f048 0102 	orr.w	r1, r8, #2
 800fee4:	4638      	mov	r0, r7
 800fee6:	f001 fc20 	bl	801172a <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
 800feea:	4652      	mov	r2, sl
 800feec:	6821      	ldr	r1, [r4, #0]
 800feee:	4638      	mov	r0, r7
 800fef0:	f001 fc12 	bl	8011718 <net_buf_simple_add_mem>
 800fef4:	f108 0804 	add.w	r8, r8, #4
		net_buf_simple_pull(msg, seg_len);
 800fef8:	4651      	mov	r1, sl
 800fefa:	4620      	mov	r0, r4
 800fefc:	f001 fc71 	bl	80117e2 <net_buf_simple_pull>
 800ff00:	fa5f f888 	uxtb.w	r8, r8
 800ff04:	e7bf      	b.n	800fe86 <prov_send+0xbe>
 800ff06:	bf00      	nop
 800ff08:	200010e8 	.word	0x200010e8
 800ff0c:	20001224 	.word	0x20001224

0800ff10 <atomic_test_and_clear_bit.constprop.23>:
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
 800ff10:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
 800ff12:	f000 021f 	and.w	r2, r0, #31
 800ff16:	2301      	movs	r3, #1
 800ff18:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800ff1a:	0942      	lsrs	r2, r0, #5
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800ff1c:	480b      	ldr	r0, [pc, #44]	; (800ff4c <atomic_test_and_clear_bit.constprop.23+0x3c>)
 800ff1e:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
 800ff22:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800ff24:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ff28:	e850 2f00 	ldrex	r2, [r0]
 800ff2c:	ea02 0e01 	and.w	lr, r2, r1
 800ff30:	e840 ec00 	strex	ip, lr, [r0]
 800ff34:	f1bc 0f00 	cmp.w	ip, #0
 800ff38:	d1f6      	bne.n	800ff28 <atomic_test_and_clear_bit.constprop.23+0x18>
 800ff3a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
 800ff3e:	421a      	tst	r2, r3
}
 800ff40:	bf14      	ite	ne
 800ff42:	2001      	movne	r0, #1
 800ff44:	2000      	moveq	r0, #0
 800ff46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff4a:	bf00      	nop
 800ff4c:	200010e8 	.word	0x200010e8

0800ff50 <prov_send_fail_msg>:
{
 800ff50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_buf_simple *buf = PROV_BUF(2);
 800ff52:	2210      	movs	r2, #16
{
 800ff54:	4604      	mov	r4, r0
	struct net_buf_simple *buf = PROV_BUF(2);
 800ff56:	2100      	movs	r1, #0
 800ff58:	4668      	mov	r0, sp
 800ff5a:	f7f0 fcbd 	bl	80008d8 <memset>
 800ff5e:	2307      	movs	r3, #7
 800ff60:	f8ad 3006 	strh.w	r3, [sp, #6]
	net_buf_simple_add_u8(buf, type);
 800ff64:	2109      	movs	r1, #9
	buf->data = buf->__buf + reserve_head;
 800ff66:	f10d 030d 	add.w	r3, sp, #13
 800ff6a:	4668      	mov	r0, sp
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	f001 fbdc 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, err);
 800ff72:	4621      	mov	r1, r4
 800ff74:	4668      	mov	r0, sp
 800ff76:	f001 fbd8 	bl	801172a <net_buf_simple_add_u8>
	prov_send(buf);
 800ff7a:	4668      	mov	r0, sp
 800ff7c:	f7ff ff24 	bl	800fdc8 <prov_send>
}
 800ff80:	b004      	add	sp, #16
 800ff82:	bd10      	pop	{r4, pc}

0800ff84 <prov_start>:
{
 800ff84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (data[0] != PROV_ALG_P256) {
 800ff88:	7803      	ldrb	r3, [r0, #0]
{
 800ff8a:	b08b      	sub	sp, #44	; 0x2c
 800ff8c:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
 800ff8e:	b11b      	cbz	r3, 800ff98 <prov_start+0x14>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
 800ff90:	2002      	movs	r0, #2
 800ff92:	f7ff ffdd 	bl	800ff50 <prov_send_fail_msg>
 800ff96:	e01e      	b.n	800ffd6 <prov_start+0x52>
	if (data[1] > 0x01) {
 800ff98:	7843      	ldrb	r3, [r0, #1]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d8f8      	bhi.n	800ff90 <prov_start+0xc>
	memcpy(&link.conf_inputs[12], data, 5);
 800ff9e:	4f65      	ldr	r7, [pc, #404]	; (8010134 <prov_start+0x1b0>)
 800ffa0:	2205      	movs	r2, #5
 800ffa2:	4601      	mov	r1, r0
 800ffa4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800ffa8:	f7f0 fc6a 	bl	8000880 <memcpy>
	link.expect = PROV_PUB_KEY;
 800ffac:	2303      	movs	r3, #3
 800ffae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	switch (method) {
 800ffb2:	78a2      	ldrb	r2, [r4, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
 800ffb4:	78e3      	ldrb	r3, [r4, #3]
 800ffb6:	7925      	ldrb	r5, [r4, #4]
	switch (method) {
 800ffb8:	2a03      	cmp	r2, #3
 800ffba:	d8e9      	bhi.n	800ff90 <prov_start+0xc>
 800ffbc:	e8df f002 	tbb	[pc, r2]
 800ffc0:	9c230e02 	.word	0x9c230e02
		if (action || size) {
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1e3      	bne.n	800ff90 <prov_start+0xc>
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	d1e1      	bne.n	800ff90 <prov_start+0xc>
		memset(link.auth, 0, sizeof(link.auth));
 800ffcc:	485a      	ldr	r0, [pc, #360]	; (8010138 <prov_start+0x1b4>)
 800ffce:	2210      	movs	r2, #16
 800ffd0:	4629      	mov	r1, r5
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
 800ffd2:	f7f0 fc81 	bl	80008d8 <memset>
}
 800ffd6:	b00b      	add	sp, #44	; 0x2c
 800ffd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (action || size) {
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d1d7      	bne.n	800ff90 <prov_start+0xc>
 800ffe0:	2d00      	cmp	r5, #0
 800ffe2:	d1d5      	bne.n	800ff90 <prov_start+0xc>
		memcpy(link.auth + 16 - prov->static_val_len,
 800ffe4:	4e55      	ldr	r6, [pc, #340]	; (801013c <prov_start+0x1b8>)
 800ffe6:	4c54      	ldr	r4, [pc, #336]	; (8010138 <prov_start+0x1b4>)
 800ffe8:	6833      	ldr	r3, [r6, #0]
 800ffea:	7a1a      	ldrb	r2, [r3, #8]
 800ffec:	6859      	ldr	r1, [r3, #4]
 800ffee:	f1c2 0010 	rsb	r0, r2, #16
 800fff2:	4420      	add	r0, r4
 800fff4:	f7f0 fc44 	bl	8000880 <memcpy>
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
 800fff8:	6833      	ldr	r3, [r6, #0]
 800fffa:	7a1a      	ldrb	r2, [r3, #8]
 800fffc:	4629      	mov	r1, r5
 800fffe:	f1c2 0210 	rsb	r2, r2, #16
 8010002:	4620      	mov	r0, r4
 8010004:	e7e5      	b.n	800ffd2 <prov_start+0x4e>
 8010006:	2b04      	cmp	r3, #4
 8010008:	d8c2      	bhi.n	800ff90 <prov_start+0xc>
 801000a:	4a4d      	ldr	r2, [pc, #308]	; (8010140 <prov_start+0x1bc>)
 801000c:	f812 8003 	ldrb.w	r8, [r2, r3]
		if (!output) {
 8010010:	f1b8 0f00 	cmp.w	r8, #0
 8010014:	d0bc      	beq.n	800ff90 <prov_start+0xc>
		if (!(prov->output_actions & output)) {
 8010016:	f8df 9124 	ldr.w	r9, [pc, #292]	; 801013c <prov_start+0x1b8>
 801001a:	f8d9 3000 	ldr.w	r3, [r9]
 801001e:	895a      	ldrh	r2, [r3, #10]
 8010020:	ea12 0f08 	tst.w	r2, r8
 8010024:	464e      	mov	r6, r9
 8010026:	d0b3      	beq.n	800ff90 <prov_start+0xc>
		if (size > prov->output_size) {
 8010028:	7a5b      	ldrb	r3, [r3, #9]
 801002a:	42ab      	cmp	r3, r5
 801002c:	d3b0      	bcc.n	800ff90 <prov_start+0xc>
		if (output == BT_MESH_DISPLAY_STRING) {
 801002e:	f1b8 0f10 	cmp.w	r8, #16
 8010032:	ac02      	add	r4, sp, #8
 8010034:	d131      	bne.n	801009a <prov_start+0x116>
			bt_rand(str, size);
 8010036:	4629      	mov	r1, r5
 8010038:	4620      	mov	r0, r4
 801003a:	f7f6 fc0f 	bl	800685c <bt_rand>
 801003e:	4622      	mov	r2, r4
				str[i] %= 36;
 8010040:	2124      	movs	r1, #36	; 0x24
			for (i = 0; i < size; i++) {
 8010042:	1b13      	subs	r3, r2, r4
 8010044:	b2db      	uxtb	r3, r3
 8010046:	429d      	cmp	r5, r3
 8010048:	d818      	bhi.n	801007c <prov_start+0xf8>
			memcpy(link.auth, str, size);
 801004a:	4f3b      	ldr	r7, [pc, #236]	; (8010138 <prov_start+0x1b4>)
			str[size] = '\0';
 801004c:	ab0a      	add	r3, sp, #40	; 0x28
 801004e:	442b      	add	r3, r5
 8010050:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
 8010054:	462a      	mov	r2, r5
 8010056:	4621      	mov	r1, r4
 8010058:	4638      	mov	r0, r7
			str[size] = '\0';
 801005a:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
 801005e:	f7f0 fc0f 	bl	8000880 <memcpy>
			memset(link.auth + size, 0, sizeof(link.auth) - size);
 8010062:	f1c5 0210 	rsb	r2, r5, #16
 8010066:	4641      	mov	r1, r8
 8010068:	1978      	adds	r0, r7, r5
 801006a:	f7f0 fc35 	bl	80008d8 <memset>
			return prov->output_string((char *)str);
 801006e:	6833      	ldr	r3, [r6, #0]
 8010070:	4620      	mov	r0, r4
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
 8010076:	2800      	cmp	r0, #0
 8010078:	daad      	bge.n	800ffd6 <prov_start+0x52>
 801007a:	e789      	b.n	800ff90 <prov_start+0xc>
				str[i] %= 36;
 801007c:	7810      	ldrb	r0, [r2, #0]
 801007e:	fbb0 f3f1 	udiv	r3, r0, r1
 8010082:	fb01 0313 	mls	r3, r1, r3, r0
 8010086:	b2db      	uxtb	r3, r3
 8010088:	f802 3b01 	strb.w	r3, [r2], #1
				if (str[i] < 10) {
 801008c:	2b09      	cmp	r3, #9
					str[i] += '0';
 801008e:	bf94      	ite	ls
 8010090:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
 8010092:	3337      	addhi	r3, #55	; 0x37
 8010094:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010098:	e7d3      	b.n	8010042 <prov_start+0xbe>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
 801009a:	4e2a      	ldr	r6, [pc, #168]	; (8010144 <prov_start+0x1c0>)
 801009c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801009e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80100a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
 80100a8:	2104      	movs	r1, #4
 80100aa:	eb0d 0001 	add.w	r0, sp, r1
 80100ae:	f7f6 fbd5 	bl	800685c <bt_rand>
			num %= div[size - 1];
 80100b2:	ab0a      	add	r3, sp, #40	; 0x28
 80100b4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80100b8:	9901      	ldr	r1, [sp, #4]
 80100ba:	f855 2c24 	ldr.w	r2, [r5, #-36]
 80100be:	fbb1 f3f2 	udiv	r3, r1, r2
 80100c2:	fb02 1313 	mls	r3, r2, r3, r1
	sys_put_be16(val >> 16, dst);
 80100c6:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
 80100c8:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
 80100ca:	f887 2059 	strb.w	r2, [r7, #89]	; 0x59
	dst[0] = val >> 8;
 80100ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80100d2:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
 80100d6:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	dst[1] = val;
 80100da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			memset(link.auth, 0, 12);
 80100de:	220c      	movs	r2, #12
 80100e0:	2100      	movs	r1, #0
 80100e2:	4815      	ldr	r0, [pc, #84]	; (8010138 <prov_start+0x1b4>)
			num %= div[size - 1];
 80100e4:	9301      	str	r3, [sp, #4]
			memset(link.auth, 0, 12);
 80100e6:	f7f0 fbf7 	bl	80008d8 <memset>
			return prov->output_number(output, num);
 80100ea:	f8d9 3000 	ldr.w	r3, [r9]
 80100ee:	9901      	ldr	r1, [sp, #4]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	4640      	mov	r0, r8
 80100f4:	4798      	blx	r3
 80100f6:	e7be      	b.n	8010076 <prov_start+0xf2>
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	f63f af49 	bhi.w	800ff90 <prov_start+0xc>
 80100fe:	4a12      	ldr	r2, [pc, #72]	; (8010148 <prov_start+0x1c4>)
 8010100:	5cd4      	ldrb	r4, [r2, r3]
		if (!input) {
 8010102:	2c00      	cmp	r4, #0
 8010104:	f43f af44 	beq.w	800ff90 <prov_start+0xc>
		if (!(prov->input_actions & input)) {
 8010108:	4b0c      	ldr	r3, [pc, #48]	; (801013c <prov_start+0x1b8>)
 801010a:	681e      	ldr	r6, [r3, #0]
 801010c:	89f3      	ldrh	r3, [r6, #14]
 801010e:	4223      	tst	r3, r4
 8010110:	f43f af3e 	beq.w	800ff90 <prov_start+0xc>
		if (size > prov->input_size) {
 8010114:	7b33      	ldrb	r3, [r6, #12]
 8010116:	42ab      	cmp	r3, r5
 8010118:	f4ff af3a 	bcc.w	800ff90 <prov_start+0xc>
		if (input == BT_MESH_ENTER_STRING) {
 801011c:	2c08      	cmp	r4, #8
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 801011e:	bf0c      	ite	eq
 8010120:	2140      	moveq	r1, #64	; 0x40
 8010122:	2120      	movne	r1, #32
 8010124:	4803      	ldr	r0, [pc, #12]	; (8010134 <prov_start+0x1b0>)
 8010126:	f7ff fd75 	bl	800fc14 <atomic_or>
		return prov->input(input, size);
 801012a:	69b3      	ldr	r3, [r6, #24]
 801012c:	4629      	mov	r1, r5
 801012e:	4620      	mov	r0, r4
 8010130:	4798      	blx	r3
 8010132:	e7a0      	b.n	8010076 <prov_start+0xf2>
 8010134:	200010e8 	.word	0x200010e8
 8010138:	20001134 	.word	0x20001134
 801013c:	20001258 	.word	0x20001258
 8010140:	08013d28 	.word	0x08013d28
 8010144:	08012cbc 	.word	0x08012cbc
 8010148:	08013d2d 	.word	0x08013d2d

0801014c <reset_link>:
{
 801014c:	b510      	push	{r4, lr}
	prov_clear_tx();
 801014e:	f7ff fdf3 	bl	800fd38 <prov_clear_tx>
	if (prov->link_close) {
 8010152:	4b12      	ldr	r3, [pc, #72]	; (801019c <reset_link+0x50>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6a1b      	ldr	r3, [r3, #32]
 8010158:	b10b      	cbz	r3, 801015e <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
 801015a:	2001      	movs	r0, #1
 801015c:	4798      	blx	r3
	memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
 801015e:	4c10      	ldr	r4, [pc, #64]	; (80101a0 <reset_link+0x54>)
 8010160:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8010164:	2100      	movs	r1, #0
 8010166:	4620      	mov	r0, r4
 8010168:	f7f0 fbb6 	bl	80008d8 <memset>
	link.rx.prev_id = XACT_NVAL;
 801016c:	23ff      	movs	r3, #255	; 0xff
 801016e:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
 8010172:	f7f6 fad5 	bl	8006720 <bt_pub_key_get>
 8010176:	b118      	cbz	r0, 8010180 <reset_link+0x34>
 8010178:	2102      	movs	r1, #2
 801017a:	4620      	mov	r0, r4
 801017c:	f7ff fd4a 	bl	800fc14 <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
 8010180:	f000 ffdc 	bl	801113c <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
 8010184:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
 8010188:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
 801018c:	b12b      	cbz	r3, 801019a <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
 801018e:	2100      	movs	r1, #0
 8010190:	4608      	mov	r0, r1
}
 8010192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
 8010196:	f7fe bdaf 	b.w	800ecf8 <bt_mesh_attention>
 801019a:	bd10      	pop	{r4, pc}
 801019c:	20001258 	.word	0x20001258
 80101a0:	200010e8 	.word	0x200010e8

080101a4 <gen_prov_ctl>:
{
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
 80101a8:	7940      	ldrb	r0, [r0, #5]
 80101aa:	0880      	lsrs	r0, r0, #2
 80101ac:	2801      	cmp	r0, #1
{
 80101ae:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
 80101b0:	d02e      	beq.n	8010210 <gen_prov_ctl+0x6c>
 80101b2:	d302      	bcc.n	80101ba <gen_prov_ctl+0x16>
 80101b4:	2802      	cmp	r0, #2
 80101b6:	d030      	beq.n	801021a <gen_prov_ctl+0x76>
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len < 16) {
 80101ba:	888b      	ldrh	r3, [r1, #4]
 80101bc:	2b0f      	cmp	r3, #15
 80101be:	d933      	bls.n	8010228 <gen_prov_ctl+0x84>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
 80101c0:	2002      	movs	r0, #2
 80101c2:	f7ff fd89 	bl	800fcd8 <atomic_test_bit.constprop.24>
 80101c6:	bb78      	cbnz	r0, 8010228 <gen_prov_ctl+0x84>
	if (memcmp(buf->data, prov->uuid, 16)) {
 80101c8:	4d18      	ldr	r5, [pc, #96]	; (801022c <gen_prov_ctl+0x88>)
 80101ca:	6830      	ldr	r0, [r6, #0]
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	2210      	movs	r2, #16
 80101d0:	6819      	ldr	r1, [r3, #0]
 80101d2:	f7f0 fb40 	bl	8000856 <memcmp>
 80101d6:	bb38      	cbnz	r0, 8010228 <gen_prov_ctl+0x84>
	if (prov->link_open) {
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	69db      	ldr	r3, [r3, #28]
 80101dc:	b10b      	cbz	r3, 80101e2 <gen_prov_ctl+0x3e>
		prov->link_open(BT_MESH_PROV_ADV);
 80101de:	2001      	movs	r0, #1
 80101e0:	4798      	blx	r3
	link.id = rx->link_id;
 80101e2:	6823      	ldr	r3, [r4, #0]
 80101e4:	4c12      	ldr	r4, [pc, #72]	; (8010230 <gen_prov_ctl+0x8c>)
 80101e6:	2104      	movs	r1, #4
 80101e8:	4620      	mov	r0, r4
 80101ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80101ee:	f7ff fd11 	bl	800fc14 <atomic_or>
	net_buf_simple_init(link.rx.buf, 0);
 80101f2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len = 0;
 80101f6:	2500      	movs	r5, #0
	buf->data = buf->__buf + reserve_head;
 80101f8:	f103 0208 	add.w	r2, r3, #8
 80101fc:	601a      	str	r2, [r3, #0]
	buf->len = 0;
 80101fe:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
 8010200:	462a      	mov	r2, r5
 8010202:	4629      	mov	r1, r5
 8010204:	2001      	movs	r0, #1
 8010206:	f7ff fdaf 	bl	800fd68 <bearer_ctl_send>
	link.expect = PROV_INVITE;
 801020a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 801020e:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 8010210:	2002      	movs	r0, #2
}
 8010212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 8010216:	f7ff bd5f 	b.w	800fcd8 <atomic_test_bit.constprop.24>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 801021a:	f7ff fd5d 	bl	800fcd8 <atomic_test_bit.constprop.24>
 801021e:	b118      	cbz	r0, 8010228 <gen_prov_ctl+0x84>
}
 8010220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
 8010224:	f7ff bf92 	b.w	801014c <reset_link>
 8010228:	bd70      	pop	{r4, r5, r6, pc}
 801022a:	bf00      	nop
 801022c:	20001258 	.word	0x20001258
 8010230:	200010e8 	.word	0x200010e8

08010234 <prov_retransmit>:
{
 8010234:	b570      	push	{r4, r5, r6, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
 8010236:	2002      	movs	r0, #2
 8010238:	f7ff fd4e 	bl	800fcd8 <atomic_test_bit.constprop.24>
 801023c:	b378      	cbz	r0, 801029e <prov_retransmit+0x6a>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
 801023e:	4c18      	ldr	r4, [pc, #96]	; (80102a0 <prov_retransmit+0x6c>)
 8010240:	f001 ff3c 	bl	80120bc <_impl_k_uptime_get>
 8010244:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010248:	1a80      	subs	r0, r0, r2
 801024a:	f247 5230 	movw	r2, #30000	; 0x7530
 801024e:	eb61 0103 	sbc.w	r1, r1, r3
 8010252:	2300      	movs	r3, #0
 8010254:	4282      	cmp	r2, r0
 8010256:	418b      	sbcs	r3, r1
 8010258:	db1d      	blt.n	8010296 <prov_retransmit+0x62>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 801025a:	4e12      	ldr	r6, [pc, #72]	; (80102a4 <prov_retransmit+0x70>)
 801025c:	340c      	adds	r4, #12
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
 801025e:	2501      	movs	r5, #1
		struct net_buf *buf = link.tx.buf[i];
 8010260:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
 8010264:	b1d8      	cbz	r0, 801029e <prov_retransmit+0x6a>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
 8010266:	89c3      	ldrh	r3, [r0, #14]
 8010268:	4403      	add	r3, r0
 801026a:	3313      	adds	r3, #19
 801026c:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	7a1a      	ldrb	r2, [r3, #8]
 8010274:	f012 0204 	ands.w	r2, r2, #4
 8010278:	d106      	bne.n	8010288 <prov_retransmit+0x54>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
 801027a:	2d03      	cmp	r5, #3
 801027c:	d008      	beq.n	8010290 <prov_retransmit+0x5c>
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	b133      	cbz	r3, 8010290 <prov_retransmit+0x5c>
			bt_mesh_adv_send(buf, NULL, NULL);
 8010282:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 8010284:	f7f8 fffe 	bl	8009284 <bt_mesh_adv_send>
 8010288:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
 801028a:	2d04      	cmp	r5, #4
 801028c:	d1e8      	bne.n	8010260 <prov_retransmit+0x2c>
 801028e:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
 8010290:	2200      	movs	r2, #0
 8010292:	4631      	mov	r1, r6
 8010294:	e7f6      	b.n	8010284 <prov_retransmit+0x50>
}
 8010296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_link();
 801029a:	f7ff bf57 	b.w	801014c <reset_link>
 801029e:	bd70      	pop	{r4, r5, r6, pc}
 80102a0:	20001218 	.word	0x20001218
 80102a4:	20006170 	.word	0x20006170

080102a8 <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
 80102a8:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
 80102aa:	4d12      	ldr	r5, [pc, #72]	; (80102f4 <bt_mesh_pb_gatt_recv+0x4c>)
 80102ac:	686b      	ldr	r3, [r5, #4]
 80102ae:	4283      	cmp	r3, r0
{
 80102b0:	460c      	mov	r4, r1
	if (link.conn != conn) {
 80102b2:	d11c      	bne.n	80102ee <bt_mesh_pb_gatt_recv+0x46>
		BT_WARN("Data for unexpected connection");
		return -ENOTCONN;
	}

	if (buf->len < 1) {
 80102b4:	888b      	ldrh	r3, [r1, #4]
 80102b6:	b913      	cbnz	r3, 80102be <bt_mesh_pb_gatt_recv+0x16>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
		return -EINVAL;
 80102b8:	f06f 0015 	mvn.w	r0, #21
 80102bc:	bd38      	pop	{r3, r4, r5, pc}
	}

	type = net_buf_simple_pull_u8(buf);
 80102be:	4608      	mov	r0, r1
 80102c0:	f001 fa97 	bl	80117f2 <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
 80102c4:	2809      	cmp	r0, #9
 80102c6:	d005      	beq.n	80102d4 <bt_mesh_pb_gatt_recv+0x2c>
 80102c8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80102cc:	4283      	cmp	r3, r0
 80102ce:	d1f3      	bne.n	80102b8 <bt_mesh_pb_gatt_recv+0x10>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
		return -EINVAL;
	}

	if (type >= ARRAY_SIZE(prov_handlers)) {
 80102d0:	2809      	cmp	r0, #9
 80102d2:	d8f1      	bhi.n	80102b8 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
		return -EINVAL;
	}

	if (prov_handlers[type].len != buf->len) {
 80102d4:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <bt_mesh_pb_gatt_recv+0x50>)
 80102d6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80102da:	8891      	ldrh	r1, [r2, #4]
 80102dc:	88a2      	ldrh	r2, [r4, #4]
 80102de:	4291      	cmp	r1, r2
 80102e0:	d1ea      	bne.n	80102b8 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
		return -EINVAL;
	}

	prov_handlers[type].func(buf->data);
 80102e2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80102e6:	6820      	ldr	r0, [r4, #0]
 80102e8:	4798      	blx	r3

	return 0;
 80102ea:	2000      	movs	r0, #0
 80102ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
 80102ee:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	200010e8 	.word	0x200010e8
 80102f8:	08013d6c 	.word	0x08013d6c

080102fc <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
 80102fc:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
 80102fe:	4c0e      	ldr	r4, [pc, #56]	; (8010338 <bt_mesh_pb_gatt_open+0x3c>)
 8010300:	4606      	mov	r6, r0
 8010302:	2104      	movs	r1, #4
 8010304:	4620      	mov	r0, r4
 8010306:	f7ff fc85 	bl	800fc14 <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
 801030a:	f010 0504 	ands.w	r5, r0, #4
 801030e:	d10d      	bne.n	801032c <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
 8010310:	4630      	mov	r0, r6
 8010312:	f7f6 fdf7 	bl	8006f04 <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <bt_mesh_pb_gatt_open+0x40>)
	link.expect = PROV_INVITE;
 8010318:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	if (prov->link_open) {
 801031c:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
 801031e:	6060      	str	r0, [r4, #4]
	if (prov->link_open) {
 8010320:	69db      	ldr	r3, [r3, #28]
 8010322:	b133      	cbz	r3, 8010332 <bt_mesh_pb_gatt_open+0x36>
		prov->link_open(BT_MESH_PROV_GATT);
 8010324:	2002      	movs	r0, #2
 8010326:	4798      	blx	r3
	}

	return 0;
 8010328:	4628      	mov	r0, r5
 801032a:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 801032c:	f06f 000f 	mvn.w	r0, #15
 8010330:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8010332:	4618      	mov	r0, r3
}
 8010334:	bd70      	pop	{r4, r5, r6, pc}
 8010336:	bf00      	nop
 8010338:	200010e8 	.word	0x200010e8
 801033c:	20001258 	.word	0x20001258

08010340 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
 8010340:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
 8010342:	4c14      	ldr	r4, [pc, #80]	; (8010394 <bt_mesh_pb_gatt_close+0x54>)
 8010344:	6863      	ldr	r3, [r4, #4]
 8010346:	4283      	cmp	r3, r0
 8010348:	d121      	bne.n	801038e <bt_mesh_pb_gatt_close+0x4e>
		BT_ERR("Not connected");
		return -ENOTCONN;
	}

	/* Disable Attention Timer if it was set */
	if (link.conf_inputs[0]) {
 801034a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 801034e:	b11b      	cbz	r3, 8010358 <bt_mesh_pb_gatt_close+0x18>
		bt_mesh_attention(NULL, 0);
 8010350:	2100      	movs	r1, #0
 8010352:	4608      	mov	r0, r1
 8010354:	f7fe fcd0 	bl	800ecf8 <bt_mesh_attention>
	}

	if (prov->link_close) {
 8010358:	4b0f      	ldr	r3, [pc, #60]	; (8010398 <bt_mesh_pb_gatt_close+0x58>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	6a1b      	ldr	r3, [r3, #32]
 801035e:	b10b      	cbz	r3, 8010364 <bt_mesh_pb_gatt_close+0x24>
		prov->link_close(BT_MESH_PROV_GATT);
 8010360:	2002      	movs	r0, #2
 8010362:	4798      	blx	r3
	}

	bt_conn_unref(link.conn);
 8010364:	6860      	ldr	r0, [r4, #4]
 8010366:	f7f6 fdd4 	bl	8006f12 <bt_conn_unref>

	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
 801036a:	2001      	movs	r0, #1
 801036c:	f7ff fcb4 	bl	800fcd8 <atomic_test_bit.constprop.24>
	memset(&link, 0, sizeof(link));
 8010370:	f44f 72b8 	mov.w	r2, #368	; 0x170
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
 8010374:	4604      	mov	r4, r0
	memset(&link, 0, sizeof(link));
 8010376:	2100      	movs	r1, #0
 8010378:	4806      	ldr	r0, [pc, #24]	; (8010394 <bt_mesh_pb_gatt_close+0x54>)
 801037a:	f7f0 faad 	bl	80008d8 <memset>

	if (pub_key) {
 801037e:	b124      	cbz	r4, 801038a <bt_mesh_pb_gatt_close+0x4a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8010380:	2102      	movs	r1, #2
 8010382:	4804      	ldr	r0, [pc, #16]	; (8010394 <bt_mesh_pb_gatt_close+0x54>)
 8010384:	f7ff fc46 	bl	800fc14 <atomic_or>
 8010388:	2400      	movs	r4, #0
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
 801038a:	4620      	mov	r0, r4
 801038c:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
 801038e:	f06f 0438 	mvn.w	r4, #56	; 0x38
 8010392:	e7fa      	b.n	801038a <bt_mesh_pb_gatt_close+0x4a>
 8010394:	200010e8 	.word	0x200010e8
 8010398:	20001258 	.word	0x20001258

0801039c <close_link.constprop.21>:
static void close_link(u8_t err, u8_t reason)
 801039c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (link.conn) {
 801039e:	4c16      	ldr	r4, [pc, #88]	; (80103f8 <close_link.constprop.21+0x5c>)
 80103a0:	2302      	movs	r3, #2
 80103a2:	f88d 3007 	strb.w	r3, [sp, #7]
 80103a6:	6863      	ldr	r3, [r4, #4]
 80103a8:	b123      	cbz	r3, 80103b4 <close_link.constprop.21+0x18>
		bt_mesh_pb_gatt_close(link.conn);
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff ffc8 	bl	8010340 <bt_mesh_pb_gatt_close>
}
 80103b0:	b003      	add	sp, #12
 80103b2:	bd30      	pop	{r4, r5, pc}
	if (err) {
 80103b4:	b108      	cbz	r0, 80103ba <close_link.constprop.21+0x1e>
		prov_send_fail_msg(err);
 80103b6:	f7ff fdcb 	bl	800ff50 <prov_send_fail_msg>
	link.rx.seg = 0;
 80103ba:	2500      	movs	r5, #0
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
 80103bc:	2201      	movs	r2, #1
 80103be:	f10d 0107 	add.w	r1, sp, #7
 80103c2:	2002      	movs	r0, #2
	link.rx.seg = 0;
 80103c4:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
 80103c8:	f7ff fcce 	bl	800fd68 <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80103cc:	f3bf 8f5b 	dmb	ish
 80103d0:	e854 3f00 	ldrex	r3, [r4]
 80103d4:	f023 0304 	bic.w	r3, r3, #4
 80103d8:	e844 3200 	strex	r2, r3, [r4]
 80103dc:	2a00      	cmp	r2, #0
 80103de:	d1f7      	bne.n	80103d0 <close_link.constprop.21+0x34>
 80103e0:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
 80103e4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d0e1      	beq.n	80103b0 <close_link.constprop.21+0x14>
		bt_mesh_attention(NULL, 0);
 80103ec:	4629      	mov	r1, r5
 80103ee:	4628      	mov	r0, r5
 80103f0:	f7fe fc82 	bl	800ecf8 <bt_mesh_attention>
 80103f4:	e7dc      	b.n	80103b0 <close_link.constprop.21+0x14>
 80103f6:	bf00      	nop
 80103f8:	200010e8 	.word	0x200010e8

080103fc <prov_invite>:
{
 80103fc:	b530      	push	{r4, r5, lr}
 80103fe:	4604      	mov	r4, r0
 8010400:	b089      	sub	sp, #36	; 0x24
	struct net_buf_simple *buf = PROV_BUF(12);
 8010402:	2100      	movs	r1, #0
 8010404:	221c      	movs	r2, #28
 8010406:	a801      	add	r0, sp, #4
 8010408:	f7f0 fa66 	bl	80008d8 <memset>
	if (data[0]) {
 801040c:	7821      	ldrb	r1, [r4, #0]
	struct net_buf_simple *buf = PROV_BUF(12);
 801040e:	2311      	movs	r3, #17
 8010410:	f8ad 300a 	strh.w	r3, [sp, #10]
	if (data[0]) {
 8010414:	b111      	cbz	r1, 801041c <prov_invite+0x20>
		bt_mesh_attention(NULL, data[0]);
 8010416:	2000      	movs	r0, #0
 8010418:	f7fe fc6e 	bl	800ecf8 <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
 801041c:	4d26      	ldr	r5, [pc, #152]	; (80104b8 <prov_invite+0xbc>)
 801041e:	7823      	ldrb	r3, [r4, #0]
 8010420:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	buf->len = 0;
 8010424:	2400      	movs	r4, #0
	buf->data = buf->__buf + reserve_head;
 8010426:	f10d 0311 	add.w	r3, sp, #17
	net_buf_simple_add_u8(buf, type);
 801042a:	2101      	movs	r1, #1
 801042c:	a801      	add	r0, sp, #4
 801042e:	9301      	str	r3, [sp, #4]
	buf->len = 0;
 8010430:	f8ad 4008 	strh.w	r4, [sp, #8]
 8010434:	f001 f979 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, bt_mesh_elem_count());
 8010438:	f7fb ffd0 	bl	800c3dc <bt_mesh_elem_count>
 801043c:	4601      	mov	r1, r0
 801043e:	a801      	add	r0, sp, #4
 8010440:	f001 f973 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, BIT(PROV_ALG_P256));
 8010444:	2101      	movs	r1, #1
 8010446:	a801      	add	r0, sp, #4
 8010448:	f001 f986 	bl	8011758 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, 0x00);
 801044c:	4621      	mov	r1, r4
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
 801044e:	4c1b      	ldr	r4, [pc, #108]	; (80104bc <prov_invite+0xc0>)
	net_buf_simple_add_u8(buf, 0x00);
 8010450:	a801      	add	r0, sp, #4
 8010452:	f001 f96a 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	6859      	ldr	r1, [r3, #4]
 801045a:	3100      	adds	r1, #0
 801045c:	bf18      	it	ne
 801045e:	2101      	movne	r1, #1
 8010460:	a801      	add	r0, sp, #4
 8010462:	f001 f962 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->output_size);
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	a801      	add	r0, sp, #4
 801046a:	7a59      	ldrb	r1, [r3, #9]
 801046c:	f001 f95d 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->output_actions);
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	a801      	add	r0, sp, #4
 8010474:	8959      	ldrh	r1, [r3, #10]
 8010476:	f001 f96f 	bl	8011758 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, prov->input_size);
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	a801      	add	r0, sp, #4
 801047e:	7b19      	ldrb	r1, [r3, #12]
 8010480:	f001 f953 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->input_actions);
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	a801      	add	r0, sp, #4
 8010488:	89d9      	ldrh	r1, [r3, #14]
 801048a:	f001 f965 	bl	8011758 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf->data[1], 11);
 801048e:	9901      	ldr	r1, [sp, #4]
 8010490:	220b      	movs	r2, #11
 8010492:	3101      	adds	r1, #1
 8010494:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8010498:	f7f0 f9f2 	bl	8000880 <memcpy>
	if (prov_send(buf)) {
 801049c:	a801      	add	r0, sp, #4
 801049e:	f7ff fc93 	bl	800fdc8 <prov_send>
 80104a2:	b120      	cbz	r0, 80104ae <prov_invite+0xb2>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80104a4:	2005      	movs	r0, #5
 80104a6:	f7ff ff79 	bl	801039c <close_link.constprop.21>
}
 80104aa:	b009      	add	sp, #36	; 0x24
 80104ac:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
 80104ae:	2302      	movs	r3, #2
 80104b0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80104b4:	e7f9      	b.n	80104aa <prov_invite+0xae>
 80104b6:	bf00      	nop
 80104b8:	200010e8 	.word	0x200010e8
 80104bc:	20001258 	.word	0x20001258

080104c0 <send_pub_key>:
{
 80104c0:	b530      	push	{r4, r5, lr}
 80104c2:	b095      	sub	sp, #84	; 0x54
	struct net_buf_simple *buf = PROV_BUF(65);
 80104c4:	2250      	movs	r2, #80	; 0x50
 80104c6:	2100      	movs	r1, #0
 80104c8:	4668      	mov	r0, sp
 80104ca:	f7f0 fa05 	bl	80008d8 <memset>
 80104ce:	2346      	movs	r3, #70	; 0x46
 80104d0:	f8ad 3006 	strh.w	r3, [sp, #6]
	key = bt_pub_key_get();
 80104d4:	f7f6 f924 	bl	8006720 <bt_pub_key_get>
	if (!key) {
 80104d8:	4604      	mov	r4, r0
 80104da:	b920      	cbnz	r0, 80104e6 <send_pub_key+0x26>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80104dc:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80104de:	f7ff ff5d 	bl	801039c <close_link.constprop.21>
}
 80104e2:	b015      	add	sp, #84	; 0x54
 80104e4:	bd30      	pop	{r4, r5, pc}
	buf->data = buf->__buf + reserve_head;
 80104e6:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
 80104ea:	2500      	movs	r5, #0
	net_buf_simple_add_u8(buf, type);
 80104ec:	2103      	movs	r1, #3
 80104ee:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
 80104f0:	9300      	str	r3, [sp, #0]
	buf->len = 0;
 80104f2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80104f6:	f001 f918 	bl	801172a <net_buf_simple_add_u8>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), key, 32);
 80104fa:	2120      	movs	r1, #32
 80104fc:	4668      	mov	r0, sp
 80104fe:	f001 f905 	bl	801170c <net_buf_simple_add>
 8010502:	4621      	mov	r1, r4
 8010504:	f7ff fbcd 	bl	800fca2 <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), &key[32], 32);
 8010508:	2120      	movs	r1, #32
 801050a:	4668      	mov	r0, sp
 801050c:	f001 f8fe 	bl	801170c <net_buf_simple_add>
 8010510:	f104 0120 	add.w	r1, r4, #32
 8010514:	f7ff fbc5 	bl	800fca2 <sys_memcpy_swap.constprop.19>
	memcpy(&link.conf_inputs[81], &buf->data[1], 64);
 8010518:	4c11      	ldr	r4, [pc, #68]	; (8010560 <send_pub_key+0xa0>)
 801051a:	9900      	ldr	r1, [sp, #0]
 801051c:	2240      	movs	r2, #64	; 0x40
 801051e:	3101      	adds	r1, #1
 8010520:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8010524:	f7f0 f9ac 	bl	8000880 <memcpy>
	prov_send(buf);
 8010528:	4668      	mov	r0, sp
 801052a:	f7ff fc4d 	bl	800fdc8 <prov_send>
	buf->data = buf->__buf + reserve_head;
 801052e:	a802      	add	r0, sp, #8
	sys_memcpy_swap(buf->data, &link.conf_inputs[17], 32);
 8010530:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 8010534:	9000      	str	r0, [sp, #0]
	buf->len = 0;
 8010536:	f8ad 5004 	strh.w	r5, [sp, #4]
 801053a:	f7ff fbb2 	bl	800fca2 <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(&buf->data[32], &link.conf_inputs[49], 32);
 801053e:	9800      	ldr	r0, [sp, #0]
 8010540:	f104 01ad 	add.w	r1, r4, #173	; 0xad
 8010544:	3020      	adds	r0, #32
 8010546:	f7ff fbac 	bl	800fca2 <sys_memcpy_swap.constprop.19>
	if (bt_dh_key_gen(buf->data, prov_dh_key_cb)) {
 801054a:	4906      	ldr	r1, [pc, #24]	; (8010564 <send_pub_key+0xa4>)
 801054c:	9800      	ldr	r0, [sp, #0]
 801054e:	f7f6 f8f5 	bl	800673c <bt_dh_key_gen>
 8010552:	b108      	cbz	r0, 8010558 <send_pub_key+0x98>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010554:	2007      	movs	r0, #7
 8010556:	e7c2      	b.n	80104de <send_pub_key+0x1e>
	link.expect = PROV_CONFIRM;
 8010558:	2305      	movs	r3, #5
 801055a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801055e:	e7c0      	b.n	80104e2 <send_pub_key+0x22>
 8010560:	200010e8 	.word	0x200010e8
 8010564:	08010a05 	.word	0x08010a05

08010568 <prov_pub_key>:
{
 8010568:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
 801056a:	4601      	mov	r1, r0
 801056c:	2240      	movs	r2, #64	; 0x40
 801056e:	4809      	ldr	r0, [pc, #36]	; (8010594 <prov_pub_key+0x2c>)
 8010570:	f7f0 f986 	bl	8000880 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
 8010574:	2001      	movs	r0, #1
 8010576:	f7ff fbaf 	bl	800fcd8 <atomic_test_bit.constprop.24>
 801057a:	b938      	cbnz	r0, 801058c <prov_pub_key+0x24>
		prov_clear_tx();
 801057c:	f7ff fbdc 	bl	800fd38 <prov_clear_tx>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
 8010580:	2101      	movs	r1, #1
 8010582:	4805      	ldr	r0, [pc, #20]	; (8010598 <prov_pub_key+0x30>)
}
 8010584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010588:	f7ff bb44 	b.w	800fc14 <atomic_or>
 801058c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
 8010590:	f7ff bf96 	b.w	80104c0 <send_pub_key>
 8010594:	20001175 	.word	0x20001175
 8010598:	200010e8 	.word	0x200010e8

0801059c <pub_key_ready>:
{
 801059c:	b508      	push	{r3, lr}
	if (!pkey) {
 801059e:	b158      	cbz	r0, 80105b8 <pub_key_ready+0x1c>
 80105a0:	2102      	movs	r1, #2
 80105a2:	4806      	ldr	r0, [pc, #24]	; (80105bc <pub_key_ready+0x20>)
 80105a4:	f7ff fb36 	bl	800fc14 <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
 80105a8:	2000      	movs	r0, #0
 80105aa:	f7ff fcb1 	bl	800ff10 <atomic_test_and_clear_bit.constprop.23>
 80105ae:	b118      	cbz	r0, 80105b8 <pub_key_ready+0x1c>
}
 80105b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
 80105b4:	f7ff bf84 	b.w	80104c0 <send_pub_key>
 80105b8:	bd08      	pop	{r3, pc}
 80105ba:	bf00      	nop
 80105bc:	200010e8 	.word	0x200010e8

080105c0 <prov_random>:
{
 80105c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c2:	b097      	sub	sp, #92	; 0x5c
 80105c4:	4607      	mov	r7, r0
	struct net_buf_simple *rnd = PROV_BUF(16);
 80105c6:	2220      	movs	r2, #32
 80105c8:	2100      	movs	r1, #0
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
 80105ca:	4c28      	ldr	r4, [pc, #160]	; (801066c <prov_random+0xac>)
	struct net_buf_simple *rnd = PROV_BUF(16);
 80105cc:	a80e      	add	r0, sp, #56	; 0x38
 80105ce:	f7f0 f983 	bl	80008d8 <memset>
 80105d2:	2315      	movs	r3, #21
 80105d4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
 80105d8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80105dc:	466b      	mov	r3, sp
 80105de:	4639      	mov	r1, r7
 80105e0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80105e4:	f7fb fd82 	bl	800c0ec <bt_mesh_prov_conf>
 80105e8:	b120      	cbz	r0, 80105f4 <prov_random+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80105ea:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80105ec:	f7ff fed6 	bl	801039c <close_link.constprop.21>
}
 80105f0:	b017      	add	sp, #92	; 0x5c
 80105f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (memcmp(conf_verify, link.conf, 16)) {
 80105f4:	2210      	movs	r2, #16
 80105f6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80105fa:	4668      	mov	r0, sp
 80105fc:	f7f0 f92b 	bl	8000856 <memcmp>
 8010600:	b108      	cbz	r0, 8010606 <prov_random+0x46>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
 8010602:	2004      	movs	r0, #4
 8010604:	e7f2      	b.n	80105ec <prov_random+0x2c>
	buf->data = buf->__buf + reserve_head;
 8010606:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	buf->len = 0;
 801060a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
	net_buf_simple_add_u8(buf, type);
 801060e:	2106      	movs	r1, #6
 8010610:	a80e      	add	r0, sp, #56	; 0x38
	net_buf_simple_add_mem(rnd, link.rand, 16);
 8010612:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	buf->data = buf->__buf + reserve_head;
 8010616:	930e      	str	r3, [sp, #56]	; 0x38
	net_buf_simple_add_u8(buf, type);
 8010618:	f001 f887 	bl	801172a <net_buf_simple_add_u8>
	net_buf_simple_add_mem(rnd, link.rand, 16);
 801061c:	4631      	mov	r1, r6
 801061e:	2210      	movs	r2, #16
 8010620:	a80e      	add	r0, sp, #56	; 0x38
 8010622:	f001 f879 	bl	8011718 <net_buf_simple_add_mem>
	if (prov_send(rnd)) {
 8010626:	a80e      	add	r0, sp, #56	; 0x38
 8010628:	f7ff fbce 	bl	800fdc8 <prov_send>
 801062c:	4601      	mov	r1, r0
 801062e:	b108      	cbz	r0, 8010634 <prov_random+0x74>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 8010630:	2005      	movs	r0, #5
 8010632:	e7db      	b.n	80105ec <prov_random+0x2c>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
 8010634:	2510      	movs	r5, #16
 8010636:	462a      	mov	r2, r5
 8010638:	eb0d 0005 	add.w	r0, sp, r5
 801063c:	f7f0 f94c 	bl	80008d8 <memset>
	struct bt_mesh_sg sg[] = {
 8010640:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8010644:	9308      	str	r3, [sp, #32]
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
 8010646:	2203      	movs	r2, #3
 8010648:	f204 130d 	addw	r3, r4, #269	; 0x10d
 801064c:	a908      	add	r1, sp, #32
 801064e:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
 8010652:	9509      	str	r5, [sp, #36]	; 0x24
 8010654:	970a      	str	r7, [sp, #40]	; 0x28
 8010656:	950b      	str	r5, [sp, #44]	; 0x2c
 8010658:	960c      	str	r6, [sp, #48]	; 0x30
 801065a:	950d      	str	r5, [sp, #52]	; 0x34
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
 801065c:	f7fb fa77 	bl	800bb4e <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
 8010660:	2800      	cmp	r0, #0
 8010662:	d1c2      	bne.n	80105ea <prov_random+0x2a>
	link.expect = PROV_DATA;
 8010664:	2307      	movs	r3, #7
 8010666:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801066a:	e7c1      	b.n	80105f0 <prov_random+0x30>
 801066c:	200010e8 	.word	0x200010e8

08010670 <prov_data>:
{
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
 8010674:	4c3d      	ldr	r4, [pc, #244]	; (801076c <prov_data+0xfc>)
 8010676:	b09d      	sub	sp, #116	; 0x74
	struct net_buf_simple *msg = PROV_BUF(1);
 8010678:	2210      	movs	r2, #16
 801067a:	2100      	movs	r1, #0
{
 801067c:	4607      	mov	r7, r0
 801067e:	ae0d      	add	r6, sp, #52	; 0x34
	struct net_buf_simple *msg = PROV_BUF(1);
 8010680:	a809      	add	r0, sp, #36	; 0x24
 8010682:	f7f0 f929 	bl	80008d8 <memset>
 8010686:	2506      	movs	r5, #6
 8010688:	9600      	str	r6, [sp, #0]
 801068a:	4b39      	ldr	r3, [pc, #228]	; (8010770 <prov_data+0x100>)
 801068c:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 8010690:	f204 120d 	addw	r2, r4, #269	; 0x10d
 8010694:	2120      	movs	r1, #32
 8010696:	f104 0008 	add.w	r0, r4, #8
 801069a:	f7fb fa9b 	bl	800bbd4 <bt_mesh_k1>
	if (err) {
 801069e:	b108      	cbz	r0, 80106a4 <prov_data+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80106a0:	2007      	movs	r0, #7
 80106a2:	e01b      	b.n	80106dc <prov_data+0x6c>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
 80106a4:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 80106a8:	f8cd 8000 	str.w	r8, [sp]
 80106ac:	4b31      	ldr	r3, [pc, #196]	; (8010774 <prov_data+0x104>)
 80106ae:	f204 120d 	addw	r2, r4, #269	; 0x10d
 80106b2:	2120      	movs	r1, #32
 80106b4:	f104 0008 	add.w	r0, r4, #8
 80106b8:	f7fb fa8c 	bl	800bbd4 <bt_mesh_k1>
	if (!err) {
 80106bc:	2800      	cmp	r0, #0
 80106be:	d1ef      	bne.n	80106a0 <prov_data+0x30>
		memcpy(nonce, tmp + 3, 13);
 80106c0:	220d      	movs	r2, #13
 80106c2:	f10d 0157 	add.w	r1, sp, #87	; 0x57
 80106c6:	a805      	add	r0, sp, #20
 80106c8:	f7f0 f8da 	bl	8000880 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
 80106cc:	4643      	mov	r3, r8
 80106ce:	463a      	mov	r2, r7
 80106d0:	a905      	add	r1, sp, #20
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7fb fd17 	bl	800c106 <bt_mesh_prov_decrypt>
	if (err) {
 80106d8:	b118      	cbz	r0, 80106e2 <prov_data+0x72>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
 80106da:	4628      	mov	r0, r5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 80106dc:	f7ff fe5e 	bl	801039c <close_link.constprop.21>
		return;
 80106e0:	e040      	b.n	8010764 <prov_data+0xf4>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
 80106e2:	af11      	add	r7, sp, #68	; 0x44
 80106e4:	9700      	str	r7, [sp, #0]
 80106e6:	4b24      	ldr	r3, [pc, #144]	; (8010778 <prov_data+0x108>)
 80106e8:	f204 120d 	addw	r2, r4, #269	; 0x10d
 80106ec:	2120      	movs	r1, #32
 80106ee:	f104 0008 	add.w	r0, r4, #8
 80106f2:	f7fb fa6f 	bl	800bbd4 <bt_mesh_k1>
	if (err) {
 80106f6:	4683      	mov	fp, r0
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d1d1      	bne.n	80106a0 <prov_data+0x30>
	return ((u16_t)src[0] << 8) | src[1];
 80106fc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010700:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
 8010704:	f89d 5067 	ldrb.w	r5, [sp, #103]	; 0x67
 8010708:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 801070c:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
	flags = pdu[18];
 8010710:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
	buf->len = 0;
 8010714:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8010718:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 801071c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 8010720:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
 8010724:	f89d 506a 	ldrb.w	r5, [sp, #106]	; 0x6a
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 8010728:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 801072c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
 8010730:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
	net_buf_simple_add_u8(buf, type);
 8010734:	2108      	movs	r1, #8
 8010736:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 801073a:	a809      	add	r0, sp, #36	; 0x24
	buf->data = buf->__buf + reserve_head;
 801073c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8010740:	9309      	str	r3, [sp, #36]	; 0x24
 8010742:	f000 fff2 	bl	801172a <net_buf_simple_add_u8>
	prov_send(msg);
 8010746:	a809      	add	r0, sp, #36	; 0x24
 8010748:	f7ff fb3e 	bl	800fdc8 <prov_send>
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
 801074c:	9702      	str	r7, [sp, #8]
 801074e:	9601      	str	r6, [sp, #4]
 8010750:	f8cd b000 	str.w	fp, [sp]
 8010754:	462b      	mov	r3, r5
 8010756:	4652      	mov	r2, sl
 8010758:	4649      	mov	r1, r9
 801075a:	4640      	mov	r0, r8
	link.expect = 0;
 801075c:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
 8010760:	f7f8 fbc0 	bl	8008ee4 <bt_mesh_provision>
}
 8010764:	b01d      	add	sp, #116	; 0x74
 8010766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801076a:	bf00      	nop
 801076c:	200010e8 	.word	0x200010e8
 8010770:	08013d5c 	.word	0x08013d5c
 8010774:	08013d61 	.word	0x08013d61
 8010778:	08013d66 	.word	0x08013d66

0801077c <prov_msg_recv>:
{
 801077c:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
 801077e:	4c1e      	ldr	r4, [pc, #120]	; (80107f8 <prov_msg_recv+0x7c>)
 8010780:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
 8010784:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
 8010788:	6803      	ldr	r3, [r0, #0]
 801078a:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
 801078c:	f7fb fc56 	bl	800c03c <bt_mesh_fcs_check>
 8010790:	4626      	mov	r6, r4
 8010792:	b380      	cbz	r0, 80107f6 <prov_msg_recv+0x7a>
	gen_prov_ack_send(link.rx.id);
 8010794:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
 8010798:	f7ff fa4e 	bl	800fc38 <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
 801079c:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80107a0:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
 80107a4:	2d09      	cmp	r5, #9
	link.rx.id = 0;
 80107a6:	f04f 0300 	mov.w	r3, #0
 80107aa:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
 80107ae:	d00f      	beq.n	80107d0 <prov_msg_recv+0x54>
 80107b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80107b4:	42ab      	cmp	r3, r5
 80107b6:	d004      	beq.n	80107c2 <prov_msg_recv+0x46>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
 80107b8:	2003      	movs	r0, #3
}
 80107ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
 80107be:	f7ff bbc7 	b.w	800ff50 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
 80107c2:	2b09      	cmp	r3, #9
 80107c4:	d904      	bls.n	80107d0 <prov_msg_recv+0x54>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
 80107c6:	2001      	movs	r0, #1
}
 80107c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80107cc:	f7ff bde6 	b.w	801039c <close_link.constprop.21>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
 80107d0:	4a0a      	ldr	r2, [pc, #40]	; (80107fc <prov_msg_recv+0x80>)
 80107d2:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
 80107d6:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 80107da:	8888      	ldrh	r0, [r1, #4]
 80107dc:	889b      	ldrh	r3, [r3, #4]
 80107de:	3301      	adds	r3, #1
 80107e0:	4283      	cmp	r3, r0
 80107e2:	d001      	beq.n	80107e8 <prov_msg_recv+0x6c>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80107e4:	2002      	movs	r0, #2
 80107e6:	e7ef      	b.n	80107c8 <prov_msg_recv+0x4c>
	prov_handlers[type].func(&link.rx.buf->data[1]);
 80107e8:	6808      	ldr	r0, [r1, #0]
 80107ea:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 80107ee:	3001      	adds	r0, #1
}
 80107f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
 80107f4:	4718      	bx	r3
 80107f6:	bd70      	pop	{r4, r5, r6, pc}
 80107f8:	200010e8 	.word	0x200010e8
 80107fc:	08013d6c 	.word	0x08013d6c

08010800 <gen_prov_cont>:
{
 8010800:	b570      	push	{r4, r5, r6, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
 8010802:	4a26      	ldr	r2, [pc, #152]	; (801089c <gen_prov_cont+0x9c>)
 8010804:	7903      	ldrb	r3, [r0, #4]
 8010806:	f892 6126 	ldrb.w	r6, [r2, #294]	; 0x126
 801080a:	4615      	mov	r5, r2
 801080c:	b946      	cbnz	r6, 8010820 <gen_prov_cont+0x20>
 801080e:	f892 2125 	ldrb.w	r2, [r2, #293]	; 0x125
 8010812:	4293      	cmp	r3, r2
 8010814:	d104      	bne.n	8010820 <gen_prov_cont+0x20>
		gen_prov_ack_send(rx->xact_id);
 8010816:	4618      	mov	r0, r3
}
 8010818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gen_prov_ack_send(rx->xact_id);
 801081c:	f7ff ba0c 	b.w	800fc38 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
 8010820:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
 8010824:	4293      	cmp	r3, r2
 8010826:	d137      	bne.n	8010898 <gen_prov_cont+0x98>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
 8010828:	7944      	ldrb	r4, [r0, #5]
	if (seg > link.rx.last_seg) {
 801082a:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
 801082e:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
 8010830:	429c      	cmp	r4, r3
 8010832:	d904      	bls.n	801083e <gen_prov_cont+0x3e>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 8010834:	2002      	movs	r0, #2
}
 8010836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 801083a:	f7ff bdaf 	b.w	801039c <close_link.constprop.21>
	} else if (seg == link.rx.last_seg) {
 801083e:	d10f      	bne.n	8010860 <gen_prov_cont+0x60>
		expect_len = (link.rx.buf->len - 20 -
 8010840:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
			      (23 * (link.rx.last_seg - 1)));
 8010844:	1e62      	subs	r2, r4, #1
		expect_len = (link.rx.buf->len - 20 -
 8010846:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 801084a:	791b      	ldrb	r3, [r3, #4]
 801084c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010850:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010854:	3b14      	subs	r3, #20
 8010856:	4413      	add	r3, r2
		if (expect_len != buf->len) {
 8010858:	888a      	ldrh	r2, [r1, #4]
 801085a:	b2db      	uxtb	r3, r3
 801085c:	4293      	cmp	r3, r2
 801085e:	d1e9      	bne.n	8010834 <gen_prov_cont+0x34>
	if (!(link.rx.seg & BIT(seg))) {
 8010860:	40e6      	lsrs	r6, r4
 8010862:	07f3      	lsls	r3, r6, #31
 8010864:	d518      	bpl.n	8010898 <gen_prov_cont+0x98>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
 8010866:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
 801086a:	1e60      	subs	r0, r4, #1
 801086c:	2317      	movs	r3, #23
 801086e:	4343      	muls	r3, r0
 8010870:	6810      	ldr	r0, [r2, #0]
 8010872:	888a      	ldrh	r2, [r1, #4]
 8010874:	6809      	ldr	r1, [r1, #0]
 8010876:	3314      	adds	r3, #20
 8010878:	4418      	add	r0, r3
 801087a:	f7f0 f801 	bl	8000880 <memcpy>
	XACT_SEG_RECV(seg);
 801087e:	2301      	movs	r3, #1
 8010880:	40a3      	lsls	r3, r4
 8010882:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
 8010886:	ea24 0403 	bic.w	r4, r4, r3
 801088a:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
 801088e:	b91c      	cbnz	r4, 8010898 <gen_prov_cont+0x98>
}
 8010890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_msg_recv();
 8010894:	f7ff bf72 	b.w	801077c <prov_msg_recv>
 8010898:	bd70      	pop	{r4, r5, r6, pc}
 801089a:	bf00      	nop
 801089c:	200010e8 	.word	0x200010e8

080108a0 <gen_prov_start>:
{
 80108a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (link.rx.seg) {
 80108a2:	4b24      	ldr	r3, [pc, #144]	; (8010934 <gen_prov_start+0x94>)
 80108a4:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
{
 80108a8:	4606      	mov	r6, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	461c      	mov	r4, r3
	if (link.rx.seg) {
 80108ae:	2a00      	cmp	r2, #0
 80108b0:	d13f      	bne.n	8010932 <gen_prov_start+0x92>
	if (link.rx.prev_id == rx->xact_id) {
 80108b2:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80108b6:	7900      	ldrb	r0, [r0, #4]
 80108b8:	4298      	cmp	r0, r3
 80108ba:	d103      	bne.n	80108c4 <gen_prov_start+0x24>
}
 80108bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_prov_ack_send(rx->xact_id);
 80108c0:	f7ff b9ba 	b.w	800fc38 <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
 80108c4:	4608      	mov	r0, r1
 80108c6:	f8d4 712c 	ldr.w	r7, [r4, #300]	; 0x12c
 80108ca:	f000 ffa2 	bl	8011812 <net_buf_simple_pull_be16>
 80108ce:	80b8      	strh	r0, [r7, #4]
	link.rx.id  = rx->xact_id;
 80108d0:	7933      	ldrb	r3, [r6, #4]
 80108d2:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
 80108d6:	4628      	mov	r0, r5
 80108d8:	f000 ff8b 	bl	80117f2 <net_buf_simple_pull_u8>
 80108dc:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
 80108e0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80108e4:	8882      	ldrh	r2, [r0, #4]
 80108e6:	b922      	cbnz	r2, 80108f2 <gen_prov_start+0x52>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80108e8:	2002      	movs	r0, #2
}
 80108ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
 80108ee:	f7ff bd55 	b.w	801039c <close_link.constprop.21>
	if (link.rx.buf->len > link.rx.buf->size) {
 80108f2:	88c3      	ldrh	r3, [r0, #6]
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d3f7      	bcc.n	80108e8 <gen_prov_start+0x48>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
 80108f8:	7973      	ldrb	r3, [r6, #5]
 80108fa:	089b      	lsrs	r3, r3, #2
 80108fc:	d001      	beq.n	8010902 <gen_prov_start+0x62>
 80108fe:	2a14      	cmp	r2, #20
 8010900:	d9f2      	bls.n	80108e8 <gen_prov_start+0x48>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
 8010902:	1c59      	adds	r1, r3, #1
 8010904:	2201      	movs	r2, #1
 8010906:	408a      	lsls	r2, r1
 8010908:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
 801090a:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
 801090e:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
 8010912:	88aa      	ldrh	r2, [r5, #4]
 8010914:	6829      	ldr	r1, [r5, #0]
 8010916:	6800      	ldr	r0, [r0, #0]
 8010918:	f7ef ffb2 	bl	8000880 <memcpy>
	XACT_SEG_RECV(0);
 801091c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8010920:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8010924:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	if (!link.rx.seg) {
 8010928:	b91b      	cbnz	r3, 8010932 <gen_prov_start+0x92>
}
 801092a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
 801092e:	f7ff bf25 	b.w	801077c <prov_msg_recv>
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010934:	200010e8 	.word	0x200010e8

08010938 <send_confirm>:
{
 8010938:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 801093a:	4c24      	ldr	r4, [pc, #144]	; (80109cc <send_confirm+0x94>)
{
 801093c:	b088      	sub	sp, #32
	struct net_buf_simple *cfm = PROV_BUF(17);
 801093e:	2100      	movs	r1, #0
 8010940:	2220      	movs	r2, #32
 8010942:	4668      	mov	r0, sp
 8010944:	f7ef ffc8 	bl	80008d8 <memset>
 8010948:	2316      	movs	r3, #22
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 801094a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 801094e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	struct net_buf_simple *cfm = PROV_BUF(17);
 8010952:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
 8010956:	f7fb fbab 	bl	800c0b0 <bt_mesh_prov_conf_salt>
 801095a:	b120      	cbz	r0, 8010966 <send_confirm+0x2e>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 801095c:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 801095e:	f7ff fd1d 	bl	801039c <close_link.constprop.21>
}
 8010962:	b008      	add	sp, #32
 8010964:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
 8010966:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 801096a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 801096e:	f104 0008 	add.w	r0, r4, #8
 8010972:	f7fb fbaf 	bl	800c0d4 <bt_mesh_prov_conf_key>
 8010976:	2800      	cmp	r0, #0
 8010978:	d1f0      	bne.n	801095c <send_confirm+0x24>
	if (bt_rand(link.rand, 16)) {
 801097a:	2110      	movs	r1, #16
 801097c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8010980:	f7f5 ff6c 	bl	800685c <bt_rand>
 8010984:	2800      	cmp	r0, #0
 8010986:	d1e9      	bne.n	801095c <send_confirm+0x24>
 8010988:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
 801098c:	f8ad 0004 	strh.w	r0, [sp, #4]
	net_buf_simple_add_u8(buf, type);
 8010990:	2105      	movs	r1, #5
 8010992:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	f000 fec8 	bl	801172a <net_buf_simple_add_u8>
			      net_buf_simple_add(cfm, 16))) {
 801099a:	2110      	movs	r1, #16
 801099c:	4668      	mov	r0, sp
 801099e:	f000 feb5 	bl	801170c <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
 80109a2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80109a6:	4603      	mov	r3, r0
 80109a8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80109ac:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80109b0:	f7fb fb9c 	bl	800c0ec <bt_mesh_prov_conf>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d1d1      	bne.n	801095c <send_confirm+0x24>
	if (prov_send(cfm)) {
 80109b8:	4668      	mov	r0, sp
 80109ba:	f7ff fa05 	bl	800fdc8 <prov_send>
 80109be:	b108      	cbz	r0, 80109c4 <send_confirm+0x8c>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
 80109c0:	2005      	movs	r0, #5
 80109c2:	e7cc      	b.n	801095e <send_confirm+0x26>
	link.expect = PROV_RANDOM;
 80109c4:	2306      	movs	r3, #6
 80109c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80109ca:	e7ca      	b.n	8010962 <send_confirm+0x2a>
 80109cc:	200010e8 	.word	0x200010e8

080109d0 <prov_confirm>:
{
 80109d0:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
 80109d2:	4601      	mov	r1, r0
 80109d4:	2210      	movs	r2, #16
 80109d6:	4809      	ldr	r0, [pc, #36]	; (80109fc <prov_confirm+0x2c>)
 80109d8:	f7ef ff52 	bl	8000880 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
 80109dc:	2003      	movs	r0, #3
 80109de:	f7ff f97b 	bl	800fcd8 <atomic_test_bit.constprop.24>
 80109e2:	b938      	cbnz	r0, 80109f4 <prov_confirm+0x24>
		prov_clear_tx();
 80109e4:	f7ff f9a8 	bl	800fd38 <prov_clear_tx>
 80109e8:	2110      	movs	r1, #16
 80109ea:	4805      	ldr	r0, [pc, #20]	; (8010a00 <prov_confirm+0x30>)
}
 80109ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80109f0:	f7ff b910 	b.w	800fc14 <atomic_or>
 80109f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
 80109f8:	f7ff bf9e 	b.w	8010938 <send_confirm>
 80109fc:	20001114 	.word	0x20001114
 8010a00:	200010e8 	.word	0x200010e8

08010a04 <prov_dh_key_cb>:
{
 8010a04:	b508      	push	{r3, lr}
	if (!key) {
 8010a06:	4601      	mov	r1, r0
 8010a08:	b920      	cbnz	r0, 8010a14 <prov_dh_key_cb+0x10>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010a0a:	2007      	movs	r0, #7
}
 8010a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
 8010a10:	f7ff bcc4 	b.w	801039c <close_link.constprop.21>
	sys_memcpy_swap(link.dhkey, key, 32);
 8010a14:	480b      	ldr	r0, [pc, #44]	; (8010a44 <prov_dh_key_cb+0x40>)
 8010a16:	f7ff f944 	bl	800fca2 <sys_memcpy_swap.constprop.19>
 8010a1a:	2108      	movs	r1, #8
 8010a1c:	480a      	ldr	r0, [pc, #40]	; (8010a48 <prov_dh_key_cb+0x44>)
 8010a1e:	f7ff f8f9 	bl	800fc14 <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
 8010a22:	2005      	movs	r0, #5
 8010a24:	f7ff f958 	bl	800fcd8 <atomic_test_bit.constprop.24>
 8010a28:	b958      	cbnz	r0, 8010a42 <prov_dh_key_cb+0x3e>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
 8010a2a:	2006      	movs	r0, #6
 8010a2c:	f7ff f954 	bl	800fcd8 <atomic_test_bit.constprop.24>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
 8010a30:	b938      	cbnz	r0, 8010a42 <prov_dh_key_cb+0x3e>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
 8010a32:	2004      	movs	r0, #4
 8010a34:	f7ff fa6c 	bl	800ff10 <atomic_test_and_clear_bit.constprop.23>
 8010a38:	b118      	cbz	r0, 8010a42 <prov_dh_key_cb+0x3e>
}
 8010a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
 8010a3e:	f7ff bf7b 	b.w	8010938 <send_confirm>
 8010a42:	bd08      	pop	{r3, pc}
 8010a44:	200010f0 	.word	0x200010f0
 8010a48:	200010e8 	.word	0x200010e8

08010a4c <bt_mesh_prov_get_uuid>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const u8_t *bt_mesh_prov_get_uuid(void)
{
	return prov->uuid;
 8010a4c:	4b01      	ldr	r3, [pc, #4]	; (8010a54 <bt_mesh_prov_get_uuid+0x8>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
}
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	4770      	bx	lr
 8010a54:	20001258 	.word	0x20001258

08010a58 <bt_prov_active>:

bool bt_prov_active(void)
{
 8010a58:	b508      	push	{r3, lr}
	return atomic_test_bit(link.flags, LINK_ACTIVE);
 8010a5a:	2002      	movs	r0, #2
 8010a5c:	f7ff f93c 	bl	800fcd8 <atomic_test_bit.constprop.24>
}
 8010a60:	3000      	adds	r0, #0
 8010a62:	bf18      	it	ne
 8010a64:	2001      	movne	r0, #1
 8010a66:	bd08      	pop	{r3, pc}

08010a68 <bt_mesh_pb_adv_recv>:
{
 8010a68:	b513      	push	{r0, r1, r4, lr}
 8010a6a:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
 8010a6c:	f7ff fff4 	bl	8010a58 <bt_prov_active>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d039      	beq.n	8010ae8 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
 8010a74:	88a3      	ldrh	r3, [r4, #4]
 8010a76:	2b05      	cmp	r3, #5
 8010a78:	d93a      	bls.n	8010af0 <bt_mesh_pb_adv_recv+0x88>
	rx.link_id = net_buf_simple_pull_be32(buf);
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f000 fed4 	bl	8011828 <net_buf_simple_pull_be32>
 8010a80:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
 8010a82:	4620      	mov	r0, r4
 8010a84:	f000 feb5 	bl	80117f2 <net_buf_simple_pull_u8>
 8010a88:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f000 feb0 	bl	80117f2 <net_buf_simple_pull_u8>
 8010a92:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
 8010a96:	2002      	movs	r0, #2
 8010a98:	f7ff f91e 	bl	800fcd8 <atomic_test_bit.constprop.24>
 8010a9c:	b128      	cbz	r0, 8010aaa <bt_mesh_pb_adv_recv+0x42>
 8010a9e:	4b15      	ldr	r3, [pc, #84]	; (8010af4 <bt_mesh_pb_adv_recv+0x8c>)
 8010aa0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8010aa4:	9b00      	ldr	r3, [sp, #0]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d122      	bne.n	8010af0 <bt_mesh_pb_adv_recv+0x88>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
 8010aaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010aae:	4912      	ldr	r1, [pc, #72]	; (8010af8 <bt_mesh_pb_adv_recv+0x90>)
 8010ab0:	88a2      	ldrh	r2, [r4, #4]
 8010ab2:	f003 0303 	and.w	r3, r3, #3
 8010ab6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010aba:	795b      	ldrb	r3, [r3, #5]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d317      	bcc.n	8010af0 <bt_mesh_pb_adv_recv+0x88>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
 8010ac0:	2002      	movs	r0, #2
 8010ac2:	f7ff f909 	bl	800fcd8 <atomic_test_bit.constprop.24>
 8010ac6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010aca:	b928      	cbnz	r0, 8010ad8 <bt_mesh_pb_adv_recv+0x70>
	    gen_prov[GPCF(rx->gpc)].require_link) {
 8010acc:	f003 0203 	and.w	r2, r3, #3
 8010ad0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
 8010ad4:	7912      	ldrb	r2, [r2, #4]
 8010ad6:	b95a      	cbnz	r2, 8010af0 <bt_mesh_pb_adv_recv+0x88>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
 8010ad8:	f003 0303 	and.w	r3, r3, #3
 8010adc:	4668      	mov	r0, sp
 8010ade:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	4798      	blx	r3
 8010ae6:	e003      	b.n	8010af0 <bt_mesh_pb_adv_recv+0x88>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
 8010ae8:	f7f8 fa86 	bl	8008ff8 <bt_mesh_is_provisioned>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d0c1      	beq.n	8010a74 <bt_mesh_pb_adv_recv+0xc>
}
 8010af0:	b002      	add	sp, #8
 8010af2:	bd10      	pop	{r4, pc}
 8010af4:	200010e8 	.word	0x200010e8
 8010af8:	08013d3c 	.word	0x08013d3c

08010afc <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
 8010afc:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
 8010afe:	4605      	mov	r5, r0
 8010b00:	b1a8      	cbz	r0, 8010b2e <bt_mesh_prov_init+0x32>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	err = bt_pub_key_gen(&pub_key_cb);
 8010b02:	480c      	ldr	r0, [pc, #48]	; (8010b34 <bt_mesh_prov_init+0x38>)
 8010b04:	f7f5 fdca 	bl	800669c <bt_pub_key_gen>
	if (err) {
 8010b08:	4604      	mov	r4, r0
 8010b0a:	b970      	cbnz	r0, 8010b2a <bt_mesh_prov_init+0x2e>
		BT_ERR("Failed to generate public key (%d)", err);
		return err;
	}

	prov = prov_info;
 8010b0c:	4b0a      	ldr	r3, [pc, #40]	; (8010b38 <bt_mesh_prov_init+0x3c>)

#if defined(CONFIG_BT_MESH_PB_ADV)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
 8010b0e:	490b      	ldr	r1, [pc, #44]	; (8010b3c <bt_mesh_prov_init+0x40>)
	prov = prov_info;
 8010b10:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
 8010b12:	4d0b      	ldr	r5, [pc, #44]	; (8010b40 <bt_mesh_prov_init+0x44>)
 8010b14:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8010b18:	f001 fd84 	bl	8012624 <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
 8010b1c:	23ff      	movs	r3, #255	; 0xff
 8010b1e:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125

#if defined(CONFIG_BT_MESH_PB_GATT)
	link.rx.buf = bt_mesh_proxy_get_buf();
 8010b22:	f000 fb0b 	bl	801113c <bt_mesh_proxy_get_buf>
 8010b26:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
		memcpy(uuid.val, prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	return 0;
}
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8010b2e:	f06f 0415 	mvn.w	r4, #21
 8010b32:	e7fa      	b.n	8010b2a <bt_mesh_prov_init+0x2e>
 8010b34:	2000617c 	.word	0x2000617c
 8010b38:	20001258 	.word	0x20001258
 8010b3c:	08010235 	.word	0x08010235
 8010b40:	200010e8 	.word	0x200010e8

08010b44 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
 8010b44:	4b02      	ldr	r3, [pc, #8]	; (8010b50 <bt_mesh_prov_complete+0xc>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b4a:	b103      	cbz	r3, 8010b4e <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
 8010b4c:	4718      	bx	r3
 8010b4e:	4770      	bx	lr
 8010b50:	20001258 	.word	0x20001258

08010b54 <bt_mesh_prov_reset>:
	}
}

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
 8010b54:	4b02      	ldr	r3, [pc, #8]	; (8010b60 <bt_mesh_prov_reset+0xc>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b5a:	b103      	cbz	r3, 8010b5e <bt_mesh_prov_reset+0xa>
		prov->reset();
 8010b5c:	4718      	bx	r3
 8010b5e:	4770      	bx	lr
 8010b60:	20001258 	.word	0x20001258

08010b64 <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
 8010b64:	4b03      	ldr	r3, [pc, #12]	; (8010b74 <find_client+0x10>)
 8010b66:	681a      	ldr	r2, [r3, #0]
			return &clients[i];
		}
	}

	return NULL;
}
 8010b68:	4282      	cmp	r2, r0
 8010b6a:	bf0c      	ite	eq
 8010b6c:	4618      	moveq	r0, r3
 8010b6e:	2000      	movne	r0, #0
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop
 8010b74:	200061f8 	.word	0x200061f8

08010b78 <proxy_ccc_read>:
}

static ssize_t proxy_ccc_read(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr,
			      void *buf, u16_t len, u16_t offset)
{
 8010b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u16_t *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
 8010b7a:	2402      	movs	r4, #2
 8010b7c:	9402      	str	r4, [sp, #8]
 8010b7e:	68cc      	ldr	r4, [r1, #12]
 8010b80:	9401      	str	r4, [sp, #4]
 8010b82:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8010b86:	9400      	str	r4, [sp, #0]
 8010b88:	f7f8 f85e 	bl	8008c48 <bt_gatt_attr_read>
				 sizeof(*value));
}
 8010b8c:	b004      	add	sp, #16
 8010b8e:	bd10      	pop	{r4, pc}

08010b90 <prov_ccc_read>:
 8010b90:	b410      	push	{r4}
 8010b92:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8010b96:	9401      	str	r4, [sp, #4]
 8010b98:	bc10      	pop	{r4}
 8010b9a:	f7ff bfed 	b.w	8010b78 <proxy_ccc_read>
	...

08010ba0 <next_sub>:
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
{
 8010ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 8010ba4:	4f15      	ldr	r7, [pc, #84]	; (8010bfc <next_sub+0x5c>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8010ba6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8010c00 <next_sub+0x60>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8010baa:	2500      	movs	r5, #0
 8010bac:	463e      	mov	r6, r7
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 8010bae:	683c      	ldr	r4, [r7, #0]
 8010bb0:	442c      	add	r4, r5
 8010bb2:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8010bb6:	23e4      	movs	r3, #228	; 0xe4
 8010bb8:	fb03 8304 	mla	r3, r3, r4, r8
 8010bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bc0:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
 8010bc4:	4291      	cmp	r1, r2
 8010bc6:	d013      	beq.n	8010bf0 <next_sub+0x50>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
 8010bc8:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d003      	beq.n	8010bd8 <next_sub+0x38>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 8010bd0:	f7fd fcca 	bl	800e568 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
 8010bd4:	2801      	cmp	r0, #1
 8010bd6:	d10b      	bne.n	8010bf0 <next_sub+0x50>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 8010bd8:	6833      	ldr	r3, [r6, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 8010bda:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 8010bdc:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 8010bde:	fb00 8004 	mla	r0, r0, r4, r8
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 8010be2:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
 8010be6:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
 8010bea:	6033      	str	r3, [r6, #0]
			return sub;
 8010bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8010bf0:	3501      	adds	r5, #1
 8010bf2:	2d02      	cmp	r5, #2
 8010bf4:	d1db      	bne.n	8010bae <next_sub+0xe>
		}
	}

	return NULL;
 8010bf6:	2000      	movs	r0, #0
}
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	20001264 	.word	0x20001264
 8010c00:	20005bd0 	.word	0x20005bd0

08010c04 <proxy_disconnected>:
	conn_count--;
 8010c04:	4a0b      	ldr	r2, [pc, #44]	; (8010c34 <proxy_disconnected+0x30>)
 8010c06:	6813      	ldr	r3, [r2, #0]
{
 8010c08:	b510      	push	{r4, lr}
		if (client->conn == conn) {
 8010c0a:	4c0b      	ldr	r4, [pc, #44]	; (8010c38 <proxy_disconnected+0x34>)
	conn_count--;
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	4283      	cmp	r3, r0
 8010c14:	d109      	bne.n	8010c2a <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
 8010c16:	7aa3      	ldrb	r3, [r4, #10]
 8010c18:	2b03      	cmp	r3, #3
 8010c1a:	d101      	bne.n	8010c20 <proxy_disconnected+0x1c>
				bt_mesh_pb_gatt_close(conn);
 8010c1c:	f7ff fb90 	bl	8010340 <bt_mesh_pb_gatt_close>
			bt_conn_unref(client->conn);
 8010c20:	6820      	ldr	r0, [r4, #0]
 8010c22:	f7f6 f976 	bl	8006f12 <bt_conn_unref>
			client->conn = NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	6023      	str	r3, [r4, #0]
}
 8010c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
 8010c2e:	f7f8 baed 	b.w	800920c <bt_mesh_adv_update>
 8010c32:	bf00      	nop
 8010c34:	2000125c 	.word	0x2000125c
 8010c38:	200061f8 	.word	0x200061f8

08010c3c <proxy_connected>:
	conn_count++;
 8010c3c:	4a0f      	ldr	r2, [pc, #60]	; (8010c7c <proxy_connected+0x40>)
 8010c3e:	6813      	ldr	r3, [r2, #0]
 8010c40:	3301      	adds	r3, #1
{
 8010c42:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
 8010c44:	2100      	movs	r1, #0
	conn_count++;
 8010c46:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
 8010c48:	4a0d      	ldr	r2, [pc, #52]	; (8010c80 <proxy_connected+0x44>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
 8010c4a:	428b      	cmp	r3, r1
{
 8010c4c:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
 8010c4e:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
 8010c50:	dc01      	bgt.n	8010c56 <proxy_connected+0x1a>
		bt_mesh_adv_update();
 8010c52:	f7f8 fadb 	bl	800920c <bt_mesh_adv_update>
		if (!clients[i].conn) {
 8010c56:	4c0b      	ldr	r4, [pc, #44]	; (8010c84 <proxy_connected+0x48>)
 8010c58:	6825      	ldr	r5, [r4, #0]
 8010c5a:	b96d      	cbnz	r5, 8010c78 <proxy_connected+0x3c>
	client->conn = bt_conn_ref(conn);
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f7f6 f951 	bl	8006f04 <bt_conn_ref>
	client->filter_type = NONE;
 8010c62:	72a5      	strb	r5, [r4, #10]
	client->conn = bt_conn_ref(conn);
 8010c64:	6020      	str	r0, [r4, #0]
	memset(client->filter, 0, sizeof(client->filter));
 8010c66:	2206      	movs	r2, #6
 8010c68:	4629      	mov	r1, r5
 8010c6a:	1d20      	adds	r0, r4, #4
 8010c6c:	f7ef fe34 	bl	80008d8 <memset>
 8010c70:	f104 0320 	add.w	r3, r4, #32
 8010c74:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
 8010c76:	83a5      	strh	r5, [r4, #28]
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
 8010c7a:	bf00      	nop
 8010c7c:	2000125c 	.word	0x2000125c
 8010c80:	2000126b 	.word	0x2000126b
 8010c84:	200061f8 	.word	0x200061f8

08010c88 <filter_add>:
{
 8010c88:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8010c8a:	b179      	cbz	r1, 8010cac <filter_add+0x24>
		if (client->filter[i] == addr) {
 8010c8c:	8883      	ldrh	r3, [r0, #4]
 8010c8e:	428b      	cmp	r3, r1
 8010c90:	d00c      	beq.n	8010cac <filter_add+0x24>
 8010c92:	88c4      	ldrh	r4, [r0, #6]
 8010c94:	428c      	cmp	r4, r1
 8010c96:	d009      	beq.n	8010cac <filter_add+0x24>
 8010c98:	8902      	ldrh	r2, [r0, #8]
 8010c9a:	428a      	cmp	r2, r1
 8010c9c:	d006      	beq.n	8010cac <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
 8010c9e:	b113      	cbz	r3, 8010ca6 <filter_add+0x1e>
 8010ca0:	b12c      	cbz	r4, 8010cae <filter_add+0x26>
 8010ca2:	b91a      	cbnz	r2, 8010cac <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010ca4:	2302      	movs	r3, #2
			client->filter[i] = addr;
 8010ca6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010caa:	8081      	strh	r1, [r0, #4]
 8010cac:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e7f9      	b.n	8010ca6 <filter_add+0x1e>
	...

08010cb4 <proxy_send>:
{
 8010cb4:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
 8010cb6:	4a07      	ldr	r2, [pc, #28]	; (8010cd4 <proxy_send+0x20>)
 8010cb8:	7812      	ldrb	r2, [r2, #0]
 8010cba:	2a02      	cmp	r2, #2
 8010cbc:	d103      	bne.n	8010cc6 <proxy_send+0x12>
		return bt_gatt_notify(conn, &proxy_attrs[4], data, len);
 8010cbe:	460a      	mov	r2, r1
 8010cc0:	4905      	ldr	r1, [pc, #20]	; (8010cd8 <proxy_send+0x24>)
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
 8010cc2:	f7f8 b8a3 	b.w	8008e0c <bt_gatt_notify>
	if (gatt_svc == MESH_GATT_PROV) {
 8010cc6:	2a01      	cmp	r2, #1
 8010cc8:	d102      	bne.n	8010cd0 <proxy_send+0x1c>
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
 8010cca:	460a      	mov	r2, r1
 8010ccc:	4903      	ldr	r1, [pc, #12]	; (8010cdc <proxy_send+0x28>)
 8010cce:	e7f8      	b.n	8010cc2 <proxy_send+0xe>
}
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	4770      	bx	lr
 8010cd4:	20001260 	.word	0x20001260
 8010cd8:	20006358 	.word	0x20006358
 8010cdc:	200062c0 	.word	0x200062c0

08010ce0 <proxy_segment_and_send>:
{
 8010ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce4:	4688      	mov	r8, r1
 8010ce6:	4614      	mov	r4, r2
 8010ce8:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
 8010cea:	f7f8 f8af 	bl	8008e4c <bt_gatt_get_mtu>
	if (mtu > msg->len) {
 8010cee:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
 8010cf0:	3803      	subs	r0, #3
 8010cf2:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
 8010cf4:	42ab      	cmp	r3, r5
 8010cf6:	f008 013f 	and.w	r1, r8, #63	; 0x3f
 8010cfa:	d209      	bcs.n	8010d10 <proxy_segment_and_send+0x30>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f000 fd67 	bl	80117d0 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
 8010d02:	88a2      	ldrh	r2, [r4, #4]
 8010d04:	6821      	ldr	r1, [r4, #0]
 8010d06:	4638      	mov	r0, r7
}
 8010d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
 8010d0c:	f7ff bfd2 	b.w	8010cb4 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
 8010d10:	b2ce      	uxtb	r6, r1
 8010d12:	f046 0140 	orr.w	r1, r6, #64	; 0x40
 8010d16:	4620      	mov	r0, r4
 8010d18:	f000 fd5a 	bl	80117d0 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
 8010d1c:	462a      	mov	r2, r5
 8010d1e:	6821      	ldr	r1, [r4, #0]
 8010d20:	4638      	mov	r0, r7
 8010d22:	f7ff ffc7 	bl	8010cb4 <proxy_send>
	net_buf_simple_pull(msg, mtu);
 8010d26:	4629      	mov	r1, r5
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fd5a 	bl	80117e2 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
 8010d2e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
 8010d32:	88a3      	ldrh	r3, [r4, #4]
 8010d34:	b163      	cbz	r3, 8010d50 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
 8010d36:	3301      	adds	r3, #1
 8010d38:	42ab      	cmp	r3, r5
 8010d3a:	da0c      	bge.n	8010d56 <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
 8010d3c:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
 8010d40:	4620      	mov	r0, r4
 8010d42:	f000 fd45 	bl	80117d0 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
 8010d46:	88a2      	ldrh	r2, [r4, #4]
 8010d48:	6821      	ldr	r1, [r4, #0]
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	f7ff ffb2 	bl	8010cb4 <proxy_send>
}
 8010d50:	2000      	movs	r0, #0
 8010d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
 8010d56:	4631      	mov	r1, r6
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f000 fd39 	bl	80117d0 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
 8010d5e:	6821      	ldr	r1, [r4, #0]
 8010d60:	462a      	mov	r2, r5
 8010d62:	4638      	mov	r0, r7
 8010d64:	f7ff ffa6 	bl	8010cb4 <proxy_send>
		net_buf_simple_pull(msg, mtu);
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f000 fd39 	bl	80117e2 <net_buf_simple_pull>
 8010d70:	e7df      	b.n	8010d32 <proxy_segment_and_send+0x52>

08010d72 <beacon_send>:
{
 8010d72:	b530      	push	{r4, r5, lr}
 8010d74:	b089      	sub	sp, #36	; 0x24
 8010d76:	4604      	mov	r4, r0
 8010d78:	460d      	mov	r5, r1
	struct net_buf_simple *buf = NET_BUF_SIMPLE(23);
 8010d7a:	2220      	movs	r2, #32
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	4668      	mov	r0, sp
 8010d80:	f7ef fdaa 	bl	80008d8 <memset>
 8010d84:	2317      	movs	r3, #23
 8010d86:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_mesh_beacon_create(sub, buf);
 8010d8a:	4669      	mov	r1, sp
	buf->data = buf->__buf + reserve_head;
 8010d8c:	f10d 0309 	add.w	r3, sp, #9
 8010d90:	4628      	mov	r0, r5
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	f7f8 fae6 	bl	8009364 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, buf);
 8010d98:	466a      	mov	r2, sp
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f7ff ff9f 	bl	8010ce0 <proxy_segment_and_send>
}
 8010da2:	b009      	add	sp, #36	; 0x24
 8010da4:	bd30      	pop	{r4, r5, pc}
	...

08010da8 <proxy_send_beacons>:
{
 8010da8:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010daa:	4c0e      	ldr	r4, [pc, #56]	; (8010de4 <proxy_send_beacons+0x3c>)
 8010dac:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8010db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010db4:	429a      	cmp	r2, r3
{
 8010db6:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010db8:	d005      	beq.n	8010dc6 <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
 8010dba:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
 8010dbe:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 8010dc2:	f7ff ffd6 	bl	8010d72 <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
 8010dc6:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
 8010dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d006      	beq.n	8010de0 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
 8010dd2:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8010dd6:	4904      	ldr	r1, [pc, #16]	; (8010de8 <proxy_send_beacons+0x40>)
}
 8010dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
 8010ddc:	f7ff bfc9 	b.w	8010d72 <beacon_send>
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	20005bd0 	.word	0x20005bd0
 8010de8:	20005e68 	.word	0x20005e68

08010dec <send_filter_status>:
{
 8010dec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
 8010dee:	f851 3b04 	ldr.w	r3, [r1], #4
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	2600      	movs	r6, #0
{
 8010df6:	4614      	mov	r4, r2
 8010df8:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
 8010dfa:	9102      	str	r1, [sp, #8]
 8010dfc:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
 8010dfe:	f7fb fa89 	bl	800c314 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
 8010e02:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
 8010e04:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
 8010e08:	809e      	strh	r6, [r3, #4]
 8010e0a:	f104 0312 	add.w	r3, r4, #18
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
 8010e0e:	2103      	movs	r1, #3
 8010e10:	6023      	str	r3, [r4, #0]
	buf->len = 0;
 8010e12:	80a6      	strh	r6, [r4, #4]
 8010e14:	4620      	mov	r0, r4
 8010e16:	f000 fc88 	bl	801172a <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
 8010e1a:	7aab      	ldrb	r3, [r5, #10]
 8010e1c:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
 8010e1e:	bf0c      	ite	eq
 8010e20:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
 8010e22:	2101      	movne	r1, #1
 8010e24:	4620      	mov	r0, r4
 8010e26:	f000 fc80 	bl	801172a <net_buf_simple_add_u8>
 8010e2a:	1d2b      	adds	r3, r5, #4
 8010e2c:	f105 020a 	add.w	r2, r5, #10
	for (filter_size = 0, i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010e30:	2100      	movs	r1, #0
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d10f      	bne.n	8010e56 <send_filter_status+0x6a>
	net_buf_simple_add_be16(buf, filter_size);
 8010e36:	4620      	mov	r0, r4
 8010e38:	f000 fc8e 	bl	8011758 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	4621      	mov	r1, r4
 8010e40:	a801      	add	r0, sp, #4
 8010e42:	f7f9 f86b 	bl	8009f1c <bt_mesh_net_encode>
	if (err) {
 8010e46:	b920      	cbnz	r0, 8010e52 <send_filter_status+0x66>
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
 8010e48:	4622      	mov	r2, r4
 8010e4a:	2102      	movs	r1, #2
 8010e4c:	6828      	ldr	r0, [r5, #0]
 8010e4e:	f7ff ff47 	bl	8010ce0 <proxy_segment_and_send>
}
 8010e52:	b004      	add	sp, #16
 8010e54:	bd70      	pop	{r4, r5, r6, pc}
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
 8010e56:	f833 0b02 	ldrh.w	r0, [r3], #2
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d0e9      	beq.n	8010e32 <send_filter_status+0x46>
			filter_size++;
 8010e5e:	3101      	adds	r1, #1
 8010e60:	b289      	uxth	r1, r1
 8010e62:	e7e6      	b.n	8010e32 <send_filter_status+0x46>

08010e64 <proxy_complete_pdu>:
{
 8010e64:	b530      	push	{r4, r5, lr}
	switch (client->msg_type) {
 8010e66:	7ac3      	ldrb	r3, [r0, #11]
{
 8010e68:	b091      	sub	sp, #68	; 0x44
 8010e6a:	4604      	mov	r4, r0
	switch (client->msg_type) {
 8010e6c:	2b03      	cmp	r3, #3
 8010e6e:	d808      	bhi.n	8010e82 <proxy_complete_pdu+0x1e>
 8010e70:	e8df f003 	tbb	[pc, r3]
 8010e74:	79120e02 	.word	0x79120e02
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
 8010e78:	2202      	movs	r2, #2
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	3018      	adds	r0, #24
 8010e7e:	f7f9 fadd 	bl	800a43c <bt_mesh_net_recv>
	buf->data = buf->__buf + reserve_head;
 8010e82:	f104 0320 	add.w	r3, r4, #32
 8010e86:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	83a3      	strh	r3, [r4, #28]
}
 8010e8c:	b011      	add	sp, #68	; 0x44
 8010e8e:	bd30      	pop	{r4, r5, pc}
		bt_mesh_beacon_recv(&client->buf);
 8010e90:	3018      	adds	r0, #24
 8010e92:	f7f8 fb3d 	bl	8009510 <bt_mesh_beacon_recv>
		break;
 8010e96:	e7f4      	b.n	8010e82 <proxy_complete_pdu+0x1e>
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
 8010e98:	2228      	movs	r2, #40	; 0x28
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	a806      	add	r0, sp, #24
 8010e9e:	f7ef fd1b 	bl	80008d8 <memset>
 8010ea2:	231d      	movs	r3, #29
 8010ea4:	f8ad 301e 	strh.w	r3, [sp, #30]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
 8010ea8:	aa01      	add	r2, sp, #4
 8010eaa:	ab06      	add	r3, sp, #24
 8010eac:	2103      	movs	r1, #3
 8010eae:	f104 0018 	add.w	r0, r4, #24
 8010eb2:	f7f9 f987 	bl	800a1c4 <bt_mesh_net_decode>
	if (err) {
 8010eb6:	4605      	mov	r5, r0
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d1e2      	bne.n	8010e82 <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
 8010ebc:	2109      	movs	r1, #9
 8010ebe:	a806      	add	r0, sp, #24
 8010ec0:	f000 fc8f 	bl	80117e2 <net_buf_simple_pull>
	if (buf->len < 1) {
 8010ec4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d0da      	beq.n	8010e82 <proxy_complete_pdu+0x1e>
	opcode = net_buf_simple_pull_u8(buf);
 8010ecc:	a806      	add	r0, sp, #24
 8010ece:	f000 fc90 	bl	80117f2 <net_buf_simple_pull_u8>
	switch (opcode) {
 8010ed2:	2801      	cmp	r0, #1
 8010ed4:	d03e      	beq.n	8010f54 <proxy_complete_pdu+0xf0>
 8010ed6:	d318      	bcc.n	8010f0a <proxy_complete_pdu+0xa6>
 8010ed8:	2802      	cmp	r0, #2
 8010eda:	d1d2      	bne.n	8010e82 <proxy_complete_pdu+0x1e>
		while (buf->len >= 2) {
 8010edc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d91c      	bls.n	8010f1e <proxy_complete_pdu+0xba>
			addr = net_buf_simple_pull_be16(buf);
 8010ee4:	a806      	add	r0, sp, #24
 8010ee6:	f000 fc94 	bl	8011812 <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d0f6      	beq.n	8010edc <proxy_complete_pdu+0x78>
		if (client->filter[i] == addr) {
 8010eee:	88a3      	ldrh	r3, [r4, #4]
 8010ef0:	4283      	cmp	r3, r0
 8010ef2:	d034      	beq.n	8010f5e <proxy_complete_pdu+0xfa>
 8010ef4:	88e3      	ldrh	r3, [r4, #6]
 8010ef6:	4283      	cmp	r3, r0
 8010ef8:	d033      	beq.n	8010f62 <proxy_complete_pdu+0xfe>
 8010efa:	8923      	ldrh	r3, [r4, #8]
 8010efc:	4283      	cmp	r3, r0
 8010efe:	d1ed      	bne.n	8010edc <proxy_complete_pdu+0x78>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010f00:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
 8010f02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010f06:	809d      	strh	r5, [r3, #4]
 8010f08:	e7e8      	b.n	8010edc <proxy_complete_pdu+0x78>
	if (buf->len < 1) {
 8010f0a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010f0e:	b133      	cbz	r3, 8010f1e <proxy_complete_pdu+0xba>
	type = net_buf_simple_pull_u8(buf);
 8010f10:	a806      	add	r0, sp, #24
 8010f12:	f000 fc6e 	bl	80117f2 <net_buf_simple_pull_u8>
	switch (type) {
 8010f16:	4601      	mov	r1, r0
 8010f18:	b138      	cbz	r0, 8010f2a <proxy_complete_pdu+0xc6>
 8010f1a:	2801      	cmp	r0, #1
 8010f1c:	d00c      	beq.n	8010f38 <proxy_complete_pdu+0xd4>
		send_filter_status(client, &rx, buf);
 8010f1e:	aa06      	add	r2, sp, #24
 8010f20:	a901      	add	r1, sp, #4
 8010f22:	4620      	mov	r0, r4
 8010f24:	f7ff ff62 	bl	8010dec <send_filter_status>
 8010f28:	e7ab      	b.n	8010e82 <proxy_complete_pdu+0x1e>
		memset(client->filter, 0, sizeof(client->filter));
 8010f2a:	2206      	movs	r2, #6
 8010f2c:	1d20      	adds	r0, r4, #4
 8010f2e:	f7ef fcd3 	bl	80008d8 <memset>
		client->filter_type = WHITELIST;
 8010f32:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
 8010f34:	72a3      	strb	r3, [r4, #10]
 8010f36:	e7f2      	b.n	8010f1e <proxy_complete_pdu+0xba>
		memset(client->filter, 0, sizeof(client->filter));
 8010f38:	2206      	movs	r2, #6
 8010f3a:	4629      	mov	r1, r5
 8010f3c:	1d20      	adds	r0, r4, #4
 8010f3e:	f7ef fccb 	bl	80008d8 <memset>
		client->filter_type = BLACKLIST;
 8010f42:	2302      	movs	r3, #2
 8010f44:	e7f6      	b.n	8010f34 <proxy_complete_pdu+0xd0>
			addr = net_buf_simple_pull_be16(buf);
 8010f46:	a806      	add	r0, sp, #24
 8010f48:	f000 fc63 	bl	8011812 <net_buf_simple_pull_be16>
			filter_add(client, addr);
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff fe9a 	bl	8010c88 <filter_add>
		while (buf->len >= 2) {
 8010f54:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d8f4      	bhi.n	8010f46 <proxy_complete_pdu+0xe2>
 8010f5c:	e7df      	b.n	8010f1e <proxy_complete_pdu+0xba>
		if (client->filter[i] == addr) {
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e7cf      	b.n	8010f02 <proxy_complete_pdu+0x9e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8010f62:	2301      	movs	r3, #1
 8010f64:	e7cd      	b.n	8010f02 <proxy_complete_pdu+0x9e>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
 8010f66:	f100 0118 	add.w	r1, r0, #24
 8010f6a:	6800      	ldr	r0, [r0, #0]
 8010f6c:	f7ff f99c 	bl	80102a8 <bt_mesh_pb_gatt_recv>
		break;
 8010f70:	e787      	b.n	8010e82 <proxy_complete_pdu+0x1e>

08010f72 <proxy_recv>:
{
 8010f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f76:	4616      	mov	r6, r2
 8010f78:	461d      	mov	r5, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
 8010f7a:	f7ff fdf3 	bl	8010b64 <find_client>
	if (!client) {
 8010f7e:	4604      	mov	r4, r0
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d04b      	beq.n	801101c <proxy_recv+0xaa>
	if (len < 1) {
 8010f84:	b925      	cbnz	r5, 8010f90 <proxy_recv+0x1e>
		return -EINVAL;
 8010f86:	f06f 0515 	mvn.w	r5, #21
}
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
 8010f90:	7832      	ldrb	r2, [r6, #0]
 8010f92:	68c9      	ldr	r1, [r1, #12]
 8010f94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010f98:	3100      	adds	r1, #0
 8010f9a:	f1a2 0303 	sub.w	r3, r2, #3
 8010f9e:	bf18      	it	ne
 8010fa0:	2101      	movne	r1, #1
 8010fa2:	425a      	negs	r2, r3
 8010fa4:	415a      	adcs	r2, r3
 8010fa6:	4291      	cmp	r1, r2
 8010fa8:	d1ed      	bne.n	8010f86 <proxy_recv+0x14>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
 8010faa:	f100 0718 	add.w	r7, r0, #24
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f000 fc51 	bl	8011856 <net_buf_simple_tailroom>
 8010fb4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8010fb8:	4580      	cmp	r8, r0
 8010fba:	d8e4      	bhi.n	8010f86 <proxy_recv+0x14>
	switch (PDU_SAR(data)) {
 8010fbc:	7830      	ldrb	r0, [r6, #0]
 8010fbe:	8ba3      	ldrh	r3, [r4, #28]
 8010fc0:	0982      	lsrs	r2, r0, #6
 8010fc2:	2a02      	cmp	r2, #2
 8010fc4:	d01a      	beq.n	8010ffc <proxy_recv+0x8a>
 8010fc6:	2a03      	cmp	r2, #3
 8010fc8:	d020      	beq.n	801100c <proxy_recv+0x9a>
 8010fca:	2a01      	cmp	r2, #1
 8010fcc:	d00b      	beq.n	8010fe6 <proxy_recv+0x74>
		if (client->buf.len) {
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1d9      	bne.n	8010f86 <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
 8010fd2:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
 8010fd4:	4642      	mov	r2, r8
 8010fd6:	1c71      	adds	r1, r6, #1
 8010fd8:	4638      	mov	r0, r7
 8010fda:	f000 fb9d 	bl	8011718 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7ff ff40 	bl	8010e64 <proxy_complete_pdu>
		break;
 8010fe4:	e7d1      	b.n	8010f8a <proxy_recv+0x18>
		if (client->buf.len) {
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1cd      	bne.n	8010f86 <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
 8010fea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010fee:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
 8010ff0:	4642      	mov	r2, r8
 8010ff2:	1c71      	adds	r1, r6, #1
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	f000 fb8f 	bl	8011718 <net_buf_simple_add_mem>
		break;
 8010ffa:	e7c6      	b.n	8010f8a <proxy_recv+0x18>
		if (!client->buf.len) {
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d0c2      	beq.n	8010f86 <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
 8011000:	7ae3      	ldrb	r3, [r4, #11]
 8011002:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011006:	4283      	cmp	r3, r0
 8011008:	d0f2      	beq.n	8010ff0 <proxy_recv+0x7e>
 801100a:	e7bc      	b.n	8010f86 <proxy_recv+0x14>
		if (!client->buf.len) {
 801100c:	2b00      	cmp	r3, #0
 801100e:	d0ba      	beq.n	8010f86 <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
 8011010:	7ae3      	ldrb	r3, [r4, #11]
 8011012:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011016:	4283      	cmp	r3, r0
 8011018:	d0dc      	beq.n	8010fd4 <proxy_recv+0x62>
 801101a:	e7b4      	b.n	8010f86 <proxy_recv+0x14>
		return -ENOTCONN;
 801101c:	f06f 0538 	mvn.w	r5, #56	; 0x38
 8011020:	e7b3      	b.n	8010f8a <proxy_recv+0x18>

08011022 <prov_ccc_write>:
	if (len != sizeof(*value)) {
 8011022:	2b02      	cmp	r3, #2
{
 8011024:	b570      	push	{r4, r5, r6, lr}
	u16_t *value = attr->user_data;
 8011026:	68c9      	ldr	r1, [r1, #12]
{
 8011028:	4605      	mov	r5, r0
 801102a:	461c      	mov	r4, r3
	if (len != sizeof(*value)) {
 801102c:	d111      	bne.n	8011052 <prov_ccc_write+0x30>
	return ((u16_t)src[1] << 8) | src[0];
 801102e:	7856      	ldrb	r6, [r2, #1]
 8011030:	7813      	ldrb	r3, [r2, #0]
 8011032:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (*value != BT_GATT_CCC_NOTIFY) {
 8011036:	2b01      	cmp	r3, #1
	*value = sys_get_le16(buf);
 8011038:	800b      	strh	r3, [r1, #0]
	if (*value != BT_GATT_CCC_NOTIFY) {
 801103a:	d108      	bne.n	801104e <prov_ccc_write+0x2c>
	client = find_client(conn);
 801103c:	f7ff fd92 	bl	8010b64 <find_client>
	if (client->filter_type == NONE) {
 8011040:	7a83      	ldrb	r3, [r0, #10]
 8011042:	b923      	cbnz	r3, 801104e <prov_ccc_write+0x2c>
		client->filter_type = PROV;
 8011044:	2303      	movs	r3, #3
 8011046:	7283      	strb	r3, [r0, #10]
		bt_mesh_pb_gatt_open(conn);
 8011048:	4628      	mov	r0, r5
 801104a:	f7ff f957 	bl	80102fc <bt_mesh_pb_gatt_open>
}
 801104e:	4620      	mov	r0, r4
 8011050:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 8011052:	f06f 040c 	mvn.w	r4, #12
 8011056:	e7fa      	b.n	801104e <prov_ccc_write+0x2c>

08011058 <proxy_ccc_write>:
	if (len != sizeof(value)) {
 8011058:	2b02      	cmp	r3, #2
{
 801105a:	b538      	push	{r3, r4, r5, lr}
	if (len != sizeof(value)) {
 801105c:	d124      	bne.n	80110a8 <proxy_ccc_write+0x50>
 801105e:	7853      	ldrb	r3, [r2, #1]
 8011060:	7815      	ldrb	r5, [r2, #0]
 8011062:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (value != BT_GATT_CCC_NOTIFY) {
 8011066:	b22d      	sxth	r5, r5
 8011068:	2d01      	cmp	r5, #1
 801106a:	d001      	beq.n	8011070 <proxy_ccc_write+0x18>
		return len;
 801106c:	2002      	movs	r0, #2
 801106e:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
 8011070:	f7ff fd78 	bl	8010b64 <find_client>
	if (client->filter_type == NONE) {
 8011074:	7a83      	ldrb	r3, [r0, #10]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1f8      	bne.n	801106c <proxy_ccc_write+0x14>
		client->filter_type = WHITELIST;
 801107a:	7285      	strb	r5, [r0, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 801107c:	f100 0314 	add.w	r3, r0, #20
 8011080:	f3bf 8f5b 	dmb	ish
 8011084:	e853 2f00 	ldrex	r2, [r3]
 8011088:	f042 0101 	orr.w	r1, r2, #1
 801108c:	e843 1500 	strex	r5, r1, [r3]
 8011090:	2d00      	cmp	r5, #0
 8011092:	d1f7      	bne.n	8011084 <proxy_ccc_write+0x2c>
 8011094:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8011098:	07d3      	lsls	r3, r2, #31
 801109a:	d4e7      	bmi.n	801106c <proxy_ccc_write+0x14>
		k_queue_append(&work_q->queue, work);
 801109c:	f100 010c 	add.w	r1, r0, #12
 80110a0:	4803      	ldr	r0, [pc, #12]	; (80110b0 <proxy_ccc_write+0x58>)
 80110a2:	f000 fd04 	bl	8011aae <k_queue_append>
 80110a6:	e7e1      	b.n	801106c <proxy_ccc_write+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
 80110a8:	f06f 000c 	mvn.w	r0, #12
}
 80110ac:	bd38      	pop	{r3, r4, r5, pc}
 80110ae:	bf00      	nop
 80110b0:	20001480 	.word	0x20001480

080110b4 <bt_mesh_proxy_beacon_send>:
{
 80110b4:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 80110b6:	4c0e      	ldr	r4, [pc, #56]	; (80110f0 <bt_mesh_proxy_beacon_send+0x3c>)
{
 80110b8:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 80110ba:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
	if (!sub) {
 80110be:	b131      	cbz	r1, 80110ce <bt_mesh_proxy_beacon_send+0x1a>
		if (clients[i].conn) {
 80110c0:	4b0c      	ldr	r3, [pc, #48]	; (80110f4 <bt_mesh_proxy_beacon_send+0x40>)
 80110c2:	6818      	ldr	r0, [r3, #0]
 80110c4:	b198      	cbz	r0, 80110ee <bt_mesh_proxy_beacon_send+0x3a>
}
 80110c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
 80110ca:	f7ff be52 	b.w	8010d72 <beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 80110ce:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 80110d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d002      	beq.n	80110e0 <bt_mesh_proxy_beacon_send+0x2c>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 80110da:	4628      	mov	r0, r5
 80110dc:	f7ff ffea 	bl	80110b4 <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 80110e0:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
 80110e4:	4904      	ldr	r1, [pc, #16]	; (80110f8 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
 80110e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d1e7      	bne.n	80110be <bt_mesh_proxy_beacon_send+0xa>
 80110ee:	bd38      	pop	{r3, r4, r5, pc}
 80110f0:	20005bd0 	.word	0x20005bd0
 80110f4:	200061f8 	.word	0x200061f8
 80110f8:	20005e68 	.word	0x20005e68

080110fc <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 80110fc:	2301      	movs	r3, #1
{
 80110fe:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
 8011100:	f880 3020 	strb.w	r3, [r0, #32]
{
 8011104:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
 8011106:	f000 ffc5 	bl	8012094 <_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
 801110a:	4b07      	ldr	r3, [pc, #28]	; (8011128 <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
 801110c:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
 801110e:	1ae4      	subs	r4, r4, r3
 8011110:	10a4      	asrs	r4, r4, #2
 8011112:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8011116:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
 801111a:	eb04 4484 	add.w	r4, r4, r4, lsl #18
 801111e:	4b03      	ldr	r3, [pc, #12]	; (801112c <bt_mesh_proxy_identity_start+0x30>)
 8011120:	4264      	negs	r4, r4
 8011122:	601c      	str	r4, [r3, #0]
 8011124:	bd10      	pop	{r4, pc}
 8011126:	bf00      	nop
 8011128:	20005d84 	.word	0x20005d84
 801112c:	20001264 	.word	0x20001264

08011130 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 8011130:	2300      	movs	r3, #0
 8011132:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0;
 8011136:	6243      	str	r3, [r0, #36]	; 0x24
 8011138:	4770      	bx	lr
	...

0801113c <bt_mesh_proxy_get_buf>:
	buf->data = buf->__buf + reserve_head;
 801113c:	4803      	ldr	r0, [pc, #12]	; (801114c <bt_mesh_proxy_get_buf+0x10>)
 801113e:	f100 0320 	add.w	r3, r0, #32
 8011142:	6183      	str	r3, [r0, #24]
	buf->len = 0;
 8011144:	2300      	movs	r3, #0
 8011146:	8383      	strh	r3, [r0, #28]
}
 8011148:	3018      	adds	r0, #24
 801114a:	4770      	bx	lr
 801114c:	200061f8 	.word	0x200061f8

08011150 <bt_mesh_proxy_prov_enable>:
{
 8011150:	b508      	push	{r3, lr}
	bt_gatt_service_register(&prov_svc);
 8011152:	4807      	ldr	r0, [pc, #28]	; (8011170 <bt_mesh_proxy_prov_enable+0x20>)
 8011154:	f7f7 fd1a 	bl	8008b8c <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROV;
 8011158:	4a06      	ldr	r2, [pc, #24]	; (8011174 <bt_mesh_proxy_prov_enable+0x24>)
 801115a:	2301      	movs	r3, #1
 801115c:	7013      	strb	r3, [r2, #0]
	prov_fast_adv = true;
 801115e:	4a06      	ldr	r2, [pc, #24]	; (8011178 <bt_mesh_proxy_prov_enable+0x28>)
 8011160:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
 8011162:	4b06      	ldr	r3, [pc, #24]	; (801117c <bt_mesh_proxy_prov_enable+0x2c>)
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	b10a      	cbz	r2, 801116c <bt_mesh_proxy_prov_enable+0x1c>
			clients[i].filter_type = PROV;
 8011168:	2203      	movs	r2, #3
 801116a:	729a      	strb	r2, [r3, #10]
}
 801116c:	2000      	movs	r0, #0
 801116e:	bd08      	pop	{r3, pc}
 8011170:	200062e8 	.word	0x200062e8
 8011174:	20001260 	.word	0x20001260
 8011178:	2000126a 	.word	0x2000126a
 801117c:	200061f8 	.word	0x200061f8

08011180 <bt_mesh_proxy_prov_disable>:
{
 8011180:	b538      	push	{r3, r4, r5, lr}
		if (client->conn && client->filter_type == PROV) {
 8011182:	4c08      	ldr	r4, [pc, #32]	; (80111a4 <bt_mesh_proxy_prov_disable+0x24>)
	bt_gatt_service_unregister(&prov_svc);
 8011184:	4808      	ldr	r0, [pc, #32]	; (80111a8 <bt_mesh_proxy_prov_disable+0x28>)
 8011186:	f7f7 fd33 	bl	8008bf0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
 801118a:	4b08      	ldr	r3, [pc, #32]	; (80111ac <bt_mesh_proxy_prov_disable+0x2c>)
		if (client->conn && client->filter_type == PROV) {
 801118c:	6820      	ldr	r0, [r4, #0]
	gatt_svc = MESH_GATT_NONE;
 801118e:	2500      	movs	r5, #0
 8011190:	701d      	strb	r5, [r3, #0]
		if (client->conn && client->filter_type == PROV) {
 8011192:	b128      	cbz	r0, 80111a0 <bt_mesh_proxy_prov_disable+0x20>
 8011194:	7aa3      	ldrb	r3, [r4, #10]
 8011196:	2b03      	cmp	r3, #3
 8011198:	d102      	bne.n	80111a0 <bt_mesh_proxy_prov_disable+0x20>
			bt_mesh_pb_gatt_close(client->conn);
 801119a:	f7ff f8d1 	bl	8010340 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
 801119e:	72a5      	strb	r5, [r4, #10]
}
 80111a0:	2000      	movs	r0, #0
 80111a2:	bd38      	pop	{r3, r4, r5, pc}
 80111a4:	200061f8 	.word	0x200061f8
 80111a8:	200062e8 	.word	0x200062e8
 80111ac:	20001260 	.word	0x20001260

080111b0 <bt_mesh_proxy_gatt_enable>:
{
 80111b0:	b508      	push	{r3, lr}
	bt_gatt_service_register(&proxy_svc);
 80111b2:	4806      	ldr	r0, [pc, #24]	; (80111cc <bt_mesh_proxy_gatt_enable+0x1c>)
 80111b4:	f7f7 fcea 	bl	8008b8c <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
 80111b8:	4b05      	ldr	r3, [pc, #20]	; (80111d0 <bt_mesh_proxy_gatt_enable+0x20>)
 80111ba:	2202      	movs	r2, #2
 80111bc:	701a      	strb	r2, [r3, #0]
		if (clients[i].conn) {
 80111be:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <bt_mesh_proxy_gatt_enable+0x24>)
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	b10a      	cbz	r2, 80111c8 <bt_mesh_proxy_gatt_enable+0x18>
			clients[i].filter_type = WHITELIST;
 80111c4:	2201      	movs	r2, #1
 80111c6:	729a      	strb	r2, [r3, #10]
}
 80111c8:	2000      	movs	r0, #0
 80111ca:	bd08      	pop	{r3, pc}
 80111cc:	20006380 	.word	0x20006380
 80111d0:	20001260 	.word	0x20001260
 80111d4:	200061f8 	.word	0x200061f8

080111d8 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
 80111d8:	4b06      	ldr	r3, [pc, #24]	; (80111f4 <bt_mesh_proxy_gatt_disconnect+0x1c>)
 80111da:	6818      	ldr	r0, [r3, #0]
 80111dc:	b140      	cbz	r0, 80111f0 <bt_mesh_proxy_gatt_disconnect+0x18>
 80111de:	7a9a      	ldrb	r2, [r3, #10]
 80111e0:	3a01      	subs	r2, #1
 80111e2:	2a01      	cmp	r2, #1
 80111e4:	d804      	bhi.n	80111f0 <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
 80111e6:	2200      	movs	r2, #0
 80111e8:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
 80111ea:	2113      	movs	r1, #19
 80111ec:	f7f5 be94 	b.w	8006f18 <bt_conn_disconnect>
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	200061f8 	.word	0x200061f8

080111f8 <bt_mesh_proxy_gatt_disable>:
{
 80111f8:	b508      	push	{r3, lr}
	bt_mesh_proxy_gatt_disconnect();
 80111fa:	f7ff ffed 	bl	80111d8 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
 80111fe:	4803      	ldr	r0, [pc, #12]	; (801120c <bt_mesh_proxy_gatt_disable+0x14>)
 8011200:	f7f7 fcf6 	bl	8008bf0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
 8011204:	4b02      	ldr	r3, [pc, #8]	; (8011210 <bt_mesh_proxy_gatt_disable+0x18>)
 8011206:	2000      	movs	r0, #0
 8011208:	7018      	strb	r0, [r3, #0]
}
 801120a:	bd08      	pop	{r3, pc}
 801120c:	20006380 	.word	0x20006380
 8011210:	20001260 	.word	0x20001260

08011214 <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
 8011214:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
 8011218:	2b01      	cmp	r3, #1
{
 801121a:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
 801121c:	d102      	bne.n	8011224 <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
 801121e:	3818      	subs	r0, #24
 8011220:	f7ff bd32 	b.w	8010c88 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
 8011224:	2b02      	cmp	r3, #2
 8011226:	d111      	bne.n	801124c <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
 8011228:	b181      	cbz	r1, 801124c <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
 801122a:	f830 1c14 	ldrh.w	r1, [r0, #-20]
 801122e:	4291      	cmp	r1, r2
 8011230:	d00d      	beq.n	801124e <bt_mesh_proxy_addr_add+0x3a>
 8011232:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8011236:	4291      	cmp	r1, r2
 8011238:	d00b      	beq.n	8011252 <bt_mesh_proxy_addr_add+0x3e>
 801123a:	f830 1c10 	ldrh.w	r1, [r0, #-16]
 801123e:	4291      	cmp	r1, r2
 8011240:	d104      	bne.n	801124c <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
 8011242:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011246:	2300      	movs	r3, #0
 8011248:	f820 3c14 	strh.w	r3, [r0, #-20]
 801124c:	4770      	bx	lr
		if (client->filter[i] == addr) {
 801124e:	2300      	movs	r3, #0
 8011250:	e7f7      	b.n	8011242 <bt_mesh_proxy_addr_add+0x2e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
 8011252:	2301      	movs	r3, #1
 8011254:	e7f5      	b.n	8011242 <bt_mesh_proxy_addr_add+0x2e>

08011256 <bt_mesh_proxy_send>:
{
 8011256:	b538      	push	{r3, r4, r5, lr}
 8011258:	4604      	mov	r4, r0
 801125a:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
 801125c:	f7ff fc82 	bl	8010b64 <find_client>
	if (!client) {
 8011260:	b188      	cbz	r0, 8011286 <bt_mesh_proxy_send+0x30>
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
 8011262:	7a83      	ldrb	r3, [r0, #10]
 8011264:	1ed8      	subs	r0, r3, #3
 8011266:	4243      	negs	r3, r0
 8011268:	f1a1 0c03 	sub.w	ip, r1, #3
 801126c:	4143      	adcs	r3, r0
 801126e:	f1dc 0200 	rsbs	r2, ip, #0
 8011272:	eb42 020c 	adc.w	r2, r2, ip
 8011276:	4293      	cmp	r3, r2
 8011278:	d108      	bne.n	801128c <bt_mesh_proxy_send+0x36>
	return proxy_segment_and_send(conn, type, msg);
 801127a:	462a      	mov	r2, r5
 801127c:	4620      	mov	r0, r4
}
 801127e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
 8011282:	f7ff bd2d 	b.w	8010ce0 <proxy_segment_and_send>
		return -ENOTCONN;
 8011286:	f06f 0038 	mvn.w	r0, #56	; 0x38
 801128a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 801128c:	f06f 0015 	mvn.w	r0, #21
}
 8011290:	bd38      	pop	{r3, r4, r5, pc}
	...

08011294 <bt_mesh_proxy_relay>:
{
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	b08a      	sub	sp, #40	; 0x28
 8011298:	4605      	mov	r5, r0
 801129a:	460c      	mov	r4, r1
		struct net_buf_simple *msg = NET_BUF_SIMPLE(32);
 801129c:	2228      	movs	r2, #40	; 0x28
 801129e:	2100      	movs	r1, #0
 80112a0:	4668      	mov	r0, sp
 80112a2:	f7ef fb19 	bl	80008d8 <memset>
 80112a6:	2320      	movs	r3, #32
 80112a8:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (!client->conn) {
 80112ac:	4b16      	ldr	r3, [pc, #88]	; (8011308 <bt_mesh_proxy_relay+0x74>)
 80112ae:	6818      	ldr	r0, [r3, #0]
 80112b0:	461e      	mov	r6, r3
 80112b2:	b160      	cbz	r0, 80112ce <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == WHITELIST) {
 80112b4:	7a9a      	ldrb	r2, [r3, #10]
 80112b6:	2a01      	cmp	r2, #1
 80112b8:	d10b      	bne.n	80112d2 <bt_mesh_proxy_relay+0x3e>
			if (client->filter[i] == addr) {
 80112ba:	889a      	ldrh	r2, [r3, #4]
 80112bc:	42a2      	cmp	r2, r4
 80112be:	d013      	beq.n	80112e8 <bt_mesh_proxy_relay+0x54>
 80112c0:	88da      	ldrh	r2, [r3, #6]
 80112c2:	42a2      	cmp	r2, r4
 80112c4:	d010      	beq.n	80112e8 <bt_mesh_proxy_relay+0x54>
 80112c6:	891b      	ldrh	r3, [r3, #8]
 80112c8:	42a3      	cmp	r3, r4
 80112ca:	d00d      	beq.n	80112e8 <bt_mesh_proxy_relay+0x54>
			if (client->filter[i] == addr) {
 80112cc:	2000      	movs	r0, #0
}
 80112ce:	b00a      	add	sp, #40	; 0x28
 80112d0:	bd70      	pop	{r4, r5, r6, pc}
	if (client->filter_type == BLACKLIST) {
 80112d2:	2a02      	cmp	r2, #2
 80112d4:	d1fa      	bne.n	80112cc <bt_mesh_proxy_relay+0x38>
			if (client->filter[i] == addr) {
 80112d6:	889a      	ldrh	r2, [r3, #4]
 80112d8:	42a2      	cmp	r2, r4
 80112da:	d0f7      	beq.n	80112cc <bt_mesh_proxy_relay+0x38>
 80112dc:	88da      	ldrh	r2, [r3, #6]
 80112de:	42a2      	cmp	r2, r4
 80112e0:	d0f4      	beq.n	80112cc <bt_mesh_proxy_relay+0x38>
 80112e2:	891b      	ldrh	r3, [r3, #8]
 80112e4:	42a3      	cmp	r3, r4
 80112e6:	d0f1      	beq.n	80112cc <bt_mesh_proxy_relay+0x38>
	buf->data = buf->__buf + reserve_head;
 80112e8:	f10d 0309 	add.w	r3, sp, #9
		net_buf_simple_add_mem(msg, buf->data, buf->len);
 80112ec:	88aa      	ldrh	r2, [r5, #4]
 80112ee:	6829      	ldr	r1, [r5, #0]
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	4668      	mov	r0, sp
 80112f4:	f000 fa10 	bl	8011718 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, msg);
 80112f8:	466a      	mov	r2, sp
 80112fa:	2100      	movs	r1, #0
 80112fc:	6830      	ldr	r0, [r6, #0]
 80112fe:	f7ff ffaa 	bl	8011256 <bt_mesh_proxy_send>
		relayed = true;
 8011302:	2001      	movs	r0, #1
	return relayed;
 8011304:	e7e3      	b.n	80112ce <bt_mesh_proxy_relay+0x3a>
 8011306:	bf00      	nop
 8011308:	200061f8 	.word	0x200061f8

0801130c <bt_mesh_proxy_adv_start>:
	return remaining;
}
#endif /* GATT_PROXY */

s32_t bt_mesh_proxy_adv_start(void)
{
 801130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
 8011310:	4b68      	ldr	r3, [pc, #416]	; (80114b4 <bt_mesh_proxy_adv_start+0x1a8>)
 8011312:	781b      	ldrb	r3, [r3, #0]
{
 8011314:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
 8011316:	b92b      	cbnz	r3, 8011324 <bt_mesh_proxy_adv_start+0x18>
		return K_FOREVER;
 8011318:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
 801131c:	4620      	mov	r0, r4
 801131e:	b006      	add	sp, #24
 8011320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!bt_mesh_is_provisioned()) {
 8011324:	f7f7 fe68 	bl	8008ff8 <bt_mesh_is_provisioned>
 8011328:	b9b0      	cbnz	r0, 8011358 <bt_mesh_proxy_adv_start+0x4c>
		if (prov_fast_adv) {
 801132a:	4c63      	ldr	r4, [pc, #396]	; (80114b8 <bt_mesh_proxy_adv_start+0x1ac>)
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
 801132c:	4e63      	ldr	r6, [pc, #396]	; (80114bc <bt_mesh_proxy_adv_start+0x1b0>)
		if (prov_fast_adv) {
 801132e:	7827      	ldrb	r7, [r4, #0]
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
 8011330:	4863      	ldr	r0, [pc, #396]	; (80114c0 <bt_mesh_proxy_adv_start+0x1b4>)
 8011332:	4b64      	ldr	r3, [pc, #400]	; (80114c4 <bt_mesh_proxy_adv_start+0x1b8>)
 8011334:	4964      	ldr	r1, [pc, #400]	; (80114c8 <bt_mesh_proxy_adv_start+0x1bc>)
 8011336:	2501      	movs	r5, #1
 8011338:	9500      	str	r5, [sp, #0]
 801133a:	2203      	movs	r2, #3
 801133c:	2f00      	cmp	r7, #0
 801133e:	bf08      	it	eq
 8011340:	4630      	moveq	r0, r6
 8011342:	f7f4 fffb 	bl	800633c <bt_le_adv_start>
 8011346:	b938      	cbnz	r0, 8011358 <bt_mesh_proxy_adv_start+0x4c>
			proxy_adv_enabled = true;
 8011348:	4b60      	ldr	r3, [pc, #384]	; (80114cc <bt_mesh_proxy_adv_start+0x1c0>)
 801134a:	701d      	strb	r5, [r3, #0]
			if (prov_fast_adv) {
 801134c:	7823      	ldrb	r3, [r4, #0]
 801134e:	b11b      	cbz	r3, 8011358 <bt_mesh_proxy_adv_start+0x4c>
				prov_fast_adv = false;
 8011350:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
 8011352:	f64e 2460 	movw	r4, #60000	; 0xea60
 8011356:	e7e1      	b.n	801131c <bt_mesh_proxy_adv_start+0x10>
	if (bt_mesh_is_provisioned()) {
 8011358:	f7f7 fe4e 	bl	8008ff8 <bt_mesh_is_provisioned>
 801135c:	2800      	cmp	r0, #0
 801135e:	d0db      	beq.n	8011318 <bt_mesh_proxy_adv_start+0xc>
		return gatt_proxy_advertise(next_sub());
 8011360:	f7ff fc1e 	bl	8010ba0 <next_sub>
	proxy_svc_data[2] = ID_TYPE_NODE;
 8011364:	4f5a      	ldr	r7, [pc, #360]	; (80114d0 <bt_mesh_proxy_adv_start+0x1c4>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
 8011366:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80114e8 <bt_mesh_proxy_adv_start+0x1dc>
		return gatt_proxy_advertise(next_sub());
 801136a:	4605      	mov	r5, r0
	err = bt_rand(proxy_svc_data + 11, 8);
 801136c:	f107 090b 	add.w	r9, r7, #11
	if (conn_count == CONFIG_BT_MAX_CONN) {
 8011370:	f8d8 3000 	ldr.w	r3, [r8]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d0cf      	beq.n	8011318 <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
 8011378:	2d00      	cmp	r5, #0
 801137a:	d0cd      	beq.n	8011318 <bt_mesh_proxy_adv_start+0xc>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
 801137c:	f895 6020 	ldrb.w	r6, [r5, #32]
 8011380:	2e01      	cmp	r6, #1
 8011382:	f040 808e 	bne.w	80114a2 <bt_mesh_proxy_adv_start+0x196>
 8011386:	f000 fe85 	bl	8012094 <_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
 801138a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
 801138c:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
 8011390:	1b04      	subs	r4, r0, r4
		if (active < NODE_ID_TIMEOUT) {
 8011392:	429c      	cmp	r4, r3
 8011394:	f200 8081 	bhi.w	801149a <bt_mesh_proxy_adv_start+0x18e>
	err = bt_rand(proxy_svc_data + 11, 8);
 8011398:	2108      	movs	r1, #8
 801139a:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
 801139c:	70be      	strb	r6, [r7, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
 801139e:	f7f5 fa5d 	bl	800685c <bt_rand>
			remaining = NODE_ID_TIMEOUT - active;
 80113a2:	f5c4 446a 	rsb	r4, r4, #59904	; 0xea00
 80113a6:	3460      	adds	r4, #96	; 0x60
	if (err) {
 80113a8:	4601      	mov	r1, r0
 80113aa:	bb58      	cbnz	r0, 8011404 <bt_mesh_proxy_adv_start+0xf8>
	memset(tmp, 0, 6);
 80113ac:	2206      	movs	r2, #6
 80113ae:	a802      	add	r0, sp, #8
 80113b0:	f7ef fa92 	bl	80008d8 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
 80113b4:	2208      	movs	r2, #8
 80113b6:	4947      	ldr	r1, [pc, #284]	; (80114d4 <bt_mesh_proxy_adv_start+0x1c8>)
 80113b8:	f10d 000e 	add.w	r0, sp, #14
 80113bc:	f7ef fa60 	bl	8000880 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
 80113c0:	f7fa ffa8 	bl	800c314 <bt_mesh_primary_addr>
	dst[0] = val >> 8;
 80113c4:	0a03      	lsrs	r3, r0, #8
 80113c6:	f88d 3016 	strb.w	r3, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
 80113ca:	7fab      	ldrb	r3, [r5, #30]
	dst[1] = val;
 80113cc:	f88d 0017 	strb.w	r0, [sp, #23]
 80113d0:	2059      	movs	r0, #89	; 0x59
 80113d2:	fb03 0000 	mla	r0, r3, r0, r0
 80113d6:	aa02      	add	r2, sp, #8
 80113d8:	4611      	mov	r1, r2
 80113da:	4428      	add	r0, r5
 80113dc:	f7f5 fa56 	bl	800688c <bt_encrypt_be>
	if (err) {
 80113e0:	4682      	mov	sl, r0
 80113e2:	b978      	cbnz	r0, 8011404 <bt_mesh_proxy_adv_start+0xf8>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
 80113e4:	2208      	movs	r2, #8
 80113e6:	a904      	add	r1, sp, #16
 80113e8:	483b      	ldr	r0, [pc, #236]	; (80114d8 <bt_mesh_proxy_adv_start+0x1cc>)
 80113ea:	f7ef fa49 	bl	8000880 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
 80113ee:	f8cd a000 	str.w	sl, [sp]
 80113f2:	4653      	mov	r3, sl
 80113f4:	2203      	movs	r2, #3
 80113f6:	4939      	ldr	r1, [pc, #228]	; (80114dc <bt_mesh_proxy_adv_start+0x1d0>)
 80113f8:	4831      	ldr	r0, [pc, #196]	; (80114c0 <bt_mesh_proxy_adv_start+0x1b4>)
 80113fa:	f7f4 ff9f 	bl	800633c <bt_le_adv_start>
	if (err) {
 80113fe:	b908      	cbnz	r0, 8011404 <bt_mesh_proxy_adv_start+0xf8>
	proxy_adv_enabled = true;
 8011400:	4b32      	ldr	r3, [pc, #200]	; (80114cc <bt_mesh_proxy_adv_start+0x1c0>)
 8011402:	701e      	strb	r6, [r3, #0]
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
 8011404:	f895 6020 	ldrb.w	r6, [r5, #32]
 8011408:	b9d6      	cbnz	r6, 8011440 <bt_mesh_proxy_adv_start+0x134>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
 801140a:	f7fd f8ad 	bl	800e568 <bt_mesh_gatt_proxy_get>
 801140e:	2801      	cmp	r0, #1
 8011410:	4682      	mov	sl, r0
 8011412:	d149      	bne.n	80114a8 <bt_mesh_proxy_adv_start+0x19c>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 8011414:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
 8011416:	482e      	ldr	r0, [pc, #184]	; (80114d0 <bt_mesh_proxy_adv_start+0x1c4>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 8011418:	2359      	movs	r3, #89	; 0x59
 801141a:	fb03 5101 	mla	r1, r3, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
 801141e:	7086      	strb	r6, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
 8011420:	2208      	movs	r2, #8
 8011422:	3151      	adds	r1, #81	; 0x51
 8011424:	3003      	adds	r0, #3
 8011426:	f7ef fa2b 	bl	8000880 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
 801142a:	9600      	str	r6, [sp, #0]
 801142c:	4633      	mov	r3, r6
 801142e:	2203      	movs	r2, #3
 8011430:	492b      	ldr	r1, [pc, #172]	; (80114e0 <bt_mesh_proxy_adv_start+0x1d4>)
 8011432:	4822      	ldr	r0, [pc, #136]	; (80114bc <bt_mesh_proxy_adv_start+0x1b0>)
 8011434:	f7f4 ff82 	bl	800633c <bt_le_adv_start>
	if (err) {
 8011438:	b910      	cbnz	r0, 8011440 <bt_mesh_proxy_adv_start+0x134>
	proxy_adv_enabled = true;
 801143a:	4b24      	ldr	r3, [pc, #144]	; (80114cc <bt_mesh_proxy_adv_start+0x1c0>)
 801143c:	f883 a000 	strb.w	sl, [r3]
	s32_t remaining = K_FOREVER;
 8011440:	2600      	movs	r6, #0
 8011442:	4f28      	ldr	r7, [pc, #160]	; (80114e4 <bt_mesh_proxy_adv_start+0x1d8>)
 8011444:	4635      	mov	r5, r6
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
 8011446:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801144a:	19f3      	adds	r3, r6, r7
 801144c:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
 8011450:	4542      	cmp	r2, r8
 8011452:	d008      	beq.n	8011466 <bt_mesh_proxy_adv_start+0x15a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
 8011454:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8011458:	2b01      	cmp	r3, #1
 801145a:	d003      	beq.n	8011464 <bt_mesh_proxy_adv_start+0x158>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
 801145c:	f7fd f884 	bl	800e568 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
 8011460:	2801      	cmp	r0, #1
 8011462:	d100      	bne.n	8011466 <bt_mesh_proxy_adv_start+0x15a>
			count++;
 8011464:	3501      	adds	r5, #1
 8011466:	36e4      	adds	r6, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
 8011468:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
 801146c:	d1ed      	bne.n	801144a <bt_mesh_proxy_adv_start+0x13e>
	if (subnet_count > 1) {
 801146e:	2d01      	cmp	r5, #1
 8011470:	f77f af54 	ble.w	801131c <bt_mesh_proxy_adv_start+0x10>
		max_timeout = NODE_ID_TIMEOUT / max(subnet_count, 6);
 8011474:	2d06      	cmp	r5, #6
 8011476:	bfb8      	it	lt
 8011478:	2506      	movlt	r5, #6
 801147a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801147e:	fb93 f3f5 	sdiv	r3, r3, r5
		max_timeout = max(max_timeout, K_SECONDS(1));
 8011482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011486:	bfb8      	it	lt
 8011488:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
		if (remaining > max_timeout || remaining < 0) {
 801148c:	42a3      	cmp	r3, r4
 801148e:	db0f      	blt.n	80114b0 <bt_mesh_proxy_adv_start+0x1a4>
 8011490:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011494:	bf08      	it	eq
 8011496:	461c      	moveq	r4, r3
 8011498:	e740      	b.n	801131c <bt_mesh_proxy_adv_start+0x10>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
 801149a:	2300      	movs	r3, #0
 801149c:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0;
 80114a0:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
 80114a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80114a6:	e7ad      	b.n	8011404 <bt_mesh_proxy_adv_start+0xf8>
			return gatt_proxy_advertise(next_sub());
 80114a8:	f7ff fb7a 	bl	8010ba0 <next_sub>
 80114ac:	4605      	mov	r5, r0
 80114ae:	e75f      	b.n	8011370 <bt_mesh_proxy_adv_start+0x64>
		if (remaining > max_timeout || remaining < 0) {
 80114b0:	461c      	mov	r4, r3
 80114b2:	e733      	b.n	801131c <bt_mesh_proxy_adv_start+0x10>
 80114b4:	20001260 	.word	0x20001260
 80114b8:	2000126a 	.word	0x2000126a
 80114bc:	08013e18 	.word	0x08013e18
 80114c0:	08013dbc 	.word	0x08013dbc
 80114c4:	08013e10 	.word	0x08013e10
 80114c8:	08013df8 	.word	0x08013df8
 80114cc:	2000126b 	.word	0x2000126b
 80114d0:	2000638c 	.word	0x2000638c
 80114d4:	20006397 	.word	0x20006397
 80114d8:	2000638f 	.word	0x2000638f
 80114dc:	08013de0 	.word	0x08013de0
 80114e0:	08013dc8 	.word	0x08013dc8
 80114e4:	20005bd0 	.word	0x20005bd0
 80114e8:	2000125c 	.word	0x2000125c

080114ec <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
 80114ec:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
 80114ee:	4c04      	ldr	r4, [pc, #16]	; (8011500 <bt_mesh_proxy_adv_stop+0x14>)
 80114f0:	7823      	ldrb	r3, [r4, #0]
 80114f2:	b11b      	cbz	r3, 80114fc <bt_mesh_proxy_adv_stop+0x10>
		return;
	}

	err = bt_le_adv_stop();
 80114f4:	f7f4 ffbe 	bl	8006474 <bt_le_adv_stop>
	if (err) {
 80114f8:	b900      	cbnz	r0, 80114fc <bt_mesh_proxy_adv_stop+0x10>
		BT_ERR("Failed to stop advertising (err %d)", err);
	} else {
		proxy_adv_enabled = false;
 80114fa:	7020      	strb	r0, [r4, #0]
 80114fc:	bd10      	pop	{r4, pc}
 80114fe:	bf00      	nop
 8011500:	2000126b 	.word	0x2000126b

08011504 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
 8011504:	b508      	push	{r3, lr}
	bt_conn_cb_register(&conn_callbacks);
 8011506:	4806      	ldr	r0, [pc, #24]	; (8011520 <bt_mesh_proxy_init+0x1c>)
 8011508:	f7f5 fa4a 	bl	80069a0 <bt_conn_cb_register>

#if defined(CONFIG_BT_MESH_PB_GATT)
	memcpy(prov_svc_data + 2, bt_mesh_prov_get_uuid(), 16);
 801150c:	f7ff fa9e 	bl	8010a4c <bt_mesh_prov_get_uuid>
 8011510:	2210      	movs	r2, #16
 8011512:	4601      	mov	r1, r0
 8011514:	4803      	ldr	r0, [pc, #12]	; (8011524 <bt_mesh_proxy_init+0x20>)
 8011516:	f7ef f9b3 	bl	8000880 <memcpy>
#endif

	return 0;
}
 801151a:	2000      	movs	r0, #0
 801151c:	bd08      	pop	{r3, pc}
 801151e:	bf00      	nop
 8011520:	2000625c 	.word	0x2000625c
 8011524:	200062f6 	.word	0x200062f6

08011528 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
 8011528:	4b01      	ldr	r3, [pc, #4]	; (8011530 <net_buf_pool_get+0x8>)
 801152a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801152e:	4770      	bx	lr
 8011530:	200064e4 	.word	0x200064e4

08011534 <net_buf_id>:
#define UNINIT_BUF(pool, n) (struct net_buf *)(((u8_t *)(pool->__bufs)) + \
					       ((n) * BUF_SIZE(pool)))

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8011534:	7983      	ldrb	r3, [r0, #6]
	u8_t *pool_start = (u8_t *)pool->__bufs;
 8011536:	4a09      	ldr	r2, [pc, #36]	; (801155c <net_buf_id+0x28>)
 8011538:	eb02 1243 	add.w	r2, r2, r3, lsl #5
	u8_t *buf_ptr = (u8_t *)buf;

	return (buf_ptr - pool_start) / BUF_SIZE(pool);
 801153c:	69d3      	ldr	r3, [r2, #28]
 801153e:	1ac0      	subs	r0, r0, r3
 8011540:	8a93      	ldrh	r3, [r2, #20]
 8011542:	8ad2      	ldrh	r2, [r2, #22]
 8011544:	3303      	adds	r3, #3
 8011546:	3203      	adds	r2, #3
 8011548:	f022 0203 	bic.w	r2, r2, #3
 801154c:	f023 0303 	bic.w	r3, r3, #3
 8011550:	4413      	add	r3, r2
 8011552:	3310      	adds	r3, #16
}
 8011554:	fbb0 f0f3 	udiv	r0, r0, r3
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	200064e4 	.word	0x200064e4

08011560 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	4604      	mov	r4, r0
	__asm__ volatile(
 8011564:	f04f 0310 	mov.w	r3, #16
 8011568:	f3ef 8511 	mrs	r5, BASEPRI
 801156c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 8011570:	8a43      	ldrh	r3, [r0, #18]
 8011572:	b363      	cbz	r3, 80115ce <net_buf_alloc+0x6e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 8011574:	8a02      	ldrh	r2, [r0, #16]
 8011576:	429a      	cmp	r2, r3
 8011578:	d90f      	bls.n	801159a <net_buf_alloc+0x3a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
 801157a:	2100      	movs	r1, #0
 801157c:	f000 fabb 	bl	8011af6 <k_queue_get>
			if (buf) {
 8011580:	b158      	cbz	r0, 801159a <net_buf_alloc+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011582:	f385 8811 	msr	BASEPRI, r5
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
 8011586:	2301      	movs	r3, #1
 8011588:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
 801158a:	2300      	movs	r3, #0
 801158c:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
 801158e:	6003      	str	r3, [r0, #0]
	buf->len   = 0;
 8011590:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
 8011592:	f100 0310 	add.w	r3, r0, #16
 8011596:	6083      	str	r3, [r0, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
 8011598:	e01f      	b.n	80115da <net_buf_alloc+0x7a>
		uninit_count = pool->uninit_count--;
 801159a:	8a66      	ldrh	r6, [r4, #18]
 801159c:	1e73      	subs	r3, r6, #1
 801159e:	8263      	strh	r3, [r4, #18]
 80115a0:	f385 8811 	msr	BASEPRI, r5
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
 80115a4:	8aa1      	ldrh	r1, [r4, #20]
 80115a6:	8ae0      	ldrh	r0, [r4, #22]
 80115a8:	8a23      	ldrh	r3, [r4, #16]
 80115aa:	3003      	adds	r0, #3
 80115ac:	1cca      	adds	r2, r1, #3
 80115ae:	f022 0203 	bic.w	r2, r2, #3
 80115b2:	f020 0003 	bic.w	r0, r0, #3
 80115b6:	4410      	add	r0, r2
 80115b8:	69e2      	ldr	r2, [r4, #28]
 80115ba:	1b9b      	subs	r3, r3, r6
 80115bc:	3010      	adds	r0, #16
 80115be:	fb03 2000 	mla	r0, r3, r0, r2
	return pool - _net_buf_pool_list;
 80115c2:	4b06      	ldr	r3, [pc, #24]	; (80115dc <net_buf_alloc+0x7c>)
	buf->size = pool->buf_size;
 80115c4:	81c1      	strh	r1, [r0, #14]
	return pool - _net_buf_pool_list;
 80115c6:	1ae4      	subs	r4, r4, r3
 80115c8:	1164      	asrs	r4, r4, #5
	buf->pool_id = pool_id(pool);
 80115ca:	7184      	strb	r4, [r0, #6]
		goto success;
 80115cc:	e7db      	b.n	8011586 <net_buf_alloc+0x26>
 80115ce:	f385 8811 	msr	BASEPRI, r5
	buf = k_lifo_get(&pool->free, timeout);
 80115d2:	f000 fa90 	bl	8011af6 <k_queue_get>
	if (!buf) {
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d1d5      	bne.n	8011586 <net_buf_alloc+0x26>
}
 80115da:	bd70      	pop	{r4, r5, r6, pc}
 80115dc:	200064e4 	.word	0x200064e4

080115e0 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
 80115e4:	f000 fa87 	bl	8011af6 <k_queue_get>
	if (!buf) {
 80115e8:	4605      	mov	r5, r0
 80115ea:	b128      	cbz	r0, 80115f8 <net_buf_get+0x18>
 80115ec:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 80115ee:	7963      	ldrb	r3, [r4, #5]
 80115f0:	f013 0301 	ands.w	r3, r3, #1
 80115f4:	d102      	bne.n	80115fc <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 80115f6:	6023      	str	r3, [r4, #0]

	return buf;
}
 80115f8:	4628      	mov	r0, r5
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 80115fc:	2100      	movs	r1, #0
 80115fe:	4630      	mov	r0, r6
 8011600:	f000 fa79 	bl	8011af6 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
 8011604:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
 8011606:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
 8011608:	f023 0301 	bic.w	r3, r3, #1
 801160c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 801160e:	4604      	mov	r4, r0
 8011610:	e7ed      	b.n	80115ee <net_buf_get+0xe>

08011612 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
 8011612:	f100 0310 	add.w	r3, r0, #16
 8011616:	4419      	add	r1, r3
 8011618:	6081      	str	r1, [r0, #8]
 801161a:	4770      	bx	lr

0801161c <net_buf_slist_put>:
}

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
 801161c:	b510      	push	{r4, lr}
	unsigned int key;

	NET_BUF_ASSERT(list);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 801161e:	460b      	mov	r3, r1
 8011620:	681c      	ldr	r4, [r3, #0]
 8011622:	b964      	cbnz	r4, 801163e <net_buf_slist_put+0x22>
	__asm__ volatile(
 8011624:	f04f 0210 	mov.w	r2, #16
 8011628:	f3ef 8411 	mrs	r4, BASEPRI
 801162c:	f382 8811 	msr	BASEPRI, r2
	if (!list->tail) {
 8011630:	6842      	ldr	r2, [r0, #4]
 8011632:	b952      	cbnz	r2, 801164a <net_buf_slist_put+0x2e>
		list->head = (sys_snode_t *)head;
 8011634:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
 8011636:	6043      	str	r3, [r0, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011638:	f384 8811 	msr	BASEPRI, r4
 801163c:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
 801163e:	795a      	ldrb	r2, [r3, #5]
 8011640:	f042 0201 	orr.w	r2, r2, #1
 8011644:	715a      	strb	r2, [r3, #5]
 8011646:	4623      	mov	r3, r4
 8011648:	e7ea      	b.n	8011620 <net_buf_slist_put+0x4>
		list->tail->next = (sys_snode_t *)head;
 801164a:	6011      	str	r1, [r2, #0]
 801164c:	e7f3      	b.n	8011636 <net_buf_slist_put+0x1a>

0801164e <net_buf_slist_get>:
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
 801164e:	b570      	push	{r4, r5, r6, lr}
 8011650:	4603      	mov	r3, r0
	__asm__ volatile(
 8011652:	f04f 0210 	mov.w	r2, #16
 8011656:	f3ef 8111 	mrs	r1, BASEPRI
 801165a:	f382 8811 	msr	BASEPRI, r2
 801165e:	6800      	ldr	r0, [r0, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8011660:	b128      	cbz	r0, 801166e <net_buf_slist_get+0x20>
	if (list->tail == node) {
 8011662:	685c      	ldr	r4, [r3, #4]
	list->head = node->next;
 8011664:	6802      	ldr	r2, [r0, #0]
 8011666:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
 8011668:	42a0      	cmp	r0, r4
		list->tail = list->head;
 801166a:	bf08      	it	eq
 801166c:	605a      	streq	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801166e:	f381 8811 	msr	BASEPRI, r1

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
 8011672:	b128      	cbz	r0, 8011680 <net_buf_slist_get+0x32>
 8011674:	4602      	mov	r2, r0
		return NULL;
	}

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 8011676:	7951      	ldrb	r1, [r2, #5]
 8011678:	f011 0101 	ands.w	r1, r1, #1
 801167c:	d101      	bne.n	8011682 <net_buf_slist_get+0x34>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
 801167e:	6011      	str	r1, [r2, #0]

	return buf;
}
 8011680:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
 8011682:	f04f 0110 	mov.w	r1, #16
 8011686:	f3ef 8511 	mrs	r5, BASEPRI
 801168a:	f381 8811 	msr	BASEPRI, r1
 801168e:	6819      	ldr	r1, [r3, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8011690:	b129      	cbz	r1, 801169e <net_buf_slist_get+0x50>
	if (list->tail == node) {
 8011692:	685e      	ldr	r6, [r3, #4]
	list->head = node->next;
 8011694:	680c      	ldr	r4, [r1, #0]
 8011696:	601c      	str	r4, [r3, #0]
	if (list->tail == node) {
 8011698:	42b1      	cmp	r1, r6
		list->tail = list->head;
 801169a:	bf08      	it	eq
 801169c:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
 801169e:	6011      	str	r1, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80116a0:	f385 8811 	msr	BASEPRI, r5
		frag->flags &= ~NET_BUF_FRAGS;
 80116a4:	7951      	ldrb	r1, [r2, #5]
 80116a6:	f021 0101 	bic.w	r1, r1, #1
 80116aa:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
 80116ac:	6812      	ldr	r2, [r2, #0]
 80116ae:	e7e2      	b.n	8011676 <net_buf_slist_get+0x28>

080116b0 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
 80116b0:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
 80116b2:	460a      	mov	r2, r1
 80116b4:	6814      	ldr	r4, [r2, #0]
 80116b6:	b914      	cbnz	r4, 80116be <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
 80116b8:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
 80116ba:	f000 ba00 	b.w	8011abe <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
 80116be:	7953      	ldrb	r3, [r2, #5]
 80116c0:	f043 0301 	orr.w	r3, r3, #1
 80116c4:	7153      	strb	r3, [r2, #5]
 80116c6:	4622      	mov	r2, r4
 80116c8:	e7f4      	b.n	80116b4 <net_buf_put+0x4>
	...

080116cc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 80116cc:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
 80116ce:	4c0c      	ldr	r4, [pc, #48]	; (8011700 <net_buf_unref+0x34>)
	while (buf) {
 80116d0:	b900      	cbnz	r0, 80116d4 <net_buf_unref+0x8>
 80116d2:	bd38      	pop	{r3, r4, r5, pc}
		if (--buf->ref > 0) {
 80116d4:	7903      	ldrb	r3, [r0, #4]
		struct net_buf *frags = buf->frags;
 80116d6:	6805      	ldr	r5, [r0, #0]
		if (--buf->ref > 0) {
 80116d8:	3b01      	subs	r3, #1
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	7103      	strb	r3, [r0, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1f7      	bne.n	80116d2 <net_buf_unref+0x6>
		buf->frags = NULL;
 80116e2:	6003      	str	r3, [r0, #0]
		pool = net_buf_pool_get(buf->pool_id);
 80116e4:	7983      	ldrb	r3, [r0, #6]
		if (pool->destroy) {
 80116e6:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80116ea:	6992      	ldr	r2, [r2, #24]
 80116ec:	b112      	cbz	r2, 80116f4 <net_buf_unref+0x28>
			pool->destroy(buf);
 80116ee:	4790      	blx	r2
{
 80116f0:	4628      	mov	r0, r5
 80116f2:	e7ed      	b.n	80116d0 <net_buf_unref+0x4>
	k_lifo_put(&pool->free, buf);
 80116f4:	4601      	mov	r1, r0
 80116f6:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 80116fa:	f000 f9dc 	bl	8011ab6 <k_queue_prepend>
 80116fe:	e7f7      	b.n	80116f0 <net_buf_unref+0x24>
 8011700:	200064e4 	.word	0x200064e4

08011704 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
 8011704:	7903      	ldrb	r3, [r0, #4]
 8011706:	3301      	adds	r3, #1
 8011708:	7103      	strb	r3, [r0, #4]
	return buf;
}
 801170a:	4770      	bx	lr

0801170c <net_buf_simple_add>:
	return buf->data + buf->len;
 801170c:	8883      	ldrh	r3, [r0, #4]
 801170e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 8011710:	4419      	add	r1, r3
 8011712:	8081      	strh	r1, [r0, #4]
	return tail;
}
 8011714:	18d0      	adds	r0, r2, r3
 8011716:	4770      	bx	lr

08011718 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
 8011718:	b430      	push	{r4, r5}
 801171a:	8883      	ldrh	r3, [r0, #4]
 801171c:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
 801171e:	189d      	adds	r5, r3, r2
 8011720:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
 8011722:	18e0      	adds	r0, r4, r3
}
 8011724:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
 8011726:	f7ef b8ab 	b.w	8000880 <memcpy>

0801172a <net_buf_simple_add_u8>:
 801172a:	8883      	ldrh	r3, [r0, #4]
 801172c:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
 801172e:	b510      	push	{r4, lr}
	buf->len += len;
 8011730:	1c5c      	adds	r4, r3, #1
 8011732:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
 8011734:	54d1      	strb	r1, [r2, r3]

	return u8;
}
 8011736:	18d0      	adds	r0, r2, r3
 8011738:	bd10      	pop	{r4, pc}

0801173a <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
 801173a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801173c:	ab02      	add	r3, sp, #8
 801173e:	8884      	ldrh	r4, [r0, #4]
 8011740:	f823 1d02 	strh.w	r1, [r3, #-2]!
 8011744:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
 8011746:	1ca2      	adds	r2, r4, #2
 8011748:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 801174a:	4619      	mov	r1, r3
 801174c:	2202      	movs	r2, #2
 801174e:	1928      	adds	r0, r5, r4
 8011750:	f7ef f896 	bl	8000880 <memcpy>
}
 8011754:	b003      	add	sp, #12
 8011756:	bd30      	pop	{r4, r5, pc}

08011758 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
 8011758:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
 801175a:	020b      	lsls	r3, r1, #8
 801175c:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 8011760:	a902      	add	r1, sp, #8
 8011762:	6804      	ldr	r4, [r0, #0]
 8011764:	f821 3d02 	strh.w	r3, [r1, #-2]!
 8011768:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
 801176a:	1c9a      	adds	r2, r3, #2
 801176c:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 801176e:	2202      	movs	r2, #2
 8011770:	18e0      	adds	r0, r4, r3
 8011772:	f7ef f885 	bl	8000880 <memcpy>
}
 8011776:	b002      	add	sp, #8
 8011778:	bd10      	pop	{r4, pc}

0801177a <net_buf_simple_add_be32>:
	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
 801177a:	b513      	push	{r0, r1, r4, lr}
 801177c:	ba0b      	rev	r3, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
 801177e:	a902      	add	r1, sp, #8
 8011780:	6804      	ldr	r4, [r0, #0]
 8011782:	f841 3d04 	str.w	r3, [r1, #-4]!
 8011786:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
 8011788:	1d1a      	adds	r2, r3, #4
 801178a:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
 801178c:	2204      	movs	r2, #4
 801178e:	18e0      	adds	r0, r4, r3
 8011790:	f7ef f876 	bl	8000880 <memcpy>
}
 8011794:	b002      	add	sp, #8
 8011796:	bd10      	pop	{r4, pc}

08011798 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
 8011798:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
 801179a:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
 801179c:	1a5b      	subs	r3, r3, r1
	buf->len += len;
 801179e:	4411      	add	r1, r2
	buf->data -= len;
 80117a0:	6003      	str	r3, [r0, #0]
	buf->len += len;
 80117a2:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	4770      	bx	lr

080117a8 <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
 80117a8:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
 80117aa:	020b      	lsls	r3, r1, #8
 80117ac:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
 80117b0:	a902      	add	r1, sp, #8
	buf->len += len;
 80117b2:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
 80117b4:	f821 3d02 	strh.w	r3, [r1, #-2]!
	buf->data -= len;
 80117b8:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
 80117ba:	3202      	adds	r2, #2
	buf->data -= len;
 80117bc:	3b02      	subs	r3, #2
 80117be:	6003      	str	r3, [r0, #0]
	buf->len += len;
 80117c0:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
 80117c2:	2202      	movs	r2, #2
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7ef f85b 	bl	8000880 <memcpy>
}
 80117ca:	b003      	add	sp, #12
 80117cc:	f85d fb04 	ldr.w	pc, [sp], #4

080117d0 <net_buf_simple_push_u8>:
	buf->data -= len;
 80117d0:	6802      	ldr	r2, [r0, #0]
 80117d2:	1e53      	subs	r3, r2, #1
 80117d4:	6003      	str	r3, [r0, #0]
	buf->len += len;
 80117d6:	8883      	ldrh	r3, [r0, #4]
 80117d8:	3301      	adds	r3, #1
 80117da:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
 80117dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80117e0:	4770      	bx	lr

080117e2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
 80117e2:	8883      	ldrh	r3, [r0, #4]
 80117e4:	1a5b      	subs	r3, r3, r1
 80117e6:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
 80117e8:	6803      	ldr	r3, [r0, #0]
 80117ea:	4419      	add	r1, r3
 80117ec:	6001      	str	r1, [r0, #0]
}
 80117ee:	4608      	mov	r0, r1
 80117f0:	4770      	bx	lr

080117f2 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
 80117f2:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
 80117f4:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
 80117f6:	2101      	movs	r1, #1
	val = buf->data[0];
 80117f8:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
 80117fa:	f7ff fff2 	bl	80117e2 <net_buf_simple_pull>

	return val;
}
 80117fe:	4610      	mov	r0, r2
 8011800:	bd08      	pop	{r3, pc}

08011802 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
 8011802:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
 8011804:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011806:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
 8011808:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 801180a:	f7ff ffea 	bl	80117e2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
 801180e:	4610      	mov	r0, r2
 8011810:	bd08      	pop	{r3, pc}

08011812 <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
 8011812:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
 8011814:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011816:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
 8011818:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 801181a:	f7ff ffe2 	bl	80117e2 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
 801181e:	0210      	lsls	r0, r2, #8
 8011820:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
 8011824:	b280      	uxth	r0, r0
 8011826:	bd08      	pop	{r3, pc}

08011828 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
 8011828:	b508      	push	{r3, lr}
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
 801182a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
 801182c:	2104      	movs	r1, #4
	val = UNALIGNED_GET((u32_t *)buf->data);
 801182e:	681a      	ldr	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
 8011830:	f7ff ffd7 	bl	80117e2 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
 8011834:	0610      	lsls	r0, r2, #24
 8011836:	0a13      	lsrs	r3, r2, #8
 8011838:	ea40 6012 	orr.w	r0, r0, r2, lsr #24
 801183c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011840:	0212      	lsls	r2, r2, #8
 8011842:	4318      	orrs	r0, r3
 8011844:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
}
 8011848:	4310      	orrs	r0, r2
 801184a:	bd08      	pop	{r3, pc}

0801184c <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 801184c:	f100 0308 	add.w	r3, r0, #8
 8011850:	6800      	ldr	r0, [r0, #0]
}
 8011852:	1ac0      	subs	r0, r0, r3
 8011854:	4770      	bx	lr

08011856 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
 8011856:	6802      	ldr	r2, [r0, #0]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8011858:	88c3      	ldrh	r3, [r0, #6]
	return buf->data - buf->__buf;
 801185a:	f100 0108 	add.w	r1, r0, #8
 801185e:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
 8011860:	8880      	ldrh	r0, [r0, #4]
 8011862:	1a9b      	subs	r3, r3, r2
}
 8011864:	1a18      	subs	r0, r3, r0
 8011866:	4770      	bx	lr

08011868 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
 8011868:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
 801186a:	4b08      	ldr	r3, [pc, #32]	; (801188c <_sys_device_do_config_level+0x24>)
 801186c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8011870:	3001      	adds	r0, #1
 8011872:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8011876:	4620      	mov	r0, r4
 8011878:	42a8      	cmp	r0, r5
 801187a:	f104 040c 	add.w	r4, r4, #12
 801187e:	d300      	bcc.n	8011882 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
 8011880:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
 8011882:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	4798      	blx	r3
 801188a:	e7f4      	b.n	8011876 <_sys_device_do_config_level+0xe>
 801188c:	08013e24 	.word	0x08013e24

08011890 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
 8011890:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
 8011892:	4c0b      	ldr	r4, [pc, #44]	; (80118c0 <device_get_binding+0x30>)
 8011894:	4e0b      	ldr	r6, [pc, #44]	; (80118c4 <device_get_binding+0x34>)
{
 8011896:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
 8011898:	42b4      	cmp	r4, r6
 801189a:	d101      	bne.n	80118a0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
 801189c:	2400      	movs	r4, #0
 801189e:	e00c      	b.n	80118ba <device_get_binding+0x2a>
		if (!info->driver_api) {
 80118a0:	6863      	ldr	r3, [r4, #4]
 80118a2:	b90b      	cbnz	r3, 80118a8 <device_get_binding+0x18>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80118a4:	340c      	adds	r4, #12
 80118a6:	e7f7      	b.n	8011898 <device_get_binding+0x8>
		if (name == info->config->name) {
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	6819      	ldr	r1, [r3, #0]
 80118ac:	42a9      	cmp	r1, r5
 80118ae:	d004      	beq.n	80118ba <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
 80118b0:	4628      	mov	r0, r5
 80118b2:	f7ee ffc3 	bl	800083c <strcmp>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d1f4      	bne.n	80118a4 <device_get_binding+0x14>
}
 80118ba:	4620      	mov	r0, r4
 80118bc:	bd70      	pop	{r4, r5, r6, pc}
 80118be:	bf00      	nop
 80118c0:	200063a8 	.word	0x200063a8
 80118c4:	20006474 	.word	0x20006474

080118c8 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
 80118c8:	4770      	bx	lr
	...

080118cc <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
 80118cc:	4802      	ldr	r0, [pc, #8]	; (80118d8 <_bss_zero+0xc>)
 80118ce:	4a03      	ldr	r2, [pc, #12]	; (80118dc <_bss_zero+0x10>)
 80118d0:	2100      	movs	r1, #0
 80118d2:	1a12      	subs	r2, r2, r0
 80118d4:	f7ef b800 	b.w	80008d8 <memset>
 80118d8:	20000000 	.word	0x20000000
 80118dc:	200014f8 	.word	0x200014f8

080118e0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
 80118e0:	4802      	ldr	r0, [pc, #8]	; (80118ec <_data_copy+0xc>)
 80118e2:	4a03      	ldr	r2, [pc, #12]	; (80118f0 <_data_copy+0x10>)
 80118e4:	4903      	ldr	r1, [pc, #12]	; (80118f4 <_data_copy+0x14>)
 80118e6:	1a12      	subs	r2, r2, r0
 80118e8:	f7ee bfca 	b.w	8000880 <memcpy>
 80118ec:	20005668 	.word	0x20005668
 80118f0:	200065a4 	.word	0x200065a4
 80118f4:	08013e40 	.word	0x08013e40

080118f8 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
 80118f8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80118fa:	2002      	movs	r0, #2
 80118fc:	f7ff ffb4 	bl	8011868 <_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8011900:	2003      	movs	r0, #3
 8011902:	f7ff ffb1 	bl	8011868 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
 8011906:	f000 fde1 	bl	80124cc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
 801190a:	f7ef f871 	bl	80009f0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
 801190e:	4a03      	ldr	r2, [pc, #12]	; (801191c <_main+0x24>)
 8011910:	7a13      	ldrb	r3, [r2, #8]
 8011912:	f023 0301 	bic.w	r3, r3, #1
 8011916:	7213      	strb	r3, [r2, #8]
 8011918:	bd08      	pop	{r3, pc}
 801191a:	bf00      	nop
 801191c:	200012d8 	.word	0x200012d8

08011920 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	4d32      	ldr	r5, [pc, #200]	; (80119f0 <_Cstart+0xd0>)
 8011926:	af06      	add	r7, sp, #24
	_IntLibInit();
 8011928:	f7f1 f98e 	bl	8002c48 <_IntLibInit>
 801192c:	231c      	movs	r3, #28
 801192e:	195a      	adds	r2, r3, r5
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8011930:	515a      	str	r2, [r3, r5]
 8011932:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
 8011934:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
	list->tail = (sys_dnode_t *)list;
 8011938:	6052      	str	r2, [r2, #4]
 801193a:	d1f8      	bne.n	801192e <_Cstart+0xe>
	_ready_q.cache = _main_thread;
 801193c:	4e2d      	ldr	r6, [pc, #180]	; (80119f4 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
 801193e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8011a1c <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
 8011942:	616e      	str	r6, [r5, #20]
	_setup_new_thread(_main_thread, _main_stack,
 8011944:	2400      	movs	r4, #0
 8011946:	f04f 0901 	mov.w	r9, #1
 801194a:	4643      	mov	r3, r8
 801194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011950:	4929      	ldr	r1, [pc, #164]	; (80119f8 <_Cstart+0xd8>)
 8011952:	f8cd 9010 	str.w	r9, [sp, #16]
 8011956:	4630      	mov	r0, r6
 8011958:	9403      	str	r4, [sp, #12]
 801195a:	9402      	str	r4, [sp, #8]
 801195c:	9401      	str	r4, [sp, #4]
 801195e:	9400      	str	r4, [sp, #0]
 8011960:	f000 fd0a 	bl	8012378 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011964:	7a73      	ldrb	r3, [r6, #9]
	_add_thread_to_ready_q(_main_thread);
 8011966:	4630      	mov	r0, r6
 8011968:	f023 0304 	bic.w	r3, r3, #4
 801196c:	7273      	strb	r3, [r6, #9]
 801196e:	f000 f909 	bl	8011b84 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
 8011972:	230f      	movs	r3, #15
 8011974:	9303      	str	r3, [sp, #12]
 8011976:	4921      	ldr	r1, [pc, #132]	; (80119fc <_Cstart+0xdc>)
 8011978:	f8cd 9010 	str.w	r9, [sp, #16]
 801197c:	9402      	str	r4, [sp, #8]
 801197e:	9401      	str	r4, [sp, #4]
 8011980:	9400      	str	r4, [sp, #0]
 8011982:	4b1f      	ldr	r3, [pc, #124]	; (8011a00 <_Cstart+0xe0>)
 8011984:	481f      	ldr	r0, [pc, #124]	; (8011a04 <_Cstart+0xe4>)
 8011986:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801198a:	f000 fcf5 	bl	8012378 <_setup_new_thread>
 801198e:	4b1d      	ldr	r3, [pc, #116]	; (8011a04 <_Cstart+0xe4>)
 8011990:	4a1c      	ldr	r2, [pc, #112]	; (8011a04 <_Cstart+0xe4>)
 8011992:	7a5b      	ldrb	r3, [r3, #9]
 8011994:	f023 0304 	bic.w	r3, r3, #4
 8011998:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(_idle_thread);
 801199a:	4610      	mov	r0, r2
 801199c:	f000 f8f2 	bl	8011b84 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
 80119a0:	4b19      	ldr	r3, [pc, #100]	; (8011a08 <_Cstart+0xe8>)
 80119a2:	60eb      	str	r3, [r5, #12]
	list->tail = (sys_dnode_t *)list;
 80119a4:	612b      	str	r3, [r5, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
 80119a6:	4b19      	ldr	r3, [pc, #100]	; (8011a0c <_Cstart+0xec>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
 80119a8:	f383 8808 	msr	MSP, r3
 80119ac:	4b18      	ldr	r3, [pc, #96]	; (8011a10 <_Cstart+0xf0>)
 80119ae:	22f0      	movs	r2, #240	; 0xf0
 80119b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80119b4:	77dc      	strb	r4, [r3, #31]
 80119b6:	761c      	strb	r4, [r3, #24]
 80119b8:	765c      	strb	r4, [r3, #25]
 80119ba:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80119bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119be:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 80119c2:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
 80119c4:	f7f1 fae0 	bl	8002f88 <_FaultInit>
	_CpuIdleInit();
 80119c8:	f7f1 fb36 	bl	8003038 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80119cc:	4620      	mov	r0, r4
 80119ce:	f7ff ff4b 	bl	8011868 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80119d2:	4648      	mov	r0, r9
 80119d4:	f7ff ff48 	bl	8011868 <_sys_device_do_config_level>
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 80119d8:	4b0e      	ldr	r3, [pc, #56]	; (8011a14 <_Cstart+0xf4>)

	_current = main_thread;
 80119da:	60ae      	str	r6, [r5, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
 80119dc:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
 80119e0:	4a0d      	ldr	r2, [pc, #52]	; (8011a18 <_Cstart+0xf8>)
 80119e2:	f383 8809 	msr	PSP, r3
 80119e6:	2100      	movs	r1, #0
 80119e8:	f381 8811 	msr	BASEPRI, r1
 80119ec:	4640      	mov	r0, r8
 80119ee:	4710      	bx	r2
 80119f0:	20001340 	.word	0x20001340
 80119f4:	200012d8 	.word	0x200012d8
 80119f8:	20004328 	.word	0x20004328
 80119fc:	20004528 	.word	0x20004528
 8011a00:	08012b67 	.word	0x08012b67
 8011a04:	20001270 	.word	0x20001270
 8011a08:	2000134c 	.word	0x2000134c
 8011a0c:	20004e68 	.word	0x20004e68
 8011a10:	e000ed00 	.word	0xe000ed00
 8011a14:	20004528 	.word	0x20004528
 8011a18:	08012311 	.word	0x08012311
 8011a1c:	080118f9 	.word	0x080118f9

08011a20 <k_queue_init>:
	list->head = NULL;
 8011a20:	2300      	movs	r3, #0
 8011a22:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 8011a24:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
 8011a26:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
 8011a2a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8011a2c:	60c3      	str	r3, [r0, #12]
 8011a2e:	4770      	bx	lr

08011a30 <k_queue_cancel_wait>:
	return 0;
#endif
}

void k_queue_cancel_wait(struct k_queue *queue)
{
 8011a30:	b510      	push	{r4, lr}
	__asm__ volatile(
 8011a32:	f04f 0310 	mov.w	r3, #16
 8011a36:	f3ef 8411 	mrs	r4, BASEPRI
 8011a3a:	f383 8811 	msr	BASEPRI, r3
	return _handle_obj_poll_events(&queue->poll_events, state);
 8011a3e:	2100      	movs	r1, #0
 8011a40:	3008      	adds	r0, #8
 8011a42:	f001 f855 	bl	8012af0 <_handle_obj_poll_events>
			(void)_Swap(key);
			return;
		}
	}
#else
	if (handle_poll_events(queue, K_POLL_STATE_NOT_READY)) {
 8011a46:	b130      	cbz	r0, 8011a56 <k_queue_cancel_wait+0x26>
	_update_time_slice_before_swap();
 8011a48:	f000 fa68 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8011a4c:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
 8011a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a52:	f7f1 b945 	b.w	8002ce0 <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011a56:	f384 8811 	msr	BASEPRI, r4
 8011a5a:	bd10      	pop	{r4, pc}

08011a5c <k_queue_insert>:

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
 8011a5c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8011a5e:	f04f 0310 	mov.w	r3, #16
 8011a62:	f3ef 8411 	mrs	r4, BASEPRI
 8011a66:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
 8011a6a:	b931      	cbnz	r1, 8011a7a <k_queue_insert+0x1e>
	node->next = list->head;
 8011a6c:	6803      	ldr	r3, [r0, #0]
 8011a6e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
 8011a70:	6843      	ldr	r3, [r0, #4]
	list->head = node;
 8011a72:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
 8011a74:	b943      	cbnz	r3, 8011a88 <k_queue_insert+0x2c>
		list->tail = node;
 8011a76:	6042      	str	r2, [r0, #4]
 8011a78:	e006      	b.n	8011a88 <k_queue_insert+0x2c>
	} else if (!prev->next) {
 8011a7a:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
 8011a7c:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
 8011a7e:	b98b      	cbnz	r3, 8011aa4 <k_queue_insert+0x48>
	if (!list->tail) {
 8011a80:	6843      	ldr	r3, [r0, #4]
 8011a82:	b96b      	cbnz	r3, 8011aa0 <k_queue_insert+0x44>
		list->tail = node;
 8011a84:	6042      	str	r2, [r0, #4]
		list->head = node;
 8011a86:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
 8011a88:	2104      	movs	r1, #4
 8011a8a:	3008      	adds	r0, #8
 8011a8c:	f001 f830 	bl	8012af0 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
 8011a90:	b150      	cbz	r0, 8011aa8 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
 8011a92:	f000 fa43 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8011a96:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
 8011a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9c:	f7f1 b920 	b.w	8002ce0 <__swap>
		list->tail->next = node;
 8011aa0:	601a      	str	r2, [r3, #0]
 8011aa2:	e7e8      	b.n	8011a76 <k_queue_insert+0x1a>
		prev->next = node;
 8011aa4:	600a      	str	r2, [r1, #0]
 8011aa6:	e7ef      	b.n	8011a88 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011aa8:	f384 8811 	msr	BASEPRI, r4
 8011aac:	bd10      	pop	{r4, pc}

08011aae <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
 8011aae:	460a      	mov	r2, r1
 8011ab0:	6841      	ldr	r1, [r0, #4]
 8011ab2:	f7ff bfd3 	b.w	8011a5c <k_queue_insert>

08011ab6 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
 8011ab6:	460a      	mov	r2, r1
 8011ab8:	2100      	movs	r1, #0
 8011aba:	f7ff bfcf 	b.w	8011a5c <k_queue_insert>

08011abe <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
 8011abe:	b510      	push	{r4, lr}
	__asm__ volatile(
 8011ac0:	f04f 0310 	mov.w	r3, #16
 8011ac4:	f3ef 8411 	mrs	r4, BASEPRI
 8011ac8:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
 8011acc:	6843      	ldr	r3, [r0, #4]
 8011ace:	b96b      	cbnz	r3, 8011aec <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
 8011ad0:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
 8011ad2:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
 8011ad4:	2104      	movs	r1, #4
 8011ad6:	3008      	adds	r0, #8
 8011ad8:	f001 f80a 	bl	8012af0 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
 8011adc:	b140      	cbz	r0, 8011af0 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
 8011ade:	f000 fa1d 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8011ae2:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
 8011ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae8:	f7f1 b8fa 	b.w	8002ce0 <__swap>
		list->tail->next = (sys_snode_t *)head;
 8011aec:	6019      	str	r1, [r3, #0]
 8011aee:	e7f0      	b.n	8011ad2 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011af0:	f384 8811 	msr	BASEPRI, r4
 8011af4:	bd10      	pop	{r4, pc}

08011af6 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
 8011af6:	b530      	push	{r4, r5, lr}
 8011af8:	4604      	mov	r4, r0
 8011afa:	b087      	sub	sp, #28
 8011afc:	460d      	mov	r5, r1
	__asm__ volatile(
 8011afe:	f04f 0210 	mov.w	r2, #16
 8011b02:	f3ef 8311 	mrs	r3, BASEPRI
 8011b06:	f382 8811 	msr	BASEPRI, r2
 8011b0a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
 8011b0c:	b152      	cbz	r2, 8011b24 <k_queue_get+0x2e>
	list->head = node->next;
 8011b0e:	6811      	ldr	r1, [r2, #0]
 8011b10:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
 8011b12:	6840      	ldr	r0, [r0, #4]
 8011b14:	4282      	cmp	r2, r0
		list->tail = list->head;
 8011b16:	bf08      	it	eq
 8011b18:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011b1a:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
 8011b1e:	4610      	mov	r0, r2
 8011b20:	b007      	add	sp, #28
 8011b22:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
 8011b24:	b919      	cbnz	r1, 8011b2e <k_queue_get+0x38>
 8011b26:	f383 8811 	msr	BASEPRI, r3
			return NULL;
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	e7f7      	b.n	8011b1e <k_queue_get+0x28>
 8011b2e:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
 8011b32:	2104      	movs	r1, #4
 8011b34:	4603      	mov	r3, r0
 8011b36:	eb0d 0001 	add.w	r0, sp, r1
 8011b3a:	f000 ff21 	bl	8012980 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
 8011b3e:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
 8011b42:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
 8011b44:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
 8011b48:	2101      	movs	r1, #1
 8011b4a:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
 8011b4c:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
 8011b50:	f000 ff2a 	bl	80129a8 <k_poll>
		if (err) {
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1e8      	bne.n	8011b2a <k_queue_get+0x34>
	__asm__ volatile(
 8011b58:	f04f 0310 	mov.w	r3, #16
 8011b5c:	f3ef 8111 	mrs	r1, BASEPRI
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
 8011b66:	b12a      	cbz	r2, 8011b74 <k_queue_get+0x7e>
	if (list->tail == node) {
 8011b68:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
 8011b6a:	6813      	ldr	r3, [r2, #0]
 8011b6c:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
 8011b6e:	4282      	cmp	r2, r0
		list->tail = list->head;
 8011b70:	bf08      	it	eq
 8011b72:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011b74:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
 8011b78:	2a00      	cmp	r2, #0
 8011b7a:	d1d0      	bne.n	8011b1e <k_queue_get+0x28>
 8011b7c:	1c6b      	adds	r3, r5, #1
 8011b7e:	d0de      	beq.n	8011b3e <k_queue_get+0x48>
 8011b80:	e7d3      	b.n	8011b2a <k_queue_get+0x34>
	...

08011b84 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
 8011b84:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
 8011b86:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
 8011b8a:	4911      	ldr	r1, [pc, #68]	; (8011bd0 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
 8011b8c:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
 8011b90:	1162      	asrs	r2, r4, #5
 8011b92:	3204      	adds	r2, #4
 8011b94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
 8011b98:	f004 051f 	and.w	r5, r4, #31
 8011b9c:	2401      	movs	r4, #1
 8011b9e:	40ac      	lsls	r4, r5
 8011ba0:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011ba2:	3313      	adds	r3, #19
	*bmap |= _get_ready_q_prio_bit(prio);
 8011ba4:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011ba6:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
 8011ba8:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011baa:	1d1a      	adds	r2, r3, #4
 8011bac:	440a      	add	r2, r1
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
	node->prev = list->tail;
 8011bae:	440b      	add	r3, r1
	node->next = list;
 8011bb0:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
 8011bb2:	689a      	ldr	r2, [r3, #8]
 8011bb4:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
 8011bb6:	689a      	ldr	r2, [r3, #8]
 8011bb8:	6010      	str	r0, [r2, #0]
	list->tail = node;
 8011bba:	6098      	str	r0, [r3, #8]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
 8011bbc:	694b      	ldr	r3, [r1, #20]
 8011bbe:	f990 400a 	ldrsb.w	r4, [r0, #10]
 8011bc2:	f993 200a 	ldrsb.w	r2, [r3, #10]
 8011bc6:	4294      	cmp	r4, r2
 8011bc8:	bfa8      	it	ge
 8011bca:	4618      	movge	r0, r3
 8011bcc:	6148      	str	r0, [r1, #20]
 8011bce:	bd30      	pop	{r4, r5, pc}
 8011bd0:	20001340 	.word	0x20001340

08011bd4 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011bd4:	7a42      	ldrb	r2, [r0, #9]
 8011bd6:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 8011bda:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011bde:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 8011be0:	d104      	bne.n	8011bec <_ready_thread+0x18>
 8011be2:	6a03      	ldr	r3, [r0, #32]
 8011be4:	3301      	adds	r3, #1
 8011be6:	d101      	bne.n	8011bec <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
 8011be8:	f7ff bfcc 	b.w	8011b84 <_add_thread_to_ready_q>
 8011bec:	4770      	bx	lr
	...

08011bf0 <_add_timeout>:

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
 8011bf0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(timeout_in_ticks >= 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
 8011bf2:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
 8011bf4:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 8011bf6:	60ca      	str	r2, [r1, #12]
	/* If timer is submitted to expire ASAP with
	 * timeout_in_ticks (duration) as zero value,
	 * then handle timeout immedately without going
	 * through timeout queue.
	 */
	if (!timeout_in_ticks) {
 8011bf8:	bb13      	cbnz	r3, 8011c40 <_add_timeout+0x50>
	__asm__ volatile(
 8011bfa:	f04f 0210 	mov.w	r2, #16
 8011bfe:	f3ef 8411 	mrs	r4, BASEPRI
 8011c02:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 8011c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c0a:	610a      	str	r2, [r1, #16]
	if (thread) {
 8011c0c:	b180      	cbz	r0, 8011c30 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
 8011c0e:	68ca      	ldr	r2, [r1, #12]
 8011c10:	b14a      	cbz	r2, 8011c26 <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8011c12:	e890 0006 	ldmia.w	r0, {r1, r2}
 8011c16:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
 8011c18:	6801      	ldr	r1, [r0, #0]
 8011c1a:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8011c1c:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
 8011c1e:	61c3      	str	r3, [r0, #28]
 8011c20:	f022 0202 	bic.w	r2, r2, #2
 8011c24:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
 8011c26:	f7ff ffd5 	bl	8011bd4 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011c2a:	f384 8811 	msr	BASEPRI, r4
 8011c2e:	bd70      	pop	{r4, r5, r6, pc}
 8011c30:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
 8011c34:	694b      	ldr	r3, [r1, #20]
 8011c36:	b32b      	cbz	r3, 8011c84 <_add_timeout+0x94>
			timeout->func(timeout);
 8011c38:	4608      	mov	r0, r1
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
 8011c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
 8011c3e:	4718      	bx	r3
	return list->head == list;
 8011c40:	4a11      	ldr	r2, [pc, #68]	; (8011c88 <_add_timeout+0x98>)
 8011c42:	4610      	mov	r0, r2
 8011c44:	f850 3f0c 	ldr.w	r3, [r0, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011c48:	4283      	cmp	r3, r0
 8011c4a:	d10c      	bne.n	8011c66 <_add_timeout+0x76>
	node->next = list;
 8011c4c:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 8011c4e:	6913      	ldr	r3, [r2, #16]
 8011c50:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 8011c52:	6913      	ldr	r3, [r2, #16]
 8011c54:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8011c56:	6111      	str	r1, [r2, #16]
 8011c58:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
 8011c5a:	1b64      	subs	r4, r4, r5
 8011c5c:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
 8011c5e:	6914      	ldr	r4, [r2, #16]
 8011c60:	42a3      	cmp	r3, r4
 8011c62:	d0f3      	beq.n	8011c4c <_add_timeout+0x5c>
 8011c64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d0f0      	beq.n	8011c4c <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
 8011c6a:	690c      	ldr	r4, [r1, #16]
 8011c6c:	691d      	ldr	r5, [r3, #16]
 8011c6e:	42ac      	cmp	r4, r5
 8011c70:	dcf3      	bgt.n	8011c5a <_add_timeout+0x6a>
		node->prev = insert_point->prev;
 8011c72:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 8011c74:	1b2c      	subs	r4, r5, r4
 8011c76:	611c      	str	r4, [r3, #16]
 8011c78:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 8011c7a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 8011c80:	6059      	str	r1, [r3, #4]
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	bd70      	pop	{r4, r5, r6, pc}
 8011c86:	bf00      	nop
 8011c88:	20001340 	.word	0x20001340

08011c8c <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
 8011c8c:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
 8011c90:	b510      	push	{r4, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
 8011c92:	f990 200a 	ldrsb.w	r2, [r0, #10]
 8011c96:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
 8011c98:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011c9a:	3213      	adds	r2, #19
 8011c9c:	604b      	str	r3, [r1, #4]
 8011c9e:	4b14      	ldr	r3, [pc, #80]	; (8011cf0 <_remove_thread_from_ready_q+0x64>)
 8011ca0:	00d2      	lsls	r2, r2, #3
 8011ca2:	1d11      	adds	r1, r2, #4
	return list->head == list;
 8011ca4:	441a      	add	r2, r3
 8011ca6:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
 8011ca8:	6852      	ldr	r2, [r2, #4]
 8011caa:	428a      	cmp	r2, r1
 8011cac:	d10f      	bne.n	8011cce <_remove_thread_from_ready_q+0x42>
		_clear_ready_q_prio_bit(thread->base.prio);
 8011cae:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
 8011cb2:	3110      	adds	r1, #16
 8011cb4:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
 8011cb6:	3204      	adds	r2, #4
 8011cb8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
 8011cbc:	2401      	movs	r4, #1
 8011cbe:	f001 011f 	and.w	r1, r1, #31
 8011cc2:	fa04 f101 	lsl.w	r1, r4, r1
 8011cc6:	6894      	ldr	r4, [r2, #8]
 8011cc8:	ea24 0401 	bic.w	r4, r4, r1
 8011ccc:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
 8011cce:	695a      	ldr	r2, [r3, #20]
 8011cd0:	4290      	cmp	r0, r2
 8011cd2:	d10b      	bne.n	8011cec <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
 8011cd4:	6999      	ldr	r1, [r3, #24]
 8011cd6:	fa91 f2a1 	rbit	r2, r1
 8011cda:	2900      	cmp	r1, #0
 8011cdc:	fab2 f282 	clz	r2, r2
 8011ce0:	bf08      	it	eq
 8011ce2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8011ce6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011cea:	69d2      	ldr	r2, [r2, #28]
 8011cec:	615a      	str	r2, [r3, #20]
 8011cee:	bd10      	pop	{r4, pc}
 8011cf0:	20001340 	.word	0x20001340

08011cf4 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
 8011cf4:	b430      	push	{r4, r5}
 8011cf6:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
 8011cf8:	42a1      	cmp	r1, r4
 8011cfa:	bf08      	it	eq
 8011cfc:	2400      	moveq	r4, #0
 8011cfe:	b1f4      	cbz	r4, 8011d3e <_pend_thread+0x4a>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
 8011d00:	f990 500a 	ldrsb.w	r5, [r0, #10]
 8011d04:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8011d08:	429d      	cmp	r5, r3
 8011d0a:	da12      	bge.n	8011d32 <_pend_thread+0x3e>
		node->prev = insert_point->prev;
 8011d0c:	6863      	ldr	r3, [r4, #4]
 8011d0e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
 8011d10:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
 8011d12:	6863      	ldr	r3, [r4, #4]
 8011d14:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
 8011d16:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
 8011d18:	7a44      	ldrb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
 8011d1a:	1c53      	adds	r3, r2, #1
 8011d1c:	f044 0402 	orr.w	r4, r4, #2
 8011d20:	7244      	strb	r4, [r0, #9]
 8011d22:	d013      	beq.n	8011d4c <_pend_thread+0x58>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
 8011d24:	1c53      	adds	r3, r2, #1
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
 8011d26:	bc30      	pop	{r4, r5}
 8011d28:	460a      	mov	r2, r1
 8011d2a:	f100 0110 	add.w	r1, r0, #16
 8011d2e:	f7ff bf5f 	b.w	8011bf0 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 8011d32:	684b      	ldr	r3, [r1, #4]
 8011d34:	429c      	cmp	r4, r3
 8011d36:	d002      	beq.n	8011d3e <_pend_thread+0x4a>
 8011d38:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
 8011d3a:	2c00      	cmp	r4, #0
 8011d3c:	d1df      	bne.n	8011cfe <_pend_thread+0xa>
	node->next = list;
 8011d3e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 8011d40:	684b      	ldr	r3, [r1, #4]
 8011d42:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8011d44:	684b      	ldr	r3, [r1, #4]
 8011d46:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8011d48:	6048      	str	r0, [r1, #4]
 8011d4a:	e7e5      	b.n	8011d18 <_pend_thread+0x24>
}
 8011d4c:	bc30      	pop	{r4, r5}
 8011d4e:	4770      	bx	lr

08011d50 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
 8011d50:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
 8011d52:	4c06      	ldr	r4, [pc, #24]	; (8011d6c <_pend_current_thread+0x1c>)
{
 8011d54:	460e      	mov	r6, r1
 8011d56:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
 8011d58:	68a0      	ldr	r0, [r4, #8]
 8011d5a:	f7ff ff97 	bl	8011c8c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
 8011d5e:	4632      	mov	r2, r6
 8011d60:	4629      	mov	r1, r5
 8011d62:	68a0      	ldr	r0, [r4, #8]
}
 8011d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
 8011d68:	f7ff bfc4 	b.w	8011cf4 <_pend_thread>
 8011d6c:	20001340 	.word	0x20001340

08011d70 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
 8011d70:	4a09      	ldr	r2, [pc, #36]	; (8011d98 <__must_switch_threads+0x28>)
 8011d72:	6991      	ldr	r1, [r2, #24]

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
 8011d74:	6892      	ldr	r2, [r2, #8]
 8011d76:	2900      	cmp	r1, #0
 8011d78:	fa91 f3a1 	rbit	r3, r1
 8011d7c:	f992 000a 	ldrsb.w	r0, [r2, #10]
 8011d80:	fab3 f383 	clz	r3, r3
 8011d84:	bf08      	it	eq
 8011d86:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
 8011d8a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
 8011d8c:	4298      	cmp	r0, r3
 8011d8e:	bfd4      	ite	le
 8011d90:	2000      	movle	r0, #0
 8011d92:	2001      	movgt	r0, #1
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	20001340 	.word	0x20001340

08011d9c <_reschedule_threads>:
{
 8011d9c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
 8011d9e:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <_reschedule_threads+0x2c>)
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	895b      	ldrh	r3, [r3, #10]
 8011da4:	2b7f      	cmp	r3, #127	; 0x7f
 8011da6:	4604      	mov	r4, r0
 8011da8:	d802      	bhi.n	8011db0 <_reschedule_threads+0x14>
 8011daa:	f7ff ffe1 	bl	8011d70 <__must_switch_threads>
 8011dae:	b910      	cbnz	r0, 8011db6 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011db0:	f384 8811 	msr	BASEPRI, r4
 8011db4:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
 8011db6:	4b05      	ldr	r3, [pc, #20]	; (8011dcc <_reschedule_threads+0x30>)
 8011db8:	2200      	movs	r2, #0
 8011dba:	4620      	mov	r0, r4
}
 8011dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
 8011dc0:	601a      	str	r2, [r3, #0]
 8011dc2:	f7f0 bf8d 	b.w	8002ce0 <__swap>
 8011dc6:	bf00      	nop
 8011dc8:	20001340 	.word	0x20001340
 8011dcc:	20001474 	.word	0x20001474

08011dd0 <k_sched_unlock>:
	__asm__ volatile(
 8011dd0:	f04f 0310 	mov.w	r3, #16
 8011dd4:	f3ef 8011 	mrs	r0, BASEPRI
 8011dd8:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
 8011ddc:	4b03      	ldr	r3, [pc, #12]	; (8011dec <k_sched_unlock+0x1c>)
 8011dde:	689a      	ldr	r2, [r3, #8]
 8011de0:	7ad3      	ldrb	r3, [r2, #11]
 8011de2:	3301      	adds	r3, #1
 8011de4:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
 8011de6:	f7ff bfd9 	b.w	8011d9c <_reschedule_threads>
 8011dea:	bf00      	nop
 8011dec:	20001340 	.word	0x20001340

08011df0 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
 8011df0:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011df4:	4a12      	ldr	r2, [pc, #72]	; (8011e40 <_move_thread_to_end_of_prio_q+0x50>)
{
 8011df6:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
 8011df8:	3313      	adds	r3, #19
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	1d19      	adds	r1, r3, #4
 8011dfe:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
 8011e00:	684c      	ldr	r4, [r1, #4]
 8011e02:	42a0      	cmp	r0, r4
 8011e04:	d01b      	beq.n	8011e3e <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
 8011e06:	6844      	ldr	r4, [r0, #4]
 8011e08:	6805      	ldr	r5, [r0, #0]
 8011e0a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
 8011e0c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
 8011e0e:	4413      	add	r3, r2
	node->next->prev = node->prev;
 8011e10:	606c      	str	r4, [r5, #4]
	node->next = list;
 8011e12:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
 8011e14:	6899      	ldr	r1, [r3, #8]
 8011e16:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
 8011e18:	6899      	ldr	r1, [r3, #8]
 8011e1a:	6008      	str	r0, [r1, #0]
	list->tail = node;
 8011e1c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
 8011e1e:	6953      	ldr	r3, [r2, #20]
 8011e20:	4298      	cmp	r0, r3
 8011e22:	d10b      	bne.n	8011e3c <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
 8011e24:	6991      	ldr	r1, [r2, #24]
 8011e26:	fa91 f3a1 	rbit	r3, r1
 8011e2a:	2900      	cmp	r1, #0
 8011e2c:	fab3 f383 	clz	r3, r3
 8011e30:	bf08      	it	eq
 8011e32:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8011e36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e3a:	69db      	ldr	r3, [r3, #28]
 8011e3c:	6153      	str	r3, [r2, #20]
 8011e3e:	bd30      	pop	{r4, r5, pc}
 8011e40:	20001340 	.word	0x20001340

08011e44 <_impl_k_yield>:
{
 8011e44:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8011e46:	f04f 0310 	mov.w	r3, #16
 8011e4a:	f3ef 8511 	mrs	r5, BASEPRI
 8011e4e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
 8011e52:	4c09      	ldr	r4, [pc, #36]	; (8011e78 <_impl_k_yield+0x34>)
 8011e54:	68a0      	ldr	r0, [r4, #8]
 8011e56:	f7ff ffcb 	bl	8011df0 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
 8011e5a:	68a2      	ldr	r2, [r4, #8]
 8011e5c:	6963      	ldr	r3, [r4, #20]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d102      	bne.n	8011e68 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8011e62:	f385 8811 	msr	BASEPRI, r5
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
 8011e68:	4b04      	ldr	r3, [pc, #16]	; (8011e7c <_impl_k_yield+0x38>)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	4628      	mov	r0, r5
}
 8011e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e74:	f7f0 bf34 	b.w	8002ce0 <__swap>
 8011e78:	20001340 	.word	0x20001340
 8011e7c:	20001474 	.word	0x20001474

08011e80 <_impl_k_sleep>:
{
 8011e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
 8011e82:	b918      	cbnz	r0, 8011e8c <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 8011e84:	f7ff ffde 	bl	8011e44 <_impl_k_yield>
}
 8011e88:	b003      	add	sp, #12
 8011e8a:	bd30      	pop	{r4, r5, pc}
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
 8011e8c:	3001      	adds	r0, #1
 8011e8e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 8011e90:	f04f 0310 	mov.w	r3, #16
 8011e94:	f3ef 8511 	mrs	r5, BASEPRI
 8011e98:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
 8011e9c:	4c08      	ldr	r4, [pc, #32]	; (8011ec0 <_impl_k_sleep+0x40>)
 8011e9e:	68a0      	ldr	r0, [r4, #8]
 8011ea0:	f7ff fef4 	bl	8011c8c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
 8011ea4:	68a0      	ldr	r0, [r4, #8]
 8011ea6:	9b01      	ldr	r3, [sp, #4]
 8011ea8:	f100 0110 	add.w	r1, r0, #16
 8011eac:	2200      	movs	r2, #0
 8011eae:	f7ff fe9f 	bl	8011bf0 <_add_timeout>
	_time_slice_elapsed = 0;
 8011eb2:	4b04      	ldr	r3, [pc, #16]	; (8011ec4 <_impl_k_sleep+0x44>)
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	f7f0 ff11 	bl	8002ce0 <__swap>
 8011ebe:	e7e3      	b.n	8011e88 <_impl_k_sleep+0x8>
 8011ec0:	20001340 	.word	0x20001340
 8011ec4:	20001474 	.word	0x20001474

08011ec8 <_impl_k_current_get>:
}
 8011ec8:	4b01      	ldr	r3, [pc, #4]	; (8011ed0 <_impl_k_current_get+0x8>)
 8011eca:	6898      	ldr	r0, [r3, #8]
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	20001340 	.word	0x20001340

08011ed4 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
 8011ed4:	4b0d      	ldr	r3, [pc, #52]	; (8011f0c <_is_thread_time_slicing+0x38>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	dd14      	ble.n	8011f06 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <_is_thread_time_slicing+0x3c>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	4298      	cmp	r0, r3
 8011ee2:	d010      	beq.n	8011f06 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
 8011ee4:	4a0b      	ldr	r2, [pc, #44]	; (8011f14 <_is_thread_time_slicing+0x40>)
 8011ee6:	f990 300a 	ldrsb.w	r3, [r0, #10]
 8011eea:	6812      	ldr	r2, [r2, #0]
 8011eec:	4293      	cmp	r3, r2
 8011eee:	db0a      	blt.n	8011f06 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
 8011ef0:	f103 0213 	add.w	r2, r3, #19
 8011ef4:	4b08      	ldr	r3, [pc, #32]	; (8011f18 <_is_thread_time_slicing+0x44>)
 8011ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011efa:	6858      	ldr	r0, [r3, #4]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	1ac0      	subs	r0, r0, r3
 8011f00:	bf18      	it	ne
 8011f02:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
 8011f04:	4770      	bx	lr
		return 0;
 8011f06:	2000      	movs	r0, #0
}
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	2000145c 	.word	0x2000145c
 8011f10:	08013e3c 	.word	0x08013e3c
 8011f14:	20001460 	.word	0x20001460
 8011f18:	20001340 	.word	0x20001340

08011f1c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
 8011f1c:	4b01      	ldr	r3, [pc, #4]	; (8011f24 <_update_time_slice_before_swap+0x8>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	4770      	bx	lr
 8011f24:	20001474 	.word	0x20001474

08011f28 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011f28:	7a42      	ldrb	r2, [r0, #9]
 8011f2a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 8011f2e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8011f32:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 8011f34:	d104      	bne.n	8011f40 <_ready_thread+0x18>
 8011f36:	6a03      	ldr	r3, [r0, #32]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	d101      	bne.n	8011f40 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
 8011f3c:	f7ff be22 	b.w	8011b84 <_add_thread_to_ready_q>
 8011f40:	4770      	bx	lr
	...

08011f44 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
 8011f44:	4a10      	ldr	r2, [pc, #64]	; (8011f88 <_unpend_first_thread+0x44>)
 8011f46:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
 8011f48:	4603      	mov	r3, r0
 8011f4a:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
 8011f4c:	b16a      	cbz	r2, 8011f6a <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011f4e:	4283      	cmp	r3, r0
 8011f50:	bf08      	it	eq
 8011f52:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
 8011f54:	b908      	cbnz	r0, 8011f5a <_unpend_first_thread+0x16>
 8011f56:	2000      	movs	r0, #0
 8011f58:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
 8011f5a:	6a02      	ldr	r2, [r0, #32]
 8011f5c:	3202      	adds	r2, #2
 8011f5e:	d107      	bne.n	8011f70 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
 8011f60:	685a      	ldr	r2, [r3, #4]
 8011f62:	4290      	cmp	r0, r2
 8011f64:	d0f7      	beq.n	8011f56 <_unpend_first_thread+0x12>
 8011f66:	6800      	ldr	r0, [r0, #0]
 8011f68:	e7f4      	b.n	8011f54 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011f6a:	4283      	cmp	r3, r0
 8011f6c:	d00a      	beq.n	8011f84 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
 8011f6e:	b150      	cbz	r0, 8011f86 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
 8011f70:	e890 000c 	ldmia.w	r0, {r2, r3}
 8011f74:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8011f76:	6802      	ldr	r2, [r0, #0]
 8011f78:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 8011f7a:	7a43      	ldrb	r3, [r0, #9]
 8011f7c:	f023 0302 	bic.w	r3, r3, #2
 8011f80:	7243      	strb	r3, [r0, #9]
 8011f82:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011f84:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
 8011f86:	4770      	bx	lr
 8011f88:	20001470 	.word	0x20001470

08011f8c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8011f8c:	6903      	ldr	r3, [r0, #16]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	d011      	beq.n	8011fb6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 8011f92:	4a0a      	ldr	r2, [pc, #40]	; (8011fbc <_abort_timeout+0x30>)
 8011f94:	6912      	ldr	r2, [r2, #16]
 8011f96:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
 8011f98:	bf1f      	itttt	ne
 8011f9a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 8011f9c:	690a      	ldrne	r2, [r1, #16]
 8011f9e:	189b      	addne	r3, r3, r2
 8011fa0:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
 8011fa2:	e890 000c 	ldmia.w	r0, {r2, r3}
 8011fa6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8011fa8:	6802      	ldr	r2, [r0, #0]
 8011faa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fb0:	6103      	str	r3, [r0, #16]
	return 0;
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	4770      	bx	lr
		return _INACTIVE;
 8011fb6:	4618      	mov	r0, r3
}
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	20001340 	.word	0x20001340

08011fc0 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
 8011fc0:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
 8011fc4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8011fc6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8011fc8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8011fca:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
 8011fcc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8011fce:	6143      	str	r3, [r0, #20]
 8011fd0:	4770      	bx	lr
	...

08011fd4 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
 8011fd4:	b570      	push	{r4, r5, r6, lr}
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	f04f 0310 	mov.w	r3, #16
 8011fdc:	f3ef 8611 	mrs	r6, BASEPRI
 8011fe0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
 8011fe4:	f7ff ffae 	bl	8011f44 <_unpend_first_thread>
	if (!thread) {
 8011fe8:	4604      	mov	r4, r0
 8011fea:	b990      	cbnz	r0, 8012012 <_impl_k_sem_give+0x3e>
	sem->count += (sem->count != sem->limit);
 8011fec:	68ab      	ldr	r3, [r5, #8]
 8011fee:	68ea      	ldr	r2, [r5, #12]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	bf18      	it	ne
 8011ff4:	3301      	addne	r3, #1
 8011ff6:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
 8011ff8:	2102      	movs	r1, #2
 8011ffa:	f105 0010 	add.w	r0, r5, #16
 8011ffe:	f000 fd77 	bl	8012af0 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
 8012002:	b310      	cbz	r0, 801204a <_impl_k_sem_give+0x76>
	_update_time_slice_before_swap();
 8012004:	f7ff ff8a 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8012008:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
 801200a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801200e:	f7f0 be67 	b.w	8002ce0 <__swap>
	return _abort_timeout(&thread->base.timeout);
 8012012:	3010      	adds	r0, #16
 8012014:	f7ff ffba 	bl	8011f8c <_abort_timeout>
	_ready_thread(thread);
 8012018:	4620      	mov	r0, r4
 801201a:	f7ff ff85 	bl	8011f28 <_ready_thread>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 801201e:	2300      	movs	r3, #0
 8012020:	6663      	str	r3, [r4, #100]	; 0x64
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
 8012022:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
 8012026:	2b0d      	cmp	r3, #13
 8012028:	d80f      	bhi.n	801204a <_impl_k_sem_give+0x76>
 801202a:	b11b      	cbz	r3, 8012034 <_impl_k_sem_give+0x60>
 801202c:	4b08      	ldr	r3, [pc, #32]	; (8012050 <_impl_k_sem_give+0x7c>)
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	051b      	lsls	r3, r3, #20
 8012032:	d50a      	bpl.n	801204a <_impl_k_sem_give+0x76>
	return _is_preempt(_current) && __must_switch_threads();
 8012034:	4b07      	ldr	r3, [pc, #28]	; (8012054 <_impl_k_sem_give+0x80>)
 8012036:	689b      	ldr	r3, [r3, #8]
 8012038:	895b      	ldrh	r3, [r3, #10]
 801203a:	2b7f      	cmp	r3, #127	; 0x7f
 801203c:	d805      	bhi.n	801204a <_impl_k_sem_give+0x76>
 801203e:	f7ff fe97 	bl	8011d70 <__must_switch_threads>
 8012042:	3000      	adds	r0, #0
 8012044:	bf18      	it	ne
 8012046:	2001      	movne	r0, #1
 8012048:	e7db      	b.n	8012002 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801204a:	f386 8811 	msr	BASEPRI, r6
}
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	e000ed00 	.word	0xe000ed00
 8012054:	20001340 	.word	0x20001340

08012058 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 8012058:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 801205a:	f04f 0310 	mov.w	r3, #16
 801205e:	f3ef 8411 	mrs	r4, BASEPRI
 8012062:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
 8012066:	6883      	ldr	r3, [r0, #8]
 8012068:	b12b      	cbz	r3, 8012076 <_impl_k_sem_take+0x1e>
		sem->count--;
 801206a:	3b01      	subs	r3, #1
 801206c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801206e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
 8012072:	2000      	movs	r0, #0
 8012074:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
 8012076:	b921      	cbnz	r1, 8012082 <_impl_k_sem_take+0x2a>
 8012078:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
 801207c:	f06f 000f 	mvn.w	r0, #15
 8012080:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
 8012082:	f7ff fe65 	bl	8011d50 <_pend_current_thread>
	_update_time_slice_before_swap();
 8012086:	f7ff ff49 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 801208a:	4620      	mov	r0, r4

	return _Swap(key);
}
 801208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012090:	f7f0 be26 	b.w	8002ce0 <__swap>

08012094 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
 8012094:	4b01      	ldr	r3, [pc, #4]	; (801209c <_impl_k_uptime_get_32+0x8>)
 8012096:	e9d3 0100 	ldrd	r0, r1, [r3]
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
 801209a:	4770      	bx	lr
 801209c:	20001478 	.word	0x20001478

080120a0 <_tick_get>:
	__asm__ volatile(
 80120a0:	f04f 0210 	mov.w	r2, #16
 80120a4:	f3ef 8311 	mrs	r3, BASEPRI
 80120a8:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
 80120ac:	4a02      	ldr	r2, [pc, #8]	; (80120b8 <_tick_get+0x18>)
 80120ae:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80120b2:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
 80120b6:	4770      	bx	lr
 80120b8:	20001478 	.word	0x20001478

080120bc <_impl_k_uptime_get>:
{
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
 80120bc:	f7ff bff0 	b.w	80120a0 <_tick_get>

080120c0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
 80120c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80120c4:	4606      	mov	r6, r0
	__asm__ volatile(
 80120c6:	f04f 0310 	mov.w	r3, #16
 80120ca:	f3ef 8011 	mrs	r0, BASEPRI
 80120ce:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
 80120d2:	4959      	ldr	r1, [pc, #356]	; (8012238 <_nano_sys_clock_tick_announce+0x178>)
 80120d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80120d8:	19a2      	adds	r2, r4, r6
 80120da:	eb45 73e6 	adc.w	r3, r5, r6, asr #31
 80120de:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80120e2:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
 80120e6:	466c      	mov	r4, sp
 80120e8:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
 80120ec:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
 80120f0:	f04f 0310 	mov.w	r3, #16
 80120f4:	f3ef 8011 	mrs	r0, BASEPRI
 80120f8:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 80120fc:	4d4f      	ldr	r5, [pc, #316]	; (801223c <_nano_sys_clock_tick_announce+0x17c>)
 80120fe:	462a      	mov	r2, r5
 8012100:	4601      	mov	r1, r0
 8012102:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012106:	4293      	cmp	r3, r2
 8012108:	4694      	mov	ip, r2
 801210a:	d000      	beq.n	801210e <_nano_sys_clock_tick_announce+0x4e>
	if (!head) {
 801210c:	b9eb      	cbnz	r3, 801214a <_nano_sys_clock_tick_announce+0x8a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801210e:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
 8012112:	68a8      	ldr	r0, [r5, #8]
 8012114:	f7ff fede 	bl	8011ed4 <_is_thread_time_slicing>
 8012118:	b1a0      	cbz	r0, 8012144 <_nano_sys_clock_tick_announce+0x84>
	_time_slice_elapsed += __ticks_to_ms(ticks);
 801211a:	4b49      	ldr	r3, [pc, #292]	; (8012240 <_nano_sys_clock_tick_announce+0x180>)
	if (_time_slice_elapsed >= _time_slice_duration) {
 801211c:	4a49      	ldr	r2, [pc, #292]	; (8012244 <_nano_sys_clock_tick_announce+0x184>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
 801211e:	6818      	ldr	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
 8012120:	6812      	ldr	r2, [r2, #0]
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8012122:	4430      	add	r0, r6
	if (_time_slice_elapsed >= _time_slice_duration) {
 8012124:	4290      	cmp	r0, r2
	_time_slice_elapsed += __ticks_to_ms(ticks);
 8012126:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
 8012128:	db0c      	blt.n	8012144 <_nano_sys_clock_tick_announce+0x84>
		_time_slice_elapsed = 0;
 801212a:	2200      	movs	r2, #0
 801212c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
 801212e:	f04f 0310 	mov.w	r3, #16
 8012132:	f3ef 8411 	mrs	r4, BASEPRI
 8012136:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
 801213a:	68a8      	ldr	r0, [r5, #8]
 801213c:	f7ff fe58 	bl	8011df0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012140:	f384 8811 	msr	BASEPRI, r4
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
 8012144:	b002      	add	sp, #8
 8012146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	head->delta_ticks_from_prev -= ticks;
 801214a:	6918      	ldr	r0, [r3, #16]
	_handling_timeouts = 1;
 801214c:	4f3e      	ldr	r7, [pc, #248]	; (8012248 <_nano_sys_clock_tick_announce+0x188>)
	head->delta_ticks_from_prev -= ticks;
 801214e:	1b80      	subs	r0, r0, r6
 8012150:	6118      	str	r0, [r3, #16]
	_handling_timeouts = 1;
 8012152:	2001      	movs	r0, #1
 8012154:	6038      	str	r0, [r7, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
 8012156:	f06f 0001 	mvn.w	r0, #1
	while (timeout && timeout->delta_ticks_from_prev == 0) {
 801215a:	691a      	ldr	r2, [r3, #16]
 801215c:	b9d2      	cbnz	r2, 8012194 <_nano_sys_clock_tick_announce+0xd4>
	node->prev->next = node->next;
 801215e:	e893 4004 	ldmia.w	r3, {r2, lr}
 8012162:	f8ce 2000 	str.w	r2, [lr]
	node->next->prev = node->prev;
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	f8c2 e004 	str.w	lr, [r2, #4]
	node->next = list->head;
 801216c:	9a00      	ldr	r2, [sp, #0]
	node->prev = list;
 801216e:	e883 0014 	stmia.w	r3, {r2, r4}
	list->head->prev = node;
 8012172:	9a00      	ldr	r2, [sp, #0]
	list->head = node;
 8012174:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
 8012176:	6053      	str	r3, [r2, #4]
		timeout->delta_ticks_from_prev = _EXPIRED;
 8012178:	6118      	str	r0, [r3, #16]
 801217a:	f381 8811 	msr	BASEPRI, r1
	__asm__ volatile(
 801217e:	f04f 0310 	mov.w	r3, #16
 8012182:	f3ef 8111 	mrs	r1, BASEPRI
 8012186:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 801218a:	68eb      	ldr	r3, [r5, #12]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801218c:	4563      	cmp	r3, ip
 801218e:	d001      	beq.n	8012194 <_nano_sys_clock_tick_announce+0xd4>
	while (timeout && timeout->delta_ticks_from_prev == 0) {
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1e2      	bne.n	801215a <_nano_sys_clock_tick_announce+0x9a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012194:	f381 8811 	msr	BASEPRI, r1
	return list->head == list;
 8012198:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801219a:	42a0      	cmp	r0, r4
 801219c:	d102      	bne.n	80121a4 <_nano_sys_clock_tick_announce+0xe4>
	_handling_timeouts = 0;
 801219e:	2300      	movs	r3, #0
 80121a0:	603b      	str	r3, [r7, #0]
 80121a2:	e7b6      	b.n	8012112 <_nano_sys_clock_tick_announce+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d0fa      	beq.n	801219e <_nano_sys_clock_tick_announce+0xde>
	return (node == list->tail) ? NULL : node->next;
 80121a8:	9b01      	ldr	r3, [sp, #4]
 80121aa:	4298      	cmp	r0, r3
 80121ac:	d101      	bne.n	80121b2 <_nano_sys_clock_tick_announce+0xf2>
 80121ae:	2400      	movs	r4, #0
 80121b0:	e000      	b.n	80121b4 <_nano_sys_clock_tick_announce+0xf4>
 80121b2:	6804      	ldr	r4, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
 80121b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
 80121b8:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
 80121bc:	e890 000c 	ldmia.w	r0, {r2, r3}
 80121c0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80121c2:	6802      	ldr	r2, [r0, #0]
 80121c4:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
 80121c6:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
 80121c8:	f04f 0210 	mov.w	r2, #16
 80121cc:	f3ef 8a11 	mrs	sl, BASEPRI
 80121d0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 80121d4:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
 80121d8:	b1fb      	cbz	r3, 801221a <_nano_sys_clock_tick_announce+0x15a>
	if (timeout_obj->wait_q) {
 80121da:	68c2      	ldr	r2, [r0, #12]
 80121dc:	b152      	cbz	r2, 80121f4 <_nano_sys_clock_tick_announce+0x134>
	node->prev->next = node->next;
 80121de:	6859      	ldr	r1, [r3, #4]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 80121e8:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
 80121ea:	f8c3 901c 	str.w	r9, [r3, #28]
 80121ee:	f022 0202 	bic.w	r2, r2, #2
 80121f2:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80121f4:	7a5a      	ldrb	r2, [r3, #9]
 80121f6:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
 80121fa:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80121fe:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
 8012200:	d102      	bne.n	8012208 <_nano_sys_clock_tick_announce+0x148>
 8012202:	6a1a      	ldr	r2, [r3, #32]
 8012204:	3201      	adds	r2, #1
 8012206:	d013      	beq.n	8012230 <_nano_sys_clock_tick_announce+0x170>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012208:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 801220c:	2c00      	cmp	r4, #0
 801220e:	d0c6      	beq.n	801219e <_nano_sys_clock_tick_announce+0xde>
	return (node == list->tail) ? NULL : node->next;
 8012210:	9b01      	ldr	r3, [sp, #4]
 8012212:	42a3      	cmp	r3, r4
 8012214:	d108      	bne.n	8012228 <_nano_sys_clock_tick_announce+0x168>
 8012216:	2300      	movs	r3, #0
 8012218:	e007      	b.n	801222a <_nano_sys_clock_tick_announce+0x16a>
 801221a:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
 801221e:	6943      	ldr	r3, [r0, #20]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d0f3      	beq.n	801220c <_nano_sys_clock_tick_announce+0x14c>
			timeout->func(timeout);
 8012224:	4798      	blx	r3
 8012226:	e7f1      	b.n	801220c <_nano_sys_clock_tick_announce+0x14c>
 8012228:	6823      	ldr	r3, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
 801222a:	4620      	mov	r0, r4
 801222c:	461c      	mov	r4, r3
 801222e:	e7c5      	b.n	80121bc <_nano_sys_clock_tick_announce+0xfc>
		_add_thread_to_ready_q(thread);
 8012230:	4618      	mov	r0, r3
 8012232:	f7ff fca7 	bl	8011b84 <_add_thread_to_ready_q>
 8012236:	e7e7      	b.n	8012208 <_nano_sys_clock_tick_announce+0x148>
 8012238:	20001478 	.word	0x20001478
 801223c:	20001340 	.word	0x20001340
 8012240:	20001474 	.word	0x20001474
 8012244:	2000145c 	.word	0x2000145c
 8012248:	20001470 	.word	0x20001470

0801224c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
 801224c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
 801224e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012256:	4903      	ldr	r1, [pc, #12]	; (8012264 <k_sys_work_q_init+0x18>)
 8012258:	4803      	ldr	r0, [pc, #12]	; (8012268 <k_sys_work_q_init+0x1c>)
 801225a:	f000 f9c9 	bl	80125f0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
 801225e:	2000      	movs	r0, #0
 8012260:	bd08      	pop	{r3, pc}
 8012262:	bf00      	nop
 8012264:	20004e68 	.word	0x20004e68
 8012268:	20001480 	.word	0x20001480

0801226c <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
 801226c:	7a43      	ldrb	r3, [r0, #9]
 801226e:	06da      	lsls	r2, r3, #27
 8012270:	d104      	bne.n	801227c <_is_thread_ready+0x10>
 8012272:	6a00      	ldr	r0, [r0, #32]
 8012274:	1c43      	adds	r3, r0, #1
 8012276:	4258      	negs	r0, r3
 8012278:	4158      	adcs	r0, r3
 801227a:	4770      	bx	lr
 801227c:	2000      	movs	r0, #0
}
 801227e:	4770      	bx	lr

08012280 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012280:	6903      	ldr	r3, [r0, #16]
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	d011      	beq.n	80122aa <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 8012286:	4a0a      	ldr	r2, [pc, #40]	; (80122b0 <_abort_timeout+0x30>)
 8012288:	6912      	ldr	r2, [r2, #16]
 801228a:	4290      	cmp	r0, r2
 801228c:	bf1f      	itttt	ne
 801228e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 8012290:	690a      	ldrne	r2, [r1, #16]
 8012292:	189b      	addne	r3, r3, r2
 8012294:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
 8012296:	e890 000c 	ldmia.w	r0, {r2, r3}
 801229a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 801229c:	6802      	ldr	r2, [r0, #0]
 801229e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 80122a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122a4:	6103      	str	r3, [r0, #16]
	return 0;
 80122a6:	2000      	movs	r0, #0
 80122a8:	4770      	bx	lr
		return _INACTIVE;
 80122aa:	4618      	mov	r0, r3
}
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	20001340 	.word	0x20001340

080122b4 <k_is_in_isr>:
 80122b4:	f3ef 8005 	mrs	r0, IPSR
 80122b8:	280d      	cmp	r0, #13
 80122ba:	d807      	bhi.n	80122cc <k_is_in_isr+0x18>
 80122bc:	b138      	cbz	r0, 80122ce <k_is_in_isr+0x1a>
 80122be:	4b04      	ldr	r3, [pc, #16]	; (80122d0 <k_is_in_isr+0x1c>)
 80122c0:	6858      	ldr	r0, [r3, #4]
 80122c2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
 80122c6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80122ca:	4770      	bx	lr
 80122cc:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
 80122ce:	4770      	bx	lr
 80122d0:	e000ed00 	.word	0xe000ed00

080122d4 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
 80122d4:	4b02      	ldr	r3, [pc, #8]	; (80122e0 <_is_thread_essential+0xc>)
 80122d6:	689b      	ldr	r3, [r3, #8]
 80122d8:	7a18      	ldrb	r0, [r3, #8]
}
 80122da:	f000 0001 	and.w	r0, r0, #1
 80122de:	4770      	bx	lr
 80122e0:	20001340 	.word	0x20001340

080122e4 <k_busy_wait>:
int saved_always_on = k_enable_sys_clock_always_on();
#endif
	/* use 64-bit math to prevent overflow when multiplying */
	u32_t cycles_to_wait = (u32_t)(
		(u64_t)usec_to_wait *
		(u64_t)sys_clock_hw_cycles_per_sec /
 80122e4:	4908      	ldr	r1, [pc, #32]	; (8012308 <k_busy_wait+0x24>)
 80122e6:	4a09      	ldr	r2, [pc, #36]	; (801230c <k_busy_wait+0x28>)
{
 80122e8:	b538      	push	{r3, r4, r5, lr}
		(u64_t)sys_clock_hw_cycles_per_sec /
 80122ea:	fba0 0101 	umull	r0, r1, r0, r1
 80122ee:	2300      	movs	r3, #0
 80122f0:	f7ee f900 	bl	80004f4 <__aeabi_uldivmod>
 80122f4:	4604      	mov	r4, r0
		(u64_t)USEC_PER_SEC
	);
	u32_t start_cycles = k_cycle_get_32();
 80122f6:	f7f2 fb43 	bl	8004980 <_timer_cycle_get_32>
 80122fa:	4605      	mov	r5, r0

	for (;;) {
		u32_t current_cycles = k_cycle_get_32();
 80122fc:	f7f2 fb40 	bl	8004980 <_timer_cycle_get_32>

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8012300:	1b40      	subs	r0, r0, r5
 8012302:	4284      	cmp	r4, r0
 8012304:	d8fa      	bhi.n	80122fc <k_busy_wait+0x18>
	}
#if defined(CONFIG_TICKLESS_KERNEL) && \
	    !defined(CONFIG_BUSY_WAIT_USES_ALTERNATE_CLOCK)
	_sys_clock_always_on = saved_always_on;
#endif
}
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	0501bd00 	.word	0x0501bd00
 801230c:	000f4240 	.word	0x000f4240

08012310 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8012310:	b508      	push	{r3, lr}
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8012318:	461a      	mov	r2, r3
 801231a:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
 801231c:	f7ff fdd4 	bl	8011ec8 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
 8012320:	f7f0 ff06 	bl	8003130 <_impl_k_thread_abort>

08012324 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
 8012324:	b510      	push	{r4, lr}
 8012326:	4601      	mov	r1, r0
	__asm__ volatile(
 8012328:	f04f 0310 	mov.w	r3, #16
 801232c:	f3ef 8411 	mrs	r4, BASEPRI
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
 8012336:	075a      	lsls	r2, r3, #29
 8012338:	d402      	bmi.n	8012340 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801233a:	f384 8811 	msr	BASEPRI, r4
 801233e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8012340:	f023 0304 	bic.w	r3, r3, #4
 8012344:	7243      	strb	r3, [r0, #9]
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
 8012346:	f7ff ff91 	bl	801226c <_is_thread_ready>
 801234a:	2800      	cmp	r0, #0
 801234c:	d0f5      	beq.n	801233a <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
 801234e:	4608      	mov	r0, r1
 8012350:	f7ff fc18 	bl	8011b84 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
 8012354:	4b07      	ldr	r3, [pc, #28]	; (8012374 <_impl_k_thread_start+0x50>)
 8012356:	689b      	ldr	r3, [r3, #8]
 8012358:	895b      	ldrh	r3, [r3, #10]
 801235a:	2b7f      	cmp	r3, #127	; 0x7f
 801235c:	d8ed      	bhi.n	801233a <_impl_k_thread_start+0x16>
 801235e:	f7ff fd07 	bl	8011d70 <__must_switch_threads>
 8012362:	2800      	cmp	r0, #0
 8012364:	d0e9      	beq.n	801233a <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
 8012366:	f7ff fdd9 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 801236a:	4620      	mov	r0, r4
			return;
		}
	}

	irq_unlock(key);
}
 801236c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012370:	f7f0 bcb6 	b.w	8002ce0 <__swap>
 8012374:	20001340 	.word	0x20001340

08012378 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
 8012378:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
 801237a:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801237c:	f7f0 be34 	b.w	8002fe8 <_new_thread>

08012380 <_k_thread_single_start>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_thread_cancel, K_OBJ_THREAD, struct k_thread *);
#endif

void _k_thread_single_start(struct k_thread *thread)
{
 8012380:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8012382:	7a43      	ldrb	r3, [r0, #9]
 8012384:	f023 0304 	bic.w	r3, r3, #4
 8012388:	7243      	strb	r3, [r0, #9]
 801238a:	4601      	mov	r1, r0
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
 801238c:	f7ff ff6e 	bl	801226c <_is_thread_ready>
 8012390:	b120      	cbz	r0, 801239c <_k_thread_single_start+0x1c>
		_add_thread_to_ready_q(thread);
 8012392:	4608      	mov	r0, r1
	}
}
 8012394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		_add_thread_to_ready_q(thread);
 8012398:	f7ff bbf4 	b.w	8011b84 <_add_thread_to_ready_q>
 801239c:	bd08      	pop	{r3, pc}
	...

080123a0 <schedule_new_thread.part.13>:
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
 80123a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
 80123a2:	3101      	adds	r1, #1
	__asm__ volatile(
 80123a4:	f04f 0310 	mov.w	r3, #16
 80123a8:	f3ef 8611 	mrs	r6, BASEPRI
 80123ac:	f383 8811 	msr	BASEPRI, r3
	timeout->wait_q = (sys_dlist_t *)wait_q;
 80123b0:	2300      	movs	r3, #0
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
 80123b2:	f100 0710 	add.w	r7, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
 80123b6:	6201      	str	r1, [r0, #32]
	timeout->thread = thread;
 80123b8:	6180      	str	r0, [r0, #24]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 80123ba:	61c3      	str	r3, [r0, #28]
	if (!timeout_in_ticks) {
 80123bc:	b9d9      	cbnz	r1, 80123f6 <schedule_new_thread.part.13+0x56>
 80123be:	f04f 0310 	mov.w	r3, #16
 80123c2:	f3ef 8411 	mrs	r4, BASEPRI
 80123c6:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
 80123ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123ce:	6203      	str	r3, [r0, #32]
	if (timeout_obj->wait_q) {
 80123d0:	69c3      	ldr	r3, [r0, #28]
 80123d2:	b14b      	cbz	r3, 80123e8 <schedule_new_thread.part.13+0x48>
	node->prev->next = node->next;
 80123d4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80123d8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80123da:	6802      	ldr	r2, [r0, #0]
 80123dc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 80123de:	7a43      	ldrb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
 80123e0:	61c1      	str	r1, [r0, #28]
 80123e2:	f023 0302 	bic.w	r3, r3, #2
 80123e6:	7243      	strb	r3, [r0, #9]
		_ready_thread(thread);
 80123e8:	f7ff ffca 	bl	8012380 <_k_thread_single_start>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80123ec:	f384 8811 	msr	BASEPRI, r4
 80123f0:	f386 8811 	msr	BASEPRI, r6
 80123f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head == list;
 80123f6:	4a12      	ldr	r2, [pc, #72]	; (8012440 <schedule_new_thread.part.13+0xa0>)
 80123f8:	4611      	mov	r1, r2
 80123fa:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80123fe:	428b      	cmp	r3, r1
 8012400:	d105      	bne.n	801240e <schedule_new_thread.part.13+0x6e>
	node->next = list;
 8012402:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
 8012404:	6913      	ldr	r3, [r2, #16]
 8012406:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
 8012408:	601f      	str	r7, [r3, #0]
	list->tail = node;
 801240a:	6117      	str	r7, [r2, #16]
 801240c:	e7f0      	b.n	80123f0 <schedule_new_thread.part.13+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 801240e:	2b00      	cmp	r3, #0
 8012410:	d0f7      	beq.n	8012402 <schedule_new_thread.part.13+0x62>
 8012412:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
 8012416:	6a04      	ldr	r4, [r0, #32]
 8012418:	691d      	ldr	r5, [r3, #16]
 801241a:	42ac      	cmp	r4, r5
 801241c:	dc08      	bgt.n	8012430 <schedule_new_thread.part.13+0x90>
		node->prev = insert_point->prev;
 801241e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 8012420:	1b2c      	subs	r4, r5, r4
 8012422:	611c      	str	r4, [r3, #16]
 8012424:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
 8012426:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
 8012428:	685a      	ldr	r2, [r3, #4]
 801242a:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
 801242c:	605f      	str	r7, [r3, #4]
 801242e:	e7df      	b.n	80123f0 <schedule_new_thread.part.13+0x50>
		*delta -= in_q->delta_ticks_from_prev;
 8012430:	1b64      	subs	r4, r4, r5
	return (node == list->tail) ? NULL : node->next;
 8012432:	4573      	cmp	r3, lr
 8012434:	6204      	str	r4, [r0, #32]
 8012436:	d0e4      	beq.n	8012402 <schedule_new_thread.part.13+0x62>
 8012438:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1eb      	bne.n	8012416 <schedule_new_thread.part.13+0x76>
 801243e:	e7e0      	b.n	8012402 <schedule_new_thread.part.13+0x62>
 8012440:	20001340 	.word	0x20001340

08012444 <_impl_k_thread_create>:
{
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801244a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801244c:	9604      	str	r6, [sp, #16]
 801244e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012450:	9603      	str	r6, [sp, #12]
 8012452:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012454:	9602      	str	r6, [sp, #8]
 8012456:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
 8012458:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801245a:	9601      	str	r6, [sp, #4]
 801245c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801245e:	9600      	str	r6, [sp, #0]
 8012460:	f7f0 fdc2 	bl	8002fe8 <_new_thread>
	if (delay != K_FOREVER) {
 8012464:	1c6b      	adds	r3, r5, #1
 8012466:	d003      	beq.n	8012470 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
 8012468:	b92d      	cbnz	r5, 8012476 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
 801246a:	4620      	mov	r0, r4
 801246c:	f7ff ff5a 	bl	8012324 <_impl_k_thread_start>
}
 8012470:	4620      	mov	r0, r4
 8012472:	b006      	add	sp, #24
 8012474:	bd70      	pop	{r4, r5, r6, pc}
 8012476:	4629      	mov	r1, r5
 8012478:	4620      	mov	r0, r4
 801247a:	f7ff ff91 	bl	80123a0 <schedule_new_thread.part.13>
 801247e:	e7f7      	b.n	8012470 <_impl_k_thread_create+0x2c>

08012480 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
 8012480:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8012482:	b510      	push	{r4, lr}
 8012484:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8012486:	b103      	cbz	r3, 801248a <_k_thread_single_abort+0xa>
		thread->fn_abort();
 8012488:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
 801248a:	4620      	mov	r0, r4
 801248c:	f7ff feee 	bl	801226c <_is_thread_ready>
 8012490:	b138      	cbz	r0, 80124a2 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
 8012492:	4620      	mov	r0, r4
 8012494:	f7ff fbfa 	bl	8011c8c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
 8012498:	7a63      	ldrb	r3, [r4, #9]
 801249a:	f043 0308 	orr.w	r3, r3, #8
 801249e:	7263      	strb	r3, [r4, #9]
 80124a0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
 80124a2:	7a63      	ldrb	r3, [r4, #9]
 80124a4:	079b      	lsls	r3, r3, #30
 80124a6:	d508      	bpl.n	80124ba <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
 80124a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80124ac:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80124ae:	6822      	ldr	r2, [r4, #0]
 80124b0:	6053      	str	r3, [r2, #4]
 80124b2:	7a63      	ldrb	r3, [r4, #9]
 80124b4:	f023 0302 	bic.w	r3, r3, #2
 80124b8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
 80124ba:	6a23      	ldr	r3, [r4, #32]
 80124bc:	3301      	adds	r3, #1
 80124be:	d0eb      	beq.n	8012498 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
 80124c0:	f104 0010 	add.w	r0, r4, #16
 80124c4:	f7ff fedc 	bl	8012280 <_abort_timeout>
 80124c8:	e7e6      	b.n	8012498 <_k_thread_single_abort+0x18>
	...

080124cc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
 80124cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
 80124ce:	4f21      	ldr	r7, [pc, #132]	; (8012554 <_init_static_threads+0x88>)
 80124d0:	4d21      	ldr	r5, [pc, #132]	; (8012558 <_init_static_threads+0x8c>)
{
 80124d2:	b087      	sub	sp, #28
 80124d4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80124d6:	42bd      	cmp	r5, r7
 80124d8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
 80124dc:	d314      	bcc.n	8012508 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
 80124de:	4b1f      	ldr	r3, [pc, #124]	; (801255c <_init_static_threads+0x90>)
 80124e0:	689a      	ldr	r2, [r3, #8]
 80124e2:	7ad3      	ldrb	r3, [r2, #11]
 80124e4:	3b01      	subs	r3, #1
 80124e6:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
 80124e8:	f04f 0310 	mov.w	r3, #16
 80124ec:	f3ef 8511 	mrs	r5, BASEPRI
 80124f0:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
 80124f4:	4c18      	ldr	r4, [pc, #96]	; (8012558 <_init_static_threads+0x8c>)
 80124f6:	42b4      	cmp	r4, r6
 80124f8:	d31f      	bcc.n	801253a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80124fa:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
 80124fe:	b007      	add	sp, #28
 8012500:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8012504:	f7ff bc64 	b.w	8011dd0 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8012508:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801250c:	9304      	str	r3, [sp, #16]
 801250e:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8012512:	9303      	str	r3, [sp, #12]
 8012514:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8012518:	9302      	str	r3, [sp, #8]
 801251a:	f854 3c18 	ldr.w	r3, [r4, #-24]
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
 801252a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801252c:	f7f0 fd5c 	bl	8002fe8 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8012530:	f854 3c2c 	ldr.w	r3, [r4, #-44]
 8012534:	64dd      	str	r5, [r3, #76]	; 0x4c
 8012536:	4625      	mov	r5, r4
 8012538:	e7cd      	b.n	80124d6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 801253a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801253c:	1c4b      	adds	r3, r1, #1
 801253e:	d003      	beq.n	8012548 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
 8012540:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 8012542:	b919      	cbnz	r1, 801254c <_init_static_threads+0x80>
 8012544:	f7ff feee 	bl	8012324 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8012548:	342c      	adds	r4, #44	; 0x2c
 801254a:	e7d4      	b.n	80124f6 <_init_static_threads+0x2a>
 801254c:	f7ff ff28 	bl	80123a0 <schedule_new_thread.part.13>
 8012550:	e7fa      	b.n	8012548 <_init_static_threads+0x7c>
 8012552:	bf00      	nop
 8012554:	20006474 	.word	0x20006474
 8012558:	20006474 	.word	0x20006474
 801255c:	20001340 	.word	0x20001340

08012560 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8012560:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
 8012562:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
 8012564:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
 8012566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
 801256a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
 801256c:	72c3      	strb	r3, [r0, #11]
 801256e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
 8012570:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
 8012572:	6183      	str	r3, [r0, #24]
	t->func = func;
 8012574:	6243      	str	r3, [r0, #36]	; 0x24
 8012576:	4770      	bx	lr

08012578 <k_work_submit_to_queue>:
{
 8012578:	b500      	push	{lr}
 801257a:	f101 0308 	add.w	r3, r1, #8
 801257e:	f3bf 8f5b 	dmb	ish
 8012582:	e853 2f00 	ldrex	r2, [r3]
 8012586:	f042 0e01 	orr.w	lr, r2, #1
 801258a:	e843 ec00 	strex	ip, lr, [r3]
 801258e:	f1bc 0f00 	cmp.w	ip, #0
 8012592:	d1f6      	bne.n	8012582 <k_work_submit_to_queue+0xa>
 8012594:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
 8012598:	07d3      	lsls	r3, r2, #31
 801259a:	d403      	bmi.n	80125a4 <k_work_submit_to_queue+0x2c>
}
 801259c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
 80125a0:	f7ff ba85 	b.w	8011aae <k_queue_append>
 80125a4:	f85d fb04 	ldr.w	pc, [sp], #4

080125a8 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
 80125a8:	f1a0 010c 	sub.w	r1, r0, #12
 80125ac:	6980      	ldr	r0, [r0, #24]
 80125ae:	f7ff bfe3 	b.w	8012578 <k_work_submit_to_queue>

080125b2 <work_q_main>:
{
 80125b2:	b510      	push	{r4, lr}
 80125b4:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
 80125b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80125ba:	4620      	mov	r0, r4
 80125bc:	f7ff fa9b 	bl	8011af6 <k_queue_get>
		if (!work) {
 80125c0:	4603      	mov	r3, r0
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d0f7      	beq.n	80125b6 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 80125c6:	3308      	adds	r3, #8
		handler = work->handler;
 80125c8:	6842      	ldr	r2, [r0, #4]
 80125ca:	f3bf 8f5b 	dmb	ish
 80125ce:	e853 1f00 	ldrex	r1, [r3]
 80125d2:	f021 0e01 	bic.w	lr, r1, #1
 80125d6:	e843 ec00 	strex	ip, lr, [r3]
 80125da:	f1bc 0f00 	cmp.w	ip, #0
 80125de:	d1f6      	bne.n	80125ce <work_q_main+0x1c>
 80125e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
 80125e4:	07cb      	lsls	r3, r1, #31
 80125e6:	d500      	bpl.n	80125ea <work_q_main+0x38>
			handler(work);
 80125e8:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
 80125ea:	f7ff fc2b 	bl	8011e44 <_impl_k_yield>
 80125ee:	e7e2      	b.n	80125b6 <work_q_main+0x4>

080125f0 <k_work_q_start>:
{
 80125f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f2:	b087      	sub	sp, #28
 80125f4:	4604      	mov	r4, r0
 80125f6:	461f      	mov	r7, r3
 80125f8:	460d      	mov	r5, r1
 80125fa:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
 80125fc:	f7ff fa10 	bl	8011a20 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
 8012600:	2000      	movs	r0, #0
 8012602:	9005      	str	r0, [sp, #20]
 8012604:	9004      	str	r0, [sp, #16]
 8012606:	9002      	str	r0, [sp, #8]
 8012608:	9001      	str	r0, [sp, #4]
 801260a:	9703      	str	r7, [sp, #12]
 801260c:	9400      	str	r4, [sp, #0]
 801260e:	4b04      	ldr	r3, [pc, #16]	; (8012620 <k_work_q_start+0x30>)
 8012610:	4632      	mov	r2, r6
 8012612:	4629      	mov	r1, r5
 8012614:	f104 0010 	add.w	r0, r4, #16
 8012618:	f7ff ff14 	bl	8012444 <_impl_k_thread_create>
}
 801261c:	b007      	add	sp, #28
 801261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012620:	080125b3 	.word	0x080125b3

08012624 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
 8012624:	b500      	push	{lr}
 8012626:	f100 0308 	add.w	r3, r0, #8
 801262a:	f3bf 8f5b 	dmb	ish
 801262e:	e853 2f00 	ldrex	r2, [r3]
 8012632:	f022 0201 	bic.w	r2, r2, #1
 8012636:	e843 2e00 	strex	lr, r2, [r3]
 801263a:	f1be 0f00 	cmp.w	lr, #0
 801263e:	d1f6      	bne.n	801262e <k_delayed_work_init+0xa>
 8012640:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
 8012644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012648:	61c3      	str	r3, [r0, #28]
	t->func = func;
 801264a:	4a04      	ldr	r2, [pc, #16]	; (801265c <k_delayed_work_init+0x38>)
	work->handler = handler;
 801264c:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
 8012652:	6143      	str	r3, [r0, #20]
	t->func = func;
 8012654:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
 8012656:	6243      	str	r3, [r0, #36]	; 0x24
 8012658:	f85d fb04 	ldr.w	pc, [sp], #4
 801265c:	080125a9 	.word	0x080125a9

08012660 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
 8012660:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
 8012662:	f04f 0310 	mov.w	r3, #16
 8012666:	f3ef 8411 	mrs	r4, BASEPRI
 801266a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
 801266e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012670:	b923      	cbnz	r3, 801267c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012672:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
 8012676:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
 801267a:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801267c:	f3bf 8f5b 	dmb	ish
 8012680:	6883      	ldr	r3, [r0, #8]
 8012682:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
 8012686:	07da      	lsls	r2, r3, #31
 8012688:	d51d      	bpl.n	80126c6 <k_delayed_work_cancel+0x66>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
 801268a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801268c:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
 801268e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 8012690:	2b00      	cmp	r3, #0
 8012692:	d0ee      	beq.n	8012672 <k_delayed_work_cancel+0x12>
		if (test == node) {
 8012694:	4298      	cmp	r0, r3
 8012696:	d113      	bne.n	80126c0 <k_delayed_work_cancel+0x60>
 8012698:	6803      	ldr	r3, [r0, #0]
 801269a:	6855      	ldr	r5, [r2, #4]
	if (!prev_node) {
 801269c:	b959      	cbnz	r1, 80126b6 <k_delayed_work_cancel+0x56>
		if (list->tail == node) {
 801269e:	42a8      	cmp	r0, r5
		list->head = node->next;
 80126a0:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
 80126a2:	d100      	bne.n	80126a6 <k_delayed_work_cancel+0x46>
			list->tail = list->head;
 80126a4:	6053      	str	r3, [r2, #4]
	node->next = NULL;
 80126a6:	2300      	movs	r3, #0
 80126a8:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	6243      	str	r3, [r0, #36]	; 0x24
 80126ae:	f384 8811 	msr	BASEPRI, r4
	return 0;
 80126b2:	4618      	mov	r0, r3
 80126b4:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
 80126b6:	42a8      	cmp	r0, r5
		prev_node->next = node->next;
 80126b8:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
 80126ba:	bf08      	it	eq
 80126bc:	6051      	streq	r1, [r2, #4]
 80126be:	e7f2      	b.n	80126a6 <k_delayed_work_cancel+0x46>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
 80126c0:	4619      	mov	r1, r3
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	e7e4      	b.n	8012690 <k_delayed_work_cancel+0x30>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 80126c6:	69c1      	ldr	r1, [r0, #28]
 80126c8:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
 80126ca:	f100 020c 	add.w	r2, r0, #12
 80126ce:	d0ec      	beq.n	80126aa <k_delayed_work_cancel+0x4a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 80126d0:	4b08      	ldr	r3, [pc, #32]	; (80126f4 <k_delayed_work_cancel+0x94>)
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
 80126d6:	bf1f      	itttt	ne
 80126d8:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 80126da:	6913      	ldrne	r3, [r2, #16]
 80126dc:	185b      	addne	r3, r3, r1
 80126de:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
 80126e0:	6903      	ldr	r3, [r0, #16]
 80126e2:	68c2      	ldr	r2, [r0, #12]
 80126e4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 80126e6:	68c2      	ldr	r2, [r0, #12]
 80126e8:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
 80126ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126ee:	61c3      	str	r3, [r0, #28]
 80126f0:	e7db      	b.n	80126aa <k_delayed_work_cancel+0x4a>
 80126f2:	bf00      	nop
 80126f4:	20001340 	.word	0x20001340

080126f8 <k_delayed_work_submit_to_queue>:
{
 80126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fa:	4607      	mov	r7, r0
 80126fc:	460c      	mov	r4, r1
 80126fe:	4616      	mov	r6, r2
	__asm__ volatile(
 8012700:	f04f 0310 	mov.w	r3, #16
 8012704:	f3ef 8511 	mrs	r5, BASEPRI
 8012708:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
 801270c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801270e:	b123      	cbz	r3, 801271a <k_delayed_work_submit_to_queue+0x22>
 8012710:	4283      	cmp	r3, r0
 8012712:	d00c      	beq.n	801272e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
 8012714:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8012718:	e00e      	b.n	8012738 <k_delayed_work_submit_to_queue+0x40>
	if (work->work_q == work_q) {
 801271a:	b140      	cbz	r0, 801272e <k_delayed_work_submit_to_queue+0x36>
	work->work_q = work_q;
 801271c:	6267      	str	r7, [r4, #36]	; 0x24
 801271e:	2300      	movs	r3, #0
	if (!delay) {
 8012720:	b96e      	cbnz	r6, 801273e <k_delayed_work_submit_to_queue+0x46>
		k_work_submit_to_queue(work_q, &work->work);
 8012722:	4621      	mov	r1, r4
 8012724:	4638      	mov	r0, r7
 8012726:	f7ff ff27 	bl	8012578 <k_work_submit_to_queue>
	err = 0;
 801272a:	2000      	movs	r0, #0
 801272c:	e004      	b.n	8012738 <k_delayed_work_submit_to_queue+0x40>
		err = k_delayed_work_cancel(work);
 801272e:	4620      	mov	r0, r4
 8012730:	f7ff ff96 	bl	8012660 <k_delayed_work_cancel>
		if (err < 0) {
 8012734:	2800      	cmp	r0, #0
 8012736:	daf1      	bge.n	801271c <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012738:	f385 8811 	msr	BASEPRI, r5
}
 801273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_add_timeout(NULL, &work->timeout, NULL,
 801273e:	3601      	adds	r6, #1
 8012740:	f104 000c 	add.w	r0, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
 8012744:	61e6      	str	r6, [r4, #28]
	timeout->thread = thread;
 8012746:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
 8012748:	61a3      	str	r3, [r4, #24]
	if (!timeout_in_ticks) {
 801274a:	b976      	cbnz	r6, 801276a <k_delayed_work_submit_to_queue+0x72>
	__asm__ volatile(
 801274c:	f04f 0210 	mov.w	r2, #16
 8012750:	f3ef 8311 	mrs	r3, BASEPRI
 8012754:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
 8012758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801275c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 801275e:	f383 8811 	msr	BASEPRI, r3
		if (timeout->func) {
 8012762:	6a22      	ldr	r2, [r4, #32]
 8012764:	b33a      	cbz	r2, 80127b6 <k_delayed_work_submit_to_queue+0xbe>
			timeout->func(timeout);
 8012766:	4790      	blx	r2
 8012768:	e7df      	b.n	801272a <k_delayed_work_submit_to_queue+0x32>
	return list->head == list;
 801276a:	4a14      	ldr	r2, [pc, #80]	; (80127bc <k_delayed_work_submit_to_queue+0xc4>)
 801276c:	4611      	mov	r1, r2
 801276e:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012772:	428b      	cmp	r3, r1
 8012774:	d106      	bne.n	8012784 <k_delayed_work_submit_to_queue+0x8c>
	node->next = list;
 8012776:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
 8012778:	6913      	ldr	r3, [r2, #16]
 801277a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
 801277c:	6913      	ldr	r3, [r2, #16]
 801277e:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8012780:	6110      	str	r0, [r2, #16]
 8012782:	e7d2      	b.n	801272a <k_delayed_work_submit_to_queue+0x32>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 8012784:	2b00      	cmp	r3, #0
 8012786:	d0f6      	beq.n	8012776 <k_delayed_work_submit_to_queue+0x7e>
 8012788:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
 801278c:	69e6      	ldr	r6, [r4, #28]
 801278e:	691f      	ldr	r7, [r3, #16]
 8012790:	42be      	cmp	r6, r7
 8012792:	dc08      	bgt.n	80127a6 <k_delayed_work_submit_to_queue+0xae>
		node->prev = insert_point->prev;
 8012794:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
 8012796:	1bbe      	subs	r6, r7, r6
 8012798:	611e      	str	r6, [r3, #16]
 801279a:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
 801279c:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
 801279e:	685a      	ldr	r2, [r3, #4]
 80127a0:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
 80127a2:	6058      	str	r0, [r3, #4]
 80127a4:	e7c1      	b.n	801272a <k_delayed_work_submit_to_queue+0x32>
		*delta -= in_q->delta_ticks_from_prev;
 80127a6:	1bf6      	subs	r6, r6, r7
	return (node == list->tail) ? NULL : node->next;
 80127a8:	4573      	cmp	r3, lr
 80127aa:	61e6      	str	r6, [r4, #28]
 80127ac:	d0e3      	beq.n	8012776 <k_delayed_work_submit_to_queue+0x7e>
 80127ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1eb      	bne.n	801278c <k_delayed_work_submit_to_queue+0x94>
 80127b4:	e7df      	b.n	8012776 <k_delayed_work_submit_to_queue+0x7e>
	err = 0;
 80127b6:	4610      	mov	r0, r2
 80127b8:	e7be      	b.n	8012738 <k_delayed_work_submit_to_queue+0x40>
 80127ba:	bf00      	nop
 80127bc:	20001340 	.word	0x20001340

080127c0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
 80127c0:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
 80127c2:	f04f 0310 	mov.w	r3, #16
 80127c6:	f3ef 8411 	mrs	r4, BASEPRI
 80127ca:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 80127ce:	6903      	ldr	r3, [r0, #16]
 80127d0:	3301      	adds	r3, #1
 80127d2:	d014      	beq.n	80127fe <_timeout_remaining_get+0x3e>
	return list->head == list;
 80127d4:	490c      	ldr	r1, [pc, #48]	; (8012808 <_timeout_remaining_get+0x48>)
 80127d6:	460a      	mov	r2, r1
 80127d8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80127dc:	4293      	cmp	r3, r2
 80127de:	d010      	beq.n	8012802 <_timeout_remaining_get+0x42>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
 80127e0:	691a      	ldr	r2, [r3, #16]
 80127e2:	6909      	ldr	r1, [r1, #16]
		while (t != timeout) {
 80127e4:	4283      	cmp	r3, r0
 80127e6:	d103      	bne.n	80127f0 <_timeout_remaining_get+0x30>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80127e8:	f384 8811 	msr	BASEPRI, r4
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
 80127ec:	4610      	mov	r0, r2
 80127ee:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80127f0:	b13b      	cbz	r3, 8012802 <_timeout_remaining_get+0x42>
	return (node == list->tail) ? NULL : node->next;
 80127f2:	428b      	cmp	r3, r1
 80127f4:	d005      	beq.n	8012802 <_timeout_remaining_get+0x42>
 80127f6:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
 80127f8:	691d      	ldr	r5, [r3, #16]
 80127fa:	442a      	add	r2, r5
 80127fc:	e7f2      	b.n	80127e4 <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
 80127fe:	2200      	movs	r2, #0
 8012800:	e7f2      	b.n	80127e8 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
 8012802:	2300      	movs	r3, #0
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	deff      	udf	#255	; 0xff
 8012808:	20001340 	.word	0x20001340

0801280c <sys_dlist_remove>:
	node->prev->next = node->next;
 801280c:	e890 000c 	ldmia.w	r0, {r2, r3}
 8012810:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
 8012812:	6802      	ldr	r2, [r0, #0]
 8012814:	6053      	str	r3, [r2, #4]
 8012816:	4770      	bx	lr

08012818 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	2414      	movs	r4, #20
 801281c:	4615      	mov	r5, r2
 801281e:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
 8012822:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
 8012824:	2900      	cmp	r1, #0
 8012826:	da00      	bge.n	801282a <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
 8012828:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
 801282a:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
 801282c:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
 801282e:	f003 030f 	and.w	r3, r3, #15
 8012832:	2b02      	cmp	r3, #2
 8012834:	d003      	beq.n	801283e <clear_event_registrations+0x26>
 8012836:	2b04      	cmp	r3, #4
 8012838:	d001      	beq.n	801283e <clear_event_registrations+0x26>
 801283a:	2b01      	cmp	r3, #1
 801283c:	d102      	bne.n	8012844 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
 801283e:	4620      	mov	r0, r4
 8012840:	f7ff ffe4 	bl	801280c <sys_dlist_remove>
 8012844:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
 8012848:	f04f 0310 	mov.w	r3, #16
 801284c:	f3ef 8511 	mrs	r5, BASEPRI
 8012850:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
 8012854:	3901      	subs	r1, #1
 8012856:	3c14      	subs	r4, #20
 8012858:	e7e4      	b.n	8012824 <clear_event_registrations+0xc>
	...

0801285c <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
 801285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
 801285e:	2300      	movs	r3, #0
 8012860:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
 8012862:	6883      	ldr	r3, [r0, #8]
{
 8012864:	4605      	mov	r5, r0
 8012866:	460e      	mov	r6, r1
 8012868:	4617      	mov	r7, r2
	if (!event->poller) {
 801286a:	2b00      	cmp	r3, #0
 801286c:	d049      	beq.n	8012902 <_signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
 801286e:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
 8012870:	7a4b      	ldrb	r3, [r1, #9]
 8012872:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
 8012876:	0798      	lsls	r0, r3, #30
 8012878:	724a      	strb	r2, [r1, #9]
 801287a:	d542      	bpl.n	8012902 <_signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
 801287c:	6a0b      	ldr	r3, [r1, #32]
 801287e:	3302      	adds	r3, #2
 8012880:	d04a      	beq.n	8012918 <_signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
 8012882:	4608      	mov	r0, r1
 8012884:	f7ff ffc2 	bl	801280c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8012888:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 801288a:	6a0c      	ldr	r4, [r1, #32]
 801288c:	f023 0302 	bic.w	r3, r3, #2
 8012890:	1c62      	adds	r2, r4, #1
 8012892:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
 8012894:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
 8012898:	d00c      	beq.n	80128b4 <_signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
 801289a:	4b21      	ldr	r3, [pc, #132]	; (8012920 <_signal_poll_event+0xc4>)
 801289c:	691b      	ldr	r3, [r3, #16]
 801289e:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
 80128a0:	bf1f      	itttt	ne
 80128a2:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
 80128a4:	6913      	ldrne	r3, [r2, #16]
 80128a6:	191b      	addne	r3, r3, r4
 80128a8:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
 80128aa:	f7ff ffaf 	bl	801280c <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
 80128ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128b2:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
 80128b4:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
 80128b6:	2e00      	cmp	r6, #0
 80128b8:	bf0c      	ite	eq
 80128ba:	f06f 0303 	mvneq.w	r3, #3
 80128be:	2300      	movne	r3, #0
 80128c0:	f010 041f 	ands.w	r4, r0, #31
 80128c4:	664b      	str	r3, [r1, #100]	; 0x64
 80128c6:	d11c      	bne.n	8012902 <_signal_poll_event+0xa6>
 80128c8:	6a0b      	ldr	r3, [r1, #32]
 80128ca:	3301      	adds	r3, #1
 80128cc:	d119      	bne.n	8012902 <_signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
 80128ce:	4608      	mov	r0, r1
 80128d0:	f7ff f958 	bl	8011b84 <_add_thread_to_ready_q>
 80128d4:	f3ef 8305 	mrs	r3, IPSR
 80128d8:	2b0d      	cmp	r3, #13
 80128da:	d81b      	bhi.n	8012914 <_signal_poll_event+0xb8>
 80128dc:	b123      	cbz	r3, 80128e8 <_signal_poll_event+0x8c>
 80128de:	4b11      	ldr	r3, [pc, #68]	; (8012924 <_signal_poll_event+0xc8>)
 80128e0:	6858      	ldr	r0, [r3, #4]
 80128e2:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 80128e6:	d00b      	beq.n	8012900 <_signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
 80128e8:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <_signal_poll_event+0xc4>)
 80128ea:	689b      	ldr	r3, [r3, #8]
 80128ec:	895b      	ldrh	r3, [r3, #10]
 80128ee:	2b7f      	cmp	r3, #127	; 0x7f
 80128f0:	d901      	bls.n	80128f6 <_signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
 80128f2:	2000      	movs	r0, #0
 80128f4:	e004      	b.n	8012900 <_signal_poll_event+0xa4>
 80128f6:	f7ff fa3b 	bl	8011d70 <__must_switch_threads>
 80128fa:	3000      	adds	r0, #0
 80128fc:	bf18      	it	ne
 80128fe:	2001      	movne	r0, #1
 8012900:	6038      	str	r0, [r7, #0]
	event->state |= state;
 8012902:	7b6b      	ldrb	r3, [r5, #13]
 8012904:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
 8012908:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
 801290c:	2000      	movs	r0, #0
	event->state |= state;
 801290e:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
 8012910:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
 8012912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
 8012914:	4620      	mov	r0, r4
 8012916:	e7f3      	b.n	8012900 <_signal_poll_event+0xa4>
		return -EAGAIN;
 8012918:	f06f 000a 	mvn.w	r0, #10
 801291c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801291e:	bf00      	nop
 8012920:	20001340 	.word	0x20001340
 8012924:	e000ed00 	.word	0xe000ed00

08012928 <add_event>:
	return list->head == list;
 8012928:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 801292a:	4298      	cmp	r0, r3
{
 801292c:	b530      	push	{r4, r5, lr}
 801292e:	d00a      	beq.n	8012946 <add_event+0x1e>
 8012930:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
 8012932:	b144      	cbz	r4, 8012946 <add_event+0x1e>
 8012934:	68a5      	ldr	r5, [r4, #8]
 8012936:	6812      	ldr	r2, [r2, #0]
 8012938:	682d      	ldr	r5, [r5, #0]
 801293a:	f992 200a 	ldrsb.w	r2, [r2, #10]
 801293e:	f995 500a 	ldrsb.w	r5, [r5, #10]
 8012942:	4295      	cmp	r5, r2
 8012944:	da17      	bge.n	8012976 <add_event+0x4e>
	node->next = list;
 8012946:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
 8012948:	6843      	ldr	r3, [r0, #4]
 801294a:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
 801294c:	6843      	ldr	r3, [r0, #4]
 801294e:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8012950:	6041      	str	r1, [r0, #4]
 8012952:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
 8012954:	689d      	ldr	r5, [r3, #8]
 8012956:	682d      	ldr	r5, [r5, #0]
 8012958:	f995 500a 	ldrsb.w	r5, [r5, #10]
 801295c:	4295      	cmp	r5, r2
 801295e:	dd06      	ble.n	801296e <add_event+0x46>
		node->prev = insert_point->prev;
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
 8012964:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
 8012966:	685a      	ldr	r2, [r3, #4]
 8012968:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
 801296a:	6059      	str	r1, [r3, #4]
 801296c:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
 801296e:	42a3      	cmp	r3, r4
 8012970:	d003      	beq.n	801297a <add_event+0x52>
 8012972:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8012974:	b10b      	cbz	r3, 801297a <add_event+0x52>
 8012976:	2b00      	cmp	r3, #0
 8012978:	d1ec      	bne.n	8012954 <add_event+0x2c>
	node->prev = list->tail;
 801297a:	e881 0011 	stmia.w	r1, {r0, r4}
 801297e:	e7e5      	b.n	801294c <add_event+0x24>

08012980 <k_poll_event_init>:
{
 8012980:	b530      	push	{r4, r5, lr}
	event->type = type;
 8012982:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
 8012984:	6103      	str	r3, [r0, #16]
	event->type = type;
 8012986:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
 801298a:	7b81      	ldrb	r1, [r0, #14]
 801298c:	f362 0100 	bfi	r1, r2, #0, #1
 8012990:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
 8012992:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
 8012994:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
 8012996:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
 801299a:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
 801299e:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
 80129a0:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
 80129a2:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 80129a4:	bd30      	pop	{r4, r5, pc}
	...

080129a8 <k_poll>:
{
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	b087      	sub	sp, #28
 80129ae:	4680      	mov	r8, r0
 80129b0:	9101      	str	r1, [sp, #4]
 80129b2:	4691      	mov	r9, r2
 80129b4:	f04f 0310 	mov.w	r3, #16
 80129b8:	f3ef 8111 	mrs	r1, BASEPRI
 80129bc:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
 80129c0:	4d4a      	ldr	r5, [pc, #296]	; (8012aec <k_poll+0x144>)
 80129c2:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
 80129c4:	7a53      	ldrb	r3, [r2, #9]
 80129c6:	f043 0320 	orr.w	r3, r3, #32
 80129ca:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 80129cc:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
 80129d0:	f10d 0a18 	add.w	sl, sp, #24
 80129d4:	68aa      	ldr	r2, [r5, #8]
 80129d6:	f84a 2d0c 	str.w	r2, [sl, #-12]!
 80129da:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
 80129dc:	2700      	movs	r7, #0
	int last_registered = -1, rc;
 80129de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
 80129e2:	9b01      	ldr	r3, [sp, #4]
 80129e4:	429f      	cmp	r7, r3
 80129e6:	db15      	blt.n	8012a14 <k_poll+0x6c>
	__asm__ volatile(
 80129e8:	f04f 0310 	mov.w	r3, #16
 80129ec:	f3ef 8711 	mrs	r7, BASEPRI
 80129f0:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
 80129f4:	68aa      	ldr	r2, [r5, #8]
 80129f6:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
 80129f8:	f013 0420 	ands.w	r4, r3, #32
 80129fc:	d144      	bne.n	8012a88 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
 80129fe:	463a      	mov	r2, r7
 8012a00:	4631      	mov	r1, r6
 8012a02:	4640      	mov	r0, r8
 8012a04:	f7ff ff08 	bl	8012818 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012a08:	f387 8811 	msr	BASEPRI, r7
}
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	b007      	add	sp, #28
 8012a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
 8012a14:	f04f 0210 	mov.w	r2, #16
 8012a18:	f3ef 8b11 	mrs	fp, BASEPRI
 8012a1c:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
 8012a20:	7b61      	ldrb	r1, [r4, #13]
 8012a22:	f001 020f 	and.w	r2, r1, #15
 8012a26:	2a02      	cmp	r2, #2
 8012a28:	d003      	beq.n	8012a32 <k_poll+0x8a>
 8012a2a:	2a04      	cmp	r2, #4
 8012a2c:	d004      	beq.n	8012a38 <k_poll+0x90>
 8012a2e:	2a01      	cmp	r2, #1
 8012a30:	d106      	bne.n	8012a40 <k_poll+0x98>
		if (event->signal->signaled) {
 8012a32:	6920      	ldr	r0, [r4, #16]
 8012a34:	6880      	ldr	r0, [r0, #8]
 8012a36:	e001      	b.n	8012a3c <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
 8012a38:	6920      	ldr	r0, [r4, #16]
 8012a3a:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d148      	bne.n	8012ad2 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
 8012a40:	f1b9 0f00 	cmp.w	r9, #0
 8012a44:	d016      	beq.n	8012a74 <k_poll+0xcc>
 8012a46:	68a9      	ldr	r1, [r5, #8]
 8012a48:	7a49      	ldrb	r1, [r1, #9]
 8012a4a:	068b      	lsls	r3, r1, #26
 8012a4c:	d512      	bpl.n	8012a74 <k_poll+0xcc>
	switch (event->type) {
 8012a4e:	2a02      	cmp	r2, #2
 8012a50:	d007      	beq.n	8012a62 <k_poll+0xba>
 8012a52:	2a04      	cmp	r2, #4
 8012a54:	d013      	beq.n	8012a7e <k_poll+0xd6>
 8012a56:	2a01      	cmp	r2, #1
 8012a58:	d109      	bne.n	8012a6e <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
 8012a5a:	4652      	mov	r2, sl
 8012a5c:	4621      	mov	r1, r4
 8012a5e:	6920      	ldr	r0, [r4, #16]
 8012a60:	e003      	b.n	8012a6a <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
 8012a62:	6920      	ldr	r0, [r4, #16]
 8012a64:	4652      	mov	r2, sl
 8012a66:	4621      	mov	r1, r4
 8012a68:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
 8012a6a:	f7ff ff5d 	bl	8012928 <add_event>
	event->poller = poller;
 8012a6e:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
 8012a72:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012a74:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
 8012a78:	3701      	adds	r7, #1
 8012a7a:	3414      	adds	r4, #20
 8012a7c:	e7b1      	b.n	80129e2 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
 8012a7e:	6920      	ldr	r0, [r4, #16]
 8012a80:	4652      	mov	r2, sl
 8012a82:	4621      	mov	r1, r4
 8012a84:	3008      	adds	r0, #8
 8012a86:	e7f0      	b.n	8012a6a <k_poll+0xc2>
	thread->base.thread_state &= ~states;
 8012a88:	f023 0320 	bic.w	r3, r3, #32
 8012a8c:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
 8012a8e:	f1b9 0f00 	cmp.w	r9, #0
 8012a92:	d104      	bne.n	8012a9e <k_poll+0xf6>
 8012a94:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
 8012a98:	f06f 040a 	mvn.w	r4, #10
 8012a9c:	e7b6      	b.n	8012a0c <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
 8012a9e:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
 8012aa0:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
 8012aa2:	9004      	str	r0, [sp, #16]
 8012aa4:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
 8012aa6:	f7ff f953 	bl	8011d50 <_pend_current_thread>
	_update_time_slice_before_swap();
 8012aaa:	f7ff fa37 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8012aae:	4638      	mov	r0, r7
 8012ab0:	f7f0 f916 	bl	8002ce0 <__swap>
 8012ab4:	4604      	mov	r4, r0
	__asm__ volatile(
 8012ab6:	f04f 0310 	mov.w	r3, #16
 8012aba:	f3ef 8511 	mrs	r5, BASEPRI
 8012abe:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
 8012ac2:	462a      	mov	r2, r5
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	4640      	mov	r0, r8
 8012ac8:	f7ff fea6 	bl	8012818 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012acc:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
 8012ad0:	e79c      	b.n	8012a0c <k_poll+0x64>
	event->state |= state;
 8012ad2:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
 8012ad6:	f362 1107 	bfi	r1, r2, #4, #4
 8012ada:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
 8012adc:	68a9      	ldr	r1, [r5, #8]
	event->poller = NULL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	60a3      	str	r3, [r4, #8]
 8012ae2:	7a4a      	ldrb	r2, [r1, #9]
 8012ae4:	f022 0220 	bic.w	r2, r2, #32
 8012ae8:	724a      	strb	r2, [r1, #9]
 8012aea:	e7c3      	b.n	8012a74 <k_poll+0xcc>
 8012aec:	20001340 	.word	0x20001340

08012af0 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
 8012af0:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
 8012af2:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
 8012af4:	42a0      	cmp	r0, r4
 8012af6:	d102      	bne.n	8012afe <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
 8012af8:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
 8012afa:	b002      	add	sp, #8
 8012afc:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
 8012afe:	4620      	mov	r0, r4
 8012b00:	f7ff fe84 	bl	801280c <sys_dlist_remove>
	if (!poll_event) {
 8012b04:	2c00      	cmp	r4, #0
 8012b06:	d0f7      	beq.n	8012af8 <_handle_obj_poll_events+0x8>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
 8012b08:	aa01      	add	r2, sp, #4
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f7ff fea6 	bl	801285c <_signal_poll_event>
	return must_reschedule;
 8012b10:	9801      	ldr	r0, [sp, #4]
 8012b12:	e7f2      	b.n	8012afa <_handle_obj_poll_events+0xa>

08012b14 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
 8012b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
 8012b16:	f04f 0310 	mov.w	r3, #16
 8012b1a:	f3ef 8511 	mrs	r5, BASEPRI
 8012b1e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
 8012b22:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
 8012b24:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
 8012b26:	42a0      	cmp	r0, r4
	signal->signaled = 1;
 8012b28:	f04f 0101 	mov.w	r1, #1
 8012b2c:	6081      	str	r1, [r0, #8]
 8012b2e:	d105      	bne.n	8012b3c <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
 8012b30:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
 8012b34:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
 8012b36:	4620      	mov	r0, r4
 8012b38:	b003      	add	sp, #12
 8012b3a:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f7ff fe65 	bl	801280c <sys_dlist_remove>
	if (!poll_event) {
 8012b42:	2c00      	cmp	r4, #0
 8012b44:	d0f4      	beq.n	8012b30 <k_poll_signal+0x1c>
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
 8012b46:	4620      	mov	r0, r4
 8012b48:	aa01      	add	r2, sp, #4
 8012b4a:	f7ff fe87 	bl	801285c <_signal_poll_event>
	if (must_reschedule) {
 8012b4e:	9b01      	ldr	r3, [sp, #4]
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
 8012b50:	4604      	mov	r4, r0
	if (must_reschedule) {
 8012b52:	b12b      	cbz	r3, 8012b60 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
 8012b54:	f7ff f9e2 	bl	8011f1c <_update_time_slice_before_swap>
	return __swap(key);
 8012b58:	4628      	mov	r0, r5
 8012b5a:	f7f0 f8c1 	bl	8002ce0 <__swap>
 8012b5e:	e7ea      	b.n	8012b36 <k_poll_signal+0x22>
 8012b60:	f385 8811 	msr	BASEPRI, r5
 8012b64:	e7e7      	b.n	8012b36 <k_poll_signal+0x22>

08012b66 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8012b66:	b508      	push	{r3, lr}
	__asm__ volatile(
 8012b68:	f04f 0210 	mov.w	r2, #16
 8012b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8012b70:	f382 8811 	msr	BASEPRI, r2
	k_cpu_idle();
 8012b74:	f7f0 fa66 	bl	8003044 <k_cpu_idle>
 8012b78:	e7f6      	b.n	8012b68 <idle+0x2>

08012b7a <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
 8012b7a:	4770      	bx	lr
