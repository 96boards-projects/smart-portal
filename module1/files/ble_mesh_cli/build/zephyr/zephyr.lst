
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20004c08 	.word	0x20004c08

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00001019 	.word	0x00001019
       8:	00001069 	.word	0x00001069
       c:	00000eb1 	.word	0x00000eb1
      10:	00000eb1 	.word	0x00000eb1
      14:	00000eb1 	.word	0x00000eb1
      18:	00000eb1 	.word	0x00000eb1
      1c:	00000eb1 	.word	0x00000eb1
      20:	00000eb1 	.word	0x00000eb1
      24:	00000eb1 	.word	0x00000eb1
      28:	00000eb1 	.word	0x00000eb1
      2c:	00000ab1 	.word	0x00000ab1
      30:	00000eb1 	.word	0x00000eb1
      34:	00000eb1 	.word	0x00000eb1
      38:	00000a6d 	.word	0x00000a6d
      3c:	00000eb1 	.word	0x00000eb1

00000040 <_irq_vector_table>:
      40:	00000fdd 00016827 00000fdd 00000fdd     ....'h..........
      50:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      60:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      70:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      80:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      90:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      a0:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      b0:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      c0:	00000fdd 00000fdd 00000fdd 00000fdd     ................
      d0:	00000fdd 00000fdd 00000fdd              ............

000000dc <_sw_isr_table>:
      dc:	00000000 00002b6d 00000000 00000e29     ....m+......)...
      ec:	00000000 00000e29 00000000 00000e29     ....).......)...
      fc:	00000000 00000e29 00000000 00000e29     ....).......)...
     10c:	20006b34 000031a1 00000000 00000e29     4k. .1......)...
     11c:	00000000 00000e29 00000000 00000e29     ....).......)...
     12c:	00000000 00000e29 00000000 000167e9     ....)........g..
     13c:	00000000 00000e29 00000000 00016823     ....).......#h..
     14c:	00000000 00000e29 00000000 00000e29     ....).......)...
     15c:	00000000 00000e29 00000000 00003475     ....).......u4..
     16c:	00000000 00000e29 00000000 00000e29     ....).......)...
     17c:	00000000 00000e29 00000000 00000e29     ....).......)...
     18c:	00000000 00000e29 00000000 00000e29     ....).......)...
     19c:	00000000 0001681d 00000000 00000e29     .....h......)...
     1ac:	00000000 00000e29 00000000 00000e29     ....).......)...
     1bc:	00000000 00000e29 00000000 00000e29     ....).......)...
     1cc:	00000000 00000e29 00000000 00000e29     ....).......)...
     1dc:	00000000 00000e29 00000000 00000e29     ....).......)...
     1ec:	00000000 00000e29 00000000 00000e29     ....).......)...
     1fc:	00000000 00000e29 00000000 00000e29     ....).......)...
     20c:	00000000 00000e29                       ....)...

00000214 <__aeabi_llsl>:
     214:	4091      	lsls	r1, r2
     216:	1c03      	adds	r3, r0, #0
     218:	4090      	lsls	r0, r2
     21a:	469c      	mov	ip, r3
     21c:	3a20      	subs	r2, #32
     21e:	4093      	lsls	r3, r2
     220:	4319      	orrs	r1, r3
     222:	4252      	negs	r2, r2
     224:	4663      	mov	r3, ip
     226:	40d3      	lsrs	r3, r2
     228:	4319      	orrs	r1, r3
     22a:	4770      	bx	lr

0000022c <__aeabi_ldivmod>:
     22c:	b97b      	cbnz	r3, 24e <__aeabi_ldivmod+0x22>
     22e:	b972      	cbnz	r2, 24e <__aeabi_ldivmod+0x22>
     230:	2900      	cmp	r1, #0
     232:	bfbe      	ittt	lt
     234:	2000      	movlt	r0, #0
     236:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     23a:	e006      	blt.n	24a <__aeabi_ldivmod+0x1e>
     23c:	bf08      	it	eq
     23e:	2800      	cmpeq	r0, #0
     240:	bf1c      	itt	ne
     242:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     246:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     24a:	f000 b9d9 	b.w	600 <__aeabi_idiv0>
     24e:	f1ad 0c08 	sub.w	ip, sp, #8
     252:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     256:	2900      	cmp	r1, #0
     258:	db09      	blt.n	26e <__aeabi_ldivmod+0x42>
     25a:	2b00      	cmp	r3, #0
     25c:	db1a      	blt.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     25e:	f000 f861 	bl	324 <__udivmoddi4>
     262:	f8dd e004 	ldr.w	lr, [sp, #4]
     266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26a:	b004      	add	sp, #16
     26c:	4770      	bx	lr
     26e:	4240      	negs	r0, r0
     270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     274:	2b00      	cmp	r3, #0
     276:	db1b      	blt.n	2b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     278:	f000 f854 	bl	324 <__udivmoddi4>
     27c:	f8dd e004 	ldr.w	lr, [sp, #4]
     280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     284:	b004      	add	sp, #16
     286:	4240      	negs	r0, r0
     288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     28c:	4252      	negs	r2, r2
     28e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     292:	4770      	bx	lr
     294:	4252      	negs	r2, r2
     296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     29a:	f000 f843 	bl	324 <__udivmoddi4>
     29e:	f8dd e004 	ldr.w	lr, [sp, #4]
     2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2a6:	b004      	add	sp, #16
     2a8:	4240      	negs	r0, r0
     2aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2ae:	4770      	bx	lr
     2b0:	4252      	negs	r2, r2
     2b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2b6:	f000 f835 	bl	324 <__udivmoddi4>
     2ba:	f8dd e004 	ldr.w	lr, [sp, #4]
     2be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2c2:	b004      	add	sp, #16
     2c4:	4252      	negs	r2, r2
     2c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2ca:	4770      	bx	lr

000002cc <__aeabi_uldivmod>:
     2cc:	b953      	cbnz	r3, 2e4 <__aeabi_uldivmod+0x18>
     2ce:	b94a      	cbnz	r2, 2e4 <__aeabi_uldivmod+0x18>
     2d0:	2900      	cmp	r1, #0
     2d2:	bf08      	it	eq
     2d4:	2800      	cmpeq	r0, #0
     2d6:	bf1c      	itt	ne
     2d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2e0:	f000 b98e 	b.w	600 <__aeabi_idiv0>
     2e4:	f1ad 0c08 	sub.w	ip, sp, #8
     2e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2ec:	f000 f81a 	bl	324 <__udivmoddi4>
     2f0:	f8dd e004 	ldr.w	lr, [sp, #4]
     2f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2f8:	b004      	add	sp, #16
     2fa:	4770      	bx	lr

000002fc <__popcountsi2>:
     2fc:	0843      	lsrs	r3, r0, #1
     2fe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     302:	1ac0      	subs	r0, r0, r3
     304:	0883      	lsrs	r3, r0, #2
     306:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     30a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     30e:	4418      	add	r0, r3
     310:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     314:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     318:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     31c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     320:	0e00      	lsrs	r0, r0, #24
     322:	4770      	bx	lr

00000324 <__udivmoddi4>:
     324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     328:	468c      	mov	ip, r1
     32a:	460d      	mov	r5, r1
     32c:	4604      	mov	r4, r0
     32e:	9e08      	ldr	r6, [sp, #32]
     330:	2b00      	cmp	r3, #0
     332:	d151      	bne.n	3d8 <__udivmoddi4+0xb4>
     334:	428a      	cmp	r2, r1
     336:	4617      	mov	r7, r2
     338:	d96d      	bls.n	416 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x16>
     33a:	fab2 fe82 	clz	lr, r2
     33e:	f1be 0f00 	cmp.w	lr, #0
     342:	d00b      	beq.n	35c <__udivmoddi4+0x38>
     344:	f1ce 0c20 	rsb	ip, lr, #32
     348:	fa01 f50e 	lsl.w	r5, r1, lr
     34c:	fa20 fc0c 	lsr.w	ip, r0, ip
     350:	fa02 f70e 	lsl.w	r7, r2, lr
     354:	ea4c 0c05 	orr.w	ip, ip, r5
     358:	fa00 f40e 	lsl.w	r4, r0, lr
     35c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     360:	0c25      	lsrs	r5, r4, #16
     362:	fbbc f8fa 	udiv	r8, ip, sl
     366:	fa1f f987 	uxth.w	r9, r7
     36a:	fb0a cc18 	mls	ip, sl, r8, ip
     36e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     372:	fb08 f309 	mul.w	r3, r8, r9
     376:	42ab      	cmp	r3, r5
     378:	d90a      	bls.n	390 <__udivmoddi4+0x6c>
     37a:	19ed      	adds	r5, r5, r7
     37c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     380:	f080 8123 	bcs.w	5ca <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ca>
     384:	42ab      	cmp	r3, r5
     386:	f240 8120 	bls.w	5ca <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ca>
     38a:	f1a8 0802 	sub.w	r8, r8, #2
     38e:	443d      	add	r5, r7
     390:	1aed      	subs	r5, r5, r3
     392:	b2a4      	uxth	r4, r4
     394:	fbb5 f0fa 	udiv	r0, r5, sl
     398:	fb0a 5510 	mls	r5, sl, r0, r5
     39c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     3a0:	fb00 f909 	mul.w	r9, r0, r9
     3a4:	45a1      	cmp	r9, r4
     3a6:	d909      	bls.n	3bc <__udivmoddi4+0x98>
     3a8:	19e4      	adds	r4, r4, r7
     3aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3ae:	f080 810a 	bcs.w	5c6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1c6>
     3b2:	45a1      	cmp	r9, r4
     3b4:	f240 8107 	bls.w	5c6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1c6>
     3b8:	3802      	subs	r0, #2
     3ba:	443c      	add	r4, r7
     3bc:	eba4 0409 	sub.w	r4, r4, r9
     3c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3c4:	2100      	movs	r1, #0
     3c6:	2e00      	cmp	r6, #0
     3c8:	d061      	beq.n	48e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x8e>
     3ca:	fa24 f40e 	lsr.w	r4, r4, lr
     3ce:	2300      	movs	r3, #0
     3d0:	6034      	str	r4, [r6, #0]
     3d2:	6073      	str	r3, [r6, #4]
     3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3d8:	428b      	cmp	r3, r1
     3da:	d907      	bls.n	3ec <__udivmoddi4+0xc8>
     3dc:	2e00      	cmp	r6, #0
     3de:	d054      	beq.n	48a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x8a>
     3e0:	2100      	movs	r1, #0
     3e2:	e886 0021 	stmia.w	r6, {r0, r5}
     3e6:	4608      	mov	r0, r1
     3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ec:	fab3 f183 	clz	r1, r3
     3f0:	2900      	cmp	r1, #0
     3f2:	f040 808e 	bne.w	512 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x112>
     3f6:	42ab      	cmp	r3, r5
     3f8:	d302      	bcc.n	400 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE>
     3fa:	4282      	cmp	r2, r0
     3fc:	f200 80fa 	bhi.w	5f4 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1f4>
     400:	1a84      	subs	r4, r0, r2
     402:	eb65 0503 	sbc.w	r5, r5, r3
     406:	2001      	movs	r0, #1
     408:	46ac      	mov	ip, r5
     40a:	2e00      	cmp	r6, #0
     40c:	d03f      	beq.n	48e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x8e>
     40e:	e886 1010 	stmia.w	r6, {r4, ip}
     412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     416:	b912      	cbnz	r2, 41e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1e>
     418:	2701      	movs	r7, #1
     41a:	fbb7 f7f2 	udiv	r7, r7, r2
     41e:	fab7 fe87 	clz	lr, r7
     422:	f1be 0f00 	cmp.w	lr, #0
     426:	d134      	bne.n	492 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x92>
     428:	1beb      	subs	r3, r5, r7
     42a:	0c3a      	lsrs	r2, r7, #16
     42c:	fa1f fc87 	uxth.w	ip, r7
     430:	2101      	movs	r1, #1
     432:	fbb3 f8f2 	udiv	r8, r3, r2
     436:	0c25      	lsrs	r5, r4, #16
     438:	fb02 3318 	mls	r3, r2, r8, r3
     43c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     440:	fb0c f308 	mul.w	r3, ip, r8
     444:	42ab      	cmp	r3, r5
     446:	d907      	bls.n	458 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x58>
     448:	19ed      	adds	r5, r5, r7
     44a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     44e:	d202      	bcs.n	456 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x56>
     450:	42ab      	cmp	r3, r5
     452:	f200 80d1 	bhi.w	5f8 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1f8>
     456:	4680      	mov	r8, r0
     458:	1aed      	subs	r5, r5, r3
     45a:	b2a3      	uxth	r3, r4
     45c:	fbb5 f0f2 	udiv	r0, r5, r2
     460:	fb02 5510 	mls	r5, r2, r0, r5
     464:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     468:	fb0c fc00 	mul.w	ip, ip, r0
     46c:	45a4      	cmp	ip, r4
     46e:	d907      	bls.n	480 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x80>
     470:	19e4      	adds	r4, r4, r7
     472:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     476:	d202      	bcs.n	47e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x7e>
     478:	45a4      	cmp	ip, r4
     47a:	f200 80b8 	bhi.w	5ee <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ee>
     47e:	4618      	mov	r0, r3
     480:	eba4 040c 	sub.w	r4, r4, ip
     484:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     488:	e79d      	b.n	3c6 <__udivmoddi4+0xa2>
     48a:	4631      	mov	r1, r6
     48c:	4630      	mov	r0, r6
     48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     492:	f1ce 0420 	rsb	r4, lr, #32
     496:	fa05 f30e 	lsl.w	r3, r5, lr
     49a:	fa07 f70e 	lsl.w	r7, r7, lr
     49e:	fa20 f804 	lsr.w	r8, r0, r4
     4a2:	0c3a      	lsrs	r2, r7, #16
     4a4:	fa25 f404 	lsr.w	r4, r5, r4
     4a8:	ea48 0803 	orr.w	r8, r8, r3
     4ac:	fbb4 f1f2 	udiv	r1, r4, r2
     4b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
     4b4:	fb02 4411 	mls	r4, r2, r1, r4
     4b8:	fa1f fc87 	uxth.w	ip, r7
     4bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     4c0:	fb01 f30c 	mul.w	r3, r1, ip
     4c4:	42ab      	cmp	r3, r5
     4c6:	fa00 f40e 	lsl.w	r4, r0, lr
     4ca:	d909      	bls.n	4e0 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xe0>
     4cc:	19ed      	adds	r5, r5, r7
     4ce:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     4d2:	f080 808a 	bcs.w	5ea <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ea>
     4d6:	42ab      	cmp	r3, r5
     4d8:	f240 8087 	bls.w	5ea <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ea>
     4dc:	3902      	subs	r1, #2
     4de:	443d      	add	r5, r7
     4e0:	1aeb      	subs	r3, r5, r3
     4e2:	fa1f f588 	uxth.w	r5, r8
     4e6:	fbb3 f0f2 	udiv	r0, r3, r2
     4ea:	fb02 3310 	mls	r3, r2, r0, r3
     4ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     4f2:	fb00 f30c 	mul.w	r3, r0, ip
     4f6:	42ab      	cmp	r3, r5
     4f8:	d907      	bls.n	50a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x10a>
     4fa:	19ed      	adds	r5, r5, r7
     4fc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     500:	d26f      	bcs.n	5e2 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1e2>
     502:	42ab      	cmp	r3, r5
     504:	d96d      	bls.n	5e2 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1e2>
     506:	3802      	subs	r0, #2
     508:	443d      	add	r5, r7
     50a:	1aeb      	subs	r3, r5, r3
     50c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     510:	e78f      	b.n	432 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x32>
     512:	f1c1 0720 	rsb	r7, r1, #32
     516:	fa22 f807 	lsr.w	r8, r2, r7
     51a:	408b      	lsls	r3, r1
     51c:	fa05 f401 	lsl.w	r4, r5, r1
     520:	ea48 0303 	orr.w	r3, r8, r3
     524:	fa20 fe07 	lsr.w	lr, r0, r7
     528:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     52c:	40fd      	lsrs	r5, r7
     52e:	ea4e 0e04 	orr.w	lr, lr, r4
     532:	fbb5 f9fc 	udiv	r9, r5, ip
     536:	ea4f 441e 	mov.w	r4, lr, lsr #16
     53a:	fb0c 5519 	mls	r5, ip, r9, r5
     53e:	fa1f f883 	uxth.w	r8, r3
     542:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     546:	fb09 f408 	mul.w	r4, r9, r8
     54a:	42ac      	cmp	r4, r5
     54c:	fa02 f201 	lsl.w	r2, r2, r1
     550:	fa00 fa01 	lsl.w	sl, r0, r1
     554:	d908      	bls.n	568 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x168>
     556:	18ed      	adds	r5, r5, r3
     558:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     55c:	d243      	bcs.n	5e6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1e6>
     55e:	42ac      	cmp	r4, r5
     560:	d941      	bls.n	5e6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1e6>
     562:	f1a9 0902 	sub.w	r9, r9, #2
     566:	441d      	add	r5, r3
     568:	1b2d      	subs	r5, r5, r4
     56a:	fa1f fe8e 	uxth.w	lr, lr
     56e:	fbb5 f0fc 	udiv	r0, r5, ip
     572:	fb0c 5510 	mls	r5, ip, r0, r5
     576:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     57a:	fb00 f808 	mul.w	r8, r0, r8
     57e:	45a0      	cmp	r8, r4
     580:	d907      	bls.n	592 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x192>
     582:	18e4      	adds	r4, r4, r3
     584:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     588:	d229      	bcs.n	5de <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1de>
     58a:	45a0      	cmp	r8, r4
     58c:	d927      	bls.n	5de <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1de>
     58e:	3802      	subs	r0, #2
     590:	441c      	add	r4, r3
     592:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     596:	eba4 0408 	sub.w	r4, r4, r8
     59a:	fba0 8902 	umull	r8, r9, r0, r2
     59e:	454c      	cmp	r4, r9
     5a0:	46c6      	mov	lr, r8
     5a2:	464d      	mov	r5, r9
     5a4:	d315      	bcc.n	5d2 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1d2>
     5a6:	d012      	beq.n	5ce <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1ce>
     5a8:	b156      	cbz	r6, 5c0 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1c0>
     5aa:	ebba 030e 	subs.w	r3, sl, lr
     5ae:	eb64 0405 	sbc.w	r4, r4, r5
     5b2:	fa04 f707 	lsl.w	r7, r4, r7
     5b6:	40cb      	lsrs	r3, r1
     5b8:	431f      	orrs	r7, r3
     5ba:	40cc      	lsrs	r4, r1
     5bc:	6037      	str	r7, [r6, #0]
     5be:	6074      	str	r4, [r6, #4]
     5c0:	2100      	movs	r1, #0
     5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     5c6:	4618      	mov	r0, r3
     5c8:	e6f8      	b.n	3bc <__udivmoddi4+0x98>
     5ca:	4690      	mov	r8, r2
     5cc:	e6e0      	b.n	390 <__udivmoddi4+0x6c>
     5ce:	45c2      	cmp	sl, r8
     5d0:	d2ea      	bcs.n	5a8 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1a8>
     5d2:	ebb8 0e02 	subs.w	lr, r8, r2
     5d6:	eb69 0503 	sbc.w	r5, r9, r3
     5da:	3801      	subs	r0, #1
     5dc:	e7e4      	b.n	5a8 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1a8>
     5de:	4628      	mov	r0, r5
     5e0:	e7d7      	b.n	592 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x192>
     5e2:	4640      	mov	r0, r8
     5e4:	e791      	b.n	50a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x10a>
     5e6:	4681      	mov	r9, r0
     5e8:	e7be      	b.n	568 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x168>
     5ea:	4601      	mov	r1, r0
     5ec:	e778      	b.n	4e0 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xe0>
     5ee:	3802      	subs	r0, #2
     5f0:	443c      	add	r4, r7
     5f2:	e745      	b.n	480 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x80>
     5f4:	4608      	mov	r0, r1
     5f6:	e708      	b.n	40a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xa>
     5f8:	f1a8 0802 	sub.w	r8, r8, #2
     5fc:	443d      	add	r5, r7
     5fe:	e72b      	b.n	458 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x58>

00000600 <__aeabi_idiv0>:
     600:	4770      	bx	lr
     602:	bf00      	nop

00000604 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     604:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     606:	4603      	mov	r3, r0
     608:	1a98      	subs	r0, r3, r2
     60a:	f813 1b01 	ldrb.w	r1, [r3], #1
     60e:	2900      	cmp	r1, #0
     610:	d1fa      	bne.n	608 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     612:	4770      	bx	lr

00000614 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     614:	3801      	subs	r0, #1
     616:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     618:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     61c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     620:	4293      	cmp	r3, r2
     622:	d102      	bne.n	62a <strcmp+0x16>
     624:	2b00      	cmp	r3, #0
     626:	d1f7      	bne.n	618 <strcmp+0x4>
     628:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     62a:	1a98      	subs	r0, r3, r2
     62c:	4770      	bx	lr

0000062e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     62e:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     630:	b182      	cbz	r2, 654 <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     632:	3a01      	subs	r2, #1
     634:	460c      	mov	r4, r1
     636:	4603      	mov	r3, r0
     638:	d103      	bne.n	642 <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     63a:	781a      	ldrb	r2, [r3, #0]
     63c:	7820      	ldrb	r0, [r4, #0]
     63e:	1a10      	subs	r0, r2, r0
     640:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     642:	781e      	ldrb	r6, [r3, #0]
     644:	7825      	ldrb	r5, [r4, #0]
     646:	42ae      	cmp	r6, r5
     648:	f100 0001 	add.w	r0, r0, #1
     64c:	f101 0101 	add.w	r1, r1, #1
     650:	d0ef      	beq.n	632 <memcmp+0x4>
     652:	e7f2      	b.n	63a <memcmp+0xc>
		return 0;
     654:	4610      	mov	r0, r2
}
     656:	bd70      	pop	{r4, r5, r6, pc}

00000658 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     658:	ea81 0300 	eor.w	r3, r1, r0
     65c:	f013 0f03 	tst.w	r3, #3
{
     660:	b570      	push	{r4, r5, r6, lr}
     662:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     664:	d00b      	beq.n	67e <memcpy+0x26>
     666:	3b01      	subs	r3, #1
     668:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     66a:	4291      	cmp	r1, r2
     66c:	d11b      	bne.n	6a6 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     66e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     670:	2a00      	cmp	r2, #0
     672:	d0fc      	beq.n	66e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     674:	f811 4b01 	ldrb.w	r4, [r1], #1
     678:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     67c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     67e:	079c      	lsls	r4, r3, #30
     680:	d1f6      	bne.n	670 <memcpy+0x18>
     682:	1f1e      	subs	r6, r3, #4
     684:	460d      	mov	r5, r1
     686:	1b54      	subs	r4, r2, r5
     688:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     68a:	2c03      	cmp	r4, #3
     68c:	d806      	bhi.n	69c <memcpy+0x44>
     68e:	f022 0403 	bic.w	r4, r2, #3
     692:	4421      	add	r1, r4
     694:	4423      	add	r3, r4
     696:	f002 0203 	and.w	r2, r2, #3
     69a:	e7e4      	b.n	666 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     69c:	f855 4b04 	ldr.w	r4, [r5], #4
     6a0:	f846 4f04 	str.w	r4, [r6, #4]!
     6a4:	e7ef      	b.n	686 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
     6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
     6ae:	e7dc      	b.n	66a <memcpy+0x12>

000006b0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     6b0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     6b2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     6b4:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     6b6:	079c      	lsls	r4, r3, #30
     6b8:	d111      	bne.n	6de <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     6ba:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     6be:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     6c2:	461e      	mov	r6, r3
     6c4:	1b95      	subs	r5, r2, r6
     6c6:	441d      	add	r5, r3
     6c8:	2d03      	cmp	r5, #3
     6ca:	d80e      	bhi.n	6ea <memset+0x3a>
     6cc:	f022 0403 	bic.w	r4, r2, #3
     6d0:	4423      	add	r3, r4
     6d2:	f002 0203 	and.w	r2, r2, #3
     6d6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     6d8:	4293      	cmp	r3, r2
     6da:	d109      	bne.n	6f0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     6dc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6de:	2a00      	cmp	r2, #0
     6e0:	d0fc      	beq.n	6dc <memset+0x2c>
		*(d_byte++) = c_byte;
     6e2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     6e6:	3a01      	subs	r2, #1
     6e8:	e7e5      	b.n	6b6 <memset+0x6>
		*(d_word++) = c_word;
     6ea:	f846 4b04 	str.w	r4, [r6], #4
     6ee:	e7e9      	b.n	6c4 <memset+0x14>
		*(d_byte++) = c_byte;
     6f0:	f803 1b01 	strb.w	r1, [r3], #1
     6f4:	e7f0      	b.n	6d8 <memset+0x28>

000006f6 <temp_cli_get>:
};

static void temp_cli_get(struct bt_mesh_model *model,
                               struct bt_mesh_msg_ctx *ctx,
                               struct net_buf_simple *buf)
{
     6f6:	4770      	bx	lr

000006f8 <prov_complete>:
        
	return 0;
}

static void prov_complete(u16_t net_idx, u16_t addr)
{
     6f8:	b538      	push	{r3, r4, r5, lr}
     6fa:	4605      	mov	r5, r0
        printk("Provisioning completed!\n");
     6fc:	4807      	ldr	r0, [pc, #28]	; (71c <prov_complete+0x24>)
{
     6fe:	460c      	mov	r4, r1
        printk("Provisioning completed!\n");
     700:	f000 fe8c 	bl	141c <printk>
	printk("Net ID: %u\n", net_idx);
     704:	4629      	mov	r1, r5
     706:	4806      	ldr	r0, [pc, #24]	; (720 <prov_complete+0x28>)
     708:	f000 fe88 	bl	141c <printk>
	printk("Unicast addr: 0x%04x\n", addr);
     70c:	4621      	mov	r1, r4
     70e:	4805      	ldr	r0, [pc, #20]	; (724 <prov_complete+0x2c>)
     710:	f000 fe84 	bl	141c <printk>
	
	node_addr = addr;
     714:	4b04      	ldr	r3, [pc, #16]	; (728 <prov_complete+0x30>)
     716:	801c      	strh	r4, [r3, #0]
     718:	bd38      	pop	{r3, r4, r5, pc}
     71a:	bf00      	nop
     71c:	00019558 	.word	0x00019558
     720:	00019571 	.word	0x00019571
     724:	0001957d 	.word	0x0001957d
     728:	20000000 	.word	0x20000000

0000072c <output_number>:
{
     72c:	b508      	push	{r3, lr}
        printk("OOB Number: %u\n", number);
     72e:	4802      	ldr	r0, [pc, #8]	; (738 <output_number+0xc>)
     730:	f000 fe74 	bl	141c <printk>
}
     734:	2000      	movs	r0, #0
     736:	bd08      	pop	{r3, pc}
     738:	00019519 	.word	0x00019519

0000073c <temp_cli_status>:
{
     73c:	b510      	push	{r4, lr}
	printk("Got the sensor status \n");
     73e:	480a      	ldr	r0, [pc, #40]	; (768 <temp_cli_status+0x2c>)
{
     740:	4614      	mov	r4, r2
	printk("Got the sensor status \n");
     742:	f000 fe6b 	bl	141c <printk>
	printk("Sensor ID: 0x%04x\n", net_buf_simple_pull_le16(buf));
     746:	4620      	mov	r0, r4
     748:	f017 fa97 	bl	17c7a <net_buf_simple_pull_le16>
     74c:	4601      	mov	r1, r0
     74e:	4807      	ldr	r0, [pc, #28]	; (76c <temp_cli_status+0x30>)
     750:	f000 fe64 	bl	141c <printk>
	printk("Sensor value: 0x%04x\n\n", net_buf_simple_pull_le16(buf));
     754:	4620      	mov	r0, r4
     756:	f017 fa90 	bl	17c7a <net_buf_simple_pull_le16>
}
     75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Sensor value: 0x%04x\n\n", net_buf_simple_pull_le16(buf));
     75e:	4601      	mov	r1, r0
     760:	4803      	ldr	r0, [pc, #12]	; (770 <temp_cli_status+0x34>)
     762:	f000 be5b 	b.w	141c <printk>
     766:	bf00      	nop
     768:	000195b8 	.word	0x000195b8
     76c:	000195d0 	.word	0x000195d0
     770:	000195e3 	.word	0x000195e3

00000774 <temp_work_thread>:
	k_work_submit(&temp_work);
}

/* send unsolicited temperature readings */
void temp_work_thread(struct k_work *work)
{
     774:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_model *model = &root_models[1];
       	struct net_buf_simple *msg = model->pub->msg;
	int ret;

	if (node_addr == BT_MESH_ADDR_UNASSIGNED)
     776:	4b10      	ldr	r3, [pc, #64]	; (7b8 <temp_work_thread+0x44>)
     778:	881b      	ldrh	r3, [r3, #0]
     77a:	b1db      	cbz	r3, 7b4 <temp_work_thread+0x40>
       	struct net_buf_simple *msg = model->pub->msg;
     77c:	4c0f      	ldr	r4, [pc, #60]	; (7bc <temp_work_thread+0x48>)
     77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     780:	691d      	ldr	r5, [r3, #16]
		return;

	/* sensor status */
        bt_mesh_model_msg_init(msg, BT_MESH_MODEL_OP_SENSOR_GET);
     782:	f248 2131 	movw	r1, #33329	; 0x8231
     786:	4628      	mov	r0, r5
     788:	f00a fb4c 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, ID_TEMP_CELSIUS);
     78c:	f642 211f 	movw	r1, #10783	; 0x2a1f
     790:	4628      	mov	r0, r5
     792:	f017 fa0e 	bl	17bb2 <net_buf_simple_add_le16>

	ret = bt_mesh_model_publish(model);
     796:	f104 001c 	add.w	r0, r4, #28
     79a:	f00a fb9d 	bl	aed8 <bt_mesh_model_publish>
	if (ret) {
     79e:	4601      	mov	r1, r0
     7a0:	b120      	cbz	r0, 7ac <temp_work_thread+0x38>
		printk("ERR: Unable to send sensor status get request: %d\n", ret);
     7a2:	4807      	ldr	r0, [pc, #28]	; (7c0 <temp_work_thread+0x4c>)
		return;
	}
 
        printk("Sensor status Get request sent with OpCode 0x%08x\n", BT_MESH_MODEL_OP_SENSOR_GET);
}
     7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("Sensor status Get request sent with OpCode 0x%08x\n", BT_MESH_MODEL_OP_SENSOR_GET);
     7a8:	f000 be38 	b.w	141c <printk>
     7ac:	f248 2131 	movw	r1, #33329	; 0x8231
     7b0:	4804      	ldr	r0, [pc, #16]	; (7c4 <temp_work_thread+0x50>)
     7b2:	e7f7      	b.n	7a4 <temp_work_thread+0x30>
     7b4:	bd38      	pop	{r3, r4, r5, pc}
     7b6:	bf00      	nop
     7b8:	20000000 	.word	0x20000000
     7bc:	20005dc0 	.word	0x20005dc0
     7c0:	000195fa 	.word	0x000195fa
     7c4:	0001962d 	.word	0x0001962d

000007c8 <bt_ready>:
{
     7c8:	b508      	push	{r3, lr}
        if (err) {
     7ca:	4601      	mov	r1, r0
     7cc:	b120      	cbz	r0, 7d8 <bt_ready+0x10>
                printk("Bluetooth init failed (err %d)\n", err);
     7ce:	480c      	ldr	r0, [pc, #48]	; (800 <CONFIG_BT_RX_STACK_SIZE>)
}
     7d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                printk("Initializing mesh failed (err %d)\n", ret);
     7d4:	f000 be22 	b.w	141c <printk>
        printk("Bluetooth initialized\n");
     7d8:	480a      	ldr	r0, [pc, #40]	; (804 <CONFIG_BT_RX_STACK_SIZE+0x4>)
     7da:	f000 fe1f 	bl	141c <printk>
        ret = bt_mesh_init(&prov, &comp);
     7de:	490a      	ldr	r1, [pc, #40]	; (808 <CONFIG_BT_RX_STACK_SIZE+0x8>)
     7e0:	480a      	ldr	r0, [pc, #40]	; (80c <CONFIG_BT_RX_STACK_SIZE+0xc>)
     7e2:	f007 f8a1 	bl	7928 <bt_mesh_init>
        if (ret) {
     7e6:	4601      	mov	r1, r0
     7e8:	b108      	cbz	r0, 7ee <bt_ready+0x26>
                printk("Initializing mesh failed (err %d)\n", ret);
     7ea:	4809      	ldr	r0, [pc, #36]	; (810 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     7ec:	e7f0      	b.n	7d0 <bt_ready+0x8>
	bt_mesh_prov_enable(BT_MESH_PROV_GATT | BT_MESH_PROV_ADV);
     7ee:	2003      	movs	r0, #3
     7f0:	f007 f880 	bl	78f4 <bt_mesh_prov_enable>
        printk("Mesh initialized\n");
     7f4:	4807      	ldr	r0, [pc, #28]	; (814 <CONFIG_BT_RX_STACK_SIZE+0x14>)
}
     7f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Mesh initialized\n");
     7fa:	f000 be0f 	b.w	141c <printk>
     7fe:	bf00      	nop
     800:	0001947c 	.word	0x0001947c
     804:	0001949c 	.word	0x0001949c
     808:	000194e8 	.word	0x000194e8
     80c:	0001952c 	.word	0x0001952c
     810:	000194b3 	.word	0x000194b3
     814:	000194d6 	.word	0x000194d6

00000818 <temp_timer_thread>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     818:	4909      	ldr	r1, [pc, #36]	; (840 <temp_timer_thread+0x28>)
     81a:	f3bf 8f5b 	dmb	ish
     81e:	e851 3f00 	ldrex	r3, [r1]
     822:	f043 0201 	orr.w	r2, r3, #1
     826:	e841 2000 	strex	r0, r2, [r1]
     82a:	2800      	cmp	r0, #0
     82c:	d1f7      	bne.n	81e <temp_timer_thread+0x6>
     82e:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
     832:	07db      	lsls	r3, r3, #31
     834:	d403      	bmi.n	83e <temp_timer_thread+0x26>
		k_queue_append(&work_q->queue, work);
     836:	3908      	subs	r1, #8
     838:	4802      	ldr	r0, [pc, #8]	; (844 <temp_timer_thread+0x2c>)
     83a:	f017 bc96 	b.w	1816a <k_queue_append>
     83e:	4770      	bx	lr
     840:	20000040 	.word	0x20000040
     844:	20001dd8 	.word	0x20001dd8

00000848 <main>:

void main(void)
{
     848:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     84a:	4b15      	ldr	r3, [pc, #84]	; (8a0 <main+0x58>)
     84c:	f3bf 8f5b 	dmb	ish
     850:	f103 0208 	add.w	r2, r3, #8
     854:	e852 1f00 	ldrex	r1, [r2]
     858:	f021 0101 	bic.w	r1, r1, #1
     85c:	e842 1000 	strex	r0, r1, [r2]
     860:	2800      	cmp	r0, #0
     862:	d1f7      	bne.n	854 <main+0xc>
     864:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
     868:	4a0e      	ldr	r2, [pc, #56]	; (8a4 <main+0x5c>)
     86a:	605a      	str	r2, [r3, #4]

	/* Initialize temp work thread */
	k_work_init(&temp_work, temp_work_thread);

	/* Initialize temp timer thread */
	k_timer_init(&temp_timer, temp_timer_thread, NULL);
     86c:	490e      	ldr	r1, [pc, #56]	; (8a8 <main+0x60>)
     86e:	480f      	ldr	r0, [pc, #60]	; (8ac <main+0x64>)
     870:	2200      	movs	r2, #0
     872:	f018 fb7d 	bl	18f70 <k_timer_init>
        
	printk("Initializing...\n");
     876:	480e      	ldr	r0, [pc, #56]	; (8b0 <main+0x68>)
     878:	f000 fdd0 	bl	141c <printk>

        /* Initialize the Bluetooth Subsystem */
        ret = bt_enable(bt_ready);
     87c:	480d      	ldr	r0, [pc, #52]	; (8b4 <main+0x6c>)
     87e:	f004 fa23 	bl	4cc8 <bt_enable>
        if (ret) {
     882:	4601      	mov	r1, r0
     884:	b110      	cbz	r0, 88c <main+0x44>
                printk("Bluetooth init failed (err %d)\n", ret);
     886:	480c      	ldr	r0, [pc, #48]	; (8b8 <main+0x70>)
     888:	f000 fdc8 	bl	141c <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_CUSTOM_DATA_SET, k_thread_custom_data_set, void *, value);

K_SYSCALL_DECLARE0(K_SYSCALL_K_THREAD_CUSTOM_DATA_GET, k_thread_custom_data_get, void *);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
     88c:	f241 3288 	movw	r2, #5000	; 0x1388
     890:	f24c 3150 	movw	r1, #50000	; 0xc350
     894:	4805      	ldr	r0, [pc, #20]	; (8ac <main+0x64>)
        }

	/* Start the timer at 5 second interval */
	k_timer_start(&temp_timer, K_SECONDS(50), K_SECONDS(5));
}
     896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     89a:	f018 bb7d 	b.w	18f98 <_impl_k_timer_start>
     89e:	bf00      	nop
     8a0:	20000038 	.word	0x20000038
     8a4:	00000775 	.word	0x00000775
     8a8:	00000819 	.word	0x00000819
     8ac:	20000004 	.word	0x20000004
     8b0:	00019508 	.word	0x00019508
     8b4:	000007c9 	.word	0x000007c9
     8b8:	0001947c 	.word	0x0001947c

000008bc <ftpan_32>:
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     8bc:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <ftpan_32+0x34>)
     8be:	781b      	ldrb	r3, [r3, #0]
     8c0:	2b06      	cmp	r3, #6
     8c2:	d112      	bne.n	8ea <ftpan_32+0x2e>
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     8c4:	4b0b      	ldr	r3, [pc, #44]	; (8f4 <ftpan_32+0x38>)
     8c6:	6818      	ldr	r0, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     8c8:	f010 000f 	ands.w	r0, r0, #15
     8cc:	d10d      	bne.n	8ea <ftpan_32+0x2e>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     8ce:	3304      	adds	r3, #4
     8d0:	681b      	ldr	r3, [r3, #0]
     8d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     8d6:	2b30      	cmp	r3, #48	; 0x30
     8d8:	d108      	bne.n	8ec <ftpan_32+0x30>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <ftpan_32+0x3c>)
     8dc:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
     8de:	f013 0ff0 	tst.w	r3, #240	; 0xf0
     8e2:	bf0c      	ite	eq
     8e4:	2001      	moveq	r0, #1
     8e6:	2000      	movne	r0, #0
     8e8:	4770      	bx	lr
			return true;
		}
	}

	return false;
     8ea:	2000      	movs	r0, #0
}
     8ec:	4770      	bx	lr
     8ee:	bf00      	nop
     8f0:	f0000fe0 	.word	0xf0000fe0
     8f4:	f0000fe4 	.word	0xf0000fe4
     8f8:	f0000fec 	.word	0xf0000fec

000008fc <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     8fc:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
     8fe:	f04f 0320 	mov.w	r3, #32
     902:	f3ef 8111 	mrs	r1, BASEPRI
     906:	f383 8811 	msr	BASEPRI, r3
	if (ftpan_32()) {
     90a:	f7ff ffd7 	bl	8bc <ftpan_32>
     90e:	b120      	cbz	r0, 91a <nordicsemi_nrf52_init+0x1e>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     910:	4a3b      	ldr	r2, [pc, #236]	; (a00 <nordicsemi_nrf52_init+0x104>)
     912:	68d3      	ldr	r3, [r2, #12]
     914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     918:	60d3      	str	r3, [r2, #12]
	if (ftpan_37()) {
     91a:	f7ff ffcf 	bl	8bc <ftpan_32>
     91e:	b110      	cbz	r0, 926 <nordicsemi_nrf52_init+0x2a>
		*(volatile u32_t *)0x400005A0 = 0x3;
     920:	4b38      	ldr	r3, [pc, #224]	; (a04 <nordicsemi_nrf52_init+0x108>)
     922:	2203      	movs	r2, #3
     924:	601a      	str	r2, [r3, #0]
	if (ftpan_36()) {
     926:	f7ff ffc9 	bl	8bc <ftpan_32>
     92a:	b130      	cbz	r0, 93a <nordicsemi_nrf52_init+0x3e>
		NRF_CLOCK->EVENTS_DONE = 0;
     92c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     930:	2200      	movs	r2, #0
     932:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     936:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     93a:	4b33      	ldr	r3, [pc, #204]	; (a08 <nordicsemi_nrf52_init+0x10c>)
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b06      	cmp	r3, #6
     940:	d117      	bne.n	972 <nordicsemi_nrf52_init+0x76>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
     942:	4b32      	ldr	r3, [pc, #200]	; (a0c <nordicsemi_nrf52_init+0x110>)
     944:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
     946:	0718      	lsls	r0, r3, #28
     948:	d113      	bne.n	972 <nordicsemi_nrf52_init+0x76>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
     94a:	4b31      	ldr	r3, [pc, #196]	; (a10 <nordicsemi_nrf52_init+0x114>)
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
     952:	2a30      	cmp	r2, #48	; 0x30
     954:	d003      	beq.n	95e <nordicsemi_nrf52_init+0x62>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
     956:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
     95a:	2b40      	cmp	r3, #64	; 0x40
     95c:	d109      	bne.n	972 <nordicsemi_nrf52_init+0x76>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     95e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     962:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     966:	07d2      	lsls	r2, r2, #31
     968:	d503      	bpl.n	972 <nordicsemi_nrf52_init+0x76>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     96a:	f06f 0201 	mvn.w	r2, #1
     96e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     972:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     976:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     97a:	2a00      	cmp	r2, #0
     97c:	db03      	blt.n	986 <nordicsemi_nrf52_init+0x8a>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     97e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     982:	2b00      	cmp	r3, #0
     984:	da2f      	bge.n	9e6 <nordicsemi_nrf52_init+0xea>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     986:	4b23      	ldr	r3, [pc, #140]	; (a14 <nordicsemi_nrf52_init+0x118>)
     988:	2201      	movs	r2, #1
     98a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     98e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     992:	2a00      	cmp	r2, #0
     994:	d0fb      	beq.n	98e <nordicsemi_nrf52_init+0x92>
		NRF_UICR->PSELRESET[0] = 21;
     996:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     99a:	2115      	movs	r1, #21
     99c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     9a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     9a4:	2a00      	cmp	r2, #0
     9a6:	d0fb      	beq.n	9a0 <nordicsemi_nrf52_init+0xa4>
		NRF_UICR->PSELRESET[1] = 21;
     9a8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     9ac:	2215      	movs	r2, #21
     9ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     9b2:	4b18      	ldr	r3, [pc, #96]	; (a14 <nordicsemi_nrf52_init+0x118>)
     9b4:	461a      	mov	r2, r3
     9b6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     9ba:	2900      	cmp	r1, #0
     9bc:	d0fb      	beq.n	9b6 <nordicsemi_nrf52_init+0xba>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     9be:	2100      	movs	r1, #0
     9c0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     9c4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     9c8:	2b00      	cmp	r3, #0
     9ca:	d0fb      	beq.n	9c4 <nordicsemi_nrf52_init+0xc8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     9cc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     9d0:	4911      	ldr	r1, [pc, #68]	; (a18 <nordicsemi_nrf52_init+0x11c>)
     9d2:	4b12      	ldr	r3, [pc, #72]	; (a1c <nordicsemi_nrf52_init+0x120>)
     9d4:	68ca      	ldr	r2, [r1, #12]
     9d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     9da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     9dc:	60cb      	str	r3, [r1, #12]
     9de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
     9e2:	bf00      	nop
     9e4:	e7fd      	b.n	9e2 <nordicsemi_nrf52_init+0xe6>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     9e6:	4b0c      	ldr	r3, [pc, #48]	; (a18 <nordicsemi_nrf52_init+0x11c>)
     9e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9ec:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     9ee:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <nordicsemi_nrf52_init+0x124>)
     9f2:	4a0c      	ldr	r2, [pc, #48]	; (a24 <nordicsemi_nrf52_init+0x128>)
     9f4:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     9f6:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     9fa:	2000      	movs	r0, #0
     9fc:	bd08      	pop	{r3, pc}
     9fe:	bf00      	nop
     a00:	e000edf0 	.word	0xe000edf0
     a04:	400005a0 	.word	0x400005a0
     a08:	f0000fe0 	.word	0xf0000fe0
     a0c:	f0000fe4 	.word	0xf0000fe4
     a10:	f0000fe8 	.word	0xf0000fe8
     a14:	4001e000 	.word	0x4001e000
     a18:	e000ed00 	.word	0xe000ed00
     a1c:	05fa0004 	.word	0x05fa0004
     a20:	20005e7c 	.word	0x20005e7c
     a24:	03d09000 	.word	0x03d09000

00000a28 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     a28:	4808      	ldr	r0, [pc, #32]	; (a4c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     a2a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     a2c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     a2e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     a30:	d80b      	bhi.n	a4a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     a32:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
     a34:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     a36:	d008      	beq.n	a4a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     a38:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     a3a:	f017 fdd1 	bl	185e0 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     a3e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     a42:	4903      	ldr	r1, [pc, #12]	; (a50 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     a48:	600a      	str	r2, [r1, #0]

00000a4a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     a4a:	4770      	bx	lr
    ldr r0, =_kernel
     a4c:	20001bc0 	.word	0x20001bc0
    ldr r1, =_SCS_ICSR
     a50:	e000ed04 	.word	0xe000ed04

00000a54 <_IntLibInit>:
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a54:	4804      	ldr	r0, [pc, #16]	; (a68 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     a56:	2300      	movs	r3, #0
     a58:	2120      	movs	r1, #32
     a5a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     a5c:	3301      	adds	r3, #1
     a5e:	2b27      	cmp	r3, #39	; 0x27
     a60:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     a64:	d1f9      	bne.n	a5a <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     a66:	4770      	bx	lr
     a68:	e000e100 	.word	0xe000e100

00000a6c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     a6c:	490e      	ldr	r1, [pc, #56]	; (aa8 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     a6e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     a70:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     a72:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     a74:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
     a78:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     a7c:	4f0b      	ldr	r7, [pc, #44]	; (aac <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     a7e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     a82:	2020      	movs	r0, #32
    msr BASEPRI, r0
     a84:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     a88:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
     a8a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     a8c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     a8e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     a90:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     a92:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     a94:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     a98:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     a9c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
     aa0:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     aa4:	4770      	bx	lr
     aa6:	0000      	.short	0x0000
    ldr r1, =_kernel
     aa8:	20001bc0 	.word	0x20001bc0
    ldr v4, =_SCS_ICSR
     aac:	e000ed04 	.word	0xe000ed04

00000ab0 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
     ab0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     ab4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     ab6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     aba:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     abe:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     ac0:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     ac4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
     ac8:	d001      	beq.n	ace <_context_switch>

    cmp r1, #2
     aca:	2902      	cmp	r1, #2
    beq _oops
     acc:	d007      	beq.n	ade <_oops>

00000ace <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     ace:	4040      	eors	r0, r0
    msr BASEPRI, r0
     ad0:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     ad4:	4904      	ldr	r1, [pc, #16]	; (ae8 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     ada:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     adc:	4770      	bx	lr

00000ade <_oops>:

_oops:
    push {lr}
     ade:	b500      	push	{lr}
    blx _do_kernel_oops
     ae0:	f000 fa26 	bl	f30 <_do_kernel_oops>
    pop {pc}
     ae4:	bd00      	pop	{pc}
     ae6:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     ae8:	e000ed04 	.word	0xe000ed04

00000aec <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
     aec:	4904      	ldr	r1, [pc, #16]	; (b00 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
     aee:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
     af0:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
     af2:	4904      	ldr	r1, [pc, #16]	; (b04 <__swap+0x18>)
    ldr r1, [r1]
     af4:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
     af6:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
     af8:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
     afa:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
     afc:	4770      	bx	lr
     afe:	0000      	.short	0x0000
    ldr r1, =_kernel
     b00:	20001bc0 	.word	0x20001bc0
    ldr r1, =_k_neg_eagain
     b04:	0001a404 	.word	0x0001a404

00000b08 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     b08:	b510      	push	{r4, lr}
     b0a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     b0c:	f017 fd3e 	bl	1858c <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     b10:	6822      	ldr	r2, [r4, #0]
     b12:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     b18:	4801      	ldr	r0, [pc, #4]	; (b20 <_FaultThreadShow.isra.2+0x18>)
     b1a:	f000 bc7f 	b.w	141c <printk>
     b1e:	bf00      	nop
     b20:	000197c5 	.word	0x000197c5

00000b24 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     b24:	b510      	push	{r4, lr}
     b26:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     b28:	481a      	ldr	r0, [pc, #104]	; (b94 <_UsageFault+0x70>)
     b2a:	f000 fc77 	bl	141c <printk>

	_FaultThreadShow(esf);
     b2e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
     b32:	4c19      	ldr	r4, [pc, #100]	; (b98 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     b34:	f7ff ffe8 	bl	b08 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
     b38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b3a:	019a      	lsls	r2, r3, #6
     b3c:	d502      	bpl.n	b44 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     b3e:	4817      	ldr	r0, [pc, #92]	; (b9c <_UsageFault+0x78>)
     b40:	f000 fc6c 	bl	141c <printk>
	}
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
     b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b46:	01db      	lsls	r3, r3, #7
     b48:	d502      	bpl.n	b50 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     b4a:	4815      	ldr	r0, [pc, #84]	; (ba0 <_UsageFault+0x7c>)
     b4c:	f000 fc66 	bl	141c <printk>
	}
	if (SCB->CFSR & CFSR_NOCP_Msk) {
     b50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b52:	0318      	lsls	r0, r3, #12
     b54:	d502      	bpl.n	b5c <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     b56:	4813      	ldr	r0, [pc, #76]	; (ba4 <_UsageFault+0x80>)
     b58:	f000 fc60 	bl	141c <printk>
	}
	if (SCB->CFSR & CFSR_INVPC_Msk) {
     b5c:	4c0e      	ldr	r4, [pc, #56]	; (b98 <_UsageFault+0x74>)
     b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b60:	0359      	lsls	r1, r3, #13
     b62:	d502      	bpl.n	b6a <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     b64:	4810      	ldr	r0, [pc, #64]	; (ba8 <_UsageFault+0x84>)
     b66:	f000 fc59 	bl	141c <printk>
	}
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
     b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b6c:	039a      	lsls	r2, r3, #14
     b6e:	d502      	bpl.n	b76 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     b70:	480e      	ldr	r0, [pc, #56]	; (bac <_UsageFault+0x88>)
     b72:	f000 fc53 	bl	141c <printk>
	}
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
     b76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b78:	03db      	lsls	r3, r3, #15
     b7a:	d502      	bpl.n	b82 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     b7c:	480c      	ldr	r0, [pc, #48]	; (bb0 <_UsageFault+0x8c>)
     b7e:	f000 fc4d 	bl	141c <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     b82:	4a05      	ldr	r2, [pc, #20]	; (b98 <_UsageFault+0x74>)
     b84:	6a93      	ldr	r3, [r2, #40]	; 0x28
     b86:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     b8a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     b8e:	6293      	str	r3, [r2, #40]	; 0x28
     b90:	bd10      	pop	{r4, pc}
     b92:	bf00      	nop
     b94:	00019896 	.word	0x00019896
     b98:	e000ed00 	.word	0xe000ed00
     b9c:	000198af 	.word	0x000198af
     ba0:	000198c3 	.word	0x000198c3
     ba4:	000198de 	.word	0x000198de
     ba8:	000198fd 	.word	0x000198fd
     bac:	00019923 	.word	0x00019923
     bb0:	0001993e 	.word	0x0001993e

00000bb4 <_MpuFault>:
{
     bb4:	b538      	push	{r3, r4, r5, lr}
     bb6:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     bb8:	4817      	ldr	r0, [pc, #92]	; (c18 <_MpuFault+0x64>)
{
     bba:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     bbc:	f000 fc2e 	bl	141c <printk>
	_FaultThreadShow(esf);
     bc0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
     bc4:	4c15      	ldr	r4, [pc, #84]	; (c1c <_MpuFault+0x68>)
	_FaultThreadShow(esf);
     bc6:	f7ff ff9f 	bl	b08 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
     bca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bcc:	06db      	lsls	r3, r3, #27
     bce:	d504      	bpl.n	bda <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     bd0:	4813      	ldr	r0, [pc, #76]	; (c20 <_MpuFault+0x6c>)
}
     bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction Access Violation\n");
     bd6:	f000 bc21 	b.w	141c <printk>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
     bda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bdc:	0718      	lsls	r0, r3, #28
     bde:	d501      	bpl.n	be4 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     be0:	4810      	ldr	r0, [pc, #64]	; (c24 <_MpuFault+0x70>)
     be2:	e7f6      	b.n	bd2 <_MpuFault+0x1e>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
     be4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     be6:	0799      	lsls	r1, r3, #30
     be8:	d50f      	bpl.n	c0a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     bea:	480f      	ldr	r0, [pc, #60]	; (c28 <_MpuFault+0x74>)
     bec:	f000 fc16 	bl	141c <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
     bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bf2:	061a      	lsls	r2, r3, #24
     bf4:	d50e      	bpl.n	c14 <_MpuFault+0x60>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
     bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
     bf8:	480c      	ldr	r0, [pc, #48]	; (c2c <_MpuFault+0x78>)
     bfa:	f000 fc0f 	bl	141c <printk>
			if (fromHardFault) {
     bfe:	b14d      	cbz	r5, c14 <_MpuFault+0x60>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
     c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     c06:	62a3      	str	r3, [r4, #40]	; 0x28
     c08:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
     c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c0c:	07db      	lsls	r3, r3, #31
     c0e:	d501      	bpl.n	c14 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     c10:	4807      	ldr	r0, [pc, #28]	; (c30 <_MpuFault+0x7c>)
     c12:	e7de      	b.n	bd2 <_MpuFault+0x1e>
     c14:	bd38      	pop	{r3, r4, r5, pc}
     c16:	bf00      	nop
     c18:	0001980f 	.word	0x0001980f
     c1c:	e000ed00 	.word	0xe000ed00
     c20:	00019826 	.word	0x00019826
     c24:	00019838 	.word	0x00019838
     c28:	0001984c 	.word	0x0001984c
     c2c:	00019865 	.word	0x00019865
     c30:	00019876 	.word	0x00019876

00000c34 <_BusFault>:
{
     c34:	b538      	push	{r3, r4, r5, lr}
     c36:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     c38:	481b      	ldr	r0, [pc, #108]	; (ca8 <_BusFault+0x74>)
{
     c3a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     c3c:	f000 fbee 	bl	141c <printk>
	_FaultThreadShow(esf);
     c40:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & CFSR_STKERR_Msk) {
     c44:	4c19      	ldr	r4, [pc, #100]	; (cac <_BusFault+0x78>)
	_FaultThreadShow(esf);
     c46:	f7ff ff5f 	bl	b08 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
     c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c4c:	04d9      	lsls	r1, r3, #19
     c4e:	d504      	bpl.n	c5a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     c50:	4817      	ldr	r0, [pc, #92]	; (cb0 <_BusFault+0x7c>)
}
     c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Instruction bus error\n");
     c56:	f000 bbe1 	b.w	141c <printk>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
     c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c5c:	051a      	lsls	r2, r3, #20
     c5e:	d501      	bpl.n	c64 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     c60:	4814      	ldr	r0, [pc, #80]	; (cb4 <_BusFault+0x80>)
     c62:	e7f6      	b.n	c52 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
     c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c66:	059b      	lsls	r3, r3, #22
     c68:	d514      	bpl.n	c94 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     c6a:	4813      	ldr	r0, [pc, #76]	; (cb8 <_BusFault+0x84>)
     c6c:	f000 fbd6 	bl	141c <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
     c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c72:	0418      	lsls	r0, r3, #16
     c74:	d508      	bpl.n	c88 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
     c76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     c78:	4810      	ldr	r0, [pc, #64]	; (cbc <_BusFault+0x88>)
     c7a:	f000 fbcf 	bl	141c <printk>
			if (fromHardFault) {
     c7e:	b11d      	cbz	r5, c88 <_BusFault+0x54>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
     c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     c86:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
     c88:	4b08      	ldr	r3, [pc, #32]	; (cac <_BusFault+0x78>)
     c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c8c:	0559      	lsls	r1, r3, #21
     c8e:	d509      	bpl.n	ca4 <_BusFault+0x70>
			PR_EXC("  Imprecise data bus error\n");
     c90:	480b      	ldr	r0, [pc, #44]	; (cc0 <_BusFault+0x8c>)
     c92:	e7de      	b.n	c52 <_BusFault+0x1e>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
     c94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c96:	055a      	lsls	r2, r3, #21
     c98:	d4fa      	bmi.n	c90 <_BusFault+0x5c>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
     c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c9c:	05db      	lsls	r3, r3, #23
     c9e:	d501      	bpl.n	ca4 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     ca0:	4808      	ldr	r0, [pc, #32]	; (cc4 <_BusFault+0x90>)
     ca2:	e7d6      	b.n	c52 <_BusFault+0x1e>
     ca4:	bd38      	pop	{r3, r4, r5, pc}
     ca6:	bf00      	nop
     ca8:	0001968c 	.word	0x0001968c
     cac:	e000ed00 	.word	0xe000ed00
     cb0:	00019826 	.word	0x00019826
     cb4:	00019838 	.word	0x00019838
     cb8:	000196a3 	.word	0x000196a3
     cbc:	00019865 	.word	0x00019865
     cc0:	000196bd 	.word	0x000196bd
     cc4:	000196d9 	.word	0x000196d9

00000cc8 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     cc8:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     cca:	4d27      	ldr	r5, [pc, #156]	; (d68 <_Fault+0xa0>)
     ccc:	686b      	ldr	r3, [r5, #4]
     cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     cd2:	1eda      	subs	r2, r3, #3
{
     cd4:	4604      	mov	r4, r0
	switch (fault) {
     cd6:	2a09      	cmp	r2, #9
     cd8:	d83a      	bhi.n	d50 <_Fault+0x88>
     cda:	e8df f002 	tbb	[pc, r2]
     cde:	3305      	.short	0x3305
     ce0:	39392f35 	.word	0x39392f35
     ce4:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     ce8:	4820      	ldr	r0, [pc, #128]	; (d6c <_Fault+0xa4>)
     cea:	f000 fb97 	bl	141c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     cee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     cf0:	079a      	lsls	r2, r3, #30
     cf2:	d503      	bpl.n	cfc <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     cf4:	481e      	ldr	r0, [pc, #120]	; (d70 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     cf6:	f000 fb91 	bl	141c <printk>
     cfa:	e00c      	b.n	d16 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     cfc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     cfe:	005b      	lsls	r3, r3, #1
     d00:	d509      	bpl.n	d16 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     d02:	481c      	ldr	r0, [pc, #112]	; (d74 <_Fault+0xac>)
     d04:	f000 fb8a 	bl	141c <printk>
		if (SCB_MMFSR) {
     d08:	4b1b      	ldr	r3, [pc, #108]	; (d78 <_Fault+0xb0>)
     d0a:	781b      	ldrb	r3, [r3, #0]
     d0c:	b14b      	cbz	r3, d22 <_Fault+0x5a>
			_MpuFault(esf, 1);
     d0e:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     d10:	4620      	mov	r0, r4
     d12:	f7ff ff4f 	bl	bb4 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     d16:	4621      	mov	r1, r4
     d18:	2000      	movs	r0, #0
}
     d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     d1e:	f000 b90b 	b.w	f38 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     d22:	4b16      	ldr	r3, [pc, #88]	; (d7c <_Fault+0xb4>)
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	b123      	cbz	r3, d32 <_Fault+0x6a>
			_BusFault(esf, 1);
     d28:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     d2a:	4620      	mov	r0, r4
     d2c:	f7ff ff82 	bl	c34 <_BusFault>
     d30:	e7f1      	b.n	d16 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     d32:	4b13      	ldr	r3, [pc, #76]	; (d80 <_Fault+0xb8>)
     d34:	881b      	ldrh	r3, [r3, #0]
     d36:	b29b      	uxth	r3, r3
     d38:	2b00      	cmp	r3, #0
     d3a:	d0ec      	beq.n	d16 <_Fault+0x4e>
		_UsageFault(esf);
     d3c:	4620      	mov	r0, r4
     d3e:	f7ff fef1 	bl	b24 <_UsageFault>
     d42:	e7e8      	b.n	d16 <_Fault+0x4e>
		_MpuFault(esf, 0);
     d44:	2100      	movs	r1, #0
     d46:	e7e3      	b.n	d10 <_Fault+0x48>
		_BusFault(esf, 0);
     d48:	2100      	movs	r1, #0
     d4a:	e7ee      	b.n	d2a <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     d4c:	480d      	ldr	r0, [pc, #52]	; (d84 <_Fault+0xbc>)
     d4e:	e7d2      	b.n	cf6 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     d50:	480d      	ldr	r0, [pc, #52]	; (d88 <_Fault+0xc0>)
     d52:	490e      	ldr	r1, [pc, #56]	; (d8c <_Fault+0xc4>)
     d54:	f1a3 0210 	sub.w	r2, r3, #16
     d58:	2b0f      	cmp	r3, #15
     d5a:	bfd8      	it	le
     d5c:	4601      	movle	r1, r0
     d5e:	480c      	ldr	r0, [pc, #48]	; (d90 <_Fault+0xc8>)
     d60:	f000 fb5c 	bl	141c <printk>
     d64:	e7d7      	b.n	d16 <_Fault+0x4e>
     d66:	bf00      	nop
     d68:	e000ed00 	.word	0xe000ed00
     d6c:	00019720 	.word	0x00019720
     d70:	00019738 	.word	0x00019738
     d74:	0001975a 	.word	0x0001975a
     d78:	e000ed28 	.word	0xe000ed28
     d7c:	e000ed29 	.word	0xe000ed29
     d80:	e000ed2c 	.word	0xe000ed2c
     d84:	0001977a 	.word	0x0001977a
     d88:	000196f2 	.word	0x000196f2
     d8c:	00019707 	.word	0x00019707
     d90:	000197b1 	.word	0x000197b1

00000d94 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d94:	4a02      	ldr	r2, [pc, #8]	; (da0 <_FaultInit+0xc>)
     d96:	6953      	ldr	r3, [r2, #20]
     d98:	f043 0310 	orr.w	r3, r3, #16
     d9c:	6153      	str	r3, [r2, #20]
     d9e:	4770      	bx	lr
     da0:	e000ed00 	.word	0xe000ed00

00000da4 <_arch_irq_enable>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     da4:	b243      	sxtb	r3, r0
     da6:	2201      	movs	r2, #1
     da8:	f000 001f 	and.w	r0, r0, #31
     dac:	fa02 f000 	lsl.w	r0, r2, r0
     db0:	095b      	lsrs	r3, r3, #5
     db2:	4a02      	ldr	r2, [pc, #8]	; (dbc <_arch_irq_enable+0x18>)
     db4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     db8:	4770      	bx	lr
     dba:	bf00      	nop
     dbc:	e000e100 	.word	0xe000e100

00000dc0 <_arch_irq_disable>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     dc0:	b243      	sxtb	r3, r0
     dc2:	2201      	movs	r2, #1
     dc4:	095b      	lsrs	r3, r3, #5
     dc6:	f000 001f 	and.w	r0, r0, #31
     dca:	fa02 f000 	lsl.w	r0, r2, r0
     dce:	3320      	adds	r3, #32
     dd0:	4a01      	ldr	r2, [pc, #4]	; (dd8 <_arch_irq_disable+0x18>)
     dd2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     dd6:	4770      	bx	lr
     dd8:	e000e100 	.word	0xe000e100

00000ddc <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     ddc:	0942      	lsrs	r2, r0, #5
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <_arch_irq_is_enabled+0x18>)
     de0:	f000 001f 	and.w	r0, r0, #31
     de4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     de8:	2301      	movs	r3, #1
     dea:	fa03 f000 	lsl.w	r0, r3, r0
}
     dee:	4010      	ands	r0, r2
     df0:	4770      	bx	lr
     df2:	bf00      	nop
     df4:	e000e100 	.word	0xe000e100

00000df8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     df8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
     dfa:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dfc:	bfa8      	it	ge
     dfe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     e02:	f101 0101 	add.w	r1, r1, #1
     e06:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e0a:	bfbb      	ittet	lt
     e0c:	f000 000f 	andlt.w	r0, r0, #15
     e10:	4b04      	ldrlt	r3, [pc, #16]	; (e24 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e12:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e16:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e18:	bfaa      	itet	ge
     e1a:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e1c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e1e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
     e22:	4770      	bx	lr
     e24:	e000ed14 	.word	0xe000ed14

00000e28 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     e28:	f000 b842 	b.w	eb0 <__bus_fault>

00000e2c <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     e2c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     e2e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
     e30:	4b04      	ldr	r3, [pc, #16]	; (e44 <_arch_isr_direct_pm+0x18>)
     e32:	6958      	ldr	r0, [r3, #20]
     e34:	b118      	cbz	r0, e3e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     e36:	2200      	movs	r2, #0
     e38:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
     e3a:	f016 ff81 	bl	17d40 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
     e3e:	b662      	cpsie	i
     e40:	bd08      	pop	{r3, pc}
     e42:	bf00      	nop
     e44:	20001bc0 	.word	0x20001bc0

00000e48 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e4a:	460c      	mov	r4, r1
     e4c:	4616      	mov	r6, r2
     e4e:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     e50:	2204      	movs	r2, #4
     e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e54:	9909      	ldr	r1, [sp, #36]	; 0x24
     e56:	4605      	mov	r5, r0
     e58:	f017 feca 	bl	18bf0 <_init_thread_base>
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e5c:	f1a6 0120 	sub.w	r1, r6, #32
     e60:	4421      	add	r1, r4
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
     e62:	4a0c      	ldr	r2, [pc, #48]	; (e94 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     e64:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e66:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     e6a:	2300      	movs	r3, #0
	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
     e6c:	f022 0201 	bic.w	r2, r2, #1
     e70:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     e72:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     e74:	65ee      	str	r6, [r5, #92]	; 0x5c
     e76:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     e78:	9a06      	ldr	r2, [sp, #24]
     e7a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     e7c:	9a07      	ldr	r2, [sp, #28]
     e7e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     e80:	9a08      	ldr	r2, [sp, #32]
     e82:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     e84:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e8a:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
     e8c:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     e8e:	662b      	str	r3, [r5, #96]	; 0x60
     e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e92:	bf00      	nop
     e94:	000189ed 	.word	0x000189ed

00000e98 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     e98:	4901      	ldr	r1, [pc, #4]	; (ea0 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     e9a:	2210      	movs	r2, #16
	str r2, [r1]
     e9c:	600a      	str	r2, [r1, #0]
	bx lr
     e9e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     ea0:	e000ed10 	.word	0xe000ed10

00000ea4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     ea4:	4040      	eors	r0, r0
	msr BASEPRI, r0
     ea6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
     eaa:	bf30      	wfi

	bx lr
     eac:	4770      	bx	lr
     eae:	bf00      	nop

00000eb0 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
     eb0:	4040      	eors	r0, r0
	msr BASEPRI, r0
     eb2:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     eb6:	f8df c01c 	ldr.w	ip, [pc, #28]	; ed4 <__bus_fault+0x24>
	ldr ip, [ip]
     eba:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     ebe:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     ec2:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     ec4:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     ec8:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
     ecc:	b500      	push	{lr}
	bl _Fault
     ece:	f7ff fefb 	bl	cc8 <_Fault>

	pop {pc}
     ed2:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     ed4:	e000ed04 	.word	0xe000ed04

00000ed8 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     ed8:	2804      	cmp	r0, #4
{
     eda:	b538      	push	{r3, r4, r5, lr}
     edc:	4604      	mov	r4, r0
     ede:	460d      	mov	r5, r1
	switch (reason) {
     ee0:	d013      	beq.n	f0a <_NanoFatalErrorHandler+0x32>
     ee2:	2805      	cmp	r0, #5
     ee4:	d013      	beq.n	f0e <_NanoFatalErrorHandler+0x36>
     ee6:	2803      	cmp	r0, #3
     ee8:	d113      	bne.n	f12 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     eea:	480c      	ldr	r0, [pc, #48]	; (f1c <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     eec:	f000 fa96 	bl	141c <printk>
     ef0:	f017 fb4c 	bl	1858c <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     ef4:	69aa      	ldr	r2, [r5, #24]
     ef6:	4601      	mov	r1, r0
     ef8:	4809      	ldr	r0, [pc, #36]	; (f20 <_NanoFatalErrorHandler+0x48>)
     efa:	f000 fa8f 	bl	141c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     efe:	4629      	mov	r1, r5
     f00:	4620      	mov	r0, r4
}
     f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     f06:	f000 b817 	b.w	f38 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     f0a:	4806      	ldr	r0, [pc, #24]	; (f24 <_NanoFatalErrorHandler+0x4c>)
     f0c:	e7ee      	b.n	eec <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     f0e:	4806      	ldr	r0, [pc, #24]	; (f28 <_NanoFatalErrorHandler+0x50>)
     f10:	e7ec      	b.n	eec <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     f12:	4601      	mov	r1, r0
     f14:	4805      	ldr	r0, [pc, #20]	; (f2c <_NanoFatalErrorHandler+0x54>)
     f16:	f000 fa81 	bl	141c <printk>
		break;
     f1a:	e7e9      	b.n	ef0 <_NanoFatalErrorHandler+0x18>
     f1c:	0001996a 	.word	0x0001996a
     f20:	000199e8 	.word	0x000199e8
     f24:	00019990 	.word	0x00019990
     f28:	000199aa 	.word	0x000199aa
     f2c:	000199c5 	.word	0x000199c5

00000f30 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     f30:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     f32:	6800      	ldr	r0, [r0, #0]
     f34:	f7ff bfd0 	b.w	ed8 <_NanoFatalErrorHandler>

00000f38 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     f38:	2805      	cmp	r0, #5
{
     f3a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     f3c:	d00c      	beq.n	f58 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     f3e:	f017 fd3d 	bl	189bc <k_is_in_isr>
     f42:	b160      	cbz	r0, f5e <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     f44:	f017 fd3a 	bl	189bc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     f48:	4b0c      	ldr	r3, [pc, #48]	; (f7c <_SysFatalErrorHandler+0x44>)
     f4a:	490d      	ldr	r1, [pc, #52]	; (f80 <_SysFatalErrorHandler+0x48>)
     f4c:	2800      	cmp	r0, #0
     f4e:	bf08      	it	eq
     f50:	4619      	moveq	r1, r3
     f52:	480c      	ldr	r0, [pc, #48]	; (f84 <_SysFatalErrorHandler+0x4c>)
     f54:	f000 fa62 	bl	141c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     f58:	f7ff ffa4 	bl	ea4 <k_cpu_idle>
     f5c:	e7fc      	b.n	f58 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     f5e:	f017 fd3d 	bl	189dc <_is_thread_essential>
     f62:	2800      	cmp	r0, #0
     f64:	d1ee      	bne.n	f44 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     f66:	4c08      	ldr	r4, [pc, #32]	; (f88 <_SysFatalErrorHandler+0x50>)
     f68:	4808      	ldr	r0, [pc, #32]	; (f8c <_SysFatalErrorHandler+0x54>)
     f6a:	68a1      	ldr	r1, [r4, #8]
     f6c:	f000 fa56 	bl	141c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     f70:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f76:	f000 b80b 	b.w	f90 <_impl_k_thread_abort>
     f7a:	bf00      	nop
     f7c:	00019a28 	.word	0x00019a28
     f80:	00019a24 	.word	0x00019a24
     f84:	00019a39 	.word	0x00019a39
     f88:	20001bc0 	.word	0x20001bc0
     f8c:	00019a59 	.word	0x00019a59

00000f90 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     f90:	b538      	push	{r3, r4, r5, lr}
     f92:	4605      	mov	r5, r0
	__asm__ volatile(
     f94:	f04f 0320 	mov.w	r3, #32
     f98:	f3ef 8411 	mrs	r4, BASEPRI
     f9c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     fa0:	f017 fdb6 	bl	18b10 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     fa4:	4b0b      	ldr	r3, [pc, #44]	; (fd4 <_impl_k_thread_abort+0x44>)
     fa6:	689b      	ldr	r3, [r3, #8]
     fa8:	429d      	cmp	r5, r3
     faa:	d10d      	bne.n	fc8 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     fac:	4b0a      	ldr	r3, [pc, #40]	; (fd8 <_impl_k_thread_abort+0x48>)
     fae:	685a      	ldr	r2, [r3, #4]
     fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
     fb4:	b922      	cbnz	r2, fc0 <_impl_k_thread_abort+0x30>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
     fb6:	f017 fb13 	bl	185e0 <_update_time_slice_before_swap>
#endif

	return __swap(key);
     fba:	4620      	mov	r0, r4
     fbc:	f7ff fd96 	bl	aec <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     fc0:	685a      	ldr	r2, [r3, #4]
     fc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     fc6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     fc8:	4620      	mov	r0, r4
}
     fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     fce:	f017 ba45 	b.w	1845c <_reschedule_threads>
     fd2:	bf00      	nop
     fd4:	20001bc0 	.word	0x20001bc0
     fd8:	e000ed00 	.word	0xe000ed00

00000fdc <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     fdc:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     fde:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     fe0:	4a0b      	ldr	r2, [pc, #44]	; (1010 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     fe2:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
     fe4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
     fe6:	bf1e      	ittt	ne
	movne	r1, #0
     fe8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     fea:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
     fec:	f016 fea8 	blne	17d40 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     ff0:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     ff2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
     ff6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     ffa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
     ffe:	4905      	ldr	r1, [pc, #20]	; (1014 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1000:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1002:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1004:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
    1006:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
    100a:	f7ff bd0d 	b.w	a28 <_ExcExit>
    100e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1010:	20001bc0 	.word	0x20001bc0
	ldr r1, =_sw_isr_table
    1014:	000000dc 	.word	0x000000dc

00001018 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1018:	2020      	movs	r0, #32
    msr BASEPRI, r0
    101a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    101e:	4805      	ldr	r0, [pc, #20]	; (1034 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1020:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1024:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1026:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    102a:	2002      	movs	r0, #2
    msr CONTROL, r0
    102c:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    1030:	f000 b806 	b.w	1040 <_PrepC>
    ldr r0, =_interrupt_stack
    1034:	20004d48 	.word	0x20004d48

00001038 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1038:	bf30      	wfi
    b _SysNmiOnReset
    103a:	f7ff bffd 	b.w	1038 <_SysNmiOnReset>
    103e:	bf00      	nop

00001040 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1040:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <_PrepC+0x20>)
    1044:	4a07      	ldr	r2, [pc, #28]	; (1064 <_PrepC+0x24>)
    1046:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    104a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    104c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1050:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1054:	f016 fea6 	bl	17da4 <_bss_zero>
	_data_copy();
    1058:	f016 feae 	bl	17db8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    105c:	f016 fed4 	bl	17e08 <_Cstart>
    1060:	00000000 	.word	0x00000000
    1064:	e000ed00 	.word	0xe000ed00

00001068 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1068:	b508      	push	{r3, lr}
	handler();
    106a:	f7ff ffe5 	bl	1038 <_SysNmiOnReset>
	_ExcExit();
}
    106e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1072:	f7ff bcd9 	b.w	a28 <_ExcExit>
	...

00001078 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1078:	4b15      	ldr	r3, [pc, #84]	; (10d0 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    107a:	4916      	ldr	r1, [pc, #88]	; (10d4 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    107c:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    107e:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1080:	680d      	ldr	r5, [r1, #0]
    1082:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1086:	4295      	cmp	r5, r2
    1088:	d80f      	bhi.n	10aa <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    108a:	2200      	movs	r2, #0
    108c:	6848      	ldr	r0, [r1, #4]
    108e:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1090:	4295      	cmp	r5, r2
    1092:	f100 000c 	add.w	r0, r0, #12
    1096:	d10a      	bne.n	10ae <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1098:	2205      	movs	r2, #5
    109a:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    109c:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <arm_mpu_init+0x60>)
    109e:	2201      	movs	r2, #1
    10a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    10a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10a6:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    10aa:	2000      	movs	r0, #0
    10ac:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    10ae:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    10b2:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    10b6:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    10b8:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    10bc:	f041 0110 	orr.w	r1, r1, #16
    10c0:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    10c2:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    10c6:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    10c8:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    10ca:	611c      	str	r4, [r3, #16]
    10cc:	e7e0      	b.n	1090 <arm_mpu_init+0x18>
    10ce:	bf00      	nop
    10d0:	e000ed90 	.word	0xe000ed90
    10d4:	20005e38 	.word	0x20005e38
    10d8:	20000044 	.word	0x20000044

000010dc <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    10dc:	2000      	movs	r0, #0
    10de:	4770      	bx	lr

000010e0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    10e0:	680b      	ldr	r3, [r1, #0]
    10e2:	3301      	adds	r3, #1
    10e4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    10e6:	4b01      	ldr	r3, [pc, #4]	; (10ec <char_out+0xc>)
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	4718      	bx	r3
    10ec:	20005e80 	.word	0x20005e80

000010f0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    10f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10f4:	b085      	sub	sp, #20
    10f6:	469b      	mov	fp, r3
    10f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    10fa:	f8df a090 	ldr.w	sl, [pc, #144]	; 118c <_printk_dec_ulong+0x9c>
    10fe:	2c01      	cmp	r4, #1
    1100:	bfb8      	it	lt
    1102:	2401      	movlt	r4, #1
    1104:	2b01      	cmp	r3, #1
    1106:	bf0c      	ite	eq
    1108:	2330      	moveq	r3, #48	; 0x30
    110a:	2320      	movne	r3, #32
    110c:	4615      	mov	r5, r2
    110e:	4680      	mov	r8, r0
    1110:	4689      	mov	r9, r1
    1112:	9401      	str	r4, [sp, #4]
    1114:	9302      	str	r3, [sp, #8]
    1116:	2601      	movs	r6, #1
    1118:	270a      	movs	r7, #10
    111a:	2200      	movs	r2, #0
    111c:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1120:	b90a      	cbnz	r2, 1126 <_printk_dec_ulong+0x36>
    1122:	45aa      	cmp	sl, r5
    1124:	d21f      	bcs.n	1166 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1126:	fbb5 f0f4 	udiv	r0, r5, r4
    112a:	4649      	mov	r1, r9
    112c:	3030      	adds	r0, #48	; 0x30
    112e:	47c0      	blx	r8
			digits++;
    1130:	3601      	adds	r6, #1
			found_largest_digit = 1;
    1132:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1134:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1136:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1138:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    113c:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    1140:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1144:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1148:	d1e8      	bne.n	111c <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    114a:	4649      	mov	r1, r9
    114c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1150:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    1152:	f1bb 0f03 	cmp.w	fp, #3
    1156:	d103      	bne.n	1160 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1158:	9b01      	ldr	r3, [sp, #4]
    115a:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    115c:	2c00      	cmp	r4, #0
    115e:	dc0f      	bgt.n	1180 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1160:	b005      	add	sp, #20
    1162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1166:	9b01      	ldr	r3, [sp, #4]
    1168:	42bb      	cmp	r3, r7
    116a:	dbe3      	blt.n	1134 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    116c:	f1bb 0f02 	cmp.w	fp, #2
    1170:	d8e0      	bhi.n	1134 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1172:	4649      	mov	r1, r9
    1174:	9802      	ldr	r0, [sp, #8]
    1176:	9203      	str	r2, [sp, #12]
			digits++;
    1178:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    117a:	47c0      	blx	r8
			digits++;
    117c:	9a03      	ldr	r2, [sp, #12]
    117e:	e7d9      	b.n	1134 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1180:	4649      	mov	r1, r9
    1182:	2020      	movs	r0, #32
    1184:	47c0      	blx	r8
    1186:	3c01      	subs	r4, #1
    1188:	e7e8      	b.n	115c <_printk_dec_ulong+0x6c>
    118a:	bf00      	nop
    118c:	3b9ac9ff 	.word	0x3b9ac9ff

00001190 <__printk_hook_install>:
	_char_out = fn;
    1190:	4b01      	ldr	r3, [pc, #4]	; (1198 <__printk_hook_install+0x8>)
    1192:	6018      	str	r0, [r3, #0]
    1194:	4770      	bx	lr
    1196:	bf00      	nop
    1198:	20005e80 	.word	0x20005e80

0000119c <_vprintk>:
{
    119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a0:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    11a2:	f04f 0a00 	mov.w	sl, #0
{
    11a6:	4606      	mov	r6, r0
    11a8:	460f      	mov	r7, r1
    11aa:	9204      	str	r2, [sp, #16]
    11ac:	461c      	mov	r4, r3
	int min_width = -1;
    11ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    11b2:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    11b4:	4655      	mov	r5, sl
	while (*fmt) {
    11b6:	9b04      	ldr	r3, [sp, #16]
    11b8:	7818      	ldrb	r0, [r3, #0]
    11ba:	b910      	cbnz	r0, 11c2 <_vprintk+0x26>
}
    11bc:	b009      	add	sp, #36	; 0x24
    11be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    11c2:	b945      	cbnz	r5, 11d6 <_vprintk+0x3a>
			if (*fmt != '%') {
    11c4:	2825      	cmp	r0, #37	; 0x25
    11c6:	f000 810c 	beq.w	13e2 <_vprintk+0x246>
				out((int)*fmt, ctx);
    11ca:	4639      	mov	r1, r7
    11cc:	47b0      	blx	r6
		++fmt;
    11ce:	9b04      	ldr	r3, [sp, #16]
    11d0:	3301      	adds	r3, #1
    11d2:	9304      	str	r3, [sp, #16]
    11d4:	e7ef      	b.n	11b6 <_vprintk+0x1a>
			switch (*fmt) {
    11d6:	2864      	cmp	r0, #100	; 0x64
    11d8:	d061      	beq.n	129e <_vprintk+0x102>
    11da:	d819      	bhi.n	1210 <_vprintk+0x74>
    11dc:	2839      	cmp	r0, #57	; 0x39
    11de:	d80a      	bhi.n	11f6 <_vprintk+0x5a>
    11e0:	2831      	cmp	r0, #49	; 0x31
    11e2:	d250      	bcs.n	1286 <_vprintk+0xea>
    11e4:	282d      	cmp	r0, #45	; 0x2d
    11e6:	d03c      	beq.n	1262 <_vprintk+0xc6>
    11e8:	2830      	cmp	r0, #48	; 0x30
    11ea:	d03d      	beq.n	1268 <_vprintk+0xcc>
    11ec:	2825      	cmp	r0, #37	; 0x25
    11ee:	d108      	bne.n	1202 <_vprintk+0x66>
				out((int)'%', ctx);
    11f0:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    11f2:	47b0      	blx	r6
    11f4:	e06f      	b.n	12d6 <_vprintk+0x13a>
			switch (*fmt) {
    11f6:	2858      	cmp	r0, #88	; 0x58
    11f8:	f000 8089 	beq.w	130e <_vprintk+0x172>
    11fc:	2863      	cmp	r0, #99	; 0x63
    11fe:	f000 80ea 	beq.w	13d6 <_vprintk+0x23a>
				out((int)'%', ctx);
    1202:	4639      	mov	r1, r7
    1204:	2025      	movs	r0, #37	; 0x25
    1206:	47b0      	blx	r6
				out((int)*fmt, ctx);
    1208:	9b04      	ldr	r3, [sp, #16]
    120a:	4639      	mov	r1, r7
    120c:	7818      	ldrb	r0, [r3, #0]
    120e:	e7f0      	b.n	11f2 <_vprintk+0x56>
			switch (*fmt) {
    1210:	2870      	cmp	r0, #112	; 0x70
    1212:	d072      	beq.n	12fa <_vprintk+0x15e>
    1214:	d806      	bhi.n	1224 <_vprintk+0x88>
    1216:	2869      	cmp	r0, #105	; 0x69
    1218:	d041      	beq.n	129e <_vprintk+0x102>
    121a:	286c      	cmp	r0, #108	; 0x6c
    121c:	d03c      	beq.n	1298 <_vprintk+0xfc>
    121e:	2868      	cmp	r0, #104	; 0x68
    1220:	d0d5      	beq.n	11ce <_vprintk+0x32>
    1222:	e7ee      	b.n	1202 <_vprintk+0x66>
    1224:	2875      	cmp	r0, #117	; 0x75
    1226:	d058      	beq.n	12da <_vprintk+0x13e>
    1228:	d817      	bhi.n	125a <_vprintk+0xbe>
    122a:	2873      	cmp	r0, #115	; 0x73
    122c:	d1e9      	bne.n	1202 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    122e:	6823      	ldr	r3, [r4, #0]
    1230:	f104 0b04 	add.w	fp, r4, #4
    1234:	461c      	mov	r4, r3
				while (*s)
    1236:	4625      	mov	r5, r4
    1238:	f815 0b01 	ldrb.w	r0, [r5], #1
    123c:	2800      	cmp	r0, #0
    123e:	f040 80bf 	bne.w	13c0 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    1242:	f1b8 0f03 	cmp.w	r8, #3
    1246:	f040 80d5 	bne.w	13f4 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    124a:	1ae4      	subs	r4, r4, r3
    124c:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1250:	2c00      	cmp	r4, #0
    1252:	f300 80bb 	bgt.w	13cc <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    1256:	465c      	mov	r4, fp
    1258:	e03d      	b.n	12d6 <_vprintk+0x13a>
			switch (*fmt) {
    125a:	2878      	cmp	r0, #120	; 0x78
    125c:	d057      	beq.n	130e <_vprintk+0x172>
    125e:	287a      	cmp	r0, #122	; 0x7a
    1260:	e7de      	b.n	1220 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    1262:	f04f 0803 	mov.w	r8, #3
    1266:	e7b2      	b.n	11ce <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1268:	f1b9 0f00 	cmp.w	r9, #0
    126c:	da0e      	bge.n	128c <_vprintk+0xf0>
    126e:	f1b8 0f00 	cmp.w	r8, #0
    1272:	f000 80bc 	beq.w	13ee <_vprintk+0x252>
					min_width = *fmt - '0';
    1276:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    127a:	f1b8 0f00 	cmp.w	r8, #0
    127e:	bf08      	it	eq
    1280:	f04f 0802 	moveq.w	r8, #2
    1284:	e7a3      	b.n	11ce <_vprintk+0x32>
				if (min_width < 0) {
    1286:	f1b9 0f00 	cmp.w	r9, #0
    128a:	dbf4      	blt.n	1276 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    128c:	230a      	movs	r3, #10
    128e:	fb03 0909 	mla	r9, r3, r9, r0
    1292:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1296:	e7f0      	b.n	127a <_vprintk+0xde>
				long_ctr++;
    1298:	f10a 0a01 	add.w	sl, sl, #1
    129c:	e797      	b.n	11ce <_vprintk+0x32>
				if (long_ctr < 2) {
    129e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    12a2:	bfc5      	ittet	gt
    12a4:	3407      	addgt	r4, #7
    12a6:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    12aa:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    12ac:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    12ae:	bfd4      	ite	le
    12b0:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    12b2:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    12b6:	2d00      	cmp	r5, #0
    12b8:	da05      	bge.n	12c6 <_vprintk+0x12a>
					out((int)'-', ctx);
    12ba:	4639      	mov	r1, r7
    12bc:	202d      	movs	r0, #45	; 0x2d
    12be:	47b0      	blx	r6
					d = -d;
    12c0:	426d      	negs	r5, r5
					min_width--;
    12c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    12c6:	f8cd 9000 	str.w	r9, [sp]
    12ca:	4643      	mov	r3, r8
    12cc:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    12ce:	4639      	mov	r1, r7
    12d0:	4630      	mov	r0, r6
    12d2:	f7ff ff0d 	bl	10f0 <_printk_dec_ulong>
			might_format = 0;
    12d6:	2500      	movs	r5, #0
				break;
    12d8:	e779      	b.n	11ce <_vprintk+0x32>
				if (long_ctr < 2) {
    12da:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    12de:	bfc5      	ittet	gt
    12e0:	3407      	addgt	r4, #7
    12e2:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    12e6:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    12e8:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    12ea:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    12ee:	bfcc      	ite	gt
    12f0:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    12f4:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    12f6:	4643      	mov	r3, r8
    12f8:	e7e9      	b.n	12ce <_vprintk+0x132>
				  out('0', ctx);
    12fa:	4639      	mov	r1, r7
    12fc:	2030      	movs	r0, #48	; 0x30
    12fe:	47b0      	blx	r6
				  out('x', ctx);
    1300:	4639      	mov	r1, r7
    1302:	2078      	movs	r0, #120	; 0x78
    1304:	47b0      	blx	r6
				  min_width = 8;
    1306:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    130a:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    130e:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    1312:	bfc7      	ittee	gt
    1314:	3407      	addgt	r4, #7
    1316:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    131a:	6823      	ldrle	r3, [r4, #0]
    131c:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    131e:	bfc2      	ittt	gt
    1320:	f103 0408 	addgt.w	r4, r3, #8
    1324:	681b      	ldrgt	r3, [r3, #0]
    1326:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1328:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    132c:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1330:	bfd8      	it	le
    1332:	3404      	addle	r4, #4
	int digits = 0;
    1334:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    1336:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1338:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    133a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    133e:	9b05      	ldr	r3, [sp, #20]
    1340:	ea4f 008b 	mov.w	r0, fp, lsl #2
    1344:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1348:	f010 000f 	ands.w	r0, r0, #15
    134c:	d109      	bne.n	1362 <_vprintk+0x1c6>
    134e:	9b07      	ldr	r3, [sp, #28]
    1350:	b913      	cbnz	r3, 1358 <_vprintk+0x1bc>
    1352:	f1bb 0f00 	cmp.w	fp, #0
    1356:	d122      	bne.n	139e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1358:	f04f 0e30 	mov.w	lr, #48	; 0x30
    135c:	e007      	b.n	136e <_vprintk+0x1d2>
	for (; size; size--) {
    135e:	9a06      	ldr	r2, [sp, #24]
    1360:	e7eb      	b.n	133a <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1362:	2809      	cmp	r0, #9
    1364:	bf8c      	ite	hi
    1366:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    136a:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    136e:	4639      	mov	r1, r7
    1370:	4470      	add	r0, lr
    1372:	9206      	str	r2, [sp, #24]
    1374:	47b0      	blx	r6
			digits++;
    1376:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1378:	9507      	str	r5, [sp, #28]
			digits++;
    137a:	3301      	adds	r3, #1
    137c:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    137e:	f1bb 0f00 	cmp.w	fp, #0
    1382:	d1ec      	bne.n	135e <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1384:	f1b8 0f03 	cmp.w	r8, #3
    1388:	d1a5      	bne.n	12d6 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    138a:	9b03      	ldr	r3, [sp, #12]
    138c:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1390:	2d00      	cmp	r5, #0
    1392:	dda0      	ble.n	12d6 <_vprintk+0x13a>
			out(' ', ctx);
    1394:	4639      	mov	r1, r7
    1396:	2020      	movs	r0, #32
    1398:	47b0      	blx	r6
    139a:	3d01      	subs	r5, #1
    139c:	e7f8      	b.n	1390 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    139e:	1e53      	subs	r3, r2, #1
    13a0:	4591      	cmp	r9, r2
    13a2:	9306      	str	r3, [sp, #24]
    13a4:	dbeb      	blt.n	137e <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    13a6:	f1b8 0f01 	cmp.w	r8, #1
    13aa:	d103      	bne.n	13b4 <_vprintk+0x218>
				out('0', ctx);
    13ac:	4639      	mov	r1, r7
    13ae:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    13b0:	47b0      	blx	r6
    13b2:	e7e4      	b.n	137e <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    13b4:	f1b8 0f02 	cmp.w	r8, #2
    13b8:	d1e1      	bne.n	137e <_vprintk+0x1e2>
				out(' ', ctx);
    13ba:	4639      	mov	r1, r7
    13bc:	2020      	movs	r0, #32
    13be:	e7f7      	b.n	13b0 <_vprintk+0x214>
					out((int)(*s++), ctx);
    13c0:	4639      	mov	r1, r7
    13c2:	9303      	str	r3, [sp, #12]
    13c4:	462c      	mov	r4, r5
    13c6:	47b0      	blx	r6
    13c8:	9b03      	ldr	r3, [sp, #12]
    13ca:	e734      	b.n	1236 <_vprintk+0x9a>
						out(' ', ctx);
    13cc:	4639      	mov	r1, r7
    13ce:	2020      	movs	r0, #32
    13d0:	47b0      	blx	r6
    13d2:	3c01      	subs	r4, #1
    13d4:	e73c      	b.n	1250 <_vprintk+0xb4>
				out(c, ctx);
    13d6:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    13d8:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    13da:	4639      	mov	r1, r7
    13dc:	47b0      	blx	r6
				int c = va_arg(ap, int);
    13de:	462c      	mov	r4, r5
    13e0:	e779      	b.n	12d6 <_vprintk+0x13a>
				long_ctr = 0;
    13e2:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    13e4:	46a8      	mov	r8, r5
				min_width = -1;
    13e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    13ea:	2501      	movs	r5, #1
    13ec:	e6ef      	b.n	11ce <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    13ee:	f04f 0801 	mov.w	r8, #1
    13f2:	e6ec      	b.n	11ce <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    13f4:	465c      	mov	r4, fp
			might_format = 0;
    13f6:	4605      	mov	r5, r0
    13f8:	e6e9      	b.n	11ce <_vprintk+0x32>
	...

000013fc <vprintk>:
{
    13fc:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    13fe:	ac02      	add	r4, sp, #8
    1400:	2300      	movs	r3, #0
    1402:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    1406:	4602      	mov	r2, r0
    1408:	460b      	mov	r3, r1
    140a:	4803      	ldr	r0, [pc, #12]	; (1418 <vprintk+0x1c>)
    140c:	4621      	mov	r1, r4
    140e:	f7ff fec5 	bl	119c <_vprintk>
}
    1412:	9801      	ldr	r0, [sp, #4]
    1414:	b002      	add	sp, #8
    1416:	bd10      	pop	{r4, pc}
    1418:	000010e1 	.word	0x000010e1

0000141c <printk>:
{
    141c:	b40f      	push	{r0, r1, r2, r3}
    141e:	b507      	push	{r0, r1, r2, lr}
    1420:	a904      	add	r1, sp, #16
    1422:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    1426:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1428:	f7ff ffe8 	bl	13fc <vprintk>
}
    142c:	b003      	add	sp, #12
    142e:	f85d eb04 	ldr.w	lr, [sp], #4
    1432:	b004      	add	sp, #16
    1434:	4770      	bx	lr

00001436 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_ECC_DH, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 39);
    1436:	4770      	bx	lr

00001438 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    1438:	428b      	cmp	r3, r1
{
    143a:	b538      	push	{r3, r4, r5, lr}
    143c:	4615      	mov	r5, r2
    143e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    1440:	d805      	bhi.n	144e <_copy+0x16>
		(void)memcpy(to, from, from_len);
    1442:	461a      	mov	r2, r3
    1444:	4629      	mov	r1, r5
    1446:	f7ff f907 	bl	658 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    144a:	4620      	mov	r0, r4
    144c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    144e:	2400      	movs	r4, #0
    1450:	e7fb      	b.n	144a <_copy+0x12>

00001452 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    1452:	f7ff b92d 	b.w	6b0 <memset>

00001456 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    1456:	09c3      	lsrs	r3, r0, #7
    1458:	005a      	lsls	r2, r3, #1
    145a:	4413      	add	r3, r2
    145c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1460:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    1464:	b2c0      	uxtb	r0, r0
    1466:	4770      	bx	lr

00001468 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
    1468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    146c:	4606      	mov	r6, r0
    146e:	b0a8      	sub	sp, #160	; 0xa0
    1470:	460f      	mov	r7, r1
    1472:	4614      	mov	r4, r2
    1474:	2540      	movs	r5, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
    1476:	f04f 0820 	mov.w	r8, #32
		uECC_RNG_Function rng_function = uECC_get_rng();
    147a:	f000 f965 	bl	1748 <uECC_get_rng>
		if (!rng_function ||
    147e:	4603      	mov	r3, r0
    1480:	b918      	cbnz	r0, 148a <uECC_make_key+0x22>
        		return 0;
    1482:	2000      	movs	r0, #0

      			return 1;
    		}
  	}
	return 0;
}
    1484:	b028      	add	sp, #160	; 0xa0
    1486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
    148a:	2140      	movs	r1, #64	; 0x40
    148c:	a808      	add	r0, sp, #32
    148e:	4798      	blx	r3
		if (!rng_function ||
    1490:	2800      	cmp	r0, #0
    1492:	d0f6      	beq.n	1482 <uECC_make_key+0x1a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
    1494:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    1498:	f104 0224 	add.w	r2, r4, #36	; 0x24
    149c:	a908      	add	r1, sp, #32
    149e:	4668      	mov	r0, sp
    14a0:	331f      	adds	r3, #31
    14a2:	fb93 f3f8 	sdiv	r3, r3, r8
    14a6:	b25b      	sxtb	r3, r3
    14a8:	f000 faeb 	bl	1a82 <uECC_vli_mmod>
		if (EccPoint_compute_public_key(_public, _private, curve)) {
    14ac:	4622      	mov	r2, r4
    14ae:	4669      	mov	r1, sp
    14b0:	a818      	add	r0, sp, #96	; 0x60
    14b2:	f000 ff08 	bl	22c6 <EccPoint_compute_public_key>
    14b6:	b300      	cbz	r0, 14fa <uECC_make_key+0x92>
					       BITS_TO_BYTES(curve->num_n_bits),
    14b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
    14bc:	466a      	mov	r2, sp
					       BITS_TO_BYTES(curve->num_n_bits),
    14be:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
    14c0:	4638      	mov	r0, r7
    14c2:	2108      	movs	r1, #8
    14c4:	fb93 f1f1 	sdiv	r1, r3, r1
    14c8:	f000 ff25 	bl	2316 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key,
    14cc:	aa18      	add	r2, sp, #96	; 0x60
    14ce:	f994 1001 	ldrsb.w	r1, [r4, #1]
    14d2:	4630      	mov	r0, r6
    14d4:	f000 ff1f 	bl	2316 <uECC_vli_nativeToBytes>
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
    14d8:	f994 1001 	ldrsb.w	r1, [r4, #1]
					       _public + curve->num_words);
    14dc:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
    14e0:	ab18      	add	r3, sp, #96	; 0x60
    14e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    14e6:	1870      	adds	r0, r6, r1
    14e8:	f000 ff15 	bl	2316 <uECC_vli_nativeToBytes>
			memset(_private, 0, NUM_ECC_BYTES);
    14ec:	2220      	movs	r2, #32
    14ee:	2100      	movs	r1, #0
    14f0:	4668      	mov	r0, sp
    14f2:	f7ff f8dd 	bl	6b0 <memset>
      			return 1;
    14f6:	2001      	movs	r0, #1
    14f8:	e7c4      	b.n	1484 <uECC_make_key+0x1c>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    14fa:	3d01      	subs	r5, #1
    14fc:	d1bd      	bne.n	147a <uECC_make_key+0x12>
    14fe:	e7c0      	b.n	1482 <uECC_make_key+0x1a>

00001500 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
    1500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1504:	4691      	mov	r9, r2
    1506:	b0a5      	sub	sp, #148	; 0x94
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
    1508:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	wordcount_t num_bytes = curve->num_bytes;
    150c:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
    1510:	f993 b000 	ldrsb.w	fp, [r3]
	uECC_word_t *p2[2] = {_private, tmp};
    1514:	ad04      	add	r5, sp, #16
{
    1516:	4682      	mov	sl, r0
	uECC_vli_bytesToNative(_private,
    1518:	f04f 0808 	mov.w	r8, #8
	uECC_word_t *p2[2] = {_private, tmp};
    151c:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
    151e:	4628      	mov	r0, r5
			       BITS_TO_BYTES(curve->num_n_bits));
    1520:	3207      	adds	r2, #7
	uECC_vli_bytesToNative(_private,
    1522:	fb92 f2f8 	sdiv	r2, r2, r8
{
    1526:	461c      	mov	r4, r3
	uECC_word_t *p2[2] = {_private, tmp};
    1528:	9502      	str	r5, [sp, #8]
    152a:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
    152c:	f000 ff07 	bl	233e <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
    1530:	463a      	mov	r2, r7
    1532:	4651      	mov	r1, sl
    1534:	a814      	add	r0, sp, #80	; 0x50
    1536:	f000 ff02 	bl	233e <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
    153a:	ab14      	add	r3, sp, #80	; 0x50
    153c:	eb0a 0107 	add.w	r1, sl, r7
    1540:	eb03 008b 	add.w	r0, r3, fp, lsl #2
    1544:	463a      	mov	r2, r7
    1546:	f000 fefa 	bl	233e <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
    154a:	4623      	mov	r3, r4
    154c:	4632      	mov	r2, r6
    154e:	4629      	mov	r1, r5
    1550:	4628      	mov	r0, r5
    1552:	f000 fe8c 	bl	226e <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
    1556:	fab0 f080 	clz	r0, r0
    155a:	9401      	str	r4, [sp, #4]
    155c:	ab24      	add	r3, sp, #144	; 0x90
    155e:	0940      	lsrs	r0, r0, #5
    1560:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1564:	8863      	ldrh	r3, [r4, #2]
    1566:	3301      	adds	r3, #1
    1568:	b21b      	sxth	r3, r3
    156a:	9300      	str	r3, [sp, #0]
    156c:	a914      	add	r1, sp, #80	; 0x50
    156e:	2300      	movs	r3, #0
    1570:	f850 2c88 	ldr.w	r2, [r0, #-136]
    1574:	4608      	mov	r0, r1
    1576:	f000 fda9 	bl	20cc <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
    157a:	aa14      	add	r2, sp, #80	; 0x50
    157c:	4639      	mov	r1, r7
    157e:	4648      	mov	r0, r9
    1580:	f000 fec9 	bl	2316 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
    1584:	4621      	mov	r1, r4
    1586:	a814      	add	r0, sp, #80	; 0x50
    1588:	f000 fd17 	bl	1fba <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
    158c:	eb0d 0408 	add.w	r4, sp, r8
	r = !EccPoint_isZero(_public, curve);
    1590:	4607      	mov	r7, r0
	memset(p2, 0, sizeof(p2));
    1592:	4642      	mov	r2, r8
    1594:	2100      	movs	r1, #0
    1596:	4620      	mov	r0, r4
    1598:	f7ff f88a 	bl	6b0 <memset>
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
    159c:	2220      	movs	r2, #32
    159e:	2100      	movs	r1, #0
    15a0:	4630      	mov	r0, r6
    15a2:	f7ff f885 	bl	6b0 <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
    15a6:	2220      	movs	r2, #32
    15a8:	2100      	movs	r1, #0
    15aa:	4628      	mov	r0, r5
    15ac:	f7ff f880 	bl	6b0 <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
    15b0:	fab7 f087 	clz	r0, r7
    15b4:	0940      	lsrs	r0, r0, #5
    15b6:	b025      	add	sp, #148	; 0x94
    15b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000015bc <uECC_vli_add>:

/* Computes result = left + right, returning carry, in constant time.
 * Can modify in place. */
static uECC_word_t uECC_vli_add(uECC_word_t *result, const uECC_word_t *left,
				const uECC_word_t *right, wordcount_t num_words)
{
    15bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uECC_word_t carry = 0;
	wordcount_t i;
	for (i = 0; i < num_words; ++i) {
    15be:	2400      	movs	r4, #0
{
    15c0:	4686      	mov	lr, r0
	uECC_word_t carry = 0;
    15c2:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
    15c4:	b265      	sxtb	r5, r4
    15c6:	42ab      	cmp	r3, r5
    15c8:	dc00      	bgt.n	15cc <uECC_vli_add+0x10>
		uECC_word_t val = (sum < left[i]);
		carry = cond_set(val, carry, (sum != left[i]));
		result[i] = sum;
	}
	return carry;
}
    15ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
    15cc:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    15d0:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    15d4:	442e      	add	r6, r5
    15d6:	4406      	add	r6, r0
		uECC_word_t val = (sum < left[i]);
    15d8:	42b5      	cmp	r5, r6
    15da:	bf8c      	ite	hi
    15dc:	2501      	movhi	r5, #1
    15de:	2500      	movls	r5, #0
		carry = cond_set(val, carry, (sum != left[i]));
    15e0:	bf14      	ite	ne
    15e2:	2701      	movne	r7, #1
    15e4:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
    15e6:	fb07 f705 	mul.w	r7, r7, r5
    15ea:	bf0c      	ite	eq
    15ec:	4605      	moveq	r5, r0
    15ee:	2500      	movne	r5, #0
		result[i] = sum;
    15f0:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
    15f4:	ea47 0005 	orr.w	r0, r7, r5
    15f8:	3401      	adds	r4, #1
    15fa:	e7e3      	b.n	15c4 <uECC_vli_add+0x8>

000015fc <uECC_vli_rshift1>:
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
    15fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
    1600:	2300      	movs	r3, #0
	while (vli-- > end) {
    1602:	4288      	cmp	r0, r1
    1604:	d300      	bcc.n	1608 <uECC_vli_rshift1+0xc>
		uECC_word_t temp = *vli;
		*vli = (temp >> 1) | carry;
		carry = temp << (uECC_WORD_BITS - 1);
	}
}
    1606:	4770      	bx	lr
		uECC_word_t temp = *vli;
    1608:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
    160c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    1610:	f841 3d04 	str.w	r3, [r1, #-4]!
		carry = temp << (uECC_WORD_BITS - 1);
    1614:	07d3      	lsls	r3, r2, #31
    1616:	e7f4      	b.n	1602 <uECC_vli_rshift1+0x6>

00001618 <vli_modInv_update>:
			      wordcount_t num_words)
{

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
    1618:	6803      	ldr	r3, [r0, #0]
{
    161a:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
    161c:	f013 0501 	ands.w	r5, r3, #1
{
    1620:	4606      	mov	r6, r0
    1622:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
    1624:	d005      	beq.n	1632 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
    1626:	4613      	mov	r3, r2
    1628:	460a      	mov	r2, r1
    162a:	4601      	mov	r1, r0
    162c:	f7ff ffc6 	bl	15bc <uECC_vli_add>
    1630:	4605      	mov	r5, r0
	}
	uECC_vli_rshift1(uv, num_words);
    1632:	4621      	mov	r1, r4
    1634:	4630      	mov	r0, r6
    1636:	f7ff ffe1 	bl	15fc <uECC_vli_rshift1>
	if (carry) {
    163a:	b145      	cbz	r5, 164e <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
    163c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    1640:	3a01      	subs	r2, #1
    1642:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
    1646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    164a:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
    164e:	bd70      	pop	{r4, r5, r6, pc}

00001650 <uECC_vli_mult>:
{
    1650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1654:	b087      	sub	sp, #28
    1656:	9203      	str	r2, [sp, #12]
	for (k = 0; k < num_words; ++k) {
    1658:	2200      	movs	r2, #0
{
    165a:	9102      	str	r1, [sp, #8]
	uECC_word_t r1 = 0;
    165c:	4615      	mov	r5, r2
	uECC_word_t r0 = 0;
    165e:	4614      	mov	r4, r2
    1660:	fa4f f882 	sxtb.w	r8, r2
	for (k = 0; k < num_words; ++k) {
    1664:	4598      	cmp	r8, r3
    1666:	db14      	blt.n	1692 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
    1668:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    166c:	2200      	movs	r2, #0
    166e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    1672:	9200      	str	r2, [sp, #0]
    1674:	f89d 2000 	ldrb.w	r2, [sp]
    1678:	eb02 0e03 	add.w	lr, r2, r3
    167c:	fa4f fe8e 	sxtb.w	lr, lr
    1680:	45e6      	cmp	lr, ip
    1682:	db33      	blt.n	16ec <uECC_vli_mult+0x9c>
	result[num_words * 2 - 1] = r0;
    1684:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    1688:	f840 4c04 	str.w	r4, [r0, #-4]
}
    168c:	b007      	add	sp, #28
    168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1692:	9e03      	ldr	r6, [sp, #12]
	for (k = 0; k < num_words; ++k) {
    1694:	f04f 0e00 	mov.w	lr, #0
    1698:	eb06 0982 	add.w	r9, r6, r2, lsl #2
    169c:	46f4      	mov	ip, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
    169e:	9902      	ldr	r1, [sp, #8]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
    16a0:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
    16a4:	f851 602e 	ldr.w	r6, [r1, lr, lsl #2]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
    16a8:	9501      	str	r5, [sp, #4]
    16aa:	2500      	movs	r5, #0
    16ac:	9500      	str	r5, [sp, #0]
	uECC_dword_t p = (uECC_dword_t)a * b;
    16ae:	fba7 ab06 	umull	sl, fp, r7, r6
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
    16b2:	e9dd 6700 	ldrd	r6, r7, [sp]
    16b6:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
    16ba:	eb16 040a 	adds.w	r4, r6, sl
    16be:	eb47 050b 	adc.w	r5, r7, fp
	*r2 += (r01 < p);
    16c2:	455d      	cmp	r5, fp
    16c4:	f10e 0e01 	add.w	lr, lr, #1
    16c8:	bf08      	it	eq
    16ca:	4554      	cmpeq	r4, sl
		for (i = 0; i <= k; ++i) {
    16cc:	fa4f fa8e 	sxtb.w	sl, lr
	r01 += p;
    16d0:	4626      	mov	r6, r4
	*r2 += (r01 < p);
    16d2:	bf34      	ite	cc
    16d4:	2401      	movcc	r4, #1
    16d6:	2400      	movcs	r4, #0
		for (i = 0; i <= k; ++i) {
    16d8:	45d0      	cmp	r8, sl
	*r2 += (r01 < p);
    16da:	44a4      	add	ip, r4
	*r0 = (uECC_word_t)r01;
    16dc:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
    16de:	dade      	bge.n	169e <uECC_vli_mult+0x4e>
		result[k] = r0;
    16e0:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
    16e4:	462c      	mov	r4, r5
    16e6:	3201      	adds	r2, #1
	*r2 += (r01 < p);
    16e8:	4665      	mov	r5, ip
    16ea:	e7b9      	b.n	1660 <uECC_vli_mult+0x10>
    16ec:	3201      	adds	r2, #1
		for (i = (k + 1) - num_words; i < num_words; ++i) {
    16ee:	462f      	mov	r7, r5
    16f0:	b252      	sxtb	r2, r2
    16f2:	2500      	movs	r5, #0
    16f4:	429a      	cmp	r2, r3
    16f6:	db06      	blt.n	1706 <uECC_vli_mult+0xb6>
    16f8:	9a00      	ldr	r2, [sp, #0]
		result[k] = r0;
    16fa:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
    16fe:	3201      	adds	r2, #1
    1700:	9200      	str	r2, [sp, #0]
    1702:	463c      	mov	r4, r7
    1704:	e7b6      	b.n	1674 <uECC_vli_mult+0x24>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
    1706:	ebae 0602 	sub.w	r6, lr, r2
	uECC_dword_t p = (uECC_dword_t)a * b;
    170a:	9903      	ldr	r1, [sp, #12]
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
    170c:	9705      	str	r7, [sp, #20]
	uECC_dword_t p = (uECC_dword_t)a * b;
    170e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    1712:	9902      	ldr	r1, [sp, #8]
    1714:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1718:	fba6 ab01 	umull	sl, fp, r6, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
    171c:	2100      	movs	r1, #0
    171e:	9104      	str	r1, [sp, #16]
    1720:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    1724:	ea46 0604 	orr.w	r6, r6, r4
	r01 += p;
    1728:	eb16 080a 	adds.w	r8, r6, sl
    172c:	eb47 090b 	adc.w	r9, r7, fp
	*r2 += (r01 < p);
    1730:	45d9      	cmp	r9, fp
    1732:	bf08      	it	eq
    1734:	45d0      	cmpeq	r8, sl
    1736:	bf34      	ite	cc
    1738:	2401      	movcc	r4, #1
    173a:	460c      	movcs	r4, r1
    173c:	3201      	adds	r2, #1
    173e:	4425      	add	r5, r4
	r01 += p;
    1740:	464f      	mov	r7, r9
    1742:	b252      	sxtb	r2, r2
	*r0 = (uECC_word_t)r01;
    1744:	4644      	mov	r4, r8
    1746:	e7d5      	b.n	16f4 <uECC_vli_mult+0xa4>

00001748 <uECC_get_rng>:
}
    1748:	4b01      	ldr	r3, [pc, #4]	; (1750 <uECC_get_rng+0x8>)
    174a:	6818      	ldr	r0, [r3, #0]
    174c:	4770      	bx	lr
    174e:	bf00      	nop
    1750:	20005e84 	.word	0x20005e84

00001754 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
    1754:	2300      	movs	r3, #0
{
    1756:	b510      	push	{r4, lr}
		 vli[i] = 0;
    1758:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
    175a:	b25a      	sxtb	r2, r3
    175c:	4291      	cmp	r1, r2
    175e:	dc00      	bgt.n	1762 <uECC_vli_clear+0xe>
}
    1760:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
    1762:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    1766:	3301      	adds	r3, #1
    1768:	e7f7      	b.n	175a <uECC_vli_clear+0x6>

0000176a <uECC_vli_isZero>:
{
    176a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
    176c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
    176e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
    1770:	b25c      	sxtb	r4, r3
    1772:	42a1      	cmp	r1, r4
    1774:	dc03      	bgt.n	177e <uECC_vli_isZero+0x14>
}
    1776:	fab2 f082 	clz	r0, r2
    177a:	0940      	lsrs	r0, r0, #5
    177c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
    177e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    1782:	3301      	adds	r3, #1
    1784:	4322      	orrs	r2, r4
    1786:	e7f3      	b.n	1770 <uECC_vli_isZero+0x6>

00001788 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    1788:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    178a:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    178c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    1790:	f001 011f 	and.w	r1, r1, #31
    1794:	fa03 f101 	lsl.w	r1, r3, r1
}
    1798:	4008      	ands	r0, r1
    179a:	4770      	bx	lr

0000179c <uECC_vli_numBits>:
{
    179c:	3901      	subs	r1, #1
    179e:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    17a0:	2900      	cmp	r1, #0
    17a2:	da04      	bge.n	17ae <uECC_vli_numBits+0x12>
	return (i + 1);
    17a4:	3101      	adds	r1, #1
    17a6:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
    17a8:	b931      	cbnz	r1, 17b8 <uECC_vli_numBits+0x1c>
		return 0;
    17aa:	4608      	mov	r0, r1
}
    17ac:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    17ae:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d0f2      	beq.n	179c <uECC_vli_numBits>
    17b6:	e7f5      	b.n	17a4 <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
    17b8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
    17bc:	3b01      	subs	r3, #1
    17be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
    17c2:	2000      	movs	r0, #0
    17c4:	b923      	cbnz	r3, 17d0 <uECC_vli_numBits+0x34>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    17c6:	3901      	subs	r1, #1
    17c8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    17cc:	b208      	sxth	r0, r1
    17ce:	4770      	bx	lr
		digit >>= 1;
    17d0:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
    17d2:	3001      	adds	r0, #1
    17d4:	e7f6      	b.n	17c4 <uECC_vli_numBits+0x28>

000017d6 <uECC_vli_set>:
{
    17d6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
    17d8:	2300      	movs	r3, #0
    17da:	b25c      	sxtb	r4, r3
    17dc:	42a2      	cmp	r2, r4
    17de:	dc00      	bgt.n	17e2 <uECC_vli_set+0xc>
}
    17e0:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
    17e2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    17e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    17ea:	3301      	adds	r3, #1
    17ec:	e7f5      	b.n	17da <uECC_vli_set+0x4>

000017ee <uECC_vli_cmp_unsafe>:
{
    17ee:	b510      	push	{r4, lr}
    17f0:	3a01      	subs	r2, #1
    17f2:	b252      	sxtb	r2, r2
	for (i = num_words - 1; i >= 0; --i) {
    17f4:	2a00      	cmp	r2, #0
    17f6:	da01      	bge.n	17fc <uECC_vli_cmp_unsafe+0xe>
	return 0;
    17f8:	2000      	movs	r0, #0
    17fa:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
    17fc:	b213      	sxth	r3, r2
    17fe:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    1802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1806:	429c      	cmp	r4, r3
    1808:	d803      	bhi.n	1812 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
    180a:	d2f1      	bcs.n	17f0 <uECC_vli_cmp_unsafe+0x2>
			return -1;
    180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1810:	bd10      	pop	{r4, pc}
			return 1;
    1812:	2001      	movs	r0, #1
    1814:	bd10      	pop	{r4, pc}

00001816 <uECC_vli_equal>:
{
    1816:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
    1818:	3a01      	subs	r2, #1
    181a:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
    181c:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
    181e:	2a00      	cmp	r2, #0
    1820:	da03      	bge.n	182a <uECC_vli_equal+0x14>
}
    1822:	1c18      	adds	r0, r3, #0
    1824:	bf18      	it	ne
    1826:	2001      	movne	r0, #1
    1828:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
    182a:	b215      	sxth	r5, r2
    182c:	3a01      	subs	r2, #1
    182e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    1832:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
    1836:	406c      	eors	r4, r5
    1838:	4323      	orrs	r3, r4
    183a:	b252      	sxtb	r2, r2
    183c:	e7ef      	b.n	181e <uECC_vli_equal+0x8>

0000183e <uECC_vli_sub>:
{
    183e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
    1840:	2400      	movs	r4, #0
{
    1842:	4686      	mov	lr, r0
	uECC_word_t borrow = 0;
    1844:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
    1846:	b265      	sxtb	r5, r4
    1848:	42ab      	cmp	r3, r5
    184a:	dc00      	bgt.n	184e <uECC_vli_sub+0x10>
}
    184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
    184e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    1852:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    1856:	1bae      	subs	r6, r5, r6
    1858:	1a36      	subs	r6, r6, r0
		uECC_word_t val = (diff > left[i]);
    185a:	42b5      	cmp	r5, r6
    185c:	bf34      	ite	cc
    185e:	2501      	movcc	r5, #1
    1860:	2500      	movcs	r5, #0
		borrow = cond_set(val, borrow, (diff != left[i]));
    1862:	bf14      	ite	ne
    1864:	2701      	movne	r7, #1
    1866:	2700      	moveq	r7, #0
	return (p_true*(cond)) | (p_false*(!cond));
    1868:	fb07 f705 	mul.w	r7, r7, r5
    186c:	bf0c      	ite	eq
    186e:	4605      	moveq	r5, r0
    1870:	2500      	movne	r5, #0
		result[i] = diff;
    1872:	f84e 6024 	str.w	r6, [lr, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
    1876:	ea47 0005 	orr.w	r0, r7, r5
    187a:	3401      	adds	r4, #1
    187c:	e7e3      	b.n	1846 <uECC_vli_sub+0x8>
	...

00001880 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    1882:	2208      	movs	r2, #8
{
    1884:	b089      	sub	sp, #36	; 0x24
    1886:	460c      	mov	r4, r1
    1888:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    188a:	f7ff ffa4 	bl	17d6 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    188e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1890:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    1892:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1894:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    1896:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    1898:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    189a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    189c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    189e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    18a0:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    18a2:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18a4:	2308      	movs	r3, #8
    18a6:	466a      	mov	r2, sp
    18a8:	4669      	mov	r1, sp
    18aa:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    18ac:	9702      	str	r7, [sp, #8]
    18ae:	9701      	str	r7, [sp, #4]
    18b0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18b2:	f7ff fe83 	bl	15bc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    18b6:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18b8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    18ba:	466a      	mov	r2, sp
    18bc:	4631      	mov	r1, r6
    18be:	4630      	mov	r0, r6
    18c0:	f7ff fe7c 	bl	15bc <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    18c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    18c6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    18c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    18ca:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    18cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    18ce:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    18d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    18d2:	9306      	str	r3, [sp, #24]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    18d4:	4405      	add	r5, r0
	tmp[7] = 0;
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18d6:	2308      	movs	r3, #8
    18d8:	466a      	mov	r2, sp
    18da:	4669      	mov	r1, sp
    18dc:	4668      	mov	r0, sp
	tmp[7] = 0;
    18de:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18e0:	f7ff fe6c 	bl	15bc <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    18e4:	2308      	movs	r3, #8
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    18e6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    18e8:	466a      	mov	r2, sp
    18ea:	4631      	mov	r1, r6
    18ec:	4630      	mov	r0, r6
    18ee:	f7ff fe65 	bl	15bc <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    18f2:	6a23      	ldr	r3, [r4, #32]
    18f4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    18f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    18f8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    18fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    18fc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    18fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1900:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    1902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1904:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1906:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1908:	2308      	movs	r3, #8
    190a:	466a      	mov	r2, sp
    190c:	4631      	mov	r1, r6
    190e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    1910:	9705      	str	r7, [sp, #20]
    1912:	9704      	str	r7, [sp, #16]
    1914:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1916:	f7ff fe51 	bl	15bc <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    191a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    191c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    191e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1920:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    1922:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[3] = product[13];
	tmp[4] = product[14];
    1924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[2] = product[11];
    1926:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
    1928:	6b63      	ldr	r3, [r4, #52]	; 0x34
    192a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
    192c:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
	tmp[6] = product[13];
    192e:	9306      	str	r3, [sp, #24]
	tmp[5] = product[15];
    1930:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[7] = product[8];
    1932:	6a23      	ldr	r3, [r4, #32]
	tmp[5] = product[15];
    1934:	9205      	str	r2, [sp, #20]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    1936:	4405      	add	r5, r0
	tmp[7] = product[8];
    1938:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    193a:	466a      	mov	r2, sp
    193c:	2308      	movs	r3, #8
    193e:	4631      	mov	r1, r6
    1940:	4630      	mov	r0, r6
    1942:	f7ff fe3b 	bl	15bc <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    1946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1948:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    194a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    194c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    194e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1950:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    1952:	6a23      	ldr	r3, [r4, #32]
    1954:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    1956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1958:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    195a:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    195c:	2308      	movs	r3, #8
    195e:	466a      	mov	r2, sp
    1960:	4631      	mov	r1, r6
    1962:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    1964:	9705      	str	r7, [sp, #20]
    1966:	9704      	str	r7, [sp, #16]
    1968:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    196a:	f7ff ff68 	bl	183e <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    196e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1970:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    1972:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1974:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    1976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1978:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    197a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    197c:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    197e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1980:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    1982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1984:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    1986:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    1988:	2308      	movs	r3, #8
    198a:	466a      	mov	r2, sp
    198c:	4631      	mov	r1, r6
    198e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    1990:	9705      	str	r7, [sp, #20]
    1992:	9704      	str	r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    1994:	f7ff ff53 	bl	183e <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    1998:	6b63      	ldr	r3, [r4, #52]	; 0x34
    199a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    199c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    199e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    19a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    19a2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    19a4:	6a23      	ldr	r3, [r4, #32]
    19a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    19a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    19aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    19ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19ae:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[12];
    19b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    19b2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19b4:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19b6:	2308      	movs	r3, #8
    19b8:	466a      	mov	r2, sp
    19ba:	4631      	mov	r1, r6
    19bc:	4630      	mov	r0, r6
	tmp[6] = 0;
    19be:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19c0:	f7ff ff3d 	bl	183e <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    19c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    19c6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    19c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    19ca:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
	tmp[3] = product[9];
    19cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    19ce:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    19d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19d2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    19d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    19d6:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
    19d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    19da:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19dc:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19de:	2308      	movs	r3, #8
    19e0:	466a      	mov	r2, sp
    19e2:	4631      	mov	r1, r6
    19e4:	4630      	mov	r0, r6
	tmp[2] = 0;
    19e6:	9702      	str	r7, [sp, #8]
	tmp[6] = 0;
    19e8:	9706      	str	r7, [sp, #24]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    19ea:	f7ff ff28 	bl	183e <uECC_vli_sub>

	if (carry < 0) {
    19ee:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    19f0:	4c0d      	ldr	r4, [pc, #52]	; (1a28 <vli_mmod_fast_secp256r1+0x1a8>)
	if (carry < 0) {
    19f2:	d40f      	bmi.n	1a14 <vli_mmod_fast_secp256r1+0x194>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    19f4:	b935      	cbnz	r5, 1a04 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    19f6:	2208      	movs	r2, #8
    19f8:	4631      	mov	r1, r6
    19fa:	4620      	mov	r0, r4
    19fc:	f7ff fef7 	bl	17ee <uECC_vli_cmp_unsafe>
		while (carry || 
    1a00:	2801      	cmp	r0, #1
    1a02:	d00f      	beq.n	1a24 <vli_mmod_fast_secp256r1+0x1a4>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    1a04:	2308      	movs	r3, #8
    1a06:	4622      	mov	r2, r4
    1a08:	4631      	mov	r1, r6
    1a0a:	4630      	mov	r0, r6
    1a0c:	f7ff ff17 	bl	183e <uECC_vli_sub>
    1a10:	1a2d      	subs	r5, r5, r0
    1a12:	e7ef      	b.n	19f4 <vli_mmod_fast_secp256r1+0x174>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    1a14:	2308      	movs	r3, #8
    1a16:	4622      	mov	r2, r4
    1a18:	4631      	mov	r1, r6
    1a1a:	4630      	mov	r0, r6
    1a1c:	f7ff fdce 	bl	15bc <uECC_vli_add>
		while (carry < 0);
    1a20:	182d      	adds	r5, r5, r0
    1a22:	d4f7      	bmi.n	1a14 <vli_mmod_fast_secp256r1+0x194>
		}
	}
}
    1a24:	b009      	add	sp, #36	; 0x24
    1a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a28:	00019a84 	.word	0x00019a84

00001a2c <uECC_vli_modAdd>:
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
    1a2e:	f99d 4010 	ldrsb.w	r4, [sp, #16]
    1a32:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
    1a34:	4623      	mov	r3, r4
{
    1a36:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
    1a38:	f7ff fdc0 	bl	15bc <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1a3c:	b930      	cbnz	r0, 1a4c <uECC_vli_modAdd+0x20>
    1a3e:	4622      	mov	r2, r4
    1a40:	4629      	mov	r1, r5
    1a42:	4630      	mov	r0, r6
    1a44:	f7ff fed3 	bl	17ee <uECC_vli_cmp_unsafe>
    1a48:	2801      	cmp	r0, #1
    1a4a:	d007      	beq.n	1a5c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
    1a4c:	4623      	mov	r3, r4
    1a4e:	4632      	mov	r2, r6
    1a50:	4629      	mov	r1, r5
    1a52:	4628      	mov	r0, r5
}
    1a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
    1a58:	f7ff bef1 	b.w	183e <uECC_vli_sub>
    1a5c:	bd70      	pop	{r4, r5, r6, pc}

00001a5e <uECC_vli_modSub>:
{
    1a5e:	b570      	push	{r4, r5, r6, lr}
    1a60:	f99d 4010 	ldrsb.w	r4, [sp, #16]
    1a64:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    1a66:	4623      	mov	r3, r4
{
    1a68:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    1a6a:	f7ff fee8 	bl	183e <uECC_vli_sub>
	if (l_borrow) {
    1a6e:	b138      	cbz	r0, 1a80 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
    1a70:	4623      	mov	r3, r4
    1a72:	4632      	mov	r2, r6
    1a74:	4629      	mov	r1, r5
    1a76:	4628      	mov	r0, r5
}
    1a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
    1a7c:	f7ff bd9e 	b.w	15bc <uECC_vli_add>
    1a80:	bd70      	pop	{r4, r5, r6, pc}

00001a82 <uECC_vli_mmod>:
{
    1a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a86:	b0a5      	sub	sp, #148	; 0x94
    1a88:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
    1a8a:	9103      	str	r1, [sp, #12]
    1a8c:	ab14      	add	r3, sp, #80	; 0x50
			   uECC_vli_numBits(mod, num_words);
    1a8e:	4629      	mov	r1, r5
{
    1a90:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
    1a92:	4610      	mov	r0, r2
{
    1a94:	4617      	mov	r7, r2
	uECC_word_t *v[2] = {tmp, product};
    1a96:	9302      	str	r3, [sp, #8]
			   uECC_vli_numBits(mod, num_words);
    1a98:	f7ff fe80 	bl	179c <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
    1a9c:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
    1aa0:	b204      	sxth	r4, r0
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    1aa2:	4263      	negs	r3, r4
    1aa4:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
    1aa8:	f04f 0620 	mov.w	r6, #32
    1aac:	fb94 f6f6 	sdiv	r6, r4, r6
    1ab0:	b276      	sxtb	r6, r6
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    1ab2:	f004 091f 	and.w	r9, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
    1ab6:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
    1ab8:	bf58      	it	pl
    1aba:	f1c3 0900 	rsbpl	r9, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
    1abe:	4631      	mov	r1, r6
    1ac0:	f7ff fe48 	bl	1754 <uECC_vli_clear>
	if (bit_shift > 0) {
    1ac4:	f1b9 0f00 	cmp.w	r9, #0
    1ac8:	b230      	sxth	r0, r6
    1aca:	dd2b      	ble.n	1b24 <uECC_vli_mmod+0xa2>
    1acc:	ab04      	add	r3, sp, #16
    1ace:	2200      	movs	r2, #0
    1ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
    1ad4:	f1c9 0e20 	rsb	lr, r9, #32
	if (bit_shift > 0) {
    1ad8:	4613      	mov	r3, r2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    1ada:	42ab      	cmp	r3, r5
    1adc:	d317      	bcc.n	1b0e <uECC_vli_mmod+0x8c>
		for (i = 0; i < num_words * 2; ++i) {
    1ade:	b22f      	sxth	r7, r5
    1ae0:	007b      	lsls	r3, r7, #1
    1ae2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    1ae4:	ab04      	add	r3, sp, #16
    1ae6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    1aea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
    1aee:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    1af0:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    1af2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
	for (index = 1; shift >= 0; --shift) {
    1af6:	2c00      	cmp	r4, #0
    1af8:	db55      	blt.n	1ba6 <uECC_vli_mmod+0x124>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    1afa:	ab24      	add	r3, sp, #144	; 0x90
    1afc:	2200      	movs	r2, #0
			v[1 - index][i] = diff;
    1afe:	f1c6 0001 	rsb	r0, r6, #1
    1b02:	4696      	mov	lr, r2
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    1b04:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
    1b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b0c:	e02d      	b.n	1b6a <uECC_vli_mmod+0xe8>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
    1b0e:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
    1b12:	fa06 f109 	lsl.w	r1, r6, r9
    1b16:	430a      	orrs	r2, r1
    1b18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
    1b1c:	fa26 f20e 	lsr.w	r2, r6, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
    1b20:	3301      	adds	r3, #1
    1b22:	e7da      	b.n	1ada <uECC_vli_mmod+0x58>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
    1b24:	ab04      	add	r3, sp, #16
    1b26:	462a      	mov	r2, r5
    1b28:	4639      	mov	r1, r7
    1b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b2e:	f7ff fe52 	bl	17d6 <uECC_vli_set>
    1b32:	e7d4      	b.n	1ade <uECC_vli_mmod+0x5c>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
    1b34:	fa0f fc81 	sxth.w	ip, r1
    1b38:	f85a 3c88 	ldr.w	r3, [sl, #-136]
    1b3c:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
    1b40:	ab24      	add	r3, sp, #144	; 0x90
    1b42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1b46:	f851 3c80 	ldr.w	r3, [r1, #-128]
    1b4a:	ebab 0303 	sub.w	r3, fp, r3
    1b4e:	eba3 030e 	sub.w	r3, r3, lr
			if (diff != v[index][i]) {
    1b52:	459b      	cmp	fp, r3
    1b54:	d004      	beq.n	1b60 <uECC_vli_mmod+0xde>
				borrow = (diff > v[index][i]);
    1b56:	bf34      	ite	cc
    1b58:	f04f 0e01 	movcc.w	lr, #1
    1b5c:	f04f 0e00 	movcs.w	lr, #0
			v[1 - index][i] = diff;
    1b60:	f850 1c88 	ldr.w	r1, [r0, #-136]
    1b64:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    1b68:	3201      	adds	r2, #1
		for (i = 0; i < num_words * 2; ++i) {
    1b6a:	9b01      	ldr	r3, [sp, #4]
    1b6c:	b251      	sxtb	r1, r2
    1b6e:	4299      	cmp	r1, r3
    1b70:	dbe0      	blt.n	1b34 <uECC_vli_mmod+0xb2>
		index = !(index ^ borrow);
    1b72:	eba6 030e 	sub.w	r3, r6, lr
    1b76:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
    1b78:	4629      	mov	r1, r5
    1b7a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
    1b7c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
    1b7e:	f7ff fd3d 	bl	15fc <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    1b82:	ab24      	add	r3, sp, #144	; 0x90
    1b84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    1b88:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    1b8a:	f853 2c80 	ldr.w	r2, [r3, #-128]
    1b8e:	f859 3c80 	ldr.w	r3, [r9, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    1b92:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
    1b94:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    1b98:	3c01      	subs	r4, #1
    1b9a:	f849 3c80 	str.w	r3, [r9, #-128]
    1b9e:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
    1ba0:	f7ff fd2c 	bl	15fc <uECC_vli_rshift1>
    1ba4:	e7a7      	b.n	1af6 <uECC_vli_mmod+0x74>
	uECC_vli_set(result, v[index], num_words);
    1ba6:	ab24      	add	r3, sp, #144	; 0x90
    1ba8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1bac:	462a      	mov	r2, r5
    1bae:	f856 1c88 	ldr.w	r1, [r6, #-136]
    1bb2:	4640      	mov	r0, r8
    1bb4:	f7ff fe0f 	bl	17d6 <uECC_vli_set>
}
    1bb8:	b025      	add	sp, #148	; 0x94
    1bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001bbe <uECC_vli_modMult_fast>:
{
    1bbe:	b530      	push	{r4, r5, lr}
    1bc0:	461c      	mov	r4, r3
    1bc2:	b091      	sub	sp, #68	; 0x44
    1bc4:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
    1bc6:	f993 3000 	ldrsb.w	r3, [r3]
    1bca:	4668      	mov	r0, sp
    1bcc:	f7ff fd40 	bl	1650 <uECC_vli_mult>
	curve->mmod_fast(result, product);
    1bd0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    1bd4:	4669      	mov	r1, sp
    1bd6:	4628      	mov	r0, r5
    1bd8:	4798      	blx	r3
}
    1bda:	b011      	add	sp, #68	; 0x44
    1bdc:	bd30      	pop	{r4, r5, pc}

00001bde <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
    1bde:	4613      	mov	r3, r2
    1be0:	460a      	mov	r2, r1
    1be2:	f7ff bfec 	b.w	1bbe <uECC_vli_modMult_fast>

00001be6 <double_jacobian_default>:
{
    1be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
    1bea:	f993 6000 	ldrsb.w	r6, [r3]
{
    1bee:	b092      	sub	sp, #72	; 0x48
    1bf0:	4604      	mov	r4, r0
    1bf2:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
    1bf4:	4610      	mov	r0, r2
    1bf6:	4631      	mov	r1, r6
{
    1bf8:	4615      	mov	r5, r2
    1bfa:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
    1bfc:	f7ff fdb5 	bl	176a <uECC_vli_isZero>
    1c00:	2800      	cmp	r0, #0
    1c02:	f040 8093 	bne.w	1d2c <double_jacobian_default+0x146>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
    1c06:	4642      	mov	r2, r8
    1c08:	4649      	mov	r1, r9
    1c0a:	a802      	add	r0, sp, #8
    1c0c:	f7ff ffe7 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
    1c10:	4643      	mov	r3, r8
    1c12:	aa02      	add	r2, sp, #8
    1c14:	4621      	mov	r1, r4
    1c16:	a80a      	add	r0, sp, #40	; 0x28
    1c18:	f7ff ffd1 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
    1c1c:	a902      	add	r1, sp, #8
    1c1e:	4608      	mov	r0, r1
    1c20:	4642      	mov	r2, r8
    1c22:	f7ff ffdc 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
    1c26:	4643      	mov	r3, r8
    1c28:	462a      	mov	r2, r5
    1c2a:	4649      	mov	r1, r9
    1c2c:	4648      	mov	r0, r9
    1c2e:	f7ff ffc6 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    1c32:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
    1c36:	4642      	mov	r2, r8
    1c38:	4629      	mov	r1, r5
    1c3a:	4628      	mov	r0, r5
    1c3c:	f7ff ffcf 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    1c40:	463b      	mov	r3, r7
    1c42:	462a      	mov	r2, r5
    1c44:	4621      	mov	r1, r4
    1c46:	4620      	mov	r0, r4
    1c48:	9600      	str	r6, [sp, #0]
    1c4a:	f7ff feef 	bl	1a2c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
    1c4e:	463b      	mov	r3, r7
    1c50:	462a      	mov	r2, r5
    1c52:	4629      	mov	r1, r5
    1c54:	4628      	mov	r0, r5
    1c56:	9600      	str	r6, [sp, #0]
    1c58:	f7ff fee8 	bl	1a2c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
    1c5c:	463b      	mov	r3, r7
    1c5e:	462a      	mov	r2, r5
    1c60:	4621      	mov	r1, r4
    1c62:	4628      	mov	r0, r5
    1c64:	9600      	str	r6, [sp, #0]
    1c66:	f7ff fefa 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
    1c6a:	4643      	mov	r3, r8
    1c6c:	462a      	mov	r2, r5
    1c6e:	4621      	mov	r1, r4
    1c70:	4620      	mov	r0, r4
    1c72:	f7ff ffa4 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
    1c76:	463b      	mov	r3, r7
    1c78:	4622      	mov	r2, r4
    1c7a:	4621      	mov	r1, r4
    1c7c:	4628      	mov	r0, r5
    1c7e:	9600      	str	r6, [sp, #0]
    1c80:	f7ff fed4 	bl	1a2c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
    1c84:	463b      	mov	r3, r7
    1c86:	9600      	str	r6, [sp, #0]
    1c88:	462a      	mov	r2, r5
    1c8a:	4621      	mov	r1, r4
    1c8c:	4620      	mov	r0, r4
    1c8e:	f7ff fecd 	bl	1a2c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    1c92:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
    1c94:	07db      	lsls	r3, r3, #31
    1c96:	d54c      	bpl.n	1d32 <double_jacobian_default+0x14c>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
    1c98:	4633      	mov	r3, r6
    1c9a:	463a      	mov	r2, r7
    1c9c:	4621      	mov	r1, r4
    1c9e:	4620      	mov	r0, r4
    1ca0:	f7ff fc8c 	bl	15bc <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
    1ca4:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
    1ca6:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
    1ca8:	4620      	mov	r0, r4
    1caa:	f7ff fca7 	bl	15fc <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
    1cae:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    1cb2:	3b01      	subs	r3, #1
    1cb4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    1cb8:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
    1cbc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
    1cc0:	4642      	mov	r2, r8
    1cc2:	4621      	mov	r1, r4
    1cc4:	4628      	mov	r0, r5
    1cc6:	f7ff ff8a 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
    1cca:	463b      	mov	r3, r7
    1ccc:	aa0a      	add	r2, sp, #40	; 0x28
    1cce:	4629      	mov	r1, r5
    1cd0:	4628      	mov	r0, r5
    1cd2:	9600      	str	r6, [sp, #0]
    1cd4:	f7ff fec3 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
    1cd8:	463b      	mov	r3, r7
    1cda:	aa0a      	add	r2, sp, #40	; 0x28
    1cdc:	4629      	mov	r1, r5
    1cde:	4628      	mov	r0, r5
    1ce0:	9600      	str	r6, [sp, #0]
    1ce2:	f7ff febc 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
    1ce6:	a90a      	add	r1, sp, #40	; 0x28
    1ce8:	4608      	mov	r0, r1
    1cea:	463b      	mov	r3, r7
    1cec:	462a      	mov	r2, r5
    1cee:	9600      	str	r6, [sp, #0]
    1cf0:	f7ff feb5 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
    1cf4:	4643      	mov	r3, r8
    1cf6:	aa0a      	add	r2, sp, #40	; 0x28
    1cf8:	4621      	mov	r1, r4
    1cfa:	4620      	mov	r0, r4
    1cfc:	f7ff ff5f 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
    1d00:	aa02      	add	r2, sp, #8
    1d02:	463b      	mov	r3, r7
    1d04:	4610      	mov	r0, r2
    1d06:	4621      	mov	r1, r4
    1d08:	9600      	str	r6, [sp, #0]
    1d0a:	f7ff fea8 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
    1d0e:	4632      	mov	r2, r6
    1d10:	4629      	mov	r1, r5
    1d12:	4620      	mov	r0, r4
    1d14:	f7ff fd5f 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
    1d18:	4632      	mov	r2, r6
    1d1a:	4649      	mov	r1, r9
    1d1c:	4628      	mov	r0, r5
    1d1e:	f7ff fd5a 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
    1d22:	4632      	mov	r2, r6
    1d24:	a902      	add	r1, sp, #8
    1d26:	4648      	mov	r0, r9
    1d28:	f7ff fd55 	bl	17d6 <uECC_vli_set>
}
    1d2c:	b012      	add	sp, #72	; 0x48
    1d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
    1d32:	4631      	mov	r1, r6
    1d34:	4620      	mov	r0, r4
    1d36:	f7ff fc61 	bl	15fc <uECC_vli_rshift1>
    1d3a:	e7c1      	b.n	1cc0 <double_jacobian_default+0xda>

00001d3c <x_side_default>:
{
    1d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d40:	4615      	mov	r5, r2
    1d42:	b08a      	sub	sp, #40	; 0x28
    1d44:	4604      	mov	r4, r0
    1d46:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
    1d48:	2220      	movs	r2, #32
    1d4a:	2100      	movs	r1, #0
    1d4c:	a802      	add	r0, sp, #8
    1d4e:	f7fe fcaf 	bl	6b0 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
    1d52:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
    1d54:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
    1d58:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
    1d5a:	462a      	mov	r2, r5
    1d5c:	4641      	mov	r1, r8
    1d5e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
    1d60:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
    1d62:	f7ff ff3c 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
    1d66:	4633      	mov	r3, r6
    1d68:	aa02      	add	r2, sp, #8
    1d6a:	4621      	mov	r1, r4
    1d6c:	4620      	mov	r0, r4
    1d6e:	9700      	str	r7, [sp, #0]
    1d70:	f7ff fe75 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
    1d74:	462b      	mov	r3, r5
    1d76:	4642      	mov	r2, r8
    1d78:	4621      	mov	r1, r4
    1d7a:	4620      	mov	r0, r4
    1d7c:	f7ff ff1f 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
    1d80:	9700      	str	r7, [sp, #0]
    1d82:	4633      	mov	r3, r6
    1d84:	f105 0284 	add.w	r2, r5, #132	; 0x84
    1d88:	4621      	mov	r1, r4
    1d8a:	4620      	mov	r0, r4
    1d8c:	f7ff fe4e 	bl	1a2c <uECC_vli_modAdd>
}
    1d90:	b00a      	add	sp, #40	; 0x28
    1d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001d96 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
    1d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d9a:	b09b      	sub	sp, #108	; 0x6c
    1d9c:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
    1d9e:	9c22      	ldr	r4, [sp, #136]	; 0x88
    1da0:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    1da4:	9500      	str	r5, [sp, #0]
{
    1da6:	4698      	mov	r8, r3
    1da8:	4607      	mov	r7, r0
    1daa:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    1dac:	4623      	mov	r3, r4
    1dae:	4602      	mov	r2, r0
    1db0:	4631      	mov	r1, r6
    1db2:	a802      	add	r0, sp, #8
    1db4:	f7ff fe53 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
    1db8:	a902      	add	r1, sp, #8
    1dba:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1dbc:	4608      	mov	r0, r1
    1dbe:	f7ff ff0e 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
    1dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1dc4:	aa02      	add	r2, sp, #8
    1dc6:	4639      	mov	r1, r7
    1dc8:	4638      	mov	r0, r7
    1dca:	f7ff fef8 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
    1dce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1dd0:	aa02      	add	r2, sp, #8
    1dd2:	4631      	mov	r1, r6
    1dd4:	4630      	mov	r0, r6
    1dd6:	f7ff fef2 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
    1dda:	4623      	mov	r3, r4
    1ddc:	464a      	mov	r2, r9
    1dde:	4641      	mov	r1, r8
    1de0:	a802      	add	r0, sp, #8
    1de2:	9500      	str	r5, [sp, #0]
    1de4:	f7ff fe22 	bl	1a2c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
    1de8:	4623      	mov	r3, r4
    1dea:	464a      	mov	r2, r9
    1dec:	4641      	mov	r1, r8
    1dee:	4640      	mov	r0, r8
    1df0:	9500      	str	r5, [sp, #0]
    1df2:	f7ff fe34 	bl	1a5e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
    1df6:	4623      	mov	r3, r4
    1df8:	463a      	mov	r2, r7
    1dfa:	4631      	mov	r1, r6
    1dfc:	a80a      	add	r0, sp, #40	; 0x28
    1dfe:	9500      	str	r5, [sp, #0]
    1e00:	f7ff fe2d 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
    1e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e06:	aa0a      	add	r2, sp, #40	; 0x28
    1e08:	4649      	mov	r1, r9
    1e0a:	4648      	mov	r0, r9
    1e0c:	f7ff fed7 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
    1e10:	4623      	mov	r3, r4
    1e12:	4632      	mov	r2, r6
    1e14:	4639      	mov	r1, r7
    1e16:	a80a      	add	r0, sp, #40	; 0x28
    1e18:	9500      	str	r5, [sp, #0]
    1e1a:	f7ff fe07 	bl	1a2c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
    1e1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1e20:	4641      	mov	r1, r8
    1e22:	4630      	mov	r0, r6
    1e24:	f7ff fedb 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
    1e28:	4623      	mov	r3, r4
    1e2a:	aa0a      	add	r2, sp, #40	; 0x28
    1e2c:	4631      	mov	r1, r6
    1e2e:	4630      	mov	r0, r6
    1e30:	9500      	str	r5, [sp, #0]
    1e32:	f7ff fe14 	bl	1a5e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
    1e36:	4623      	mov	r3, r4
    1e38:	4632      	mov	r2, r6
    1e3a:	4639      	mov	r1, r7
    1e3c:	a812      	add	r0, sp, #72	; 0x48
    1e3e:	9500      	str	r5, [sp, #0]
    1e40:	f7ff fe0d 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
    1e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e46:	aa12      	add	r2, sp, #72	; 0x48
    1e48:	4641      	mov	r1, r8
    1e4a:	4640      	mov	r0, r8
    1e4c:	f7ff feb7 	bl	1bbe <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
    1e50:	4623      	mov	r3, r4
    1e52:	464a      	mov	r2, r9
    1e54:	4641      	mov	r1, r8
    1e56:	4640      	mov	r0, r8
    1e58:	9500      	str	r5, [sp, #0]
    1e5a:	f7ff fe00 	bl	1a5e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
    1e5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1e60:	a902      	add	r1, sp, #8
    1e62:	a812      	add	r0, sp, #72	; 0x48
    1e64:	f7ff febb 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
    1e68:	a912      	add	r1, sp, #72	; 0x48
    1e6a:	4623      	mov	r3, r4
    1e6c:	aa0a      	add	r2, sp, #40	; 0x28
    1e6e:	4608      	mov	r0, r1
    1e70:	9500      	str	r5, [sp, #0]
    1e72:	f7ff fdf4 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
    1e76:	4623      	mov	r3, r4
    1e78:	463a      	mov	r2, r7
    1e7a:	a912      	add	r1, sp, #72	; 0x48
    1e7c:	a80a      	add	r0, sp, #40	; 0x28
    1e7e:	9500      	str	r5, [sp, #0]
    1e80:	f7ff fded 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
    1e84:	a90a      	add	r1, sp, #40	; 0x28
    1e86:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1e88:	aa02      	add	r2, sp, #8
    1e8a:	4608      	mov	r0, r1
    1e8c:	f7ff fe97 	bl	1bbe <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
    1e90:	4623      	mov	r3, r4
    1e92:	464a      	mov	r2, r9
    1e94:	a90a      	add	r1, sp, #40	; 0x28
    1e96:	4648      	mov	r0, r9
    1e98:	9500      	str	r5, [sp, #0]
    1e9a:	f7ff fde0 	bl	1a5e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
    1e9e:	462a      	mov	r2, r5
    1ea0:	a912      	add	r1, sp, #72	; 0x48
    1ea2:	4638      	mov	r0, r7
    1ea4:	f7ff fc97 	bl	17d6 <uECC_vli_set>
}
    1ea8:	b01b      	add	sp, #108	; 0x6c
    1eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001eae <uECC_vli_modInv>:
{
    1eae:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb0:	460f      	mov	r7, r1
    1eb2:	b0a1      	sub	sp, #132	; 0x84
    1eb4:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
    1eb6:	4619      	mov	r1, r3
    1eb8:	4638      	mov	r0, r7
{
    1eba:	4615      	mov	r5, r2
    1ebc:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
    1ebe:	f7ff fc54 	bl	176a <uECC_vli_isZero>
    1ec2:	b128      	cbz	r0, 1ed0 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
    1ec4:	4621      	mov	r1, r4
    1ec6:	4630      	mov	r0, r6
    1ec8:	f7ff fc44 	bl	1754 <uECC_vli_clear>
}
    1ecc:	b021      	add	sp, #132	; 0x84
    1ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
    1ed0:	4622      	mov	r2, r4
    1ed2:	4639      	mov	r1, r7
    1ed4:	4668      	mov	r0, sp
    1ed6:	f7ff fc7e 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
    1eda:	4622      	mov	r2, r4
    1edc:	4629      	mov	r1, r5
    1ede:	a808      	add	r0, sp, #32
    1ee0:	f7ff fc79 	bl	17d6 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
    1ee4:	4621      	mov	r1, r4
    1ee6:	a810      	add	r0, sp, #64	; 0x40
    1ee8:	f7ff fc34 	bl	1754 <uECC_vli_clear>
	u[0] = 1;
    1eec:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
    1eee:	4621      	mov	r1, r4
    1ef0:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
    1ef2:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
    1ef4:	f7ff fc2e 	bl	1754 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
    1ef8:	4622      	mov	r2, r4
    1efa:	a908      	add	r1, sp, #32
    1efc:	4668      	mov	r0, sp
    1efe:	f7ff fc76 	bl	17ee <uECC_vli_cmp_unsafe>
    1f02:	b928      	cbnz	r0, 1f10 <uECC_vli_modInv+0x62>
  	uECC_vli_set(result, u, num_words);
    1f04:	4622      	mov	r2, r4
    1f06:	a910      	add	r1, sp, #64	; 0x40
    1f08:	4630      	mov	r0, r6
    1f0a:	f7ff fc64 	bl	17d6 <uECC_vli_set>
    1f0e:	e7dd      	b.n	1ecc <uECC_vli_modInv+0x1e>
		if (EVEN(a)) {
    1f10:	9b00      	ldr	r3, [sp, #0]
    1f12:	07da      	lsls	r2, r3, #31
    1f14:	d409      	bmi.n	1f2a <uECC_vli_modInv+0x7c>
			uECC_vli_rshift1(a, num_words);
    1f16:	4621      	mov	r1, r4
    1f18:	4668      	mov	r0, sp
    1f1a:	f7ff fb6f 	bl	15fc <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
    1f1e:	4622      	mov	r2, r4
    1f20:	4629      	mov	r1, r5
    1f22:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
    1f24:	f7ff fb78 	bl	1618 <vli_modInv_update>
    1f28:	e7e6      	b.n	1ef8 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
    1f2a:	9b08      	ldr	r3, [sp, #32]
    1f2c:	07db      	lsls	r3, r3, #31
    1f2e:	d407      	bmi.n	1f40 <uECC_vli_modInv+0x92>
			uECC_vli_rshift1(b, num_words);
    1f30:	4621      	mov	r1, r4
    1f32:	a808      	add	r0, sp, #32
    1f34:	f7ff fb62 	bl	15fc <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
    1f38:	4622      	mov	r2, r4
    1f3a:	4629      	mov	r1, r5
    1f3c:	a818      	add	r0, sp, #96	; 0x60
    1f3e:	e7f1      	b.n	1f24 <uECC_vli_modInv+0x76>
		} else if (cmpResult > 0) {
    1f40:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
    1f42:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
    1f44:	dd1c      	ble.n	1f80 <uECC_vli_modInv+0xd2>
			uECC_vli_sub(a, a, b, num_words);
    1f46:	aa08      	add	r2, sp, #32
    1f48:	4669      	mov	r1, sp
    1f4a:	4668      	mov	r0, sp
    1f4c:	f7ff fc77 	bl	183e <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
    1f50:	4621      	mov	r1, r4
    1f52:	4668      	mov	r0, sp
    1f54:	f7ff fb52 	bl	15fc <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
    1f58:	4622      	mov	r2, r4
    1f5a:	a918      	add	r1, sp, #96	; 0x60
    1f5c:	a810      	add	r0, sp, #64	; 0x40
    1f5e:	f7ff fc46 	bl	17ee <uECC_vli_cmp_unsafe>
    1f62:	2800      	cmp	r0, #0
    1f64:	da05      	bge.n	1f72 <uECC_vli_modInv+0xc4>
        			uECC_vli_add(u, u, mod, num_words);
    1f66:	a910      	add	r1, sp, #64	; 0x40
    1f68:	4623      	mov	r3, r4
    1f6a:	462a      	mov	r2, r5
    1f6c:	4608      	mov	r0, r1
    1f6e:	f7ff fb25 	bl	15bc <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
    1f72:	a910      	add	r1, sp, #64	; 0x40
    1f74:	4623      	mov	r3, r4
    1f76:	aa18      	add	r2, sp, #96	; 0x60
    1f78:	4608      	mov	r0, r1
    1f7a:	f7ff fc60 	bl	183e <uECC_vli_sub>
    1f7e:	e7ce      	b.n	1f1e <uECC_vli_modInv+0x70>
      			uECC_vli_sub(b, b, a, num_words);
    1f80:	a908      	add	r1, sp, #32
    1f82:	466a      	mov	r2, sp
    1f84:	4608      	mov	r0, r1
    1f86:	f7ff fc5a 	bl	183e <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
    1f8a:	4621      	mov	r1, r4
    1f8c:	a808      	add	r0, sp, #32
    1f8e:	f7ff fb35 	bl	15fc <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
    1f92:	4622      	mov	r2, r4
    1f94:	a910      	add	r1, sp, #64	; 0x40
    1f96:	a818      	add	r0, sp, #96	; 0x60
    1f98:	f7ff fc29 	bl	17ee <uECC_vli_cmp_unsafe>
    1f9c:	2800      	cmp	r0, #0
    1f9e:	da05      	bge.n	1fac <uECC_vli_modInv+0xfe>
        			uECC_vli_add(v, v, mod, num_words);
    1fa0:	a918      	add	r1, sp, #96	; 0x60
    1fa2:	4623      	mov	r3, r4
    1fa4:	462a      	mov	r2, r5
    1fa6:	4608      	mov	r0, r1
    1fa8:	f7ff fb08 	bl	15bc <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
    1fac:	a918      	add	r1, sp, #96	; 0x60
    1fae:	4623      	mov	r3, r4
    1fb0:	aa10      	add	r2, sp, #64	; 0x40
    1fb2:	4608      	mov	r0, r1
    1fb4:	f7ff fc43 	bl	183e <uECC_vli_sub>
    1fb8:	e7be      	b.n	1f38 <uECC_vli_modInv+0x8a>

00001fba <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
    1fba:	7809      	ldrb	r1, [r1, #0]
    1fbc:	0049      	lsls	r1, r1, #1
    1fbe:	b249      	sxtb	r1, r1
    1fc0:	f7ff bbd3 	b.w	176a <uECC_vli_isZero>

00001fc4 <apply_z>:
{
    1fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc6:	4615      	mov	r5, r2
    1fc8:	b089      	sub	sp, #36	; 0x24
    1fca:	461c      	mov	r4, r3
    1fcc:	4607      	mov	r7, r0
    1fce:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
    1fd0:	461a      	mov	r2, r3
    1fd2:	4629      	mov	r1, r5
    1fd4:	4668      	mov	r0, sp
    1fd6:	f7ff fe02 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
    1fda:	4623      	mov	r3, r4
    1fdc:	466a      	mov	r2, sp
    1fde:	4639      	mov	r1, r7
    1fe0:	4638      	mov	r0, r7
    1fe2:	f7ff fdec 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
    1fe6:	4623      	mov	r3, r4
    1fe8:	462a      	mov	r2, r5
    1fea:	4669      	mov	r1, sp
    1fec:	4668      	mov	r0, sp
    1fee:	f7ff fde6 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
    1ff2:	4623      	mov	r3, r4
    1ff4:	466a      	mov	r2, sp
    1ff6:	4631      	mov	r1, r6
    1ff8:	4630      	mov	r0, r6
    1ffa:	f7ff fde0 	bl	1bbe <uECC_vli_modMult_fast>
}
    1ffe:	b009      	add	sp, #36	; 0x24
    2000:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002002 <XYcZ_add>:
{
    2002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2006:	b08b      	sub	sp, #44	; 0x2c
    2008:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
    200a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    200c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    2010:	9600      	str	r6, [sp, #0]
{
    2012:	461f      	mov	r7, r3
    2014:	4680      	mov	r8, r0
    2016:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    2018:	462b      	mov	r3, r5
    201a:	4602      	mov	r2, r0
    201c:	4621      	mov	r1, r4
    201e:	a802      	add	r0, sp, #8
    2020:	f7ff fd1d 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
    2024:	a902      	add	r1, sp, #8
    2026:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2028:	4608      	mov	r0, r1
    202a:	f7ff fdd8 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
    202e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2030:	aa02      	add	r2, sp, #8
    2032:	4641      	mov	r1, r8
    2034:	4640      	mov	r0, r8
    2036:	f7ff fdc2 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
    203a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    203c:	aa02      	add	r2, sp, #8
    203e:	4621      	mov	r1, r4
    2040:	4620      	mov	r0, r4
    2042:	f7ff fdbc 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
    2046:	462b      	mov	r3, r5
    2048:	464a      	mov	r2, r9
    204a:	4639      	mov	r1, r7
    204c:	4638      	mov	r0, r7
    204e:	9600      	str	r6, [sp, #0]
    2050:	f7ff fd05 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
    2054:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2056:	4639      	mov	r1, r7
    2058:	a802      	add	r0, sp, #8
    205a:	f7ff fdc0 	bl	1bde <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
    205e:	a902      	add	r1, sp, #8
    2060:	462b      	mov	r3, r5
    2062:	4642      	mov	r2, r8
    2064:	4608      	mov	r0, r1
    2066:	9600      	str	r6, [sp, #0]
    2068:	f7ff fcf9 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
    206c:	a902      	add	r1, sp, #8
    206e:	462b      	mov	r3, r5
    2070:	4622      	mov	r2, r4
    2072:	4608      	mov	r0, r1
    2074:	9600      	str	r6, [sp, #0]
    2076:	f7ff fcf2 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
    207a:	462b      	mov	r3, r5
    207c:	4642      	mov	r2, r8
    207e:	4621      	mov	r1, r4
    2080:	4620      	mov	r0, r4
    2082:	9600      	str	r6, [sp, #0]
    2084:	f7ff fceb 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
    2088:	9b12      	ldr	r3, [sp, #72]	; 0x48
    208a:	4622      	mov	r2, r4
    208c:	4649      	mov	r1, r9
    208e:	4648      	mov	r0, r9
    2090:	f7ff fd95 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
    2094:	462b      	mov	r3, r5
    2096:	aa02      	add	r2, sp, #8
    2098:	4641      	mov	r1, r8
    209a:	4620      	mov	r0, r4
    209c:	9600      	str	r6, [sp, #0]
    209e:	f7ff fcde 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
    20a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    20a4:	4622      	mov	r2, r4
    20a6:	4639      	mov	r1, r7
    20a8:	4638      	mov	r0, r7
    20aa:	f7ff fd88 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
    20ae:	462b      	mov	r3, r5
    20b0:	464a      	mov	r2, r9
    20b2:	4639      	mov	r1, r7
    20b4:	4638      	mov	r0, r7
    20b6:	9600      	str	r6, [sp, #0]
    20b8:	f7ff fcd1 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
    20bc:	4632      	mov	r2, r6
    20be:	a902      	add	r1, sp, #8
    20c0:	4620      	mov	r0, r4
    20c2:	f7ff fb88 	bl	17d6 <uECC_vli_set>
}
    20c6:	b00b      	add	sp, #44	; 0x2c
    20c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000020cc <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
    20cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20d0:	b0b1      	sub	sp, #196	; 0xc4
    20d2:	461e      	mov	r6, r3
    20d4:	9c3b      	ldr	r4, [sp, #236]	; 0xec
    20d6:	9004      	str	r0, [sp, #16]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
    20d8:	f994 7000 	ldrsb.w	r7, [r4]
{
    20dc:	9206      	str	r2, [sp, #24]

	uECC_vli_set(Rx[1], point, num_words);
    20de:	a818      	add	r0, sp, #96	; 0x60
    20e0:	463a      	mov	r2, r7
{
    20e2:	9105      	str	r1, [sp, #20]
	uECC_vli_set(Rx[1], point, num_words);
    20e4:	f7ff fb77 	bl	17d6 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
    20e8:	00bb      	lsls	r3, r7, #2
    20ea:	9307      	str	r3, [sp, #28]
    20ec:	9b05      	ldr	r3, [sp, #20]
    20ee:	00ba      	lsls	r2, r7, #2
    20f0:	4413      	add	r3, r2
    20f2:	4619      	mov	r1, r3
    20f4:	463a      	mov	r2, r7
    20f6:	a828      	add	r0, sp, #160	; 0xa0
    20f8:	9302      	str	r3, [sp, #8]
    20fa:	f7ff fb6c 	bl	17d6 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
    20fe:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
    2102:	2e00      	cmp	r6, #0
    2104:	f000 8089 	beq.w	221a <EccPoint_mult+0x14e>
		uECC_vli_set(z, initial_Z, num_words);
    2108:	462a      	mov	r2, r5
    210a:	4631      	mov	r1, r6
    210c:	a808      	add	r0, sp, #32
    210e:	f7ff fb62 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
    2112:	ae10      	add	r6, sp, #64	; 0x40
    2114:	462a      	mov	r2, r5
    2116:	a918      	add	r1, sp, #96	; 0x60
    2118:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
    211a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
    211e:	f7ff fb5a 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
    2122:	462a      	mov	r2, r5
    2124:	a928      	add	r1, sp, #160	; 0xa0
    2126:	4648      	mov	r0, r9
    2128:	f7ff fb55 	bl	17d6 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
    212c:	4623      	mov	r3, r4
    212e:	aa08      	add	r2, sp, #32
    2130:	a928      	add	r1, sp, #160	; 0xa0
    2132:	a818      	add	r0, sp, #96	; 0x60
    2134:	f7ff ff46 	bl	1fc4 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
    2138:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
    213c:	4623      	mov	r3, r4
    213e:	aa08      	add	r2, sp, #32
    2140:	a928      	add	r1, sp, #160	; 0xa0
    2142:	a818      	add	r0, sp, #96	; 0x60
    2144:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
    2146:	4623      	mov	r3, r4
    2148:	aa08      	add	r2, sp, #32
    214a:	4649      	mov	r1, r9
    214c:	4630      	mov	r0, r6
    214e:	f7ff ff39 	bl	1fc4 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
    2152:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
    2156:	3d02      	subs	r5, #2
    2158:	b22d      	sxth	r5, r5
    215a:	2d00      	cmp	r5, #0
    215c:	dc64      	bgt.n	2228 <EccPoint_mult+0x15c>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    215e:	9b06      	ldr	r3, [sp, #24]
    2160:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    2162:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
    2164:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    2168:	ab10      	add	r3, sp, #64	; 0x40
    216a:	0176      	lsls	r6, r6, #5
    216c:	43ed      	mvns	r5, r5
    216e:	eb03 0806 	add.w	r8, r3, r6
    2172:	f005 0501 	and.w	r5, r5, #1
    2176:	ab20      	add	r3, sp, #128	; 0x80
    2178:	441e      	add	r6, r3
    217a:	016d      	lsls	r5, r5, #5
    217c:	ab10      	add	r3, sp, #64	; 0x40
    217e:	eb03 0905 	add.w	r9, r3, r5
    2182:	ab20      	add	r3, sp, #128	; 0x80
    2184:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
    2186:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    218a:	462b      	mov	r3, r5
    218c:	464a      	mov	r2, r9
    218e:	4631      	mov	r1, r6
    2190:	4640      	mov	r0, r8
    2192:	f7ff fe00 	bl	1d96 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
    2196:	4653      	mov	r3, sl
    2198:	aa10      	add	r2, sp, #64	; 0x40
    219a:	a918      	add	r1, sp, #96	; 0x60
    219c:	a808      	add	r0, sp, #32
    219e:	9700      	str	r7, [sp, #0]
    21a0:	f7ff fc5d 	bl	1a5e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
    21a4:	a908      	add	r1, sp, #32
    21a6:	4623      	mov	r3, r4
    21a8:	4632      	mov	r2, r6
    21aa:	4608      	mov	r0, r1
    21ac:	f7ff fd07 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
    21b0:	a908      	add	r1, sp, #32
    21b2:	4623      	mov	r3, r4
    21b4:	9a05      	ldr	r2, [sp, #20]
    21b6:	4608      	mov	r0, r1
    21b8:	f7ff fd01 	bl	1bbe <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
    21bc:	a908      	add	r1, sp, #32
    21be:	463b      	mov	r3, r7
    21c0:	4652      	mov	r2, sl
    21c2:	4608      	mov	r0, r1
    21c4:	f7ff fe73 	bl	1eae <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
    21c8:	a908      	add	r1, sp, #32
    21ca:	4623      	mov	r3, r4
    21cc:	9a02      	ldr	r2, [sp, #8]
    21ce:	4608      	mov	r0, r1
    21d0:	f7ff fcf5 	bl	1bbe <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
    21d4:	a908      	add	r1, sp, #32
    21d6:	4623      	mov	r3, r4
    21d8:	4642      	mov	r2, r8
    21da:	4608      	mov	r0, r1
    21dc:	f7ff fcef 	bl	1bbe <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    21e0:	9400      	str	r4, [sp, #0]
    21e2:	4633      	mov	r3, r6
    21e4:	4642      	mov	r2, r8
    21e6:	4629      	mov	r1, r5
    21e8:	4648      	mov	r0, r9
    21ea:	f7ff ff0a 	bl	2002 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
    21ee:	4623      	mov	r3, r4
    21f0:	aa08      	add	r2, sp, #32
    21f2:	a920      	add	r1, sp, #128	; 0x80
    21f4:	a810      	add	r0, sp, #64	; 0x40
    21f6:	f7ff fee5 	bl	1fc4 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
    21fa:	463a      	mov	r2, r7
    21fc:	a910      	add	r1, sp, #64	; 0x40
    21fe:	9804      	ldr	r0, [sp, #16]
    2200:	f7ff fae9 	bl	17d6 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
    2204:	9b04      	ldr	r3, [sp, #16]
    2206:	9c07      	ldr	r4, [sp, #28]
    2208:	4423      	add	r3, r4
    220a:	463a      	mov	r2, r7
    220c:	a920      	add	r1, sp, #128	; 0x80
    220e:	4618      	mov	r0, r3
    2210:	f7ff fae1 	bl	17d6 <uECC_vli_set>
}
    2214:	b031      	add	sp, #196	; 0xc4
    2216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
    221a:	4629      	mov	r1, r5
    221c:	a808      	add	r0, sp, #32
    221e:	f7ff fa99 	bl	1754 <uECC_vli_clear>
		z[0] = 1;
    2222:	2301      	movs	r3, #1
    2224:	9308      	str	r3, [sp, #32]
    2226:	e774      	b.n	2112 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
    2228:	4629      	mov	r1, r5
    222a:	9806      	ldr	r0, [sp, #24]
    222c:	f7ff faac 	bl	1788 <uECC_vli_testBit>
    2230:	fab0 f080 	clz	r0, r0
    2234:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    2236:	f1c0 0801 	rsb	r8, r0, #1
    223a:	ea4f 1848 	mov.w	r8, r8, lsl #5
    223e:	0140      	lsls	r0, r0, #5
    2240:	eb06 0b08 	add.w	fp, r6, r8
    2244:	eb06 0a00 	add.w	sl, r6, r0
    2248:	44c8      	add	r8, r9
    224a:	eb09 0300 	add.w	r3, r9, r0
    224e:	4652      	mov	r2, sl
    2250:	4641      	mov	r1, r8
    2252:	4658      	mov	r0, fp
    2254:	9400      	str	r4, [sp, #0]
    2256:	9303      	str	r3, [sp, #12]
    2258:	f7ff fd9d 	bl	1d96 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    225c:	9400      	str	r4, [sp, #0]
    225e:	4643      	mov	r3, r8
    2260:	465a      	mov	r2, fp
    2262:	9903      	ldr	r1, [sp, #12]
    2264:	4650      	mov	r0, sl
    2266:	f7ff fecc 	bl	2002 <XYcZ_add>
    226a:	3d01      	subs	r5, #1
    226c:	e774      	b.n	2158 <EccPoint_mult+0x8c>

0000226e <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
    226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    2272:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
{
    2276:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    2278:	f103 0624 	add.w	r6, r3, #36	; 0x24
{
    227c:	4690      	mov	r8, r2
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    227e:	f105 041f 	add.w	r4, r5, #31
    2282:	2220      	movs	r2, #32
    2284:	fb94 f4f2 	sdiv	r4, r4, r2
    2288:	b264      	sxtb	r4, r4
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    228a:	4601      	mov	r1, r0
    228c:	4623      	mov	r3, r4
    228e:	4632      	mov	r2, r6
    2290:	4638      	mov	r0, r7
    2292:	f7ff f993 	bl	15bc <uECC_vli_add>
    2296:	b990      	cbnz	r0, 22be <regularize_k+0x50>
    2298:	ebb5 1f44 	cmp.w	r5, r4, lsl #5
    229c:	da11      	bge.n	22c2 <regularize_k+0x54>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
    229e:	4629      	mov	r1, r5
    22a0:	4638      	mov	r0, r7
    22a2:	f7ff fa71 	bl	1788 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
    22a6:	1c05      	adds	r5, r0, #0
    22a8:	bf18      	it	ne
    22aa:	2501      	movne	r5, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
    22ac:	4623      	mov	r3, r4
    22ae:	4632      	mov	r2, r6
    22b0:	4639      	mov	r1, r7
    22b2:	4640      	mov	r0, r8
    22b4:	f7ff f982 	bl	15bc <uECC_vli_add>

	return carry;
}
    22b8:	4628      	mov	r0, r5
    22ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    22be:	2501      	movs	r5, #1
    22c0:	e7f4      	b.n	22ac <regularize_k+0x3e>
    22c2:	4605      	mov	r5, r0
    22c4:	e7f2      	b.n	22ac <regularize_k+0x3e>

000022c6 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
    22c6:	b530      	push	{r4, r5, lr}
    22c8:	4614      	mov	r4, r2
    22ca:	b095      	sub	sp, #84	; 0x54
    22cc:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
    22ce:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
    22d0:	4623      	mov	r3, r4
{
    22d2:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
    22d4:	a904      	add	r1, sp, #16
    22d6:	9102      	str	r1, [sp, #8]
    22d8:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
    22da:	f7ff ffc8 	bl	226e <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
    22de:	fab0 f080 	clz	r0, r0
    22e2:	ab14      	add	r3, sp, #80	; 0x50
    22e4:	0940      	lsrs	r0, r0, #5
    22e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22ea:	8863      	ldrh	r3, [r4, #2]
    22ec:	9401      	str	r4, [sp, #4]
    22ee:	3301      	adds	r3, #1
    22f0:	b21b      	sxth	r3, r3
    22f2:	9300      	str	r3, [sp, #0]
    22f4:	f850 2c48 	ldr.w	r2, [r0, #-72]
    22f8:	2300      	movs	r3, #0
    22fa:	f104 0144 	add.w	r1, r4, #68	; 0x44
    22fe:	4628      	mov	r0, r5
    2300:	f7ff fee4 	bl	20cc <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
    2304:	4621      	mov	r1, r4
    2306:	4628      	mov	r0, r5
    2308:	f7ff fe57 	bl	1fba <EccPoint_isZero>
		return 0;
	}
	return 1;
}
    230c:	fab0 f080 	clz	r0, r0
    2310:	0940      	lsrs	r0, r0, #5
    2312:	b015      	add	sp, #84	; 0x54
    2314:	bd30      	pop	{r4, r5, pc}

00002316 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
    2316:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
    2318:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
    231a:	1e4f      	subs	r7, r1, #1
    231c:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
    231e:	428c      	cmp	r4, r1
    2320:	f105 0501 	add.w	r5, r5, #1
    2324:	db00      	blt.n	2328 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
    2326:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
    2328:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    232a:	f023 0603 	bic.w	r6, r3, #3
    232e:	f003 0303 	and.w	r3, r3, #3
    2332:	5996      	ldr	r6, [r2, r6]
    2334:	00db      	lsls	r3, r3, #3
    2336:	fa26 f303 	lsr.w	r3, r6, r3
    233a:	5503      	strb	r3, [r0, r4]
    233c:	e7ee      	b.n	231c <uECC_vli_nativeToBytes+0x6>

0000233e <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
    233e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2340:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    2342:	2304      	movs	r3, #4
{
    2344:	460e      	mov	r6, r1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    2346:	1cd1      	adds	r1, r2, #3
    2348:	fb91 f1f3 	sdiv	r1, r1, r3
    234c:	b249      	sxtb	r1, r1
{
    234e:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
    2350:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    2352:	f7ff f9ff 	bl	1754 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
    2356:	2200      	movs	r2, #0
    2358:	b251      	sxtb	r1, r2
    235a:	428c      	cmp	r4, r1
    235c:	f102 0201 	add.w	r2, r2, #1
    2360:	dc00      	bgt.n	2364 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
    2362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
    2364:	1a7b      	subs	r3, r7, r1
		native[b / uECC_WORD_SIZE] |=
    2366:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    236a:	5c71      	ldrb	r1, [r6, r1]
    236c:	f003 0303 	and.w	r3, r3, #3
    2370:	00db      	lsls	r3, r3, #3
    2372:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
    2376:	5829      	ldr	r1, [r5, r0]
    2378:	4319      	orrs	r1, r3
    237a:	5029      	str	r1, [r5, r0]
    237c:	e7ec      	b.n	2358 <uECC_vli_bytesToNative+0x1a>

0000237e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
    237e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2382:	b090      	sub	sp, #64	; 0x40
    2384:	4606      	mov	r6, r0
    2386:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
    2388:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
    238c:	f7ff fe15 	bl	1fba <EccPoint_isZero>
    2390:	bb48      	cbnz	r0, 23e6 <uECC_valid_point+0x68>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
    2392:	f104 0804 	add.w	r8, r4, #4
    2396:	462a      	mov	r2, r5
    2398:	4631      	mov	r1, r6
    239a:	4640      	mov	r0, r8
    239c:	f7ff fa27 	bl	17ee <uECC_vli_cmp_unsafe>
    23a0:	2801      	cmp	r0, #1
    23a2:	d123      	bne.n	23ec <uECC_valid_point+0x6e>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
    23a4:	eb06 0785 	add.w	r7, r6, r5, lsl #2
    23a8:	462a      	mov	r2, r5
    23aa:	4639      	mov	r1, r7
    23ac:	4640      	mov	r0, r8
    23ae:	f7ff fa1e 	bl	17ee <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
    23b2:	2801      	cmp	r0, #1
    23b4:	d11a      	bne.n	23ec <uECC_valid_point+0x6e>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
    23b6:	4622      	mov	r2, r4
    23b8:	4639      	mov	r1, r7
    23ba:	4668      	mov	r0, sp
    23bc:	f7ff fc0f 	bl	1bde <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
    23c0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    23c4:	4622      	mov	r2, r4
    23c6:	4631      	mov	r1, r6
    23c8:	a808      	add	r0, sp, #32
    23ca:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
    23cc:	462a      	mov	r2, r5
    23ce:	a908      	add	r1, sp, #32
    23d0:	4668      	mov	r0, sp
    23d2:	f7ff fa20 	bl	1816 <uECC_vli_equal>
    23d6:	2800      	cmp	r0, #0
		return -3;

	return 0;
    23d8:	bf14      	ite	ne
    23da:	f06f 0002 	mvnne.w	r0, #2
    23de:	2000      	moveq	r0, #0
}
    23e0:	b010      	add	sp, #64	; 0x40
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    23e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23ea:	e7f9      	b.n	23e0 <uECC_valid_point+0x62>
		return -2;
    23ec:	f06f 0001 	mvn.w	r0, #1
    23f0:	e7f6      	b.n	23e0 <uECC_valid_point+0x62>

000023f2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
    23f2:	b570      	push	{r4, r5, r6, lr}
    23f4:	460c      	mov	r4, r1
    23f6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
    23f8:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    23fa:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
    23fe:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    2400:	4601      	mov	r1, r0
    2402:	4668      	mov	r0, sp
    2404:	f7ff ff9b 	bl	233e <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
    2408:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
    240c:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
    2410:	18b1      	adds	r1, r6, r2
    2412:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
    2416:	f7ff ff92 	bl	233e <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
    241a:	2210      	movs	r2, #16
    241c:	4629      	mov	r1, r5
    241e:	4668      	mov	r0, sp
    2420:	f7ff f9e5 	bl	17ee <uECC_vli_cmp_unsafe>
    2424:	b128      	cbz	r0, 2432 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
    2426:	4621      	mov	r1, r4
    2428:	4668      	mov	r0, sp
    242a:	f7ff ffa8 	bl	237e <uECC_valid_point>
}
    242e:	b010      	add	sp, #64	; 0x40
    2430:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
    2432:	f06f 0003 	mvn.w	r0, #3
    2436:	e7fa      	b.n	242e <uECC_valid_public_key+0x3c>

00002438 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    2438:	78cb      	ldrb	r3, [r1, #3]
    243a:	7802      	ldrb	r2, [r0, #0]
    243c:	4053      	eors	r3, r2
    243e:	7003      	strb	r3, [r0, #0]
    2440:	884b      	ldrh	r3, [r1, #2]
    2442:	7842      	ldrb	r2, [r0, #1]
    2444:	4053      	eors	r3, r2
    2446:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    2448:	680a      	ldr	r2, [r1, #0]
    244a:	7883      	ldrb	r3, [r0, #2]
    244c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2450:	7083      	strb	r3, [r0, #2]
    2452:	680a      	ldr	r2, [r1, #0]
    2454:	78c3      	ldrb	r3, [r0, #3]
    2456:	4053      	eors	r3, r2
    2458:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    245a:	79cb      	ldrb	r3, [r1, #7]
    245c:	7902      	ldrb	r2, [r0, #4]
    245e:	4053      	eors	r3, r2
    2460:	7103      	strb	r3, [r0, #4]
    2462:	88cb      	ldrh	r3, [r1, #6]
    2464:	7942      	ldrb	r2, [r0, #5]
    2466:	4053      	eors	r3, r2
    2468:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    246a:	684a      	ldr	r2, [r1, #4]
    246c:	7983      	ldrb	r3, [r0, #6]
    246e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2472:	7183      	strb	r3, [r0, #6]
    2474:	684a      	ldr	r2, [r1, #4]
    2476:	79c3      	ldrb	r3, [r0, #7]
    2478:	4053      	eors	r3, r2
    247a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    247c:	7acb      	ldrb	r3, [r1, #11]
    247e:	7a02      	ldrb	r2, [r0, #8]
    2480:	4053      	eors	r3, r2
    2482:	7203      	strb	r3, [r0, #8]
    2484:	7a42      	ldrb	r2, [r0, #9]
    2486:	894b      	ldrh	r3, [r1, #10]
    2488:	4053      	eors	r3, r2
    248a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    248c:	688a      	ldr	r2, [r1, #8]
    248e:	7a83      	ldrb	r3, [r0, #10]
    2490:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2494:	7283      	strb	r3, [r0, #10]
    2496:	688a      	ldr	r2, [r1, #8]
    2498:	7ac3      	ldrb	r3, [r0, #11]
    249a:	4053      	eors	r3, r2
    249c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    249e:	7bcb      	ldrb	r3, [r1, #15]
    24a0:	7b02      	ldrb	r2, [r0, #12]
    24a2:	4053      	eors	r3, r2
    24a4:	7303      	strb	r3, [r0, #12]
    24a6:	89cb      	ldrh	r3, [r1, #14]
    24a8:	7b42      	ldrb	r2, [r0, #13]
    24aa:	4053      	eors	r3, r2
    24ac:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    24ae:	68ca      	ldr	r2, [r1, #12]
    24b0:	7b83      	ldrb	r3, [r0, #14]
    24b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    24b6:	7383      	strb	r3, [r0, #14]
    24b8:	68ca      	ldr	r2, [r1, #12]
    24ba:	7bc3      	ldrb	r3, [r0, #15]
    24bc:	4053      	eors	r3, r2
    24be:	73c3      	strb	r3, [r0, #15]
    24c0:	4770      	bx	lr

000024c2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    24c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    24c4:	7802      	ldrb	r2, [r0, #0]
    24c6:	f88d 2000 	strb.w	r2, [sp]
    24ca:	7942      	ldrb	r2, [r0, #5]
    24cc:	f88d 2001 	strb.w	r2, [sp, #1]
    24d0:	7a82      	ldrb	r2, [r0, #10]
    24d2:	f88d 2002 	strb.w	r2, [sp, #2]
    24d6:	7bc2      	ldrb	r2, [r0, #15]
    24d8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    24dc:	7902      	ldrb	r2, [r0, #4]
    24de:	f88d 2004 	strb.w	r2, [sp, #4]
    24e2:	7a42      	ldrb	r2, [r0, #9]
    24e4:	f88d 2005 	strb.w	r2, [sp, #5]
    24e8:	7b82      	ldrb	r2, [r0, #14]
    24ea:	f88d 2006 	strb.w	r2, [sp, #6]
    24ee:	78c2      	ldrb	r2, [r0, #3]
    24f0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    24f4:	7a02      	ldrb	r2, [r0, #8]
    24f6:	f88d 2008 	strb.w	r2, [sp, #8]
    24fa:	7b42      	ldrb	r2, [r0, #13]
    24fc:	f88d 2009 	strb.w	r2, [sp, #9]
    2500:	7882      	ldrb	r2, [r0, #2]
    2502:	f88d 200a 	strb.w	r2, [sp, #10]
    2506:	79c2      	ldrb	r2, [r0, #7]
    2508:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    250c:	7b02      	ldrb	r2, [r0, #12]
    250e:	f88d 200c 	strb.w	r2, [sp, #12]
    2512:	7842      	ldrb	r2, [r0, #1]
    2514:	f88d 200d 	strb.w	r2, [sp, #13]
    2518:	7ac3      	ldrb	r3, [r0, #11]
    251a:	7982      	ldrb	r2, [r0, #6]
    251c:	f88d 200e 	strb.w	r2, [sp, #14]
    2520:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2524:	2310      	movs	r3, #16
    2526:	466a      	mov	r2, sp
    2528:	4619      	mov	r1, r3
    252a:	f7fe ff85 	bl	1438 <_copy>
}
    252e:	b005      	add	sp, #20
    2530:	f85d fb04 	ldr.w	pc, [sp], #4

00002534 <mult_row_column>:
{
    2534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2536:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    2538:	7808      	ldrb	r0, [r1, #0]
{
    253a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    253c:	f7fe ff8b 	bl	1456 <_double_byte>
    2540:	4605      	mov	r5, r0
    2542:	7860      	ldrb	r0, [r4, #1]
    2544:	f7fe ff87 	bl	1456 <_double_byte>
    2548:	78a2      	ldrb	r2, [r4, #2]
    254a:	7863      	ldrb	r3, [r4, #1]
    254c:	4053      	eors	r3, r2
    254e:	78e2      	ldrb	r2, [r4, #3]
    2550:	4053      	eors	r3, r2
    2552:	405d      	eors	r5, r3
    2554:	4045      	eors	r5, r0
    2556:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    2558:	7860      	ldrb	r0, [r4, #1]
    255a:	7827      	ldrb	r7, [r4, #0]
    255c:	f7fe ff7b 	bl	1456 <_double_byte>
    2560:	4605      	mov	r5, r0
    2562:	78a0      	ldrb	r0, [r4, #2]
    2564:	f7fe ff77 	bl	1456 <_double_byte>
    2568:	78a3      	ldrb	r3, [r4, #2]
    256a:	405f      	eors	r7, r3
    256c:	78e3      	ldrb	r3, [r4, #3]
    256e:	405f      	eors	r7, r3
    2570:	407d      	eors	r5, r7
    2572:	4045      	eors	r5, r0
    2574:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    2576:	78a0      	ldrb	r0, [r4, #2]
    2578:	7865      	ldrb	r5, [r4, #1]
    257a:	7827      	ldrb	r7, [r4, #0]
    257c:	f7fe ff6b 	bl	1456 <_double_byte>
    2580:	406f      	eors	r7, r5
    2582:	4605      	mov	r5, r0
    2584:	78e0      	ldrb	r0, [r4, #3]
    2586:	f7fe ff66 	bl	1456 <_double_byte>
    258a:	78e3      	ldrb	r3, [r4, #3]
    258c:	405f      	eors	r7, r3
    258e:	407d      	eors	r5, r7
    2590:	4045      	eors	r5, r0
    2592:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2594:	7820      	ldrb	r0, [r4, #0]
    2596:	f7fe ff5e 	bl	1456 <_double_byte>
    259a:	7863      	ldrb	r3, [r4, #1]
    259c:	7825      	ldrb	r5, [r4, #0]
    259e:	405d      	eors	r5, r3
    25a0:	78a3      	ldrb	r3, [r4, #2]
    25a2:	405d      	eors	r5, r3
    25a4:	4045      	eors	r5, r0
    25a6:	78e0      	ldrb	r0, [r4, #3]
    25a8:	f7fe ff55 	bl	1456 <_double_byte>
    25ac:	b2ed      	uxtb	r5, r5
    25ae:	4068      	eors	r0, r5
    25b0:	70f0      	strb	r0, [r6, #3]
    25b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000025b4 <tc_aes128_set_encrypt_key>:
{
    25b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    25b6:	4e28      	ldr	r6, [pc, #160]	; (2658 <tc_aes128_set_encrypt_key+0xa4>)
{
    25b8:	4607      	mov	r7, r0
    25ba:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    25bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    25be:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    25c0:	ad01      	add	r5, sp, #4
    25c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    25c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    25c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    25c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    25cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    25d0:	2f00      	cmp	r7, #0
    25d2:	d03c      	beq.n	264e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    25d4:	2c00      	cmp	r4, #0
    25d6:	d03c      	beq.n	2652 <tc_aes128_set_encrypt_key+0x9e>
    25d8:	1f38      	subs	r0, r7, #4
    25da:	4621      	mov	r1, r4
    25dc:	4602      	mov	r2, r0
    25de:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    25e0:	784b      	ldrb	r3, [r1, #1]
    25e2:	780d      	ldrb	r5, [r1, #0]
    25e4:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    25e6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    25ea:	78cd      	ldrb	r5, [r1, #3]
    25ec:	432b      	orrs	r3, r5
    25ee:	788d      	ldrb	r5, [r1, #2]
    25f0:	3104      	adds	r1, #4
    25f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    25f6:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    25f8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    25fc:	d1f0      	bne.n	25e0 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    25fe:	4c17      	ldr	r4, [pc, #92]	; (265c <tc_aes128_set_encrypt_key+0xa8>)
    2600:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2602:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2604:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2606:	d118      	bne.n	263a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    2608:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    260c:	0e1a      	lsrs	r2, r3, #24
    260e:	5ca5      	ldrb	r5, [r4, r2]
    2610:	b2da      	uxtb	r2, r3
    2612:	5ca2      	ldrb	r2, [r4, r2]
    2614:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2618:	f3c3 4507 	ubfx	r5, r3, #16, #8
    261c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2620:	5d65      	ldrb	r5, [r4, r5]
    2622:	5ce3      	ldrb	r3, [r4, r3]
    2624:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2628:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    262c:	ad0c      	add	r5, sp, #48	; 0x30
    262e:	f021 0303 	bic.w	r3, r1, #3
    2632:	442b      	add	r3, r5
    2634:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2638:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    263a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    263e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2640:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2642:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2644:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2646:	d1dc      	bne.n	2602 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    2648:	2001      	movs	r0, #1
}
    264a:	b00d      	add	sp, #52	; 0x34
    264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    264e:	4638      	mov	r0, r7
    2650:	e7fb      	b.n	264a <tc_aes128_set_encrypt_key+0x96>
    2652:	4620      	mov	r0, r4
    2654:	e7f9      	b.n	264a <tc_aes128_set_encrypt_key+0x96>
    2656:	bf00      	nop
    2658:	00019418 	.word	0x00019418
    265c:	00019b30 	.word	0x00019b30

00002660 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2664:	4615      	mov	r5, r2
    2666:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    2668:	4680      	mov	r8, r0
    266a:	2800      	cmp	r0, #0
    266c:	d05b      	beq.n	2726 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    266e:	2900      	cmp	r1, #0
    2670:	d05a      	beq.n	2728 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2672:	2a00      	cmp	r2, #0
    2674:	d05a      	beq.n	272c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    2676:	2310      	movs	r3, #16
    2678:	460a      	mov	r2, r1
    267a:	4668      	mov	r0, sp
    267c:	4619      	mov	r1, r3
    267e:	f7fe fedb 	bl	1438 <_copy>
	add_round_key(state, s->words);
    2682:	4629      	mov	r1, r5
    2684:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    2686:	4c2a      	ldr	r4, [pc, #168]	; (2730 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    2688:	f7ff fed6 	bl	2438 <add_round_key>
    268c:	f105 0710 	add.w	r7, r5, #16
    2690:	46a1      	mov	r9, r4
    2692:	35a0      	adds	r5, #160	; 0xa0
{
    2694:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    2696:	f81d 3006 	ldrb.w	r3, [sp, r6]
    269a:	5ce3      	ldrb	r3, [r4, r3]
    269c:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    26a0:	3601      	adds	r6, #1
    26a2:	2e10      	cmp	r6, #16
    26a4:	d1f7      	bne.n	2696 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    26a6:	4668      	mov	r0, sp
    26a8:	f7ff ff0b 	bl	24c2 <shift_rows>
	mult_row_column(t, s);
    26ac:	4669      	mov	r1, sp
    26ae:	a804      	add	r0, sp, #16
    26b0:	f7ff ff40 	bl	2534 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    26b4:	a901      	add	r1, sp, #4
    26b6:	a805      	add	r0, sp, #20
    26b8:	f7ff ff3c 	bl	2534 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    26bc:	a902      	add	r1, sp, #8
    26be:	a806      	add	r0, sp, #24
    26c0:	f7ff ff38 	bl	2534 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    26c4:	a903      	add	r1, sp, #12
    26c6:	a807      	add	r0, sp, #28
    26c8:	f7ff ff34 	bl	2534 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    26cc:	4633      	mov	r3, r6
    26ce:	aa04      	add	r2, sp, #16
    26d0:	4631      	mov	r1, r6
    26d2:	4668      	mov	r0, sp
    26d4:	f7fe feb0 	bl	1438 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    26d8:	4639      	mov	r1, r7
    26da:	4668      	mov	r0, sp
    26dc:	3710      	adds	r7, #16
    26de:	f7ff feab 	bl	2438 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    26e2:	42bd      	cmp	r5, r7
    26e4:	d1d6      	bne.n	2694 <tc_aes_encrypt+0x34>
    26e6:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    26e8:	f81d 3006 	ldrb.w	r3, [sp, r6]
    26ec:	f819 3003 	ldrb.w	r3, [r9, r3]
    26f0:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    26f4:	3601      	adds	r6, #1
    26f6:	2e10      	cmp	r6, #16
    26f8:	d1f6      	bne.n	26e8 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    26fa:	4668      	mov	r0, sp
    26fc:	f7ff fee1 	bl	24c2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    2700:	4629      	mov	r1, r5
    2702:	4668      	mov	r0, sp
    2704:	f7ff fe98 	bl	2438 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    2708:	4633      	mov	r3, r6
    270a:	466a      	mov	r2, sp
    270c:	4631      	mov	r1, r6
    270e:	4640      	mov	r0, r8
    2710:	f7fe fe92 	bl	1438 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2714:	4668      	mov	r0, sp
    2716:	4632      	mov	r2, r6
    2718:	2100      	movs	r1, #0
    271a:	f7fe fe9a 	bl	1452 <_set>

	return TC_CRYPTO_SUCCESS;
    271e:	2001      	movs	r0, #1
}
    2720:	b009      	add	sp, #36	; 0x24
    2722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2726:	e7fb      	b.n	2720 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    2728:	4608      	mov	r0, r1
    272a:	e7f9      	b.n	2720 <tc_aes_encrypt+0xc0>
    272c:	4610      	mov	r0, r2
    272e:	e7f7      	b.n	2720 <tc_aes_encrypt+0xc0>
    2730:	00019b30 	.word	0x00019b30

00002734 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    2734:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2736:	f991 3000 	ldrsb.w	r3, [r1]
    273a:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    273c:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2740:	bfb4      	ite	lt
    2742:	2387      	movlt	r3, #135	; 0x87
    2744:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    2746:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    2748:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    274a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    274c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    2750:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    2754:	d003      	beq.n	275e <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    2756:	f812 3901 	ldrb.w	r3, [r2], #-1
    275a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    275c:	e7f4      	b.n	2748 <gf_double+0x14>
    275e:	bd10      	pop	{r4, pc}

00002760 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    2760:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    2762:	b128      	cbz	r0, 2770 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    2764:	2258      	movs	r2, #88	; 0x58
    2766:	2100      	movs	r1, #0
    2768:	f7fe fe73 	bl	1452 <_set>

	return TC_CRYPTO_SUCCESS;
    276c:	2001      	movs	r0, #1
    276e:	bd08      	pop	{r3, pc}
}
    2770:	bd08      	pop	{r3, pc}

00002772 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    2772:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2774:	4604      	mov	r4, r0
    2776:	b190      	cbz	r0, 279e <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    2778:	2210      	movs	r2, #16
    277a:	2100      	movs	r1, #0
    277c:	f7fe fe69 	bl	1452 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    2780:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2784:	2210      	movs	r2, #16
    2786:	2100      	movs	r1, #0
    2788:	f7fe fe63 	bl	1452 <_set>
	s->leftover_offset = 0;
    278c:	2300      	movs	r3, #0
    278e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    2790:	2200      	movs	r2, #0
    2792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2796:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    279a:	2001      	movs	r0, #1
    279c:	bd10      	pop	{r4, pc}
}
    279e:	bd10      	pop	{r4, pc}

000027a0 <tc_cmac_setup>:
{
    27a0:	b570      	push	{r4, r5, r6, lr}
    27a2:	460d      	mov	r5, r1
    27a4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    27a6:	4604      	mov	r4, r0
    27a8:	b318      	cbz	r0, 27f2 <tc_cmac_setup+0x52>
    27aa:	b319      	cbz	r1, 27f4 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    27ac:	2258      	movs	r2, #88	; 0x58
    27ae:	2100      	movs	r1, #0
    27b0:	f7fe fe4f 	bl	1452 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    27b4:	4629      	mov	r1, r5
	s->sched = sched;
    27b6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    27b8:	4630      	mov	r0, r6
    27ba:	f7ff fefb 	bl	25b4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    27be:	4620      	mov	r0, r4
    27c0:	2210      	movs	r2, #16
    27c2:	2100      	movs	r1, #0
    27c4:	f7fe fe45 	bl	1452 <_set>
	gf_double (s->K1, s->iv);
    27c8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    27cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    27ce:	4621      	mov	r1, r4
    27d0:	4620      	mov	r0, r4
    27d2:	f7ff ff45 	bl	2660 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    27d6:	4621      	mov	r1, r4
    27d8:	4628      	mov	r0, r5
    27da:	f7ff ffab 	bl	2734 <gf_double>
	gf_double (s->K2, s->K1);
    27de:	4629      	mov	r1, r5
    27e0:	f104 0020 	add.w	r0, r4, #32
    27e4:	f7ff ffa6 	bl	2734 <gf_double>
	tc_cmac_init(s);
    27e8:	4620      	mov	r0, r4
    27ea:	f7ff ffc2 	bl	2772 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    27ee:	2001      	movs	r0, #1
    27f0:	bd70      	pop	{r4, r5, r6, pc}
    27f2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    27f4:	4608      	mov	r0, r1
}
    27f6:	bd70      	pop	{r4, r5, r6, pc}

000027f8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    27f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fa:	460d      	mov	r5, r1
    27fc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    27fe:	4604      	mov	r4, r0
    2800:	2800      	cmp	r0, #0
    2802:	d05b      	beq.n	28bc <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    2804:	b90a      	cbnz	r2, 280a <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    2806:	2001      	movs	r0, #1
    2808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    280a:	2900      	cmp	r1, #0
    280c:	d056      	beq.n	28bc <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    280e:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    2812:	ea52 0103 	orrs.w	r1, r2, r3
    2816:	d051      	beq.n	28bc <tc_cmac_update+0xc4>
	s->countdown--;
    2818:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    281c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    2820:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    2824:	6c40      	ldr	r0, [r0, #68]	; 0x44
    2826:	b348      	cbz	r0, 287c <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    2828:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    282c:	42be      	cmp	r6, r7
    282e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2832:	d209      	bcs.n	2848 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    2834:	4633      	mov	r3, r6
    2836:	4631      	mov	r1, r6
    2838:	462a      	mov	r2, r5
    283a:	4420      	add	r0, r4
    283c:	f7fe fdfc 	bl	1438 <_copy>
			s->leftover_offset += data_length;
    2840:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2842:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    2844:	6466      	str	r6, [r4, #68]	; 0x44
    2846:	e7de      	b.n	2806 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    2848:	463b      	mov	r3, r7
    284a:	462a      	mov	r2, r5
    284c:	4639      	mov	r1, r7
    284e:	4420      	add	r0, r4
    2850:	f7fe fdf2 	bl	1438 <_copy>
		s->leftover_offset = 0;
    2854:	2300      	movs	r3, #0
    2856:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    2858:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    285a:	443d      	add	r5, r7
    285c:	1e63      	subs	r3, r4, #1
    285e:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    2862:	785a      	ldrb	r2, [r3, #1]
    2864:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    2868:	404a      	eors	r2, r1
    286a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    286e:	4283      	cmp	r3, r0
    2870:	d1f7      	bne.n	2862 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2872:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2874:	4621      	mov	r1, r4
    2876:	4620      	mov	r0, r4
    2878:	f7ff fef2 	bl	2660 <tc_aes_encrypt>
    287c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    2880:	2e10      	cmp	r6, #16
    2882:	d911      	bls.n	28a8 <tc_cmac_update+0xb0>
    2884:	1e63      	subs	r3, r4, #1
    2886:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    2888:	785a      	ldrb	r2, [r3, #1]
    288a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    288e:	4042      	eors	r2, r0
    2890:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2894:	42bb      	cmp	r3, r7
    2896:	d1f7      	bne.n	2888 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2898:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    289a:	4621      	mov	r1, r4
    289c:	4620      	mov	r0, r4
    289e:	f7ff fedf 	bl	2660 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    28a2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    28a4:	3e10      	subs	r6, #16
    28a6:	e7eb      	b.n	2880 <tc_cmac_update+0x88>
	if (data_length > 0) {
    28a8:	2e00      	cmp	r6, #0
    28aa:	d0ac      	beq.n	2806 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    28ac:	4633      	mov	r3, r6
    28ae:	462a      	mov	r2, r5
    28b0:	4631      	mov	r1, r6
    28b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    28b6:	f7fe fdbf 	bl	1438 <_copy>
    28ba:	e7c3      	b.n	2844 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    28bc:	2000      	movs	r0, #0
}
    28be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028c0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    28c0:	b570      	push	{r4, r5, r6, lr}
    28c2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    28c4:	4605      	mov	r5, r0
    28c6:	b370      	cbz	r0, 2926 <tc_cmac_final+0x66>
    28c8:	b371      	cbz	r1, 2928 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    28ca:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    28cc:	2a10      	cmp	r2, #16
    28ce:	d11a      	bne.n	2906 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    28d0:	f101 0210 	add.w	r2, r1, #16
    28d4:	1e61      	subs	r1, r4, #1
    28d6:	3a01      	subs	r2, #1
    28d8:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    28dc:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    28e0:	784b      	ldrb	r3, [r1, #1]
    28e2:	4043      	eors	r3, r0
    28e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    28e8:	4043      	eors	r3, r0
    28ea:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    28ee:	428e      	cmp	r6, r1
    28f0:	d1f4      	bne.n	28dc <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    28f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    28f4:	4621      	mov	r1, r4
    28f6:	4628      	mov	r0, r5
    28f8:	f7ff feb2 	bl	2660 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    28fc:	4620      	mov	r0, r4
    28fe:	f7ff ff2f 	bl	2760 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    2902:	2001      	movs	r0, #1
    2904:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    2906:	f102 0030 	add.w	r0, r2, #48	; 0x30
    290a:	2100      	movs	r1, #0
    290c:	f1c2 0210 	rsb	r2, r2, #16
    2910:	4420      	add	r0, r4
    2912:	f7fe fd9e 	bl	1452 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    2916:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2918:	4423      	add	r3, r4
    291a:	2280      	movs	r2, #128	; 0x80
    291c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    2920:	f104 0220 	add.w	r2, r4, #32
    2924:	e7d6      	b.n	28d4 <tc_cmac_final+0x14>
    2926:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    2928:	4608      	mov	r0, r1
}
    292a:	bd70      	pop	{r4, r5, r6, pc}

0000292c <console_out>:
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    292c:	280a      	cmp	r0, #10
{
    292e:	b538      	push	{r3, r4, r5, lr}
    2930:	4604      	mov	r4, r0
    2932:	4d07      	ldr	r5, [pc, #28]	; (2950 <console_out+0x24>)
	if ('\n' == c) {
    2934:	d104      	bne.n	2940 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2936:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    2938:	6843      	ldr	r3, [r0, #4]
    293a:	210d      	movs	r1, #13
    293c:	685b      	ldr	r3, [r3, #4]
    293e:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    2940:	6828      	ldr	r0, [r5, #0]
    2942:	6843      	ldr	r3, [r0, #4]
    2944:	b2e1      	uxtb	r1, r4
    2946:	685b      	ldr	r3, [r3, #4]
    2948:	4798      	blx	r3

	return c;
}
    294a:	4620      	mov	r0, r4
    294c:	bd38      	pop	{r3, r4, r5, pc}
    294e:	bf00      	nop
    2950:	20000048 	.word	0x20000048

00002954 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2954:	4801      	ldr	r0, [pc, #4]	; (295c <uart_console_hook_install+0x8>)
    2956:	f7fe bc1b 	b.w	1190 <__printk_hook_install>
    295a:	bf00      	nop
    295c:	0000292d 	.word	0x0000292d

00002960 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2960:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2962:	4804      	ldr	r0, [pc, #16]	; (2974 <uart_console_init+0x14>)
    2964:	f015 f9d0 	bl	17d08 <device_get_binding>
    2968:	4b03      	ldr	r3, [pc, #12]	; (2978 <uart_console_init+0x18>)
    296a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    296c:	f7ff fff2 	bl	2954 <uart_console_hook_install>

	return 0;
}
    2970:	2000      	movs	r0, #0
    2972:	bd08      	pop	{r3, pc}
    2974:	00019c30 	.word	0x00019c30
    2978:	20000048 	.word	0x20000048

0000297c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    297c:	b510      	push	{r4, lr}
    297e:	f04f 0320 	mov.w	r3, #32
    2982:	f3ef 8211 	mrs	r2, BASEPRI
    2986:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    298a:	4c11      	ldr	r4, [pc, #68]	; (29d0 <_m16src_stop+0x54>)
    298c:	7823      	ldrb	r3, [r4, #0]
    298e:	b923      	cbnz	r3, 299a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2990:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    2994:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2998:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    299a:	3b01      	subs	r3, #1
    299c:	b2db      	uxtb	r3, r3
    299e:	7023      	strb	r3, [r4, #0]
    29a0:	b11b      	cbz	r3, 29aa <_m16src_stop+0x2e>
    29a2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return 0;
    29a6:	2000      	movs	r0, #0
    29a8:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    29aa:	4b0a      	ldr	r3, [pc, #40]	; (29d4 <_m16src_stop+0x58>)
    29ac:	7818      	ldrb	r0, [r3, #0]
    29ae:	2101      	movs	r1, #1
    29b0:	b128      	cbz	r0, 29be <_m16src_stop+0x42>
		m16src_ref++;
    29b2:	7021      	strb	r1, [r4, #0]
    29b4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    29b8:	f06f 000a 	mvn.w	r0, #10
    29bc:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    29be:	7019      	strb	r1, [r3, #0]
    29c0:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    29c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29c8:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    29ca:	7018      	strb	r0, [r3, #0]

	return 0;
}
    29cc:	bd10      	pop	{r4, pc}
    29ce:	bf00      	nop
    29d0:	2000004e 	.word	0x2000004e
    29d4:	2000004d 	.word	0x2000004d

000029d8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    29d8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    29da:	2200      	movs	r2, #0
    29dc:	4610      	mov	r0, r2
    29de:	2101      	movs	r1, #1
    29e0:	f7fe fa0a 	bl	df8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    29e4:	2000      	movs	r0, #0
    29e6:	f7fe f9dd 	bl	da4 <_arch_irq_enable>

	return 0;
}
    29ea:	2000      	movs	r0, #0
    29ec:	bd08      	pop	{r3, pc}
	...

000029f0 <_m16src_start>:
{
    29f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    29f2:	f04f 0220 	mov.w	r2, #32
    29f6:	f3ef 8311 	mrs	r3, BASEPRI
    29fa:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    29fe:	4a25      	ldr	r2, [pc, #148]	; (2a94 <_m16src_start+0xa4>)
    2a00:	7810      	ldrb	r0, [r2, #0]
    2a02:	1c44      	adds	r4, r0, #1
    2a04:	7014      	strb	r4, [r2, #0]
    2a06:	b160      	cbz	r0, 2a22 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a08:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    2a14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a18:	bf14      	ite	ne
    2a1a:	2000      	movne	r0, #0
    2a1c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    2a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    2a22:	4d1d      	ldr	r5, [pc, #116]	; (2a98 <_m16src_start+0xa8>)
    2a24:	782f      	ldrb	r7, [r5, #0]
    2a26:	b12f      	cbz	r7, 2a34 <_m16src_start+0x44>
		m16src_ref--;
    2a28:	7010      	strb	r0, [r2, #0]
    2a2a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    2a2e:	f06f 000a 	mvn.w	r0, #10
    2a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    2a34:	2601      	movs	r6, #1
    2a36:	702e      	strb	r6, [r5, #0]
    2a38:	f383 8811 	msr	BASEPRI, r3
    2a3c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2a40:	b319      	cbz	r1, 2a8a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    2a42:	4638      	mov	r0, r7
    2a44:	f7fe f9bc 	bl	dc0 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a48:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2a4c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a50:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a54:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2a56:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2a5a:	b192      	cbz	r2, 2a82 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a5c:	2200      	movs	r2, #0
    2a5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a62:	4a0e      	ldr	r2, [pc, #56]	; (2a9c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2a64:	f013 0f01 	tst.w	r3, #1
    2a68:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a6c:	bf08      	it	eq
    2a6e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    2a72:	2000      	movs	r0, #0
    2a74:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    2a78:	f7fe f994 	bl	da4 <_arch_irq_enable>
	m16src_grd = 0;
    2a7c:	2300      	movs	r3, #0
    2a7e:	702b      	strb	r3, [r5, #0]
    2a80:	e7c4      	b.n	2a0c <_m16src_start+0x1c>
  __ASM volatile ("wfe");
    2a82:	bf20      	wfe
  __ASM volatile ("sev");
    2a84:	bf40      	sev
  __ASM volatile ("wfe");
    2a86:	bf20      	wfe
    2a88:	e7e5      	b.n	2a56 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a8e:	6026      	str	r6, [r4, #0]
    2a90:	e7f4      	b.n	2a7c <_m16src_start+0x8c>
    2a92:	bf00      	nop
    2a94:	2000004e 	.word	0x2000004e
    2a98:	2000004d 	.word	0x2000004d
    2a9c:	e000e100 	.word	0xe000e100

00002aa0 <_k32src_start>:
{
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aa2:	4606      	mov	r6, r0
    2aa4:	460c      	mov	r4, r1
	__asm__ volatile(
    2aa6:	f04f 0220 	mov.w	r2, #32
    2aaa:	f3ef 8311 	mrs	r3, BASEPRI
    2aae:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2ab2:	4a2c      	ldr	r2, [pc, #176]	; (2b64 <_k32src_start+0xc4>)
    2ab4:	7815      	ldrb	r5, [r2, #0]
    2ab6:	b165      	cbz	r5, 2ad2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2ab8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ac0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    2ac4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    2ac8:	bf0c      	ite	eq
    2aca:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    2ace:	2000      	movne	r0, #0
    2ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2ad2:	2701      	movs	r7, #1
    2ad4:	7017      	strb	r7, [r2, #0]
    2ad6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2ada:	4628      	mov	r0, r5
    2adc:	f7fe f970 	bl	dc0 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2ae4:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ae6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2aea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2aee:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2af2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2af6:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2af8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2afc:	b371      	cbz	r1, 2b5c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2afe:	0792      	lsls	r2, r2, #30
    2b00:	4f19      	ldr	r7, [pc, #100]	; (2b68 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b02:	bf58      	it	pl
    2b04:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b06:	f04f 0100 	mov.w	r1, #0
    2b0a:	f04f 0501 	mov.w	r5, #1
    2b0e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    2b12:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b16:	bf58      	it	pl
    2b18:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    2b1c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2b20:	f7fe f940 	bl	da4 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    2b28:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b2a:	2218      	movs	r2, #24
    2b2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2b30:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2b34:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2b38:	f014 0103 	ands.w	r1, r4, #3
    2b3c:	d1be      	bne.n	2abc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b3e:	2010      	movs	r0, #16
    2b40:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b48:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b4a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b4e:	f7ff ff4f 	bl	29f0 <_m16src_start>
		if (!err) {
    2b52:	2800      	cmp	r0, #0
    2b54:	d1b2      	bne.n	2abc <_k32src_start+0x1c>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b56:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    2b5a:	e7af      	b.n	2abc <_k32src_start+0x1c>
    2b5c:	bf20      	wfe
  __ASM volatile ("sev");
    2b5e:	bf40      	sev
  __ASM volatile ("wfe");
    2b60:	bf20      	wfe
    2b62:	e7c9      	b.n	2af8 <_k32src_start+0x58>
    2b64:	2000004c 	.word	0x2000004c
    2b68:	e000e100 	.word	0xe000e100

00002b6c <_power_clock_isr>:
{
    2b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2b72:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2b74:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2b78:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2b7c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2b80:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2b84:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2b88:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2b8c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2b90:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2b94:	f1be 0f00 	cmp.w	lr, #0
    2b98:	d003      	beq.n	2ba2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    2b9a:	f04f 0e00 	mov.w	lr, #0
    2b9e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2ba2:	b127      	cbz	r7, 2bae <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ba8:	2700      	movs	r7, #0
    2baa:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2bae:	b13a      	cbz	r2, 2bc0 <_power_clock_isr+0x54>
    2bb0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2bb2:	bf41      	itttt	mi
    2bb4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    2bb8:	2201      	movmi	r2, #1
    2bba:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2bbe:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    2bc0:	b120      	cbz	r0, 2bcc <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bc6:	2200      	movs	r2, #0
    2bc8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2bcc:	b149      	cbz	r1, 2be2 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    2bce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2bd2:	2100      	movs	r1, #0
    2bd4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2bd8:	4628      	mov	r0, r5
    2bda:	f7ff fecf 	bl	297c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2bde:	2301      	movs	r3, #1
    2be0:	6163      	str	r3, [r4, #20]
	if (ctto) {
    2be2:	b176      	cbz	r6, 2c02 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2be8:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bea:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2bec:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    2bf0:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bf2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2bf6:	f7ff fefb 	bl	29f0 <_m16src_start>
		if (!err) {
    2bfa:	b910      	cbnz	r0, 2c02 <_power_clock_isr+0x96>
    2bfc:	4b01      	ldr	r3, [pc, #4]	; (2c04 <_power_clock_isr+0x98>)
    2bfe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c04:	e000e100 	.word	0xe000e100

00002c08 <is_addr_valid>:
	return (data & 0x3) ? false : true;
}

static inline bool is_addr_valid(off_t addr, size_t len)
{
	if (addr + len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
    2c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
    2c0c:	b510      	push	{r4, lr}
	if (addr + len > NRF_FICR->CODEPAGESIZE * NRF_FICR->CODESIZE ||
    2c0e:	6914      	ldr	r4, [r2, #16]
    2c10:	6953      	ldr	r3, [r2, #20]
    2c12:	4401      	add	r1, r0
    2c14:	4363      	muls	r3, r4
    2c16:	4299      	cmp	r1, r3
    2c18:	bf9a      	itte	ls
    2c1a:	43c0      	mvnls	r0, r0
    2c1c:	0fc0      	lsrls	r0, r0, #31
			addr < 0) {
		return false;
    2c1e:	2000      	movhi	r0, #0
	}

	return true;
}
    2c20:	bd10      	pop	{r4, pc}
	...

00002c24 <nvmc_wait_ready>:

static void nvmc_wait_ready(void)
{
	while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    2c24:	4a02      	ldr	r2, [pc, #8]	; (2c30 <nvmc_wait_ready+0xc>)
    2c26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d0fb      	beq.n	2c26 <nvmc_wait_ready+0x2>
		;
	}
}
    2c2e:	4770      	bx	lr
    2c30:	4001e000 	.word	0x4001e000

00002c34 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF5_RADIO_SYNC */

static int erase_op(void *context)
{
    2c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2c3c:	4e1d      	ldr	r6, [pc, #116]	; (2cb4 <erase_op+0x80>)
#if defined(CONFIG_SOC_FLASH_NRF5_RADIO_SYNC)
	u32_t ticks_begin = 0;
	u32_t ticks_diff;
	u32_t i = 0;

	if (e_ctx->enable_time_limit) {
    2c3e:	7a05      	ldrb	r5, [r0, #8]
	u32_t prev_nvmc_cfg = NRF_NVMC->CONFIG;
    2c40:	f8d6 8504 	ldr.w	r8, [r6, #1284]	; 0x504
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2c44:	6917      	ldr	r7, [r2, #16]
{
    2c46:	4604      	mov	r4, r0
	if (e_ctx->enable_time_limit) {
    2c48:	b115      	cbz	r5, 2c50 <erase_op+0x1c>
		ticks_begin = ticker_ticks_now_get();
    2c4a:	f00e f825 	bl	10c98 <ticker_ticks_now_get>
    2c4e:	4605      	mov	r5, r0
	}
#endif /* CONFIG_SOC_FLASH_NRF5_RADIO_SYNC */

	/* Erase uses a specific configuration register */
	NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een << NVMC_CONFIG_WEN_Pos;
    2c50:	2302      	movs	r3, #2
    2c52:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504
	nvmc_wait_ready();
    2c56:	f7ff ffe5 	bl	2c24 <nvmc_wait_ready>

	do {
		NRF_NVMC->ERASEPAGE = e_ctx->addr;
    2c5a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2cb4 <erase_op+0x80>
#if defined(CONFIG_SOC_FLASH_NRF5_RADIO_SYNC)
		i++;

		if (e_ctx->enable_time_limit) {
			ticks_diff = ticker_ticks_now_get() - ticks_begin;
			if (ticks_diff + ticks_diff/i > FLASH_SLOT) {
    2c5e:	4e16      	ldr	r6, [pc, #88]	; (2cb8 <erase_op+0x84>)
	u32_t i = 0;
    2c60:	f04f 0a00 	mov.w	sl, #0
		NRF_NVMC->ERASEPAGE = e_ctx->addr;
    2c64:	6823      	ldr	r3, [r4, #0]
    2c66:	f8c9 3508 	str.w	r3, [r9, #1288]	; 0x508
		nvmc_wait_ready();
    2c6a:	f7ff ffdb 	bl	2c24 <nvmc_wait_ready>
		e_ctx->size -= pg_size;
    2c6e:	6863      	ldr	r3, [r4, #4]
    2c70:	1bdb      	subs	r3, r3, r7
    2c72:	6063      	str	r3, [r4, #4]
		e_ctx->addr += pg_size;
    2c74:	6823      	ldr	r3, [r4, #0]
    2c76:	443b      	add	r3, r7
    2c78:	6023      	str	r3, [r4, #0]
		if (e_ctx->enable_time_limit) {
    2c7a:	7a23      	ldrb	r3, [r4, #8]
		i++;
    2c7c:	f10a 0a01 	add.w	sl, sl, #1
		if (e_ctx->enable_time_limit) {
    2c80:	b973      	cbnz	r3, 2ca0 <erase_op+0x6c>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF5_RADIO_SYNC */

	} while (e_ctx->size > 0);
    2c82:	6863      	ldr	r3, [r4, #4]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d1ed      	bne.n	2c64 <erase_op+0x30>

	NRF_NVMC->CONFIG = prev_nvmc_cfg;
    2c88:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <erase_op+0x80>)
    2c8a:	f8c3 8504 	str.w	r8, [r3, #1284]	; 0x504
	nvmc_wait_ready();
    2c8e:	f7ff ffc9 	bl	2c24 <nvmc_wait_ready>

	return (e_ctx->size > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    2c92:	6860      	ldr	r0, [r4, #4]
    2c94:	3000      	adds	r0, #0
    2c96:	bf18      	it	ne
    2c98:	2001      	movne	r0, #1
}
    2c9a:	4240      	negs	r0, r0
    2c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ticks_diff = ticker_ticks_now_get() - ticks_begin;
    2ca0:	f00d fffa 	bl	10c98 <ticker_ticks_now_get>
    2ca4:	1b40      	subs	r0, r0, r5
			if (ticks_diff + ticks_diff/i > FLASH_SLOT) {
    2ca6:	fbb0 f3fa 	udiv	r3, r0, sl
    2caa:	4418      	add	r0, r3
    2cac:	42b0      	cmp	r0, r6
    2cae:	d9e8      	bls.n	2c82 <erase_op+0x4e>
    2cb0:	e7ea      	b.n	2c88 <erase_op+0x54>
    2cb2:	bf00      	nop
    2cb4:	4001e000 	.word	0x4001e000
    2cb8:	00015e64 	.word	0x00015e64

00002cbc <work_in_time_slice>:
{
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	b08c      	sub	sp, #48	; 0x30
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2cc0:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
    2cc4:	4604      	mov	r4, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2cc6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    2cca:	f013 fe43 	bl	16954 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    2cce:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
    2cd2:	f89d 602f 	ldrb.w	r6, [sp, #47]	; 0x2f
    2cd6:	f00d ffdf 	bl	10c98 <ticker_ticks_now_get>
    2cda:	4a13      	ldr	r2, [pc, #76]	; (2d28 <work_in_time_slice+0x6c>)
    2cdc:	9205      	str	r2, [sp, #20]
    2cde:	2300      	movs	r3, #0
    2ce0:	f640 317b 	movw	r1, #2939	; 0xb7b
    2ce4:	4a11      	ldr	r2, [pc, #68]	; (2d2c <work_in_time_slice+0x70>)
    2ce6:	9308      	str	r3, [sp, #32]
    2ce8:	9307      	str	r3, [sp, #28]
    2cea:	9104      	str	r1, [sp, #16]
    2cec:	9303      	str	r3, [sp, #12]
    2cee:	9202      	str	r2, [sp, #8]
    2cf0:	9101      	str	r1, [sp, #4]
    2cf2:	9300      	str	r3, [sp, #0]
    2cf4:	9406      	str	r4, [sp, #24]
    2cf6:	4603      	mov	r3, r0
    2cf8:	4632      	mov	r2, r6
    2cfa:	2103      	movs	r1, #3
    2cfc:	4628      	mov	r0, r5
    2cfe:	f00d fe81 	bl	10a04 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2d02:	f030 0302 	bics.w	r3, r0, #2
    2d06:	d108      	bne.n	2d1a <work_in_time_slice+0x5e>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2d08:	f645 11b3 	movw	r1, #22963	; 0x59b3
    2d0c:	4808      	ldr	r0, [pc, #32]	; (2d30 <work_in_time_slice+0x74>)
    2d0e:	f015 fd05 	bl	1871c <_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2d12:	b928      	cbnz	r0, 2d20 <work_in_time_slice+0x64>
		result = p_flash_op_desc->result;
    2d14:	68a0      	ldr	r0, [r4, #8]
}
    2d16:	b00c      	add	sp, #48	; 0x30
    2d18:	bd70      	pop	{r4, r5, r6, pc}
		result = -ECANCELED;
    2d1a:	f06f 0047 	mvn.w	r0, #71	; 0x47
    2d1e:	e7fa      	b.n	2d16 <work_in_time_slice+0x5a>
		result = -ETIMEDOUT;
    2d20:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	return result;
    2d24:	e7f7      	b.n	2d16 <work_in_time_slice+0x5a>
    2d26:	bf00      	nop
    2d28:	00002d35 	.word	0x00002d35
    2d2c:	0086db02 	.word	0x0086db02
    2d30:	20000068 	.word	0x20000068

00002d34 <time_slot_callback_helper>:
{
    2d34:	b570      	push	{r4, r5, r6, lr}
    2d36:	b08c      	sub	sp, #48	; 0x30
    2d38:	461d      	mov	r5, r3
    2d3a:	4606      	mov	r6, r0
	ll_radio_state_abort();
    2d3c:	f012 fff2 	bl	15d24 <ll_radio_state_abort>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2d40:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
    2d44:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    2d48:	f013 fe04 	bl	16954 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
    2d4c:	4b13      	ldr	r3, [pc, #76]	; (2d9c <time_slot_callback_helper+0x68>)
    2d4e:	9305      	str	r3, [sp, #20]
    2d50:	2400      	movs	r4, #0
    2d52:	2310      	movs	r3, #16
    2d54:	9300      	str	r3, [sp, #0]
    2d56:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    2d5a:	9408      	str	r4, [sp, #32]
    2d5c:	4633      	mov	r3, r6
    2d5e:	9407      	str	r4, [sp, #28]
    2d60:	9506      	str	r5, [sp, #24]
    2d62:	9404      	str	r4, [sp, #16]
    2d64:	9403      	str	r4, [sp, #12]
    2d66:	9402      	str	r4, [sp, #8]
    2d68:	9401      	str	r4, [sp, #4]
    2d6a:	4622      	mov	r2, r4
    2d6c:	4621      	mov	r1, r4
    2d6e:	f00d fe49 	bl	10a04 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2d72:	f030 0302 	bics.w	r3, r0, #2
    2d76:	d00e      	beq.n	2d96 <time_slot_callback_helper+0x62>
		((struct flash_op_desc *)context)->result = -ECANCELED;
    2d78:	f06f 0347 	mvn.w	r3, #71	; 0x47
    2d7c:	60ab      	str	r3, [r5, #8]
		err = ticker_stop(instance_index, 0, ticker_id, NULL, NULL);
    2d7e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    2d82:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    2d86:	9400      	str	r4, [sp, #0]
    2d88:	4623      	mov	r3, r4
    2d8a:	4621      	mov	r1, r4
    2d8c:	f00d fec8 	bl	10b20 <ticker_stop>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2d90:	4803      	ldr	r0, [pc, #12]	; (2da0 <time_slot_callback_helper+0x6c>)
    2d92:	f015 fc81 	bl	18698 <_impl_k_sem_give>
}
    2d96:	b00c      	add	sp, #48	; 0x30
    2d98:	bd70      	pop	{r4, r5, r6, pc}
    2d9a:	bf00      	nop
    2d9c:	00002df9 	.word	0x00002df9
    2da0:	20000068 	.word	0x20000068

00002da4 <flash_nrf5_read>:
{
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	460d      	mov	r5, r1
	if (!is_addr_valid(addr, len)) {
    2da8:	4628      	mov	r0, r5
    2daa:	4619      	mov	r1, r3
{
    2dac:	4616      	mov	r6, r2
    2dae:	461c      	mov	r4, r3
	if (!is_addr_valid(addr, len)) {
    2db0:	f7ff ff2a 	bl	2c08 <is_addr_valid>
    2db4:	b138      	cbz	r0, 2dc6 <flash_nrf5_read+0x22>
	if (!len) {
    2db6:	b124      	cbz	r4, 2dc2 <flash_nrf5_read+0x1e>
	memcpy(data, (void *)addr, len);
    2db8:	4622      	mov	r2, r4
    2dba:	4629      	mov	r1, r5
    2dbc:	4630      	mov	r0, r6
    2dbe:	f7fd fc4b 	bl	658 <memcpy>
	return 0;
    2dc2:	2000      	movs	r0, #0
    2dc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    2dc6:	f06f 0015 	mvn.w	r0, #21
    2dca:	bd70      	pop	{r4, r5, r6, pc}

00002dcc <nrf5_flash_init>:
{
    2dcc:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2dce:	2201      	movs	r2, #1
	dev->driver_api = &flash_nrf5_api;
    2dd0:	4b06      	ldr	r3, [pc, #24]	; (2dec <nrf5_flash_init+0x20>)
    2dd2:	6043      	str	r3, [r0, #4]
    2dd4:	4611      	mov	r1, r2
    2dd6:	4806      	ldr	r0, [pc, #24]	; (2df0 <nrf5_flash_init+0x24>)
    2dd8:	f015 fc54 	bl	18684 <_impl_k_sem_init>
    2ddc:	2201      	movs	r2, #1
    2dde:	2100      	movs	r1, #0
    2de0:	4804      	ldr	r0, [pc, #16]	; (2df4 <nrf5_flash_init+0x28>)
    2de2:	f015 fc4f 	bl	18684 <_impl_k_sem_init>
}
    2de6:	2000      	movs	r0, #0
    2de8:	bd08      	pop	{r3, pc}
    2dea:	bf00      	nop
    2dec:	00019c68 	.word	0x00019c68
    2df0:	20000050 	.word	0x20000050
    2df4:	20000068 	.word	0x20000068

00002df8 <time_slot_callback_work>:
{
    2df8:	b530      	push	{r4, r5, lr}
    2dfa:	461d      	mov	r5, r3
    2dfc:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	6868      	ldr	r0, [r5, #4]
    2e02:	4798      	blx	r3
    2e04:	4604      	mov	r4, r0
    2e06:	b990      	cbnz	r0, 2e2e <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2e08:	f10d 010f 	add.w	r1, sp, #15
    2e0c:	f10d 000e 	add.w	r0, sp, #14
    2e10:	f013 fda0 	bl	16954 <ll_timeslice_ticker_id_get>
		result = ticker_stop(instance_index,
    2e14:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2e18:	f89d 000e 	ldrb.w	r0, [sp, #14]
    2e1c:	9400      	str	r4, [sp, #0]
    2e1e:	4623      	mov	r3, r4
    2e20:	4621      	mov	r1, r4
    2e22:	f00d fe7d 	bl	10b20 <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
    2e26:	60ac      	str	r4, [r5, #8]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2e28:	4802      	ldr	r0, [pc, #8]	; (2e34 <time_slot_callback_work+0x3c>)
    2e2a:	f015 fc35 	bl	18698 <_impl_k_sem_give>
}
    2e2e:	b005      	add	sp, #20
    2e30:	bd30      	pop	{r4, r5, pc}
    2e32:	bf00      	nop
    2e34:	20000068 	.word	0x20000068

00002e38 <flash_nrf5_erase>:
{
    2e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    2e3e:	b087      	sub	sp, #28
	u32_t pg_size = NRF_FICR->CODEPAGESIZE;
    2e40:	691d      	ldr	r5, [r3, #16]
	if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2e42:	fbb1 f3f5 	udiv	r3, r1, r5
    2e46:	fb05 1313 	mls	r3, r5, r3, r1
{
    2e4a:	460f      	mov	r7, r1
    2e4c:	4616      	mov	r6, r2
	u32_t n_pages = size / pg_size;
    2e4e:	fbb2 f4f5 	udiv	r4, r2, r5
	if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2e52:	b123      	cbz	r3, 2e5e <flash_nrf5_erase+0x26>
		return -EINVAL;
    2e54:	f06f 0415 	mvn.w	r4, #21
}
    2e58:	4620      	mov	r0, r4
    2e5a:	b007      	add	sp, #28
    2e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2e5e:	fb05 2514 	mls	r5, r5, r4, r2
    2e62:	2d00      	cmp	r5, #0
    2e64:	d1f6      	bne.n	2e54 <flash_nrf5_erase+0x1c>
	if (!is_addr_valid(addr, size)) {
    2e66:	4611      	mov	r1, r2
    2e68:	4638      	mov	r0, r7
    2e6a:	f7ff fecd 	bl	2c08 <is_addr_valid>
    2e6e:	2800      	cmp	r0, #0
    2e70:	d0f0      	beq.n	2e54 <flash_nrf5_erase+0x1c>
	if (!n_pages) {
    2e72:	2c00      	cmp	r4, #0
    2e74:	d0f0      	beq.n	2e58 <flash_nrf5_erase+0x20>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2e7a:	4810      	ldr	r0, [pc, #64]	; (2ebc <flash_nrf5_erase+0x84>)
    2e7c:	f015 fc4e 	bl	1871c <_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
    2e80:	4628      	mov	r0, r5
    2e82:	f00d fda5 	bl	109d0 <ticker_is_initialized>
    2e86:	b188      	cbz	r0, 2eac <flash_nrf5_erase+0x74>
	struct erase_context context = {
    2e88:	2301      	movs	r3, #1
    2e8a:	f88d 3008 	strb.w	r3, [sp, #8]
	return work_in_time_slice(&flash_op_desc);
    2e8e:	a803      	add	r0, sp, #12
	struct flash_op_desc flash_op_desc = {
    2e90:	4b0b      	ldr	r3, [pc, #44]	; (2ec0 <flash_nrf5_erase+0x88>)
	struct erase_context context = {
    2e92:	9700      	str	r7, [sp, #0]
    2e94:	9601      	str	r6, [sp, #4]
	struct flash_op_desc flash_op_desc = {
    2e96:	9505      	str	r5, [sp, #20]
    2e98:	9303      	str	r3, [sp, #12]
    2e9a:	f8cd d010 	str.w	sp, [sp, #16]
	return work_in_time_slice(&flash_op_desc);
    2e9e:	f7ff ff0d 	bl	2cbc <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF5_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF5_RADIO_SYNC */
	};

	return	erase_op(&context);
    2ea2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2ea4:	4805      	ldr	r0, [pc, #20]	; (2ebc <flash_nrf5_erase+0x84>)
    2ea6:	f015 fbf7 	bl	18698 <_impl_k_sem_give>
	return ret;
    2eaa:	e7d5      	b.n	2e58 <flash_nrf5_erase+0x20>
	struct erase_context context = {
    2eac:	f88d 0014 	strb.w	r0, [sp, #20]
	return	erase_op(&context);
    2eb0:	a803      	add	r0, sp, #12
	struct erase_context context = {
    2eb2:	9703      	str	r7, [sp, #12]
    2eb4:	9604      	str	r6, [sp, #16]
	return	erase_op(&context);
    2eb6:	f7ff febd 	bl	2c34 <erase_op>
    2eba:	e7f2      	b.n	2ea2 <flash_nrf5_erase+0x6a>
    2ebc:	20000050 	.word	0x20000050
    2ec0:	00002c35 	.word	0x00002c35

00002ec4 <flash_nrf5_write_protection>:
{
    2ec4:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2ec6:	480a      	ldr	r0, [pc, #40]	; (2ef0 <flash_nrf5_write_protection+0x2c>)
    2ec8:	460c      	mov	r4, r1
    2eca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2ece:	f015 fc25 	bl	1871c <_impl_k_sem_take>
    2ed2:	4b08      	ldr	r3, [pc, #32]	; (2ef4 <flash_nrf5_write_protection+0x30>)
	if (enable) {
    2ed4:	b14c      	cbz	r4, 2eea <flash_nrf5_write_protection+0x26>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    2ed6:	2200      	movs	r2, #0
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    2ed8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nvmc_wait_ready();
    2edc:	f7ff fea2 	bl	2c24 <nvmc_wait_ready>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2ee0:	4803      	ldr	r0, [pc, #12]	; (2ef0 <flash_nrf5_write_protection+0x2c>)
    2ee2:	f015 fbd9 	bl	18698 <_impl_k_sem_give>
}
    2ee6:	2000      	movs	r0, #0
    2ee8:	bd10      	pop	{r4, pc}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    2eea:	2201      	movs	r2, #1
    2eec:	e7f4      	b.n	2ed8 <flash_nrf5_write_protection+0x14>
    2eee:	bf00      	nop
    2ef0:	20000050 	.word	0x20000050
    2ef4:	4001e000 	.word	0x4001e000

00002ef8 <write_op>:
{
    2ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
    2efa:	7b05      	ldrb	r5, [r0, #12]
{
    2efc:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    2efe:	b115      	cbz	r5, 2f06 <write_op+0xe>
		ticks_begin = ticker_ticks_now_get();
    2f00:	f00d feca 	bl	10c98 <ticker_ticks_now_get>
    2f04:	4605      	mov	r5, r0
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2f06:	6867      	ldr	r7, [r4, #4]
	if (!is_aligned_32(w_ctx->flash_addr)) {
    2f08:	f017 0003 	ands.w	r0, r7, #3
    2f0c:	d11f      	bne.n	2f4e <write_op+0x56>
			if (ticks_diff + ticks_diff/i > FLASH_SLOT) {
    2f0e:	4f35      	ldr	r7, [pc, #212]	; (2fe4 <write_op+0xec>)
	u32_t ticks_begin = 0;
    2f10:	2601      	movs	r6, #1
	while (w_ctx->len >= sizeof(u32_t)) {
    2f12:	68a2      	ldr	r2, [r4, #8]
    2f14:	2a03      	cmp	r2, #3
    2f16:	d848      	bhi.n	2faa <write_op+0xb2>
	if (w_ctx->len) {
    2f18:	b1aa      	cbz	r2, 2f46 <write_op+0x4e>
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2f1a:	6863      	ldr	r3, [r4, #4]
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2f1c:	6821      	ldr	r1, [r4, #0]
		tmp_word = *(u32_t *)(w_ctx->flash_addr);
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	a802      	add	r0, sp, #8
    2f22:	f840 3d04 	str.w	r3, [r0, #-4]!
		memcpy((u8_t *)&tmp_word, (void *)w_ctx->data_addr, w_ctx->len);
    2f26:	f7fd fb97 	bl	658 <memcpy>
		nvmc_wait_ready();
    2f2a:	f7ff fe7b 	bl	2c24 <nvmc_wait_ready>
		*(u32_t *)w_ctx->flash_addr = tmp_word;
    2f2e:	6863      	ldr	r3, [r4, #4]
    2f30:	9a01      	ldr	r2, [sp, #4]
    2f32:	601a      	str	r2, [r3, #0]
		shift_write_context(w_ctx->len, w_ctx);
    2f34:	68a1      	ldr	r1, [r4, #8]
	w_ctx->data_addr += shift;
    2f36:	6823      	ldr	r3, [r4, #0]
	w_ctx->flash_addr += shift;
    2f38:	6862      	ldr	r2, [r4, #4]
	w_ctx->data_addr += shift;
    2f3a:	440b      	add	r3, r1
	w_ctx->flash_addr += shift;
    2f3c:	440a      	add	r2, r1
	w_ctx->data_addr += shift;
    2f3e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2f40:	2300      	movs	r3, #0
	w_ctx->flash_addr += shift;
    2f42:	6062      	str	r2, [r4, #4]
	w_ctx->len -= shift;
    2f44:	60a3      	str	r3, [r4, #8]
	nvmc_wait_ready();
    2f46:	f7ff fe6d 	bl	2c24 <nvmc_wait_ready>
	return FLASH_OP_DONE;
    2f4a:	2000      	movs	r0, #0
    2f4c:	e02b      	b.n	2fa6 <write_op+0xae>
	addr_word = (u32_t)w_ctx->flash_addr & ~0x3;
    2f4e:	f027 0703 	bic.w	r7, r7, #3
		tmp_word = *(u32_t *)(addr_word);
    2f52:	ab02      	add	r3, sp, #8
    2f54:	683a      	ldr	r2, [r7, #0]
    2f56:	f843 2d04 	str.w	r2, [r3, #-4]!
    2f5a:	68a2      	ldr	r2, [r4, #8]
		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2f5c:	6821      	ldr	r1, [r4, #0]
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
    2f5e:	f1c0 0604 	rsb	r6, r0, #4
    2f62:	4296      	cmp	r6, r2
    2f64:	bf28      	it	cs
    2f66:	4616      	movcs	r6, r2
		memcpy((u8_t *)&tmp_word + (w_ctx->flash_addr & 0x3),
    2f68:	4632      	mov	r2, r6
    2f6a:	4418      	add	r0, r3
    2f6c:	f7fd fb74 	bl	658 <memcpy>
		nvmc_wait_ready();
    2f70:	f7ff fe58 	bl	2c24 <nvmc_wait_ready>
		*(u32_t *)addr_word = tmp_word;
    2f74:	9b01      	ldr	r3, [sp, #4]
    2f76:	603b      	str	r3, [r7, #0]
	w_ctx->flash_addr += shift;
    2f78:	6863      	ldr	r3, [r4, #4]
    2f7a:	4433      	add	r3, r6
    2f7c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2f7e:	6823      	ldr	r3, [r4, #0]
    2f80:	4433      	add	r3, r6
    2f82:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2f84:	68a3      	ldr	r3, [r4, #8]
    2f86:	1b9e      	subs	r6, r3, r6
		if (w_ctx->enable_time_limit) {
    2f88:	7b23      	ldrb	r3, [r4, #12]
	w_ctx->len -= shift;
    2f8a:	60a6      	str	r6, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d0be      	beq.n	2f0e <write_op+0x16>
			ticks_diff = ticker_ticks_now_get() - ticks_begin;
    2f90:	f00d fe82 	bl	10c98 <ticker_ticks_now_get>
			if (2 * ticks_diff > FLASH_SLOT) {
    2f94:	4b13      	ldr	r3, [pc, #76]	; (2fe4 <write_op+0xec>)
			ticks_diff = ticker_ticks_now_get() - ticks_begin;
    2f96:	1b40      	subs	r0, r0, r5
			if (2 * ticks_diff > FLASH_SLOT) {
    2f98:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
    2f9c:	d2b7      	bcs.n	2f0e <write_op+0x16>
				nvmc_wait_ready();
    2f9e:	f7ff fe41 	bl	2c24 <nvmc_wait_ready>
				return FLASH_OP_ONGOING;
    2fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2fa6:	b003      	add	sp, #12
    2fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nvmc_wait_ready();
    2faa:	f7ff fe3b 	bl	2c24 <nvmc_wait_ready>
				UNALIGNED_GET((u32_t *)w_ctx->data_addr);
    2fae:	6823      	ldr	r3, [r4, #0]
    2fb0:	681a      	ldr	r2, [r3, #0]
		*(u32_t *)w_ctx->flash_addr =
    2fb2:	6863      	ldr	r3, [r4, #4]
    2fb4:	601a      	str	r2, [r3, #0]
	w_ctx->flash_addr += shift;
    2fb6:	6863      	ldr	r3, [r4, #4]
    2fb8:	3304      	adds	r3, #4
    2fba:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    2fbc:	6823      	ldr	r3, [r4, #0]
    2fbe:	3304      	adds	r3, #4
    2fc0:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    2fc2:	68a3      	ldr	r3, [r4, #8]
    2fc4:	3b04      	subs	r3, #4
    2fc6:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    2fc8:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2fca:	3601      	adds	r6, #1
		if (w_ctx->enable_time_limit) {
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d0a0      	beq.n	2f12 <write_op+0x1a>
			ticks_diff = ticker_ticks_now_get() - ticks_begin;
    2fd0:	f00d fe62 	bl	10c98 <ticker_ticks_now_get>
    2fd4:	1b40      	subs	r0, r0, r5
			if (ticks_diff + ticks_diff/i > FLASH_SLOT) {
    2fd6:	fbb0 f3f6 	udiv	r3, r0, r6
    2fda:	4418      	add	r0, r3
    2fdc:	42b8      	cmp	r0, r7
    2fde:	d998      	bls.n	2f12 <write_op+0x1a>
    2fe0:	e7dd      	b.n	2f9e <write_op+0xa6>
    2fe2:	bf00      	nop
    2fe4:	00015e64 	.word	0x00015e64

00002fe8 <flash_nrf5_write>:
{
    2fe8:	b570      	push	{r4, r5, r6, lr}
    2fea:	460d      	mov	r5, r1
    2fec:	b088      	sub	sp, #32
	if (!is_addr_valid(addr, len)) {
    2fee:	4619      	mov	r1, r3
    2ff0:	4628      	mov	r0, r5
{
    2ff2:	4616      	mov	r6, r2
    2ff4:	461c      	mov	r4, r3
	if (!is_addr_valid(addr, len)) {
    2ff6:	f7ff fe07 	bl	2c08 <is_addr_valid>
    2ffa:	b328      	cbz	r0, 3048 <flash_nrf5_write+0x60>
	if (!len) {
    2ffc:	b1dc      	cbz	r4, 3036 <flash_nrf5_write+0x4e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2ffe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3002:	4813      	ldr	r0, [pc, #76]	; (3050 <flash_nrf5_write+0x68>)
    3004:	f015 fb8a 	bl	1871c <_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
    3008:	2000      	movs	r0, #0
    300a:	f00d fce1 	bl	109d0 <ticker_is_initialized>
    300e:	ab04      	add	r3, sp, #16
	struct write_context context = {
    3010:	9604      	str	r6, [sp, #16]
    3012:	9505      	str	r5, [sp, #20]
    3014:	9406      	str	r4, [sp, #24]
	if (ticker_is_initialized(0)) {
    3016:	b188      	cbz	r0, 303c <flash_nrf5_write+0x54>
	struct write_context context = {
    3018:	2201      	movs	r2, #1
    301a:	f88d 201c 	strb.w	r2, [sp, #28]
	struct flash_op_desc flash_op_desc = {
    301e:	2200      	movs	r2, #0
    3020:	9203      	str	r2, [sp, #12]
	return  work_in_time_slice(&flash_op_desc);
    3022:	a801      	add	r0, sp, #4
	struct flash_op_desc flash_op_desc = {
    3024:	4a0b      	ldr	r2, [pc, #44]	; (3054 <flash_nrf5_write+0x6c>)
    3026:	9201      	str	r2, [sp, #4]
    3028:	9302      	str	r3, [sp, #8]
	return  work_in_time_slice(&flash_op_desc);
    302a:	f7ff fe47 	bl	2cbc <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF5_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF5_RADIO_SYNC */
	};

	return write_op(&context);
    302e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3030:	4807      	ldr	r0, [pc, #28]	; (3050 <flash_nrf5_write+0x68>)
    3032:	f015 fb31 	bl	18698 <_impl_k_sem_give>
}
    3036:	4620      	mov	r0, r4
    3038:	b008      	add	sp, #32
    303a:	bd70      	pop	{r4, r5, r6, pc}
	struct write_context context = {
    303c:	f88d 001c 	strb.w	r0, [sp, #28]
	return write_op(&context);
    3040:	4618      	mov	r0, r3
    3042:	f7ff ff59 	bl	2ef8 <write_op>
    3046:	e7f2      	b.n	302e <flash_nrf5_write+0x46>
		return -EINVAL;
    3048:	f06f 0415 	mvn.w	r4, #21
    304c:	e7f3      	b.n	3036 <flash_nrf5_write+0x4e>
    304e:	bf00      	nop
    3050:	20000050 	.word	0x20000050
    3054:	00002ef9 	.word	0x00002ef9

00003058 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3058:	6803      	ldr	r3, [r0, #0]
    305a:	689b      	ldr	r3, [r3, #8]
    305c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    305e:	6883      	ldr	r3, [r0, #8]
{
    3060:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    3062:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    3064:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    3066:	fa24 f300 	lsr.w	r3, r4, r0
    306a:	07db      	lsls	r3, r3, #31
    306c:	d507      	bpl.n	307e <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    306e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    3072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3076:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    307a:	428b      	cmp	r3, r1
    307c:	d004      	beq.n	3088 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    307e:	3001      	adds	r0, #1
    3080:	2808      	cmp	r0, #8
    3082:	d1f0      	bne.n	3066 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    3084:	f06f 0012 	mvn.w	r0, #18
}
    3088:	bd10      	pop	{r4, pc}

0000308a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    308a:	6800      	ldr	r0, [r0, #0]
    308c:	6880      	ldr	r0, [r0, #8]
    308e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    3090:	b941      	cbnz	r1, 30a4 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    3092:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    3096:	fa21 f202 	lsr.w	r2, r1, r2
    309a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    309e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    30a0:	2000      	movs	r0, #0
    30a2:	4770      	bx	lr
		*value = gpio->IN;
    30a4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    30a8:	e7f9      	b.n	309e <gpio_nrf5_read+0x14>

000030aa <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    30aa:	6800      	ldr	r0, [r0, #0]
    30ac:	6880      	ldr	r0, [r0, #8]
    30ae:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    30b0:	b949      	cbnz	r1, 30c6 <gpio_nrf5_write+0x1c>
    30b2:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    30b4:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    30b6:	b11b      	cbz	r3, 30c0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    30b8:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    30bc:	2000      	movs	r0, #0
    30be:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    30c0:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    30c4:	e7fa      	b.n	30bc <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    30c6:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    30ca:	e7f7      	b.n	30bc <gpio_nrf5_write+0x12>

000030cc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    30cc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    30ce:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    30d0:	b13a      	cbz	r2, 30e2 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    30d2:	681a      	ldr	r2, [r3, #0]
    30d4:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    30d6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    30d8:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    30da:	b902      	cbnz	r2, 30de <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    30dc:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    30de:	2000      	movs	r0, #0
    30e0:	bd10      	pop	{r4, pc}
    30e2:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    30e4:	2800      	cmp	r0, #0
    30e6:	d0fa      	beq.n	30de <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    30e8:	4281      	cmp	r1, r0
    30ea:	d10e      	bne.n	310a <gpio_nrf5_manage_callback+0x3e>
    30ec:	685c      	ldr	r4, [r3, #4]
    30ee:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    30f0:	b932      	cbnz	r2, 3100 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    30f2:	42a1      	cmp	r1, r4
		list->head = node->next;
    30f4:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    30f6:	d100      	bne.n	30fa <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    30f8:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    30fa:	2300      	movs	r3, #0
    30fc:	600b      	str	r3, [r1, #0]
    30fe:	e7ee      	b.n	30de <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    3100:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    3102:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    3104:	bf08      	it	eq
    3106:	605a      	streq	r2, [r3, #4]
    3108:	e7f7      	b.n	30fa <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    310a:	4602      	mov	r2, r0
    310c:	6800      	ldr	r0, [r0, #0]
    310e:	e7e9      	b.n	30e4 <gpio_nrf5_manage_callback+0x18>

00003110 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    3110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3112:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3114:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3116:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3118:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    311a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    311c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    311e:	b9a1      	cbnz	r1, 314a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    3120:	4621      	mov	r1, r4
    3122:	f7ff ff99 	bl	3058 <gpiote_find_channel>
		if (i < 0) {
    3126:	2800      	cmp	r0, #0
    3128:	db11      	blt.n	314e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    312a:	68ba      	ldr	r2, [r7, #8]
    312c:	2301      	movs	r3, #1
    312e:	fa03 f404 	lsl.w	r4, r3, r4
    3132:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    3134:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    3138:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    313c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    313e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    3142:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    3146:	4628      	mov	r0, r5
    3148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    314a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003150 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    3150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3152:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3154:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    3156:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3158:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    315a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    315c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    315e:	b989      	cbnz	r1, 3184 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    3160:	4621      	mov	r1, r4
    3162:	f7ff ff79 	bl	3058 <gpiote_find_channel>
		if (i < 0) {
    3166:	2800      	cmp	r0, #0
    3168:	db0e      	blt.n	3188 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    316a:	68b2      	ldr	r2, [r6, #8]
    316c:	2301      	movs	r3, #1
    316e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    3172:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    3176:	ea22 0404 	bic.w	r4, r2, r4
    317a:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    317c:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    3180:	4628      	mov	r0, r5
    3182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    3184:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    3188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000318a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    318a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    318c:	2200      	movs	r2, #0
    318e:	2101      	movs	r1, #1
    3190:	2006      	movs	r0, #6
    3192:	f7fd fe31 	bl	df8 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    3196:	2006      	movs	r0, #6
    3198:	f7fd fe04 	bl	da4 <_arch_irq_enable>

	return 0;
}
    319c:	2000      	movs	r0, #0
    319e:	bd08      	pop	{r3, pc}

000031a0 <gpio_nrf5_port_isr>:
{
    31a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    31a2:	6803      	ldr	r3, [r0, #0]
{
    31a4:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    31a6:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    31a8:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    31aa:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    31ac:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    31ae:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    31b0:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    31b2:	2701      	movs	r7, #1
    31b4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    31b8:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    31bc:	f1be 0f00 	cmp.w	lr, #0
    31c0:	d008      	beq.n	31d4 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    31c2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    31c6:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    31ca:	f3c1 2104 	ubfx	r1, r1, #8, #5
    31ce:	fa07 f101 	lsl.w	r1, r7, r1
    31d2:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    31d4:	3201      	adds	r2, #1
    31d6:	2a08      	cmp	r2, #8
    31d8:	d1ec      	bne.n	31b4 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    31da:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    31dc:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    31de:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    31e0:	f7fd fdee 	bl	dc0 <_arch_irq_disable>
    31e4:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    31e6:	b924      	cbnz	r4, 31f2 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    31e8:	2006      	movs	r0, #6
}
    31ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    31ee:	f7fd bdd9 	b.w	da4 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    31f2:	68a3      	ldr	r3, [r4, #8]
    31f4:	421d      	tst	r5, r3
    31f6:	d0f5      	beq.n	31e4 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    31f8:	6863      	ldr	r3, [r4, #4]
    31fa:	462a      	mov	r2, r5
    31fc:	4621      	mov	r1, r4
    31fe:	4630      	mov	r0, r6
    3200:	4798      	blx	r3
    3202:	e7ef      	b.n	31e4 <gpio_nrf5_port_isr+0x44>

00003204 <gpio_nrf5_config>:
{
    3204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3208:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    320a:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    320c:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    320e:	6892      	ldr	r2, [r2, #8]
{
    3210:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    3212:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    3214:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    3216:	b119      	cbz	r1, 3220 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    3218:	f06f 0022 	mvn.w	r0, #34	; 0x22
    321c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3220:	f403 7240 	and.w	r2, r3, #768	; 0x300
    3224:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    3228:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    322c:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    3230:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    3234:	d056      	beq.n	32e4 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    3236:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    323a:	bf0c      	ite	eq
    323c:	2204      	moveq	r2, #4
    323e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    3240:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    3244:	bf08      	it	eq
    3246:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    324a:	f013 0f01 	tst.w	r3, #1
    324e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3318 <gpio_nrf5_config+0x114>
    3252:	ea4f 0181 	mov.w	r1, r1, lsl #2
    3256:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    325a:	d04e      	beq.n	32fa <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    325c:	2a0c      	cmp	r2, #12
    325e:	d143      	bne.n	32e8 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    3260:	f04f 0e01 	mov.w	lr, #1
    3264:	fa0e fe04 	lsl.w	lr, lr, r4
    3268:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    326c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    326e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    3272:	f041 0103 	orr.w	r1, r1, #3
    3276:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    3278:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    327c:	f013 0002 	ands.w	r0, r3, #2
    3280:	d047      	beq.n	3312 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    3282:	0699      	lsls	r1, r3, #26
    3284:	d5c8      	bpl.n	3218 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    3286:	065a      	lsls	r2, r3, #25
    3288:	d43e      	bmi.n	3308 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    328a:	f013 0f04 	tst.w	r3, #4
    328e:	bf14      	ite	ne
    3290:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    3294:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	f7fd f82f 	bl	2fc <__popcountsi2>
    329e:	2808      	cmp	r0, #8
    32a0:	d035      	beq.n	330e <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    32a2:	4621      	mov	r1, r4
    32a4:	4640      	mov	r0, r8
    32a6:	f7ff fed7 	bl	3058 <gpiote_find_channel>
		if (i < 0) {
    32aa:	2800      	cmp	r0, #0
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	da08      	bge.n	32c2 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    32b0:	43da      	mvns	r2, r3
    32b2:	fa92 f0a2 	rbit	r0, r2
    32b6:	2a00      	cmp	r2, #0
    32b8:	fab0 f080 	clz	r0, r0
    32bc:	bf08      	it	eq
    32be:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    32c2:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    32c4:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    32c6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    32ca:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    32cc:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    32d0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    32d4:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    32d6:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    32d8:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    32da:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    32de:	2000      	movs	r0, #0
    32e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    32e4:	220c      	movs	r2, #12
    32e6:	e7ab      	b.n	3240 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    32e8:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    32ea:	bf02      	ittt	eq
    32ec:	f04f 0e01 	moveq.w	lr, #1
    32f0:	fa0e fe04 	lsleq.w	lr, lr, r4
    32f4:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    32f8:	e7b8      	b.n	326c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    32fa:	4449      	add	r1, r9
    32fc:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    3300:	430a      	orrs	r2, r1
    3302:	ea42 020e 	orr.w	r2, r2, lr
    3306:	e7b7      	b.n	3278 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    3308:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    330c:	e7c4      	b.n	3298 <gpio_nrf5_config+0x94>
			return -EIO;
    330e:	f06f 0004 	mvn.w	r0, #4
}
    3312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3316:	bf00      	nop
    3318:	00019c90 	.word	0x00019c90

0000331c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    331c:	6803      	ldr	r3, [r0, #0]
    331e:	689b      	ldr	r3, [r3, #8]
    3320:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    3322:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    3326:	b132      	cbz	r2, 3336 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    3328:	2000      	movs	r0, #0
    332a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    332e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    3332:	700b      	strb	r3, [r1, #0]

	return 0;
    3334:	4770      	bx	lr
		return -1;
    3336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    333a:	4770      	bx	lr

0000333c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    333c:	6803      	ldr	r3, [r0, #0]
    333e:	689b      	ldr	r3, [r3, #8]
    3340:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    3342:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    3346:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    334a:	2a00      	cmp	r2, #0
    334c:	d0fb      	beq.n	3346 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    334e:	2200      	movs	r2, #0
    3350:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    3354:	4608      	mov	r0, r1
    3356:	4770      	bx	lr

00003358 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    3358:	6803      	ldr	r3, [r0, #0]
    335a:	689b      	ldr	r3, [r3, #8]
    335c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    335e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    3362:	b118      	cbz	r0, 336c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    3364:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    3368:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    336c:	f000 000f 	and.w	r0, r0, #15
    3370:	4770      	bx	lr
	...

00003374 <uart_nrf5_init>:
{
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    3376:	6803      	ldr	r3, [r0, #0]
    3378:	689b      	ldr	r3, [r3, #8]
{
    337a:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    337c:	4818      	ldr	r0, [pc, #96]	; (33e0 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    337e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    3380:	f014 fcc2 	bl	17d08 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    3384:	6843      	ldr	r3, [r0, #4]
    3386:	4606      	mov	r6, r0
    3388:	681f      	ldr	r7, [r3, #0]
    338a:	220d      	movs	r2, #13
    338c:	f240 1301 	movw	r3, #257	; 0x101
    3390:	2100      	movs	r1, #0
    3392:	47b8      	blx	r7
    3394:	6873      	ldr	r3, [r6, #4]
    3396:	681f      	ldr	r7, [r3, #0]
    3398:	2300      	movs	r3, #0
    339a:	4619      	mov	r1, r3
    339c:	220f      	movs	r2, #15
    339e:	4630      	mov	r0, r6
    33a0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    33a2:	230d      	movs	r3, #13
    33a4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    33a8:	230f      	movs	r3, #15
    33aa:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    33ae:	68ab      	ldr	r3, [r5, #8]
    33b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    33b4:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    33b6:	682b      	ldr	r3, [r5, #0]
    33b8:	689b      	ldr	r3, [r3, #8]
    33ba:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    33bc:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    33c0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    33c4:	2304      	movs	r3, #4
    33c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    33ca:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    33cc:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    33ce:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    33d2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    33d6:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    33d8:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    33da:	4b02      	ldr	r3, [pc, #8]	; (33e4 <uart_nrf5_init+0x70>)
    33dc:	606b      	str	r3, [r5, #4]
}
    33de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33e0:	00019cf8 	.word	0x00019cf8
    33e4:	00019d08 	.word	0x00019d08

000033e8 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    33e8:	4b08      	ldr	r3, [pc, #32]	; (340c <rtc_compare_set+0x24>)
    33ea:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    33ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    33f2:	1ac0      	subs	r0, r0, r3
    33f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33f8:	4b05      	ldr	r3, [pc, #20]	; (3410 <rtc_compare_set+0x28>)
    33fa:	3802      	subs	r0, #2
    33fc:	4298      	cmp	r0, r3
    33fe:	bf82      	ittt	hi
    3400:	4b04      	ldrhi	r3, [pc, #16]	; (3414 <rtc_compare_set+0x2c>)
    3402:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    3406:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    340a:	4770      	bx	lr
    340c:	40011000 	.word	0x40011000
    3410:	007ffffd 	.word	0x007ffffd
    3414:	e000e100 	.word	0xe000e100

00003418 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    3418:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    341a:	4b12      	ldr	r3, [pc, #72]	; (3464 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    341c:	4c12      	ldr	r4, [pc, #72]	; (3468 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    341e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    3422:	6822      	ldr	r2, [r4, #0]
    3424:	1a80      	subs	r0, r0, r2
    3426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    342a:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    342e:	d911      	bls.n	3454 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    3430:	490e      	ldr	r1, [pc, #56]	; (346c <rtc_announce_set_next+0x54>)
    3432:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    3434:	f240 1347 	movw	r3, #327	; 0x147
    3438:	fbb0 f0f3 	udiv	r0, r0, r3
    343c:	4288      	cmp	r0, r1
    343e:	bf28      	it	cs
    3440:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    3442:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    3446:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    344a:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    344c:	4b08      	ldr	r3, [pc, #32]	; (3470 <rtc_announce_set_next+0x58>)
    344e:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    3450:	f015 f9a6 	bl	187a0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    3454:	6820      	ldr	r0, [r4, #0]
}
    3456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    345a:	f200 1047 	addw	r0, r0, #327	; 0x147
    345e:	f7ff bfc3 	b.w	33e8 <rtc_compare_set>
    3462:	bf00      	nop
    3464:	40011000 	.word	0x40011000
    3468:	20000094 	.word	0x20000094
    346c:	20000090 	.word	0x20000090
    3470:	20006adc 	.word	0x20006adc

00003474 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    3474:	4b02      	ldr	r3, [pc, #8]	; (3480 <rtc1_nrf5_isr+0xc>)
    3476:	2200      	movs	r2, #0
    3478:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    347c:	f7ff bfcc 	b.w	3418 <rtc_announce_set_next>
    3480:	40011000 	.word	0x40011000

00003484 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    3484:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    3488:	4298      	cmp	r0, r3
    348a:	bf28      	it	cs
    348c:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    348e:	4b05      	ldr	r3, [pc, #20]	; (34a4 <_timer_idle_enter+0x20>)
    3490:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <_timer_idle_enter+0x24>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	f240 1247 	movw	r2, #327	; 0x147
    349a:	fb02 3000 	mla	r0, r2, r0, r3
    349e:	f7ff bfa3 	b.w	33e8 <rtc_compare_set>
    34a2:	bf00      	nop
    34a4:	20000090 	.word	0x20000090
    34a8:	20000094 	.word	0x20000094

000034ac <_timer_idle_exit>:
{
    34ac:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <_timer_idle_exit+0x20>)
    34b0:	2200      	movs	r2, #0
    34b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    34b6:	4b06      	ldr	r3, [pc, #24]	; (34d0 <_timer_idle_exit+0x24>)
    34b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    34bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    34c0:	f7ff ffaa 	bl	3418 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    34c4:	4b03      	ldr	r3, [pc, #12]	; (34d4 <_timer_idle_exit+0x28>)
    34c6:	2201      	movs	r2, #1
    34c8:	601a      	str	r2, [r3, #0]
    34ca:	bd08      	pop	{r3, pc}
    34cc:	40011000 	.word	0x40011000
    34d0:	e000e100 	.word	0xe000e100
    34d4:	20000090 	.word	0x20000090

000034d8 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    34d8:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    34da:	4818      	ldr	r0, [pc, #96]	; (353c <_sys_clock_driver_init+0x64>)
    34dc:	f014 fc14 	bl	17d08 <device_get_binding>
	if (!clock) {
    34e0:	b348      	cbz	r0, 3536 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    34e2:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    34e4:	4d16      	ldr	r5, [pc, #88]	; (3540 <_sys_clock_driver_init+0x68>)
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	2101      	movs	r1, #1
    34ea:	4798      	blx	r3
	rtc_past = 0;
    34ec:	4b15      	ldr	r3, [pc, #84]	; (3544 <_sys_clock_driver_init+0x6c>)
    34ee:	2400      	movs	r4, #0
    34f0:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    34f2:	4b15      	ldr	r3, [pc, #84]	; (3548 <_sys_clock_driver_init+0x70>)
    34f4:	2601      	movs	r6, #1
    34f6:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    34f8:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    34fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    3500:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    3504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3508:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    350c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3510:	4b0e      	ldr	r3, [pc, #56]	; (354c <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    3512:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    351a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    351e:	4631      	mov	r1, r6
    3520:	4622      	mov	r2, r4
    3522:	2011      	movs	r0, #17
    3524:	f7fd fc68 	bl	df8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    3528:	2011      	movs	r0, #17
    352a:	f7fd fc3b 	bl	da4 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    352e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    3530:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    3532:	602e      	str	r6, [r5, #0]
	return 0;
    3534:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    353a:	bd70      	pop	{r4, r5, r6, pc}
    353c:	00019c50 	.word	0x00019c50
    3540:	40011000 	.word	0x40011000
    3544:	20000094 	.word	0x20000094
    3548:	20000090 	.word	0x20000090
    354c:	e000e100 	.word	0xe000e100

00003550 <send_cmd_status>:
		u8_t dhkey[32];
	};
} ecc;

static void send_cmd_status(u16_t opcode, u8_t status)
{
    3550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3554:	4680      	mov	r8, r0
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode %x status %x", opcode, status);

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    3556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    355a:	460f      	mov	r7, r1
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    355c:	f001 fd8c 	bl	5078 <bt_buf_get_cmd_complete>
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3560:	89c3      	ldrh	r3, [r0, #14]
    3562:	4403      	add	r3, r0
    3564:	3313      	adds	r3, #19
    3566:	f023 0303 	bic.w	r3, r3, #3
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    356a:	2501      	movs	r5, #1
	bt_buf_set_type(buf, BT_BUF_EVT);

	hdr = net_buf_add(buf, sizeof(*hdr));
    356c:	f100 0608 	add.w	r6, r0, #8
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    3570:	4604      	mov	r4, r0
    3572:	701d      	strb	r5, [r3, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    3574:	2102      	movs	r1, #2
    3576:	4630      	mov	r0, r6
    3578:	f014 fb04 	bl	17b84 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
    357c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
    357e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
    3580:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
    3582:	7041      	strb	r1, [r0, #1]

	evt = net_buf_add(buf, sizeof(*evt));
    3584:	4630      	mov	r0, r6
    3586:	f014 fafd 	bl	17b84 <net_buf_simple_add>
	evt->ncmd = 1;
    358a:	7045      	strb	r5, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
	evt->status = status;
    358c:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
    358e:	f8a0 8002 	strh.w	r8, [r0, #2]

	bt_recv_prio(buf);
    3592:	4620      	mov	r0, r4
}
    3594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_recv_prio(buf);
    3598:	f001 baf4 	b.w	4b84 <bt_recv_prio>

0000359c <sys_memcpy_swap.constprop.3>:
 *
 * @param dst A valid pointer on a memory area where to copy the data in
 * @param src A valid pointer on a memory area where to copy the data from
 * @param length Size of both dst and src memory areas
 */
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    359c:	f101 0320 	add.w	r3, r1, #32
    35a0:	3801      	subs	r0, #1
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
    35a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    35a6:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
    35aa:	428b      	cmp	r3, r1
    35ac:	d1f9      	bne.n	35a2 <sys_memcpy_swap.constprop.3+0x6>
	}
}
    35ae:	4770      	bx	lr

000035b0 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    35b0:	b580      	push	{r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    35b2:	4e54      	ldr	r6, [pc, #336]	; (3704 <ecc_thread+0x154>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    35b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 371c <ecc_thread+0x16c>
    35b8:	4635      	mov	r5, r6
    35ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    35be:	4640      	mov	r0, r8
    35c0:	f015 f8ac 	bl	1871c <_impl_k_sem_take>
    35c4:	f3bf 8f5b 	dmb	ish
    35c8:	6834      	ldr	r4, [r6, #0]
    35ca:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    35ce:	f014 0401 	ands.w	r4, r4, #1
    35d2:	d04e      	beq.n	3672 <ecc_thread+0xc2>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    35d4:	f8df 9140 	ldr.w	r9, [pc, #320]	; 3718 <ecc_thread+0x168>
    35d8:	4c4b      	ldr	r4, [pc, #300]	; (3708 <ecc_thread+0x158>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    35da:	4f4c      	ldr	r7, [pc, #304]	; (370c <ecc_thread+0x15c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    35dc:	484c      	ldr	r0, [pc, #304]	; (3710 <ecc_thread+0x160>)
    35de:	464a      	mov	r2, r9
    35e0:	4621      	mov	r1, r4
    35e2:	f7fd ff41 	bl	1468 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    35e6:	b3c8      	cbz	r0, 365c <ecc_thread+0xac>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    35e8:	2220      	movs	r2, #32
    35ea:	4639      	mov	r1, r7
    35ec:	4620      	mov	r0, r4
    35ee:	f7fd f81e 	bl	62e <memcmp>
    35f2:	2800      	cmp	r0, #0
    35f4:	d0f2      	beq.n	35dc <ecc_thread+0x2c>
	return 0;
    35f6:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    35f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    35fc:	2001      	movs	r0, #1
    35fe:	f001 fd29 	bl	5054 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3602:	f100 0708 	add.w	r7, r0, #8
    3606:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3608:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    360a:	4638      	mov	r0, r7
    360c:	f014 faba 	bl	17b84 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    3610:	233e      	movs	r3, #62	; 0x3e
    3612:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    3614:	2342      	movs	r3, #66	; 0x42
    3616:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    3618:	2101      	movs	r1, #1
    361a:	4638      	mov	r0, r7
    361c:	f014 fab2 	bl	17b84 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    3620:	2308      	movs	r3, #8
    3622:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    3624:	2141      	movs	r1, #65	; 0x41
    3626:	4638      	mov	r0, r7
    3628:	f014 faac 	bl	17b84 <net_buf_simple_add>
    362c:	4607      	mov	r7, r0
	evt->status = status;
    362e:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    3632:	b1ac      	cbz	r4, 3660 <ecc_thread+0xb0>
		memset(evt->key, 0, sizeof(evt->key));
    3634:	2240      	movs	r2, #64	; 0x40
    3636:	2100      	movs	r1, #0
    3638:	f7fd f83a 	bl	6b0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    363c:	f3bf 8f5b 	dmb	ish
    3640:	e855 3f00 	ldrex	r3, [r5]
    3644:	f023 0301 	bic.w	r3, r3, #1
    3648:	e845 3200 	strex	r2, r3, [r5]
    364c:	2a00      	cmp	r2, #0
    364e:	d1f7      	bne.n	3640 <ecc_thread+0x90>
    3650:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    3654:	4648      	mov	r0, r9
    3656:	f000 ffa7 	bl	45a8 <bt_recv>
    365a:	e7ae      	b.n	35ba <ecc_thread+0xa>
			return BT_HCI_ERR_UNSPECIFIED;
    365c:	241f      	movs	r4, #31
    365e:	e7cb      	b.n	35f8 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    3660:	492b      	ldr	r1, [pc, #172]	; (3710 <ecc_thread+0x160>)
    3662:	f7ff ff9b 	bl	359c <sys_memcpy_swap.constprop.3>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    3666:	492b      	ldr	r1, [pc, #172]	; (3714 <ecc_thread+0x164>)
    3668:	f107 0021 	add.w	r0, r7, #33	; 0x21
    366c:	f7ff ff96 	bl	359c <sys_memcpy_swap.constprop.3>
    3670:	e7e4      	b.n	363c <ecc_thread+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3672:	f3bf 8f5b 	dmb	ish
    3676:	6833      	ldr	r3, [r6, #0]
    3678:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    367c:	079b      	lsls	r3, r3, #30
    367e:	d59c      	bpl.n	35ba <ecc_thread+0xa>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    3680:	4925      	ldr	r1, [pc, #148]	; (3718 <ecc_thread+0x168>)
    3682:	4823      	ldr	r0, [pc, #140]	; (3710 <ecc_thread+0x160>)
    3684:	f7fe feb5 	bl	23f2 <uECC_valid_public_key>
	if (ret < 0) {
    3688:	2800      	cmp	r0, #0
    368a:	db07      	blt.n	369c <ecc_thread+0xec>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    368c:	4a20      	ldr	r2, [pc, #128]	; (3710 <ecc_thread+0x160>)
    368e:	4b22      	ldr	r3, [pc, #136]	; (3718 <ecc_thread+0x168>)
    3690:	f1a2 0120 	sub.w	r1, r2, #32
    3694:	4610      	mov	r0, r2
    3696:	f7fd ff33 	bl	1500 <uECC_shared_secret>
    369a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    369c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    36a0:	2001      	movs	r0, #1
    36a2:	f001 fcd7 	bl	5054 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    36a6:	f100 0708 	add.w	r7, r0, #8
    36aa:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    36ac:	4681      	mov	r9, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    36ae:	4638      	mov	r0, r7
    36b0:	f014 fa68 	bl	17b84 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    36b4:	233e      	movs	r3, #62	; 0x3e
    36b6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    36b8:	2322      	movs	r3, #34	; 0x22
    36ba:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    36bc:	2101      	movs	r1, #1
    36be:	4638      	mov	r0, r7
    36c0:	f014 fa60 	bl	17b84 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    36c4:	2309      	movs	r3, #9
    36c6:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    36c8:	2121      	movs	r1, #33	; 0x21
    36ca:	4638      	mov	r0, r7
    36cc:	f014 fa5a 	bl	17b84 <net_buf_simple_add>
    36d0:	4603      	mov	r3, r0
    36d2:	3001      	adds	r0, #1
	if (ret == TC_CRYPTO_FAIL) {
    36d4:	b984      	cbnz	r4, 36f8 <ecc_thread+0x148>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    36d6:	221f      	movs	r2, #31
    36d8:	701a      	strb	r2, [r3, #0]
		memset(evt->dhkey, 0, sizeof(evt->dhkey));
    36da:	4621      	mov	r1, r4
    36dc:	2220      	movs	r2, #32
    36de:	f7fc ffe7 	bl	6b0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    36e2:	f3bf 8f5b 	dmb	ish
    36e6:	e855 3f00 	ldrex	r3, [r5]
    36ea:	f023 0302 	bic.w	r3, r3, #2
    36ee:	e845 3200 	strex	r2, r3, [r5]
    36f2:	2a00      	cmp	r2, #0
    36f4:	d0ac      	beq.n	3650 <ecc_thread+0xa0>
    36f6:	e7f6      	b.n	36e6 <ecc_thread+0x136>
		evt->status = 0;
    36f8:	2200      	movs	r2, #0
    36fa:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    36fc:	4904      	ldr	r1, [pc, #16]	; (3710 <ecc_thread+0x160>)
    36fe:	f7ff ff4d 	bl	359c <sys_memcpy_swap.constprop.3>
    3702:	e7ee      	b.n	36e2 <ecc_thread+0x132>
    3704:	20000160 	.word	0x20000160
    3708:	20000098 	.word	0x20000098
    370c:	00019dd0 	.word	0x00019dd0
    3710:	200000b8 	.word	0x200000b8
    3714:	200000d8 	.word	0x200000d8
    3718:	00019d20 	.word	0x00019d20
    371c:	20006b64 	.word	0x20006b64

00003720 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    3720:	b570      	push	{r4, r5, r6, lr}
    3722:	89c3      	ldrh	r3, [r0, #14]
    3724:	4403      	add	r3, r0
    3726:	3313      	adds	r3, #19
    3728:	f023 0303 	bic.w	r3, r3, #3
    372c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	b9ab      	cbnz	r3, 375e <bt_hci_ecc_send+0x3e>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    3732:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    3734:	881a      	ldrh	r2, [r3, #0]
    3736:	f242 0125 	movw	r1, #8229	; 0x2025
    373a:	428a      	cmp	r2, r1
    373c:	d017      	beq.n	376e <bt_hci_ecc_send+0x4e>
    373e:	f242 0126 	movw	r1, #8230	; 0x2026
    3742:	428a      	cmp	r2, r1
    3744:	d03d      	beq.n	37c2 <bt_hci_ecc_send+0xa2>
    3746:	f242 0101 	movw	r1, #8193	; 0x2001
    374a:	428a      	cmp	r2, r1
    374c:	d107      	bne.n	375e <bt_hci_ecc_send+0x3e>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    374e:	78da      	ldrb	r2, [r3, #3]
    3750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3754:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    3756:	791a      	ldrb	r2, [r3, #4]
    3758:	f022 0201 	bic.w	r2, r2, #1
    375c:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    375e:	4b34      	ldr	r3, [pc, #208]	; (3830 <bt_hci_ecc_send+0x110>)
    3760:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3764:	4620      	mov	r0, r4
    3766:	68db      	ldr	r3, [r3, #12]
}
    3768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    376c:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    376e:	2103      	movs	r1, #3
    3770:	3008      	adds	r0, #8
    3772:	f014 fa72 	bl	17c5a <net_buf_simple_pull>
	net_buf_unref(buf);
    3776:	4620      	mov	r0, r4
    3778:	f014 f9e4 	bl	17b44 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    377c:	f3bf 8f5b 	dmb	ish
    3780:	4b2c      	ldr	r3, [pc, #176]	; (3834 <bt_hci_ecc_send+0x114>)
    3782:	681a      	ldr	r2, [r3, #0]
    3784:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    3788:	0791      	lsls	r1, r2, #30
    378a:	d506      	bpl.n	379a <bt_hci_ecc_send+0x7a>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    378c:	210c      	movs	r1, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    378e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    3792:	f7ff fedd 	bl	3550 <send_cmd_status>
}
    3796:	2000      	movs	r0, #0
    3798:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    379a:	f3bf 8f5b 	dmb	ish
    379e:	e853 1f00 	ldrex	r1, [r3]
    37a2:	f041 0201 	orr.w	r2, r1, #1
    37a6:	e843 2000 	strex	r0, r2, [r3]
    37aa:	2800      	cmp	r0, #0
    37ac:	d1f7      	bne.n	379e <bt_hci_ecc_send+0x7e>
    37ae:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    37b2:	f011 0401 	ands.w	r4, r1, #1
    37b6:	d1e9      	bne.n	378c <bt_hci_ecc_send+0x6c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    37b8:	481f      	ldr	r0, [pc, #124]	; (3838 <bt_hci_ecc_send+0x118>)
    37ba:	f014 ff6d 	bl	18698 <_impl_k_sem_give>
		status = BT_HCI_ERR_SUCCESS;
    37be:	4621      	mov	r1, r4
    37c0:	e7e5      	b.n	378e <bt_hci_ecc_send+0x6e>
			net_buf_pull(buf, sizeof(*chdr));
    37c2:	2103      	movs	r1, #3
    37c4:	3008      	adds	r0, #8
    37c6:	f014 fa48 	bl	17c5a <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    37ca:	f3bf 8f5b 	dmb	ish
    37ce:	4b19      	ldr	r3, [pc, #100]	; (3834 <bt_hci_ecc_send+0x114>)
    37d0:	681a      	ldr	r2, [r3, #0]
    37d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    37d6:	07d2      	lsls	r2, r2, #31
    37d8:	d507      	bpl.n	37ea <bt_hci_ecc_send+0xca>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    37da:	250c      	movs	r5, #12
	net_buf_unref(buf);
    37dc:	4620      	mov	r0, r4
    37de:	f014 f9b1 	bl	17b44 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    37e2:	4629      	mov	r1, r5
    37e4:	f242 0026 	movw	r0, #8230	; 0x2026
    37e8:	e7d3      	b.n	3792 <bt_hci_ecc_send+0x72>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    37ea:	89a2      	ldrh	r2, [r4, #12]
    37ec:	2a3f      	cmp	r2, #63	; 0x3f
    37ee:	d91c      	bls.n	382a <bt_hci_ecc_send+0x10a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    37f0:	f3bf 8f5b 	dmb	ish
    37f4:	e853 5f00 	ldrex	r5, [r3]
    37f8:	f045 0202 	orr.w	r2, r5, #2
    37fc:	e843 2100 	strex	r1, r2, [r3]
    3800:	2900      	cmp	r1, #0
    3802:	d1f7      	bne.n	37f4 <bt_hci_ecc_send+0xd4>
    3804:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    3808:	f015 0502 	ands.w	r5, r5, #2
    380c:	d1e5      	bne.n	37da <bt_hci_ecc_send+0xba>
	cmd = (void *)buf->data;
    380e:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    3810:	480a      	ldr	r0, [pc, #40]	; (383c <bt_hci_ecc_send+0x11c>)
    3812:	4631      	mov	r1, r6
    3814:	f7ff fec2 	bl	359c <sys_memcpy_swap.constprop.3>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    3818:	f106 0120 	add.w	r1, r6, #32
    381c:	4808      	ldr	r0, [pc, #32]	; (3840 <bt_hci_ecc_send+0x120>)
    381e:	f7ff febd 	bl	359c <sys_memcpy_swap.constprop.3>
    3822:	4805      	ldr	r0, [pc, #20]	; (3838 <bt_hci_ecc_send+0x118>)
    3824:	f014 ff38 	bl	18698 <_impl_k_sem_give>
    3828:	e7d8      	b.n	37dc <bt_hci_ecc_send+0xbc>
		status = BT_HCI_ERR_INVALID_PARAM;
    382a:	2512      	movs	r5, #18
    382c:	e7d6      	b.n	37dc <bt_hci_ecc_send+0xbc>
    382e:	bf00      	nop
    3830:	20005e90 	.word	0x20005e90
    3834:	20000160 	.word	0x20000160
    3838:	20006b64 	.word	0x20006b64
    383c:	200000b8 	.word	0x200000b8
    3840:	200000d8 	.word	0x200000d8

00003844 <default_CSPRNG>:

int default_CSPRNG(u8_t *dst, unsigned int len)
{
    3844:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
    3846:	f00d fa67 	bl	10d18 <bt_rand>
}
    384a:	fab0 f080 	clz	r0, r0
    384e:	0940      	lsrs	r0, r0, #5
    3850:	bd08      	pop	{r3, pc}
	...

00003854 <bt_hci_ecc_init>:

void bt_hci_ecc_init(void)
{
    3854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    3856:	2300      	movs	r3, #0
    3858:	220a      	movs	r2, #10
    385a:	9305      	str	r3, [sp, #20]
    385c:	9304      	str	r3, [sp, #16]
    385e:	9203      	str	r2, [sp, #12]
    3860:	9302      	str	r3, [sp, #8]
    3862:	9301      	str	r3, [sp, #4]
    3864:	9300      	str	r3, [sp, #0]
    3866:	f44f 6280 	mov.w	r2, #1024	; 0x400
    386a:	4b04      	ldr	r3, [pc, #16]	; (387c <bt_hci_ecc_init+0x28>)
    386c:	4904      	ldr	r1, [pc, #16]	; (3880 <bt_hci_ecc_init+0x2c>)
    386e:	4805      	ldr	r0, [pc, #20]	; (3884 <bt_hci_ecc_init+0x30>)
    3870:	f015 f930 	bl	18ad4 <_impl_k_thread_create>
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
}
    3874:	b007      	add	sp, #28
    3876:	f85d fb04 	ldr.w	pc, [sp], #4
    387a:	bf00      	nop
    387c:	000035b1 	.word	0x000035b1
    3880:	20001e50 	.word	0x20001e50
    3884:	200000f8 	.word	0x200000f8

00003888 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3888:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    388a:	7802      	ldrb	r2, [r0, #0]
    388c:	2a01      	cmp	r2, #1
{
    388e:	4604      	mov	r4, r0
    3890:	460b      	mov	r3, r1
	switch (src->type) {
    3892:	d017      	beq.n	38c4 <uuid_to_uuid128+0x3c>
    3894:	d303      	bcc.n	389e <uuid_to_uuid128+0x16>
    3896:	2a02      	cmp	r2, #2
    3898:	d02c      	beq.n	38f4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    389a:	bcf0      	pop	{r4, r5, r6, r7}
    389c:	4770      	bx	lr
		*dst = uuid128_base;
    389e:	4a18      	ldr	r2, [pc, #96]	; (3900 <uuid_to_uuid128+0x78>)
    38a0:	460d      	mov	r5, r1
    38a2:	f102 0710 	add.w	r7, r2, #16
    38a6:	6810      	ldr	r0, [r2, #0]
    38a8:	6851      	ldr	r1, [r2, #4]
    38aa:	462e      	mov	r6, r5
    38ac:	c603      	stmia	r6!, {r0, r1}
    38ae:	3208      	adds	r2, #8
    38b0:	42ba      	cmp	r2, r7
    38b2:	4635      	mov	r5, r6
    38b4:	d1f7      	bne.n	38a6 <uuid_to_uuid128+0x1e>
    38b6:	7812      	ldrb	r2, [r2, #0]
    38b8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    38ba:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    38bc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    38be:	0a12      	lsrs	r2, r2, #8
    38c0:	739a      	strb	r2, [r3, #14]
    38c2:	e7ea      	b.n	389a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    38c4:	4a0e      	ldr	r2, [pc, #56]	; (3900 <uuid_to_uuid128+0x78>)
    38c6:	460d      	mov	r5, r1
    38c8:	f102 0710 	add.w	r7, r2, #16
    38cc:	6810      	ldr	r0, [r2, #0]
    38ce:	6851      	ldr	r1, [r2, #4]
    38d0:	462e      	mov	r6, r5
    38d2:	c603      	stmia	r6!, {r0, r1}
    38d4:	3208      	adds	r2, #8
    38d6:	42ba      	cmp	r2, r7
    38d8:	4635      	mov	r5, r6
    38da:	d1f7      	bne.n	38cc <uuid_to_uuid128+0x44>
    38dc:	7812      	ldrb	r2, [r2, #0]
    38de:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    38e0:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    38e2:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    38e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    38e8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    38ea:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    38ec:	0a12      	lsrs	r2, r2, #8
    38ee:	7399      	strb	r1, [r3, #14]
    38f0:	741a      	strb	r2, [r3, #16]
    38f2:	e7d2      	b.n	389a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    38f4:	4601      	mov	r1, r0
    38f6:	2211      	movs	r2, #17
    38f8:	4618      	mov	r0, r3
}
    38fa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    38fc:	f7fc beac 	b.w	658 <memcpy>
    3900:	00019df0 	.word	0x00019df0

00003904 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3904:	b510      	push	{r4, lr}
    3906:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3908:	7801      	ldrb	r1, [r0, #0]
    390a:	7822      	ldrb	r2, [r4, #0]
    390c:	428a      	cmp	r2, r1
{
    390e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    3910:	d00e      	beq.n	3930 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    3912:	4669      	mov	r1, sp
    3914:	f7ff ffb8 	bl	3888 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3918:	a905      	add	r1, sp, #20
    391a:	4620      	mov	r0, r4
    391c:	f7ff ffb4 	bl	3888 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    3920:	2210      	movs	r2, #16
    3922:	f10d 0115 	add.w	r1, sp, #21
    3926:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    392a:	f7fc fe80 	bl	62e <memcmp>
    392e:	e00a      	b.n	3946 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    3930:	2a01      	cmp	r2, #1
    3932:	d00a      	beq.n	394a <bt_uuid_cmp+0x46>
    3934:	d304      	bcc.n	3940 <bt_uuid_cmp+0x3c>
    3936:	2a02      	cmp	r2, #2
    3938:	d00a      	beq.n	3950 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    393a:	f06f 0015 	mvn.w	r0, #21
    393e:	e002      	b.n	3946 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3940:	8840      	ldrh	r0, [r0, #2]
    3942:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3944:	1ac0      	subs	r0, r0, r3
}
    3946:	b00a      	add	sp, #40	; 0x28
    3948:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    394a:	6840      	ldr	r0, [r0, #4]
    394c:	6863      	ldr	r3, [r4, #4]
    394e:	e7f9      	b.n	3944 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3950:	2210      	movs	r2, #16
    3952:	1c61      	adds	r1, r4, #1
    3954:	3001      	adds	r0, #1
    3956:	e7e8      	b.n	392a <bt_uuid_cmp+0x26>

00003958 <net_buf_user_data>:
    3958:	89c3      	ldrh	r3, [r0, #14]
    395a:	4418      	add	r0, r3
    395c:	3013      	adds	r0, #19
}
    395e:	f020 0003 	bic.w	r0, r0, #3
    3962:	4770      	bx	lr

00003964 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3964:	2207      	movs	r2, #7
    3966:	f7fc be77 	b.w	658 <memcpy>

0000396a <atomic_or>:
{
    396a:	b500      	push	{lr}
}
    396c:	f3bf 8f5b 	dmb	ish
    3970:	e850 3f00 	ldrex	r3, [r0]
    3974:	ea43 0201 	orr.w	r2, r3, r1
    3978:	e840 2e00 	strex	lr, r2, [r0]
    397c:	f1be 0f00 	cmp.w	lr, #0
    3980:	d1f6      	bne.n	3970 <atomic_or+0x6>
    3982:	f3bf 8f5b 	dmb	ish
    3986:	4618      	mov	r0, r3
    3988:	f85d fb04 	ldr.w	pc, [sp], #4

0000398c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    398c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    398e:	f3bf 8f5b 	dmb	ish
    3992:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    3996:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    399a:	f001 011f 	and.w	r1, r1, #31
    399e:	4108      	asrs	r0, r1
}
    39a0:	f000 0001 	and.w	r0, r0, #1
    39a4:	4770      	bx	lr

000039a6 <atomic_and>:
{
    39a6:	b500      	push	{lr}
}
    39a8:	f3bf 8f5b 	dmb	ish
    39ac:	e850 3f00 	ldrex	r3, [r0]
    39b0:	ea03 0201 	and.w	r2, r3, r1
    39b4:	e840 2e00 	strex	lr, r2, [r0]
    39b8:	f1be 0f00 	cmp.w	lr, #0
    39bc:	d1f6      	bne.n	39ac <atomic_and+0x6>
    39be:	f3bf 8f5b 	dmb	ish
    39c2:	4618      	mov	r0, r3
    39c4:	f85d fb04 	ldr.w	pc, [sp], #4

000039c8 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    39c8:	78c3      	ldrb	r3, [r0, #3]
    39ca:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    39cc:	f241 3288 	movw	r2, #5000	; 0x1388
    39d0:	f100 0170 	add.w	r1, r0, #112	; 0x70
    39d4:	bf08      	it	eq
    39d6:	2200      	moveq	r2, #0
    39d8:	4801      	ldr	r0, [pc, #4]	; (39e0 <update_conn_param+0x18>)
    39da:	f015 b9d5 	b.w	18d88 <k_delayed_work_submit_to_queue>
    39de:	bf00      	nop
    39e0:	20001dd8 	.word	0x20001dd8

000039e4 <hci_cmd_done.isra.15>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    39e4:	b538      	push	{r3, r4, r5, lr}
    39e6:	4605      	mov	r5, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    39e8:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    39ea:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    39ec:	f013 ffd8 	bl	179a0 <net_buf_pool_get>
    39f0:	4b08      	ldr	r3, [pc, #32]	; (3a14 <hci_cmd_done.isra.15+0x30>)
    39f2:	4283      	cmp	r3, r0
    39f4:	d10d      	bne.n	3a12 <hci_cmd_done.isra.15+0x2e>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    39f6:	4620      	mov	r0, r4
    39f8:	f7ff ffae 	bl	3958 <net_buf_user_data>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    39fc:	6843      	ldr	r3, [r0, #4]
    39fe:	b143      	cbz	r3, 3a12 <hci_cmd_done.isra.15+0x2e>
		cmd(buf)->status = status;
    3a00:	7045      	strb	r5, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    3a02:	4620      	mov	r0, r4
    3a04:	f7ff ffa8 	bl	3958 <net_buf_user_data>
	}
}
    3a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3a0c:	6840      	ldr	r0, [r0, #4]
    3a0e:	f014 be43 	b.w	18698 <_impl_k_sem_give>
    3a12:	bd38      	pop	{r3, r4, r5, pc}
    3a14:	20006c28 	.word	0x20006c28

00003a18 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    3a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    3a1c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3afc <hci_tx_thread+0xe4>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3a20:	4c34      	ldr	r4, [pc, #208]	; (3af4 <hci_tx_thread+0xdc>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3a22:	f898 300d 	ldrb.w	r3, [r8, #13]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BT_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    3a26:	4834      	ldr	r0, [pc, #208]	; (3af8 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3a28:	f36f 1307 	bfc	r3, #4, #4
    3a2c:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3a30:	f001 fd7e 	bl	5530 <bt_conn_prepare_events>
    3a34:	1c46      	adds	r6, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    3a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a3a:	4631      	mov	r1, r6
    3a3c:	482f      	ldr	r0, [pc, #188]	; (3afc <hci_tx_thread+0xe4>)
    3a3e:	f015 fbc5 	bl	191cc <k_poll>
		BT_ASSERT(err == 0);
    3a42:	b9b8      	cbnz	r0, 3a74 <hci_tx_thread+0x5c>
    3a44:	4d2d      	ldr	r5, [pc, #180]	; (3afc <hci_tx_thread+0xe4>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3a46:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3b00 <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3a4a:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    3a4e:	b916      	cbnz	r6, 3a56 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3a50:	f014 fd56 	bl	18500 <_impl_k_yield>
    3a54:	e7e5      	b.n	3a22 <hci_tx_thread+0xa>
		switch (ev->state) {
    3a56:	7b6b      	ldrb	r3, [r5, #13]
    3a58:	091b      	lsrs	r3, r3, #4
    3a5a:	2b04      	cmp	r3, #4
    3a5c:	d136      	bne.n	3acc <hci_tx_thread+0xb4>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3a5e:	f895 a00c 	ldrb.w	sl, [r5, #12]
    3a62:	f1ba 0f00 	cmp.w	sl, #0
    3a66:	d134      	bne.n	3ad2 <hci_tx_thread+0xba>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3a68:	4651      	mov	r1, sl
    3a6a:	4658      	mov	r0, fp
    3a6c:	f013 fff4 	bl	17a58 <net_buf_get>
	BT_ASSERT(buf);
    3a70:	4607      	mov	r7, r0
    3a72:	b928      	cbnz	r0, 3a80 <hci_tx_thread+0x68>
    3a74:	4040      	eors	r0, r0
    3a76:	f380 8811 	msr	BASEPRI, r0
    3a7a:	f04f 0004 	mov.w	r0, #4
    3a7e:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3a84:	4648      	mov	r0, r9
    3a86:	f014 fe49 	bl	1871c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3a8a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3a8e:	b118      	cbz	r0, 3a98 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    3a90:	f014 f858 	bl	17b44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3a94:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    3a98:	4638      	mov	r0, r7
    3a9a:	f014 f86f 	bl	17b7c <net_buf_ref>
    3a9e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
    3aa2:	4638      	mov	r0, r7
    3aa4:	f7ff fe3c 	bl	3720 <bt_hci_ecc_send>
	if (err) {
    3aa8:	b180      	cbz	r0, 3acc <hci_tx_thread+0xb4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3aaa:	4648      	mov	r0, r9
    3aac:	f014 fdf4 	bl	18698 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3ab0:	2100      	movs	r1, #0
    3ab2:	201f      	movs	r0, #31
    3ab4:	f7ff ff96 	bl	39e4 <hci_cmd_done.isra.15>
		net_buf_unref(bt_dev.sent_cmd);
    3ab8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3abc:	f014 f842 	bl	17b44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3ac0:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3ac2:	4638      	mov	r0, r7
		bt_dev.sent_cmd = NULL;
    3ac4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    3ac8:	f014 f83c 	bl	17b44 <net_buf_unref>
	for (; count; ev++, count--) {
    3acc:	3514      	adds	r5, #20
    3ace:	3e01      	subs	r6, #1
    3ad0:	e7bd      	b.n	3a4e <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3ad2:	f1ba 0f01 	cmp.w	sl, #1
    3ad6:	d104      	bne.n	3ae2 <hci_tx_thread+0xca>
					conn = CONTAINER_OF(ev->fifo,
    3ad8:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    3ada:	3818      	subs	r0, #24
    3adc:	f001 fc64 	bl	53a8 <bt_conn_notify_tx>
    3ae0:	e7f4      	b.n	3acc <hci_tx_thread+0xb4>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3ae2:	f1ba 0f02 	cmp.w	sl, #2
    3ae6:	d1f1      	bne.n	3acc <hci_tx_thread+0xb4>
					conn = CONTAINER_OF(ev->fifo,
    3ae8:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    3aea:	3828      	subs	r0, #40	; 0x28
    3aec:	f001 ff98 	bl	5a20 <bt_conn_process_tx>
    3af0:	e7ec      	b.n	3acc <hci_tx_thread+0xb4>
    3af2:	bf00      	nop
    3af4:	20005e90 	.word	0x20005e90
    3af8:	20005f8c 	.word	0x20005f8c
    3afc:	20005f78 	.word	0x20005f78
    3b00:	20005f38 	.word	0x20005f38

00003b04 <bt_hci_cmd_create>:
{
    3b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b06:	4605      	mov	r5, r0
    3b08:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3b0a:	480f      	ldr	r0, [pc, #60]	; (3b48 <bt_hci_cmd_create+0x44>)
    3b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b10:	f013 ff62 	bl	179d8 <net_buf_alloc>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b14:	2100      	movs	r1, #0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3b16:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3b18:	f013 ffb7 	bl	17a8a <net_buf_reserve>
	cmd(buf)->type = BT_BUF_CMD;
    3b1c:	4620      	mov	r0, r4
    3b1e:	f7ff ff1b 	bl	3958 <net_buf_user_data>
    3b22:	2200      	movs	r2, #0
    3b24:	7002      	strb	r2, [r0, #0]
	cmd(buf)->opcode = opcode;
    3b26:	4620      	mov	r0, r4
    3b28:	f7ff ff16 	bl	3958 <net_buf_user_data>
    3b2c:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    3b2e:	4620      	mov	r0, r4
    3b30:	f7ff ff12 	bl	3958 <net_buf_user_data>
	hdr = net_buf_add(buf, sizeof(*hdr));
    3b34:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    3b36:	6042      	str	r2, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    3b38:	f104 0008 	add.w	r0, r4, #8
    3b3c:	f014 f822 	bl	17b84 <net_buf_simple_add>
	hdr->param_len = param_len;
    3b40:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    3b42:	8005      	strh	r5, [r0, #0]
}
    3b44:	4620      	mov	r0, r4
    3b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b48:	20006c28 	.word	0x20006c28

00003b4c <bt_hci_cmd_send>:
{
    3b4c:	b538      	push	{r3, r4, r5, lr}
    3b4e:	4605      	mov	r5, r0
	if (!buf) {
    3b50:	460c      	mov	r4, r1
    3b52:	b919      	cbnz	r1, 3b5c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    3b54:	f7ff ffd6 	bl	3b04 <bt_hci_cmd_create>
		if (!buf) {
    3b58:	4604      	mov	r4, r0
    3b5a:	b198      	cbz	r0, 3b84 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3b5c:	f640 4335 	movw	r3, #3125	; 0xc35
    3b60:	429d      	cmp	r5, r3
    3b62:	d109      	bne.n	3b78 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    3b64:	4620      	mov	r0, r4
    3b66:	f7ff fddb 	bl	3720 <bt_hci_ecc_send>
		if (err) {
    3b6a:	4605      	mov	r5, r0
    3b6c:	b110      	cbz	r0, 3b74 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    3b6e:	4620      	mov	r0, r4
    3b70:	f013 ffe8 	bl	17b44 <net_buf_unref>
}
    3b74:	4628      	mov	r0, r5
    3b76:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3b78:	4621      	mov	r1, r4
    3b7a:	4804      	ldr	r0, [pc, #16]	; (3b8c <bt_hci_cmd_send+0x40>)
    3b7c:	f013 ffd4 	bl	17b28 <net_buf_put>
	return 0;
    3b80:	2500      	movs	r5, #0
    3b82:	e7f7      	b.n	3b74 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    3b84:	f06f 0536 	mvn.w	r5, #54	; 0x36
    3b88:	e7f4      	b.n	3b74 <bt_hci_cmd_send+0x28>
    3b8a:	bf00      	nop
    3b8c:	20005f64 	.word	0x20005f64

00003b90 <hci_le_set_phy.isra.25>:
static int hci_le_set_phy(struct bt_conn *conn)
    3b90:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3b92:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3b94:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3b96:	f242 0032 	movw	r0, #8242	; 0x2032
    3b9a:	f7ff ffb3 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3b9e:	4605      	mov	r5, r0
    3ba0:	b198      	cbz	r0, 3bca <hci_le_set_phy.isra.25+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    3ba2:	2107      	movs	r1, #7
    3ba4:	3008      	adds	r0, #8
    3ba6:	f013 ffed 	bl	17b84 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3baa:	8823      	ldrh	r3, [r4, #0]
    3bac:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    3bae:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3bb0:	2302      	movs	r3, #2
	cp->all_phys = 0;
    3bb2:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3bb4:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3bb6:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    3bb8:	7144      	strb	r4, [r0, #5]
    3bba:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    3bbc:	4629      	mov	r1, r5
    3bbe:	f242 0032 	movw	r0, #8242	; 0x2032
    3bc2:	f7ff ffc3 	bl	3b4c <bt_hci_cmd_send>
	return 0;
    3bc6:	4620      	mov	r0, r4
    3bc8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    3bca:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3bce:	bd38      	pop	{r3, r4, r5, pc}

00003bd0 <le_conn_param_neg_reply>:
{
    3bd0:	b570      	push	{r4, r5, r6, lr}
    3bd2:	4606      	mov	r6, r0
    3bd4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    3bd6:	f242 0021 	movw	r0, #8225	; 0x2021
    3bda:	2103      	movs	r1, #3
    3bdc:	f7ff ff92 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3be0:	4604      	mov	r4, r0
    3be2:	b160      	cbz	r0, 3bfe <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3be4:	2103      	movs	r1, #3
    3be6:	3008      	adds	r0, #8
    3be8:	f013 ffcc 	bl	17b84 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3bec:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    3bee:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3bf0:	4621      	mov	r1, r4
    3bf2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    3bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3bfa:	f7ff bfa7 	b.w	3b4c <bt_hci_cmd_send>
}
    3bfe:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c02:	bd70      	pop	{r4, r5, r6, pc}

00003c04 <bt_hci_cmd_send_sync>:
{
    3c04:	b530      	push	{r4, r5, lr}
    3c06:	4615      	mov	r5, r2
    3c08:	b087      	sub	sp, #28
	if (!buf) {
    3c0a:	460c      	mov	r4, r1
    3c0c:	b919      	cbnz	r1, 3c16 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3c0e:	f7ff ff79 	bl	3b04 <bt_hci_cmd_create>
		if (!buf) {
    3c12:	4604      	mov	r4, r0
    3c14:	b348      	cbz	r0, 3c6a <bt_hci_cmd_send_sync+0x66>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3c16:	2201      	movs	r2, #1
    3c18:	2100      	movs	r1, #0
    3c1a:	4668      	mov	r0, sp
    3c1c:	f014 fd32 	bl	18684 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    3c20:	4620      	mov	r0, r4
    3c22:	f7ff fe99 	bl	3958 <net_buf_user_data>
    3c26:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    3c2a:	4620      	mov	r0, r4
    3c2c:	f013 ffa6 	bl	17b7c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3c30:	4621      	mov	r1, r4
    3c32:	480f      	ldr	r0, [pc, #60]	; (3c70 <bt_hci_cmd_send_sync+0x6c>)
    3c34:	f013 ff78 	bl	17b28 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3c38:	f242 7110 	movw	r1, #10000	; 0x2710
    3c3c:	4668      	mov	r0, sp
    3c3e:	f014 fd6d 	bl	1871c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    3c42:	4620      	mov	r0, r4
    3c44:	f7ff fe88 	bl	3958 <net_buf_user_data>
    3c48:	7840      	ldrb	r0, [r0, #1]
    3c4a:	b130      	cbz	r0, 3c5a <bt_hci_cmd_send_sync+0x56>
		net_buf_unref(buf);
    3c4c:	4620      	mov	r0, r4
    3c4e:	f013 ff79 	bl	17b44 <net_buf_unref>
		err = -EIO;
    3c52:	f06f 0004 	mvn.w	r0, #4
}
    3c56:	b007      	add	sp, #28
    3c58:	bd30      	pop	{r4, r5, pc}
		if (rsp) {
    3c5a:	b10d      	cbz	r5, 3c60 <bt_hci_cmd_send_sync+0x5c>
			*rsp = buf;
    3c5c:	602c      	str	r4, [r5, #0]
    3c5e:	e7fa      	b.n	3c56 <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    3c60:	4620      	mov	r0, r4
    3c62:	f013 ff6f 	bl	17b44 <net_buf_unref>
		err = 0;
    3c66:	4628      	mov	r0, r5
    3c68:	e7f5      	b.n	3c56 <bt_hci_cmd_send_sync+0x52>
			return -ENOBUFS;
    3c6a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c6e:	e7f2      	b.n	3c56 <bt_hci_cmd_send_sync+0x52>
    3c70:	20005f64 	.word	0x20005f64

00003c74 <set_random_address>:
{
    3c74:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    3c76:	4d15      	ldr	r5, [pc, #84]	; (3ccc <set_random_address+0x58>)
    3c78:	2206      	movs	r2, #6
    3c7a:	f105 0108 	add.w	r1, r5, #8
    3c7e:	4606      	mov	r6, r0
    3c80:	f7fc fcd5 	bl	62e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3c84:	4604      	mov	r4, r0
    3c86:	b1d8      	cbz	r0, 3cc0 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3c88:	2106      	movs	r1, #6
    3c8a:	f242 0005 	movw	r0, #8197	; 0x2005
    3c8e:	f7ff ff39 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3c92:	4604      	mov	r4, r0
    3c94:	b1b0      	cbz	r0, 3cc4 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    3c96:	2206      	movs	r2, #6
    3c98:	4631      	mov	r1, r6
    3c9a:	3008      	adds	r0, #8
    3c9c:	f013 ff78 	bl	17b90 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3ca0:	4621      	mov	r1, r4
    3ca2:	2200      	movs	r2, #0
    3ca4:	f242 0005 	movw	r0, #8197	; 0x2005
    3ca8:	f7ff ffac 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    3cac:	4604      	mov	r4, r0
    3cae:	b938      	cbnz	r0, 3cc0 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    3cb0:	2206      	movs	r2, #6
    3cb2:	4631      	mov	r1, r6
    3cb4:	f105 0008 	add.w	r0, r5, #8
    3cb8:	f7fc fcce 	bl	658 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3cbc:	2301      	movs	r3, #1
    3cbe:	71eb      	strb	r3, [r5, #7]
}
    3cc0:	4620      	mov	r0, r4
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    3cc4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3cc8:	e7fa      	b.n	3cc0 <set_random_address+0x4c>
    3cca:	bf00      	nop
    3ccc:	20005e90 	.word	0x20005e90

00003cd0 <le_set_private_addr>:
{
    3cd0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    3cd2:	2106      	movs	r1, #6
    3cd4:	4668      	mov	r0, sp
    3cd6:	f00d f81f 	bl	10d18 <bt_rand>
	if (err) {
    3cda:	b940      	cbnz	r0, 3cee <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    3cdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    3ce0:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    3ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3ce6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    3cea:	f7ff ffc3 	bl	3c74 <set_random_address>
}
    3cee:	b003      	add	sp, #12
    3cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00003cf4 <set_le_scan_enable>:
{
    3cf4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    3cf6:	2102      	movs	r1, #2
{
    3cf8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    3cfa:	f242 000c 	movw	r0, #8204	; 0x200c
    3cfe:	f7ff ff01 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3d02:	4604      	mov	r4, r0
    3d04:	b328      	cbz	r0, 3d52 <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    3d06:	2102      	movs	r1, #2
    3d08:	3008      	adds	r0, #8
    3d0a:	f013 ff3b 	bl	17b84 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3d0e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    3d10:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3d12:	d115      	bne.n	3d40 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    3d14:	210a      	movs	r1, #10
    3d16:	4810      	ldr	r0, [pc, #64]	; (3d58 <set_le_scan_enable+0x64>)
    3d18:	f7ff fe38 	bl	398c <atomic_test_bit>
    3d1c:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    3d1e:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    3d20:	4621      	mov	r1, r4
    3d22:	2200      	movs	r2, #0
    3d24:	f242 000c 	movw	r0, #8204	; 0x200c
    3d28:	f7ff ff6c 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    3d2c:	4604      	mov	r4, r0
    3d2e:	b928      	cbnz	r0, 3d3c <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3d30:	2d01      	cmp	r5, #1
    3d32:	d108      	bne.n	3d46 <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d34:	2180      	movs	r1, #128	; 0x80
    3d36:	4808      	ldr	r0, [pc, #32]	; (3d58 <set_le_scan_enable+0x64>)
    3d38:	f7ff fe17 	bl	396a <atomic_or>
}
    3d3c:	4620      	mov	r0, r4
    3d3e:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    3d40:	2300      	movs	r3, #0
    3d42:	7043      	strb	r3, [r0, #1]
    3d44:	e7eb      	b.n	3d1e <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d46:	f06f 0180 	mvn.w	r1, #128	; 0x80
    3d4a:	4803      	ldr	r0, [pc, #12]	; (3d58 <set_le_scan_enable+0x64>)
    3d4c:	f7ff fe2b 	bl	39a6 <atomic_and>
    3d50:	e7f4      	b.n	3d3c <set_le_scan_enable+0x48>
		return -ENOBUFS;
    3d52:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3d56:	e7f1      	b.n	3d3c <set_le_scan_enable+0x48>
    3d58:	20005f00 	.word	0x20005f00

00003d5c <set_advertise_enable>:
{
    3d5c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3d5e:	2101      	movs	r1, #1
{
    3d60:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3d62:	f242 000a 	movw	r0, #8202	; 0x200a
    3d66:	f7ff fecd 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3d6a:	4604      	mov	r4, r0
    3d6c:	b1d8      	cbz	r0, 3da6 <set_advertise_enable+0x4a>
    3d6e:	3008      	adds	r0, #8
	if (enable) {
    3d70:	b18d      	cbz	r5, 3d96 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    3d72:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3d74:	f013 ff15 	bl	17ba2 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3d78:	4621      	mov	r1, r4
    3d7a:	2200      	movs	r2, #0
    3d7c:	f242 000a 	movw	r0, #8202	; 0x200a
    3d80:	f7ff ff40 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    3d84:	4604      	mov	r4, r0
    3d86:	b920      	cbnz	r0, 3d92 <set_advertise_enable+0x36>
	if (enable) {
    3d88:	b13d      	cbz	r5, 3d9a <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d8a:	2120      	movs	r1, #32
    3d8c:	4807      	ldr	r0, [pc, #28]	; (3dac <set_advertise_enable+0x50>)
    3d8e:	f7ff fdec 	bl	396a <atomic_or>
}
    3d92:	4620      	mov	r0, r4
    3d94:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    3d96:	4629      	mov	r1, r5
    3d98:	e7ec      	b.n	3d74 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d9a:	f06f 0120 	mvn.w	r1, #32
    3d9e:	4803      	ldr	r0, [pc, #12]	; (3dac <set_advertise_enable+0x50>)
    3da0:	f7ff fe01 	bl	39a6 <atomic_and>
    3da4:	e7f5      	b.n	3d92 <set_advertise_enable+0x36>
		return -ENOBUFS;
    3da6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3daa:	e7f2      	b.n	3d92 <set_advertise_enable+0x36>
    3dac:	20005f00 	.word	0x20005f00

00003db0 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    3db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3db4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3db6:	2120      	movs	r1, #32
{
    3db8:	4607      	mov	r7, r0
    3dba:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3dbc:	f7ff fea2 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3dc0:	4606      	mov	r6, r0
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d03c      	beq.n	3e40 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    3dc6:	2120      	movs	r1, #32
    3dc8:	3008      	adds	r0, #8
    3dca:	f013 fedb 	bl	17b84 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    3dce:	2220      	movs	r2, #32
    3dd0:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3dd2:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    3dd4:	f7fc fc6c 	bl	6b0 <memset>

	for (i = 0; i < ad_len; i++) {
    3dd8:	f04f 0900 	mov.w	r9, #0
    3ddc:	45c1      	cmp	r9, r8
    3dde:	d106      	bne.n	3dee <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3de0:	4631      	mov	r1, r6
    3de2:	4638      	mov	r0, r7
    3de4:	2200      	movs	r2, #0
}
    3de6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3dea:	f7ff bf0b 	b.w	3c04 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    3dee:	7862      	ldrb	r2, [r4, #1]
    3df0:	782b      	ldrb	r3, [r5, #0]
    3df2:	18d1      	adds	r1, r2, r3
    3df4:	3102      	adds	r1, #2
    3df6:	291f      	cmp	r1, #31
    3df8:	f104 0408 	add.w	r4, r4, #8
    3dfc:	dd06      	ble.n	3e0c <set_ad+0x5c>
			net_buf_unref(buf);
    3dfe:	4630      	mov	r0, r6
    3e00:	f013 fea0 	bl	17b44 <net_buf_unref>
			return -EINVAL;
    3e04:	f06f 0015 	mvn.w	r0, #21
    3e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3e0c:	18e9      	adds	r1, r5, r3
    3e0e:	1c50      	adds	r0, r2, #1
    3e10:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    3e12:	1c98      	adds	r0, r3, #2
    3e14:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3e16:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    3e18:	7028      	strb	r0, [r5, #0]
    3e1a:	fa55 f383 	uxtab	r3, r5, r3
    3e1e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    3e22:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    3e24:	3001      	adds	r0, #1
    3e26:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3e2a:	4428      	add	r0, r5
    3e2c:	f7fc fc14 	bl	658 <memcpy>
		set_data->len += ad[i].data_len;
    3e30:	782b      	ldrb	r3, [r5, #0]
    3e32:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    3e36:	4413      	add	r3, r2
    3e38:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    3e3a:	f109 0901 	add.w	r9, r9, #1
    3e3e:	e7cd      	b.n	3ddc <set_ad+0x2c>
		return -ENOBUFS;
    3e40:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003e48 <hci_le_set_data_len.isra.26>:
static int hci_le_set_data_len(struct bt_conn *conn)
    3e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e4a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3e4c:	aa01      	add	r2, sp, #4
    3e4e:	2100      	movs	r1, #0
    3e50:	f242 002f 	movw	r0, #8239	; 0x202f
    3e54:	f7ff fed6 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    3e58:	b9d8      	cbnz	r0, 3e92 <hci_le_set_data_len.isra.26+0x4a>
	rp = (void *)rsp->data;
    3e5a:	9801      	ldr	r0, [sp, #4]
    3e5c:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    3e5e:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    3e62:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    3e66:	f013 fe6d 	bl	17b44 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    3e6a:	2106      	movs	r1, #6
    3e6c:	f242 0022 	movw	r0, #8226	; 0x2022
    3e70:	f7ff fe48 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    3e74:	4604      	mov	r4, r0
    3e76:	b170      	cbz	r0, 3e96 <hci_le_set_data_len.isra.26+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    3e78:	2106      	movs	r1, #6
    3e7a:	3008      	adds	r0, #8
    3e7c:	f013 fe82 	bl	17b84 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3e80:	883b      	ldrh	r3, [r7, #0]
    3e82:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3e84:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    3e86:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3e88:	4621      	mov	r1, r4
    3e8a:	f242 0022 	movw	r0, #8226	; 0x2022
    3e8e:	f7ff fe5d 	bl	3b4c <bt_hci_cmd_send>
}
    3e92:	b003      	add	sp, #12
    3e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    3e96:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3e9a:	e7fa      	b.n	3e92 <hci_le_set_data_len.isra.26+0x4a>

00003e9c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    3e9c:	8802      	ldrh	r2, [r0, #0]
    3e9e:	8843      	ldrh	r3, [r0, #2]
    3ea0:	429a      	cmp	r2, r3
{
    3ea2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    3ea4:	d818      	bhi.n	3ed8 <bt_le_conn_params_valid+0x3c>
    3ea6:	2a05      	cmp	r2, #5
    3ea8:	d916      	bls.n	3ed8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    3eaa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    3eae:	d813      	bhi.n	3ed8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    3eb0:	8884      	ldrh	r4, [r0, #4]
    3eb2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    3eb6:	d20f      	bcs.n	3ed8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    3eb8:	88c1      	ldrh	r1, [r0, #6]
    3eba:	f1a1 020a 	sub.w	r2, r1, #10
    3ebe:	b292      	uxth	r2, r2
    3ec0:	f640 4076 	movw	r0, #3190	; 0xc76
    3ec4:	4282      	cmp	r2, r0
    3ec6:	d807      	bhi.n	3ed8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    3ec8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    3ecc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    3ed0:	bfb4      	ite	lt
    3ed2:	2001      	movlt	r0, #1
    3ed4:	2000      	movge	r0, #0
    3ed6:	bd10      	pop	{r4, pc}
		return false;
    3ed8:	2000      	movs	r0, #0
}
    3eda:	bd10      	pop	{r4, pc}

00003edc <bt_le_scan_update>:
{
    3edc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ede:	2108      	movs	r1, #8
    3ee0:	4808      	ldr	r0, [pc, #32]	; (3f04 <bt_le_scan_update+0x28>)
    3ee2:	f7ff fd53 	bl	398c <atomic_test_bit>
    3ee6:	4602      	mov	r2, r0
    3ee8:	b948      	cbnz	r0, 3efe <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3eea:	2107      	movs	r1, #7
    3eec:	4805      	ldr	r0, [pc, #20]	; (3f04 <bt_le_scan_update+0x28>)
    3eee:	f7ff fd4d 	bl	398c <atomic_test_bit>
    3ef2:	b120      	cbz	r0, 3efe <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3ef4:	4610      	mov	r0, r2
}
    3ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3efa:	f7ff befb 	b.w	3cf4 <set_le_scan_enable>
}
    3efe:	2000      	movs	r0, #0
    3f00:	bd08      	pop	{r3, pc}
    3f02:	bf00      	nop
    3f04:	20005f00 	.word	0x20005f00

00003f08 <le_enh_conn_complete>:
{
    3f08:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (evt->status) {
    3f0a:	7803      	ldrb	r3, [r0, #0]
{
    3f0c:	b085      	sub	sp, #20
    3f0e:	4605      	mov	r5, r0
	if (evt->status) {
    3f10:	b17b      	cbz	r3, 3f32 <le_enh_conn_complete+0x2a>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3f12:	2102      	movs	r1, #2
    3f14:	2000      	movs	r0, #0
    3f16:	f001 fc61 	bl	57dc <bt_conn_lookup_state_le>
		if (!conn) {
    3f1a:	4604      	mov	r4, r0
    3f1c:	b138      	cbz	r0, 3f2e <le_enh_conn_complete+0x26>
		conn->err = evt->status;
    3f1e:	782b      	ldrb	r3, [r5, #0]
    3f20:	7203      	strb	r3, [r0, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3f22:	2100      	movs	r1, #0
    3f24:	f001 fb80 	bl	5628 <bt_conn_set_state>
		bt_conn_unref(conn);
    3f28:	4620      	mov	r0, r4
    3f2a:	f001 fc80 	bl	582e <bt_conn_unref>
}
    3f2e:	b005      	add	sp, #20
    3f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3f32:	1d04      	adds	r4, r0, #4
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3f34:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3f38:	4621      	mov	r1, r4
    3f3a:	a802      	add	r0, sp, #8
    3f3c:	f7ff fd12 	bl	3964 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3f40:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3f44:	3b02      	subs	r3, #2
    3f46:	b2db      	uxtb	r3, r3
    3f48:	2b01      	cmp	r3, #1
    3f4a:	d87d      	bhi.n	4048 <le_enh_conn_complete+0x140>
    3f4c:	2206      	movs	r2, #6
    3f4e:	f105 0111 	add.w	r1, r5, #17
    3f52:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3f56:	f88d 3008 	strb.w	r3, [sp, #8]
    3f5a:	f7fc fb7d 	bl	658 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3f5e:	2301      	movs	r3, #1
    3f60:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3f64:	2102      	movs	r1, #2
    3f66:	a802      	add	r0, sp, #8
    3f68:	f001 fc38 	bl	57dc <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3f6c:	78eb      	ldrb	r3, [r5, #3]
    3f6e:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3f70:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3f72:	d109      	bne.n	3f88 <le_enh_conn_complete+0x80>
    3f74:	f06f 0120 	mvn.w	r1, #32
    3f78:	4844      	ldr	r0, [pc, #272]	; (408c <le_enh_conn_complete+0x184>)
    3f7a:	f7ff fd14 	bl	39a6 <atomic_and>
		if (!conn) {
    3f7e:	b92c      	cbnz	r4, 3f8c <le_enh_conn_complete+0x84>
			conn = bt_conn_add_le(&id_addr);
    3f80:	a802      	add	r0, sp, #8
    3f82:	f001 fb1d 	bl	55c0 <bt_conn_add_le>
    3f86:	4604      	mov	r4, r0
	if (!conn) {
    3f88:	2c00      	cmp	r4, #0
    3f8a:	d0d0      	beq.n	3f2e <le_enh_conn_complete+0x26>
	conn->handle   = handle;
    3f8c:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3f8e:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    3f90:	f820 6b44 	strh.w	r6, [r0], #68
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3f94:	f7ff fce6 	bl	3964 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3f98:	7e2a      	ldrb	r2, [r5, #24]
    3f9a:	7deb      	ldrb	r3, [r5, #23]
    3f9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fa0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3fa4:	7eaa      	ldrb	r2, [r5, #26]
    3fa6:	7e6b      	ldrb	r3, [r5, #25]
    3fa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fac:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3fb0:	7eeb      	ldrb	r3, [r5, #27]
    3fb2:	7f2a      	ldrb	r2, [r5, #28]
    3fb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fb8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->role = evt->role;
    3fbc:	78ee      	ldrb	r6, [r5, #3]
    3fbe:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3fc0:	2e01      	cmp	r6, #1
    3fc2:	d11a      	bne.n	3ffa <le_enh_conn_complete+0xf2>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3fc4:	4f32      	ldr	r7, [pc, #200]	; (4090 <le_enh_conn_complete+0x188>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3fc6:	4669      	mov	r1, sp
    3fc8:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    3fcc:	f7ff fcca 	bl	3964 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3fd0:	4639      	mov	r1, r7
    3fd2:	f104 0052 	add.w	r0, r4, #82	; 0x52
    3fd6:	f7ff fcc5 	bl	3964 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3fda:	2106      	movs	r1, #6
    3fdc:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3fe0:	f7ff fcd4 	bl	398c <atomic_test_bit>
    3fe4:	b148      	cbz	r0, 3ffa <le_enh_conn_complete+0xf2>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3fe6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3fea:	2200      	movs	r2, #0
    3fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3ff0:	4313      	orrs	r3, r2
    3ff2:	d002      	beq.n	3ffa <le_enh_conn_complete+0xf2>
			set_advertise_enable(true);
    3ff4:	4630      	mov	r0, r6
    3ff6:	f7ff feb1 	bl	3d5c <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3ffa:	2103      	movs	r1, #3
    3ffc:	4620      	mov	r0, r4
    3ffe:	f001 fb13 	bl	5628 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    4002:	7a63      	ldrb	r3, [r4, #9]
    4004:	2b03      	cmp	r3, #3
    4006:	d118      	bne.n	403a <le_enh_conn_complete+0x132>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    4008:	78eb      	ldrb	r3, [r5, #3]
    400a:	b123      	cbz	r3, 4016 <le_enh_conn_complete+0x10e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    400c:	4b20      	ldr	r3, [pc, #128]	; (4090 <le_enh_conn_complete+0x188>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    400e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4012:	0719      	lsls	r1, r3, #28
    4014:	d51d      	bpl.n	4052 <le_enh_conn_complete+0x14a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4016:	2102      	movs	r1, #2
    4018:	f242 0016 	movw	r0, #8214	; 0x2016
    401c:	f7ff fd72 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    4020:	4605      	mov	r5, r0
    4022:	b1b0      	cbz	r0, 4052 <le_enh_conn_complete+0x14a>
	cp = net_buf_add(buf, sizeof(*cp));
    4024:	2102      	movs	r1, #2
    4026:	3008      	adds	r0, #8
    4028:	f013 fdac 	bl	17b84 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    402c:	8823      	ldrh	r3, [r4, #0]
    402e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4030:	4629      	mov	r1, r5
    4032:	f242 0016 	movw	r0, #8214	; 0x2016
    4036:	f7ff fd89 	bl	3b4c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    403a:	4620      	mov	r0, r4
    403c:	f001 fbf7 	bl	582e <bt_conn_unref>
	bt_le_scan_update(false);
    4040:	2000      	movs	r0, #0
    4042:	f7ff ff4b 	bl	3edc <bt_le_scan_update>
    4046:	e772      	b.n	3f2e <le_enh_conn_complete+0x26>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    4048:	4621      	mov	r1, r4
    404a:	4668      	mov	r0, sp
    404c:	f7ff fc8a 	bl	3964 <bt_addr_le_copy>
    4050:	e788      	b.n	3f64 <le_enh_conn_complete+0x5c>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    4052:	4d0f      	ldr	r5, [pc, #60]	; (4090 <le_enh_conn_complete+0x188>)
    4054:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    4058:	07d2      	lsls	r2, r2, #31
    405a:	d508      	bpl.n	406e <le_enh_conn_complete+0x166>
		err = hci_le_set_phy(conn);
    405c:	4620      	mov	r0, r4
    405e:	f7ff fd97 	bl	3b90 <hci_le_set_phy.isra.25>
		if (!err) {
    4062:	b920      	cbnz	r0, 406e <le_enh_conn_complete+0x166>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4064:	2180      	movs	r1, #128	; 0x80
    4066:	1d20      	adds	r0, r4, #4
    4068:	f7ff fc7f 	bl	396a <atomic_or>
    406c:	e7e5      	b.n	403a <le_enh_conn_complete+0x132>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    406e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4072:	069b      	lsls	r3, r3, #26
    4074:	d506      	bpl.n	4084 <le_enh_conn_complete+0x17c>
		err = hci_le_set_data_len(conn);
    4076:	4620      	mov	r0, r4
    4078:	f7ff fee6 	bl	3e48 <hci_le_set_data_len.isra.26>
		if (!err) {
    407c:	b910      	cbnz	r0, 4084 <le_enh_conn_complete+0x17c>
    407e:	f44f 7180 	mov.w	r1, #256	; 0x100
    4082:	e7f0      	b.n	4066 <le_enh_conn_complete+0x15e>
	update_conn_param(conn);
    4084:	4620      	mov	r0, r4
    4086:	f7ff fc9f 	bl	39c8 <update_conn_param>
    408a:	e7d6      	b.n	403a <le_enh_conn_complete+0x132>
    408c:	20005f00 	.word	0x20005f00
    4090:	20005e90 	.word	0x20005e90

00004094 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    4094:	2301      	movs	r3, #1
{
    4096:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    4098:	2106      	movs	r1, #6
{
    409a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    409c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    40a0:	f00c fe3a 	bl	10d18 <bt_rand>
	if (err) {
    40a4:	b918      	cbnz	r0, 40ae <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    40a6:	79a3      	ldrb	r3, [r4, #6]
    40a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    40ac:	71a3      	strb	r3, [r4, #6]
}
    40ae:	bd10      	pop	{r4, pc}

000040b0 <bt_init>:
{
    40b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40b4:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    40b6:	aa04      	add	r2, sp, #16
    40b8:	2100      	movs	r1, #0
    40ba:	f640 4003 	movw	r0, #3075	; 0xc03
    40be:	f7ff fda1 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    40c2:	4604      	mov	r4, r0
    40c4:	2800      	cmp	r0, #0
    40c6:	f040 81cd 	bne.w	4464 <bt_init+0x3b4>
	u8_t status = buf->data[0];
    40ca:	9b04      	ldr	r3, [sp, #16]
    40cc:	689b      	ldr	r3, [r3, #8]
	if (status) {
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	b96b      	cbnz	r3, 40ee <bt_init+0x3e>
	scan_dev_found_cb = NULL;
    40d2:	4ac4      	ldr	r2, [pc, #784]	; (43e4 <bt_init+0x334>)
    40d4:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    40d6:	4bc4      	ldr	r3, [pc, #784]	; (43e8 <bt_init+0x338>)
    40d8:	f3bf 8f5b 	dmb	ish
    40dc:	2201      	movs	r2, #1
    40de:	e853 1f00 	ldrex	r1, [r3]
    40e2:	e843 2000 	strex	r0, r2, [r3]
    40e6:	2800      	cmp	r0, #0
    40e8:	d1f9      	bne.n	40de <bt_init+0x2e>
    40ea:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    40ee:	9804      	ldr	r0, [sp, #16]
    40f0:	f013 fd28 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    40f4:	aa04      	add	r2, sp, #16
    40f6:	2100      	movs	r1, #0
    40f8:	f241 0003 	movw	r0, #4099	; 0x1003
    40fc:	f7ff fd82 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4100:	4604      	mov	r4, r0
    4102:	2800      	cmp	r0, #0
    4104:	f040 81ae 	bne.w	4464 <bt_init+0x3b4>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4108:	9b04      	ldr	r3, [sp, #16]
    410a:	4db8      	ldr	r5, [pc, #736]	; (43ec <bt_init+0x33c>)
    410c:	6899      	ldr	r1, [r3, #8]
    410e:	2208      	movs	r2, #8
    4110:	3101      	adds	r1, #1
    4112:	f105 0016 	add.w	r0, r5, #22
    4116:	f7fc fa9f 	bl	658 <memcpy>
	net_buf_unref(rsp);
    411a:	9804      	ldr	r0, [sp, #16]
    411c:	f013 fd12 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4120:	4621      	mov	r1, r4
    4122:	aa04      	add	r2, sp, #16
    4124:	f241 0001 	movw	r0, #4097	; 0x1001
    4128:	f7ff fd6c 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    412c:	4604      	mov	r4, r0
    412e:	2800      	cmp	r0, #0
    4130:	f040 8198 	bne.w	4464 <bt_init+0x3b4>
	read_local_ver_complete(rsp);
    4134:	9804      	ldr	r0, [sp, #16]
    4136:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    4138:	785a      	ldrb	r2, [r3, #1]
    413a:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    413c:	78d9      	ldrb	r1, [r3, #3]
    413e:	789a      	ldrb	r2, [r3, #2]
    4140:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4144:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    4146:	791a      	ldrb	r2, [r3, #4]
    4148:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    414a:	7a19      	ldrb	r1, [r3, #8]
    414c:	79da      	ldrb	r2, [r3, #7]
    414e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4152:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4154:	795a      	ldrb	r2, [r3, #5]
    4156:	799b      	ldrb	r3, [r3, #6]
    4158:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    415c:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    415e:	f013 fcf1 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4162:	4621      	mov	r1, r4
    4164:	aa04      	add	r2, sp, #16
    4166:	f241 0009 	movw	r0, #4105	; 0x1009
    416a:	f7ff fd4b 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    416e:	4604      	mov	r4, r0
    4170:	2800      	cmp	r0, #0
    4172:	f040 8177 	bne.w	4464 <bt_init+0x3b4>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    4176:	9b04      	ldr	r3, [sp, #16]
    4178:	6899      	ldr	r1, [r3, #8]
    417a:	2206      	movs	r2, #6
    417c:	3101      	adds	r1, #1
    417e:	1c68      	adds	r0, r5, #1
    4180:	f7fc fa6a 	bl	658 <memcpy>
	net_buf_unref(rsp);
    4184:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    4186:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    4188:	f013 fcdc 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    418c:	4621      	mov	r1, r4
    418e:	aa04      	add	r2, sp, #16
    4190:	f241 0002 	movw	r0, #4098	; 0x1002
    4194:	f7ff fd36 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4198:	4604      	mov	r4, r0
    419a:	2800      	cmp	r0, #0
    419c:	f040 8162 	bne.w	4464 <bt_init+0x3b4>
	memcpy(bt_dev.supported_commands, rp->commands,
    41a0:	9b04      	ldr	r3, [sp, #16]
    41a2:	6899      	ldr	r1, [r3, #8]
    41a4:	2240      	movs	r2, #64	; 0x40
    41a6:	3101      	adds	r1, #1
    41a8:	f105 001e 	add.w	r0, r5, #30
    41ac:	f7fc fa54 	bl	658 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    41b0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
    41b4:	9804      	ldr	r0, [sp, #16]
		bt_dev.supported_commands[34] |= 0x04;
    41b6:	f043 0306 	orr.w	r3, r3, #6
    41ba:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	net_buf_unref(rsp);
    41be:	f013 fcc1 	bl	17b44 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    41c2:	7eab      	ldrb	r3, [r5, #26]
    41c4:	065a      	lsls	r2, r3, #25
    41c6:	f140 81d3 	bpl.w	4570 <bt_init+0x4c0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    41ca:	4621      	mov	r1, r4
    41cc:	aa04      	add	r2, sp, #16
    41ce:	f242 0003 	movw	r0, #8195	; 0x2003
    41d2:	f7ff fd17 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    41d6:	4604      	mov	r4, r0
    41d8:	2800      	cmp	r0, #0
    41da:	f040 8143 	bne.w	4464 <bt_init+0x3b4>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    41de:	9b04      	ldr	r3, [sp, #16]
    41e0:	6899      	ldr	r1, [r3, #8]
    41e2:	2208      	movs	r2, #8
    41e4:	3101      	adds	r1, #1
    41e6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    41ea:	f7fc fa35 	bl	658 <memcpy>
	net_buf_unref(rsp);
    41ee:	9804      	ldr	r0, [sp, #16]
    41f0:	f013 fca8 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    41f4:	4621      	mov	r1, r4
    41f6:	aa04      	add	r2, sp, #16
    41f8:	f242 0002 	movw	r0, #8194	; 0x2002
    41fc:	f7ff fd02 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4200:	4604      	mov	r4, r0
    4202:	2800      	cmp	r0, #0
    4204:	f040 812e 	bne.w	4464 <bt_init+0x3b4>
    4208:	9b04      	ldr	r3, [sp, #16]
    420a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    420c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4210:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4214:	b142      	cbz	r2, 4228 <bt_init+0x178>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4216:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    4218:	2a02      	cmp	r2, #2
    421a:	bf28      	it	cs
    421c:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    421e:	4611      	mov	r1, r2
    4220:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    4224:	f014 fa2e 	bl	18684 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4228:	9804      	ldr	r0, [sp, #16]
    422a:	f013 fc8b 	bl	17b44 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    422e:	7eac      	ldrb	r4, [r5, #26]
    4230:	f014 0420 	ands.w	r4, r4, #32
    4234:	f000 80fb 	beq.w	442e <bt_init+0x37e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4238:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    423c:	071b      	lsls	r3, r3, #28
    423e:	d514      	bpl.n	426a <bt_init+0x1ba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4240:	aa04      	add	r2, sp, #16
    4242:	2100      	movs	r1, #0
    4244:	f242 001c 	movw	r0, #8220	; 0x201c
    4248:	f7ff fcdc 	bl	3c04 <bt_hci_cmd_send_sync>
		if (err) {
    424c:	4604      	mov	r4, r0
    424e:	2800      	cmp	r0, #0
    4250:	f040 8108 	bne.w	4464 <bt_init+0x3b4>
		le_read_supp_states_complete(rsp);
    4254:	9804      	ldr	r0, [sp, #16]
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4256:	6883      	ldr	r3, [r0, #8]
    4258:	f853 2f01 	ldr.w	r2, [r3, #1]!
    425c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    425e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    4262:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    4266:	f013 fc6d 	bl	17b44 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    426a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    426e:	069f      	lsls	r7, r3, #26
    4270:	f100 80fc 	bmi.w	446c <bt_init+0x3bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4274:	2108      	movs	r1, #8
    4276:	f242 0001 	movw	r0, #8193	; 0x2001
    427a:	f7ff fc43 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    427e:	4604      	mov	r4, r0
    4280:	2800      	cmp	r0, #0
    4282:	f000 80db 	beq.w	443c <bt_init+0x38c>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4286:	2108      	movs	r1, #8
    4288:	4408      	add	r0, r1
    428a:	f013 fc7b 	bl	17b84 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    428e:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
    4292:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4294:	bf4c      	ite	mi
    4296:	222f      	movmi	r2, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4298:	220f      	movpl	r2, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    429a:	0689      	lsls	r1, r1, #26
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    429c:	f895 1079 	ldrb.w	r1, [r5, #121]	; 0x79
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    42a0:	bf48      	it	mi
    42a2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    42a6:	f011 0f09 	tst.w	r1, #9
	if ((bt_dev.supported_commands[34] & 0x02) &&
    42aa:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    42ae:	f001 0106 	and.w	r1, r1, #6
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    42b2:	bf18      	it	ne
    42b4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
	if ((bt_dev.supported_commands[34] & 0x02) &&
    42b8:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    42ba:	bf08      	it	eq
    42bc:	f442 72c0 	orreq.w	r2, r2, #384	; 0x180
	dst[0] = val;
    42c0:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    42c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    42c6:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    42c8:	2200      	movs	r2, #0
    42ca:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    42cc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    42ce:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    42d0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    42d2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    42d4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    42d6:	4621      	mov	r1, r4
    42d8:	f242 0001 	movw	r0, #8193	; 0x2001
    42dc:	f7ff fc92 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    42e0:	4604      	mov	r4, r0
    42e2:	2800      	cmp	r0, #0
    42e4:	f040 80be 	bne.w	4464 <bt_init+0x3b4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    42e8:	7eab      	ldrb	r3, [r5, #26]
    42ea:	069a      	lsls	r2, r3, #26
    42ec:	d421      	bmi.n	4332 <bt_init+0x282>
	if (bt_dev.le.mtu) {
    42ee:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    42f2:	b9f1      	cbnz	r1, 4332 <bt_init+0x282>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    42f4:	aa04      	add	r2, sp, #16
    42f6:	f241 0005 	movw	r0, #4101	; 0x1005
    42fa:	f7ff fc83 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    42fe:	4604      	mov	r4, r0
    4300:	2800      	cmp	r0, #0
    4302:	f040 80af 	bne.w	4464 <bt_init+0x3b4>
	if (bt_dev.le.mtu) {
    4306:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    430a:	b97b      	cbnz	r3, 432c <bt_init+0x27c>
    430c:	9b04      	ldr	r3, [sp, #16]
    430e:	4838      	ldr	r0, [pc, #224]	; (43f0 <bt_init+0x340>)
    4310:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4312:	7899      	ldrb	r1, [r3, #2]
    4314:	785a      	ldrb	r2, [r3, #1]
    4316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    431a:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    431e:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    4320:	2a02      	cmp	r2, #2
    4322:	bf28      	it	cs
    4324:	2202      	movcs	r2, #2
    4326:	4611      	mov	r1, r2
    4328:	f014 f9ac 	bl	18684 <_impl_k_sem_init>
	net_buf_unref(rsp);
    432c:	9804      	ldr	r0, [sp, #16]
    432e:	f013 fc09 	bl	17b44 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4332:	2108      	movs	r1, #8
    4334:	f640 4001 	movw	r0, #3073	; 0xc01
    4338:	f7ff fbe4 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    433c:	4604      	mov	r4, r0
    433e:	2800      	cmp	r0, #0
    4340:	d07c      	beq.n	443c <bt_init+0x38c>
	ev = net_buf_add(buf, sizeof(*ev));
    4342:	2108      	movs	r1, #8
    4344:	4408      	add	r0, r1
    4346:	f013 fc1d 	bl	17b84 <net_buf_simple_add>
	dst[0] = val;
    434a:	2310      	movs	r3, #16
    434c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    434e:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    4350:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    4352:	7043      	strb	r3, [r0, #1]
    4354:	2602      	movs	r6, #2
    4356:	2320      	movs	r3, #32
	dst[0] = val;
    4358:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    435a:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    435c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    435e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4360:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4362:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4364:	4621      	mov	r1, r4
    4366:	f640 4001 	movw	r0, #3073	; 0xc01
    436a:	f7ff fc4b 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    436e:	4604      	mov	r4, r0
    4370:	2800      	cmp	r0, #0
    4372:	d177      	bne.n	4464 <bt_init+0x3b4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4374:	4601      	mov	r1, r0
    4376:	aa04      	add	r2, sp, #16
    4378:	f64f 4001 	movw	r0, #64513	; 0xfc01
    437c:	f7ff fc42 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4380:	4604      	mov	r4, r0
    4382:	bb28      	cbnz	r0, 43d0 <bt_init+0x320>
	net_buf_unref(rsp);
    4384:	9804      	ldr	r0, [sp, #16]
    4386:	f013 fbdd 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    438a:	4621      	mov	r1, r4
    438c:	aa04      	add	r2, sp, #16
    438e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    4392:	f7ff fc37 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4396:	4604      	mov	r4, r0
    4398:	b9d0      	cbnz	r0, 43d0 <bt_init+0x320>
	rp.cmds = (void *)rsp->data;
    439a:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    439c:	4815      	ldr	r0, [pc, #84]	; (43f4 <bt_init+0x344>)
    439e:	6899      	ldr	r1, [r3, #8]
    43a0:	4632      	mov	r2, r6
    43a2:	3101      	adds	r1, #1
    43a4:	f7fc f958 	bl	658 <memcpy>
	net_buf_unref(rsp);
    43a8:	9804      	ldr	r0, [sp, #16]
    43aa:	f013 fbcb 	bl	17b44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    43ae:	aa04      	add	r2, sp, #16
    43b0:	4621      	mov	r1, r4
    43b2:	f64f 4003 	movw	r0, #64515	; 0xfc03
    43b6:	f7ff fc25 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    43ba:	b948      	cbnz	r0, 43d0 <bt_init+0x320>
	rp.feat = (void *)rsp->data;
    43bc:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    43be:	480e      	ldr	r0, [pc, #56]	; (43f8 <bt_init+0x348>)
    43c0:	6899      	ldr	r1, [r3, #8]
    43c2:	2201      	movs	r2, #1
    43c4:	4411      	add	r1, r2
    43c6:	f7fc f947 	bl	658 <memcpy>
	net_buf_unref(rsp);
    43ca:	9804      	ldr	r0, [sp, #16]
    43cc:	f013 fbba 	bl	17b44 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    43d0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    43d2:	2207      	movs	r2, #7
    43d4:	a904      	add	r1, sp, #16
    43d6:	4805      	ldr	r0, [pc, #20]	; (43ec <bt_init+0x33c>)
    43d8:	9304      	str	r3, [sp, #16]
    43da:	f8cd 3013 	str.w	r3, [sp, #19]
    43de:	f7fc f926 	bl	62e <memcmp>
    43e2:	e00b      	b.n	43fc <bt_init+0x34c>
    43e4:	200001b0 	.word	0x200001b0
    43e8:	20005f00 	.word	0x20005f00
    43ec:	20005e90 	.word	0x20005e90
    43f0:	20005f1c 	.word	0x20005f1c
    43f4:	20005eef 	.word	0x20005eef
    43f8:	20005eee 	.word	0x20005eee
    43fc:	2800      	cmp	r0, #0
    43fe:	d160      	bne.n	44c2 <bt_init+0x412>
	if (bt_storage) {
    4400:	4e5d      	ldr	r6, [pc, #372]	; (4578 <bt_init+0x4c8>)
    4402:	6833      	ldr	r3, [r6, #0]
    4404:	2b00      	cmp	r3, #0
    4406:	d179      	bne.n	44fc <bt_init+0x44c>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4408:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    440c:	07db      	lsls	r3, r3, #31
    440e:	f100 8091 	bmi.w	4534 <bt_init+0x484>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4412:	485a      	ldr	r0, [pc, #360]	; (457c <bt_init+0x4cc>)
    4414:	f7ff fe3e 	bl	4094 <bt_addr_le_create_static>
	if (err) {
    4418:	4604      	mov	r4, r0
    441a:	bb18      	cbnz	r0, 4464 <bt_init+0x3b4>
	if (bt_storage) {
    441c:	6833      	ldr	r3, [r6, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d075      	beq.n	450e <bt_init+0x45e>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4422:	685e      	ldr	r6, [r3, #4]
    4424:	4a55      	ldr	r2, [pc, #340]	; (457c <bt_init+0x4cc>)
    4426:	2307      	movs	r3, #7
    4428:	4601      	mov	r1, r0
    442a:	47b0      	blx	r6
    442c:	e06f      	b.n	450e <bt_init+0x45e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    442e:	2102      	movs	r1, #2
    4430:	f640 406d 	movw	r0, #3181	; 0xc6d
    4434:	f7ff fb66 	bl	3b04 <bt_hci_cmd_create>
		if (!buf) {
    4438:	4606      	mov	r6, r0
    443a:	b910      	cbnz	r0, 4442 <bt_init+0x392>
		return -ENOBUFS;
    443c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4440:	e010      	b.n	4464 <bt_init+0x3b4>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4442:	2102      	movs	r1, #2
    4444:	3008      	adds	r0, #8
    4446:	f013 fb9d 	bl	17b84 <net_buf_simple_add>
		cp_le->le = 0x01;
    444a:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    444c:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    444e:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4450:	4622      	mov	r2, r4
    4452:	4631      	mov	r1, r6
    4454:	f640 406d 	movw	r0, #3181	; 0xc6d
    4458:	f7ff fbd4 	bl	3c04 <bt_hci_cmd_send_sync>
		if (err) {
    445c:	4604      	mov	r4, r0
    445e:	2800      	cmp	r0, #0
    4460:	f43f aeea 	beq.w	4238 <bt_init+0x188>
}
    4464:	4620      	mov	r0, r4
    4466:	b006      	add	sp, #24
    4468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    446c:	aa04      	add	r2, sp, #16
    446e:	2100      	movs	r1, #0
    4470:	f242 002f 	movw	r0, #8239	; 0x202f
    4474:	f7ff fbc6 	bl	3c04 <bt_hci_cmd_send_sync>
		if (err) {
    4478:	4604      	mov	r4, r0
    447a:	2800      	cmp	r0, #0
    447c:	d1f2      	bne.n	4464 <bt_init+0x3b4>
		rp = (void *)rsp->data;
    447e:	9804      	ldr	r0, [sp, #16]
    4480:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4482:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4486:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    448a:	f013 fb5b 	bl	17b44 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    448e:	2104      	movs	r1, #4
    4490:	f242 0024 	movw	r0, #8228	; 0x2024
    4494:	f7ff fb36 	bl	3b04 <bt_hci_cmd_create>
		if (!buf) {
    4498:	4606      	mov	r6, r0
    449a:	2800      	cmp	r0, #0
    449c:	d0ce      	beq.n	443c <bt_init+0x38c>
		cp = net_buf_add(buf, sizeof(*cp));
    449e:	2104      	movs	r1, #4
    44a0:	3008      	adds	r0, #8
    44a2:	f013 fb6f 	bl	17b84 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    44a6:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    44a8:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    44ac:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    44ae:	4631      	mov	r1, r6
    44b0:	f242 0024 	movw	r0, #8228	; 0x2024
    44b4:	f7ff fba6 	bl	3c04 <bt_hci_cmd_send_sync>
		if (err) {
    44b8:	4604      	mov	r4, r0
    44ba:	2800      	cmp	r0, #0
    44bc:	f43f aeda 	beq.w	4274 <bt_init+0x1c4>
    44c0:	e7d0      	b.n	4464 <bt_init+0x3b4>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    44c2:	4b2f      	ldr	r3, [pc, #188]	; (4580 <bt_init+0x4d0>)
    44c4:	6818      	ldr	r0, [r3, #0]
    44c6:	889a      	ldrh	r2, [r3, #4]
    44c8:	9002      	str	r0, [sp, #8]
    44ca:	799b      	ldrb	r3, [r3, #6]
    44cc:	f8ad 200c 	strh.w	r2, [sp, #12]
    44d0:	a902      	add	r1, sp, #8
    44d2:	2207      	movs	r2, #7
    44d4:	4829      	ldr	r0, [pc, #164]	; (457c <bt_init+0x4cc>)
    44d6:	f88d 300e 	strb.w	r3, [sp, #14]
    44da:	f7fc f8a8 	bl	62e <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    44de:	2800      	cmp	r0, #0
    44e0:	d08e      	beq.n	4400 <bt_init+0x350>
		err = bt_conn_init();
    44e2:	f001 fb03 	bl	5aec <bt_conn_init>
		if (err) {
    44e6:	4604      	mov	r4, r0
    44e8:	2800      	cmp	r0, #0
    44ea:	d1bb      	bne.n	4464 <bt_init+0x3b4>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    44ec:	2102      	movs	r1, #2
    44ee:	4825      	ldr	r0, [pc, #148]	; (4584 <bt_init+0x4d4>)
    44f0:	f7ff fa3b 	bl	396a <atomic_or>
	bt_le_scan_update(false);
    44f4:	4620      	mov	r0, r4
    44f6:	f7ff fcf1 	bl	3edc <bt_le_scan_update>
    44fa:	e7b3      	b.n	4464 <bt_init+0x3b4>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    44fc:	2100      	movs	r1, #0
    44fe:	681c      	ldr	r4, [r3, #0]
    4500:	4a1e      	ldr	r2, [pc, #120]	; (457c <bt_init+0x4cc>)
    4502:	2307      	movs	r3, #7
    4504:	4608      	mov	r0, r1
    4506:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4508:	2807      	cmp	r0, #7
    450a:	f47f af7d 	bne.w	4408 <bt_init+0x358>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    450e:	782b      	ldrb	r3, [r5, #0]
    4510:	2b01      	cmp	r3, #1
    4512:	d12a      	bne.n	456a <bt_init+0x4ba>
    4514:	79ab      	ldrb	r3, [r5, #6]
    4516:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    451a:	2bc0      	cmp	r3, #192	; 0xc0
    451c:	d125      	bne.n	456a <bt_init+0x4ba>
	err = set_random_address(&bt_dev.id_addr.a);
    451e:	481a      	ldr	r0, [pc, #104]	; (4588 <bt_init+0x4d8>)
    4520:	f7ff fba8 	bl	3c74 <set_random_address>
	if (err) {
    4524:	4604      	mov	r4, r0
    4526:	2800      	cmp	r0, #0
    4528:	d19c      	bne.n	4464 <bt_init+0x3b4>
    452a:	2104      	movs	r1, #4
    452c:	4815      	ldr	r0, [pc, #84]	; (4584 <bt_init+0x4d4>)
    452e:	f7ff fa1c 	bl	396a <atomic_or>
    4532:	e7d6      	b.n	44e2 <bt_init+0x432>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4534:	aa01      	add	r2, sp, #4
    4536:	2100      	movs	r1, #0
    4538:	f64f 4009 	movw	r0, #64521	; 0xfc09
    453c:	f7ff fb62 	bl	3c04 <bt_hci_cmd_send_sync>
		if (err) {
    4540:	2800      	cmp	r0, #0
    4542:	f47f af66 	bne.w	4412 <bt_init+0x362>
		rp = (void *)rsp->data;
    4546:	9801      	ldr	r0, [sp, #4]
    4548:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    454a:	784b      	ldrb	r3, [r1, #1]
    454c:	b153      	cbz	r3, 4564 <bt_init+0x4b4>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    454e:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    4550:	2206      	movs	r2, #6
    4552:	3102      	adds	r1, #2
    4554:	480c      	ldr	r0, [pc, #48]	; (4588 <bt_init+0x4d8>)
    4556:	702b      	strb	r3, [r5, #0]
    4558:	f7fc f87e 	bl	658 <memcpy>
			net_buf_unref(rsp);
    455c:	9801      	ldr	r0, [sp, #4]
    455e:	f013 faf1 	bl	17b44 <net_buf_unref>
    4562:	e7d4      	b.n	450e <bt_init+0x45e>
		net_buf_unref(rsp);
    4564:	f013 faee 	bl	17b44 <net_buf_unref>
    4568:	e753      	b.n	4412 <bt_init+0x362>
		return -EINVAL;
    456a:	f06f 0415 	mvn.w	r4, #21
    456e:	e779      	b.n	4464 <bt_init+0x3b4>
		return -ENODEV;
    4570:	f06f 0412 	mvn.w	r4, #18
    4574:	e776      	b.n	4464 <bt_init+0x3b4>
    4576:	bf00      	nop
    4578:	20001ce8 	.word	0x20001ce8
    457c:	20005e90 	.word	0x20005e90
    4580:	00019444 	.word	0x00019444
    4584:	20005f00 	.word	0x20005f00
    4588:	20005e91 	.word	0x20005e91

0000458c <init_work>:
{
    458c:	b510      	push	{r4, lr}
	err = bt_init();
    458e:	f7ff fd8f 	bl	40b0 <bt_init>
	if (ready_cb) {
    4592:	4b03      	ldr	r3, [pc, #12]	; (45a0 <init_work+0x14>)
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	b113      	cbz	r3, 459e <init_work+0x12>
}
    4598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    459c:	4718      	bx	r3
    459e:	bd10      	pop	{r4, pc}
    45a0:	200001ac 	.word	0x200001ac

000045a4 <bt_send>:
		return bt_hci_ecc_send(buf);
    45a4:	f7ff b8bc 	b.w	3720 <bt_hci_ecc_send>

000045a8 <bt_recv>:
{
    45a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45ac:	4604      	mov	r4, r0
    45ae:	b091      	sub	sp, #68	; 0x44
	pool = net_buf_pool_get(buf->pool_id);
    45b0:	7980      	ldrb	r0, [r0, #6]
    45b2:	f013 f9f5 	bl	179a0 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    45b6:	8ac3      	ldrh	r3, [r0, #22]
    45b8:	2b03      	cmp	r3, #3
		net_buf_unref(buf);
    45ba:	4620      	mov	r0, r4
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    45bc:	d804      	bhi.n	45c8 <bt_recv+0x20>
		net_buf_unref(buf);
    45be:	f013 fac1 	bl	17b44 <net_buf_unref>
		return -EINVAL;
    45c2:	f06f 0015 	mvn.w	r0, #21
    45c6:	e038      	b.n	463a <bt_recv+0x92>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    45c8:	f7ff f9c6 	bl	3958 <net_buf_user_data>
	switch (bt_buf_get_type(buf)) {
    45cc:	7803      	ldrb	r3, [r0, #0]
    45ce:	2b01      	cmp	r3, #1
    45d0:	d036      	beq.n	4640 <bt_recv+0x98>
    45d2:	2b03      	cmp	r3, #3
    45d4:	f040 829a 	bne.w	4b0c <bt_recv+0x564>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    45d8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    45da:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    45dc:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    45de:	f3c6 030b 	ubfx	r3, r6, #0, #12
    45e2:	8043      	strh	r3, [r0, #2]
	acl(buf)->id = BT_CONN_ID_INVALID;
    45e4:	4620      	mov	r0, r4
    45e6:	f7ff f9b7 	bl	3958 <net_buf_user_data>
    45ea:	23ff      	movs	r3, #255	; 0xff
    45ec:	7043      	strb	r3, [r0, #1]
	net_buf_pull(buf, sizeof(*hdr));
    45ee:	2104      	movs	r1, #4
    45f0:	f104 0008 	add.w	r0, r4, #8
    45f4:	f013 fb31 	bl	17c5a <net_buf_simple_pull>
	if (buf->len != len) {
    45f8:	89a3      	ldrh	r3, [r4, #12]
    45fa:	42ab      	cmp	r3, r5
    45fc:	d003      	beq.n	4606 <bt_recv+0x5e>
	net_buf_unref(buf);
    45fe:	4620      	mov	r0, r4
    4600:	f013 faa0 	bl	17b44 <net_buf_unref>
    4604:	e018      	b.n	4638 <bt_recv+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4606:	4620      	mov	r0, r4
    4608:	f7ff f9a6 	bl	3958 <net_buf_user_data>
    460c:	8840      	ldrh	r0, [r0, #2]
    460e:	f001 f899 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    4612:	4605      	mov	r5, r0
    4614:	2800      	cmp	r0, #0
    4616:	d0f2      	beq.n	45fe <bt_recv+0x56>
	acl(buf)->id = bt_conn_get_id(conn);
    4618:	4620      	mov	r0, r4
    461a:	f7ff f99d 	bl	3958 <net_buf_user_data>
    461e:	4607      	mov	r7, r0
    4620:	4628      	mov	r0, r5
    4622:	f001 fa57 	bl	5ad4 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    4626:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    4628:	7078      	strb	r0, [r7, #1]
	bt_conn_recv(conn, buf, flags);
    462a:	4621      	mov	r1, r4
    462c:	4628      	mov	r0, r5
    462e:	f000 fe4d 	bl	52cc <bt_conn_recv>
	bt_conn_unref(conn);
    4632:	4628      	mov	r0, r5
    4634:	f001 f8fb 	bl	582e <bt_conn_unref>
		return 0;
    4638:	2000      	movs	r0, #0
}
    463a:	b011      	add	sp, #68	; 0x44
    463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4640:	68a5      	ldr	r5, [r4, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4642:	782a      	ldrb	r2, [r5, #0]
    4644:	2a13      	cmp	r2, #19
    4646:	f200 8263 	bhi.w	4b10 <bt_recv+0x568>
    464a:	4093      	lsls	r3, r2
    464c:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4650:	f000 825e 	beq.w	4b10 <bt_recv+0x568>
    4654:	4040      	eors	r0, r0
    4656:	f380 8811 	msr	BASEPRI, r0
    465a:	f04f 0004 	mov.w	r0, #4
    465e:	df02      	svc	2
    4660:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    4662:	783e      	ldrb	r6, [r7, #0]
    4664:	2e00      	cmp	r6, #0
    4666:	d1ca      	bne.n	45fe <bt_recv+0x56>
	conn = bt_conn_lookup_handle(handle);
    4668:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    466c:	f001 f86a 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    4670:	4605      	mov	r5, r0
    4672:	b1d8      	cbz	r0, 46ac <bt_recv+0x104>
	conn->err = evt->reason;
    4674:	78fb      	ldrb	r3, [r7, #3]
    4676:	7203      	strb	r3, [r0, #8]
	k_call_stacks_analyze();
    4678:	f013 fb92 	bl	17da0 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    467c:	4631      	mov	r1, r6
    467e:	4628      	mov	r0, r5
    4680:	f000 ffd2 	bl	5628 <bt_conn_set_state>
	conn->handle = 0;
    4684:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4686:	78ae      	ldrb	r6, [r5, #2]
    4688:	b10e      	cbz	r6, 468e <bt_recv+0xe6>
	bt_conn_unref(conn);
    468a:	4628      	mov	r0, r5
    468c:	e075      	b.n	477a <bt_recv+0x1d2>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    468e:	4631      	mov	r1, r6
    4690:	1d28      	adds	r0, r5, #4
    4692:	f7ff f97b 	bl	398c <atomic_test_bit>
    4696:	b130      	cbz	r0, 46a6 <bt_recv+0xfe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4698:	4628      	mov	r0, r5
    469a:	2101      	movs	r1, #1
    469c:	f000 ffc4 	bl	5628 <bt_conn_set_state>
		bt_le_scan_update(false);
    46a0:	4630      	mov	r0, r6
    46a2:	f7ff fc1b 	bl	3edc <bt_le_scan_update>
	bt_conn_unref(conn);
    46a6:	4628      	mov	r0, r5
    46a8:	f001 f8c1 	bl	582e <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    46ac:	2106      	movs	r1, #6
    46ae:	48aa      	ldr	r0, [pc, #680]	; (4958 <bt_recv+0x3b0>)
    46b0:	f7ff f96c 	bl	398c <atomic_test_bit>
    46b4:	2800      	cmp	r0, #0
    46b6:	d0a2      	beq.n	45fe <bt_recv+0x56>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    46b8:	2105      	movs	r1, #5
    46ba:	48a7      	ldr	r0, [pc, #668]	; (4958 <bt_recv+0x3b0>)
    46bc:	f7ff f966 	bl	398c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    46c0:	2800      	cmp	r0, #0
    46c2:	d19c      	bne.n	45fe <bt_recv+0x56>
		set_advertise_enable(true);
    46c4:	2001      	movs	r0, #1
    46c6:	f7ff fb49 	bl	3d5c <set_advertise_enable>
    46ca:	e798      	b.n	45fe <bt_recv+0x56>
    46cc:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    46ce:	780b      	ldrb	r3, [r1, #0]
    46d0:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
    46d4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    46d8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
    46dc:	78cb      	ldrb	r3, [r1, #3]
    46de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
    46e2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    46e6:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
    46ea:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    46ee:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
    46f2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    46f6:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	enh.clock_accuracy = evt->clock_accuracy;
    46fa:	7c4b      	ldrb	r3, [r1, #17]
    46fc:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4700:	3104      	adds	r1, #4
    4702:	a809      	add	r0, sp, #36	; 0x24
    4704:	f7ff f92e 	bl	3964 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    4708:	2500      	movs	r5, #0
    470a:	2206      	movs	r2, #6
    470c:	a904      	add	r1, sp, #16
    470e:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    4712:	9504      	str	r5, [sp, #16]
    4714:	f8ad 5014 	strh.w	r5, [sp, #20]
    4718:	f7fb ff9e 	bl	658 <memcpy>
    471c:	2206      	movs	r2, #6
    471e:	a906      	add	r1, sp, #24
    4720:	f10d 0031 	add.w	r0, sp, #49	; 0x31
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    4724:	9506      	str	r5, [sp, #24]
    4726:	f8ad 501c 	strh.w	r5, [sp, #28]
    472a:	f7fb ff95 	bl	658 <memcpy>
	le_enh_conn_complete(&enh);
    472e:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
    4730:	f7ff fbea 	bl	3f08 <le_enh_conn_complete>
    4734:	e763      	b.n	45fe <bt_recv+0x56>
    4736:	68a0      	ldr	r0, [r4, #8]
    4738:	e7fa      	b.n	4730 <bt_recv+0x188>
    473a:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    473c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4740:	f001 f800 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    4744:	4606      	mov	r6, r0
    4746:	2800      	cmp	r0, #0
    4748:	f43f af59 	beq.w	45fe <bt_recv+0x56>
	if (!evt->status) {
    474c:	782b      	ldrb	r3, [r5, #0]
    474e:	b99b      	cbnz	r3, 4778 <bt_recv+0x1d0>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4750:	792a      	ldrb	r2, [r5, #4]
    4752:	78eb      	ldrb	r3, [r5, #3]
    4754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4758:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    475c:	79aa      	ldrb	r2, [r5, #6]
    475e:	796b      	ldrb	r3, [r5, #5]
    4760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4764:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4768:	79eb      	ldrb	r3, [r5, #7]
    476a:	7a2a      	ldrb	r2, [r5, #8]
    476c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4770:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
		notify_le_param_updated(conn);
    4774:	f000 fd6e 	bl	5254 <notify_le_param_updated>
	bt_conn_unref(conn);
    4778:	4630      	mov	r0, r6
    477a:	f001 f858 	bl	582e <bt_conn_unref>
    477e:	e73e      	b.n	45fe <bt_recv+0x56>
    4780:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    4782:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    4786:	f000 ffdd 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    478a:	4605      	mov	r5, r0
    478c:	2800      	cmp	r0, #0
    478e:	f43f af36 	beq.w	45fe <bt_recv+0x56>
	if (!evt->status) {
    4792:	7833      	ldrb	r3, [r6, #0]
    4794:	b923      	cbnz	r3, 47a0 <bt_recv+0x1f8>
		memcpy(conn->le.features, evt->features,
    4796:	2208      	movs	r2, #8
    4798:	1cf1      	adds	r1, r6, #3
    479a:	3064      	adds	r0, #100	; 0x64
    479c:	f7fb ff5c 	bl	658 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    47a0:	4e6e      	ldr	r6, [pc, #440]	; (495c <bt_recv+0x3b4>)
    47a2:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    47a6:	07d2      	lsls	r2, r2, #31
    47a8:	d50c      	bpl.n	47c4 <bt_recv+0x21c>
    47aa:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    47ae:	07db      	lsls	r3, r3, #31
    47b0:	d508      	bpl.n	47c4 <bt_recv+0x21c>
		err = hci_le_set_phy(conn);
    47b2:	4628      	mov	r0, r5
    47b4:	f7ff f9ec 	bl	3b90 <hci_le_set_phy.isra.25>
		if (!err) {
    47b8:	b920      	cbnz	r0, 47c4 <bt_recv+0x21c>
    47ba:	2180      	movs	r1, #128	; 0x80
    47bc:	1d28      	adds	r0, r5, #4
    47be:	f7ff f8d4 	bl	396a <atomic_or>
    47c2:	e762      	b.n	468a <bt_recv+0xe2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    47c4:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    47c8:	069f      	lsls	r7, r3, #26
    47ca:	d56e      	bpl.n	48aa <bt_recv+0x302>
    47cc:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    47d0:	069e      	lsls	r6, r3, #26
    47d2:	d56a      	bpl.n	48aa <bt_recv+0x302>
		err = hci_le_set_data_len(conn);
    47d4:	4628      	mov	r0, r5
    47d6:	f7ff fb37 	bl	3e48 <hci_le_set_data_len.isra.26>
		if (!err) {
    47da:	2800      	cmp	r0, #0
    47dc:	d165      	bne.n	48aa <bt_recv+0x302>
    47de:	f44f 7180 	mov.w	r1, #256	; 0x100
    47e2:	e7eb      	b.n	47bc <bt_recv+0x214>
    47e4:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    47e6:	78d9      	ldrb	r1, [r3, #3]
    47e8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    47ea:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    47ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    47f0:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    47f4:	7959      	ldrb	r1, [r3, #5]
    47f6:	791a      	ldrb	r2, [r3, #4]
    47f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    47fc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
    4800:	799a      	ldrb	r2, [r3, #6]
    4802:	79d9      	ldrb	r1, [r3, #7]
    4804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4808:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
    480c:	7a1a      	ldrb	r2, [r3, #8]
    480e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4810:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4812:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4816:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4818:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
    481c:	f000 ff92 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    4820:	4680      	mov	r8, r0
    4822:	b920      	cbnz	r0, 482e <bt_recv+0x286>
		return le_conn_param_neg_reply(handle,
    4824:	2102      	movs	r1, #2
    4826:	4628      	mov	r0, r5
    4828:	f7ff f9d2 	bl	3bd0 <le_conn_param_neg_reply>
    482c:	e6e7      	b.n	45fe <bt_recv+0x56>
	if (!le_param_req(conn, &param)) {
    482e:	a908      	add	r1, sp, #32
    4830:	f000 fd24 	bl	527c <le_param_req>
    4834:	b928      	cbnz	r0, 4842 <bt_recv+0x29a>
		err = le_conn_param_neg_reply(handle,
    4836:	211e      	movs	r1, #30
    4838:	4628      	mov	r0, r5
    483a:	f7ff f9c9 	bl	3bd0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    483e:	4640      	mov	r0, r8
    4840:	e79b      	b.n	477a <bt_recv+0x1d2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4842:	210e      	movs	r1, #14
    4844:	f242 0020 	movw	r0, #8224	; 0x2020
    4848:	f7ff f95c 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    484c:	4606      	mov	r6, r0
    484e:	2800      	cmp	r0, #0
    4850:	d0f5      	beq.n	483e <bt_recv+0x296>
	cp = net_buf_add(buf, sizeof(*cp));
    4852:	210e      	movs	r1, #14
    4854:	3008      	adds	r0, #8
    4856:	f013 f995 	bl	17b84 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    485a:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    485c:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    485e:	2100      	movs	r1, #0
    4860:	f7fb ff26 	bl	6b0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    4864:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4868:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    486a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    486e:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    4870:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4874:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    4876:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
    487a:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    487c:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    487e:	4631      	mov	r1, r6
    4880:	f242 0020 	movw	r0, #8224	; 0x2020
    4884:	f7ff f962 	bl	3b4c <bt_hci_cmd_send>
    4888:	e7d9      	b.n	483e <bt_recv+0x296>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    488a:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    488c:	8818      	ldrh	r0, [r3, #0]
    488e:	f000 ff59 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    4892:	4605      	mov	r5, r0
    4894:	2800      	cmp	r0, #0
    4896:	f43f aeb2 	beq.w	45fe <bt_recv+0x56>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    489a:	f46f 7180 	mvn.w	r1, #256	; 0x100
    489e:	3004      	adds	r0, #4
    48a0:	f7ff f881 	bl	39a6 <atomic_and>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    48a4:	05c0      	lsls	r0, r0, #23
    48a6:	f57f aef0 	bpl.w	468a <bt_recv+0xe2>
	update_conn_param(conn);
    48aa:	4628      	mov	r0, r5
    48ac:	f7ff f88c 	bl	39c8 <update_conn_param>
    48b0:	e6eb      	b.n	468a <bt_recv+0xe2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    48b2:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    48b4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    48b8:	f000 ff44 	bl	5744 <bt_conn_lookup_handle>
	if (!conn) {
    48bc:	4605      	mov	r5, r0
    48be:	2800      	cmp	r0, #0
    48c0:	f43f ae9d 	beq.w	45fe <bt_recv+0x56>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    48c4:	1d06      	adds	r6, r0, #4
    48c6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    48ca:	4630      	mov	r0, r6
    48cc:	f7ff f86b 	bl	39a6 <atomic_and>
    48d0:	0601      	lsls	r1, r0, #24
    48d2:	f57f aeda 	bpl.w	468a <bt_recv+0xe2>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    48d6:	4b21      	ldr	r3, [pc, #132]	; (495c <bt_recv+0x3b4>)
    48d8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    48dc:	069a      	lsls	r2, r3, #26
    48de:	d5e4      	bpl.n	48aa <bt_recv+0x302>
    48e0:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    48e4:	069b      	lsls	r3, r3, #26
    48e6:	d5e0      	bpl.n	48aa <bt_recv+0x302>
		err = hci_le_set_data_len(conn);
    48e8:	4628      	mov	r0, r5
    48ea:	f7ff faad 	bl	3e48 <hci_le_set_data_len.isra.26>
		if (!err) {
    48ee:	2800      	cmp	r0, #0
    48f0:	d1db      	bne.n	48aa <bt_recv+0x302>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    48f2:	f44f 7180 	mov.w	r1, #256	; 0x100
    48f6:	4630      	mov	r0, r6
    48f8:	e761      	b.n	47be <bt_recv+0x216>
    48fa:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    48fc:	4816      	ldr	r0, [pc, #88]	; (4958 <bt_recv+0x3b0>)
    48fe:	f06f 0110 	mvn.w	r1, #16
    4902:	f7ff f850 	bl	39a6 <atomic_and>
	if (!evt->status) {
    4906:	7833      	ldrb	r3, [r6, #0]
    4908:	b943      	cbnz	r3, 491c <bt_recv+0x374>
		memcpy(pub_key, evt->key, 64);
    490a:	1c71      	adds	r1, r6, #1
    490c:	2240      	movs	r2, #64	; 0x40
    490e:	4814      	ldr	r0, [pc, #80]	; (4960 <bt_recv+0x3b8>)
    4910:	f7fb fea2 	bl	658 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4914:	2108      	movs	r1, #8
    4916:	4810      	ldr	r0, [pc, #64]	; (4958 <bt_recv+0x3b0>)
    4918:	f7ff f827 	bl	396a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    491c:	4b11      	ldr	r3, [pc, #68]	; (4964 <bt_recv+0x3bc>)
    491e:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    4920:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4922:	2d00      	cmp	r5, #0
    4924:	f43f ae6b 	beq.w	45fe <bt_recv+0x56>
		cb->func(evt->status ? NULL : evt->key);
    4928:	7832      	ldrb	r2, [r6, #0]
    492a:	682b      	ldr	r3, [r5, #0]
    492c:	2a00      	cmp	r2, #0
    492e:	bf0c      	ite	eq
    4930:	4638      	moveq	r0, r7
    4932:	2000      	movne	r0, #0
    4934:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4936:	686d      	ldr	r5, [r5, #4]
    4938:	e7f3      	b.n	4922 <bt_recv+0x37a>
	if (dh_key_cb) {
    493a:	4d0b      	ldr	r5, [pc, #44]	; (4968 <bt_recv+0x3c0>)
    493c:	68a0      	ldr	r0, [r4, #8]
    493e:	682a      	ldr	r2, [r5, #0]
    4940:	2a00      	cmp	r2, #0
    4942:	f43f ae5c 	beq.w	45fe <bt_recv+0x56>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4946:	7803      	ldrb	r3, [r0, #0]
    4948:	b923      	cbnz	r3, 4954 <bt_recv+0x3ac>
    494a:	3001      	adds	r0, #1
    494c:	4790      	blx	r2
		dh_key_cb = NULL;
    494e:	2300      	movs	r3, #0
    4950:	602b      	str	r3, [r5, #0]
    4952:	e654      	b.n	45fe <bt_recv+0x56>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4954:	2000      	movs	r0, #0
    4956:	e7f9      	b.n	494c <bt_recv+0x3a4>
    4958:	20005f00 	.word	0x20005f00
    495c:	20005e90 	.word	0x20005e90
    4960:	20000168 	.word	0x20000168
    4964:	200001a8 	.word	0x200001a8
    4968:	20000164 	.word	0x20000164
	u8_t num_reports = net_buf_pull_u8(buf);
    496c:	4630      	mov	r0, r6
    496e:	f013 f97c 	bl	17c6a <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    4972:	f8df a208 	ldr.w	sl, [pc, #520]	; 4b7c <bt_recv+0x5d4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4976:	f8df 9208 	ldr.w	r9, [pc, #520]	; 4b80 <bt_recv+0x5d8>
	u8_t num_reports = net_buf_pull_u8(buf);
    497a:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    497c:	9b01      	ldr	r3, [sp, #4]
    497e:	2b00      	cmp	r3, #0
    4980:	f43f ae3d 	beq.w	45fe <bt_recv+0x56>
		info = (void *)buf->data;
    4984:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    4986:	2109      	movs	r1, #9
    4988:	4630      	mov	r0, r6
    498a:	f013 f966 	bl	17c5a <net_buf_simple_pull>
		rssi = info->data[info->length];
    498e:	7a3b      	ldrb	r3, [r7, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4990:	46b8      	mov	r8, r7
		rssi = info->data[info->length];
    4992:	443b      	add	r3, r7
			bt_addr_le_copy(&id_addr, &info->addr);
    4994:	a808      	add	r0, sp, #32
		rssi = info->data[info->length];
    4996:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    499a:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    499e:	3b02      	subs	r3, #2
    49a0:	2b01      	cmp	r3, #1
			bt_addr_le_copy(&id_addr, &info->addr);
    49a2:	4641      	mov	r1, r8
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    49a4:	f200 809d 	bhi.w	4ae2 <bt_recv+0x53a>
			bt_addr_le_copy(&id_addr, &info->addr);
    49a8:	f7fe ffdc 	bl	3964 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    49ac:	f89d 3020 	ldrb.w	r3, [sp, #32]
    49b0:	3b02      	subs	r3, #2
    49b2:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    49b6:	f8da 3000 	ldr.w	r3, [sl]
    49ba:	b1cb      	cbz	r3, 49f0 <bt_recv+0x448>
	state->offset = net_buf_simple_headroom(buf);
    49bc:	4630      	mov	r0, r6
    49be:	f013 f981 	bl	17cc4 <net_buf_simple_headroom>
	state->len = buf->len;
    49c2:	89a3      	ldrh	r3, [r4, #12]
    49c4:	9303      	str	r3, [sp, #12]
			buf->len = info->length;
    49c6:	7a3b      	ldrb	r3, [r7, #8]
    49c8:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    49ca:	9002      	str	r0, [sp, #8]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    49cc:	4633      	mov	r3, r6
    49ce:	783a      	ldrb	r2, [r7, #0]
    49d0:	f8da 5000 	ldr.w	r5, [sl]
    49d4:	fa4f f18b 	sxtb.w	r1, fp
    49d8:	a808      	add	r0, sp, #32
    49da:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
    49dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    49e0:	f106 0308 	add.w	r3, r6, #8
    49e4:	fa13 f382 	uxtah	r3, r3, r2
    49e8:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    49ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    49ee:	81a3      	strh	r3, [r4, #12]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    49f0:	2108      	movs	r1, #8
    49f2:	4648      	mov	r0, r9
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    49f4:	783d      	ldrb	r5, [r7, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    49f6:	f7fe ffc9 	bl	398c <atomic_test_bit>
    49fa:	4683      	mov	fp, r0
    49fc:	2800      	cmp	r0, #0
    49fe:	d166      	bne.n	4ace <bt_recv+0x526>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4a00:	2d01      	cmp	r5, #1
    4a02:	d864      	bhi.n	4ace <bt_recv+0x526>
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    4a04:	2101      	movs	r1, #1
    4a06:	a808      	add	r0, sp, #32
    4a08:	f000 fee8 	bl	57dc <bt_conn_lookup_state_le>
	if (!conn) {
    4a0c:	4605      	mov	r5, r0
    4a0e:	2800      	cmp	r0, #0
    4a10:	d05d      	beq.n	4ace <bt_recv+0x526>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4a12:	2107      	movs	r1, #7
    4a14:	4648      	mov	r0, r9
    4a16:	f7fe ffb9 	bl	398c <atomic_test_bit>
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d164      	bne.n	4ae8 <bt_recv+0x540>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4a1e:	2102      	movs	r1, #2
    4a20:	4648      	mov	r0, r9
    4a22:	f7fe ffb3 	bl	398c <atomic_test_bit>
    4a26:	b110      	cbz	r0, 4a2e <bt_recv+0x486>
			set_random_address(&bt_dev.id_addr.a);
    4a28:	4852      	ldr	r0, [pc, #328]	; (4b74 <bt_recv+0x5cc>)
    4a2a:	f7ff f923 	bl	3c74 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4a2e:	4952      	ldr	r1, [pc, #328]	; (4b78 <bt_recv+0x5d0>)
    4a30:	f105 004b 	add.w	r0, r5, #75	; 0x4b
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4a34:	f105 0b52 	add.w	fp, r5, #82	; 0x52
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4a38:	f7fe ff94 	bl	3964 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4a3c:	4641      	mov	r1, r8
    4a3e:	4658      	mov	r0, fp
    4a40:	f7fe ff90 	bl	3964 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    4a44:	2119      	movs	r1, #25
    4a46:	f242 000d 	movw	r0, #8205	; 0x200d
    4a4a:	f7ff f85b 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    4a4e:	4603      	mov	r3, r0
    4a50:	2800      	cmp	r0, #0
    4a52:	d04e      	beq.n	4af2 <bt_recv+0x54a>
	cp = net_buf_add(buf, sizeof(*cp));
    4a54:	2119      	movs	r1, #25
    4a56:	3008      	adds	r0, #8
    4a58:	9303      	str	r3, [sp, #12]
    4a5a:	f013 f893 	bl	17b84 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    4a5e:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    4a60:	4680      	mov	r8, r0
	memset(cp, 0, sizeof(*cp));
    4a62:	2100      	movs	r1, #0
    4a64:	f7fb fe24 	bl	6b0 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4a68:	2200      	movs	r2, #0
    4a6a:	2160      	movs	r1, #96	; 0x60
    4a6c:	f888 1000 	strb.w	r1, [r8]
    4a70:	f888 2001 	strb.w	r2, [r8, #1]
	cp->scan_window = cp->scan_interval;
    4a74:	f888 1002 	strb.w	r1, [r8, #2]
    4a78:	f888 2003 	strb.w	r2, [r8, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4a7c:	4659      	mov	r1, fp
    4a7e:	f108 0005 	add.w	r0, r8, #5
	cp->scan_window = cp->scan_interval;
    4a82:	9202      	str	r2, [sp, #8]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4a84:	f7fe ff6e 	bl	3964 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    4a88:	f895 104b 	ldrb.w	r1, [r5, #75]	; 0x4b
    4a8c:	f888 100c 	strb.w	r1, [r8, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    4a90:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
    4a94:	f8a8 100d 	strh.w	r1, [r8, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4a98:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    4a9c:	f8a8 100f 	strh.w	r1, [r8, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4aa0:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
    4aa4:	f8a8 1011 	strh.w	r1, [r8, #17]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4aa8:	9b03      	ldr	r3, [sp, #12]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    4aaa:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
    4aae:	f8a8 1013 	strh.w	r1, [r8, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4ab2:	9a02      	ldr	r2, [sp, #8]
    4ab4:	4619      	mov	r1, r3
    4ab6:	f242 000d 	movw	r0, #8205	; 0x200d
    4aba:	f7ff f8a3 	bl	3c04 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    4abe:	b9c0      	cbnz	r0, 4af2 <bt_recv+0x54a>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4ac0:	4628      	mov	r0, r5
    4ac2:	2102      	movs	r1, #2
    4ac4:	f000 fdb0 	bl	5628 <bt_conn_set_state>
	bt_conn_unref(conn);
    4ac8:	4628      	mov	r0, r5
    4aca:	f000 feb0 	bl	582e <bt_conn_unref>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4ace:	7a39      	ldrb	r1, [r7, #8]
    4ad0:	4630      	mov	r0, r6
    4ad2:	3101      	adds	r1, #1
    4ad4:	f013 f8c1 	bl	17c5a <net_buf_simple_pull>
    4ad8:	9b01      	ldr	r3, [sp, #4]
    4ada:	3b01      	subs	r3, #1
    4adc:	b2db      	uxtb	r3, r3
    4ade:	9301      	str	r3, [sp, #4]
    4ae0:	e74c      	b.n	497c <bt_recv+0x3d4>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    4ae2:	f7fe ff3f 	bl	3964 <bt_addr_le_copy>
    4ae6:	e766      	b.n	49b6 <bt_recv+0x40e>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    4ae8:	4658      	mov	r0, fp
    4aea:	f7ff f903 	bl	3cf4 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4aee:	2800      	cmp	r0, #0
    4af0:	d095      	beq.n	4a1e <bt_recv+0x476>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    4af2:	231f      	movs	r3, #31
    4af4:	722b      	strb	r3, [r5, #8]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4af6:	2100      	movs	r1, #0
    4af8:	4628      	mov	r0, r5
    4afa:	f000 fd95 	bl	5628 <bt_conn_set_state>
	bt_conn_unref(conn);
    4afe:	4628      	mov	r0, r5
    4b00:	f000 fe95 	bl	582e <bt_conn_unref>
	bt_le_scan_update(false);
    4b04:	2000      	movs	r0, #0
    4b06:	f7ff f9e9 	bl	3edc <bt_le_scan_update>
    4b0a:	e7e0      	b.n	4ace <bt_recv+0x526>
		net_buf_unref(buf);
    4b0c:	4620      	mov	r0, r4
    4b0e:	e556      	b.n	45be <bt_recv+0x16>
	net_buf_pull(buf, sizeof(*hdr));
    4b10:	f104 0608 	add.w	r6, r4, #8
    4b14:	2102      	movs	r1, #2
    4b16:	4630      	mov	r0, r6
    4b18:	f013 f89f 	bl	17c5a <net_buf_simple_pull>
	switch (hdr->evt) {
    4b1c:	782b      	ldrb	r3, [r5, #0]
    4b1e:	2b05      	cmp	r3, #5
    4b20:	f43f ad9e 	beq.w	4660 <bt_recv+0xb8>
    4b24:	2b3e      	cmp	r3, #62	; 0x3e
    4b26:	f47f ad6a 	bne.w	45fe <bt_recv+0x56>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    4b2a:	68a5      	ldr	r5, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4b2c:	2101      	movs	r1, #1
    4b2e:	4630      	mov	r0, r6
    4b30:	f013 f893 	bl	17c5a <net_buf_simple_pull>
	switch (evt->subevent) {
    4b34:	782b      	ldrb	r3, [r5, #0]
    4b36:	3b01      	subs	r3, #1
    4b38:	2b0b      	cmp	r3, #11
    4b3a:	f63f ad60 	bhi.w	45fe <bt_recv+0x56>
    4b3e:	a201      	add	r2, pc, #4	; (adr r2, 4b44 <bt_recv+0x59c>)
    4b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b44:	000046cd 	.word	0x000046cd
    4b48:	0000496d 	.word	0x0000496d
    4b4c:	0000473b 	.word	0x0000473b
    4b50:	00004781 	.word	0x00004781
    4b54:	000045ff 	.word	0x000045ff
    4b58:	000047e5 	.word	0x000047e5
    4b5c:	0000488b 	.word	0x0000488b
    4b60:	000048fb 	.word	0x000048fb
    4b64:	0000493b 	.word	0x0000493b
    4b68:	00004737 	.word	0x00004737
    4b6c:	000045ff 	.word	0x000045ff
    4b70:	000048b3 	.word	0x000048b3
    4b74:	20005e91 	.word	0x20005e91
    4b78:	20005e90 	.word	0x20005e90
    4b7c:	200001b0 	.word	0x200001b0
    4b80:	20005f00 	.word	0x20005f00

00004b84 <bt_recv_prio>:
{
    4b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b88:	4604      	mov	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4b8a:	6886      	ldr	r6, [r0, #8]
    4b8c:	f7fe fee4 	bl	3958 <net_buf_user_data>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4b90:	7803      	ldrb	r3, [r0, #0]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d005      	beq.n	4ba2 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4b96:	4040      	eors	r0, r0
    4b98:	f380 8811 	msr	BASEPRI, r0
    4b9c:	f04f 0004 	mov.w	r0, #4
    4ba0:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4ba2:	89a2      	ldrh	r2, [r4, #12]
    4ba4:	2a01      	cmp	r2, #1
    4ba6:	d9f6      	bls.n	4b96 <bt_recv_prio+0x12>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4ba8:	7832      	ldrb	r2, [r6, #0]
    4baa:	2a13      	cmp	r2, #19
    4bac:	d8f3      	bhi.n	4b96 <bt_recv_prio+0x12>
    4bae:	4093      	lsls	r3, r2
    4bb0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4bb4:	d0ef      	beq.n	4b96 <bt_recv_prio+0x12>
	net_buf_pull(buf, sizeof(*hdr));
    4bb6:	f104 0508 	add.w	r5, r4, #8
    4bba:	2102      	movs	r1, #2
    4bbc:	4628      	mov	r0, r5
    4bbe:	f013 f84c 	bl	17c5a <net_buf_simple_pull>
	switch (hdr->evt) {
    4bc2:	7833      	ldrb	r3, [r6, #0]
    4bc4:	2b0f      	cmp	r3, #15
    4bc6:	d018      	beq.n	4bfa <bt_recv_prio+0x76>
    4bc8:	2b13      	cmp	r3, #19
    4bca:	d023      	beq.n	4c14 <bt_recv_prio+0x90>
    4bcc:	2b0e      	cmp	r3, #14
    4bce:	d161      	bne.n	4c94 <bt_recv_prio+0x110>
	u8_t status, ncmd = evt->ncmd;
    4bd0:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4bd2:	2103      	movs	r1, #3
    4bd4:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    4bd6:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4bd8:	f013 f83f 	bl	17c5a <net_buf_simple_pull>
	status = buf->data[0];
    4bdc:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4bde:	4621      	mov	r1, r4
    4be0:	7818      	ldrb	r0, [r3, #0]
    4be2:	f7fe feff 	bl	39e4 <hci_cmd_done.isra.15>
	if (ncmd) {
    4be6:	b116      	cbz	r6, 4bee <bt_recv_prio+0x6a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4be8:	482c      	ldr	r0, [pc, #176]	; (4c9c <bt_recv_prio+0x118>)
    4bea:	f013 fd55 	bl	18698 <_impl_k_sem_give>
	net_buf_unref(buf);
    4bee:	4620      	mov	r0, r4
    4bf0:	f012 ffa8 	bl	17b44 <net_buf_unref>
}
    4bf4:	2000      	movs	r0, #0
    4bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4bfa:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4bfc:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    4bfe:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    4c00:	4628      	mov	r0, r5
    4c02:	f013 f82a 	bl	17c5a <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4c06:	4621      	mov	r1, r4
    4c08:	7830      	ldrb	r0, [r6, #0]
    4c0a:	f7fe feeb 	bl	39e4 <hci_cmd_done.isra.15>
	if (ncmd) {
    4c0e:	2f00      	cmp	r7, #0
    4c10:	d0ed      	beq.n	4bee <bt_recv_prio+0x6a>
    4c12:	e7e9      	b.n	4be8 <bt_recv_prio+0x64>
    4c14:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4c18:	2700      	movs	r7, #0
    4c1a:	f898 3000 	ldrb.w	r3, [r8]
    4c1e:	429f      	cmp	r7, r3
    4c20:	dae5      	bge.n	4bee <bt_recv_prio+0x6a>
    4c22:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4c26:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4c2a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    4c2e:	f04f 0320 	mov.w	r3, #32
    4c32:	f3ef 8911 	mrs	r9, BASEPRI
    4c36:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4c3a:	f000 fd83 	bl	5744 <bt_conn_lookup_handle>
		if (!conn) {
    4c3e:	4605      	mov	r5, r0
    4c40:	b918      	cbnz	r0, 4c4a <bt_recv_prio+0xc6>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4c42:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    4c46:	3701      	adds	r7, #1
    4c48:	e7e7      	b.n	4c1a <bt_recv_prio+0x96>
    4c4a:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    4c4e:	f100 0918 	add.w	r9, r0, #24
		while (count--) {
    4c52:	b196      	cbz	r6, 4c7a <bt_recv_prio+0xf6>
	__asm__ volatile(
    4c54:	f04f 0320 	mov.w	r3, #32
    4c58:	f3ef 8011 	mrs	r0, BASEPRI
    4c5c:	f383 8811 	msr	BASEPRI, r3
    4c60:	6929      	ldr	r1, [r5, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4c62:	b129      	cbz	r1, 4c70 <bt_recv_prio+0xec>
	if (list->tail == node) {
    4c64:	696a      	ldr	r2, [r5, #20]
	list->head = node->next;
    4c66:	680b      	ldr	r3, [r1, #0]
    4c68:	612b      	str	r3, [r5, #16]
	if (list->tail == node) {
    4c6a:	4291      	cmp	r1, r2
		list->tail = list->head;
    4c6c:	bf08      	it	eq
    4c6e:	616b      	streq	r3, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4c70:	f380 8811 	msr	BASEPRI, r0
    4c74:	3e01      	subs	r6, #1
    4c76:	b2b6      	uxth	r6, r6
			if (!node) {
    4c78:	b919      	cbnz	r1, 4c82 <bt_recv_prio+0xfe>
		bt_conn_unref(conn);
    4c7a:	4628      	mov	r0, r5
    4c7c:	f000 fdd7 	bl	582e <bt_conn_unref>
    4c80:	e7e1      	b.n	4c46 <bt_recv_prio+0xc2>
			k_fifo_put(&conn->tx_notify, node);
    4c82:	4648      	mov	r0, r9
    4c84:	f013 fa71 	bl	1816a <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4c88:	4628      	mov	r0, r5
    4c8a:	f000 fadf 	bl	524c <bt_conn_get_pkts>
    4c8e:	f013 fd03 	bl	18698 <_impl_k_sem_give>
    4c92:	e7de      	b.n	4c52 <bt_recv_prio+0xce>
		net_buf_unref(buf);
    4c94:	4620      	mov	r0, r4
    4c96:	f012 ff55 	bl	17b44 <net_buf_unref>
    4c9a:	e77c      	b.n	4b96 <bt_recv_prio+0x12>
    4c9c:	20005f38 	.word	0x20005f38

00004ca0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    4ca0:	4a08      	ldr	r2, [pc, #32]	; (4cc4 <bt_hci_driver_register+0x24>)
    4ca2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    4ca6:	b93b      	cbnz	r3, 4cb8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    4ca8:	6881      	ldr	r1, [r0, #8]
    4caa:	b141      	cbz	r1, 4cbe <bt_hci_driver_register+0x1e>
    4cac:	68c1      	ldr	r1, [r0, #12]
    4cae:	b131      	cbz	r1, 4cbe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    4cb0:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    4cb4:	4618      	mov	r0, r3
    4cb6:	4770      	bx	lr
		return -EALREADY;
    4cb8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4cbc:	4770      	bx	lr
		return -EINVAL;
    4cbe:	f06f 0015 	mvn.w	r0, #21
}
    4cc2:	4770      	bx	lr
    4cc4:	20005e90 	.word	0x20005e90

00004cc8 <bt_enable>:
{
    4cc8:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    4cca:	4c21      	ldr	r4, [pc, #132]	; (4d50 <bt_enable+0x88>)
    4ccc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
{
    4cd0:	b086      	sub	sp, #24
    4cd2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d035      	beq.n	4d44 <bt_enable+0x7c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4cd8:	2101      	movs	r1, #1
    4cda:	f104 0070 	add.w	r0, r4, #112	; 0x70
    4cde:	f7fe fe44 	bl	396a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4ce2:	f010 0001 	ands.w	r0, r0, #1
    4ce6:	d130      	bne.n	4d4a <bt_enable+0x82>
	ready_cb = cb;
    4ce8:	4b1a      	ldr	r3, [pc, #104]	; (4d54 <bt_enable+0x8c>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    4cea:	491b      	ldr	r1, [pc, #108]	; (4d58 <bt_enable+0x90>)
    4cec:	601e      	str	r6, [r3, #0]
    4cee:	f06f 0308 	mvn.w	r3, #8
    4cf2:	f44f 7220 	mov.w	r2, #640	; 0x280
    4cf6:	9005      	str	r0, [sp, #20]
    4cf8:	9004      	str	r0, [sp, #16]
    4cfa:	9303      	str	r3, [sp, #12]
    4cfc:	9002      	str	r0, [sp, #8]
    4cfe:	4b17      	ldr	r3, [pc, #92]	; (4d5c <bt_enable+0x94>)
    4d00:	9001      	str	r0, [sp, #4]
    4d02:	9000      	str	r0, [sp, #0]
    4d04:	4816      	ldr	r0, [pc, #88]	; (4d60 <bt_enable+0x98>)
    4d06:	f013 fee5 	bl	18ad4 <_impl_k_thread_create>
		bt_hci_ecc_init();
    4d0a:	f7fe fda3 	bl	3854 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    4d0e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    4d12:	689b      	ldr	r3, [r3, #8]
    4d14:	4798      	blx	r3
	if (err) {
    4d16:	4605      	mov	r5, r0
    4d18:	b988      	cbnz	r0, 4d3e <bt_enable+0x76>
	if (!cb) {
    4d1a:	b926      	cbnz	r6, 4d26 <bt_enable+0x5e>
}
    4d1c:	b006      	add	sp, #24
    4d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    4d22:	f7ff b9c5 	b.w	40b0 <bt_init>
    4d26:	2101      	movs	r1, #1
    4d28:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    4d2c:	f7fe fe1d 	bl	396a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4d30:	07c3      	lsls	r3, r0, #31
    4d32:	d404      	bmi.n	4d3e <bt_enable+0x76>
		k_queue_append(&work_q->queue, work);
    4d34:	f104 0164 	add.w	r1, r4, #100	; 0x64
    4d38:	480a      	ldr	r0, [pc, #40]	; (4d64 <bt_enable+0x9c>)
    4d3a:	f013 fa16 	bl	1816a <k_queue_append>
}
    4d3e:	4628      	mov	r0, r5
    4d40:	b006      	add	sp, #24
    4d42:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4d44:	f06f 0512 	mvn.w	r5, #18
    4d48:	e7f9      	b.n	4d3e <bt_enable+0x76>
		return -EALREADY;
    4d4a:	f06f 0544 	mvn.w	r5, #68	; 0x44
    4d4e:	e7f6      	b.n	4d3e <bt_enable+0x76>
    4d50:	20005e90 	.word	0x20005e90
    4d54:	200001ac 	.word	0x200001ac
    4d58:	20002250 	.word	0x20002250
    4d5c:	00003a19 	.word	0x00003a19
    4d60:	200001b4 	.word	0x200001b4
    4d64:	20001dd8 	.word	0x20001dd8

00004d68 <bt_addr_le_is_bonded>:
}
    4d68:	2000      	movs	r0, #0
    4d6a:	4770      	bx	lr

00004d6c <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    4d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4d6e:	461e      	mov	r6, r3
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4d70:	7803      	ldrb	r3, [r0, #0]
    4d72:	f013 0f01 	tst.w	r3, #1
{
    4d76:	4605      	mov	r5, r0
    4d78:	460c      	mov	r4, r1
    4d7a:	8843      	ldrh	r3, [r0, #2]
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4d7c:	d10a      	bne.n	4d94 <bt_le_adv_start+0x28>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4d7e:	4947      	ldr	r1, [pc, #284]	; (4e9c <bt_le_adv_start+0x130>)
    4d80:	7b89      	ldrb	r1, [r1, #14]
    4d82:	2908      	cmp	r1, #8
    4d84:	d806      	bhi.n	4d94 <bt_le_adv_start+0x28>
    4d86:	2b9f      	cmp	r3, #159	; 0x9f
    4d88:	d804      	bhi.n	4d94 <bt_le_adv_start+0x28>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    4d8a:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    4d8e:	4620      	mov	r0, r4
    4d90:	b004      	add	sp, #16
    4d92:	bd70      	pop	{r4, r5, r6, pc}
	if (param->interval_min > param->interval_max ||
    4d94:	88a9      	ldrh	r1, [r5, #4]
    4d96:	428b      	cmp	r3, r1
    4d98:	d8f7      	bhi.n	4d8a <bt_le_adv_start+0x1e>
    4d9a:	2b1f      	cmp	r3, #31
    4d9c:	d9f5      	bls.n	4d8a <bt_le_adv_start+0x1e>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    4d9e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    4da2:	d8f2      	bhi.n	4d8a <bt_le_adv_start+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4da4:	2105      	movs	r1, #5
    4da6:	483e      	ldr	r0, [pc, #248]	; (4ea0 <bt_le_adv_start+0x134>)
    4da8:	f7fe fdf0 	bl	398c <atomic_test_bit>
    4dac:	b110      	cbz	r0, 4db4 <bt_le_adv_start+0x48>
		return -EALREADY;
    4dae:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4db2:	e7ec      	b.n	4d8e <bt_le_adv_start+0x22>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    4db4:	4621      	mov	r1, r4
    4db6:	f242 0008 	movw	r0, #8200	; 0x2008
    4dba:	f7fe fff9 	bl	3db0 <set_ad>
	if (err) {
    4dbe:	4604      	mov	r4, r0
    4dc0:	2800      	cmp	r0, #0
    4dc2:	d1e4      	bne.n	4d8e <bt_le_adv_start+0x22>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4dc4:	2e00      	cmp	r6, #0
    4dc6:	d146      	bne.n	4e56 <bt_le_adv_start+0xea>
    4dc8:	782b      	ldrb	r3, [r5, #0]
    4dca:	07d9      	lsls	r1, r3, #31
    4dcc:	d443      	bmi.n	4e56 <bt_le_adv_start+0xea>
	memset(&set_param, 0, sizeof(set_param));
    4dce:	220f      	movs	r2, #15
    4dd0:	2100      	movs	r1, #0
    4dd2:	4668      	mov	r0, sp
    4dd4:	f7fb fc6c 	bl	6b0 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    4dd8:	886b      	ldrh	r3, [r5, #2]
    4dda:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    4dde:	88ab      	ldrh	r3, [r5, #4]
    4de0:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    4de4:	2307      	movs	r3, #7
    4de6:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    4dea:	782b      	ldrb	r3, [r5, #0]
    4dec:	07da      	lsls	r2, r3, #31
    4dee:	d53c      	bpl.n	4e6a <bt_le_adv_start+0xfe>
			if (atomic_test_bit(bt_dev.flags,
    4df0:	2102      	movs	r1, #2
    4df2:	482b      	ldr	r0, [pc, #172]	; (4ea0 <bt_le_adv_start+0x134>)
    4df4:	4c29      	ldr	r4, [pc, #164]	; (4e9c <bt_le_adv_start+0x130>)
    4df6:	f7fe fdc9 	bl	398c <atomic_test_bit>
    4dfa:	b110      	cbz	r0, 4e02 <bt_le_adv_start+0x96>
				set_random_address(&bt_dev.id_addr.a);
    4dfc:	1c60      	adds	r0, r4, #1
    4dfe:	f7fe ff39 	bl	3c74 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    4e02:	7823      	ldrb	r3, [r4, #0]
    4e04:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    4e08:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    4e0a:	210f      	movs	r1, #15
    4e0c:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    4e10:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    4e14:	f7fe fe76 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    4e18:	4604      	mov	r4, r0
    4e1a:	2800      	cmp	r0, #0
    4e1c:	d03b      	beq.n	4e96 <bt_le_adv_start+0x12a>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    4e1e:	220f      	movs	r2, #15
    4e20:	4669      	mov	r1, sp
    4e22:	3008      	adds	r0, #8
    4e24:	f012 feb4 	bl	17b90 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    4e28:	4621      	mov	r1, r4
    4e2a:	2200      	movs	r2, #0
    4e2c:	f242 0006 	movw	r0, #8198	; 0x2006
    4e30:	f7fe fee8 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    4e34:	4604      	mov	r4, r0
    4e36:	2800      	cmp	r0, #0
    4e38:	d1a9      	bne.n	4d8e <bt_le_adv_start+0x22>
	err = set_advertise_enable(true);
    4e3a:	2001      	movs	r0, #1
    4e3c:	f7fe ff8e 	bl	3d5c <set_advertise_enable>
	if (err) {
    4e40:	4604      	mov	r4, r0
    4e42:	2800      	cmp	r0, #0
    4e44:	d1a3      	bne.n	4d8e <bt_le_adv_start+0x22>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    4e46:	782b      	ldrb	r3, [r5, #0]
    4e48:	079b      	lsls	r3, r3, #30
    4e4a:	d4a0      	bmi.n	4d8e <bt_le_adv_start+0x22>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4e4c:	2140      	movs	r1, #64	; 0x40
    4e4e:	4814      	ldr	r0, [pc, #80]	; (4ea0 <bt_le_adv_start+0x134>)
    4e50:	f7fe fd8b 	bl	396a <atomic_or>
    4e54:	e79b      	b.n	4d8e <bt_le_adv_start+0x22>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    4e56:	9a08      	ldr	r2, [sp, #32]
    4e58:	4631      	mov	r1, r6
    4e5a:	f242 0009 	movw	r0, #8201	; 0x2009
    4e5e:	f7fe ffa7 	bl	3db0 <set_ad>
		if (err) {
    4e62:	4604      	mov	r4, r0
    4e64:	2800      	cmp	r0, #0
    4e66:	d0b2      	beq.n	4dce <bt_le_adv_start+0x62>
    4e68:	e791      	b.n	4d8e <bt_le_adv_start+0x22>
		if (param->own_addr) {
    4e6a:	68a8      	ldr	r0, [r5, #8]
    4e6c:	b170      	cbz	r0, 4e8c <bt_le_adv_start+0x120>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    4e6e:	7943      	ldrb	r3, [r0, #5]
    4e70:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4e74:	d189      	bne.n	4d8a <bt_le_adv_start+0x1e>
			err = set_random_address(param->own_addr);
    4e76:	f7fe fefd 	bl	3c74 <set_random_address>
			err = le_set_private_addr();
    4e7a:	4604      	mov	r4, r0
		if (err) {
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d186      	bne.n	4d8e <bt_le_adv_start+0x22>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    4e80:	2301      	movs	r3, #1
    4e82:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    4e86:	b126      	cbz	r6, 4e92 <bt_le_adv_start+0x126>
			set_param.type = BT_LE_ADV_SCAN_IND;
    4e88:	2302      	movs	r3, #2
    4e8a:	e7be      	b.n	4e0a <bt_le_adv_start+0x9e>
			err = le_set_private_addr();
    4e8c:	f7fe ff20 	bl	3cd0 <le_set_private_addr>
    4e90:	e7f3      	b.n	4e7a <bt_le_adv_start+0x10e>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    4e92:	2303      	movs	r3, #3
    4e94:	e7b9      	b.n	4e0a <bt_le_adv_start+0x9e>
		return -ENOBUFS;
    4e96:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4e9a:	e778      	b.n	4d8e <bt_le_adv_start+0x22>
    4e9c:	20005e90 	.word	0x20005e90
    4ea0:	20005f00 	.word	0x20005f00

00004ea4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    4ea4:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4ea6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    4eaa:	4810      	ldr	r0, [pc, #64]	; (4eec <bt_le_adv_stop+0x48>)
    4eac:	f7fe fd7b 	bl	39a6 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4eb0:	2105      	movs	r1, #5
    4eb2:	480e      	ldr	r0, [pc, #56]	; (4eec <bt_le_adv_stop+0x48>)
    4eb4:	f7fe fd6a 	bl	398c <atomic_test_bit>
    4eb8:	b910      	cbnz	r0, 4ec0 <bt_le_adv_stop+0x1c>
		return 0;
    4eba:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    4ebc:	4620      	mov	r0, r4
    4ebe:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    4ec0:	2000      	movs	r0, #0
    4ec2:	f7fe ff4b 	bl	3d5c <set_advertise_enable>
	if (err) {
    4ec6:	4604      	mov	r4, r0
    4ec8:	2800      	cmp	r0, #0
    4eca:	d1f7      	bne.n	4ebc <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4ecc:	2107      	movs	r1, #7
    4ece:	4807      	ldr	r0, [pc, #28]	; (4eec <bt_le_adv_stop+0x48>)
    4ed0:	f7fe fd5c 	bl	398c <atomic_test_bit>
    4ed4:	2800      	cmp	r0, #0
    4ed6:	d0f0      	beq.n	4eba <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    4ed8:	2109      	movs	r1, #9
    4eda:	4804      	ldr	r0, [pc, #16]	; (4eec <bt_le_adv_stop+0x48>)
    4edc:	f7fe fd56 	bl	398c <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4ee0:	2800      	cmp	r0, #0
    4ee2:	d0ea      	beq.n	4eba <bt_le_adv_stop+0x16>
			le_set_private_addr();
    4ee4:	f7fe fef4 	bl	3cd0 <le_set_private_addr>
    4ee8:	e7e8      	b.n	4ebc <bt_le_adv_stop+0x18>
    4eea:	bf00      	nop
    4eec:	20005f00 	.word	0x20005f00

00004ef0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4ef4:	7803      	ldrb	r3, [r0, #0]
    4ef6:	2b01      	cmp	r3, #1
{
    4ef8:	4605      	mov	r5, r0
    4efa:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4efc:	d810      	bhi.n	4f20 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4efe:	7843      	ldrb	r3, [r0, #1]
    4f00:	2b01      	cmp	r3, #1
    4f02:	d80d      	bhi.n	4f20 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    4f04:	8841      	ldrh	r1, [r0, #2]
    4f06:	1f0b      	subs	r3, r1, #4
    4f08:	b29b      	uxth	r3, r3
    4f0a:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4f0e:	4283      	cmp	r3, r0
    4f10:	d806      	bhi.n	4f20 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4f12:	88aa      	ldrh	r2, [r5, #4]
    4f14:	1f13      	subs	r3, r2, #4
    4f16:	b29b      	uxth	r3, r3
    4f18:	4283      	cmp	r3, r0
    4f1a:	d801      	bhi.n	4f20 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
    4f1c:	4291      	cmp	r1, r2
    4f1e:	d26e      	bcs.n	4ffe <bt_le_scan_start+0x10e>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    4f20:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    4f24:	4620      	mov	r0, r4
    4f26:	b002      	add	sp, #8
    4f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4f2c:	2107      	movs	r1, #7
    4f2e:	483b      	ldr	r0, [pc, #236]	; (501c <bt_le_scan_start+0x12c>)
    4f30:	f7fe fd2c 	bl	398c <atomic_test_bit>
    4f34:	b150      	cbz	r0, 4f4c <bt_le_scan_start+0x5c>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    4f36:	4610      	mov	r0, r2
    4f38:	f7fe fedc 	bl	3cf4 <set_le_scan_enable>
		if (err) {
    4f3c:	4604      	mov	r4, r0
    4f3e:	b128      	cbz	r0, 4f4c <bt_le_scan_start+0x5c>
    4f40:	f46f 7180 	mvn.w	r1, #256	; 0x100
    4f44:	4835      	ldr	r0, [pc, #212]	; (501c <bt_le_scan_start+0x12c>)
    4f46:	f7fe fd2e 	bl	39a6 <atomic_and>
		return err;
    4f4a:	e7eb      	b.n	4f24 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
    4f4c:	786b      	ldrb	r3, [r5, #1]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d049      	beq.n	4fe6 <bt_le_scan_start+0xf6>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4f56:	4831      	ldr	r0, [pc, #196]	; (501c <bt_le_scan_start+0x12c>)
    4f58:	f7fe fd07 	bl	396a <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
    4f5c:	2207      	movs	r2, #7
    4f5e:	2100      	movs	r1, #0
    4f60:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    4f62:	782e      	ldrb	r6, [r5, #0]
    4f64:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    4f68:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
    4f6a:	f7fb fba1 	bl	6b0 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    4f6e:	482c      	ldr	r0, [pc, #176]	; (5020 <bt_le_scan_start+0x130>)
	set_param.scan_type = scan_type;
    4f70:	f88d 6000 	strb.w	r6, [sp]
	set_param.filter_policy = 0x00;
    4f74:	2300      	movs	r3, #0
    4f76:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    4f7a:	2e01      	cmp	r6, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    4f7c:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    4f7e:	f8ad 8001 	strh.w	r8, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    4f82:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    4f86:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    4f8a:	d10b      	bne.n	4fa4 <bt_le_scan_start+0xb4>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4f8c:	2105      	movs	r1, #5
    4f8e:	3070      	adds	r0, #112	; 0x70
    4f90:	f7fe fcfc 	bl	398c <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4f94:	b930      	cbnz	r0, 4fa4 <bt_le_scan_start+0xb4>
			err = le_set_private_addr();
    4f96:	f7fe fe9b 	bl	3cd0 <le_set_private_addr>
			if (err) {
    4f9a:	4604      	mov	r4, r0
    4f9c:	2800      	cmp	r0, #0
    4f9e:	d1cf      	bne.n	4f40 <bt_le_scan_start+0x50>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    4fa0:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    4fa4:	2107      	movs	r1, #7
    4fa6:	f242 000b 	movw	r0, #8203	; 0x200b
    4faa:	f7fe fdab 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    4fae:	4604      	mov	r4, r0
    4fb0:	b380      	cbz	r0, 5014 <bt_le_scan_start+0x124>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    4fb2:	2207      	movs	r2, #7
    4fb4:	4669      	mov	r1, sp
    4fb6:	3008      	adds	r0, #8
    4fb8:	f012 fdea 	bl	17b90 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    4fbc:	4621      	mov	r1, r4
    4fbe:	f242 000b 	movw	r0, #8203	; 0x200b
    4fc2:	f7fe fdc3 	bl	3b4c <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    4fc6:	2001      	movs	r0, #1
    4fc8:	f7fe fe94 	bl	3cf4 <set_le_scan_enable>
	if (err) {
    4fcc:	4604      	mov	r4, r0
    4fce:	2800      	cmp	r0, #0
    4fd0:	d1b6      	bne.n	4f40 <bt_le_scan_start+0x50>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    4fd2:	2e01      	cmp	r6, #1
    4fd4:	d10d      	bne.n	4ff2 <bt_le_scan_start+0x102>
    4fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
    4fda:	4810      	ldr	r0, [pc, #64]	; (501c <bt_le_scan_start+0x12c>)
    4fdc:	f7fe fcc5 	bl	396a <atomic_or>
	scan_dev_found_cb = cb;
    4fe0:	4b10      	ldr	r3, [pc, #64]	; (5024 <bt_le_scan_start+0x134>)
    4fe2:	601f      	str	r7, [r3, #0]
	return 0;
    4fe4:	e79e      	b.n	4f24 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4fe6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    4fea:	480c      	ldr	r0, [pc, #48]	; (501c <bt_le_scan_start+0x12c>)
    4fec:	f7fe fcdb 	bl	39a6 <atomic_and>
    4ff0:	e7b4      	b.n	4f5c <bt_le_scan_start+0x6c>
    4ff2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    4ff6:	4809      	ldr	r0, [pc, #36]	; (501c <bt_le_scan_start+0x12c>)
    4ff8:	f7fe fcd5 	bl	39a6 <atomic_and>
    4ffc:	e7f0      	b.n	4fe0 <bt_le_scan_start+0xf0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
    5002:	4806      	ldr	r0, [pc, #24]	; (501c <bt_le_scan_start+0x12c>)
    5004:	f7fe fcb1 	bl	396a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5008:	f410 7280 	ands.w	r2, r0, #256	; 0x100
    500c:	d08e      	beq.n	4f2c <bt_le_scan_start+0x3c>
		return -EALREADY;
    500e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5012:	e787      	b.n	4f24 <bt_le_scan_start+0x34>
		return -ENOBUFS;
    5014:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5018:	e792      	b.n	4f40 <bt_le_scan_start+0x50>
    501a:	bf00      	nop
    501c:	20005f00 	.word	0x20005f00
    5020:	20005e90 	.word	0x20005e90
    5024:	200001b0 	.word	0x200001b0

00005028 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    5028:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    502a:	f46f 7180 	mvn.w	r1, #256	; 0x100
    502e:	4807      	ldr	r0, [pc, #28]	; (504c <bt_le_scan_stop+0x24>)
    5030:	f7fe fcb9 	bl	39a6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5034:	05c3      	lsls	r3, r0, #23
    5036:	d506      	bpl.n	5046 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    5038:	4b05      	ldr	r3, [pc, #20]	; (5050 <bt_le_scan_stop+0x28>)
    503a:	2000      	movs	r0, #0
    503c:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    503e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    5042:	f7fe bf4b 	b.w	3edc <bt_le_scan_update>
}
    5046:	f06f 0044 	mvn.w	r0, #68	; 0x44
    504a:	bd08      	pop	{r3, pc}
    504c:	20005f00 	.word	0x20005f00
    5050:	200001b0 	.word	0x200001b0

00005054 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    5054:	b538      	push	{r3, r4, r5, lr}
    5056:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5058:	4806      	ldr	r0, [pc, #24]	; (5074 <bt_buf_get_rx+0x20>)
    505a:	f012 fcbd 	bl	179d8 <net_buf_alloc>
#endif

	if (buf) {
    505e:	4604      	mov	r4, r0
    5060:	b130      	cbz	r0, 5070 <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5062:	2100      	movs	r1, #0
    5064:	f012 fd11 	bl	17a8a <net_buf_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    5068:	4620      	mov	r0, r4
    506a:	f7fe fc75 	bl	3958 <net_buf_user_data>
    506e:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5070:	4620      	mov	r0, r4
    5072:	bd38      	pop	{r3, r4, r5, pc}
    5074:	20006c48 	.word	0x20006c48

00005078 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5078:	b510      	push	{r4, lr}
    507a:	4601      	mov	r1, r0
	__asm__ volatile(
    507c:	f04f 0320 	mov.w	r3, #32
    5080:	f3ef 8011 	mrs	r0, BASEPRI
    5084:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5088:	4b0c      	ldr	r3, [pc, #48]	; (50bc <bt_buf_get_cmd_complete+0x44>)
	bt_dev.sent_cmd = NULL;
    508a:	2200      	movs	r2, #0
	buf = bt_dev.sent_cmd;
    508c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5090:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5094:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5098:	b924      	cbnz	r4, 50a4 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    509a:	2001      	movs	r0, #1
}
    509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    50a0:	f7ff bfd8 	b.w	5054 <bt_buf_get_rx>
    50a4:	4620      	mov	r0, r4
    50a6:	f7fe fc57 	bl	3958 <net_buf_user_data>
    50aa:	2301      	movs	r3, #1
    50ac:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    50ae:	4611      	mov	r1, r2
    50b0:	4620      	mov	r0, r4
		buf->len = 0;
    50b2:	81a2      	strh	r2, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    50b4:	f012 fce9 	bl	17a8a <net_buf_reserve>
}
    50b8:	4620      	mov	r0, r4
    50ba:	bd10      	pop	{r4, pc}
    50bc:	20005e90 	.word	0x20005e90

000050c0 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    50c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    50c4:	4e1d      	ldr	r6, [pc, #116]	; (513c <bt_pub_key_gen+0x7c>)
    50c6:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    50ca:	f003 0306 	and.w	r3, r3, #6
    50ce:	2b06      	cmp	r3, #6
{
    50d0:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    50d2:	d130      	bne.n	5136 <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    50d4:	4d1a      	ldr	r5, [pc, #104]	; (5140 <bt_pub_key_gen+0x80>)
    50d6:	682b      	ldr	r3, [r5, #0]
    50d8:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    50da:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    50dc:	2110      	movs	r1, #16
    50de:	f106 0070 	add.w	r0, r6, #112	; 0x70
    50e2:	f7fe fc42 	bl	396a <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    50e6:	f010 0810 	ands.w	r8, r0, #16
    50ea:	d003      	beq.n	50f4 <bt_pub_key_gen+0x34>
		return 0;
    50ec:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    50ee:	4620      	mov	r0, r4
    50f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    50f4:	f06f 0108 	mvn.w	r1, #8
    50f8:	f106 0070 	add.w	r0, r6, #112	; 0x70
    50fc:	f7fe fc53 	bl	39a6 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5100:	4642      	mov	r2, r8
    5102:	4641      	mov	r1, r8
    5104:	f242 0025 	movw	r0, #8229	; 0x2025
    5108:	f7fe fd7c 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    510c:	4604      	mov	r4, r0
    510e:	b140      	cbz	r0, 5122 <bt_pub_key_gen+0x62>
    5110:	f06f 0110 	mvn.w	r1, #16
    5114:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5118:	f7fe fc45 	bl	39a6 <atomic_and>
		pub_key_cb = NULL;
    511c:	f8c5 8000 	str.w	r8, [r5]
		return err;
    5120:	e7e5      	b.n	50ee <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5122:	682c      	ldr	r4, [r5, #0]
    5124:	2c00      	cmp	r4, #0
    5126:	d0e1      	beq.n	50ec <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
    5128:	42bc      	cmp	r4, r7
    512a:	d002      	beq.n	5132 <bt_pub_key_gen+0x72>
			cb->func(NULL);
    512c:	6823      	ldr	r3, [r4, #0]
    512e:	2000      	movs	r0, #0
    5130:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5132:	6864      	ldr	r4, [r4, #4]
    5134:	e7f6      	b.n	5124 <bt_pub_key_gen+0x64>
		return -ENOTSUP;
    5136:	f06f 0422 	mvn.w	r4, #34	; 0x22
    513a:	e7d8      	b.n	50ee <bt_pub_key_gen+0x2e>
    513c:	20005e90 	.word	0x20005e90
    5140:	200001a8 	.word	0x200001a8

00005144 <bt_pub_key_get>:

const u8_t *bt_pub_key_get(void)
{
    5144:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5146:	2103      	movs	r1, #3
    5148:	4803      	ldr	r0, [pc, #12]	; (5158 <bt_pub_key_get+0x14>)
    514a:	f7fe fc1f 	bl	398c <atomic_test_bit>
    514e:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    5150:	4802      	ldr	r0, [pc, #8]	; (515c <bt_pub_key_get+0x18>)
    5152:	bf08      	it	eq
    5154:	2000      	moveq	r0, #0
    5156:	bd08      	pop	{r3, pc}
    5158:	20005f00 	.word	0x20005f00
    515c:	20000168 	.word	0x20000168

00005160 <bt_dh_key_gen>:

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5162:	4c1a      	ldr	r4, [pc, #104]	; (51cc <bt_dh_key_gen+0x6c>)
    5164:	6823      	ldr	r3, [r4, #0]
{
    5166:	4607      	mov	r7, r0
    5168:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    516a:	b113      	cbz	r3, 5172 <bt_dh_key_gen+0x12>
		return -EBUSY;
    516c:	f06f 000f 	mvn.w	r0, #15
    5170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5172:	2104      	movs	r1, #4
    5174:	4816      	ldr	r0, [pc, #88]	; (51d0 <bt_dh_key_gen+0x70>)
    5176:	f7fe fc09 	bl	398c <atomic_test_bit>
    517a:	4606      	mov	r6, r0
    517c:	2800      	cmp	r0, #0
    517e:	d1f5      	bne.n	516c <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5180:	2103      	movs	r1, #3
    5182:	4813      	ldr	r0, [pc, #76]	; (51d0 <bt_dh_key_gen+0x70>)
    5184:	f7fe fc02 	bl	398c <atomic_test_bit>
    5188:	b1e0      	cbz	r0, 51c4 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    518a:	2140      	movs	r1, #64	; 0x40
    518c:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    5190:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5192:	f7fe fcb7 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    5196:	4605      	mov	r5, r0
    5198:	b918      	cbnz	r0, 51a2 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    519a:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    519c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    51a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    51a2:	2140      	movs	r1, #64	; 0x40
    51a4:	3008      	adds	r0, #8
    51a6:	f012 fced 	bl	17b84 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    51aa:	2240      	movs	r2, #64	; 0x40
    51ac:	4639      	mov	r1, r7
    51ae:	f7fb fa53 	bl	658 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    51b2:	4632      	mov	r2, r6
    51b4:	4629      	mov	r1, r5
    51b6:	f242 0026 	movw	r0, #8230	; 0x2026
    51ba:	f7fe fd23 	bl	3c04 <bt_hci_cmd_send_sync>
	if (err) {
    51be:	b118      	cbz	r0, 51c8 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    51c0:	6026      	str	r6, [r4, #0]
		return err;
    51c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    51c4:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    51c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51ca:	bf00      	nop
    51cc:	20000164 	.word	0x20000164
    51d0:	20005f00 	.word	0x20005f00

000051d4 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    51d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    51d6:	4b06      	ldr	r3, [pc, #24]	; (51f0 <notify_connected+0x1c>)
    51d8:	681c      	ldr	r4, [r3, #0]
{
    51da:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    51dc:	b904      	cbnz	r4, 51e0 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    51de:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    51e0:	6823      	ldr	r3, [r4, #0]
    51e2:	b113      	cbz	r3, 51ea <notify_connected+0x16>
			cb->connected(conn, conn->err);
    51e4:	7a29      	ldrb	r1, [r5, #8]
    51e6:	4628      	mov	r0, r5
    51e8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    51ea:	6924      	ldr	r4, [r4, #16]
    51ec:	e7f6      	b.n	51dc <notify_connected+0x8>
    51ee:	bf00      	nop
    51f0:	2000021c 	.word	0x2000021c

000051f4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    51f4:	f3bf 8f5b 	dmb	ish
    51f8:	6800      	ldr	r0, [r0, #0]
    51fa:	f3bf 8f5b 	dmb	ish
}
    51fe:	4770      	bx	lr

00005200 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    5200:	8943      	ldrh	r3, [r0, #10]
{
    5202:	b510      	push	{r4, lr}
    5204:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    5206:	b12b      	cbz	r3, 5214 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    5208:	68c0      	ldr	r0, [r0, #12]
    520a:	f012 fc9b 	bl	17b44 <net_buf_unref>
	conn->rx = NULL;
    520e:	2300      	movs	r3, #0
    5210:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    5212:	8163      	strh	r3, [r4, #10]
    5214:	bd10      	pop	{r4, pc}

00005216 <atomic_dec>:
}
    5216:	f3bf 8f5b 	dmb	ish
    521a:	e850 3f00 	ldrex	r3, [r0]
    521e:	1e5a      	subs	r2, r3, #1
    5220:	e840 2100 	strex	r1, r2, [r0]
    5224:	2900      	cmp	r1, #0
    5226:	d1f8      	bne.n	521a <atomic_dec+0x4>
    5228:	f3bf 8f5b 	dmb	ish
    522c:	4618      	mov	r0, r3
    522e:	4770      	bx	lr

00005230 <atomic_inc>:
}
    5230:	f3bf 8f5b 	dmb	ish
    5234:	e850 3f00 	ldrex	r3, [r0]
    5238:	1c5a      	adds	r2, r3, #1
    523a:	e840 2100 	strex	r1, r2, [r0]
    523e:	2900      	cmp	r1, #0
    5240:	d1f8      	bne.n	5234 <atomic_inc+0x4>
    5242:	f3bf 8f5b 	dmb	ish
    5246:	4618      	mov	r0, r3
    5248:	4770      	bx	lr
	...

0000524c <bt_conn_get_pkts>:
}
    524c:	4800      	ldr	r0, [pc, #0]	; (5250 <bt_conn_get_pkts+0x4>)
    524e:	4770      	bx	lr
    5250:	20005f1c 	.word	0x20005f1c

00005254 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    5254:	4b08      	ldr	r3, [pc, #32]	; (5278 <notify_le_param_updated+0x24>)
{
    5256:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5258:	681c      	ldr	r4, [r3, #0]
{
    525a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    525c:	b904      	cbnz	r4, 5260 <notify_le_param_updated+0xc>
}
    525e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    5260:	68e6      	ldr	r6, [r4, #12]
    5262:	b13e      	cbz	r6, 5274 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    5264:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    5268:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
    526c:	f8b5 105a 	ldrh.w	r1, [r5, #90]	; 0x5a
    5270:	4628      	mov	r0, r5
    5272:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5274:	6924      	ldr	r4, [r4, #16]
    5276:	e7f1      	b.n	525c <notify_le_param_updated+0x8>
    5278:	2000021c 	.word	0x2000021c

0000527c <le_param_req>:
{
    527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    527e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    5280:	4608      	mov	r0, r1
{
    5282:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    5284:	f7fe fe0a 	bl	3e9c <bt_le_conn_params_valid>
    5288:	4605      	mov	r5, r0
    528a:	b910      	cbnz	r0, 5292 <le_param_req+0x16>
		return false;
    528c:	2500      	movs	r5, #0
}
    528e:	4628      	mov	r0, r5
    5290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5292:	4b09      	ldr	r3, [pc, #36]	; (52b8 <le_param_req+0x3c>)
    5294:	681c      	ldr	r4, [r3, #0]
    5296:	2c00      	cmp	r4, #0
    5298:	d0f9      	beq.n	528e <le_param_req+0x12>
		if (!cb->le_param_req) {
    529a:	68a3      	ldr	r3, [r4, #8]
    529c:	b90b      	cbnz	r3, 52a2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    529e:	6924      	ldr	r4, [r4, #16]
    52a0:	e7f9      	b.n	5296 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    52a2:	4631      	mov	r1, r6
    52a4:	4638      	mov	r0, r7
    52a6:	4798      	blx	r3
    52a8:	2800      	cmp	r0, #0
    52aa:	d0ef      	beq.n	528c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    52ac:	4630      	mov	r0, r6
    52ae:	f7fe fdf5 	bl	3e9c <bt_le_conn_params_valid>
    52b2:	2800      	cmp	r0, #0
    52b4:	d1f3      	bne.n	529e <le_param_req+0x22>
    52b6:	e7e9      	b.n	528c <le_param_req+0x10>
    52b8:	2000021c 	.word	0x2000021c

000052bc <bt_conn_cb_register>:
	cb->_next = callback_list;
    52bc:	4b02      	ldr	r3, [pc, #8]	; (52c8 <bt_conn_cb_register+0xc>)
    52be:	681a      	ldr	r2, [r3, #0]
    52c0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    52c2:	6018      	str	r0, [r3, #0]
    52c4:	4770      	bx	lr
    52c6:	bf00      	nop
    52c8:	2000021c 	.word	0x2000021c

000052cc <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    52cc:	2a01      	cmp	r2, #1
{
    52ce:	b570      	push	{r4, r5, r6, lr}
    52d0:	4605      	mov	r5, r0
    52d2:	460c      	mov	r4, r1
	switch (flags) {
    52d4:	d00f      	beq.n	52f6 <bt_conn_recv+0x2a>
    52d6:	2a02      	cmp	r2, #2
    52d8:	d110      	bne.n	52fc <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    52da:	688b      	ldr	r3, [r1, #8]
    52dc:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    52de:	8943      	ldrh	r3, [r0, #10]
    52e0:	b10b      	cbz	r3, 52e6 <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    52e2:	f7ff ff8d 	bl	5200 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    52e6:	89a3      	ldrh	r3, [r4, #12]
    52e8:	1af3      	subs	r3, r6, r3
    52ea:	3304      	adds	r3, #4
    52ec:	b29b      	uxth	r3, r3
    52ee:	816b      	strh	r3, [r5, #10]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    52f0:	b333      	cbz	r3, 5340 <bt_conn_recv+0x74>
			conn->rx = buf;
    52f2:	60ec      	str	r4, [r5, #12]
			return;
    52f4:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    52f6:	8943      	ldrh	r3, [r0, #10]
    52f8:	b93b      	cbnz	r3, 530a <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    52fa:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    52fc:	f7ff ff80 	bl	5200 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    5300:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    5302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    5306:	f012 bc1d 	b.w	17b44 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    530a:	898e      	ldrh	r6, [r1, #12]
    530c:	42b3      	cmp	r3, r6
    530e:	d3f4      	bcc.n	52fa <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5310:	68c0      	ldr	r0, [r0, #12]
    5312:	3008      	adds	r0, #8
    5314:	f012 fcdb 	bl	17cce <net_buf_simple_tailroom>
    5318:	4286      	cmp	r6, r0
    531a:	d8ee      	bhi.n	52fa <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    531c:	68e8      	ldr	r0, [r5, #12]
    531e:	89a2      	ldrh	r2, [r4, #12]
    5320:	68a1      	ldr	r1, [r4, #8]
    5322:	3008      	adds	r0, #8
    5324:	f012 fc34 	bl	17b90 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5328:	896b      	ldrh	r3, [r5, #10]
    532a:	89a2      	ldrh	r2, [r4, #12]
    532c:	1a9b      	subs	r3, r3, r2
    532e:	816b      	strh	r3, [r5, #10]
		net_buf_unref(buf);
    5330:	4620      	mov	r0, r4
    5332:	f012 fc07 	bl	17b44 <net_buf_unref>
		if (conn->rx_len) {
    5336:	896b      	ldrh	r3, [r5, #10]
    5338:	b973      	cbnz	r3, 5358 <bt_conn_recv+0x8c>
		buf = conn->rx;
    533a:	68ec      	ldr	r4, [r5, #12]
		conn->rx_len = 0;
    533c:	816b      	strh	r3, [r5, #10]
		conn->rx = NULL;
    533e:	60eb      	str	r3, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    5340:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5342:	89a2      	ldrh	r2, [r4, #12]
    5344:	881b      	ldrh	r3, [r3, #0]
    5346:	3304      	adds	r3, #4
    5348:	4293      	cmp	r3, r2
    534a:	d1d9      	bne.n	5300 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    534c:	4621      	mov	r1, r4
    534e:	4628      	mov	r0, r5
}
    5350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5354:	f000 bd0f 	b.w	5d76 <bt_l2cap_recv>
    5358:	bd70      	pop	{r4, r5, r6, pc}

0000535a <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    535a:	b570      	push	{r4, r5, r6, lr}
    535c:	4605      	mov	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    535e:	7988      	ldrb	r0, [r1, #6]
{
    5360:	460c      	mov	r4, r1
    5362:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    5364:	f012 fb1c 	bl	179a0 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    5368:	8ac3      	ldrh	r3, [r0, #22]
    536a:	2b03      	cmp	r3, #3
    536c:	d805      	bhi.n	537a <bt_conn_send_cb+0x20>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
    536e:	4620      	mov	r0, r4
    5370:	f012 fbe8 	bl	17b44 <net_buf_unref>
		return -EINVAL;
    5374:	f06f 0015 	mvn.w	r0, #21
    5378:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (conn->state != BT_CONN_CONNECTED) {
    537a:	7a6b      	ldrb	r3, [r5, #9]
    537c:	2b03      	cmp	r3, #3
    537e:	d005      	beq.n	538c <bt_conn_send_cb+0x32>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    5380:	4620      	mov	r0, r4
    5382:	f012 fbdf 	bl	17b44 <net_buf_unref>
		return -ENOTCONN;
    5386:	f06f 0038 	mvn.w	r0, #56	; 0x38
    538a:	bd70      	pop	{r4, r5, r6, pc}
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    538c:	89e3      	ldrh	r3, [r4, #14]
    538e:	4423      	add	r3, r4
    5390:	3313      	adds	r3, #19
    5392:	f023 0303 	bic.w	r3, r3, #3
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
    5396:	f105 0028 	add.w	r0, r5, #40	; 0x28
	conn_tx(buf)->cb = cb;
    539a:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    539c:	4621      	mov	r1, r4
    539e:	f012 fbc3 	bl	17b28 <net_buf_put>
	return 0;
    53a2:	2000      	movs	r0, #0
}
    53a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000053a8 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    53a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    53ac:	4d0d      	ldr	r5, [pc, #52]	; (53e4 <bt_conn_notify_tx+0x3c>)
    53ae:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    53b0:	f100 0718 	add.w	r7, r0, #24
    53b4:	f04f 0800 	mov.w	r8, #0
    53b8:	2100      	movs	r1, #0
    53ba:	4638      	mov	r0, r7
    53bc:	f012 fef9 	bl	181b2 <k_queue_get>
    53c0:	4604      	mov	r4, r0
    53c2:	b908      	cbnz	r0, 53c8 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    53c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    53c8:	6863      	ldr	r3, [r4, #4]
    53ca:	b10b      	cbz	r3, 53d0 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    53cc:	4630      	mov	r0, r6
    53ce:	4798      	blx	r3
    53d0:	682b      	ldr	r3, [r5, #0]
    53d2:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    53d4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    53d6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    53da:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    53dc:	2b00      	cmp	r3, #0
    53de:	d1eb      	bne.n	53b8 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    53e0:	606c      	str	r4, [r5, #4]
    53e2:	e7e7      	b.n	53b4 <bt_conn_notify_tx+0xc>
    53e4:	200002c8 	.word	0x200002c8

000053e8 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    53e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53ec:	4605      	mov	r5, r0
    53ee:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    53f0:	4840      	ldr	r0, [pc, #256]	; (54f4 <send_frag+0x10c>)
    53f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    53f6:	4698      	mov	r8, r3
    53f8:	4614      	mov	r4, r2
    53fa:	f013 f98f 	bl	1871c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    53fe:	4b3e      	ldr	r3, [pc, #248]	; (54f8 <send_frag+0x110>)
    5400:	f103 0040 	add.w	r0, r3, #64	; 0x40
    5404:	f7ff fef6 	bl	51f4 <atomic_get>
    5408:	b130      	cbz	r0, 5418 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    540a:	7a5a      	ldrb	r2, [r3, #9]
    540c:	3a03      	subs	r2, #3
    540e:	2a01      	cmp	r2, #1
    5410:	d802      	bhi.n	5418 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    5412:	4618      	mov	r0, r3
    5414:	f7ff ffc8 	bl	53a8 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5418:	7a6b      	ldrb	r3, [r5, #9]
    541a:	2b03      	cmp	r3, #3
    541c:	d14e      	bne.n	54bc <send_frag+0xd4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    541e:	2104      	movs	r1, #4
    5420:	f107 0008 	add.w	r0, r7, #8
    5424:	f012 fbf4 	bl	17c10 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5428:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    542a:	4e34      	ldr	r6, [pc, #208]	; (54fc <send_frag+0x114>)
    542c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    5430:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5432:	89bb      	ldrh	r3, [r7, #12]
    5434:	3b04      	subs	r3, #4
    5436:	8043      	strh	r3, [r0, #2]
    5438:	89fb      	ldrh	r3, [r7, #14]
    543a:	443b      	add	r3, r7
    543c:	3313      	adds	r3, #19
    543e:	f023 0303 	bic.w	r3, r3, #3
    5442:	2102      	movs	r1, #2

	cb = conn_tx(buf)->cb;
    5444:	681a      	ldr	r2, [r3, #0]
    5446:	7019      	strb	r1, [r3, #0]
    5448:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    544a:	6871      	ldr	r1, [r6, #4]
	list->head = node->next;
    544c:	6823      	ldr	r3, [r4, #0]
    544e:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    5450:	428c      	cmp	r4, r1
		list->tail = list->head;
    5452:	bf08      	it	eq
    5454:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    5456:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    5458:	f04f 0320 	mov.w	r3, #32
    545c:	f3ef 8211 	mrs	r2, BASEPRI
    5460:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    5464:	2300      	movs	r3, #0
    5466:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5468:	696b      	ldr	r3, [r5, #20]
    546a:	2b00      	cmp	r3, #0
    546c:	d134      	bne.n	54d8 <send_frag+0xf0>
		list->tail = node;
    546e:	616c      	str	r4, [r5, #20]
		list->head = node;
    5470:	612c      	str	r4, [r5, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5472:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    5476:	4638      	mov	r0, r7
    5478:	f7ff f894 	bl	45a4 <bt_send>
	if (err) {
    547c:	2800      	cmp	r0, #0
    547e:	d036      	beq.n	54ee <send_frag+0x106>
	__asm__ volatile(
    5480:	f04f 0320 	mov.w	r3, #32
    5484:	f3ef 8011 	mrs	r0, BASEPRI
    5488:	f383 8811 	msr	BASEPRI, r3
    548c:	692b      	ldr	r3, [r5, #16]
	sys_snode_t *prev = NULL;
    548e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5490:	b153      	cbz	r3, 54a8 <send_frag+0xc0>
		if (test == node) {
    5492:	429c      	cmp	r4, r3
    5494:	d128      	bne.n	54e8 <send_frag+0x100>
    5496:	6823      	ldr	r3, [r4, #0]
    5498:	6969      	ldr	r1, [r5, #20]
	if (!prev_node) {
    549a:	bb02      	cbnz	r2, 54de <send_frag+0xf6>
		if (list->tail == node) {
    549c:	428c      	cmp	r4, r1
		list->head = node->next;
    549e:	612b      	str	r3, [r5, #16]
		if (list->tail == node) {
    54a0:	d100      	bne.n	54a4 <send_frag+0xbc>
			list->tail = list->head;
    54a2:	616b      	str	r3, [r5, #20]
	node->next = NULL;
    54a4:	2300      	movs	r3, #0
    54a6:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    54a8:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    54ac:	2300      	movs	r3, #0
    54ae:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    54b0:	6833      	ldr	r3, [r6, #0]
    54b2:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    54b4:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    54b6:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    54b8:	b903      	cbnz	r3, 54bc <send_frag+0xd4>
		list->tail = list->head;
    54ba:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    54bc:	480d      	ldr	r0, [pc, #52]	; (54f4 <send_frag+0x10c>)
    54be:	f013 f8eb 	bl	18698 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    54c2:	f1b8 0f00 	cmp.w	r8, #0
    54c6:	d004      	beq.n	54d2 <send_frag+0xea>
		net_buf_unref(buf);
    54c8:	4638      	mov	r0, r7
    54ca:	f012 fb3b 	bl	17b44 <net_buf_unref>
	}
	return false;
    54ce:	f04f 0800 	mov.w	r8, #0
}
    54d2:	4640      	mov	r0, r8
    54d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    54d8:	601c      	str	r4, [r3, #0]
		list->tail = node;
    54da:	616c      	str	r4, [r5, #20]
    54dc:	e7c9      	b.n	5472 <send_frag+0x8a>
		if (list->tail == node) {
    54de:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    54e0:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    54e2:	bf08      	it	eq
    54e4:	616a      	streq	r2, [r5, #20]
    54e6:	e7dd      	b.n	54a4 <send_frag+0xbc>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    54e8:	461a      	mov	r2, r3
    54ea:	681b      	ldr	r3, [r3, #0]
    54ec:	e7d0      	b.n	5490 <send_frag+0xa8>
	return true;
    54ee:	f04f 0801 	mov.w	r8, #1
    54f2:	e7ee      	b.n	54d2 <send_frag+0xea>
    54f4:	20005f1c 	.word	0x20005f1c
    54f8:	20000230 	.word	0x20000230
    54fc:	200002c8 	.word	0x200002c8

00005500 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5500:	b538      	push	{r3, r4, r5, lr}
    5502:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5504:	f100 0528 	add.w	r5, r0, #40	; 0x28
    5508:	2100      	movs	r1, #0
    550a:	4628      	mov	r0, r5
    550c:	f012 faa4 	bl	17a58 <net_buf_get>
    5510:	b958      	cbnz	r0, 552a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    5512:	4620      	mov	r0, r4
    5514:	f7ff ff48 	bl	53a8 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    5518:	4620      	mov	r0, r4
    551a:	f7ff fe71 	bl	5200 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    551e:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    5522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    5526:	f7ff be76 	b.w	5216 <atomic_dec>
		net_buf_unref(buf);
    552a:	f012 fb0b 	bl	17b44 <net_buf_unref>
    552e:	e7eb      	b.n	5508 <conn_cleanup+0x8>

00005530 <bt_conn_prepare_events>:
{
    5530:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    5532:	4b1f      	ldr	r3, [pc, #124]	; (55b0 <bt_conn_prepare_events+0x80>)
    5534:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5536:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    5538:	609a      	str	r2, [r3, #8]
{
    553a:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    553c:	f013 fe32 	bl	191a4 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    5540:	4b1c      	ldr	r3, [pc, #112]	; (55b4 <bt_conn_prepare_events+0x84>)
    5542:	f103 0040 	add.w	r0, r3, #64	; 0x40
    5546:	f7ff fe55 	bl	51f4 <atomic_get>
    554a:	4619      	mov	r1, r3
    554c:	b908      	cbnz	r0, 5552 <bt_conn_prepare_events+0x22>
			continue;
    554e:	2001      	movs	r0, #1
    5550:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    5552:	7a5a      	ldrb	r2, [r3, #9]
    5554:	b99a      	cbnz	r2, 557e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5556:	f3bf 8f5b 	dmb	ish
    555a:	1d1a      	adds	r2, r3, #4
    555c:	e852 0f00 	ldrex	r0, [r2]
    5560:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    5564:	e842 4e00 	strex	lr, r4, [r2]
    5568:	f1be 0f00 	cmp.w	lr, #0
    556c:	d1f6      	bne.n	555c <bt_conn_prepare_events+0x2c>
    556e:	f3bf 8f5b 	dmb	ish
    5572:	0642      	lsls	r2, r0, #25
    5574:	d503      	bpl.n	557e <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    5576:	4618      	mov	r0, r3
    5578:	f7ff ffc2 	bl	5500 <conn_cleanup>
    557c:	e7e7      	b.n	554e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    557e:	7a4c      	ldrb	r4, [r1, #9]
    5580:	2c03      	cmp	r4, #3
    5582:	d1e4      	bne.n	554e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    5584:	f105 0014 	add.w	r0, r5, #20
    5588:	4b0b      	ldr	r3, [pc, #44]	; (55b8 <bt_conn_prepare_events+0x88>)
    558a:	2200      	movs	r2, #0
    558c:	2104      	movs	r1, #4
    558e:	f013 fe09 	bl	191a4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    5592:	2301      	movs	r3, #1
    5594:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    5598:	f105 0028 	add.w	r0, r5, #40	; 0x28
    559c:	4b07      	ldr	r3, [pc, #28]	; (55bc <bt_conn_prepare_events+0x8c>)
    559e:	2200      	movs	r2, #0
    55a0:	2104      	movs	r1, #4
    55a2:	f013 fdff 	bl	191a4 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    55a6:	2302      	movs	r3, #2
    55a8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    55ac:	4620      	mov	r0, r4
}
    55ae:	bd38      	pop	{r3, r4, r5, pc}
    55b0:	20005fc8 	.word	0x20005fc8
    55b4:	20000230 	.word	0x20000230
    55b8:	20000248 	.word	0x20000248
    55bc:	20000258 	.word	0x20000258

000055c0 <bt_conn_add_le>:
{
    55c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!atomic_get(&conns[i].ref)) {
    55c2:	4c17      	ldr	r4, [pc, #92]	; (5620 <bt_conn_add_le+0x60>)
    55c4:	f104 0640 	add.w	r6, r4, #64	; 0x40
{
    55c8:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    55ca:	4630      	mov	r0, r6
    55cc:	f7ff fe12 	bl	51f4 <atomic_get>
    55d0:	4605      	mov	r5, r0
    55d2:	b108      	cbz	r0, 55d8 <bt_conn_add_le+0x18>
		return NULL;
    55d4:	2000      	movs	r0, #0
    55d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(conn, 0, sizeof(*conn));
    55d8:	4601      	mov	r1, r0
    55da:	2298      	movs	r2, #152	; 0x98
    55dc:	4620      	mov	r0, r4
    55de:	f7fb f867 	bl	6b0 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    55e2:	f3bf 8f5b 	dmb	ish
    55e6:	2301      	movs	r3, #1
    55e8:	e856 2f00 	ldrex	r2, [r6]
    55ec:	e846 3100 	strex	r1, r3, [r6]
    55f0:	2900      	cmp	r1, #0
    55f2:	d1f9      	bne.n	55e8 <bt_conn_add_le+0x28>
    55f4:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    55f8:	2207      	movs	r2, #7
    55fa:	4639      	mov	r1, r7
    55fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
    5600:	f7fb f82a 	bl	658 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5604:	2318      	movs	r3, #24
    5606:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    560a:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    560c:	f104 0070 	add.w	r0, r4, #112	; 0x70
	conn->type = BT_CONN_TYPE_LE;
    5610:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5612:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5616:	4903      	ldr	r1, [pc, #12]	; (5624 <bt_conn_add_le+0x64>)
    5618:	f013 fb4c 	bl	18cb4 <k_delayed_work_init>
			conn = &conns[i];
    561c:	4620      	mov	r0, r4
}
    561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5620:	20000230 	.word	0x20000230
    5624:	0000595d 	.word	0x0000595d

00005628 <bt_conn_set_state>:
{
    5628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    562a:	7a45      	ldrb	r5, [r0, #9]
    562c:	428d      	cmp	r5, r1
{
    562e:	4604      	mov	r4, r0
	if (conn->state == state) {
    5630:	d07e      	beq.n	5730 <bt_conn_set_state+0x108>
	conn->state = state;
    5632:	7241      	strb	r1, [r0, #9]
	switch (old_state) {
    5634:	b915      	cbnz	r5, 563c <bt_conn_set_state+0x14>
	atomic_inc(&conn->ref);
    5636:	3040      	adds	r0, #64	; 0x40
    5638:	f7ff fdfa 	bl	5230 <atomic_inc>
	switch (conn->state) {
    563c:	7a63      	ldrb	r3, [r4, #9]
    563e:	b1db      	cbz	r3, 5678 <bt_conn_set_state+0x50>
    5640:	2b03      	cmp	r3, #3
    5642:	d175      	bne.n	5730 <bt_conn_set_state+0x108>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5644:	78a3      	ldrb	r3, [r4, #2]
    5646:	2b02      	cmp	r3, #2
    5648:	d072      	beq.n	5730 <bt_conn_set_state+0x108>
		k_fifo_init(&conn->tx_queue);
    564a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    564e:	f012 fd45 	bl	180dc <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    5652:	f104 0018 	add.w	r0, r4, #24
    5656:	f012 fd41 	bl	180dc <k_queue_init>
		k_poll_signal(&conn_change, 0);
    565a:	2100      	movs	r1, #0
    565c:	4835      	ldr	r0, [pc, #212]	; (5734 <bt_conn_set_state+0x10c>)
    565e:	f013 fe6b 	bl	19338 <k_poll_signal>
	list->head = NULL;
    5662:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    5664:	4620      	mov	r0, r4
    5666:	63a3      	str	r3, [r4, #56]	; 0x38
	list->tail = NULL;
    5668:	63e3      	str	r3, [r4, #60]	; 0x3c
    566a:	f000 fabf 	bl	5bec <bt_l2cap_connected>
		notify_connected(conn);
    566e:	4620      	mov	r0, r4
}
    5670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    5674:	f7ff bdae 	b.w	51d4 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5678:	78a3      	ldrb	r3, [r4, #2]
    567a:	2b02      	cmp	r3, #2
    567c:	d105      	bne.n	568a <bt_conn_set_state+0x62>
	atomic_dec(&conn->ref);
    567e:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
    5682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    5686:	f7ff bdc6 	b.w	5216 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    568a:	1eeb      	subs	r3, r5, #3
    568c:	2b01      	cmp	r3, #1
    568e:	d843      	bhi.n	5718 <bt_conn_set_state+0xf0>
			bt_l2cap_disconnected(conn);
    5690:	4620      	mov	r0, r4
    5692:	f000 fae5 	bl	5c60 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    5696:	4b28      	ldr	r3, [pc, #160]	; (5738 <bt_conn_set_state+0x110>)
    5698:	681d      	ldr	r5, [r3, #0]
    569a:	b9ed      	cbnz	r5, 56d8 <bt_conn_set_state+0xb0>
	node->next = list->head;
    569c:	4e27      	ldr	r6, [pc, #156]	; (573c <bt_conn_set_state+0x114>)
    569e:	4f28      	ldr	r7, [pc, #160]	; (5740 <bt_conn_set_state+0x118>)
	__asm__ volatile(
    56a0:	f04f 0320 	mov.w	r3, #32
    56a4:	f3ef 8111 	mrs	r1, BASEPRI
    56a8:	f383 8811 	msr	BASEPRI, r3
    56ac:	6923      	ldr	r3, [r4, #16]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    56ae:	b12b      	cbz	r3, 56bc <bt_conn_set_state+0x94>
	if (list->tail == node) {
    56b0:	6960      	ldr	r0, [r4, #20]
	list->head = node->next;
    56b2:	681a      	ldr	r2, [r3, #0]
    56b4:	6122      	str	r2, [r4, #16]
	if (list->tail == node) {
    56b6:	4283      	cmp	r3, r0
		list->tail = list->head;
    56b8:	bf08      	it	eq
    56ba:	6162      	streq	r2, [r4, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    56bc:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    56c0:	b18b      	cbz	r3, 56e6 <bt_conn_set_state+0xbe>
	node->next = list->head;
    56c2:	6832      	ldr	r2, [r6, #0]
    56c4:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    56c6:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    56c8:	605d      	str	r5, [r3, #4]
	list->head = node;
    56ca:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    56cc:	b902      	cbnz	r2, 56d0 <bt_conn_set_state+0xa8>
		list->tail = list->head;
    56ce:	6073      	str	r3, [r6, #4]
    56d0:	4638      	mov	r0, r7
    56d2:	f012 ffe1 	bl	18698 <_impl_k_sem_give>
    56d6:	e7e3      	b.n	56a0 <bt_conn_set_state+0x78>
		if (cb->disconnected) {
    56d8:	686b      	ldr	r3, [r5, #4]
    56da:	b113      	cbz	r3, 56e2 <bt_conn_set_state+0xba>
			cb->disconnected(conn, conn->err);
    56dc:	7a21      	ldrb	r1, [r4, #8]
    56de:	4620      	mov	r0, r4
    56e0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    56e2:	692d      	ldr	r5, [r5, #16]
    56e4:	e7d9      	b.n	569a <bt_conn_set_state+0x72>
			if (conn->type == BT_CONN_TYPE_LE) {
    56e6:	78a3      	ldrb	r3, [r4, #2]
    56e8:	b91b      	cbnz	r3, 56f2 <bt_conn_set_state+0xca>
				k_delayed_work_cancel(&conn->le.update_work);
    56ea:	f104 0070 	add.w	r0, r4, #112	; 0x70
    56ee:	f013 faff 	bl	18cf0 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56f2:	f3bf 8f5b 	dmb	ish
    56f6:	3404      	adds	r4, #4
    56f8:	e854 3f00 	ldrex	r3, [r4]
    56fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5700:	e844 3200 	strex	r2, r3, [r4]
    5704:	2a00      	cmp	r2, #0
    5706:	d1f7      	bne.n	56f8 <bt_conn_set_state+0xd0>
    5708:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    570c:	2100      	movs	r1, #0
    570e:	4809      	ldr	r0, [pc, #36]	; (5734 <bt_conn_set_state+0x10c>)
}
    5710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    5714:	f013 be10 	b.w	19338 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    5718:	2d02      	cmp	r5, #2
    571a:	d103      	bne.n	5724 <bt_conn_set_state+0xfc>
			notify_connected(conn);
    571c:	4620      	mov	r0, r4
    571e:	f7ff fd59 	bl	51d4 <notify_connected>
    5722:	e7ac      	b.n	567e <bt_conn_set_state+0x56>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    5724:	2d01      	cmp	r5, #1
    5726:	d103      	bne.n	5730 <bt_conn_set_state+0x108>
			if (conn->err) {
    5728:	7a23      	ldrb	r3, [r4, #8]
    572a:	2b00      	cmp	r3, #0
    572c:	d0a7      	beq.n	567e <bt_conn_set_state+0x56>
    572e:	e7f5      	b.n	571c <bt_conn_set_state+0xf4>
    5730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5732:	bf00      	nop
    5734:	20005fc8 	.word	0x20005fc8
    5738:	2000021c 	.word	0x2000021c
    573c:	200002c8 	.word	0x200002c8
    5740:	20005f1c 	.word	0x20005f1c

00005744 <bt_conn_lookup_handle>:
{
    5744:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    5746:	4c0b      	ldr	r4, [pc, #44]	; (5774 <bt_conn_lookup_handle+0x30>)
{
    5748:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    574a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    574e:	f7ff fd51 	bl	51f4 <atomic_get>
    5752:	b168      	cbz	r0, 5770 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    5754:	7a63      	ldrb	r3, [r4, #9]
    5756:	3b03      	subs	r3, #3
    5758:	2b01      	cmp	r3, #1
    575a:	d808      	bhi.n	576e <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    575c:	8823      	ldrh	r3, [r4, #0]
    575e:	4293      	cmp	r3, r2
    5760:	d105      	bne.n	576e <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    5762:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5766:	f7ff fd63 	bl	5230 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    576a:	4620      	mov	r0, r4
    576c:	bd10      	pop	{r4, pc}
	return NULL;
    576e:	2000      	movs	r0, #0
}
    5770:	bd10      	pop	{r4, pc}
    5772:	bf00      	nop
    5774:	20000230 	.word	0x20000230

00005778 <bt_conn_addr_le_cmp>:
{
    5778:	b538      	push	{r3, r4, r5, lr}
    577a:	460d      	mov	r5, r1
    577c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    577e:	f100 0144 	add.w	r1, r0, #68	; 0x44
    5782:	2207      	movs	r2, #7
    5784:	4628      	mov	r0, r5
    5786:	f7fa ff52 	bl	62e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    578a:	b160      	cbz	r0, 57a6 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    578c:	78e3      	ldrb	r3, [r4, #3]
    578e:	2207      	movs	r2, #7
    5790:	b933      	cbnz	r3, 57a0 <bt_conn_addr_le_cmp+0x28>
    5792:	f104 0152 	add.w	r1, r4, #82	; 0x52
    5796:	4628      	mov	r0, r5
}
    5798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    579c:	f7fa bf47 	b.w	62e <memcmp>
    57a0:	f104 014b 	add.w	r1, r4, #75	; 0x4b
    57a4:	e7f7      	b.n	5796 <bt_conn_addr_le_cmp+0x1e>
    57a6:	bd38      	pop	{r3, r4, r5, pc}

000057a8 <bt_conn_lookup_addr_le>:
{
    57a8:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    57aa:	4c0b      	ldr	r4, [pc, #44]	; (57d8 <bt_conn_lookup_addr_le+0x30>)
{
    57ac:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    57ae:	f104 0040 	add.w	r0, r4, #64	; 0x40
    57b2:	f7ff fd1f 	bl	51f4 <atomic_get>
    57b6:	b908      	cbnz	r0, 57bc <bt_conn_lookup_addr_le+0x14>
	return NULL;
    57b8:	2000      	movs	r0, #0
    57ba:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    57bc:	78a3      	ldrb	r3, [r4, #2]
    57be:	2b00      	cmp	r3, #0
    57c0:	d1fa      	bne.n	57b8 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    57c2:	4620      	mov	r0, r4
    57c4:	f7ff ffd8 	bl	5778 <bt_conn_addr_le_cmp>
    57c8:	2800      	cmp	r0, #0
    57ca:	d1f5      	bne.n	57b8 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    57cc:	f104 0040 	add.w	r0, r4, #64	; 0x40
    57d0:	f7ff fd2e 	bl	5230 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    57d4:	4620      	mov	r0, r4
}
    57d6:	bd10      	pop	{r4, pc}
    57d8:	20000230 	.word	0x20000230

000057dc <bt_conn_lookup_state_le>:
{
    57dc:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    57de:	4c0e      	ldr	r4, [pc, #56]	; (5818 <bt_conn_lookup_state_le+0x3c>)
{
    57e0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    57e2:	f104 0040 	add.w	r0, r4, #64	; 0x40
{
    57e6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    57e8:	f7ff fd04 	bl	51f4 <atomic_get>
    57ec:	b908      	cbnz	r0, 57f2 <bt_conn_lookup_state_le+0x16>
	return NULL;
    57ee:	2000      	movs	r0, #0
    57f0:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    57f2:	78a2      	ldrb	r2, [r4, #2]
    57f4:	2a00      	cmp	r2, #0
    57f6:	d1fa      	bne.n	57ee <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    57f8:	b93b      	cbnz	r3, 580a <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    57fa:	7a63      	ldrb	r3, [r4, #9]
    57fc:	42ab      	cmp	r3, r5
    57fe:	d1f6      	bne.n	57ee <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    5800:	4806      	ldr	r0, [pc, #24]	; (581c <bt_conn_lookup_state_le+0x40>)
    5802:	f7ff fd15 	bl	5230 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    5806:	4804      	ldr	r0, [pc, #16]	; (5818 <bt_conn_lookup_state_le+0x3c>)
}
    5808:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    580a:	4619      	mov	r1, r3
    580c:	4620      	mov	r0, r4
    580e:	f7ff ffb3 	bl	5778 <bt_conn_addr_le_cmp>
    5812:	2800      	cmp	r0, #0
    5814:	d1eb      	bne.n	57ee <bt_conn_lookup_state_le+0x12>
    5816:	e7f0      	b.n	57fa <bt_conn_lookup_state_le+0x1e>
    5818:	20000230 	.word	0x20000230
    581c:	20000270 	.word	0x20000270

00005820 <bt_conn_ref>:
{
    5820:	b510      	push	{r4, lr}
    5822:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    5824:	3040      	adds	r0, #64	; 0x40
    5826:	f7ff fd03 	bl	5230 <atomic_inc>
}
    582a:	4620      	mov	r0, r4
    582c:	bd10      	pop	{r4, pc}

0000582e <bt_conn_unref>:
	atomic_dec(&conn->ref);
    582e:	3040      	adds	r0, #64	; 0x40
    5830:	f7ff bcf1 	b.w	5216 <atomic_dec>

00005834 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    5834:	7a43      	ldrb	r3, [r0, #9]
    5836:	3b01      	subs	r3, #1
{
    5838:	b570      	push	{r4, r5, r6, lr}
    583a:	4605      	mov	r5, r0
    583c:	460e      	mov	r6, r1
	switch (conn->state) {
    583e:	2b03      	cmp	r3, #3
    5840:	d803      	bhi.n	584a <bt_conn_disconnect+0x16>
    5842:	e8df f003 	tbb	[pc, r3]
    5846:	0d06      	.short	0x0d06
    5848:	0d0f      	.short	0x0d0f
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    584a:	f06f 0438 	mvn.w	r4, #56	; 0x38
	}
}
    584e:	4620      	mov	r0, r4
    5850:	bd70      	pop	{r4, r5, r6, pc}
		conn->err = reason;
    5852:	7229      	strb	r1, [r5, #8]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5854:	2100      	movs	r1, #0
    5856:	f7ff fee7 	bl	5628 <bt_conn_set_state>
		bt_le_scan_update(false);
    585a:	2000      	movs	r0, #0
    585c:	f7fe fb3e 	bl	3edc <bt_le_scan_update>
		return 0;
    5860:	2400      	movs	r4, #0
    5862:	e7f4      	b.n	584e <bt_conn_disconnect+0x1a>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    5864:	2103      	movs	r1, #3
    5866:	f240 4006 	movw	r0, #1030	; 0x406
    586a:	f7fe f94b 	bl	3b04 <bt_hci_cmd_create>
	if (!buf) {
    586e:	4604      	mov	r4, r0
    5870:	b198      	cbz	r0, 589a <bt_conn_disconnect+0x66>
	disconn = net_buf_add(buf, sizeof(*disconn));
    5872:	2103      	movs	r1, #3
    5874:	3008      	adds	r0, #8
    5876:	f012 f985 	bl	17b84 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    587a:	882b      	ldrh	r3, [r5, #0]
    587c:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    587e:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    5880:	4621      	mov	r1, r4
    5882:	f240 4006 	movw	r0, #1030	; 0x406
    5886:	f7fe f961 	bl	3b4c <bt_hci_cmd_send>
	if (err) {
    588a:	4604      	mov	r4, r0
    588c:	2800      	cmp	r0, #0
    588e:	d1de      	bne.n	584e <bt_conn_disconnect+0x1a>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    5890:	2104      	movs	r1, #4
    5892:	4628      	mov	r0, r5
    5894:	f7ff fec8 	bl	5628 <bt_conn_set_state>
    5898:	e7d9      	b.n	584e <bt_conn_disconnect+0x1a>
		return -ENOBUFS;
    589a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    589e:	e7d6      	b.n	584e <bt_conn_disconnect+0x1a>

000058a0 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a2:	4607      	mov	r7, r0
    58a4:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    58a6:	f242 0013 	movw	r0, #8211	; 0x2013
    58aa:	210e      	movs	r1, #14
    58ac:	f7fe f92a 	bl	3b04 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    58b0:	4606      	mov	r6, r0
    58b2:	b1c8      	cbz	r0, 58e8 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    58b4:	210e      	movs	r1, #14
    58b6:	3008      	adds	r0, #8
    58b8:	f012 f964 	bl	17b84 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    58bc:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    58be:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    58c0:	220e      	movs	r2, #14
    58c2:	f7fa fef5 	bl	6b0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    58c6:	883b      	ldrh	r3, [r7, #0]
    58c8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    58ca:	882b      	ldrh	r3, [r5, #0]
    58cc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    58ce:	886b      	ldrh	r3, [r5, #2]
    58d0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    58d2:	88ab      	ldrh	r3, [r5, #4]
    58d4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    58d6:	88eb      	ldrh	r3, [r5, #6]
    58d8:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    58da:	4631      	mov	r1, r6
    58dc:	f242 0013 	movw	r0, #8211	; 0x2013
}
    58e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    58e4:	f7fe b932 	b.w	3b4c <bt_hci_cmd_send>
}
    58e8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    58ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000058f0 <bt_conn_le_param_update>:
{
    58f0:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    58f2:	880a      	ldrh	r2, [r1, #0]
    58f4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    58f8:	429a      	cmp	r2, r3
{
    58fa:	4604      	mov	r4, r0
    58fc:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    58fe:	d80c      	bhi.n	591a <bt_conn_le_param_update+0x2a>
    5900:	884a      	ldrh	r2, [r1, #2]
    5902:	429a      	cmp	r2, r3
    5904:	d309      	bcc.n	591a <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    5906:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    590a:	888b      	ldrh	r3, [r1, #4]
    590c:	429a      	cmp	r2, r3
    590e:	d104      	bne.n	591a <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    5910:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    5914:	88cb      	ldrh	r3, [r1, #6]
    5916:	429a      	cmp	r2, r3
    5918:	d01a      	beq.n	5950 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    591a:	f104 0070 	add.w	r0, r4, #112	; 0x70
    591e:	f013 f9e7 	bl	18cf0 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    5922:	4b0d      	ldr	r3, [pc, #52]	; (5958 <bt_conn_le_param_update+0x68>)
    5924:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5928:	079a      	lsls	r2, r3, #30
    592a:	d503      	bpl.n	5934 <bt_conn_le_param_update+0x44>
    592c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    5930:	079b      	lsls	r3, r3, #30
    5932:	d401      	bmi.n	5938 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    5934:	78e3      	ldrb	r3, [r4, #3]
    5936:	b92b      	cbnz	r3, 5944 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    5938:	4629      	mov	r1, r5
    593a:	4620      	mov	r0, r4
}
    593c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    5940:	f7ff bfae 	b.w	58a0 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    5944:	4629      	mov	r1, r5
    5946:	4620      	mov	r0, r4
}
    5948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    594c:	f000 ba30 	b.w	5db0 <bt_l2cap_update_conn_param>
}
    5950:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5954:	bd38      	pop	{r3, r4, r5, pc}
    5956:	bf00      	nop
    5958:	20005e90 	.word	0x20005e90

0000595c <le_conn_update>:
{
    595c:	b507      	push	{r0, r1, r2, lr}
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    595e:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    5962:	f8ad 3000 	strh.w	r3, [sp]
    5966:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    596a:	f8ad 3002 	strh.w	r3, [sp, #2]
    596e:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    5972:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_conn_le_param_update(conn, param);
    5976:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5978:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    597c:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    5980:	3870      	subs	r0, #112	; 0x70
    5982:	f7ff ffb5 	bl	58f0 <bt_conn_le_param_update>
}
    5986:	b003      	add	sp, #12
    5988:	f85d fb04 	ldr.w	pc, [sp], #4

0000598c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    598c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    598e:	4b07      	ldr	r3, [pc, #28]	; (59ac <bt_conn_create_pdu+0x20>)
{
    5990:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    5992:	2800      	cmp	r0, #0
    5994:	bf08      	it	eq
    5996:	4618      	moveq	r0, r3
    5998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    599c:	f012 f81c 	bl	179d8 <net_buf_alloc>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    59a0:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    59a2:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    59a4:	f012 f871 	bl	17a8a <net_buf_reserve>

	return buf;
}
    59a8:	4620      	mov	r0, r4
    59aa:	bd38      	pop	{r3, r4, r5, pc}
    59ac:	20006bc8 	.word	0x20006bc8

000059b0 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    59b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59b4:	4606      	mov	r6, r0
    59b6:	460d      	mov	r5, r1
	frag = bt_conn_create_pdu(NULL, 0);
    59b8:	2100      	movs	r1, #0
    59ba:	4608      	mov	r0, r1
    59bc:	f7ff ffe6 	bl	598c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    59c0:	7833      	ldrb	r3, [r6, #0]
    59c2:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(NULL, 0);
    59c4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    59c6:	d005      	beq.n	59d4 <create_frag.isra.6+0x24>
		net_buf_unref(frag);
    59c8:	f012 f8bc 	bl	17b44 <net_buf_unref>
		return NULL;
    59cc:	2400      	movs	r4, #0
}
    59ce:	4620      	mov	r0, r4
    59d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59d4:	89c3      	ldrh	r3, [r0, #14]
	return bt_dev.le.mtu;
    59d6:	4e11      	ldr	r6, [pc, #68]	; (5a1c <create_frag.isra.6+0x6c>)
    59d8:	4403      	add	r3, r0
    59da:	3313      	adds	r3, #19
    59dc:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    59e0:	2200      	movs	r2, #0
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    59e2:	f100 0708 	add.w	r7, r0, #8
	conn_tx(frag)->cb = NULL;
    59e6:	601a      	str	r2, [r3, #0]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    59e8:	4638      	mov	r0, r7
    59ea:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    59ee:	f012 f96e 	bl	17cce <net_buf_simple_tailroom>
    59f2:	4580      	cmp	r8, r0
    59f4:	d20c      	bcs.n	5a10 <create_frag.isra.6+0x60>
	return bt_dev.le.mtu;
    59f6:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    59fa:	f855 1f08 	ldr.w	r1, [r5, #8]!
    59fe:	4632      	mov	r2, r6
    5a00:	4638      	mov	r0, r7
    5a02:	f012 f8c5 	bl	17b90 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    5a06:	4631      	mov	r1, r6
    5a08:	4628      	mov	r0, r5
    5a0a:	f012 f926 	bl	17c5a <net_buf_simple_pull>
    5a0e:	e7de      	b.n	59ce <create_frag.isra.6+0x1e>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5a10:	4638      	mov	r0, r7
    5a12:	f012 f95c 	bl	17cce <net_buf_simple_tailroom>
    5a16:	b286      	uxth	r6, r0
    5a18:	e7ef      	b.n	59fa <create_frag.isra.6+0x4a>
    5a1a:	bf00      	nop
    5a1c:	20005e90 	.word	0x20005e90

00005a20 <bt_conn_process_tx>:
{
    5a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    5a22:	7a43      	ldrb	r3, [r0, #9]
{
    5a24:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    5a26:	b993      	cbnz	r3, 5a4e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a28:	f3bf 8f5b 	dmb	ish
    5a2c:	1d03      	adds	r3, r0, #4
    5a2e:	e853 2f00 	ldrex	r2, [r3]
    5a32:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    5a36:	e843 1400 	strex	r4, r1, [r3]
    5a3a:	2c00      	cmp	r4, #0
    5a3c:	d1f7      	bne.n	5a2e <bt_conn_process_tx+0xe>
    5a3e:	f3bf 8f5b 	dmb	ish
    5a42:	0653      	lsls	r3, r2, #25
    5a44:	d503      	bpl.n	5a4e <bt_conn_process_tx+0x2e>
}
    5a46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    5a4a:	f7ff bd59 	b.w	5500 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5a4e:	2100      	movs	r1, #0
    5a50:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5a54:	f012 f800 	bl	17a58 <net_buf_get>
	BT_ASSERT(buf);
    5a58:	4604      	mov	r4, r0
    5a5a:	b928      	cbnz	r0, 5a68 <bt_conn_process_tx+0x48>
    5a5c:	4040      	eors	r0, r0
    5a5e:	f380 8811 	msr	BASEPRI, r0
    5a62:	f04f 0004 	mov.w	r0, #4
    5a66:	df02      	svc	2
	return bt_dev.le.mtu;
    5a68:	4e19      	ldr	r6, [pc, #100]	; (5ad0 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    5a6a:	8981      	ldrh	r1, [r0, #12]
    5a6c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    5a70:	4291      	cmp	r1, r2
    5a72:	d807      	bhi.n	5a84 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    5a74:	2300      	movs	r3, #0
    5a76:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5a78:	4621      	mov	r1, r4
    5a7a:	4628      	mov	r0, r5
    5a7c:	f7ff fcb4 	bl	53e8 <send_frag>
	if (!send_buf(conn, buf)) {
    5a80:	b140      	cbz	r0, 5a94 <bt_conn_process_tx+0x74>
}
    5a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a84:	f105 0709 	add.w	r7, r5, #9
	frag = create_frag(conn, buf);
    5a88:	4601      	mov	r1, r0
    5a8a:	4638      	mov	r0, r7
    5a8c:	f7ff ff90 	bl	59b0 <create_frag.isra.6>
	if (!frag) {
    5a90:	4601      	mov	r1, r0
    5a92:	b920      	cbnz	r0, 5a9e <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    5a94:	4620      	mov	r0, r4
}
    5a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    5a9a:	f012 b853 	b.w	17b44 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    5a9e:	2301      	movs	r3, #1
    5aa0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5aa2:	4628      	mov	r0, r5
    5aa4:	f7ff fca0 	bl	53e8 <send_frag>
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d0f3      	beq.n	5a94 <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    5aac:	89a2      	ldrh	r2, [r4, #12]
    5aae:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    5ab2:	429a      	cmp	r2, r3
    5ab4:	d802      	bhi.n	5abc <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5ab6:	2300      	movs	r3, #0
    5ab8:	2201      	movs	r2, #1
    5aba:	e7dd      	b.n	5a78 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    5abc:	4621      	mov	r1, r4
    5abe:	4638      	mov	r0, r7
    5ac0:	f7ff ff76 	bl	59b0 <create_frag.isra.6>
		if (!frag) {
    5ac4:	4601      	mov	r1, r0
    5ac6:	2800      	cmp	r0, #0
    5ac8:	d0e4      	beq.n	5a94 <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5aca:	2301      	movs	r3, #1
    5acc:	461a      	mov	r2, r3
    5ace:	e7e8      	b.n	5aa2 <bt_conn_process_tx+0x82>
    5ad0:	20005e90 	.word	0x20005e90

00005ad4 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    5ad4:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <bt_conn_get_id+0x10>)
    5ad6:	1ac0      	subs	r0, r0, r3
    5ad8:	4b03      	ldr	r3, [pc, #12]	; (5ae8 <bt_conn_get_id+0x14>)
    5ada:	10c0      	asrs	r0, r0, #3
    5adc:	4358      	muls	r0, r3
}
    5ade:	b2c0      	uxtb	r0, r0
    5ae0:	4770      	bx	lr
    5ae2:	bf00      	nop
    5ae4:	20000230 	.word	0x20000230
    5ae8:	286bca1b 	.word	0x286bca1b

00005aec <bt_conn_init>:
	node->next = list->head;
    5aec:	4b0b      	ldr	r3, [pc, #44]	; (5b1c <bt_conn_init+0x30>)
    5aee:	4a0c      	ldr	r2, [pc, #48]	; (5b20 <bt_conn_init+0x34>)
    5af0:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    5af2:	b510      	push	{r4, lr}
    5af4:	6011      	str	r1, [r2, #0]
	if (!list->tail) {
    5af6:	6859      	ldr	r1, [r3, #4]
    5af8:	b901      	cbnz	r1, 5afc <bt_conn_init+0x10>
		list->tail = list->head;
    5afa:	605a      	str	r2, [r3, #4]
	if (!list->tail) {
    5afc:	6859      	ldr	r1, [r3, #4]
	node->next = list->head;
    5afe:	6092      	str	r2, [r2, #8]
	list->head = node;
    5b00:	4a08      	ldr	r2, [pc, #32]	; (5b24 <bt_conn_init+0x38>)
    5b02:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    5b04:	b901      	cbnz	r1, 5b08 <bt_conn_init+0x1c>
		list->tail = list->head;
    5b06:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    5b08:	f001 f95c 	bl	6dc4 <bt_att_init>

	err = bt_smp_init();
    5b0c:	f001 fe5a 	bl	77c4 <bt_smp_init>
	if (err) {
    5b10:	4604      	mov	r4, r0
    5b12:	b908      	cbnz	r0, 5b18 <bt_conn_init+0x2c>
		return err;
	}

	bt_l2cap_init();
    5b14:	f000 f982 	bl	5e1c <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    5b18:	4620      	mov	r0, r4
    5b1a:	bd10      	pop	{r4, pc}
    5b1c:	200002c8 	.word	0x200002c8
    5b20:	20000220 	.word	0x20000220
    5b24:	20000228 	.word	0x20000228

00005b28 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    5b28:	4770      	bx	lr
	...

00005b2c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    5b2c:	4b04      	ldr	r3, [pc, #16]	; (5b40 <l2cap_accept+0x14>)
    5b2e:	6818      	ldr	r0, [r3, #0]
    5b30:	b918      	cbnz	r0, 5b3a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5b32:	4a04      	ldr	r2, [pc, #16]	; (5b44 <l2cap_accept+0x18>)
    5b34:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    5b36:	600b      	str	r3, [r1, #0]

		return 0;
    5b38:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    5b3a:	f06f 000b 	mvn.w	r0, #11
}
    5b3e:	4770      	bx	lr
    5b40:	200002d0 	.word	0x200002d0
    5b44:	20005fe4 	.word	0x20005fe4

00005b48 <l2cap_connected>:
    5b48:	4770      	bx	lr
	...

00005b4c <bt_l2cap_le_fixed_chan_register>:
	node->next = NULL;
    5b4c:	2300      	movs	r3, #0
    5b4e:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    5b50:	4b05      	ldr	r3, [pc, #20]	; (5b68 <bt_l2cap_le_fixed_chan_register+0x1c>)
    5b52:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    5b54:	f100 0208 	add.w	r2, r0, #8
    5b58:	b911      	cbnz	r1, 5b60 <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
    5b5a:	605a      	str	r2, [r3, #4]
		list->head = node;
    5b5c:	601a      	str	r2, [r3, #0]
    5b5e:	4770      	bx	lr
		list->tail->next = node;
    5b60:	600a      	str	r2, [r1, #0]
		list->tail = node;
    5b62:	605a      	str	r2, [r3, #4]
    5b64:	4770      	bx	lr
    5b66:	bf00      	nop
    5b68:	20000368 	.word	0x20000368

00005b6c <bt_l2cap_chan_remove>:
{
    5b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5b6e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5b70:	b113      	cbz	r3, 5b78 <bt_l2cap_chan_remove+0xc>
    5b72:	3b08      	subs	r3, #8
    5b74:	2200      	movs	r2, #0
    5b76:	b903      	cbnz	r3, 5b7a <bt_l2cap_chan_remove+0xe>
    5b78:	bd30      	pop	{r4, r5, pc}
		if (chan == ch) {
    5b7a:	428b      	cmp	r3, r1
    5b7c:	f103 0408 	add.w	r4, r3, #8
    5b80:	d10e      	bne.n	5ba0 <bt_l2cap_chan_remove+0x34>
    5b82:	6899      	ldr	r1, [r3, #8]
    5b84:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	if (!prev_node) {
    5b86:	b932      	cbnz	r2, 5b96 <bt_l2cap_chan_remove+0x2a>
		if (list->tail == node) {
    5b88:	42ac      	cmp	r4, r5
		list->head = node->next;
    5b8a:	6381      	str	r1, [r0, #56]	; 0x38
		if (list->tail == node) {
    5b8c:	d100      	bne.n	5b90 <bt_l2cap_chan_remove+0x24>
			list->tail = list->head;
    5b8e:	63c1      	str	r1, [r0, #60]	; 0x3c
	node->next = NULL;
    5b90:	2200      	movs	r2, #0
    5b92:	609a      	str	r2, [r3, #8]
    5b94:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
    5b96:	42ac      	cmp	r4, r5
		prev_node->next = node->next;
    5b98:	6011      	str	r1, [r2, #0]
			list->tail = prev_node;
    5b9a:	bf08      	it	eq
    5b9c:	63c2      	streq	r2, [r0, #60]	; 0x3c
    5b9e:	e7f7      	b.n	5b90 <bt_l2cap_chan_remove+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    5ba0:	4622      	mov	r2, r4
    5ba2:	2c00      	cmp	r4, #0
    5ba4:	d0e8      	beq.n	5b78 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5ba6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d0e5      	beq.n	5b78 <bt_l2cap_chan_remove+0xc>
    5bac:	3b08      	subs	r3, #8
    5bae:	e7e2      	b.n	5b76 <bt_l2cap_chan_remove+0xa>

00005bb0 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    5bb0:	6803      	ldr	r3, [r0, #0]
{
    5bb2:	b510      	push	{r4, lr}
    5bb4:	4604      	mov	r4, r0
	if (!chan->conn) {
    5bb6:	b12b      	cbz	r3, 5bc4 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    5bb8:	6843      	ldr	r3, [r0, #4]
    5bba:	685b      	ldr	r3, [r3, #4]
    5bbc:	b103      	cbz	r3, 5bc0 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    5bbe:	4798      	blx	r3
	chan->conn = NULL;
    5bc0:	2300      	movs	r3, #0
    5bc2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    5bc4:	68e3      	ldr	r3, [r4, #12]
    5bc6:	b11b      	cbz	r3, 5bd0 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    5bc8:	4620      	mov	r0, r4
}
    5bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    5bce:	4718      	bx	r3
    5bd0:	bd10      	pop	{r4, pc}

00005bd2 <l2cap_rtx_timeout>:
{
    5bd2:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5bd4:	f1a0 0410 	sub.w	r4, r0, #16
    5bd8:	4621      	mov	r1, r4
    5bda:	f850 0c10 	ldr.w	r0, [r0, #-16]
    5bde:	f7ff ffc5 	bl	5b6c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5be2:	4620      	mov	r0, r4
}
    5be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    5be8:	f7ff bfe2 	b.w	5bb0 <bt_l2cap_chan_del>

00005bec <bt_l2cap_connected>:
{
    5bec:	4b1a      	ldr	r3, [pc, #104]	; (5c58 <bt_l2cap_connected+0x6c>)
    5bee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5bf2:	681c      	ldr	r4, [r3, #0]
    5bf4:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5bf6:	b12c      	cbz	r4, 5c04 <bt_l2cap_connected+0x18>
	node->next = NULL;
    5bf8:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5bfa:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5c5c <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5bfe:	3c08      	subs	r4, #8
    5c00:	46b9      	mov	r9, r7
    5c02:	b914      	cbnz	r4, 5c0a <bt_l2cap_connected+0x1e>
}
    5c04:	b003      	add	sp, #12
    5c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5c0a:	6863      	ldr	r3, [r4, #4]
    5c0c:	a901      	add	r1, sp, #4
    5c0e:	4630      	mov	r0, r6
    5c10:	4798      	blx	r3
    5c12:	2800      	cmp	r0, #0
    5c14:	db18      	blt.n	5c48 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    5c16:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5c18:	8823      	ldrh	r3, [r4, #0]
    5c1a:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5c1c:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5c20:	4641      	mov	r1, r8
    5c22:	f105 0010 	add.w	r0, r5, #16
    5c26:	f013 f845 	bl	18cb4 <k_delayed_work_init>
	if (!list->tail) {
    5c2a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
	node->next = NULL;
    5c2c:	60af      	str	r7, [r5, #8]
	sys_slist_append(&conn->channels, &chan->node);
    5c2e:	f105 0308 	add.w	r3, r5, #8
	if (!list->tail) {
    5c32:	b972      	cbnz	r2, 5c52 <bt_l2cap_connected+0x66>
		list->tail = node;
    5c34:	63f3      	str	r3, [r6, #60]	; 0x3c
		list->head = node;
    5c36:	63b3      	str	r3, [r6, #56]	; 0x38
		if (chan->ops->connected) {
    5c38:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5c3a:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5c3c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    5c3e:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    5c42:	681b      	ldr	r3, [r3, #0]
    5c44:	b103      	cbz	r3, 5c48 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5c46:	4798      	blx	r3
	return node->next;
    5c48:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5c4a:	2c00      	cmp	r4, #0
    5c4c:	d0da      	beq.n	5c04 <bt_l2cap_connected+0x18>
    5c4e:	3c08      	subs	r4, #8
    5c50:	e7d7      	b.n	5c02 <bt_l2cap_connected+0x16>
		list->tail->next = node;
    5c52:	6013      	str	r3, [r2, #0]
		list->tail = node;
    5c54:	63f3      	str	r3, [r6, #60]	; 0x3c
    5c56:	e7ef      	b.n	5c38 <bt_l2cap_connected+0x4c>
    5c58:	20000368 	.word	0x20000368
    5c5c:	00005bd3 	.word	0x00005bd3

00005c60 <bt_l2cap_disconnected>:
{
    5c60:	6b83      	ldr	r3, [r0, #56]	; 0x38
    5c62:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5c64:	b1a3      	cbz	r3, 5c90 <bt_l2cap_disconnected+0x30>
    5c66:	f1b3 0008 	subs.w	r0, r3, #8
    5c6a:	d10a      	bne.n	5c82 <bt_l2cap_disconnected+0x22>
    5c6c:	bd10      	pop	{r4, pc}
    5c6e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5c70:	f7ff ff9e 	bl	5bb0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5c74:	b164      	cbz	r4, 5c90 <bt_l2cap_disconnected+0x30>
	return node->next;
    5c76:	68a3      	ldr	r3, [r4, #8]
    5c78:	b103      	cbz	r3, 5c7c <bt_l2cap_disconnected+0x1c>
    5c7a:	3b08      	subs	r3, #8
{
    5c7c:	4620      	mov	r0, r4
    5c7e:	461c      	mov	r4, r3
    5c80:	e7f6      	b.n	5c70 <bt_l2cap_disconnected+0x10>
    5c82:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5c84:	2c00      	cmp	r4, #0
    5c86:	d1f2      	bne.n	5c6e <bt_l2cap_disconnected+0xe>
}
    5c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    5c8c:	f7ff bf90 	b.w	5bb0 <bt_l2cap_chan_del>
    5c90:	bd10      	pop	{r4, pc}

00005c92 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5c92:	3104      	adds	r1, #4
    5c94:	f7ff be7a 	b.w	598c <bt_conn_create_pdu>

00005c98 <bt_l2cap_send_cb>:
{
    5c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c9a:	4614      	mov	r4, r2
    5c9c:	4605      	mov	r5, r0
    5c9e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    5ca0:	f102 0008 	add.w	r0, r2, #8
    5ca4:	2104      	movs	r1, #4
{
    5ca6:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    5ca8:	f011 ffb2 	bl	17c10 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5cac:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    5cae:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5cb0:	3904      	subs	r1, #4
    5cb2:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    5cb4:	4632      	mov	r2, r6
    5cb6:	4621      	mov	r1, r4
    5cb8:	4628      	mov	r0, r5
}
    5cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    5cbe:	f7ff bb4c 	b.w	535a <bt_conn_send_cb>

00005cc2 <l2cap_recv>:
{
    5cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    5cc6:	898b      	ldrh	r3, [r1, #12]
    5cc8:	2b03      	cmp	r3, #3
{
    5cca:	4606      	mov	r6, r0
    5ccc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5cce:	d931      	bls.n	5d34 <l2cap_recv+0x72>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5cd0:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5cd2:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5cd4:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5cd8:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5cda:	f011 ffbe 	bl	17c5a <net_buf_simple_pull>
	if (buf->len != len) {
    5cde:	89ab      	ldrh	r3, [r5, #12]
    5ce0:	42bb      	cmp	r3, r7
    5ce2:	d127      	bne.n	5d34 <l2cap_recv+0x72>
	if (!hdr->ident) {
    5ce4:	7867      	ldrb	r7, [r4, #1]
    5ce6:	b32f      	cbz	r7, 5d34 <l2cap_recv+0x72>
	switch (hdr->code) {
    5ce8:	7823      	ldrb	r3, [r4, #0]
    5cea:	2b01      	cmp	r3, #1
    5cec:	d022      	beq.n	5d34 <l2cap_recv+0x72>
    5cee:	2b13      	cmp	r3, #19
    5cf0:	d020      	beq.n	5d34 <l2cap_recv+0x72>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5cf2:	2104      	movs	r1, #4
    5cf4:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
    5cf6:	f8d6 8000 	ldr.w	r8, [r6]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5cfa:	f7ff fe47 	bl	598c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5cfe:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5d02:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5d04:	2104      	movs	r1, #4
    5d06:	4630      	mov	r0, r6
    5d08:	f011 ff3c 	bl	17b84 <net_buf_simple_add>
	hdr->len = sys_cpu_to_le16(len);
    5d0c:	2400      	movs	r4, #0
	hdr->code = code;
    5d0e:	2301      	movs	r3, #1
	hdr->len = sys_cpu_to_le16(len);
    5d10:	2102      	movs	r1, #2
	hdr->code = code;
    5d12:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
    5d14:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5d16:	7081      	strb	r1, [r0, #2]
    5d18:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
    5d1a:	4630      	mov	r0, r6
    5d1c:	f011 ff32 	bl	17b84 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    5d20:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    5d22:	7004      	strb	r4, [r0, #0]
    5d24:	7044      	strb	r4, [r0, #1]
    5d26:	462a      	mov	r2, r5
    5d28:	4640      	mov	r0, r8
    5d2a:	2105      	movs	r1, #5
}
    5d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d30:	f7ff bfb2 	b.w	5c98 <bt_l2cap_send_cb>
    5d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d38 <bt_l2cap_le_lookup_tx_cid>:
{
    5d38:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5d3a:	b100      	cbz	r0, 5d3e <bt_l2cap_le_lookup_tx_cid+0x6>
    5d3c:	3808      	subs	r0, #8
    5d3e:	b900      	cbnz	r0, 5d42 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    5d40:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5d42:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    5d46:	428b      	cmp	r3, r1
    5d48:	d0fa      	beq.n	5d40 <bt_l2cap_le_lookup_tx_cid+0x8>
    5d4a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5d4c:	2000      	movs	r0, #0
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d0f6      	beq.n	5d40 <bt_l2cap_le_lookup_tx_cid+0x8>
    5d52:	f1a3 0008 	sub.w	r0, r3, #8
    5d56:	e7f2      	b.n	5d3e <bt_l2cap_le_lookup_tx_cid+0x6>

00005d58 <bt_l2cap_le_lookup_rx_cid>:
{
    5d58:	6b80      	ldr	r0, [r0, #56]	; 0x38
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5d5a:	b100      	cbz	r0, 5d5e <bt_l2cap_le_lookup_rx_cid+0x6>
    5d5c:	3808      	subs	r0, #8
    5d5e:	b900      	cbnz	r0, 5d62 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    5d60:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    5d62:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    5d64:	428b      	cmp	r3, r1
    5d66:	d0fb      	beq.n	5d60 <bt_l2cap_le_lookup_rx_cid+0x8>
    5d68:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5d6a:	2000      	movs	r0, #0
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d0f7      	beq.n	5d60 <bt_l2cap_le_lookup_rx_cid+0x8>
    5d70:	f1a3 0008 	sub.w	r0, r3, #8
    5d74:	e7f3      	b.n	5d5e <bt_l2cap_le_lookup_rx_cid+0x6>

00005d76 <bt_l2cap_recv>:
{
    5d76:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    5d78:	898b      	ldrh	r3, [r1, #12]
    5d7a:	2b03      	cmp	r3, #3
{
    5d7c:	4605      	mov	r5, r0
    5d7e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    5d80:	d804      	bhi.n	5d8c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
    5d82:	4620      	mov	r0, r4
}
    5d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    5d88:	f011 bedc 	b.w	17b44 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    5d8c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5d8e:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    5d90:	f850 3f08 	ldr.w	r3, [r0, #8]!
    5d94:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5d96:	f011 ff60 	bl	17c5a <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5d9a:	4631      	mov	r1, r6
    5d9c:	4628      	mov	r0, r5
    5d9e:	f7ff ffdb 	bl	5d58 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    5da2:	2800      	cmp	r0, #0
    5da4:	d0ed      	beq.n	5d82 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    5da6:	6843      	ldr	r3, [r0, #4]
    5da8:	4621      	mov	r1, r4
    5daa:	691b      	ldr	r3, [r3, #16]
    5dac:	4798      	blx	r3
    5dae:	e7e8      	b.n	5d82 <bt_l2cap_recv+0xc>

00005db0 <bt_l2cap_update_conn_param>:
{
    5db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
    5db4:	4b18      	ldr	r3, [pc, #96]	; (5e18 <bt_l2cap_update_conn_param+0x68>)
    5db6:	781a      	ldrb	r2, [r3, #0]
    5db8:	3201      	adds	r2, #1
	if (!ident) {
    5dba:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    5dbe:	bf08      	it	eq
    5dc0:	2201      	moveq	r2, #1
{
    5dc2:	460c      	mov	r4, r1
		ident++;
    5dc4:	701a      	strb	r2, [r3, #0]
{
    5dc6:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5dc8:	2104      	movs	r1, #4
    5dca:	2000      	movs	r0, #0
	return ident;
    5dcc:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5dce:	f7ff fddd 	bl	598c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5dd2:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5dd6:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5dd8:	2104      	movs	r1, #4
    5dda:	4640      	mov	r0, r8
    5ddc:	f011 fed2 	bl	17b84 <net_buf_simple_add>
	hdr->code = code;
    5de0:	2312      	movs	r3, #18
	hdr->ident = ident;
    5de2:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5de4:	2108      	movs	r1, #8
    5de6:	2600      	movs	r6, #0
	hdr->code = code;
    5de8:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    5dea:	7081      	strb	r1, [r0, #2]
    5dec:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    5dee:	4640      	mov	r0, r8
    5df0:	f011 fec8 	bl	17b84 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5df4:	8823      	ldrh	r3, [r4, #0]
    5df6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5df8:	8863      	ldrh	r3, [r4, #2]
    5dfa:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    5dfc:	88a3      	ldrh	r3, [r4, #4]
    5dfe:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5e00:	88e3      	ldrh	r3, [r4, #6]
    5e02:	80c3      	strh	r3, [r0, #6]
    5e04:	463a      	mov	r2, r7
    5e06:	4628      	mov	r0, r5
    5e08:	4633      	mov	r3, r6
    5e0a:	2105      	movs	r1, #5
    5e0c:	f7ff ff44 	bl	5c98 <bt_l2cap_send_cb>
}
    5e10:	4630      	mov	r0, r6
    5e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e16:	bf00      	nop
    5e18:	20000364 	.word	0x20000364

00005e1c <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    5e1c:	4801      	ldr	r0, [pc, #4]	; (5e24 <bt_l2cap_init+0x8>)
    5e1e:	f7ff be95 	b.w	5b4c <bt_l2cap_le_fixed_chan_register>
    5e22:	bf00      	nop
    5e24:	20005fd8 	.word	0x20005fd8

00005e28 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    5e28:	2006      	movs	r0, #6
    5e2a:	4770      	bx	lr

00005e2c <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    5e2c:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5e2e:	4a0a      	ldr	r2, [pc, #40]	; (5e58 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e30:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    5e32:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    5e36:	4284      	cmp	r4, r0
    5e38:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    5e3c:	d102      	bne.n	5e44 <att_op_get_type+0x18>
			return handlers[i].type;
    5e3e:	440a      	add	r2, r1
    5e40:	7890      	ldrb	r0, [r2, #2]
    5e42:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e44:	3301      	adds	r3, #1
    5e46:	2b1b      	cmp	r3, #27
    5e48:	d1f3      	bne.n	5e32 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    5e4a:	f010 0f40 	tst.w	r0, #64	; 0x40
    5e4e:	bf14      	ite	ne
    5e50:	2000      	movne	r0, #0
    5e52:	2006      	moveq	r0, #6
}
    5e54:	bd10      	pop	{r4, pc}
    5e56:	bf00      	nop
    5e58:	00019e18 	.word	0x00019e18

00005e5c <att_req_destroy>:
{
    5e5c:	b510      	push	{r4, lr}
    5e5e:	4604      	mov	r4, r0
	if (req->buf) {
    5e60:	6900      	ldr	r0, [r0, #16]
    5e62:	b108      	cbz	r0, 5e68 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    5e64:	f011 fe6e 	bl	17b44 <net_buf_unref>
	if (req->destroy) {
    5e68:	68a3      	ldr	r3, [r4, #8]
    5e6a:	b10b      	cbz	r3, 5e70 <att_req_destroy+0x14>
		req->destroy(req);
    5e6c:	4620      	mov	r0, r4
    5e6e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    5e70:	4620      	mov	r0, r4
    5e72:	2214      	movs	r2, #20
    5e74:	2100      	movs	r1, #0
}
    5e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    5e7a:	f7fa bc19 	b.w	6b0 <memset>

00005e7e <att_notify>:
{
    5e7e:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    5e80:	f101 0008 	add.w	r0, r1, #8
    5e84:	f011 fef9 	bl	17c7a <net_buf_simple_pull_le16>
}
    5e88:	2000      	movs	r0, #0
    5e8a:	bd08      	pop	{r3, pc}

00005e8c <read_group_cb>:
{
    5e8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5e90:	680d      	ldr	r5, [r1, #0]
{
    5e92:	4606      	mov	r6, r0
    5e94:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5e96:	f04f 0800 	mov.w	r8, #0
    5e9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5e9e:	a902      	add	r1, sp, #8
    5ea0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    5ea2:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5ea4:	f88d 8008 	strb.w	r8, [sp, #8]
    5ea8:	f8ad 300a 	strh.w	r3, [sp, #10]
    5eac:	f7fd fd2a 	bl	3904 <bt_uuid_cmp>
    5eb0:	b198      	cbz	r0, 5eda <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5eb2:	f642 0301 	movw	r3, #10241	; 0x2801
    5eb6:	a903      	add	r1, sp, #12
    5eb8:	6830      	ldr	r0, [r6, #0]
    5eba:	f88d 800c 	strb.w	r8, [sp, #12]
    5ebe:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ec2:	f7fd fd1f 	bl	3904 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5ec6:	b140      	cbz	r0, 5eda <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    5ec8:	6923      	ldr	r3, [r4, #16]
    5eca:	b123      	cbz	r3, 5ed6 <read_group_cb+0x4a>
    5ecc:	8a32      	ldrh	r2, [r6, #16]
    5ece:	8859      	ldrh	r1, [r3, #2]
    5ed0:	4291      	cmp	r1, r2
    5ed2:	d200      	bcs.n	5ed6 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5ed4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5ed6:	2001      	movs	r0, #1
    5ed8:	e012      	b.n	5f00 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5eda:	6861      	ldr	r1, [r4, #4]
    5edc:	6830      	ldr	r0, [r6, #0]
    5ede:	f7fd fd11 	bl	3904 <bt_uuid_cmp>
    5ee2:	b110      	cbz	r0, 5eea <read_group_cb+0x5e>
		data->group = NULL;
    5ee4:	2300      	movs	r3, #0
    5ee6:	6123      	str	r3, [r4, #16]
    5ee8:	e7f5      	b.n	5ed6 <read_group_cb+0x4a>
	if (data->rsp->len &&
    5eea:	68e3      	ldr	r3, [r4, #12]
    5eec:	68a0      	ldr	r0, [r4, #8]
    5eee:	781a      	ldrb	r2, [r3, #0]
    5ef0:	b14a      	cbz	r2, 5f06 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5ef2:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5ef6:	8981      	ldrh	r1, [r0, #12]
    5ef8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5efa:	4293      	cmp	r3, r2
    5efc:	da03      	bge.n	5f06 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    5efe:	2000      	movs	r0, #0
}
    5f00:	b004      	add	sp, #16
    5f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5f06:	2104      	movs	r1, #4
    5f08:	3008      	adds	r0, #8
    5f0a:	f011 fe3b 	bl	17b84 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5f0e:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5f10:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5f12:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5f14:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5f16:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5f18:	898a      	ldrh	r2, [r1, #12]
    5f1a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    5f1e:	6889      	ldr	r1, [r1, #8]
    5f20:	f8d6 8004 	ldr.w	r8, [r6, #4]
    5f24:	1a9b      	subs	r3, r3, r2
    5f26:	2500      	movs	r5, #0
    5f28:	440a      	add	r2, r1
    5f2a:	9500      	str	r5, [sp, #0]
    5f2c:	4631      	mov	r1, r6
    5f2e:	b29b      	uxth	r3, r3
    5f30:	4638      	mov	r0, r7
    5f32:	47c0      	blx	r8
	if (read < 0) {
    5f34:	1e01      	subs	r1, r0, #0
    5f36:	dbe2      	blt.n	5efe <read_group_cb+0x72>
	if (!data->rsp->len) {
    5f38:	68e0      	ldr	r0, [r4, #12]
    5f3a:	7802      	ldrb	r2, [r0, #0]
    5f3c:	1d0b      	adds	r3, r1, #4
    5f3e:	b92a      	cbnz	r2, 5f4c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    5f40:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    5f42:	68a0      	ldr	r0, [r4, #8]
    5f44:	3008      	adds	r0, #8
    5f46:	f011 fe1d 	bl	17b84 <net_buf_simple_add>
    5f4a:	e7c4      	b.n	5ed6 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    5f4c:	429a      	cmp	r2, r3
    5f4e:	d0f8      	beq.n	5f42 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    5f50:	68a2      	ldr	r2, [r4, #8]
    5f52:	8993      	ldrh	r3, [r2, #12]
    5f54:	3b04      	subs	r3, #4
    5f56:	8193      	strh	r3, [r2, #12]
    5f58:	e7d1      	b.n	5efe <read_group_cb+0x72>

00005f5a <find_info_cb>:
	if (!data->rsp) {
    5f5a:	688b      	ldr	r3, [r1, #8]
{
    5f5c:	b570      	push	{r4, r5, r6, lr}
    5f5e:	4605      	mov	r5, r0
    5f60:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    5f62:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    5f64:	b963      	cbnz	r3, 5f80 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5f66:	6848      	ldr	r0, [r1, #4]
    5f68:	2101      	movs	r1, #1
    5f6a:	3008      	adds	r0, #8
    5f6c:	f011 fe0a 	bl	17b84 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5f70:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5f72:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5f74:	781b      	ldrb	r3, [r3, #0]
    5f76:	2b00      	cmp	r3, #0
    5f78:	bf0c      	ite	eq
    5f7a:	2301      	moveq	r3, #1
    5f7c:	2302      	movne	r3, #2
    5f7e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    5f80:	68a3      	ldr	r3, [r4, #8]
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	2b01      	cmp	r3, #1
    5f86:	d003      	beq.n	5f90 <find_info_cb+0x36>
    5f88:	2b02      	cmp	r3, #2
    5f8a:	d01a      	beq.n	5fc2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    5f8c:	2000      	movs	r0, #0
}
    5f8e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    5f90:	682b      	ldr	r3, [r5, #0]
    5f92:	781b      	ldrb	r3, [r3, #0]
    5f94:	2b00      	cmp	r3, #0
    5f96:	d1f9      	bne.n	5f8c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5f98:	6860      	ldr	r0, [r4, #4]
    5f9a:	2104      	movs	r1, #4
    5f9c:	3008      	adds	r0, #8
    5f9e:	f011 fdf1 	bl	17b84 <net_buf_simple_add>
    5fa2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5fa4:	8a2b      	ldrh	r3, [r5, #16]
    5fa6:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5fa8:	682b      	ldr	r3, [r5, #0]
    5faa:	885b      	ldrh	r3, [r3, #2]
    5fac:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    5fae:	6863      	ldr	r3, [r4, #4]
    5fb0:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5fb4:	899b      	ldrh	r3, [r3, #12]
    5fb6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5fb8:	2804      	cmp	r0, #4
    5fba:	bf94      	ite	ls
    5fbc:	2000      	movls	r0, #0
    5fbe:	2001      	movhi	r0, #1
    5fc0:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5fc2:	682b      	ldr	r3, [r5, #0]
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	2b02      	cmp	r3, #2
    5fc8:	d1e0      	bne.n	5f8c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    5fca:	6860      	ldr	r0, [r4, #4]
    5fcc:	2112      	movs	r1, #18
    5fce:	3008      	adds	r0, #8
    5fd0:	f011 fdd8 	bl	17b84 <net_buf_simple_add>
    5fd4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5fd6:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5fd8:	8a2b      	ldrh	r3, [r5, #16]
    5fda:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5fde:	2210      	movs	r2, #16
    5fe0:	3101      	adds	r1, #1
    5fe2:	f7fa fb39 	bl	658 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    5fe6:	6863      	ldr	r3, [r4, #4]
    5fe8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    5fec:	899b      	ldrh	r3, [r3, #12]
    5fee:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    5ff0:	2812      	cmp	r0, #18
    5ff2:	e7e2      	b.n	5fba <find_info_cb+0x60>

00005ff4 <find_type_cb>:
{
    5ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    5ff8:	680e      	ldr	r6, [r1, #0]
{
    5ffa:	b088      	sub	sp, #32
    5ffc:	4605      	mov	r5, r0
    5ffe:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6000:	2700      	movs	r7, #0
    6002:	f642 0301 	movw	r3, #10241	; 0x2801
    6006:	a902      	add	r1, sp, #8
    6008:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    600a:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    600e:	f88d 7008 	strb.w	r7, [sp, #8]
    6012:	f8ad 300a 	strh.w	r3, [sp, #10]
    6016:	f7fd fc75 	bl	3904 <bt_uuid_cmp>
    601a:	b928      	cbnz	r0, 6028 <find_type_cb+0x34>
		data->group = NULL;
    601c:	2300      	movs	r3, #0
    601e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    6020:	2001      	movs	r0, #1
}
    6022:	b008      	add	sp, #32
    6024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    6028:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    602c:	a903      	add	r1, sp, #12
    602e:	6828      	ldr	r0, [r5, #0]
    6030:	f88d 700c 	strb.w	r7, [sp, #12]
    6034:	f8ad 300e 	strh.w	r3, [sp, #14]
    6038:	f7fd fc64 	bl	3904 <bt_uuid_cmp>
    603c:	b140      	cbz	r0, 6050 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    603e:	68a3      	ldr	r3, [r4, #8]
    6040:	2b00      	cmp	r3, #0
    6042:	d0ed      	beq.n	6020 <find_type_cb+0x2c>
    6044:	8a2a      	ldrh	r2, [r5, #16]
    6046:	8859      	ldrh	r1, [r3, #2]
    6048:	4291      	cmp	r1, r2
    604a:	d2e9      	bcs.n	6020 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    604c:	805a      	strh	r2, [r3, #2]
    604e:	e7e7      	b.n	6020 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    6050:	6862      	ldr	r2, [r4, #4]
    6052:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    6056:	8992      	ldrh	r2, [r2, #12]
    6058:	1a9b      	subs	r3, r3, r2
    605a:	2b03      	cmp	r3, #3
    605c:	d9e1      	bls.n	6022 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    605e:	2310      	movs	r3, #16
    6060:	9000      	str	r0, [sp, #0]
    6062:	eb0d 0203 	add.w	r2, sp, r3
    6066:	686e      	ldr	r6, [r5, #4]
    6068:	4629      	mov	r1, r5
    606a:	4640      	mov	r0, r8
    606c:	47b0      	blx	r6
	if (read < 0) {
    606e:	1e02      	subs	r2, r0, #0
    6070:	dbd4      	blt.n	601c <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    6072:	7c23      	ldrb	r3, [r4, #16]
    6074:	429a      	cmp	r2, r3
    6076:	d1d1      	bne.n	601c <find_type_cb+0x28>
    6078:	a904      	add	r1, sp, #16
    607a:	68e0      	ldr	r0, [r4, #12]
    607c:	f7fa fad7 	bl	62e <memcmp>
    6080:	2800      	cmp	r0, #0
    6082:	d1cb      	bne.n	601c <find_type_cb+0x28>
	data->err = 0x00;
    6084:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6086:	6860      	ldr	r0, [r4, #4]
    6088:	2104      	movs	r1, #4
    608a:	3008      	adds	r0, #8
    608c:	f011 fd7a 	bl	17b84 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    6090:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6092:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    6094:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    6096:	8043      	strh	r3, [r0, #2]
    6098:	e7c2      	b.n	6020 <find_type_cb+0x2c>
	...

0000609c <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    609c:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    609e:	2317      	movs	r3, #23
{
    60a0:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    60a2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    60a6:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    60a8:	4906      	ldr	r1, [pc, #24]	; (60c4 <bt_att_connected+0x28>)
    60aa:	30a4      	adds	r0, #164	; 0xa4
    60ac:	f012 fe02 	bl	18cb4 <k_delayed_work_init>
	list->head = NULL;
    60b0:	2300      	movs	r3, #0
    60b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    60b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    60ba:	6820      	ldr	r0, [r4, #0]
}
    60bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    60c0:	f001 bb3e 	b.w	7740 <bt_gatt_connected>
    60c4:	00006595 	.word	0x00006595

000060c8 <check_perm.isra.3>:
	if ((mask & BT_GATT_PERM_READ) &&
    60c8:	f011 0f01 	tst.w	r1, #1
    60cc:	7c83      	ldrb	r3, [r0, #18]
    60ce:	d004      	beq.n	60da <check_perm.isra.3+0x12>
    60d0:	f013 0f15 	tst.w	r3, #21
    60d4:	d012      	beq.n	60fc <check_perm.isra.3+0x34>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    60d6:	6842      	ldr	r2, [r0, #4]
    60d8:	b182      	cbz	r2, 60fc <check_perm.isra.3+0x34>
	if ((mask & BT_GATT_PERM_WRITE) &&
    60da:	078a      	lsls	r2, r1, #30
    60dc:	d504      	bpl.n	60e8 <check_perm.isra.3+0x20>
    60de:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    60e2:	d00d      	beq.n	6100 <check_perm.isra.3+0x38>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    60e4:	6882      	ldr	r2, [r0, #8]
    60e6:	b15a      	cbz	r2, 6100 <check_perm.isra.3+0x38>
	mask &= attr->perm;
    60e8:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    60ea:	f011 0f30 	tst.w	r1, #48	; 0x30
    60ee:	d109      	bne.n	6104 <check_perm.isra.3+0x3c>
	return 0;
    60f0:	f011 0f0c 	tst.w	r1, #12
    60f4:	bf14      	ite	ne
    60f6:	200f      	movne	r0, #15
    60f8:	2000      	moveq	r0, #0
    60fa:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    60fc:	2002      	movs	r0, #2
    60fe:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    6100:	2003      	movs	r0, #3
    6102:	4770      	bx	lr
		return BT_ATT_ERR_AUTHENTICATION;
    6104:	2005      	movs	r0, #5
}
    6106:	4770      	bx	lr

00006108 <read_type_cb>:
{
    6108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    610c:	680f      	ldr	r7, [r1, #0]
{
    610e:	4606      	mov	r6, r0
    6110:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6112:	6800      	ldr	r0, [r0, #0]
    6114:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    6116:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    611a:	f7fd fbf3 	bl	3904 <bt_uuid_cmp>
    611e:	4680      	mov	r8, r0
    6120:	2800      	cmp	r0, #0
    6122:	d14d      	bne.n	61c0 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6124:	2115      	movs	r1, #21
    6126:	4630      	mov	r0, r6
    6128:	f7ff ffce 	bl	60c8 <check_perm.isra.3>
    612c:	4605      	mov	r5, r0
    612e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6130:	b148      	cbz	r0, 6146 <read_type_cb+0x3e>
		if (data->rsp->len) {
    6132:	68e3      	ldr	r3, [r4, #12]
    6134:	781d      	ldrb	r5, [r3, #0]
    6136:	b115      	cbz	r5, 613e <read_type_cb+0x36>
			data->err = 0x00;
    6138:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    613c:	4645      	mov	r5, r8
}
    613e:	4628      	mov	r0, r5
    6140:	b003      	add	sp, #12
    6142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    6146:	68a0      	ldr	r0, [r4, #8]
    6148:	2102      	movs	r1, #2
    614a:	3008      	adds	r0, #8
    614c:	f011 fd1a 	bl	17b84 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    6150:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6152:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    6154:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    6156:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6158:	898a      	ldrh	r2, [r1, #12]
    615a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    615e:	6889      	ldr	r1, [r1, #8]
    6160:	f8d6 8004 	ldr.w	r8, [r6, #4]
    6164:	9500      	str	r5, [sp, #0]
    6166:	1a9b      	subs	r3, r3, r2
    6168:	b29b      	uxth	r3, r3
    616a:	440a      	add	r2, r1
    616c:	4648      	mov	r0, r9
    616e:	4631      	mov	r1, r6
    6170:	47c0      	blx	r8
	if (read < 0) {
    6172:	1e01      	subs	r1, r0, #0
    6174:	da08      	bge.n	6188 <read_type_cb+0x80>
	if (err < 0 && err >= -0xff) {
    6176:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    617a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    617c:	bf9a      	itte	ls
    617e:	4249      	negls	r1, r1
    6180:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    6182:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    6184:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    6186:	e7da      	b.n	613e <read_type_cb+0x36>
	if (!data->rsp->len) {
    6188:	68e0      	ldr	r0, [r4, #12]
    618a:	7802      	ldrb	r2, [r0, #0]
    618c:	1c8b      	adds	r3, r1, #2
    618e:	b982      	cbnz	r2, 61b2 <read_type_cb+0xaa>
		data->rsp->len = read + sizeof(*data->item);
    6190:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    6192:	68a0      	ldr	r0, [r4, #8]
    6194:	3008      	adds	r0, #8
    6196:	f011 fcf5 	bl	17b84 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    619a:	68a3      	ldr	r3, [r4, #8]
    619c:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    61a0:	899b      	ldrh	r3, [r3, #12]
    61a2:	1aed      	subs	r5, r5, r3
    61a4:	68e3      	ldr	r3, [r4, #12]
    61a6:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    61a8:	429d      	cmp	r5, r3
    61aa:	bfd4      	ite	le
    61ac:	2500      	movle	r5, #0
    61ae:	2501      	movgt	r5, #1
    61b0:	e7c5      	b.n	613e <read_type_cb+0x36>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    61b2:	429a      	cmp	r2, r3
    61b4:	d0ed      	beq.n	6192 <read_type_cb+0x8a>
		data->buf->len -= sizeof(*data->item);
    61b6:	68a2      	ldr	r2, [r4, #8]
    61b8:	8993      	ldrh	r3, [r2, #12]
    61ba:	3b02      	subs	r3, #2
    61bc:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    61be:	e7be      	b.n	613e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    61c0:	2501      	movs	r5, #1
    61c2:	e7bc      	b.n	613e <read_type_cb+0x36>

000061c4 <uuid_create>:
{
    61c4:	b510      	push	{r4, lr}
	switch (buf->len) {
    61c6:	898a      	ldrh	r2, [r1, #12]
    61c8:	2a02      	cmp	r2, #2
{
    61ca:	4604      	mov	r4, r0
	switch (buf->len) {
    61cc:	d003      	beq.n	61d6 <uuid_create+0x12>
    61ce:	2a10      	cmp	r2, #16
    61d0:	d00a      	beq.n	61e8 <uuid_create+0x24>
	return false;
    61d2:	2000      	movs	r0, #0
}
    61d4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    61d6:	2300      	movs	r3, #0
    61d8:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    61da:	f101 0008 	add.w	r0, r1, #8
    61de:	f011 fd4c 	bl	17c7a <net_buf_simple_pull_le16>
    61e2:	8060      	strh	r0, [r4, #2]
		return true;
    61e4:	2001      	movs	r0, #1
    61e6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    61e8:	2302      	movs	r3, #2
    61ea:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    61ee:	6889      	ldr	r1, [r1, #8]
    61f0:	f7fa fa32 	bl	658 <memcpy>
    61f4:	e7f6      	b.n	61e4 <uuid_create+0x20>
	...

000061f8 <att_req_sent>:
{
    61f8:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    61fa:	2104      	movs	r1, #4
    61fc:	f7ff fd9c 	bl	5d38 <bt_l2cap_le_lookup_tx_cid>
    6200:	4604      	mov	r4, r0
    6202:	30cc      	adds	r0, #204	; 0xcc
    6204:	f012 fa48 	bl	18698 <_impl_k_sem_give>
	if (att->req) {
    6208:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    620c:	b143      	cbz	r3, 6220 <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    620e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    6212:	f247 5230 	movw	r2, #30000	; 0x7530
    6216:	4803      	ldr	r0, [pc, #12]	; (6224 <att_req_sent+0x2c>)
}
    6218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    621c:	f012 bdb4 	b.w	18d88 <k_delayed_work_submit_to_queue>
    6220:	bd10      	pop	{r4, pc}
    6222:	bf00      	nop
    6224:	20001dd8 	.word	0x20001dd8

00006228 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6228:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    622a:	4d0f      	ldr	r5, [pc, #60]	; (6268 <bt_att_accept+0x40>)
    622c:	682c      	ldr	r4, [r5, #0]
{
    622e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    6230:	b9b4      	cbnz	r4, 6260 <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
    6232:	4b0e      	ldr	r3, [pc, #56]	; (626c <bt_att_accept+0x44>)
    6234:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6236:	f105 0394 	add.w	r3, r5, #148	; 0x94
    623a:	f3bf 8f5b 	dmb	ish
    623e:	e853 2f00 	ldrex	r2, [r3]
    6242:	e843 4100 	strex	r1, r4, [r3]
    6246:	2900      	cmp	r1, #0
    6248:	d1f9      	bne.n	623e <bt_att_accept+0x16>
    624a:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    624e:	2202      	movs	r2, #2
    6250:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    6254:	4611      	mov	r1, r2
    6256:	f012 fa15 	bl	18684 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    625a:	6035      	str	r5, [r6, #0]

		return 0;
    625c:	4620      	mov	r0, r4
    625e:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    6260:	f06f 000b 	mvn.w	r0, #11
}
    6264:	bd70      	pop	{r4, r5, r6, pc}
    6266:	bf00      	nop
    6268:	20000370 	.word	0x20000370
    626c:	20006004 	.word	0x20006004

00006270 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    6270:	6803      	ldr	r3, [r0, #0]
    6272:	7a5b      	ldrb	r3, [r3, #9]
    6274:	2b03      	cmp	r3, #3
    6276:	d10a      	bne.n	628e <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6278:	f3bf 8f5b 	dmb	ish
    627c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    6280:	f3bf 8f5b 	dmb	ish
    6284:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    6288:	f000 0001 	and.w	r0, r0, #1
    628c:	4770      	bx	lr
    628e:	2001      	movs	r0, #1
}
    6290:	4770      	bx	lr

00006292 <att_prepare_write_req>:
    6292:	2006      	movs	r0, #6
    6294:	4770      	bx	lr

00006296 <att_chan_get>:
{
    6296:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6298:	7a43      	ldrb	r3, [r0, #9]
    629a:	2b03      	cmp	r3, #3
    629c:	d001      	beq.n	62a2 <att_chan_get+0xc>
		return NULL;
    629e:	2000      	movs	r0, #0
    62a0:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    62a2:	2104      	movs	r1, #4
    62a4:	f7ff fd58 	bl	5d58 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    62a8:	2800      	cmp	r0, #0
    62aa:	d0f8      	beq.n	629e <att_chan_get+0x8>
    62ac:	f3bf 8f5b 	dmb	ish
    62b0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    62b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    62b8:	075b      	lsls	r3, r3, #29
    62ba:	d4f0      	bmi.n	629e <att_chan_get+0x8>
}
    62bc:	bd08      	pop	{r3, pc}

000062be <att_pdu_sent>:
{
    62be:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    62c0:	2104      	movs	r1, #4
    62c2:	f7ff fd39 	bl	5d38 <bt_l2cap_le_lookup_tx_cid>
}
    62c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    62ca:	30cc      	adds	r0, #204	; 0xcc
    62cc:	f012 b9e4 	b.w	18698 <_impl_k_sem_give>

000062d0 <att_cfm_sent>:
{
    62d0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    62d2:	2104      	movs	r1, #4
    62d4:	f7ff fd30 	bl	5d38 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    62d8:	f3bf 8f5b 	dmb	ish
    62dc:	f100 0394 	add.w	r3, r0, #148	; 0x94
    62e0:	e853 2f00 	ldrex	r2, [r3]
    62e4:	f022 0202 	bic.w	r2, r2, #2
    62e8:	e843 2100 	strex	r1, r2, [r3]
    62ec:	2900      	cmp	r1, #0
    62ee:	d1f7      	bne.n	62e0 <att_cfm_sent+0x10>
    62f0:	f3bf 8f5b 	dmb	ish
    62f4:	30cc      	adds	r0, #204	; 0xcc
}
    62f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    62fa:	f012 b9cd 	b.w	18698 <_impl_k_sem_give>

000062fe <att_rsp_sent>:
{
    62fe:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6300:	2104      	movs	r1, #4
    6302:	f7ff fd19 	bl	5d38 <bt_l2cap_le_lookup_tx_cid>
    6306:	f3bf 8f5b 	dmb	ish
    630a:	f100 0394 	add.w	r3, r0, #148	; 0x94
    630e:	e853 2f00 	ldrex	r2, [r3]
    6312:	f022 0201 	bic.w	r2, r2, #1
    6316:	e843 2100 	strex	r1, r2, [r3]
    631a:	2900      	cmp	r1, #0
    631c:	d1f7      	bne.n	630e <att_rsp_sent+0x10>
    631e:	f3bf 8f5b 	dmb	ish
    6322:	30cc      	adds	r0, #204	; 0xcc
}
    6324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6328:	f012 b9b6 	b.w	18698 <_impl_k_sem_give>

0000632c <write_cb>:
{
    632c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6330:	460c      	mov	r4, r1
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    6332:	f8d1 8000 	ldr.w	r8, [r1]
    6336:	212a      	movs	r1, #42	; 0x2a
{
    6338:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    633a:	f7ff fec5 	bl	60c8 <check_perm.isra.3>
    633e:	4605      	mov	r5, r0
    6340:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6342:	b9e0      	cbnz	r0, 637e <write_cb+0x52>
	write = attr->write(data->conn, attr, data->value, data->len,
    6344:	8a62      	ldrh	r2, [r4, #18]
    6346:	9001      	str	r0, [sp, #4]
    6348:	9200      	str	r2, [sp, #0]
    634a:	7c23      	ldrb	r3, [r4, #16]
    634c:	68b7      	ldr	r7, [r6, #8]
    634e:	68e2      	ldr	r2, [r4, #12]
    6350:	4631      	mov	r1, r6
    6352:	4640      	mov	r0, r8
    6354:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
    6356:	2800      	cmp	r0, #0
    6358:	db02      	blt.n	6360 <write_cb+0x34>
    635a:	7c23      	ldrb	r3, [r4, #16]
    635c:	4298      	cmp	r0, r3
    635e:	d00b      	beq.n	6378 <write_cb+0x4c>
	if (err < 0 && err >= -0xff) {
    6360:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    6364:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6366:	bf9a      	itte	ls
    6368:	4240      	negls	r0, r0
    636a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    636c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    636e:	7520      	strb	r0, [r4, #20]
}
    6370:	4628      	mov	r0, r5
    6372:	b002      	add	sp, #8
    6374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    6378:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    637a:	2501      	movs	r5, #1
    637c:	e7f8      	b.n	6370 <write_cb+0x44>
		return BT_GATT_ITER_STOP;
    637e:	2500      	movs	r5, #0
    6380:	e7f6      	b.n	6370 <write_cb+0x44>
	...

00006384 <att_send_req>:
{
    6384:	b570      	push	{r4, r5, r6, lr}
    6386:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    6388:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    638c:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    6390:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6392:	4630      	mov	r0, r6
    6394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6398:	f012 f9c0 	bl	1871c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    639c:	4628      	mov	r0, r5
    639e:	f7ff ff67 	bl	6270 <att_is_connected>
    63a2:	b928      	cbnz	r0, 63b0 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    63a4:	4630      	mov	r0, r6
    63a6:	f012 f977 	bl	18698 <_impl_k_sem_give>
		return -ENOTCONN;
    63aa:	f06f 0038 	mvn.w	r0, #56	; 0x38
    63ae:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    63b0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    63b2:	f106 0008 	add.w	r0, r6, #8
    63b6:	f011 fc85 	bl	17cc4 <net_buf_simple_headroom>
	state->len = buf->len;
    63ba:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    63bc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    63be:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    63c0:	6920      	ldr	r0, [r4, #16]
    63c2:	682d      	ldr	r5, [r5, #0]
    63c4:	f011 fbda 	bl	17b7c <net_buf_ref>
	switch (att_op_get_type(buf->data[0])) {
    63c8:	6923      	ldr	r3, [r4, #16]
    63ca:	689b      	ldr	r3, [r3, #8]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    63cc:	4606      	mov	r6, r0
	switch (att_op_get_type(buf->data[0])) {
    63ce:	7818      	ldrb	r0, [r3, #0]
    63d0:	f7ff fd2c 	bl	5e2c <att_op_get_type>
    63d4:	3801      	subs	r0, #1
    63d6:	b2c0      	uxtb	r0, r0
    63d8:	2804      	cmp	r0, #4
    63da:	bf96      	itet	ls
    63dc:	4b05      	ldrls	r3, [pc, #20]	; (63f4 <att_send_req+0x70>)
    63de:	4b06      	ldrhi	r3, [pc, #24]	; (63f8 <att_send_req+0x74>)
    63e0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    63e4:	4632      	mov	r2, r6
    63e6:	4628      	mov	r0, r5
    63e8:	2104      	movs	r1, #4
    63ea:	f7ff fc55 	bl	5c98 <bt_l2cap_send_cb>
	return 0;
    63ee:	2000      	movs	r0, #0
}
    63f0:	bd70      	pop	{r4, r5, r6, pc}
    63f2:	bf00      	nop
    63f4:	00019e04 	.word	0x00019e04
    63f8:	000062bf 	.word	0x000062bf

000063fc <att_handle_rsp>:
{
    63fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6400:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    6402:	30a4      	adds	r0, #164	; 0xa4
{
    6404:	461e      	mov	r6, r3
    6406:	460f      	mov	r7, r1
    6408:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    640a:	f012 fc71 	bl	18cf0 <k_delayed_work_cancel>
	if (!att->req) {
    640e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6412:	b1db      	cbz	r3, 644c <att_handle_rsp+0x50>
	if (att->req->buf) {
    6414:	6918      	ldr	r0, [r3, #16]
    6416:	b128      	cbz	r0, 6424 <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    6418:	f011 fb94 	bl	17b44 <net_buf_unref>
		att->req->buf = NULL;
    641c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6420:	2200      	movs	r2, #0
    6422:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    6424:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    6428:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    642a:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    642e:	2500      	movs	r5, #0
    6430:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    6432:	463a      	mov	r2, r7
    6434:	9300      	str	r3, [sp, #0]
    6436:	4631      	mov	r1, r6
    6438:	4643      	mov	r3, r8
    643a:	47c8      	blx	r9
	if (!att->req->func) {
    643c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    6440:	6843      	ldr	r3, [r0, #4]
    6442:	b90b      	cbnz	r3, 6448 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    6444:	f7ff fd0a 	bl	5e5c <att_req_destroy>
	att->req = NULL;
    6448:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    644c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6450:	b159      	cbz	r1, 646a <att_handle_rsp+0x6e>
	if (list->tail == node) {
    6452:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	list->head = node->next;
    6456:	680b      	ldr	r3, [r1, #0]
    6458:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (list->tail == node) {
    645c:	4291      	cmp	r1, r2
		list->tail = list->head;
    645e:	bf08      	it	eq
    6460:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    6464:	4620      	mov	r0, r4
    6466:	f7ff ff8d 	bl	6384 <att_send_req>
}
    646a:	2000      	movs	r0, #0
    646c:	b003      	add	sp, #12
    646e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006472 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6472:	898a      	ldrh	r2, [r1, #12]
    6474:	6889      	ldr	r1, [r1, #8]
    6476:	2300      	movs	r3, #0
    6478:	f7ff bfc0 	b.w	63fc <att_handle_rsp>

0000647c <att_handle_exec_write_rsp>:
    647c:	f7ff bff9 	b.w	6472 <att_confirm>

00006480 <att_handle_prepare_write_rsp>:
    6480:	f7ff bff7 	b.w	6472 <att_confirm>

00006484 <att_handle_write_rsp>:
    6484:	f7ff bff5 	b.w	6472 <att_confirm>

00006488 <att_handle_read_mult_rsp>:
    6488:	f7ff bff3 	b.w	6472 <att_confirm>

0000648c <att_handle_read_blob_rsp>:
    648c:	f7ff bff1 	b.w	6472 <att_confirm>

00006490 <att_handle_read_rsp>:
    6490:	f7ff bfef 	b.w	6472 <att_confirm>

00006494 <att_handle_read_type_rsp>:
    6494:	f7ff bfed 	b.w	6472 <att_confirm>

00006498 <att_handle_find_type_rsp>:
    6498:	f7ff bfeb 	b.w	6472 <att_confirm>

0000649c <att_handle_find_info_rsp>:
    649c:	f7ff bfe9 	b.w	6472 <att_confirm>

000064a0 <att_mtu_rsp>:
{
    64a0:	b410      	push	{r4}
    64a2:	460a      	mov	r2, r1
	if (!att) {
    64a4:	b190      	cbz	r0, 64cc <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
    64a6:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    64a8:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    64aa:	2b16      	cmp	r3, #22
    64ac:	d805      	bhi.n	64ba <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    64ae:	2200      	movs	r2, #0
    64b0:	2304      	movs	r3, #4
    64b2:	4611      	mov	r1, r2
}
    64b4:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    64b6:	f7ff bfa1 	b.w	63fc <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    64ba:	2b45      	cmp	r3, #69	; 0x45
    64bc:	bf28      	it	cs
    64be:	2345      	movcs	r3, #69	; 0x45
    64c0:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    64c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
    64c6:	8992      	ldrh	r2, [r2, #12]
    64c8:	2300      	movs	r3, #0
    64ca:	e7f3      	b.n	64b4 <att_mtu_rsp+0x14>
}
    64cc:	bc10      	pop	{r4}
    64ce:	4770      	bx	lr

000064d0 <att_error_rsp>:
{
    64d0:	b430      	push	{r4, r5}
	if (!att->req) {
    64d2:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	rsp = (void *)buf->data;
    64d6:	688c      	ldr	r4, [r1, #8]
	if (!att->req) {
    64d8:	b172      	cbz	r2, 64f8 <att_error_rsp+0x28>
	if (att->req->buf) {
    64da:	6913      	ldr	r3, [r2, #16]
    64dc:	b133      	cbz	r3, 64ec <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    64de:	8995      	ldrh	r5, [r2, #12]
	buf->len = state->len;
    64e0:	89d2      	ldrh	r2, [r2, #14]
    64e2:	819a      	strh	r2, [r3, #12]
	buf->data = buf->__buf + state->offset;
    64e4:	f103 0110 	add.w	r1, r3, #16
    64e8:	4429      	add	r1, r5
    64ea:	6099      	str	r1, [r3, #8]
	err = rsp->error;
    64ec:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(att, NULL, 0, err);
    64ee:	2200      	movs	r2, #0
    64f0:	4611      	mov	r1, r2
}
    64f2:	bc30      	pop	{r4, r5}
	return att_handle_rsp(att, NULL, 0, err);
    64f4:	f7ff bf82 	b.w	63fc <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    64f8:	230e      	movs	r3, #14
    64fa:	e7f8      	b.n	64ee <att_error_rsp+0x1e>

000064fc <att_reset>:
{
    64fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    64fe:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6502:	4605      	mov	r5, r0
    6504:	f3bf 8f5b 	dmb	ish
    6508:	e853 2f00 	ldrex	r2, [r3]
    650c:	f042 0204 	orr.w	r2, r2, #4
    6510:	e843 2100 	strex	r1, r2, [r3]
    6514:	2900      	cmp	r1, #0
    6516:	d1f7      	bne.n	6508 <att_reset+0xc>
    6518:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    651c:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    6520:	4620      	mov	r0, r4
    6522:	f012 f8b9 	bl	18698 <_impl_k_sem_give>
    6526:	4620      	mov	r0, r4
    6528:	f012 f8b6 	bl	18698 <_impl_k_sem_give>
    652c:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    6530:	b98c      	cbnz	r4, 6556 <att_reset+0x5a>
	if (!att->req) {
    6532:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    6536:	2200      	movs	r2, #0
    6538:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    653c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    6540:	b90b      	cbnz	r3, 6546 <att_reset+0x4a>
}
    6542:	b003      	add	sp, #12
    6544:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    6546:	230e      	movs	r3, #14
    6548:	4611      	mov	r1, r2
    654a:	4628      	mov	r0, r5
}
    654c:	b003      	add	sp, #12
    654e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    6552:	f7ff bf53 	b.w	63fc <att_handle_rsp>
	return node->next;
    6556:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    6558:	6867      	ldr	r7, [r4, #4]
    655a:	b12f      	cbz	r7, 6568 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    655c:	2300      	movs	r3, #0
    655e:	9400      	str	r4, [sp, #0]
    6560:	461a      	mov	r2, r3
    6562:	210e      	movs	r1, #14
    6564:	4618      	mov	r0, r3
    6566:	47b8      	blx	r7
		att_req_destroy(req);
    6568:	4620      	mov	r0, r4
    656a:	f7ff fc77 	bl	5e5c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    656e:	2e00      	cmp	r6, #0
    6570:	d0df      	beq.n	6532 <att_reset+0x36>
    6572:	4634      	mov	r4, r6
    6574:	6836      	ldr	r6, [r6, #0]
    6576:	e7ef      	b.n	6558 <att_reset+0x5c>

00006578 <bt_att_disconnected>:
{
    6578:	b510      	push	{r4, lr}
    657a:	4604      	mov	r4, r0
	att_reset(att);
    657c:	f7ff ffbe 	bl	64fc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6580:	6820      	ldr	r0, [r4, #0]
    6582:	f001 f8e7 	bl	7754 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    6586:	4620      	mov	r0, r4
    6588:	22e4      	movs	r2, #228	; 0xe4
    658a:	2100      	movs	r1, #0
}
    658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    6590:	f7fa b88e 	b.w	6b0 <memset>

00006594 <att_timeout>:
{
    6594:	b510      	push	{r4, lr}
    6596:	4604      	mov	r4, r0
	att_reset(att);
    6598:	38a4      	subs	r0, #164	; 0xa4
    659a:	f7ff ffaf 	bl	64fc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    659e:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    65a2:	f001 f8d7 	bl	7754 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    65a6:	2300      	movs	r3, #0
    65a8:	f844 3ca4 	str.w	r3, [r4, #-164]
    65ac:	bd10      	pop	{r4, pc}

000065ae <read_cb>:
{
    65ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    65b2:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    65b4:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    65b6:	f8d1 9000 	ldr.w	r9, [r1]
{
    65ba:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    65bc:	3008      	adds	r0, #8
    65be:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    65c0:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    65c4:	f011 fade 	bl	17b84 <net_buf_simple_add>
	data->err = 0x00;
    65c8:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    65ca:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    65cc:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    65ce:	2115      	movs	r1, #21
    65d0:	4630      	mov	r0, r6
    65d2:	f7ff fd79 	bl	60c8 <check_perm.isra.3>
    65d6:	4605      	mov	r5, r0
    65d8:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    65da:	bb08      	cbnz	r0, 6620 <read_cb+0x72>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    65dc:	68a1      	ldr	r1, [r4, #8]
    65de:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    65e2:	898a      	ldrh	r2, [r1, #12]
    65e4:	6889      	ldr	r1, [r1, #8]
    65e6:	88a0      	ldrh	r0, [r4, #4]
    65e8:	9000      	str	r0, [sp, #0]
    65ea:	1a9b      	subs	r3, r3, r2
    65ec:	6877      	ldr	r7, [r6, #4]
    65ee:	440a      	add	r2, r1
    65f0:	b29b      	uxth	r3, r3
    65f2:	4631      	mov	r1, r6
    65f4:	4640      	mov	r0, r8
    65f6:	47b8      	blx	r7
	if (read < 0) {
    65f8:	1e01      	subs	r1, r0, #0
    65fa:	da0b      	bge.n	6614 <read_cb+0x66>
	if (err < 0 && err >= -0xff) {
    65fc:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    6600:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6602:	bf9a      	itte	ls
    6604:	4249      	negls	r1, r1
    6606:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    6608:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    660a:	7421      	strb	r1, [r4, #16]
}
    660c:	4628      	mov	r0, r5
    660e:	b003      	add	sp, #12
    6610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    6614:	68a0      	ldr	r0, [r4, #8]
    6616:	3008      	adds	r0, #8
    6618:	f011 fab4 	bl	17b84 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    661c:	2501      	movs	r5, #1
    661e:	e7f5      	b.n	660c <read_cb+0x5e>
		return BT_GATT_ITER_STOP;
    6620:	463d      	mov	r5, r7
    6622:	e7f3      	b.n	660c <read_cb+0x5e>

00006624 <bt_att_create_pdu>:
{
    6624:	b538      	push	{r3, r4, r5, lr}
    6626:	460d      	mov	r5, r1
    6628:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    662a:	f7ff fe34 	bl	6296 <att_chan_get>
	if (!att) {
    662e:	b180      	cbz	r0, 6652 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    6630:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    6634:	3401      	adds	r4, #1
    6636:	429c      	cmp	r4, r3
    6638:	d80b      	bhi.n	6652 <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    663a:	2100      	movs	r1, #0
    663c:	4608      	mov	r0, r1
    663e:	f7ff fb28 	bl	5c92 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6642:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    6644:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6646:	3008      	adds	r0, #8
    6648:	f011 fa9c 	bl	17b84 <net_buf_simple_add>
	hdr->code = op;
    664c:	7005      	strb	r5, [r0, #0]
}
    664e:	4620      	mov	r0, r4
    6650:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    6652:	2400      	movs	r4, #0
    6654:	e7fb      	b.n	664e <bt_att_create_pdu+0x2a>
	...

00006658 <att_indicate>:
{
    6658:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    665a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    665c:	f101 0008 	add.w	r0, r1, #8
    6660:	f011 fb0b 	bl	17c7a <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6664:	2200      	movs	r2, #0
    6666:	211e      	movs	r1, #30
    6668:	4620      	mov	r0, r4
    666a:	f7ff ffdb 	bl	6624 <bt_att_create_pdu>
	if (!buf) {
    666e:	4602      	mov	r2, r0
    6670:	b120      	cbz	r0, 667c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6672:	4b03      	ldr	r3, [pc, #12]	; (6680 <att_indicate+0x28>)
    6674:	2104      	movs	r1, #4
    6676:	4620      	mov	r0, r4
    6678:	f7ff fb0e 	bl	5c98 <bt_l2cap_send_cb>
}
    667c:	2000      	movs	r0, #0
    667e:	bd10      	pop	{r4, pc}
    6680:	000062d1 	.word	0x000062d1

00006684 <att_mtu_req>:
{
    6684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6688:	688b      	ldr	r3, [r1, #8]
    668a:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    668c:	2d16      	cmp	r5, #22
{
    668e:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6690:	d91f      	bls.n	66d2 <att_mtu_req+0x4e>
	struct bt_conn *conn = att->chan.chan.conn;
    6692:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6696:	2202      	movs	r2, #2
    6698:	2103      	movs	r1, #3
    669a:	4640      	mov	r0, r8
    669c:	f7ff ffc2 	bl	6624 <bt_att_create_pdu>
	if (!pdu) {
    66a0:	4607      	mov	r7, r0
    66a2:	b1c8      	cbz	r0, 66d8 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    66a4:	2102      	movs	r1, #2
    66a6:	3008      	adds	r0, #8
    66a8:	f011 fa6c 	bl	17b84 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    66ac:	2400      	movs	r4, #0
    66ae:	2345      	movs	r3, #69	; 0x45
    66b0:	7003      	strb	r3, [r0, #0]
    66b2:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    66b4:	4b0a      	ldr	r3, [pc, #40]	; (66e0 <att_mtu_req+0x5c>)
    66b6:	4640      	mov	r0, r8
    66b8:	463a      	mov	r2, r7
    66ba:	2104      	movs	r1, #4
    66bc:	f7ff faec 	bl	5c98 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    66c0:	2d45      	cmp	r5, #69	; 0x45
    66c2:	bf28      	it	cs
    66c4:	2545      	movcs	r5, #69	; 0x45
    66c6:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    66c8:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
    66cc:	4620      	mov	r0, r4
    66ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    66d2:	2004      	movs	r0, #4
    66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    66d8:	200e      	movs	r0, #14
}
    66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66de:	bf00      	nop
    66e0:	000062ff 	.word	0x000062ff

000066e4 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    66e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66e8:	4688      	mov	r8, r1
    66ea:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    66ec:	2101      	movs	r1, #1
    66ee:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    66f0:	4605      	mov	r5, r0
    66f2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    66f4:	f7ff ff96 	bl	6624 <bt_att_create_pdu>
	if (!buf) {
    66f8:	4604      	mov	r4, r0
    66fa:	b180      	cbz	r0, 671e <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    66fc:	2104      	movs	r1, #4
    66fe:	3008      	adds	r0, #8
    6700:	f011 fa40 	bl	17b84 <net_buf_simple_add>
	rsp->request = req;
    6704:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    6708:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    670a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    670e:	4622      	mov	r2, r4
    6710:	4628      	mov	r0, r5
    6712:	4b04      	ldr	r3, [pc, #16]	; (6724 <send_err_rsp.part.9+0x40>)
    6714:	2104      	movs	r1, #4
}
    6716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    671a:	f7ff babd 	b.w	5c98 <bt_l2cap_send_cb>
    671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6722:	bf00      	nop
    6724:	000062ff 	.word	0x000062ff

00006728 <bt_att_recv>:
{
    6728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    672c:	898b      	ldrh	r3, [r1, #12]
{
    672e:	4604      	mov	r4, r0
    6730:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    6732:	2b00      	cmp	r3, #0
    6734:	d05e      	beq.n	67f4 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    6736:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6738:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    673a:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    673e:	f011 fa8c 	bl	17c5a <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6742:	4a2d      	ldr	r2, [pc, #180]	; (67f8 <bt_att_recv+0xd0>)
    6744:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6746:	2300      	movs	r3, #0
    6748:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    674a:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    674e:	45ae      	cmp	lr, r5
    6750:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    6754:	d118      	bne.n	6788 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    6756:	4402      	add	r2, r0
    6758:	7895      	ldrb	r5, [r2, #2]
    675a:	2d01      	cmp	r5, #1
    675c:	d024      	beq.n	67a8 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    675e:	2d05      	cmp	r5, #5
    6760:	d133      	bne.n	67ca <bt_att_recv+0xa2>
    6762:	f3bf 8f5b 	dmb	ish
    6766:	f104 0294 	add.w	r2, r4, #148	; 0x94
    676a:	e852 3f00 	ldrex	r3, [r2]
    676e:	f043 0e02 	orr.w	lr, r3, #2
    6772:	e842 ec00 	strex	ip, lr, [r2]
    6776:	f1bc 0f00 	cmp.w	ip, #0
    677a:	d1f6      	bne.n	676a <bt_att_recv+0x42>
    677c:	f3bf 8f5b 	dmb	ish
    6780:	079b      	lsls	r3, r3, #30
    6782:	d522      	bpl.n	67ca <bt_att_recv+0xa2>
    6784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6788:	3301      	adds	r3, #1
    678a:	2b1b      	cmp	r3, #27
    678c:	d1dd      	bne.n	674a <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    678e:	4628      	mov	r0, r5
    6790:	f7ff fb4c 	bl	5e2c <att_op_get_type>
    6794:	b370      	cbz	r0, 67f4 <bt_att_recv+0xcc>
	if (!req) {
    6796:	b36d      	cbz	r5, 67f4 <bt_att_recv+0xcc>
    6798:	2306      	movs	r3, #6
    679a:	2200      	movs	r2, #0
    679c:	4629      	mov	r1, r5
    679e:	6820      	ldr	r0, [r4, #0]
}
    67a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67a4:	f7ff bf9e 	b.w	66e4 <send_err_rsp.part.9>
    67a8:	f104 0294 	add.w	r2, r4, #148	; 0x94
    67ac:	f3bf 8f5b 	dmb	ish
    67b0:	e852 3f00 	ldrex	r3, [r2]
    67b4:	f043 0e01 	orr.w	lr, r3, #1
    67b8:	e842 ec00 	strex	ip, lr, [r2]
    67bc:	f1bc 0f00 	cmp.w	ip, #0
    67c0:	d1f6      	bne.n	67b0 <bt_att_recv+0x88>
    67c2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    67c6:	07da      	lsls	r2, r3, #31
    67c8:	d414      	bmi.n	67f4 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    67ca:	180b      	adds	r3, r1, r0
    67cc:	89b1      	ldrh	r1, [r6, #12]
    67ce:	785a      	ldrb	r2, [r3, #1]
    67d0:	4291      	cmp	r1, r2
    67d2:	d30d      	bcc.n	67f0 <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	4631      	mov	r1, r6
    67d8:	4620      	mov	r0, r4
    67da:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    67dc:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    67de:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    67e0:	d108      	bne.n	67f4 <bt_att_recv+0xcc>
    67e2:	b138      	cbz	r0, 67f4 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    67e4:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    67e6:	b129      	cbz	r1, 67f4 <bt_att_recv+0xcc>
    67e8:	2200      	movs	r2, #0
    67ea:	e7d8      	b.n	679e <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    67ec:	2304      	movs	r3, #4
    67ee:	e7f9      	b.n	67e4 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    67f0:	2d01      	cmp	r5, #1
    67f2:	d0fb      	beq.n	67ec <bt_att_recv+0xc4>
    67f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67f8:	00019e18 	.word	0x00019e18

000067fc <att_read_group_req>:
{
    67fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6800:	898b      	ldrh	r3, [r1, #12]
    6802:	2b06      	cmp	r3, #6
{
    6804:	b08d      	sub	sp, #52	; 0x34
    6806:	4680      	mov	r8, r0
    6808:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    680a:	d001      	beq.n	6810 <att_read_group_req+0x14>
    680c:	2b14      	cmp	r3, #20
    680e:	d168      	bne.n	68e2 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    6810:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    6812:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6814:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6818:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    681c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    681e:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6820:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    6822:	f011 fa1a 	bl	17c5a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6826:	4621      	mov	r1, r4
    6828:	4638      	mov	r0, r7
    682a:	f7ff fccb 	bl	61c4 <uuid_create>
    682e:	2800      	cmp	r0, #0
    6830:	d059      	beq.n	68e6 <att_read_group_req+0xea>
	if (!start || !end) {
    6832:	2d00      	cmp	r5, #0
    6834:	d05a      	beq.n	68ec <att_read_group_req+0xf0>
    6836:	2400      	movs	r4, #0
    6838:	2e00      	cmp	r6, #0
    683a:	d056      	beq.n	68ea <att_read_group_req+0xee>
	if (start > end) {
    683c:	42b5      	cmp	r5, r6
    683e:	d855      	bhi.n	68ec <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6840:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6844:	4669      	mov	r1, sp
    6846:	4638      	mov	r0, r7
    6848:	f88d 4000 	strb.w	r4, [sp]
    684c:	f8ad 3002 	strh.w	r3, [sp, #2]
    6850:	f7fd f858 	bl	3904 <bt_uuid_cmp>
    6854:	bb38      	cbnz	r0, 68a6 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    6856:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    685a:	2214      	movs	r2, #20
    685c:	2100      	movs	r1, #0
    685e:	a807      	add	r0, sp, #28
    6860:	f7f9 ff26 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6864:	2201      	movs	r2, #1
    6866:	2111      	movs	r1, #17
    6868:	4648      	mov	r0, r9
    686a:	f7ff fedb 	bl	6624 <bt_att_create_pdu>
    686e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6870:	2800      	cmp	r0, #0
    6872:	d038      	beq.n	68e6 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6874:	2101      	movs	r1, #1
    6876:	3008      	adds	r0, #8
	data.uuid = uuid;
    6878:	9708      	str	r7, [sp, #32]
	data.att = att;
    687a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    687e:	f011 f981 	bl	17b84 <net_buf_simple_add>
	data.rsp->len = 0;
    6882:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6884:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6886:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    6888:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    688a:	4a1c      	ldr	r2, [pc, #112]	; (68fc <att_read_group_req+0x100>)
	data.group = NULL;
    688c:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    688e:	4631      	mov	r1, r6
    6890:	4628      	mov	r0, r5
    6892:	f000 fe69 	bl	7568 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6898:	781c      	ldrb	r4, [r3, #0]
    689a:	b9d4      	cbnz	r4, 68d2 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    689c:	9809      	ldr	r0, [sp, #36]	; 0x24
    689e:	f011 f951 	bl	17b44 <net_buf_unref>
    68a2:	230a      	movs	r3, #10
    68a4:	e00c      	b.n	68c0 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    68a6:	f642 0301 	movw	r3, #10241	; 0x2801
    68aa:	a901      	add	r1, sp, #4
    68ac:	4638      	mov	r0, r7
    68ae:	f88d 4004 	strb.w	r4, [sp, #4]
    68b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    68b6:	f7fd f825 	bl	3904 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    68ba:	2800      	cmp	r0, #0
    68bc:	d0cb      	beq.n	6856 <att_read_group_req+0x5a>
    68be:	2310      	movs	r3, #16
    68c0:	462a      	mov	r2, r5
    68c2:	2110      	movs	r1, #16
    68c4:	4648      	mov	r0, r9
    68c6:	f7ff ff0d 	bl	66e4 <send_err_rsp.part.9>
}
    68ca:	4620      	mov	r0, r4
    68cc:	b00d      	add	sp, #52	; 0x34
    68ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    68d2:	4b0b      	ldr	r3, [pc, #44]	; (6900 <att_read_group_req+0x104>)
    68d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    68d6:	2104      	movs	r1, #4
    68d8:	4648      	mov	r0, r9
    68da:	f7ff f9dd 	bl	5c98 <bt_l2cap_send_cb>
		return 0;
    68de:	2400      	movs	r4, #0
    68e0:	e7f3      	b.n	68ca <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    68e2:	2404      	movs	r4, #4
    68e4:	e7f1      	b.n	68ca <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    68e6:	240e      	movs	r4, #14
    68e8:	e7ef      	b.n	68ca <att_read_group_req+0xce>
			*err = 0;
    68ea:	4635      	mov	r5, r6
    68ec:	2301      	movs	r3, #1
    68ee:	462a      	mov	r2, r5
    68f0:	2110      	movs	r1, #16
    68f2:	4648      	mov	r0, r9
    68f4:	f7ff fef6 	bl	66e4 <send_err_rsp.part.9>
    68f8:	e7f1      	b.n	68de <att_read_group_req+0xe2>
    68fa:	bf00      	nop
    68fc:	00005e8d 	.word	0x00005e8d
    6900:	000062ff 	.word	0x000062ff

00006904 <att_read_mult_req>:
{
    6904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6908:	6804      	ldr	r4, [r0, #0]
{
    690a:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    690c:	2214      	movs	r2, #20
{
    690e:	4606      	mov	r6, r0
    6910:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    6912:	a801      	add	r0, sp, #4
    6914:	2100      	movs	r1, #0
    6916:	f7f9 fecb 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    691a:	2200      	movs	r2, #0
    691c:	210f      	movs	r1, #15
    691e:	4620      	mov	r0, r4
    6920:	f7ff fe80 	bl	6624 <bt_att_create_pdu>
    6924:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    6926:	b368      	cbz	r0, 6984 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6928:	f8df 9060 	ldr.w	r9, [pc, #96]	; 698c <att_read_mult_req+0x88>
	data.att = att;
    692c:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    692e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6932:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    6936:	89ab      	ldrh	r3, [r5, #12]
    6938:	2b01      	cmp	r3, #1
    693a:	d806      	bhi.n	694a <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    693c:	4b12      	ldr	r3, [pc, #72]	; (6988 <att_read_mult_req+0x84>)
    693e:	9a03      	ldr	r2, [sp, #12]
    6940:	2104      	movs	r1, #4
    6942:	4620      	mov	r0, r4
    6944:	f7ff f9a8 	bl	5c98 <bt_l2cap_send_cb>
    6948:	e018      	b.n	697c <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    694a:	4638      	mov	r0, r7
    694c:	f011 f995 	bl	17c7a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6950:	ab01      	add	r3, sp, #4
    6952:	464a      	mov	r2, r9
    6954:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    6956:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6958:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    695c:	f000 fe04 	bl	7568 <bt_gatt_foreach_attr>
		if (data.err) {
    6960:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6964:	2b00      	cmp	r3, #0
    6966:	d0e6      	beq.n	6936 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    6968:	9803      	ldr	r0, [sp, #12]
    696a:	f011 f8eb 	bl	17b44 <net_buf_unref>
    696e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6972:	4632      	mov	r2, r6
    6974:	210e      	movs	r1, #14
    6976:	4620      	mov	r0, r4
    6978:	f7ff feb4 	bl	66e4 <send_err_rsp.part.9>
	return 0;
    697c:	2000      	movs	r0, #0
}
    697e:	b007      	add	sp, #28
    6980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    6984:	200e      	movs	r0, #14
    6986:	e7fa      	b.n	697e <att_read_mult_req+0x7a>
    6988:	000062ff 	.word	0x000062ff
    698c:	000065af 	.word	0x000065af

00006990 <att_read_rsp>:
{
    6990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6994:	4607      	mov	r7, r0
    6996:	b086      	sub	sp, #24
    6998:	460c      	mov	r4, r1
    699a:	4690      	mov	r8, r2
	if (!handle) {
    699c:	461d      	mov	r5, r3
    699e:	b3a3      	cbz	r3, 6a0a <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    69a0:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    69a2:	2214      	movs	r2, #20
    69a4:	2100      	movs	r1, #0
    69a6:	a801      	add	r0, sp, #4
    69a8:	f7f9 fe82 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    69ac:	2200      	movs	r2, #0
    69ae:	4641      	mov	r1, r8
    69b0:	4630      	mov	r0, r6
    69b2:	f7ff fe37 	bl	6624 <bt_att_create_pdu>
    69b6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    69b8:	b348      	cbz	r0, 6a0e <att_read_rsp+0x7e>
	data.offset = offset;
    69ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    69be:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    69c2:	2301      	movs	r3, #1
    69c4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    69c8:	4a12      	ldr	r2, [pc, #72]	; (6a14 <att_read_rsp+0x84>)
	data.att = att;
    69ca:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    69cc:	ab01      	add	r3, sp, #4
    69ce:	4629      	mov	r1, r5
    69d0:	4628      	mov	r0, r5
    69d2:	f000 fdc9 	bl	7568 <bt_gatt_foreach_attr>
	if (data.err) {
    69d6:	f89d 7014 	ldrb.w	r7, [sp, #20]
    69da:	b17f      	cbz	r7, 69fc <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    69dc:	9803      	ldr	r0, [sp, #12]
    69de:	f011 f8b1 	bl	17b44 <net_buf_unref>
	if (!req) {
    69e2:	b13c      	cbz	r4, 69f4 <att_read_rsp+0x64>
    69e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    69e8:	462a      	mov	r2, r5
    69ea:	4621      	mov	r1, r4
    69ec:	4630      	mov	r0, r6
    69ee:	f7ff fe79 	bl	66e4 <send_err_rsp.part.9>
		return 0;
    69f2:	2400      	movs	r4, #0
}
    69f4:	4620      	mov	r0, r4
    69f6:	b006      	add	sp, #24
    69f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    69fc:	4b06      	ldr	r3, [pc, #24]	; (6a18 <att_read_rsp+0x88>)
    69fe:	9a03      	ldr	r2, [sp, #12]
    6a00:	2104      	movs	r1, #4
    6a02:	4630      	mov	r0, r6
    6a04:	f7ff f948 	bl	5c98 <bt_l2cap_send_cb>
    6a08:	e7f3      	b.n	69f2 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    6a0a:	2401      	movs	r4, #1
    6a0c:	e7f2      	b.n	69f4 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    6a0e:	240e      	movs	r4, #14
    6a10:	e7f0      	b.n	69f4 <att_read_rsp+0x64>
    6a12:	bf00      	nop
    6a14:	000065af 	.word	0x000065af
    6a18:	000062ff 	.word	0x000062ff

00006a1c <att_read_blob_req>:
{
    6a1c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    6a1e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6a20:	8813      	ldrh	r3, [r2, #0]
    6a22:	8852      	ldrh	r2, [r2, #2]
    6a24:	9200      	str	r2, [sp, #0]
    6a26:	210c      	movs	r1, #12
    6a28:	220d      	movs	r2, #13
    6a2a:	f7ff ffb1 	bl	6990 <att_read_rsp>
}
    6a2e:	b003      	add	sp, #12
    6a30:	f85d fb04 	ldr.w	pc, [sp], #4

00006a34 <att_read_req>:
{
    6a34:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    6a36:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    6a38:	2200      	movs	r2, #0
    6a3a:	881b      	ldrh	r3, [r3, #0]
    6a3c:	9200      	str	r2, [sp, #0]
    6a3e:	210a      	movs	r1, #10
    6a40:	220b      	movs	r2, #11
    6a42:	f7ff ffa5 	bl	6990 <att_read_rsp>
}
    6a46:	b003      	add	sp, #12
    6a48:	f85d fb04 	ldr.w	pc, [sp], #4

00006a4c <att_read_type_req>:
{
    6a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6a50:	898b      	ldrh	r3, [r1, #12]
    6a52:	2b06      	cmp	r3, #6
{
    6a54:	b08d      	sub	sp, #52	; 0x34
    6a56:	4607      	mov	r7, r0
    6a58:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6a5a:	d001      	beq.n	6a60 <att_read_type_req+0x14>
    6a5c:	2b14      	cmp	r3, #20
    6a5e:	d152      	bne.n	6b06 <att_read_type_req+0xba>
	req = (void *)buf->data;
    6a60:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    6a62:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6a64:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6a68:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6a6c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6a6e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6a70:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    6a74:	f011 f8f1 	bl	17c5a <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6a78:	4631      	mov	r1, r6
    6a7a:	4640      	mov	r0, r8
    6a7c:	f7ff fba2 	bl	61c4 <uuid_create>
    6a80:	b198      	cbz	r0, 6aaa <att_read_type_req+0x5e>
	if (!start || !end) {
    6a82:	2d00      	cmp	r5, #0
    6a84:	d042      	beq.n	6b0c <att_read_type_req+0xc0>
    6a86:	2c00      	cmp	r4, #0
    6a88:	d03f      	beq.n	6b0a <att_read_type_req+0xbe>
	if (start > end) {
    6a8a:	42a5      	cmp	r5, r4
    6a8c:	d83e      	bhi.n	6b0c <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    6a8e:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    6a90:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    6a92:	2100      	movs	r1, #0
    6a94:	eb0d 0002 	add.w	r0, sp, r2
    6a98:	f7f9 fe0a 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6a9c:	2201      	movs	r2, #1
    6a9e:	2109      	movs	r1, #9
    6aa0:	4630      	mov	r0, r6
    6aa2:	f7ff fdbf 	bl	6624 <bt_att_create_pdu>
    6aa6:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6aa8:	b908      	cbnz	r0, 6aae <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    6aaa:	240e      	movs	r4, #14
    6aac:	e027      	b.n	6afe <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6aae:	2101      	movs	r1, #1
    6ab0:	3008      	adds	r0, #8
	data.att = att;
    6ab2:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    6ab4:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6ab8:	f011 f864 	bl	17b84 <net_buf_simple_add>
	data.rsp->len = 0;
    6abc:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6abe:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6ac0:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6ac2:	4621      	mov	r1, r4
	data.rsp->len = 0;
    6ac4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6ac6:	4a14      	ldr	r2, [pc, #80]	; (6b18 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6ac8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6acc:	4628      	mov	r0, r5
    6ace:	ab06      	add	r3, sp, #24
    6ad0:	f000 fd4a 	bl	7568 <bt_gatt_foreach_attr>
	if (data.err) {
    6ad4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6ad8:	b15c      	cbz	r4, 6af2 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    6ada:	9808      	ldr	r0, [sp, #32]
    6adc:	f011 f832 	bl	17b44 <net_buf_unref>
    6ae0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6ae4:	462a      	mov	r2, r5
    6ae6:	2108      	movs	r1, #8
    6ae8:	4630      	mov	r0, r6
    6aea:	f7ff fdfb 	bl	66e4 <send_err_rsp.part.9>
		return 0;
    6aee:	2400      	movs	r4, #0
    6af0:	e005      	b.n	6afe <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6af2:	4b0a      	ldr	r3, [pc, #40]	; (6b1c <att_read_type_req+0xd0>)
    6af4:	9a08      	ldr	r2, [sp, #32]
    6af6:	2104      	movs	r1, #4
    6af8:	4630      	mov	r0, r6
    6afa:	f7ff f8cd 	bl	5c98 <bt_l2cap_send_cb>
}
    6afe:	4620      	mov	r0, r4
    6b00:	b00d      	add	sp, #52	; 0x34
    6b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6b06:	2404      	movs	r4, #4
    6b08:	e7f9      	b.n	6afe <att_read_type_req+0xb2>
			*err = 0;
    6b0a:	4625      	mov	r5, r4
    6b0c:	2301      	movs	r3, #1
    6b0e:	462a      	mov	r2, r5
    6b10:	2108      	movs	r1, #8
    6b12:	4648      	mov	r0, r9
    6b14:	e7e9      	b.n	6aea <att_read_type_req+0x9e>
    6b16:	bf00      	nop
    6b18:	00006109 	.word	0x00006109
    6b1c:	000062ff 	.word	0x000062ff

00006b20 <att_find_type_req>:
{
    6b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6b24:	f8d0 8000 	ldr.w	r8, [r0]
{
    6b28:	4606      	mov	r6, r0
	req = (void *)buf->data;
    6b2a:	4608      	mov	r0, r1
{
    6b2c:	b086      	sub	sp, #24
	req = (void *)buf->data;
    6b2e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    6b32:	460f      	mov	r7, r1
	value = net_buf_pull(buf, sizeof(*req));
    6b34:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    6b36:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6b38:	885d      	ldrh	r5, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    6b3a:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    6b3e:	f011 f88c 	bl	17c5a <net_buf_simple_pull>
    6b42:	4681      	mov	r9, r0
	if (!start || !end) {
    6b44:	2c00      	cmp	r4, #0
    6b46:	d046      	beq.n	6bd6 <att_find_type_req+0xb6>
    6b48:	2d00      	cmp	r5, #0
    6b4a:	d043      	beq.n	6bd4 <att_find_type_req+0xb4>
	if (start > end) {
    6b4c:	42ac      	cmp	r4, r5
    6b4e:	d842      	bhi.n	6bd6 <att_find_type_req+0xb6>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    6b50:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
    6b54:	d12a      	bne.n	6bac <att_find_type_req+0x8c>
				 buf->len);
    6b56:	f8b7 800c 	ldrh.w	r8, [r7, #12]
	struct bt_conn *conn = att->chan.chan.conn;
    6b5a:	6837      	ldr	r7, [r6, #0]
	memset(&data, 0, sizeof(data));
    6b5c:	2214      	movs	r2, #20
    6b5e:	2100      	movs	r1, #0
    6b60:	a801      	add	r0, sp, #4
    6b62:	f7f9 fda5 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6b66:	2200      	movs	r2, #0
    6b68:	2107      	movs	r1, #7
    6b6a:	4638      	mov	r0, r7
    6b6c:	f7ff fd5a 	bl	6624 <bt_att_create_pdu>
    6b70:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6b72:	b368      	cbz	r0, 6bd0 <att_find_type_req+0xb0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6b74:	230a      	movs	r3, #10
	data.att = att;
    6b76:	9601      	str	r6, [sp, #4]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6b78:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6b7c:	4629      	mov	r1, r5
	data.group = NULL;
    6b7e:	2600      	movs	r6, #0
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6b80:	ab01      	add	r3, sp, #4
    6b82:	4a16      	ldr	r2, [pc, #88]	; (6bdc <att_find_type_req+0xbc>)
	data.group = NULL;
    6b84:	9603      	str	r6, [sp, #12]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6b86:	4620      	mov	r0, r4
	data.value = value;
    6b88:	f8cd 9010 	str.w	r9, [sp, #16]
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6b8c:	f88d 8014 	strb.w	r8, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6b90:	f000 fcea 	bl	7568 <bt_gatt_foreach_attr>
	if (data.err) {
    6b94:	f89d 5015 	ldrb.w	r5, [sp, #21]
    6b98:	b19d      	cbz	r5, 6bc2 <att_find_type_req+0xa2>
		net_buf_unref(data.buf);
    6b9a:	9802      	ldr	r0, [sp, #8]
    6b9c:	f010 ffd2 	bl	17b44 <net_buf_unref>
    6ba0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6ba4:	4622      	mov	r2, r4
    6ba6:	2106      	movs	r1, #6
    6ba8:	4638      	mov	r0, r7
    6baa:	e003      	b.n	6bb4 <att_find_type_req+0x94>
    6bac:	230a      	movs	r3, #10
    6bae:	4622      	mov	r2, r4
    6bb0:	2106      	movs	r1, #6
    6bb2:	4640      	mov	r0, r8
    6bb4:	f7ff fd96 	bl	66e4 <send_err_rsp.part.9>
		return 0;
    6bb8:	2500      	movs	r5, #0
}
    6bba:	4628      	mov	r0, r5
    6bbc:	b006      	add	sp, #24
    6bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6bc2:	4b07      	ldr	r3, [pc, #28]	; (6be0 <att_find_type_req+0xc0>)
    6bc4:	9a02      	ldr	r2, [sp, #8]
    6bc6:	2104      	movs	r1, #4
    6bc8:	4638      	mov	r0, r7
    6bca:	f7ff f865 	bl	5c98 <bt_l2cap_send_cb>
    6bce:	e7f4      	b.n	6bba <att_find_type_req+0x9a>
		return BT_ATT_ERR_UNLIKELY;
    6bd0:	250e      	movs	r5, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    6bd2:	e7f2      	b.n	6bba <att_find_type_req+0x9a>
			*err = 0;
    6bd4:	462c      	mov	r4, r5
    6bd6:	2301      	movs	r3, #1
    6bd8:	e7e9      	b.n	6bae <att_find_type_req+0x8e>
    6bda:	bf00      	nop
    6bdc:	00005ff5 	.word	0x00005ff5
    6be0:	000062ff 	.word	0x000062ff

00006be4 <att_find_info_req>:
{
    6be4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6be6:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    6be8:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6bea:	881d      	ldrh	r5, [r3, #0]
{
    6bec:	b085      	sub	sp, #20
    6bee:	4607      	mov	r7, r0
	if (!start || !end) {
    6bf0:	b375      	cbz	r5, 6c50 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6bf2:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6bf4:	b35c      	cbz	r4, 6c4e <att_find_info_req+0x6a>
	if (start > end) {
    6bf6:	42a5      	cmp	r5, r4
    6bf8:	d82a      	bhi.n	6c50 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    6bfa:	2210      	movs	r2, #16
    6bfc:	2100      	movs	r1, #0
    6bfe:	4668      	mov	r0, sp
    6c00:	f7f9 fd56 	bl	6b0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6c04:	2200      	movs	r2, #0
    6c06:	2105      	movs	r1, #5
    6c08:	4630      	mov	r0, r6
    6c0a:	f7ff fd0b 	bl	6624 <bt_att_create_pdu>
    6c0e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6c10:	b910      	cbnz	r0, 6c18 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    6c12:	200e      	movs	r0, #14
}
    6c14:	b005      	add	sp, #20
    6c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6c18:	4621      	mov	r1, r4
    6c1a:	466b      	mov	r3, sp
    6c1c:	4a0d      	ldr	r2, [pc, #52]	; (6c54 <att_find_info_req+0x70>)
	data.att = att;
    6c1e:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6c20:	4628      	mov	r0, r5
    6c22:	f000 fca1 	bl	7568 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6c26:	9c02      	ldr	r4, [sp, #8]
    6c28:	b94c      	cbnz	r4, 6c3e <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    6c2a:	9801      	ldr	r0, [sp, #4]
    6c2c:	f010 ff8a 	bl	17b44 <net_buf_unref>
    6c30:	230a      	movs	r3, #10
    6c32:	462a      	mov	r2, r5
    6c34:	2104      	movs	r1, #4
    6c36:	4630      	mov	r0, r6
    6c38:	f7ff fd54 	bl	66e4 <send_err_rsp.part.9>
    6c3c:	e005      	b.n	6c4a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6c3e:	4b06      	ldr	r3, [pc, #24]	; (6c58 <att_find_info_req+0x74>)
    6c40:	9a01      	ldr	r2, [sp, #4]
    6c42:	2104      	movs	r1, #4
    6c44:	4630      	mov	r0, r6
    6c46:	f7ff f827 	bl	5c98 <bt_l2cap_send_cb>
		return 0;
    6c4a:	2000      	movs	r0, #0
    6c4c:	e7e2      	b.n	6c14 <att_find_info_req+0x30>
			*err = 0;
    6c4e:	4625      	mov	r5, r4
    6c50:	2301      	movs	r3, #1
    6c52:	e7ee      	b.n	6c32 <att_find_info_req+0x4e>
    6c54:	00005f5b 	.word	0x00005f5b
    6c58:	000062ff 	.word	0x000062ff

00006c5c <att_write_rsp.part.10.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c60:	b086      	sub	sp, #24
    6c62:	4690      	mov	r8, r2
    6c64:	4605      	mov	r5, r0
    6c66:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    6c68:	2218      	movs	r2, #24
    6c6a:	2100      	movs	r1, #0
    6c6c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    6c6e:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    6c70:	f7f9 fd1e 	bl	6b0 <memset>
	if (rsp) {
    6c74:	f1b8 0f00 	cmp.w	r8, #0
    6c78:	d11f      	bne.n	6cba <att_write_rsp.part.10.constprop.14+0x5e>
	data.offset = offset;
    6c7a:	2300      	movs	r3, #0
    6c7c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c82:	9303      	str	r3, [sp, #12]
	data.len = len;
    6c84:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    6c88:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6c8c:	2301      	movs	r3, #1
    6c8e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6c92:	4a1b      	ldr	r2, [pc, #108]	; (6d00 <att_write_rsp.part.10.constprop.14+0xa4>)
	data.conn = conn;
    6c94:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6c96:	466b      	mov	r3, sp
    6c98:	4639      	mov	r1, r7
    6c9a:	4638      	mov	r0, r7
	data.op = op;
    6c9c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6ca0:	f000 fc62 	bl	7568 <bt_gatt_foreach_attr>
	if (data.err) {
    6ca4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6ca8:	b98c      	cbnz	r4, 6cce <att_write_rsp.part.10.constprop.14+0x72>
	if (data.buf) {
    6caa:	9a01      	ldr	r2, [sp, #4]
    6cac:	b1b2      	cbz	r2, 6cdc <att_write_rsp.part.10.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6cae:	4b15      	ldr	r3, [pc, #84]	; (6d04 <att_write_rsp.part.10.constprop.14+0xa8>)
    6cb0:	2104      	movs	r1, #4
    6cb2:	4628      	mov	r0, r5
    6cb4:	f7fe fff0 	bl	5c98 <bt_l2cap_send_cb>
    6cb8:	e011      	b.n	6cde <att_write_rsp.part.10.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6cba:	2200      	movs	r2, #0
    6cbc:	4641      	mov	r1, r8
    6cbe:	4628      	mov	r0, r5
    6cc0:	f7ff fcb0 	bl	6624 <bt_att_create_pdu>
    6cc4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d1d7      	bne.n	6c7a <att_write_rsp.part.10.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    6cca:	240e      	movs	r4, #14
    6ccc:	e007      	b.n	6cde <att_write_rsp.part.10.constprop.14+0x82>
		if (rsp) {
    6cce:	f1b8 0f00 	cmp.w	r8, #0
    6cd2:	d00f      	beq.n	6cf4 <att_write_rsp.part.10.constprop.14+0x98>
			net_buf_unref(data.buf);
    6cd4:	9801      	ldr	r0, [sp, #4]
    6cd6:	f010 ff35 	bl	17b44 <net_buf_unref>
	if (!req) {
    6cda:	b926      	cbnz	r6, 6ce6 <att_write_rsp.part.10.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6cdc:	2400      	movs	r4, #0
}
    6cde:	4620      	mov	r0, r4
    6ce0:	b006      	add	sp, #24
    6ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ce6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6cea:	463a      	mov	r2, r7
    6cec:	4631      	mov	r1, r6
    6cee:	4628      	mov	r0, r5
    6cf0:	f7ff fcf8 	bl	66e4 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6cf4:	2e18      	cmp	r6, #24
    6cf6:	d1f1      	bne.n	6cdc <att_write_rsp.part.10.constprop.14+0x80>
    6cf8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    6cfc:	e7ef      	b.n	6cde <att_write_rsp.part.10.constprop.14+0x82>
    6cfe:	bf00      	nop
    6d00:	0000632d 	.word	0x0000632d
    6d04:	000062ff 	.word	0x000062ff

00006d08 <att_signed_write_cmd>:
{
    6d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    6d0c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    6d0e:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    6d10:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    6d14:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6d16:	4620      	mov	r0, r4
    6d18:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    6d1a:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    6d1e:	f010 ff77 	bl	17c10 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    6d22:	4629      	mov	r1, r5
    6d24:	4630      	mov	r0, r6
    6d26:	f000 fd4a 	bl	77be <bt_smp_sign_verify>
	if (err) {
    6d2a:	4607      	mov	r7, r0
    6d2c:	b9c8      	cbnz	r0, 6d62 <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    6d2e:	2101      	movs	r1, #1
    6d30:	4620      	mov	r0, r4
    6d32:	f010 ff92 	bl	17c5a <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    6d36:	2102      	movs	r1, #2
    6d38:	4620      	mov	r0, r4
    6d3a:	f010 ff8e 	bl	17c5a <net_buf_simple_pull>
	if (!handle) {
    6d3e:	f1b8 0f00 	cmp.w	r8, #0
    6d42:	d010      	beq.n	6d66 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    6d44:	7b2b      	ldrb	r3, [r5, #12]
    6d46:	3b0c      	subs	r3, #12
    6d48:	b2db      	uxtb	r3, r3
    6d4a:	9301      	str	r3, [sp, #4]
    6d4c:	68ab      	ldr	r3, [r5, #8]
    6d4e:	9300      	str	r3, [sp, #0]
    6d50:	463a      	mov	r2, r7
    6d52:	4643      	mov	r3, r8
    6d54:	4639      	mov	r1, r7
    6d56:	4630      	mov	r0, r6
    6d58:	f7ff ff80 	bl	6c5c <att_write_rsp.part.10.constprop.14>
}
    6d5c:	b002      	add	sp, #8
    6d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    6d62:	2000      	movs	r0, #0
    6d64:	e7fa      	b.n	6d5c <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    6d66:	2001      	movs	r0, #1
    6d68:	e7f8      	b.n	6d5c <att_signed_write_cmd+0x54>

00006d6a <att_write_cmd>:
{
    6d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6d6c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6d6e:	f101 0008 	add.w	r0, r1, #8
{
    6d72:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6d74:	f010 ff81 	bl	17c7a <net_buf_simple_pull_le16>
	if (!handle) {
    6d78:	4603      	mov	r3, r0
    6d7a:	b150      	cbz	r0, 6d92 <att_write_cmd+0x28>
    6d7c:	7b22      	ldrb	r2, [r4, #12]
    6d7e:	9201      	str	r2, [sp, #4]
    6d80:	68a2      	ldr	r2, [r4, #8]
    6d82:	9200      	str	r2, [sp, #0]
    6d84:	2200      	movs	r2, #0
    6d86:	4611      	mov	r1, r2
    6d88:	4628      	mov	r0, r5
    6d8a:	f7ff ff67 	bl	6c5c <att_write_rsp.part.10.constprop.14>
}
    6d8e:	b003      	add	sp, #12
    6d90:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6d92:	2001      	movs	r0, #1
    6d94:	e7fb      	b.n	6d8e <att_write_cmd+0x24>

00006d96 <att_write_req>:
{
    6d96:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6d98:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6d9a:	f101 0008 	add.w	r0, r1, #8
{
    6d9e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    6da0:	f010 ff6b 	bl	17c7a <net_buf_simple_pull_le16>
	if (!handle) {
    6da4:	4603      	mov	r3, r0
    6da6:	b150      	cbz	r0, 6dbe <att_write_req+0x28>
    6da8:	7b22      	ldrb	r2, [r4, #12]
    6daa:	9201      	str	r2, [sp, #4]
    6dac:	68a2      	ldr	r2, [r4, #8]
    6dae:	9200      	str	r2, [sp, #0]
    6db0:	2112      	movs	r1, #18
    6db2:	2213      	movs	r2, #19
    6db4:	4628      	mov	r0, r5
    6db6:	f7ff ff51 	bl	6c5c <att_write_rsp.part.10.constprop.14>
}
    6dba:	b003      	add	sp, #12
    6dbc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    6dbe:	2001      	movs	r0, #1
    6dc0:	e7fb      	b.n	6dba <att_write_req+0x24>
	...

00006dc4 <bt_att_init>:

void bt_att_init(void)
{
    6dc4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6dc6:	4803      	ldr	r0, [pc, #12]	; (6dd4 <bt_att_init+0x10>)
    6dc8:	f7fe fec0 	bl	5b4c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    6dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    6dd0:	f000 bb3e 	b.w	7450 <bt_gatt_init>
    6dd4:	20005ff8 	.word	0x20005ff8

00006dd8 <bt_att_get_mtu>:

u16_t bt_att_get_mtu(struct bt_conn *conn)
{
    6dd8:	b508      	push	{r3, lr}
	struct bt_att *att;

	att = att_chan_get(conn);
    6dda:	f7ff fa5c 	bl	6296 <att_chan_get>
	if (!att) {
    6dde:	b108      	cbz	r0, 6de4 <bt_att_get_mtu+0xc>
		return 0;
	}

	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
    6de0:	f8b0 005a 	ldrh.w	r0, [r0, #90]	; 0x5a
}
    6de4:	bd08      	pop	{r3, pc}

00006de6 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6de6:	b510      	push	{r4, lr}
    6de8:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6dea:	b1d8      	cbz	r0, 6e24 <bt_att_req_send+0x3e>
    6dec:	b1d1      	cbz	r1, 6e24 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6dee:	f7ff fa52 	bl	6296 <att_chan_get>
	if (!att) {
    6df2:	4603      	mov	r3, r0
    6df4:	b1c8      	cbz	r0, 6e2a <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6df6:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    6dfa:	b172      	cbz	r2, 6e1a <bt_att_req_send+0x34>
	if (!list->tail) {
    6dfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	node->next = NULL;
    6e00:	2000      	movs	r0, #0
    6e02:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    6e04:	b92a      	cbnz	r2, 6e12 <bt_att_req_send+0x2c>
		list->tail = node;
    6e06:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		list->head = node;
    6e0a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    6e0e:	4610      	mov	r0, r2
    6e10:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    6e12:	6014      	str	r4, [r2, #0]
		list->tail = node;
    6e14:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    6e18:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    6e1a:	4621      	mov	r1, r4
}
    6e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    6e20:	f7ff bab0 	b.w	6384 <att_send_req>
		return -EINVAL;
    6e24:	f06f 0015 	mvn.w	r0, #21
    6e28:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6e2a:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    6e2e:	bd10      	pop	{r4, pc}

00006e30 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    6e30:	4770      	bx	lr

00006e32 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    6e32:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    6e34:	2000      	movs	r0, #0
    6e36:	4770      	bx	lr

00006e38 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    6e38:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    6e3a:	2300      	movs	r3, #0
    6e3c:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    6e3e:	461a      	mov	r2, r3
    6e40:	42aa      	cmp	r2, r5
    6e42:	d107      	bne.n	6e54 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    6e44:	890a      	ldrh	r2, [r1, #8]
    6e46:	429a      	cmp	r2, r3
    6e48:	d00d      	beq.n	6e66 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    6e4a:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6e4c:	68ca      	ldr	r2, [r1, #12]
	}
}
    6e4e:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    6e50:	4619      	mov	r1, r3
    6e52:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    6e54:	680c      	ldr	r4, [r1, #0]
    6e56:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    6e5a:	3201      	adds	r2, #1
    6e5c:	8924      	ldrh	r4, [r4, #8]
    6e5e:	42a3      	cmp	r3, r4
    6e60:	bf38      	it	cc
    6e62:	4623      	movcc	r3, r4
    6e64:	e7ec      	b.n	6e40 <gatt_ccc_changed+0x8>
}
    6e66:	bc30      	pop	{r4, r5}
    6e68:	4770      	bx	lr

00006e6a <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    6e6a:	b410      	push	{r4}
    6e6c:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6e6e:	699c      	ldr	r4, [r3, #24]
    6e70:	460a      	mov	r2, r1
    6e72:	6959      	ldr	r1, [r3, #20]
    6e74:	4623      	mov	r3, r4
}
    6e76:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    6e78:	4718      	bx	r3

00006e7a <bt_gatt_attr_write_ccc>:
{
    6e7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e7e:	4689      	mov	r9, r1
    6e80:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6e84:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    6e88:	2902      	cmp	r1, #2
{
    6e8a:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    6e8c:	d84d      	bhi.n	6f2a <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
    6e8e:	4419      	add	r1, r3
    6e90:	2902      	cmp	r1, #2
    6e92:	461e      	mov	r6, r3
    6e94:	dc4c      	bgt.n	6f30 <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
    6e96:	7853      	ldrb	r3, [r2, #1]
    6e98:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    6e9a:	2500      	movs	r5, #0
    6e9c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    6ea0:	6863      	ldr	r3, [r4, #4]
    6ea2:	429d      	cmp	r5, r3
    6ea4:	d207      	bcs.n	6eb6 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6ea6:	6821      	ldr	r1, [r4, #0]
    6ea8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    6eac:	3101      	adds	r1, #1
    6eae:	4650      	mov	r0, sl
    6eb0:	f7fe fc62 	bl	5778 <bt_conn_addr_le_cmp>
    6eb4:	b948      	cbnz	r0, 6eca <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
    6eb6:	6863      	ldr	r3, [r4, #4]
    6eb8:	429d      	cmp	r5, r3
    6eba:	d130      	bne.n	6f1e <bt_gatt_attr_write_ccc+0xa4>
    6ebc:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    6ec0:	4545      	cmp	r5, r8
    6ec2:	d104      	bne.n	6ece <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    6ec4:	f06f 0610 	mvn.w	r6, #16
    6ec8:	e026      	b.n	6f18 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
    6eca:	3501      	adds	r5, #1
    6ecc:	e7e8      	b.n	6ea0 <bt_gatt_attr_write_ccc+0x26>
    6ece:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    6ed2:	6823      	ldr	r3, [r4, #0]
    6ed4:	eb03 000b 	add.w	r0, r3, fp
    6ed8:	f813 300b 	ldrb.w	r3, [r3, fp]
    6edc:	b113      	cbz	r3, 6ee4 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
    6ede:	f108 0801 	add.w	r8, r8, #1
    6ee2:	e7ed      	b.n	6ec0 <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
    6ee4:	2207      	movs	r2, #7
    6ee6:	f10a 0144 	add.w	r1, sl, #68	; 0x44
    6eea:	3001      	adds	r0, #1
    6eec:	f7f9 fbb4 	bl	658 <memcpy>
			if (value) {
    6ef0:	b11f      	cbz	r7, 6efa <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
    6ef2:	6823      	ldr	r3, [r4, #0]
    6ef4:	2201      	movs	r2, #1
    6ef6:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    6efa:	6863      	ldr	r3, [r4, #4]
    6efc:	4598      	cmp	r8, r3
    6efe:	d0e1      	beq.n	6ec4 <bt_gatt_attr_write_ccc+0x4a>
    6f00:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
    6f02:	6823      	ldr	r3, [r4, #0]
    6f04:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    6f08:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    6f0a:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    6f0c:	42bb      	cmp	r3, r7
    6f0e:	d003      	beq.n	6f18 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
    6f10:	4621      	mov	r1, r4
    6f12:	4648      	mov	r0, r9
    6f14:	f7ff ff90 	bl	6e38 <gatt_ccc_changed>
}
    6f18:	4630      	mov	r0, r6
    6f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
    6f1e:	2f00      	cmp	r7, #0
    6f20:	d1ef      	bne.n	6f02 <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
    6f22:	6822      	ldr	r2, [r4, #0]
    6f24:	012b      	lsls	r3, r5, #4
    6f26:	54d7      	strb	r7, [r2, r3]
    6f28:	e7eb      	b.n	6f02 <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6f2a:	f06f 0606 	mvn.w	r6, #6
    6f2e:	e7f3      	b.n	6f18 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6f30:	f06f 060c 	mvn.w	r6, #12
    6f34:	e7f0      	b.n	6f18 <bt_gatt_attr_write_ccc+0x9e>

00006f36 <gatt_notify>:
{
    6f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f3a:	468a      	mov	sl, r1
    6f3c:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6f3e:	211b      	movs	r1, #27
    6f40:	1c9a      	adds	r2, r3, #2
{
    6f42:	4680      	mov	r8, r0
    6f44:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6f46:	f7ff fb6d 	bl	6624 <bt_att_create_pdu>
	if (!buf) {
    6f4a:	4604      	mov	r4, r0
    6f4c:	b1d0      	cbz	r0, 6f84 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    6f4e:	f100 0708 	add.w	r7, r0, #8
    6f52:	2102      	movs	r1, #2
    6f54:	4638      	mov	r0, r7
    6f56:	f010 fe15 	bl	17b84 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    6f5a:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    6f5c:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    6f5e:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    6f62:	4638      	mov	r0, r7
    6f64:	f010 fe0e 	bl	17b84 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6f68:	4632      	mov	r2, r6
    6f6a:	4649      	mov	r1, r9
    6f6c:	4628      	mov	r0, r5
    6f6e:	f7f9 fb73 	bl	658 <memcpy>
    6f72:	4640      	mov	r0, r8
    6f74:	2300      	movs	r3, #0
    6f76:	4622      	mov	r2, r4
    6f78:	2104      	movs	r1, #4
    6f7a:	f7fe fe8d 	bl	5c98 <bt_l2cap_send_cb>
	return 0;
    6f7e:	2000      	movs	r0, #0
    6f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    6f84:	f06f 000b 	mvn.w	r0, #11
}
    6f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006f8c <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    6f8c:	8c0a      	ldrh	r2, [r1, #32]
{
    6f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6f92:	3202      	adds	r2, #2
{
    6f94:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6f96:	211d      	movs	r1, #29
{
    6f98:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    6f9a:	f7ff fb43 	bl	6624 <bt_att_create_pdu>
	if (!buf) {
    6f9e:	4605      	mov	r5, r0
    6fa0:	b320      	cbz	r0, 6fec <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    6fa2:	f100 0608 	add.w	r6, r0, #8
    6fa6:	2102      	movs	r1, #2
    6fa8:	4630      	mov	r0, r6
    6faa:	f010 fdeb 	bl	17b84 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6fae:	6963      	ldr	r3, [r4, #20]

	net_buf_add(buf, params->len);
    6fb0:	8c21      	ldrh	r1, [r4, #32]
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6fb2:	8a1b      	ldrh	r3, [r3, #16]
    6fb4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    6fb6:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    6fb8:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    6fbc:	f010 fde2 	bl	17b84 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    6fc0:	8c22      	ldrh	r2, [r4, #32]
    6fc2:	69e1      	ldr	r1, [r4, #28]
    6fc4:	4638      	mov	r0, r7
    6fc6:	f7f9 fb47 	bl	658 <memcpy>
		req->func = func;
    6fca:	4b0a      	ldr	r3, [pc, #40]	; (6ff4 <gatt_indicate+0x68>)
    6fcc:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    6fce:	2300      	movs	r3, #0
		req->buf = buf;
    6fd0:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    6fd2:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    6fd4:	4621      	mov	r1, r4
    6fd6:	4640      	mov	r0, r8
    6fd8:	f7ff ff05 	bl	6de6 <bt_att_req_send>
	if (err) {
    6fdc:	4604      	mov	r4, r0
    6fde:	b110      	cbz	r0, 6fe6 <gatt_indicate+0x5a>
		net_buf_unref(buf);
    6fe0:	4628      	mov	r0, r5
    6fe2:	f010 fdaf 	bl	17b44 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    6fe6:	4620      	mov	r0, r4
    6fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    6fec:	f06f 040b 	mvn.w	r4, #11
    6ff0:	e7f9      	b.n	6fe6 <gatt_indicate+0x5a>
    6ff2:	bf00      	nop
    6ff4:	00006e6b 	.word	0x00006e6b

00006ff8 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    6ff8:	4a19      	ldr	r2, [pc, #100]	; (7060 <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
    6ffa:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    6ffc:	6813      	ldr	r3, [r2, #0]
{
    6ffe:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    7000:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    7002:	b153      	cbz	r3, 701a <gatt_register+0x22>
    7004:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    7006:	b343      	cbz	r3, 705a <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
    7008:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    700c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    7010:	2614      	movs	r6, #20
    7012:	fb06 3304 	mla	r3, r6, r4, r3
    7016:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    701a:	2414      	movs	r4, #20
    701c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    7020:	b109      	cbz	r1, 7026 <gatt_register+0x2e>
    7022:	42a9      	cmp	r1, r5
    7024:	d108      	bne.n	7038 <gatt_register+0x40>
	node->next = NULL;
    7026:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    7028:	f100 0108 	add.w	r1, r0, #8
    702c:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    702e:	6850      	ldr	r0, [r2, #4]
    7030:	b978      	cbnz	r0, 7052 <gatt_register+0x5a>
		list->tail = node;
    7032:	6051      	str	r1, [r2, #4]
		list->head = node;
    7034:	6011      	str	r1, [r2, #0]
    7036:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    7038:	8a0c      	ldrh	r4, [r1, #16]
    703a:	b92c      	cbnz	r4, 7048 <gatt_register+0x50>
			attrs->handle = ++handle;
    703c:	3301      	adds	r3, #1
    703e:	b29c      	uxth	r4, r3
    7040:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    7042:	3114      	adds	r1, #20
    7044:	4623      	mov	r3, r4
    7046:	e7eb      	b.n	7020 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    7048:	42a3      	cmp	r3, r4
    704a:	d3fa      	bcc.n	7042 <gatt_register+0x4a>
			return -EINVAL;
    704c:	f06f 0015 	mvn.w	r0, #21
    7050:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    7052:	6001      	str	r1, [r0, #0]
		list->tail = node;
    7054:	6051      	str	r1, [r2, #4]
	return 0;
    7056:	4618      	mov	r0, r3
    7058:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    705a:	681b      	ldr	r3, [r3, #0]
    705c:	deff      	udf	#255	; 0xff
    705e:	bf00      	nop
    7060:	20000454 	.word	0x20000454

00007064 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    7064:	b510      	push	{r4, lr}
    7066:	4b17      	ldr	r3, [pc, #92]	; (70c4 <sc_indicate.constprop.17+0x60>)
    7068:	f3bf 8f5b 	dmb	ish
    706c:	f103 0250 	add.w	r2, r3, #80	; 0x50
    7070:	e852 4f00 	ldrex	r4, [r2]
    7074:	f044 0e01 	orr.w	lr, r4, #1
    7078:	e842 ec00 	strex	ip, lr, [r2]
    707c:	f1bc 0f00 	cmp.w	ip, #0
    7080:	d1f6      	bne.n	7070 <sc_indicate.constprop.17+0xc>
    7082:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    7086:	07e2      	lsls	r2, r4, #31
    7088:	d402      	bmi.n	7090 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    708a:	8498      	strh	r0, [r3, #36]	; 0x24
		*end = new_end;
    708c:	84d9      	strh	r1, [r3, #38]	; 0x26
    708e:	e00a      	b.n	70a6 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    7090:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    7092:	4282      	cmp	r2, r0
    7094:	d803      	bhi.n	709e <sc_indicate.constprop.17+0x3a>
    7096:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    7098:	428a      	cmp	r2, r1
    709a:	d301      	bcc.n	70a0 <sc_indicate.constprop.17+0x3c>
    709c:	bd10      	pop	{r4, pc}
		*start = new_start;
    709e:	8498      	strh	r0, [r3, #36]	; 0x24
	if (*end < new_end) {
    70a0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    70a2:	428a      	cmp	r2, r1
    70a4:	d3f2      	bcc.n	708c <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70a6:	f3bf 8f5b 	dmb	ish
    70aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    70ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    70b0:	079b      	lsls	r3, r3, #30
    70b2:	d406      	bmi.n	70c2 <sc_indicate.constprop.17+0x5e>
    70b4:	220a      	movs	r2, #10
    70b6:	4904      	ldr	r1, [pc, #16]	; (70c8 <sc_indicate.constprop.17+0x64>)
    70b8:	4804      	ldr	r0, [pc, #16]	; (70cc <sc_indicate.constprop.17+0x68>)
}
    70ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70be:	f011 be63 	b.w	18d88 <k_delayed_work_submit_to_queue>
    70c2:	bd10      	pop	{r4, pc}
    70c4:	2000045c 	.word	0x2000045c
    70c8:	20000484 	.word	0x20000484
    70cc:	20001dd8 	.word	0x20001dd8

000070d0 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    70d0:	6882      	ldr	r2, [r0, #8]
    70d2:	4b19      	ldr	r3, [pc, #100]	; (7138 <connected_cb+0x68>)
    70d4:	429a      	cmp	r2, r3
{
    70d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70da:	4607      	mov	r7, r0
    70dc:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    70de:	d126      	bne.n	712e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    70e0:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    70e2:	2600      	movs	r6, #0
    70e4:	686b      	ldr	r3, [r5, #4]
    70e6:	429e      	cmp	r6, r3
    70e8:	d221      	bcs.n	712e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    70ea:	6829      	ldr	r1, [r5, #0]
    70ec:	ea4f 1806 	mov.w	r8, r6, lsl #4
    70f0:	4441      	add	r1, r8
    70f2:	3101      	adds	r1, #1
    70f4:	4620      	mov	r0, r4
    70f6:	f7fe fb3f 	bl	5778 <bt_conn_addr_le_cmp>
    70fa:	b9d8      	cbnz	r0, 7134 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    70fc:	682b      	ldr	r3, [r5, #0]
    70fe:	4443      	add	r3, r8
    7100:	891b      	ldrh	r3, [r3, #8]
    7102:	b1bb      	cbz	r3, 7134 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    7104:	4629      	mov	r1, r5
    7106:	4638      	mov	r0, r7
    7108:	f7ff fe96 	bl	6e38 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    710c:	682c      	ldr	r4, [r5, #0]
    710e:	4b0b      	ldr	r3, [pc, #44]	; (713c <connected_cb+0x6c>)
    7110:	429c      	cmp	r4, r3
    7112:	d10c      	bne.n	712e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    7114:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    7116:	89a0      	ldrh	r0, [r4, #12]
    7118:	89e1      	ldrh	r1, [r4, #14]
    711a:	b900      	cbnz	r0, 711e <connected_cb+0x4e>
    711c:	b139      	cbz	r1, 712e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    711e:	f7ff ffa1 	bl	7064 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    7122:	2204      	movs	r2, #4
    7124:	2100      	movs	r1, #0
    7126:	f104 000c 	add.w	r0, r4, #12
    712a:	f7f9 fac1 	bl	6b0 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    712e:	2001      	movs	r0, #1
    7130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7134:	3601      	adds	r6, #1
    7136:	e7d5      	b.n	70e4 <connected_cb+0x14>
    7138:	00006e7b 	.word	0x00006e7b
    713c:	200004b0 	.word	0x200004b0

00007140 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7140:	490d      	ldr	r1, [pc, #52]	; (7178 <sc_indicate_rsp+0x38>)
    7142:	f3bf 8f5b 	dmb	ish
    7146:	f101 0350 	add.w	r3, r1, #80	; 0x50
    714a:	e853 2f00 	ldrex	r2, [r3]
    714e:	f022 0202 	bic.w	r2, r2, #2
    7152:	e843 2000 	strex	r0, r2, [r3]
    7156:	2800      	cmp	r0, #0
    7158:	d1f7      	bne.n	714a <sc_indicate_rsp+0xa>
    715a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    715e:	f3bf 8f5b 	dmb	ish
    7162:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7164:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7168:	07db      	lsls	r3, r3, #31
    716a:	d504      	bpl.n	7176 <sc_indicate_rsp+0x36>
    716c:	2200      	movs	r2, #0
    716e:	3128      	adds	r1, #40	; 0x28
    7170:	4802      	ldr	r0, [pc, #8]	; (717c <sc_indicate_rsp+0x3c>)
    7172:	f011 be09 	b.w	18d88 <k_delayed_work_submit_to_queue>
    7176:	4770      	bx	lr
    7178:	2000045c 	.word	0x2000045c
    717c:	20001dd8 	.word	0x20001dd8

00007180 <read_appearance>:
{
    7180:	b513      	push	{r0, r1, r4, lr}
    7182:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7186:	4610      	mov	r0, r2
	if (offset > value_len) {
    7188:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    718a:	f04f 0200 	mov.w	r2, #0
    718e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    7192:	d80d      	bhi.n	71b0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    7194:	f1c1 0402 	rsb	r4, r1, #2
    7198:	429c      	cmp	r4, r3
    719a:	bfa8      	it	ge
    719c:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    719e:	f10d 0306 	add.w	r3, sp, #6
    71a2:	4622      	mov	r2, r4
    71a4:	4419      	add	r1, r3
    71a6:	f7f9 fa57 	bl	658 <memcpy>
}
    71aa:	4620      	mov	r0, r4
    71ac:	b002      	add	sp, #8
    71ae:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    71b0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    71b4:	e7f9      	b.n	71aa <read_appearance+0x2a>
	...

000071b8 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    71b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    71bc:	6882      	ldr	r2, [r0, #8]
    71be:	4b24      	ldr	r3, [pc, #144]	; (7250 <disconnected_cb+0x98>)
    71c0:	429a      	cmp	r2, r3
{
    71c2:	4607      	mov	r7, r0
    71c4:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    71c6:	d129      	bne.n	721c <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    71c8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    71ca:	8923      	ldrh	r3, [r4, #8]
    71cc:	b333      	cbz	r3, 721c <disconnected_cb+0x64>
    71ce:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    71d0:	f101 0944 	add.w	r9, r1, #68	; 0x44
	for (i = 0; i < ccc->cfg_len; i++) {
    71d4:	6863      	ldr	r3, [r4, #4]
    71d6:	429e      	cmp	r6, r3
    71d8:	d30b      	bcc.n	71f2 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    71da:	2202      	movs	r2, #2
    71dc:	2100      	movs	r1, #0
    71de:	f104 0008 	add.w	r0, r4, #8
    71e2:	f7f9 fa65 	bl	6b0 <memset>
	if (ccc->cfg_changed) {
    71e6:	68e3      	ldr	r3, [r4, #12]
    71e8:	b1c3      	cbz	r3, 721c <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    71ea:	8921      	ldrh	r1, [r4, #8]
    71ec:	4638      	mov	r0, r7
    71ee:	4798      	blx	r3
    71f0:	e014      	b.n	721c <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    71f2:	6821      	ldr	r1, [r4, #0]
    71f4:	0135      	lsls	r5, r6, #4
    71f6:	4429      	add	r1, r5
    71f8:	890b      	ldrh	r3, [r1, #8]
    71fa:	b1a3      	cbz	r3, 7226 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    71fc:	3101      	adds	r1, #1
    71fe:	4640      	mov	r0, r8
    7200:	f7fe faba 	bl	5778 <bt_conn_addr_le_cmp>
    7204:	b188      	cbz	r0, 722a <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7206:	6820      	ldr	r0, [r4, #0]
    7208:	4428      	add	r0, r5
    720a:	3001      	adds	r0, #1
    720c:	f7fe facc 	bl	57a8 <bt_conn_lookup_addr_le>
			if (tmp) {
    7210:	b148      	cbz	r0, 7226 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    7212:	7a43      	ldrb	r3, [r0, #9]
    7214:	2b03      	cmp	r3, #3
    7216:	d104      	bne.n	7222 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    7218:	f7fe fb09 	bl	582e <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    721c:	2001      	movs	r0, #1
    721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    7222:	f7fe fb04 	bl	582e <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    7226:	3601      	adds	r6, #1
    7228:	e7d4      	b.n	71d4 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    722a:	4648      	mov	r0, r9
    722c:	f7fd fd9c 	bl	4d68 <bt_addr_le_is_bonded>
    7230:	6823      	ldr	r3, [r4, #0]
    7232:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    7234:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7236:	b929      	cbnz	r1, 7244 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    7238:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    723a:	2202      	movs	r2, #2
    723c:	3008      	adds	r0, #8
    723e:	f7f9 fa37 	bl	6b0 <memset>
    7242:	e7f0      	b.n	7226 <disconnected_cb+0x6e>
    7244:	2207      	movs	r2, #7
    7246:	4649      	mov	r1, r9
    7248:	3001      	adds	r0, #1
    724a:	f7f9 fa05 	bl	658 <memcpy>
    724e:	e7ea      	b.n	7226 <disconnected_cb+0x6e>
    7250:	00006e7b 	.word	0x00006e7b

00007254 <read_name>:
{
    7254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7258:	4e0d      	ldr	r6, [pc, #52]	; (7290 <read_name+0x3c>)
{
    725a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    725e:	4630      	mov	r0, r6
{
    7260:	4698      	mov	r8, r3
    7262:	4617      	mov	r7, r2
				 strlen(gap_name));
    7264:	f7f9 f9ce 	bl	604 <strlen>
	if (offset > value_len) {
    7268:	b283      	uxth	r3, r0
    726a:	42ab      	cmp	r3, r5
    726c:	d30d      	bcc.n	728a <read_name+0x36>
	len = min(buf_len, value_len - offset);
    726e:	1b5c      	subs	r4, r3, r5
    7270:	4544      	cmp	r4, r8
    7272:	4623      	mov	r3, r4
    7274:	bfa8      	it	ge
    7276:	4643      	movge	r3, r8
    7278:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    727a:	4622      	mov	r2, r4
    727c:	1971      	adds	r1, r6, r5
    727e:	4638      	mov	r0, r7
    7280:	f7f9 f9ea 	bl	658 <memcpy>
}
    7284:	4620      	mov	r0, r4
    7286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    728a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    728e:	e7f9      	b.n	7284 <read_name+0x30>
    7290:	00019ef0 	.word	0x00019ef0

00007294 <bt_gatt_attr_read_ccc>:
{
    7294:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7298:	68ce      	ldr	r6, [r1, #12]
{
    729a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    729e:	4604      	mov	r4, r0
    72a0:	4690      	mov	r8, r2
    72a2:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    72a4:	2500      	movs	r5, #0
    72a6:	6873      	ldr	r3, [r6, #4]
    72a8:	429d      	cmp	r5, r3
    72aa:	d20f      	bcs.n	72cc <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    72ac:	6831      	ldr	r1, [r6, #0]
    72ae:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    72b2:	4451      	add	r1, sl
    72b4:	3101      	adds	r1, #1
    72b6:	4620      	mov	r0, r4
    72b8:	f7fe fa5e 	bl	5778 <bt_conn_addr_le_cmp>
    72bc:	b108      	cbz	r0, 72c2 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    72be:	3501      	adds	r5, #1
    72c0:	e7f1      	b.n	72a6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    72c2:	6832      	ldr	r2, [r6, #0]
    72c4:	4452      	add	r2, sl
    72c6:	8913      	ldrh	r3, [r2, #8]
    72c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    72cc:	6873      	ldr	r3, [r6, #4]
    72ce:	429d      	cmp	r5, r3
		value = 0x0000;
    72d0:	bf04      	itt	eq
    72d2:	2300      	moveq	r3, #0
    72d4:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    72d8:	2f02      	cmp	r7, #2
    72da:	d80f      	bhi.n	72fc <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    72dc:	f1c7 0402 	rsb	r4, r7, #2
    72e0:	454c      	cmp	r4, r9
    72e2:	bfa8      	it	ge
    72e4:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    72e6:	f10d 0306 	add.w	r3, sp, #6
    72ea:	4622      	mov	r2, r4
    72ec:	19d9      	adds	r1, r3, r7
    72ee:	4640      	mov	r0, r8
    72f0:	f7f9 f9b2 	bl	658 <memcpy>
}
    72f4:	4620      	mov	r0, r4
    72f6:	b002      	add	sp, #8
    72f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    72fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    7300:	e7f8      	b.n	72f4 <bt_gatt_attr_read_ccc+0x60>

00007302 <bt_gatt_attr_read_service>:
{
    7302:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    7304:	68c9      	ldr	r1, [r1, #12]
{
    7306:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    730a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    730c:	780a      	ldrb	r2, [r1, #0]
    730e:	b992      	cbnz	r2, 7336 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    7310:	884a      	ldrh	r2, [r1, #2]
    7312:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    7316:	2d02      	cmp	r5, #2
    7318:	d819      	bhi.n	734e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    731a:	f1c5 0402 	rsb	r4, r5, #2
    731e:	429c      	cmp	r4, r3
    7320:	bfa8      	it	ge
    7322:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7324:	f10d 0306 	add.w	r3, sp, #6
    7328:	4622      	mov	r2, r4
    732a:	1959      	adds	r1, r3, r5
    732c:	f7f9 f994 	bl	658 <memcpy>
}
    7330:	4620      	mov	r0, r4
    7332:	b003      	add	sp, #12
    7334:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    7336:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    7338:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    733c:	d807      	bhi.n	734e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    733e:	f1c5 0410 	rsb	r4, r5, #16
    7342:	429c      	cmp	r4, r3
    7344:	bfa8      	it	ge
    7346:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7348:	4622      	mov	r2, r4
    734a:	4429      	add	r1, r5
    734c:	e7ee      	b.n	732c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    734e:	f06f 0406 	mvn.w	r4, #6
    7352:	e7ed      	b.n	7330 <bt_gatt_attr_read_service+0x2e>

00007354 <notify_cb>:
{
    7354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7358:	f642 1302 	movw	r3, #10498	; 0x2902
{
    735c:	4605      	mov	r5, r0
    735e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7360:	2400      	movs	r4, #0
    7362:	4669      	mov	r1, sp
    7364:	6800      	ldr	r0, [r0, #0]
    7366:	f88d 4000 	strb.w	r4, [sp]
    736a:	f8ad 3002 	strh.w	r3, [sp, #2]
    736e:	f7fc fac9 	bl	3904 <bt_uuid_cmp>
    7372:	b178      	cbz	r0, 7394 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7374:	f642 0303 	movw	r3, #10243	; 0x2803
    7378:	6828      	ldr	r0, [r5, #0]
    737a:	f88d 4004 	strb.w	r4, [sp, #4]
    737e:	a901      	add	r1, sp, #4
    7380:	f8ad 3006 	strh.w	r3, [sp, #6]
    7384:	f7fc fabe 	bl	3904 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    7388:	1b00      	subs	r0, r0, r4
    738a:	bf18      	it	ne
    738c:	2001      	movne	r0, #1
}
    738e:	b003      	add	sp, #12
    7390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7394:	68aa      	ldr	r2, [r5, #8]
    7396:	4b2c      	ldr	r3, [pc, #176]	; (7448 <notify_cb+0xf4>)
    7398:	429a      	cmp	r2, r3
    739a:	d001      	beq.n	73a0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    739c:	2001      	movs	r0, #1
    739e:	e7f6      	b.n	738e <notify_cb+0x3a>
	ccc = attr->user_data;
    73a0:	68ef      	ldr	r7, [r5, #12]
    73a2:	4d2a      	ldr	r5, [pc, #168]	; (744c <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    73a4:	4604      	mov	r4, r0
    73a6:	46a8      	mov	r8, r5
    73a8:	4681      	mov	r9, r0
    73aa:	687b      	ldr	r3, [r7, #4]
    73ac:	429c      	cmp	r4, r3
    73ae:	d2f5      	bcs.n	739c <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    73b0:	6838      	ldr	r0, [r7, #0]
    73b2:	88b3      	ldrh	r3, [r6, #4]
    73b4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    73b8:	8902      	ldrh	r2, [r0, #8]
    73ba:	429a      	cmp	r2, r3
    73bc:	d115      	bne.n	73ea <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    73be:	3001      	adds	r0, #1
    73c0:	f7fe f9f2 	bl	57a8 <bt_conn_lookup_addr_le>
		if (!conn) {
    73c4:	4683      	mov	fp, r0
    73c6:	b9f8      	cbnz	r0, 7408 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    73c8:	683b      	ldr	r3, [r7, #0]
    73ca:	4543      	cmp	r3, r8
    73cc:	d10d      	bne.n	73ea <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    73ce:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    73d0:	a801      	add	r0, sp, #4
    73d2:	8c1a      	ldrh	r2, [r3, #32]
    73d4:	69d9      	ldr	r1, [r3, #28]
    73d6:	f7f9 f93f 	bl	658 <memcpy>
	if (!stored->start && !stored->end) {
    73da:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    73dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    73e0:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    73e2:	b928      	cbnz	r0, 73f0 <notify_cb+0x9c>
    73e4:	b942      	cbnz	r2, 73f8 <notify_cb+0xa4>
		*stored = data;
    73e6:	9801      	ldr	r0, [sp, #4]
    73e8:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    73ea:	3401      	adds	r4, #1
    73ec:	3510      	adds	r5, #16
    73ee:	e7dc      	b.n	73aa <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    73f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    73f4:	4281      	cmp	r1, r0
    73f6:	d305      	bcc.n	7404 <notify_cb+0xb0>
    73f8:	429a      	cmp	r2, r3
    73fa:	d2f6      	bcs.n	73ea <notify_cb+0x96>
	if (*end < new_end) {
    73fc:	429a      	cmp	r2, r3
    73fe:	d2f4      	bcs.n	73ea <notify_cb+0x96>
		*end = new_end;
    7400:	81eb      	strh	r3, [r5, #14]
    7402:	e7f2      	b.n	73ea <notify_cb+0x96>
		*start = new_start;
    7404:	81a9      	strh	r1, [r5, #12]
    7406:	e7f9      	b.n	73fc <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    7408:	7a43      	ldrb	r3, [r0, #9]
    740a:	2b03      	cmp	r3, #3
    740c:	d002      	beq.n	7414 <notify_cb+0xc0>
			bt_conn_unref(conn);
    740e:	f7fe fa0e 	bl	582e <bt_conn_unref>
    7412:	e7ea      	b.n	73ea <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7414:	88b3      	ldrh	r3, [r6, #4]
    7416:	2b02      	cmp	r3, #2
    7418:	d10c      	bne.n	7434 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    741a:	6971      	ldr	r1, [r6, #20]
    741c:	f7ff fdb6 	bl	6f8c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    7420:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    7422:	4658      	mov	r0, fp
    7424:	f7fe fa03 	bl	582e <bt_conn_unref>
		if (err < 0) {
    7428:	f1ba 0f00 	cmp.w	sl, #0
    742c:	db09      	blt.n	7442 <notify_cb+0xee>
		data->err = 0;
    742e:	f8c6 9000 	str.w	r9, [r6]
    7432:	e7da      	b.n	73ea <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    7434:	68b1      	ldr	r1, [r6, #8]
    7436:	8a33      	ldrh	r3, [r6, #16]
    7438:	68f2      	ldr	r2, [r6, #12]
    743a:	8a09      	ldrh	r1, [r1, #16]
    743c:	f7ff fd7b 	bl	6f36 <gatt_notify>
    7440:	e7ee      	b.n	7420 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    7442:	2000      	movs	r0, #0
    7444:	e7a3      	b.n	738e <notify_cb+0x3a>
    7446:	bf00      	nop
    7448:	00006e7b 	.word	0x00006e7b
    744c:	200004b0 	.word	0x200004b0

00007450 <bt_gatt_init>:
{
    7450:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    7452:	4806      	ldr	r0, [pc, #24]	; (746c <bt_gatt_init+0x1c>)
    7454:	f7ff fdd0 	bl	6ff8 <gatt_register>
	gatt_register(&gatt_svc);
    7458:	4805      	ldr	r0, [pc, #20]	; (7470 <bt_gatt_init+0x20>)
    745a:	f7ff fdcd 	bl	6ff8 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    745e:	4905      	ldr	r1, [pc, #20]	; (7474 <bt_gatt_init+0x24>)
    7460:	4805      	ldr	r0, [pc, #20]	; (7478 <bt_gatt_init+0x28>)
}
    7462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7466:	f011 bc25 	b.w	18cb4 <k_delayed_work_init>
    746a:	bf00      	nop
    746c:	200060dc 	.word	0x200060dc
    7470:	20006138 	.word	0x20006138
    7474:	000075e9 	.word	0x000075e9
    7478:	20000484 	.word	0x20000484

0000747c <bt_gatt_service_register>:
{
    747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    747e:	6803      	ldr	r3, [r0, #0]
{
    7480:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    7482:	2500      	movs	r5, #0
    7484:	6818      	ldr	r0, [r3, #0]
    7486:	f88d 5000 	strb.w	r5, [sp]
    748a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    748e:	4669      	mov	r1, sp
    7490:	f8ad 3002 	strh.w	r3, [sp, #2]
    7494:	f7fc fa36 	bl	3904 <bt_uuid_cmp>
    7498:	b918      	cbnz	r0, 74a2 <bt_gatt_service_register+0x26>
		return -EALREADY;
    749a:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    749e:	b003      	add	sp, #12
    74a0:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    74a2:	6823      	ldr	r3, [r4, #0]
    74a4:	a901      	add	r1, sp, #4
    74a6:	6818      	ldr	r0, [r3, #0]
    74a8:	f88d 5004 	strb.w	r5, [sp, #4]
    74ac:	f641 0301 	movw	r3, #6145	; 0x1801
    74b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    74b4:	f7fc fa26 	bl	3904 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    74b8:	2800      	cmp	r0, #0
    74ba:	d0ee      	beq.n	749a <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
    74bc:	4620      	mov	r0, r4
    74be:	f7ff fd9b 	bl	6ff8 <gatt_register>
	if (err < 0) {
    74c2:	2800      	cmp	r0, #0
    74c4:	dbeb      	blt.n	749e <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    74c6:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    74c8:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    74ca:	8a10      	ldrh	r0, [r2, #16]
    74cc:	2114      	movs	r1, #20
    74ce:	fb01 2303 	mla	r3, r1, r3, r2
    74d2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    74d6:	f7ff fdc5 	bl	7064 <sc_indicate.constprop.17>
	return 0;
    74da:	4628      	mov	r0, r5
    74dc:	e7df      	b.n	749e <bt_gatt_service_register+0x22>
	...

000074e0 <bt_gatt_service_unregister>:
{
    74e0:	4b14      	ldr	r3, [pc, #80]	; (7534 <bt_gatt_service_unregister+0x54>)
    74e2:	681a      	ldr	r2, [r3, #0]
    74e4:	b510      	push	{r4, lr}
	sys_snode_t *prev = NULL;
    74e6:	2100      	movs	r1, #0
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    74e8:	f100 0408 	add.w	r4, r0, #8
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    74ec:	b912      	cbnz	r2, 74f4 <bt_gatt_service_unregister+0x14>
		return -ENOENT;
    74ee:	f06f 0001 	mvn.w	r0, #1
}
    74f2:	bd10      	pop	{r4, pc}
		if (test == node) {
    74f4:	4294      	cmp	r4, r2
    74f6:	d11a      	bne.n	752e <bt_gatt_service_unregister+0x4e>
    74f8:	6882      	ldr	r2, [r0, #8]
	if (!prev_node) {
    74fa:	b991      	cbnz	r1, 7522 <bt_gatt_service_unregister+0x42>
		if (list->tail == node) {
    74fc:	6859      	ldr	r1, [r3, #4]
		list->head = node->next;
    74fe:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
    7500:	428c      	cmp	r4, r1
    7502:	d100      	bne.n	7506 <bt_gatt_service_unregister+0x26>
			list->tail = list->head;
    7504:	605a      	str	r2, [r3, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    7506:	6802      	ldr	r2, [r0, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    7508:	8883      	ldrh	r3, [r0, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    750a:	2114      	movs	r1, #20
    750c:	fb01 2303 	mla	r3, r1, r3, r2
	node->next = NULL;
    7510:	2400      	movs	r4, #0
    7512:	6084      	str	r4, [r0, #8]
    7514:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    7518:	8a10      	ldrh	r0, [r2, #16]
    751a:	f7ff fda3 	bl	7064 <sc_indicate.constprop.17>
	return 0;
    751e:	4620      	mov	r0, r4
    7520:	bd10      	pop	{r4, pc}
		prev_node->next = node->next;
    7522:	600a      	str	r2, [r1, #0]
		if (list->tail == node) {
    7524:	685a      	ldr	r2, [r3, #4]
    7526:	4294      	cmp	r4, r2
			list->tail = prev_node;
    7528:	bf08      	it	eq
    752a:	6059      	streq	r1, [r3, #4]
    752c:	e7eb      	b.n	7506 <bt_gatt_service_unregister+0x26>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    752e:	4611      	mov	r1, r2
    7530:	6812      	ldr	r2, [r2, #0]
    7532:	e7db      	b.n	74ec <bt_gatt_service_unregister+0xc>
    7534:	20000454 	.word	0x20000454

00007538 <bt_gatt_attr_read>:
{
    7538:	b510      	push	{r4, lr}
    753a:	4610      	mov	r0, r2
    753c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7540:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
    7544:	4291      	cmp	r1, r2
    7546:	d80b      	bhi.n	7560 <bt_gatt_attr_read+0x28>
	len = min(buf_len, value_len - offset);
    7548:	1a54      	subs	r4, r2, r1
    754a:	42a3      	cmp	r3, r4
    754c:	bfa8      	it	ge
    754e:	4623      	movge	r3, r4
    7550:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    7552:	9b03      	ldr	r3, [sp, #12]
    7554:	4622      	mov	r2, r4
    7556:	4419      	add	r1, r3
    7558:	f7f9 f87e 	bl	658 <memcpy>
}
    755c:	4620      	mov	r0, r4
    755e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7560:	f06f 0406 	mvn.w	r4, #6
    7564:	e7fa      	b.n	755c <bt_gatt_attr_read+0x24>
	...

00007568 <bt_gatt_foreach_attr>:
{
    7568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    756c:	4699      	mov	r9, r3
    756e:	4b12      	ldr	r3, [pc, #72]	; (75b8 <bt_gatt_foreach_attr+0x50>)
    7570:	681c      	ldr	r4, [r3, #0]
    7572:	4606      	mov	r6, r0
    7574:	460f      	mov	r7, r1
    7576:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7578:	b1dc      	cbz	r4, 75b2 <bt_gatt_foreach_attr+0x4a>
    757a:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    757c:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7580:	b1bc      	cbz	r4, 75b2 <bt_gatt_foreach_attr+0x4a>
    7582:	2500      	movs	r5, #0
    7584:	e006      	b.n	7594 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7586:	6820      	ldr	r0, [r4, #0]
    7588:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    758c:	8a03      	ldrh	r3, [r0, #16]
    758e:	42b3      	cmp	r3, r6
    7590:	d207      	bcs.n	75a2 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    7592:	3501      	adds	r5, #1
    7594:	88a3      	ldrh	r3, [r4, #4]
    7596:	429d      	cmp	r5, r3
    7598:	dbf5      	blt.n	7586 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    759a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    759c:	b14c      	cbz	r4, 75b2 <bt_gatt_foreach_attr+0x4a>
    759e:	3c08      	subs	r4, #8
    75a0:	e7ee      	b.n	7580 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    75a2:	42bb      	cmp	r3, r7
    75a4:	d8f5      	bhi.n	7592 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    75a6:	4649      	mov	r1, r9
    75a8:	47c0      	blx	r8
    75aa:	2800      	cmp	r0, #0
    75ac:	d1f1      	bne.n	7592 <bt_gatt_foreach_attr+0x2a>
    75ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    75b6:	bf00      	nop
    75b8:	20000454 	.word	0x20000454

000075bc <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
    75bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    75be:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    75c2:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    75c4:	6940      	ldr	r0, [r0, #20]
	nfy.err = -ENOTCONN;
    75c6:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    75c8:	2302      	movs	r3, #2
    75ca:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    75ce:	4a05      	ldr	r2, [pc, #20]	; (75e4 <bt_gatt_indicate.part.8+0x28>)
    75d0:	8a00      	ldrh	r0, [r0, #16]
    75d2:	466b      	mov	r3, sp
    75d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    75d8:	f7ff ffc6 	bl	7568 <bt_gatt_foreach_attr>
}
    75dc:	9800      	ldr	r0, [sp, #0]
    75de:	b007      	add	sp, #28
    75e0:	f85d fb04 	ldr.w	pc, [sp], #4
    75e4:	00007355 	.word	0x00007355

000075e8 <sc_process>:
{
    75e8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    75ea:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    75ee:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    75f2:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    75f4:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    75f8:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    75fc:	3828      	subs	r0, #40	; 0x28
    75fe:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7602:	f3bf 8f5b 	dmb	ish
    7606:	e854 2f00 	ldrex	r2, [r4]
    760a:	f022 0201 	bic.w	r2, r2, #1
    760e:	e844 2100 	strex	r1, r2, [r4]
    7612:	2900      	cmp	r1, #0
    7614:	d1f7      	bne.n	7606 <sc_process+0x1e>
    7616:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    761a:	2200      	movs	r2, #0
    761c:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    7620:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    7624:	4a0e      	ldr	r2, [pc, #56]	; (7660 <sc_process+0x78>)
    7626:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    762a:	4a0e      	ldr	r2, [pc, #56]	; (7664 <sc_process+0x7c>)
    762c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    7630:	aa01      	add	r2, sp, #4
    7632:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7636:	2204      	movs	r2, #4
    7638:	f823 2c08 	strh.w	r2, [r3, #-8]
    763c:	f7ff ffbe 	bl	75bc <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7640:	b958      	cbnz	r0, 765a <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7642:	f3bf 8f5b 	dmb	ish
    7646:	e854 3f00 	ldrex	r3, [r4]
    764a:	f043 0302 	orr.w	r3, r3, #2
    764e:	e844 3200 	strex	r2, r3, [r4]
    7652:	2a00      	cmp	r2, #0
    7654:	d1f7      	bne.n	7646 <sc_process+0x5e>
    7656:	f3bf 8f5b 	dmb	ish
}
    765a:	b002      	add	sp, #8
    765c:	bd10      	pop	{r4, pc}
    765e:	bf00      	nop
    7660:	20006110 	.word	0x20006110
    7664:	00007141 	.word	0x00007141

00007668 <bt_gatt_attr_next>:
{
    7668:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    766a:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    766c:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    766e:	3101      	adds	r1, #1
    7670:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    7672:	2200      	movs	r2, #0
    7674:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7678:	4608      	mov	r0, r1
    767a:	4a03      	ldr	r2, [pc, #12]	; (7688 <bt_gatt_attr_next+0x20>)
    767c:	f7ff ff74 	bl	7568 <bt_gatt_foreach_attr>
}
    7680:	9801      	ldr	r0, [sp, #4]
    7682:	b003      	add	sp, #12
    7684:	f85d fb04 	ldr.w	pc, [sp], #4
    7688:	00006e33 	.word	0x00006e33

0000768c <bt_gatt_attr_read_chrc>:
{
    768c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    768e:	68cf      	ldr	r7, [r1, #12]
{
    7690:	b087      	sub	sp, #28
    7692:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    7694:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    7696:	793b      	ldrb	r3, [r7, #4]
{
    7698:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    769c:	f88d 3004 	strb.w	r3, [sp, #4]
{
    76a0:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    76a2:	f7ff ffe1 	bl	7668 <bt_gatt_attr_next>
	if (!next) {
    76a6:	b9d0      	cbnz	r0, 76de <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    76a8:	f88d 0005 	strb.w	r0, [sp, #5]
    76ac:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    76b0:	6839      	ldr	r1, [r7, #0]
    76b2:	780b      	ldrb	r3, [r1, #0]
    76b4:	b9bb      	cbnz	r3, 76e6 <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    76b6:	884b      	ldrh	r3, [r1, #2]
    76b8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    76bc:	2305      	movs	r3, #5
	if (offset > value_len) {
    76be:	42ab      	cmp	r3, r5
    76c0:	d319      	bcc.n	76f6 <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    76c2:	1b5b      	subs	r3, r3, r5
    76c4:	42a3      	cmp	r3, r4
    76c6:	bfa8      	it	ge
    76c8:	4623      	movge	r3, r4
    76ca:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    76cc:	ab01      	add	r3, sp, #4
    76ce:	4622      	mov	r2, r4
    76d0:	1959      	adds	r1, r3, r5
    76d2:	4630      	mov	r0, r6
    76d4:	f7f8 ffc0 	bl	658 <memcpy>
}
    76d8:	4620      	mov	r0, r4
    76da:	b007      	add	sp, #28
    76dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    76de:	8a03      	ldrh	r3, [r0, #16]
    76e0:	f8ad 3005 	strh.w	r3, [sp, #5]
    76e4:	e7e4      	b.n	76b0 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    76e6:	2210      	movs	r2, #16
    76e8:	3101      	adds	r1, #1
    76ea:	f10d 0007 	add.w	r0, sp, #7
    76ee:	f7f8 ffb3 	bl	658 <memcpy>
		value_len += 16;
    76f2:	2313      	movs	r3, #19
    76f4:	e7e3      	b.n	76be <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    76f6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    76fa:	e7ed      	b.n	76d8 <bt_gatt_attr_read_chrc+0x4c>

000076fc <bt_gatt_notify>:
{
    76fc:	b570      	push	{r4, r5, r6, lr}
    76fe:	461d      	mov	r5, r3
    7700:	b086      	sub	sp, #24
    7702:	8a0c      	ldrh	r4, [r1, #16]
	if (conn) {
    7704:	b120      	cbz	r0, 7710 <bt_gatt_notify+0x14>
		return gatt_notify(conn, attr->handle, data, len);
    7706:	4621      	mov	r1, r4
    7708:	f7ff fc15 	bl	6f36 <gatt_notify>
}
    770c:	b006      	add	sp, #24
    770e:	bd70      	pop	{r4, r5, r6, pc}
	nfy.err = -ENOTCONN;
    7710:	f06f 0338 	mvn.w	r3, #56	; 0x38
    7714:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_NOTIFY;
    7716:	2301      	movs	r3, #1
	nfy.attr = attr;
    7718:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    771a:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.data = data;
    771e:	9203      	str	r2, [sp, #12]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    7720:	4620      	mov	r0, r4
    7722:	466b      	mov	r3, sp
    7724:	4a04      	ldr	r2, [pc, #16]	; (7738 <bt_gatt_notify+0x3c>)
	nfy.len = len;
    7726:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    772a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    772e:	f7ff ff1b 	bl	7568 <bt_gatt_foreach_attr>
	return nfy.err;
    7732:	9800      	ldr	r0, [sp, #0]
    7734:	e7ea      	b.n	770c <bt_gatt_notify+0x10>
    7736:	bf00      	nop
    7738:	00007355 	.word	0x00007355

0000773c <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
    773c:	f7ff bb4c 	b.w	6dd8 <bt_att_get_mtu>

00007740 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    7740:	4603      	mov	r3, r0
    7742:	4a03      	ldr	r2, [pc, #12]	; (7750 <bt_gatt_connected+0x10>)
    7744:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7748:	2001      	movs	r0, #1
    774a:	f7ff bf0d 	b.w	7568 <bt_gatt_foreach_attr>
    774e:	bf00      	nop
    7750:	000070d1 	.word	0x000070d1

00007754 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7754:	4603      	mov	r3, r0
    7756:	4a03      	ldr	r2, [pc, #12]	; (7764 <bt_gatt_disconnected+0x10>)
    7758:	f64f 71ff 	movw	r1, #65535	; 0xffff
    775c:	2001      	movs	r0, #1
    775e:	f7ff bf03 	b.w	7568 <bt_gatt_foreach_attr>
    7762:	bf00      	nop
    7764:	000071b9 	.word	0x000071b9

00007768 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7768:	4b04      	ldr	r3, [pc, #16]	; (777c <bt_smp_accept+0x14>)
    776a:	6818      	ldr	r0, [r3, #0]
    776c:	b918      	cbnz	r0, 7776 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    776e:	4a04      	ldr	r2, [pc, #16]	; (7780 <bt_smp_accept+0x18>)
    7770:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7772:	600b      	str	r3, [r1, #0]

		return 0;
    7774:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    7776:	f06f 000b 	mvn.w	r0, #11
}
    777a:	4770      	bx	lr
    777c:	200004c0 	.word	0x200004c0
    7780:	20006150 	.word	0x20006150

00007784 <bt_smp_recv>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    7784:	2100      	movs	r1, #0
{
    7786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    778a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
    778c:	4608      	mov	r0, r1
    778e:	f7fe fa80 	bl	5c92 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7792:	f100 0608 	add.w	r6, r0, #8
	buf = bt_l2cap_create_pdu(NULL, 0);
    7796:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7798:	2101      	movs	r1, #1
    779a:	4630      	mov	r0, r6
    779c:	f010 f9f2 	bl	17b84 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    77a0:	2505      	movs	r5, #5
    77a2:	7005      	strb	r5, [r0, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    77a4:	2101      	movs	r1, #1
    77a6:	4630      	mov	r0, r6
    77a8:	f010 f9ec 	bl	17b84 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    77ac:	7005      	strb	r5, [r0, #0]
    77ae:	4622      	mov	r2, r4
    77b0:	4638      	mov	r0, r7
    77b2:	2300      	movs	r3, #0
    77b4:	2106      	movs	r1, #6
}
    77b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77ba:	f7fe ba6d 	b.w	5c98 <bt_l2cap_send_cb>

000077be <bt_smp_sign_verify>:
    77be:	f06f 0022 	mvn.w	r0, #34	; 0x22
    77c2:	4770      	bx	lr

000077c4 <bt_smp_init>:

int bt_smp_init(void)
{
    77c4:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    77c6:	4802      	ldr	r0, [pc, #8]	; (77d0 <bt_smp_init+0xc>)
    77c8:	f7fe f9c0 	bl	5b4c <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    77cc:	2000      	movs	r0, #0
    77ce:	bd08      	pop	{r3, pc}
    77d0:	20006144 	.word	0x20006144

000077d4 <bt_mesh_provision>:
static bool provisioned;

int bt_mesh_provision(const u8_t net_key[16], u16_t net_idx,
		      u8_t flags, u32_t iv_index, u32_t seq,
		      u16_t addr, const u8_t dev_key[16])
{
    77d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77d8:	4605      	mov	r5, r0
    77da:	460e      	mov	r6, r1
    77dc:	4614      	mov	r4, r2
    77de:	4698      	mov	r8, r3
    77e0:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	BT_INFO("Primary Element: 0x%04x", addr);
	BT_DBG("net_idx 0x%04x flags 0x%02x iv_index 0x%04x",
	       net_idx, flags, iv_index);

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable();
    77e4:	f008 f820 	bl	f828 <bt_mesh_proxy_prov_disable>
	}

	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    77e8:	462a      	mov	r2, r5
    77ea:	4643      	mov	r3, r8
    77ec:	4621      	mov	r1, r4
    77ee:	4630      	mov	r0, r6
    77f0:	f000 fe36 	bl	8460 <bt_mesh_net_create>
	if (err) {
    77f4:	4605      	mov	r5, r0
    77f6:	b120      	cbz	r0, 7802 <bt_mesh_provision+0x2e>
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
			bt_mesh_proxy_prov_enable();
    77f8:	f007 fffe 	bl	f7f8 <bt_mesh_proxy_prov_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_complete(net_idx, addr);
	}

	return 0;
}
    77fc:	4628      	mov	r0, r5
    77fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_mesh.seq = seq;
    7802:	4c16      	ldr	r4, [pc, #88]	; (785c <bt_mesh_provision+0x88>)
    7804:	9a06      	ldr	r2, [sp, #24]
    7806:	6863      	ldr	r3, [r4, #4]
    7808:	f362 0317 	bfi	r3, r2, #0, #24
    780c:	6063      	str	r3, [r4, #4]
	bt_mesh_comp_provision(addr);
    780e:	4638      	mov	r0, r7
    7810:	f003 f9d8 	bl	abc4 <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    7814:	2210      	movs	r2, #16
    7816:	9908      	ldr	r1, [sp, #32]
    7818:	f504 70aa 	add.w	r0, r4, #340	; 0x154
    781c:	f7f8 ff1c 	bl	658 <memcpy>
	provisioned = true;
    7820:	4b0f      	ldr	r3, [pc, #60]	; (7860 <bt_mesh_provision+0x8c>)
    7822:	2201      	movs	r2, #1
    7824:	701a      	strb	r2, [r3, #0]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    7826:	f005 fa03 	bl	cc30 <bt_mesh_beacon_get>
    782a:	2801      	cmp	r0, #1
    782c:	d112      	bne.n	7854 <bt_mesh_provision+0x80>
		bt_mesh_beacon_enable();
    782e:	f000 fb93 	bl	7f58 <bt_mesh_beacon_enable>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    7832:	f005 fa57 	bl	cce4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    7836:	2802      	cmp	r0, #2
    7838:	d003      	beq.n	7842 <bt_mesh_provision+0x6e>
		bt_mesh_proxy_gatt_enable();
    783a:	f008 f80d 	bl	f858 <bt_mesh_proxy_gatt_enable>
		bt_mesh_adv_update();
    783e:	f000 f95d 	bl	7afc <bt_mesh_adv_update>
		bt_mesh_scan_enable();
    7842:	f000 f9c9 	bl	7bd8 <bt_mesh_scan_enable>
		bt_mesh_friend_init();
    7846:	f006 fb8f 	bl	df68 <bt_mesh_friend_init>
		bt_mesh_prov_complete(net_idx, addr);
    784a:	4639      	mov	r1, r7
    784c:	4630      	mov	r0, r6
    784e:	f007 fccd 	bl	f1ec <bt_mesh_prov_complete>
	return 0;
    7852:	e7d3      	b.n	77fc <bt_mesh_provision+0x28>
		bt_mesh_beacon_disable();
    7854:	f000 fbaa 	bl	7fac <bt_mesh_beacon_disable>
    7858:	e7eb      	b.n	7832 <bt_mesh_provision+0x5e>
    785a:	bf00      	nop
    785c:	20006168 	.word	0x20006168
    7860:	20000554 	.word	0x20000554

00007864 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
    7864:	b570      	push	{r4, r5, r6, lr}
	if (!provisioned) {
    7866:	4e1e      	ldr	r6, [pc, #120]	; (78e0 <bt_mesh_reset+0x7c>)
    7868:	7833      	ldrb	r3, [r6, #0]
    786a:	b3bb      	cbz	r3, 78dc <bt_mesh_reset+0x78>
		return;
	}

	bt_mesh_comp_unprovision();

	bt_mesh.iv_index = 0;
    786c:	4c1d      	ldr	r4, [pc, #116]	; (78e4 <bt_mesh_reset+0x80>)
	bt_mesh_comp_unprovision();
    786e:	f003 f9bf 	bl	abf0 <bt_mesh_comp_unprovision>
	bt_mesh.seq = 0;
    7872:	6863      	ldr	r3, [r4, #4]
	bt_mesh.iv_index = 0;
    7874:	2500      	movs	r5, #0
	bt_mesh.seq = 0;
    7876:	f365 0317 	bfi	r3, r5, #0, #24
    787a:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = 0;
    787c:	0e1b      	lsrs	r3, r3, #24
	bt_mesh.pending_update = 0;
	bt_mesh.valid = 0;
	bt_mesh.last_update = 0;
	bt_mesh.ivu_initiator = 0;
    787e:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
    7882:	f365 0341 	bfi	r3, r5, #1, #1
	bt_mesh.last_update = 0;
    7886:	2100      	movs	r1, #0
    7888:	2000      	movs	r0, #0
	bt_mesh.ivu_initiator = 0;
    788a:	71e3      	strb	r3, [r4, #7]
	bt_mesh.last_update = 0;
    788c:	e9c4 0102 	strd	r0, r1, [r4, #8]

	k_delayed_work_cancel(&bt_mesh.ivu_complete);
    7890:	f504 7096 	add.w	r0, r4, #300	; 0x12c
	bt_mesh.iv_index = 0;
    7894:	6025      	str	r5, [r4, #0]
	k_delayed_work_cancel(&bt_mesh.ivu_complete);
    7896:	f011 fa2b 	bl	18cf0 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    789a:	f005 f8ad 	bl	c9f8 <bt_mesh_cfg_reset>

	bt_mesh_rx_reset();
    789e:	f002 fb09 	bl	9eb4 <bt_mesh_rx_reset>
	bt_mesh_tx_reset();
    78a2:	f002 fb13 	bl	9ecc <bt_mesh_tx_reset>
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_disable(true);
	}

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
    78a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    78aa:	f006 f8f1 	bl	da90 <bt_mesh_friend_clear_net_idx>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
    78ae:	f007 fff7 	bl	f8a0 <bt_mesh_proxy_gatt_disable>
	}

	memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    78b2:	4629      	mov	r1, r5
    78b4:	2210      	movs	r2, #16
    78b6:	f504 70aa 	add.w	r0, r4, #340	; 0x154
    78ba:	f7f8 fef9 	bl	6b0 <memset>

	memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    78be:	4629      	mov	r1, r5
    78c0:	2250      	movs	r2, #80	; 0x50
    78c2:	f504 705f 	add.w	r0, r4, #892	; 0x37c
    78c6:	f7f8 fef3 	bl	6b0 <memset>

	provisioned = false;
    78ca:	7035      	strb	r5, [r6, #0]

	bt_mesh_scan_disable();
    78cc:	f000 f996 	bl	7bfc <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    78d0:	f000 fb6c 	bl	7fac <bt_mesh_beacon_disable>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    78d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_reset();
    78d8:	f007 bc90 	b.w	f1fc <bt_mesh_prov_reset>
    78dc:	bd70      	pop	{r4, r5, r6, pc}
    78de:	bf00      	nop
    78e0:	20000554 	.word	0x20000554
    78e4:	20006168 	.word	0x20006168

000078e8 <bt_mesh_is_provisioned>:

bool bt_mesh_is_provisioned(void)
{
	return provisioned;
}
    78e8:	4b01      	ldr	r3, [pc, #4]	; (78f0 <bt_mesh_is_provisioned+0x8>)
    78ea:	7818      	ldrb	r0, [r3, #0]
    78ec:	4770      	bx	lr
    78ee:	bf00      	nop
    78f0:	20000554 	.word	0x20000554

000078f4 <bt_mesh_prov_enable>:
	return provisioned;
    78f4:	4b0b      	ldr	r3, [pc, #44]	; (7924 <bt_mesh_prov_enable+0x30>)

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
	if (bt_mesh_is_provisioned()) {
    78f6:	781b      	ldrb	r3, [r3, #0]
{
    78f8:	b510      	push	{r4, lr}
    78fa:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
    78fc:	b973      	cbnz	r3, 791c <bt_mesh_prov_enable+0x28>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
    78fe:	07c3      	lsls	r3, r0, #31
    7900:	d503      	bpl.n	790a <bt_mesh_prov_enable+0x16>
	    (bearers & BT_MESH_PROV_ADV)) {
		/* Make sure we're scanning for provisioning inviations */
		bt_mesh_scan_enable();
    7902:	f000 f969 	bl	7bd8 <bt_mesh_scan_enable>
		/* Enable unprovisioned beacon sending */
		bt_mesh_beacon_enable();
    7906:	f000 fb27 	bl	7f58 <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
    790a:	f014 0002 	ands.w	r0, r4, #2
    790e:	d007      	beq.n	7920 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		bt_mesh_proxy_prov_enable();
    7910:	f007 ff72 	bl	f7f8 <bt_mesh_proxy_prov_enable>
		bt_mesh_adv_update();
    7914:	f000 f8f2 	bl	7afc <bt_mesh_adv_update>
	}

	return 0;
    7918:	2000      	movs	r0, #0
    791a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    791c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    7920:	bd10      	pop	{r4, pc}
    7922:	bf00      	nop
    7924:	20000554 	.word	0x20000554

00007928 <bt_mesh_init>:
	return 0;
}

int bt_mesh_init(const struct bt_mesh_prov *prov,
		 const struct bt_mesh_comp *comp)
{
    7928:	b538      	push	{r3, r4, r5, lr}
    792a:	4605      	mov	r5, r0
	err = bt_mesh_test();
	if (err) {
		return err;
	}

	err = bt_mesh_comp_register(comp);
    792c:	4608      	mov	r0, r1
    792e:	f003 f937 	bl	aba0 <bt_mesh_comp_register>
	if (err) {
    7932:	4604      	mov	r4, r0
    7934:	b970      	cbnz	r0, 7954 <bt_mesh_init+0x2c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		err = bt_mesh_prov_init(prov);
    7936:	4628      	mov	r0, r5
    7938:	f007 fc34 	bl	f1a4 <bt_mesh_prov_init>
		if (err) {
    793c:	4604      	mov	r4, r0
    793e:	b948      	cbnz	r0, 7954 <bt_mesh_init+0x2c>
			return err;
		}
	}

	bt_mesh_net_init();
    7940:	f001 fb16 	bl	8f70 <bt_mesh_net_init>
	bt_mesh_trans_init();
    7944:	f002 fac8 	bl	9ed8 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
    7948:	f000 faf2 	bl	7f30 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
    794c:	f000 f92a 	bl	7ba4 <bt_mesh_adv_init>

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
		bt_mesh_proxy_init();
    7950:	f008 f92c 	bl	fbac <bt_mesh_proxy_init>
	}

	return 0;
}
    7954:	4620      	mov	r0, r4
    7956:	bd38      	pop	{r3, r4, r5, pc}

00007958 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    7958:	4b02      	ldr	r3, [pc, #8]	; (7964 <adv_alloc+0xc>)
    795a:	220c      	movs	r2, #12
    795c:	fb02 3000 	mla	r0, r2, r0, r3
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	20000558 	.word	0x20000558

00007968 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, s8_t rssi,
			    u8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    7968:	2a03      	cmp	r2, #3
{
    796a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    796e:	4688      	mov	r8, r1
    7970:	461c      	mov	r4, r3
	if (adv_type != BT_LE_ADV_NONCONN_IND) {
    7972:	d104      	bne.n	797e <bt_mesh_scan_cb+0x16>
    7974:	f103 0908 	add.w	r9, r3, #8
		return;
	}

	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	while (buf->len > 1) {
    7978:	88a3      	ldrh	r3, [r4, #4]
    797a:	2b01      	cmp	r3, #1
    797c:	d801      	bhi.n	7982 <bt_mesh_scan_cb+0x1a>
    797e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct net_buf_simple_state state;
		u8_t len, type;

		len = net_buf_simple_pull_u8(buf);
    7982:	4620      	mov	r0, r4
    7984:	f010 f971 	bl	17c6a <net_buf_simple_pull_u8>
		/* Check for early termination */
		if (len == 0) {
    7988:	4606      	mov	r6, r0
    798a:	2800      	cmp	r0, #0
    798c:	d0f7      	beq.n	797e <bt_mesh_scan_cb+0x16>
			return;
		}

		if (len > buf->len || buf->len < 1) {
    798e:	88a3      	ldrh	r3, [r4, #4]
    7990:	b285      	uxth	r5, r0
    7992:	429d      	cmp	r5, r3
    7994:	d8f3      	bhi.n	797e <bt_mesh_scan_cb+0x16>
    7996:	2b00      	cmp	r3, #0
    7998:	d0f1      	beq.n	797e <bt_mesh_scan_cb+0x16>
	state->offset = net_buf_simple_headroom(buf);
    799a:	4620      	mov	r0, r4
    799c:	f010 f992 	bl	17cc4 <net_buf_simple_headroom>
    79a0:	4607      	mov	r7, r0
			return;
		}

		net_buf_simple_save(buf, &state);

		type = net_buf_simple_pull_u8(buf);
    79a2:	4620      	mov	r0, r4
	state->len = buf->len;
    79a4:	f8b4 a004 	ldrh.w	sl, [r4, #4]
    79a8:	f010 f95f 	bl	17c6a <net_buf_simple_pull_u8>

		buf->len = len - 1;
    79ac:	3d01      	subs	r5, #1

		switch (type) {
    79ae:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    79b0:	80a5      	strh	r5, [r4, #4]
		switch (type) {
    79b2:	d007      	beq.n	79c4 <bt_mesh_scan_cb+0x5c>
    79b4:	282b      	cmp	r0, #43	; 0x2b
    79b6:	d014      	beq.n	79e2 <bt_mesh_scan_cb+0x7a>
    79b8:	2829      	cmp	r0, #41	; 0x29
    79ba:	d108      	bne.n	79ce <bt_mesh_scan_cb+0x66>
		case BT_DATA_MESH_MESSAGE:
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
			break;
#if defined(CONFIG_BT_MESH_PB_ADV)
		case BT_DATA_MESH_PROV:
			bt_mesh_pb_adv_recv(buf);
    79bc:	4620      	mov	r0, r4
    79be:	f007 fba7 	bl	f110 <bt_mesh_pb_adv_recv>
    79c2:	e004      	b.n	79ce <bt_mesh_scan_cb+0x66>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    79c4:	2200      	movs	r2, #0
    79c6:	4641      	mov	r1, r8
    79c8:	4620      	mov	r0, r4
    79ca:	f001 f9af 	bl	8d2c <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    79ce:	fa19 f787 	uxtah	r7, r9, r7
    79d2:	6027      	str	r7, [r4, #0]
	buf->len = state->len;
    79d4:	f8a4 a004 	strh.w	sl, [r4, #4]
		default:
			break;
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
    79d8:	4631      	mov	r1, r6
    79da:	4620      	mov	r0, r4
    79dc:	f010 f93d 	bl	17c5a <net_buf_simple_pull>
    79e0:	e7ca      	b.n	7978 <bt_mesh_scan_cb+0x10>
			bt_mesh_beacon_recv(buf);
    79e2:	4620      	mov	r0, r4
    79e4:	f000 fa0c 	bl	7e00 <bt_mesh_beacon_recv>
    79e8:	e7f1      	b.n	79ce <bt_mesh_scan_cb+0x66>
	...

000079ec <adv_thread>:
{
    79ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    79f0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7af0 <adv_thread+0x104>
	const s32_t adv_int_min = ((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
    79f4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 7af4 <adv_thread+0x108>
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    79f8:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 7af8 <adv_thread+0x10c>
{
    79fc:	b089      	sub	sp, #36	; 0x24
			buf = net_buf_get(&adv_queue, K_NO_WAIT);
    79fe:	2100      	movs	r1, #0
    7a00:	4640      	mov	r0, r8
    7a02:	f010 f829 	bl	17a58 <net_buf_get>
    7a06:	4605      	mov	r5, r0
			while (!buf) {
    7a08:	2d00      	cmp	r5, #0
    7a0a:	d059      	beq.n	7ac0 <adv_thread+0xd4>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    7a0c:	89eb      	ldrh	r3, [r5, #14]
    7a0e:	442b      	add	r3, r5
    7a10:	3313      	adds	r3, #19
    7a12:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
    7a16:	6819      	ldr	r1, [r3, #0]
    7a18:	7a0a      	ldrb	r2, [r1, #8]
    7a1a:	0750      	lsls	r0, r2, #29
    7a1c:	d562      	bpl.n	7ae4 <adv_thread+0xf8>
			BT_MESH_ADV(buf)->busy = 0;
    7a1e:	f36f 0282 	bfc	r2, #2, #1
    7a22:	720a      	strb	r2, [r1, #8]
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    7a24:	681b      	ldr	r3, [r3, #0]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
    7a26:	f899 200e 	ldrb.w	r2, [r9, #14]
    7a2a:	2a09      	cmp	r2, #9
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
    7a2c:	7a5a      	ldrb	r2, [r3, #9]
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    7a2e:	e893 00c0 	ldmia.w	r3, {r6, r7}
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
    7a32:	f002 021f 	and.w	r2, r2, #31
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
    7a36:	7a1b      	ldrb	r3, [r3, #8]
				   ADV_INT_FAST : ADV_INT_DEFAULT);
    7a38:	bf34      	ite	cc
    7a3a:	2164      	movcc	r1, #100	; 0x64
    7a3c:	2114      	movcs	r1, #20
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
    7a3e:	428a      	cmp	r2, r1
    7a40:	bfb8      	it	lt
    7a42:	b28a      	uxthlt	r2, r1
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
    7a44:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    7a48:	f003 0303 	and.w	r3, r3, #3
	adv_int = max(adv_int_min, BT_MESH_ADV(buf)->adv_int);
    7a4c:	bfa8      	it	ge
    7a4e:	b292      	uxthge	r2, r2
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    7a50:	f81a 3003 	ldrb.w	r3, [sl, r3]
    7a54:	f88d 300c 	strb.w	r3, [sp, #12]
	ad.data_len = buf->len;
    7a58:	89ab      	ldrh	r3, [r5, #12]
    7a5a:	f88d 300d 	strb.w	r3, [sp, #13]
	ad.data = buf->data;
    7a5e:	68ab      	ldr	r3, [r5, #8]
    7a60:	9304      	str	r3, [sp, #16]
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
    7a62:	f102 040a 	add.w	r4, r2, #10
	param.options = 0;
    7a66:	2300      	movs	r3, #0
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
    7a68:	fb01 4404 	mla	r4, r1, r4, r4
	param.interval_min = ADV_INT(adv_int);
    7a6c:	00d2      	lsls	r2, r2, #3
    7a6e:	2105      	movs	r1, #5
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    7a70:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_INT(adv_int);
    7a72:	fb92 f2f1 	sdiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    7a76:	a805      	add	r0, sp, #20
	param.interval_min = ADV_INT(adv_int);
    7a78:	f8ad 2016 	strh.w	r2, [sp, #22]
	param.interval_max = param.interval_min;
    7a7c:	f8ad 2018 	strh.w	r2, [sp, #24]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    7a80:	a903      	add	r1, sp, #12
    7a82:	2201      	movs	r2, #1
	param.options = 0;
    7a84:	f88d 3014 	strb.w	r3, [sp, #20]
	param.own_addr = NULL;
    7a88:	9307      	str	r3, [sp, #28]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    7a8a:	f7fd f96f 	bl	4d6c <bt_le_adv_start>
    7a8e:	4683      	mov	fp, r0
	net_buf_unref(buf);
    7a90:	4628      	mov	r0, r5
	duration = (BT_MESH_ADV(buf)->count + 1) * (adv_int + 10);
    7a92:	b2a4      	uxth	r4, r4
	net_buf_unref(buf);
    7a94:	f010 f856 	bl	17b44 <net_buf_unref>
	if (cb && cb->start) {
    7a98:	b1e6      	cbz	r6, 7ad4 <adv_thread+0xe8>
    7a9a:	6833      	ldr	r3, [r6, #0]
    7a9c:	b11b      	cbz	r3, 7aa6 <adv_thread+0xba>
		cb->start(duration, err, cb_data);
    7a9e:	463a      	mov	r2, r7
    7aa0:	4659      	mov	r1, fp
    7aa2:	4620      	mov	r0, r4
    7aa4:	4798      	blx	r3
	if (err) {
    7aa6:	f1bb 0f00 	cmp.w	fp, #0
    7aaa:	d11b      	bne.n	7ae4 <adv_thread+0xf8>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    7aac:	4620      	mov	r0, r4
    7aae:	f010 fd45 	bl	1853c <_impl_k_sleep>
	err = bt_le_adv_stop();
    7ab2:	f7fd f9f7 	bl	4ea4 <bt_le_adv_stop>
	if (cb && cb->end) {
    7ab6:	6873      	ldr	r3, [r6, #4]
    7ab8:	b1a3      	cbz	r3, 7ae4 <adv_thread+0xf8>
		cb->end(err, cb_data);
    7aba:	4639      	mov	r1, r7
    7abc:	4798      	blx	r3
    7abe:	e011      	b.n	7ae4 <adv_thread+0xf8>
				timeout = bt_mesh_proxy_adv_start();
    7ac0:	f007 ff78 	bl	f9b4 <bt_mesh_proxy_adv_start>
				buf = net_buf_get(&adv_queue, timeout);
    7ac4:	4601      	mov	r1, r0
    7ac6:	4640      	mov	r0, r8
    7ac8:	f00f ffc6 	bl	17a58 <net_buf_get>
    7acc:	4605      	mov	r5, r0
				bt_mesh_proxy_adv_stop();
    7ace:	f008 f861 	bl	fb94 <bt_mesh_proxy_adv_stop>
    7ad2:	e799      	b.n	7a08 <adv_thread+0x1c>
	if (err) {
    7ad4:	f1bb 0f00 	cmp.w	fp, #0
    7ad8:	d104      	bne.n	7ae4 <adv_thread+0xf8>
    7ada:	4620      	mov	r0, r4
    7adc:	f010 fd2e 	bl	1853c <_impl_k_sleep>
	err = bt_le_adv_stop();
    7ae0:	f7fd f9e0 	bl	4ea4 <bt_le_adv_stop>
		k_call_stacks_analyze();
    7ae4:	f010 f95c 	bl	17da0 <k_call_stacks_analyze>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7ae8:	f010 fd0a 	bl	18500 <_impl_k_yield>
    7aec:	e787      	b.n	79fe <adv_thread+0x12>
    7aee:	bf00      	nop
    7af0:	20006ba8 	.word	0x20006ba8
    7af4:	20005e90 	.word	0x20005e90
    7af8:	00019ef7 	.word	0x00019ef7

00007afc <bt_mesh_adv_update>:
	k_fifo_cancel_wait(&adv_queue);
    7afc:	4801      	ldr	r0, [pc, #4]	; (7b04 <bt_mesh_adv_update+0x8>)
    7afe:	f010 baf5 	b.w	180ec <k_queue_cancel_wait>
    7b02:	bf00      	nop
    7b04:	20006ba8 	.word	0x20006ba8

00007b08 <bt_mesh_adv_create_from_pool>:
{
    7b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b0a:	460c      	mov	r4, r1
	buf = net_buf_alloc(pool, timeout);
    7b0c:	9907      	ldr	r1, [sp, #28]
{
    7b0e:	4617      	mov	r7, r2
    7b10:	461e      	mov	r6, r3
	buf = net_buf_alloc(pool, timeout);
    7b12:	f00f ff61 	bl	179d8 <net_buf_alloc>
	if (!buf) {
    7b16:	4605      	mov	r5, r0
    7b18:	b1c8      	cbz	r0, 7b4e <bt_mesh_adv_create_from_pool+0x46>
	adv = get_id(net_buf_id(buf));
    7b1a:	f00f ff47 	bl	179ac <net_buf_id>
    7b1e:	47a0      	blx	r4
    7b20:	89eb      	ldrh	r3, [r5, #14]
    7b22:	442b      	add	r3, r5
    7b24:	3313      	adds	r3, #19
    7b26:	f023 0303 	bic.w	r3, r3, #3
    7b2a:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    7b2c:	6018      	str	r0, [r3, #0]
	memset(adv, 0, sizeof(*adv));
    7b2e:	220c      	movs	r2, #12
    7b30:	2100      	movs	r1, #0
    7b32:	f7f8 fdbd 	bl	6b0 <memset>
	adv->type         = type;
    7b36:	7a23      	ldrb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
    7b38:	f89d 2018 	ldrb.w	r2, [sp, #24]
	adv->type         = type;
    7b3c:	f367 0301 	bfi	r3, r7, #0, #2
	adv->count        = xmit_count;
    7b40:	f366 03c5 	bfi	r3, r6, #3, #3
    7b44:	7223      	strb	r3, [r4, #8]
	adv->adv_int      = xmit_int;
    7b46:	7a63      	ldrb	r3, [r4, #9]
    7b48:	f362 0304 	bfi	r3, r2, #0, #5
    7b4c:	7263      	strb	r3, [r4, #9]
}
    7b4e:	4628      	mov	r0, r5
    7b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007b54 <bt_mesh_adv_create>:
{
    7b54:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    7b56:	e88d 000c 	stmia.w	sp, {r2, r3}
    7b5a:	460b      	mov	r3, r1
    7b5c:	4602      	mov	r2, r0
    7b5e:	4903      	ldr	r1, [pc, #12]	; (7b6c <bt_mesh_adv_create+0x18>)
    7b60:	4803      	ldr	r0, [pc, #12]	; (7b70 <bt_mesh_adv_create+0x1c>)
    7b62:	f7ff ffd1 	bl	7b08 <bt_mesh_adv_create_from_pool>
}
    7b66:	b003      	add	sp, #12
    7b68:	f85d fb04 	ldr.w	pc, [sp], #4
    7b6c:	00007959 	.word	0x00007959
    7b70:	20006be8 	.word	0x20006be8

00007b74 <bt_mesh_adv_send>:
{
    7b74:	b510      	push	{r4, lr}
    7b76:	89c3      	ldrh	r3, [r0, #14]
    7b78:	4403      	add	r3, r0
    7b7a:	3313      	adds	r3, #19
    7b7c:	f023 0303 	bic.w	r3, r3, #3
	BT_MESH_ADV(buf)->cb = cb;
    7b80:	681c      	ldr	r4, [r3, #0]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    7b82:	e884 0006 	stmia.w	r4, {r1, r2}
	BT_MESH_ADV(buf)->busy = 1;
    7b86:	681a      	ldr	r2, [r3, #0]
    7b88:	7a13      	ldrb	r3, [r2, #8]
    7b8a:	f043 0304 	orr.w	r3, r3, #4
    7b8e:	7213      	strb	r3, [r2, #8]
	net_buf_put(&adv_queue, net_buf_ref(buf));
    7b90:	f00f fff4 	bl	17b7c <net_buf_ref>
}
    7b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    7b98:	4601      	mov	r1, r0
    7b9a:	4801      	ldr	r0, [pc, #4]	; (7ba0 <bt_mesh_adv_send+0x2c>)
    7b9c:	f00f bfc4 	b.w	17b28 <net_buf_put>
    7ba0:	20006ba8 	.word	0x20006ba8

00007ba4 <bt_mesh_adv_init>:
	}
}

void bt_mesh_adv_init(void)
{
    7ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    7ba6:	2300      	movs	r3, #0
    7ba8:	f06f 0208 	mvn.w	r2, #8
    7bac:	9305      	str	r3, [sp, #20]
    7bae:	9304      	str	r3, [sp, #16]
    7bb0:	9203      	str	r2, [sp, #12]
    7bb2:	9302      	str	r3, [sp, #8]
    7bb4:	9301      	str	r3, [sp, #4]
    7bb6:	9300      	str	r3, [sp, #0]
    7bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    7bbc:	4b03      	ldr	r3, [pc, #12]	; (7bcc <bt_mesh_adv_init+0x28>)
    7bbe:	4904      	ldr	r1, [pc, #16]	; (7bd0 <bt_mesh_adv_init+0x2c>)
    7bc0:	4804      	ldr	r0, [pc, #16]	; (7bd4 <bt_mesh_adv_init+0x30>)
    7bc2:	f010 ff87 	bl	18ad4 <_impl_k_thread_create>
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_THREAD_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
}
    7bc6:	b007      	add	sp, #28
    7bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    7bcc:	000079ed 	.word	0x000079ed
    7bd0:	20003350 	.word	0x20003350
    7bd4:	20000648 	.word	0x20000648

00007bd8 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    7bd8:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
    7bda:	4b06      	ldr	r3, [pc, #24]	; (7bf4 <bt_mesh_scan_enable+0x1c>)
			.interval   = MESH_SCAN_INTERVAL,
			.window     = MESH_SCAN_WINDOW };

	BT_DBG("");

	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    7bdc:	4906      	ldr	r1, [pc, #24]	; (7bf8 <bt_mesh_scan_enable+0x20>)
	struct bt_le_scan_param scan_param = {
    7bde:	6818      	ldr	r0, [r3, #0]
    7be0:	9000      	str	r0, [sp, #0]
    7be2:	889b      	ldrh	r3, [r3, #4]
    7be4:	f8ad 3004 	strh.w	r3, [sp, #4]
	return bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    7be8:	4668      	mov	r0, sp
    7bea:	f7fd f981 	bl	4ef0 <bt_le_scan_start>
}
    7bee:	b003      	add	sp, #12
    7bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf4:	0001944c 	.word	0x0001944c
    7bf8:	00007969 	.word	0x00007969

00007bfc <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
	BT_DBG("");

	return bt_le_scan_stop();
    7bfc:	f7fd ba14 	b.w	5028 <bt_le_scan_stop>

00007c00 <beacon_complete>:
{
	memcpy(sub->beacon_cache, data, 21);
}

static void beacon_complete(int err, void *user_data)
{
    7c00:	b510      	push	{r4, lr}
    7c02:	460c      	mov	r4, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    7c04:	f010 fda8 	bl	18758 <_impl_k_uptime_get_32>
	struct bt_mesh_subnet *sub = user_data;

	BT_DBG("err %d", err);

	sub->beacon_sent = k_uptime_get_32();
    7c08:	6020      	str	r0, [r4, #0]
    7c0a:	bd10      	pop	{r4, pc}

00007c0c <bt_mesh_beacon_ivu_initiator.part.1>:
void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
}

void bt_mesh_beacon_ivu_initiator(bool enable)
    7c0c:	b508      	push	{r3, lr}
{
	bt_mesh.ivu_initiator = enable;

	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    7c0e:	f005 f80f 	bl	cc30 <bt_mesh_beacon_get>
    7c12:	b920      	cbnz	r0, 7c1e <bt_mesh_beacon_ivu_initiator.part.1+0x12>
		k_delayed_work_cancel(&beacon_timer);
    7c14:	4802      	ldr	r0, [pc, #8]	; (7c20 <bt_mesh_beacon_ivu_initiator.part.1+0x14>)
	}
}
    7c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    7c1a:	f011 b869 	b.w	18cf0 <k_delayed_work_cancel>
    7c1e:	bd08      	pop	{r3, pc}
    7c20:	200006b0 	.word	0x200006b0

00007c24 <k_work_submit_to_queue.constprop.4>:
    7c24:	4909      	ldr	r1, [pc, #36]	; (7c4c <k_work_submit_to_queue.constprop.4+0x28>)
    7c26:	f3bf 8f5b 	dmb	ish
    7c2a:	e851 3f00 	ldrex	r3, [r1]
    7c2e:	f043 0201 	orr.w	r2, r3, #1
    7c32:	e841 2000 	strex	r0, r2, [r1]
    7c36:	2800      	cmp	r0, #0
    7c38:	d1f7      	bne.n	7c2a <k_work_submit_to_queue.constprop.4+0x6>
    7c3a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7c3e:	07db      	lsls	r3, r3, #31
    7c40:	d403      	bmi.n	7c4a <k_work_submit_to_queue.constprop.4+0x26>
		k_queue_append(&work_q->queue, work);
    7c42:	3908      	subs	r1, #8
    7c44:	4802      	ldr	r0, [pc, #8]	; (7c50 <k_work_submit_to_queue.constprop.4+0x2c>)
    7c46:	f010 ba90 	b.w	1816a <k_queue_append>
    7c4a:	4770      	bx	lr
    7c4c:	200006b8 	.word	0x200006b8
    7c50:	20001dd8 	.word	0x20001dd8

00007c54 <bt_mesh_beacon_create>:
{
    7c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c56:	460c      	mov	r4, r1
    7c58:	4605      	mov	r5, r0
	u8_t flags = bt_mesh_net_flags(sub);
    7c5a:	f000 fbdb 	bl	8414 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    7c5e:	2101      	movs	r1, #1
	u8_t flags = bt_mesh_net_flags(sub);
    7c60:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    7c62:	4620      	mov	r0, r4
    7c64:	f00f ff9d 	bl	17ba2 <net_buf_simple_add_u8>
	if (sub->kr_flag) {
    7c68:	7fab      	ldrb	r3, [r5, #30]
    7c6a:	b1c3      	cbz	r3, 7c9e <bt_mesh_beacon_create+0x4a>
		keys = &sub->keys[1];
    7c6c:	f105 0689 	add.w	r6, r5, #137	; 0x89
	net_buf_simple_add_u8(buf, flags);
    7c70:	4639      	mov	r1, r7
    7c72:	4620      	mov	r0, r4
    7c74:	f00f ff95 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    7c78:	2208      	movs	r2, #8
    7c7a:	f106 0121 	add.w	r1, r6, #33	; 0x21
    7c7e:	4620      	mov	r0, r4
    7c80:	f00f ff86 	bl	17b90 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    7c84:	4b07      	ldr	r3, [pc, #28]	; (7ca4 <bt_mesh_beacon_create+0x50>)
    7c86:	4620      	mov	r0, r4
    7c88:	6819      	ldr	r1, [r3, #0]
    7c8a:	f00f ffb2 	bl	17bf2 <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    7c8e:	f105 0128 	add.w	r1, r5, #40	; 0x28
    7c92:	4620      	mov	r0, r4
    7c94:	2208      	movs	r2, #8
}
    7c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    7c9a:	f00f bf79 	b.w	17b90 <net_buf_simple_add_mem>
		keys = &sub->keys[0];
    7c9e:	f105 0630 	add.w	r6, r5, #48	; 0x30
    7ca2:	e7e5      	b.n	7c70 <bt_mesh_beacon_create+0x1c>
    7ca4:	20006168 	.word	0x20006168

00007ca8 <beacon_send>:
{
    7ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PROV) && bt_prov_active()) {
    7cac:	f007 fa28 	bl	f100 <bt_prov_active>
    7cb0:	b138      	cbz	r0, 7cc2 <beacon_send+0x1a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7cb2:	f241 3288 	movw	r2, #5000	; 0x1388
    7cb6:	494b      	ldr	r1, [pc, #300]	; (7de4 <beacon_send+0x13c>)
    7cb8:	484b      	ldr	r0, [pc, #300]	; (7de8 <beacon_send+0x140>)
}
    7cba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cbe:	f011 b863 	b.w	18d88 <k_delayed_work_submit_to_queue>
	if (bt_mesh_is_provisioned()) {
    7cc2:	f7ff fe11 	bl	78e8 <bt_mesh_is_provisioned>
    7cc6:	4604      	mov	r4, r0
    7cc8:	2800      	cmp	r0, #0
    7cca:	d063      	beq.n	7d94 <beacon_send+0xec>
	first_half = !first_half;
    7ccc:	4b47      	ldr	r3, [pc, #284]	; (7dec <beacon_send+0x144>)
    7cce:	781a      	ldrb	r2, [r3, #0]
    7cd0:	f082 0201 	eor.w	r2, r2, #1
    7cd4:	701a      	strb	r2, [r3, #0]
	if (first_half) {
    7cd6:	b9d2      	cbnz	r2, 7d0e <beacon_send+0x66>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7cd8:	4b45      	ldr	r3, [pc, #276]	; (7df0 <beacon_send+0x148>)
    7cda:	f8b3 01d0 	ldrh.w	r0, [r3, #464]	; 0x1d0
    7cde:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7ce2:	4288      	cmp	r0, r1
		sub->beacons_last = sub->beacons_cur;
    7ce4:	bf1c      	itt	ne
    7ce6:	f893 11b9 	ldrbne.w	r1, [r3, #441]	; 0x1b9
    7cea:	f883 11b8 	strbne.w	r1, [r3, #440]	; 0x1b8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7cee:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
		sub->beacons_cur = 0;
    7cf2:	bf18      	it	ne
    7cf4:	f883 21b9 	strbne.w	r2, [r3, #441]	; 0x1b9
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7cfc:	4291      	cmp	r1, r2
		sub->beacons_last = sub->beacons_cur;
    7cfe:	bf1f      	itttt	ne
    7d00:	f893 229d 	ldrbne.w	r2, [r3, #669]	; 0x29d
    7d04:	f883 229c 	strbne.w	r2, [r3, #668]	; 0x29c
		sub->beacons_cur = 0;
    7d08:	2200      	movne	r2, #0
    7d0a:	f883 229d 	strbne.w	r2, [r3, #669]	; 0x29d
    7d0e:	f010 fd23 	bl	18758 <_impl_k_uptime_get_32>
    7d12:	4c38      	ldr	r4, [pc, #224]	; (7df4 <beacon_send+0x14c>)
		if (time_diff < K_SECONDS(600) &&
    7d14:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 7df8 <beacon_send+0x150>
		bt_mesh_adv_send(buf, &send_cb, sub);
    7d18:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 7dfc <beacon_send+0x154>
    7d1c:	4606      	mov	r6, r0
    7d1e:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7d22:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    7d26:	42ac      	cmp	r4, r5
    7d28:	d018      	beq.n	7d5c <beacon_send+0xb4>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7d2a:	8ba3      	ldrh	r3, [r4, #28]
    7d2c:	42bb      	cmp	r3, r7
    7d2e:	d029      	beq.n	7d84 <beacon_send+0xdc>
		time_diff = now - sub->beacon_sent;
    7d30:	6822      	ldr	r2, [r4, #0]
    7d32:	1ab2      	subs	r2, r6, r2
		if (time_diff < K_SECONDS(600) &&
    7d34:	4542      	cmp	r2, r8
    7d36:	d809      	bhi.n	7d4c <beacon_send+0xa4>
		    time_diff < BEACON_THRESHOLD(sub)) {
    7d38:	7921      	ldrb	r1, [r4, #4]
    7d3a:	f242 7310 	movw	r3, #10000	; 0x2710
    7d3e:	fb01 3303 	mla	r3, r1, r3, r3
    7d42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    7d46:	3b08      	subs	r3, #8
		if (time_diff < K_SECONDS(600) &&
    7d48:	429a      	cmp	r2, r3
    7d4a:	d31b      	bcc.n	7d84 <beacon_send+0xdc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT_COUNT,
    7d4c:	2300      	movs	r3, #0
    7d4e:	2214      	movs	r2, #20
    7d50:	4619      	mov	r1, r3
    7d52:	2002      	movs	r0, #2
    7d54:	f7ff fefe 	bl	7b54 <bt_mesh_adv_create>
		if (!buf) {
    7d58:	4682      	mov	sl, r0
    7d5a:	b930      	cbnz	r0, 7d6a <beacon_send+0xc2>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    7d5c:	f004 ff68 	bl	cc30 <bt_mesh_beacon_get>
    7d60:	2801      	cmp	r0, #1
    7d62:	d111      	bne.n	7d88 <beacon_send+0xe0>
    7d64:	f242 7210 	movw	r2, #10000	; 0x2710
    7d68:	e7a5      	b.n	7cb6 <beacon_send+0xe>
		bt_mesh_beacon_create(sub, &buf->b);
    7d6a:	f100 0108 	add.w	r1, r0, #8
    7d6e:	4620      	mov	r0, r4
    7d70:	f7ff ff70 	bl	7c54 <bt_mesh_beacon_create>
		bt_mesh_adv_send(buf, &send_cb, sub);
    7d74:	4650      	mov	r0, sl
    7d76:	4622      	mov	r2, r4
    7d78:	4649      	mov	r1, r9
    7d7a:	f7ff fefb 	bl	7b74 <bt_mesh_adv_send>
		net_buf_unref(buf);
    7d7e:	4650      	mov	r0, sl
    7d80:	f00f fee0 	bl	17b44 <net_buf_unref>
    7d84:	34e4      	adds	r4, #228	; 0xe4
    7d86:	e7ce      	b.n	7d26 <beacon_send+0x7e>
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    7d88:	4b19      	ldr	r3, [pc, #100]	; (7df0 <beacon_send+0x148>)
    7d8a:	79db      	ldrb	r3, [r3, #7]
    7d8c:	079b      	lsls	r3, r3, #30
    7d8e:	d4e9      	bmi.n	7d64 <beacon_send+0xbc>
    7d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT_COUNT,
    7d94:	2102      	movs	r1, #2
    7d96:	4603      	mov	r3, r0
    7d98:	2214      	movs	r2, #20
    7d9a:	4608      	mov	r0, r1
    7d9c:	f7ff feda 	bl	7b54 <bt_mesh_adv_create>
	if (!buf) {
    7da0:	4605      	mov	r5, r0
    7da2:	2800      	cmp	r0, #0
    7da4:	d085      	beq.n	7cb2 <beacon_send+0xa>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    7da6:	f100 0608 	add.w	r6, r0, #8
    7daa:	4621      	mov	r1, r4
    7dac:	4630      	mov	r0, r6
    7dae:	f00f fef8 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, bt_mesh_prov_get_uuid(), 16);
    7db2:	f007 f99f 	bl	f0f4 <bt_mesh_prov_get_uuid>
    7db6:	2210      	movs	r2, #16
    7db8:	4601      	mov	r1, r0
    7dba:	4630      	mov	r0, r6
    7dbc:	f00f fee8 	bl	17b90 <net_buf_simple_add_mem>
	memset(net_buf_add(buf, 2 + 4), 0, 2 + 4);
    7dc0:	2106      	movs	r1, #6
    7dc2:	4630      	mov	r0, r6
    7dc4:	f00f fede 	bl	17b84 <net_buf_simple_add>
    7dc8:	4621      	mov	r1, r4
    7dca:	2206      	movs	r2, #6
    7dcc:	f7f8 fc70 	bl	6b0 <memset>
	bt_mesh_adv_send(buf, NULL, NULL);
    7dd0:	4628      	mov	r0, r5
    7dd2:	4622      	mov	r2, r4
    7dd4:	4621      	mov	r1, r4
    7dd6:	f7ff fecd 	bl	7b74 <bt_mesh_adv_send>
	net_buf_unref(buf);
    7dda:	4628      	mov	r0, r5
    7ddc:	f00f feb2 	bl	17b44 <net_buf_unref>
    7de0:	e767      	b.n	7cb2 <beacon_send+0xa>
    7de2:	bf00      	nop
    7de4:	200006b0 	.word	0x200006b0
    7de8:	20001dd8 	.word	0x20001dd8
    7dec:	200006d8 	.word	0x200006d8
    7df0:	20006168 	.word	0x20006168
    7df4:	2000631c 	.word	0x2000631c
    7df8:	000927bf 	.word	0x000927bf
    7dfc:	00019efc 	.word	0x00019efc

00007e00 <bt_mesh_beacon_recv>:
{
    7e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < 1) {
    7e04:	8883      	ldrh	r3, [r0, #4]
{
    7e06:	b085      	sub	sp, #20
    7e08:	4605      	mov	r5, r0
	if (buf->len < 1) {
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	d03b      	beq.n	7e86 <bt_mesh_beacon_recv+0x86>
	type = net_buf_simple_pull_u8(buf);
    7e0e:	f00f ff2c 	bl	17c6a <net_buf_simple_pull_u8>
	switch (type) {
    7e12:	2801      	cmp	r0, #1
    7e14:	d137      	bne.n	7e86 <bt_mesh_beacon_recv+0x86>
	if (buf->len < 21) {
    7e16:	88ab      	ldrh	r3, [r5, #4]
    7e18:	2b14      	cmp	r3, #20
    7e1a:	d934      	bls.n	7e86 <bt_mesh_beacon_recv+0x86>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7e1c:	4e42      	ldr	r6, [pc, #264]	; (7f28 <bt_mesh_beacon_recv+0x128>)
	sub = cache_check(buf->data);
    7e1e:	682c      	ldr	r4, [r5, #0]
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7e20:	f8b6 21d0 	ldrh.w	r2, [r6, #464]	; 0x1d0
    7e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7e28:	429a      	cmp	r2, r3
    7e2a:	d006      	beq.n	7e3a <bt_mesh_beacon_recv+0x3a>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    7e2c:	2215      	movs	r2, #21
    7e2e:	4621      	mov	r1, r4
    7e30:	f506 70dd 	add.w	r0, r6, #442	; 0x1ba
    7e34:	f7f8 fbfb 	bl	62e <memcmp>
    7e38:	b348      	cbz	r0, 7e8e <bt_mesh_beacon_recv+0x8e>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7e3a:	f8b6 22b4 	ldrh.w	r2, [r6, #692]	; 0x2b4
    7e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7e42:	429a      	cmp	r2, r3
    7e44:	d005      	beq.n	7e52 <bt_mesh_beacon_recv+0x52>
		if (!memcmp(sub->beacon_cache, data, 21)) {
    7e46:	2215      	movs	r2, #21
    7e48:	4621      	mov	r1, r4
    7e4a:	4838      	ldr	r0, [pc, #224]	; (7f2c <bt_mesh_beacon_recv+0x12c>)
    7e4c:	f7f8 fbef 	bl	62e <memcmp>
    7e50:	b1e0      	cbz	r0, 7e8c <bt_mesh_beacon_recv+0x8c>
	flags = net_buf_simple_pull_u8(buf);
    7e52:	4628      	mov	r0, r5
	data = buf->data;
    7e54:	f8d5 9000 	ldr.w	r9, [r5]
	flags = net_buf_simple_pull_u8(buf);
    7e58:	f00f ff07 	bl	17c6a <net_buf_simple_pull_u8>
	net_buf_simple_pull(buf, 8);
    7e5c:	2108      	movs	r1, #8
	flags = net_buf_simple_pull_u8(buf);
    7e5e:	4607      	mov	r7, r0
	net_buf_simple_pull(buf, 8);
    7e60:	4628      	mov	r0, r5
	net_id = buf->data;
    7e62:	682c      	ldr	r4, [r5, #0]
	net_buf_simple_pull(buf, 8);
    7e64:	f00f fef9 	bl	17c5a <net_buf_simple_pull>
	iv_index = net_buf_simple_pull_be32(buf);
    7e68:	4628      	mov	r0, r5
    7e6a:	f00f ff19 	bl	17ca0 <net_buf_simple_pull_be32>
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    7e6e:	f10d 030f 	add.w	r3, sp, #15
    7e72:	9300      	str	r3, [sp, #0]
    7e74:	4602      	mov	r2, r0
	iv_index = net_buf_simple_pull_be32(buf);
    7e76:	4680      	mov	r8, r0
	sub = bt_mesh_subnet_find(net_id, flags, iv_index, auth, &new_key);
    7e78:	682b      	ldr	r3, [r5, #0]
    7e7a:	4620      	mov	r0, r4
    7e7c:	4639      	mov	r1, r7
    7e7e:	f000 fdbd 	bl	89fc <bt_mesh_subnet_find>
	if (!sub) {
    7e82:	4604      	mov	r4, r0
    7e84:	b980      	cbnz	r0, 7ea8 <bt_mesh_beacon_recv+0xa8>
}
    7e86:	b005      	add	sp, #20
    7e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!memcmp(sub->beacon_cache, data, 21)) {
    7e8c:	20e4      	movs	r0, #228	; 0xe4
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    7e8e:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    7e92:	1834      	adds	r4, r6, r0
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    7e94:	f004 fecc 	bl	cc30 <bt_mesh_beacon_get>
    7e98:	2801      	cmp	r0, #1
    7e9a:	d1f4      	bne.n	7e86 <bt_mesh_beacon_recv+0x86>
	    sub->beacons_cur < 0xff) {
    7e9c:	7963      	ldrb	r3, [r4, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    7e9e:	2bff      	cmp	r3, #255	; 0xff
    7ea0:	d0f1      	beq.n	7e86 <bt_mesh_beacon_recv+0x86>
		sub->beacons_cur++;
    7ea2:	3301      	adds	r3, #1
    7ea4:	7163      	strb	r3, [r4, #5]
    7ea6:	e7ee      	b.n	7e86 <bt_mesh_beacon_recv+0x86>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !new_key) {
    7ea8:	7fc3      	ldrb	r3, [r0, #31]
    7eaa:	2b02      	cmp	r3, #2
    7eac:	d103      	bne.n	7eb6 <bt_mesh_beacon_recv+0xb6>
    7eae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d0e7      	beq.n	7e86 <bt_mesh_beacon_recv+0x86>
	memcpy(sub->beacon_cache, data, 21);
    7eb6:	2215      	movs	r2, #21
    7eb8:	4649      	mov	r1, r9
    7eba:	1da0      	adds	r0, r4, #6
    7ebc:	f7f8 fbcc 	bl	658 <memcpy>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    7ec0:	2000      	movs	r0, #0
    7ec2:	f000 f931 	bl	8128 <bt_mesh_subnet_get>
    7ec6:	b110      	cbz	r0, 7ece <bt_mesh_beacon_recv+0xce>
    7ec8:	8ba3      	ldrh	r3, [r4, #28]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d1e2      	bne.n	7e94 <bt_mesh_beacon_recv+0x94>
	if (bt_mesh.ivu_initiator &&
    7ece:	79f3      	ldrb	r3, [r6, #7]
    7ed0:	f013 0f02 	tst.w	r3, #2
    7ed4:	ea4f 0557 	mov.w	r5, r7, lsr #1
    7ed8:	d00a      	beq.n	7ef0 <bt_mesh_beacon_recv+0xf0>
	    bt_mesh.iv_update == BT_MESH_IV_UPDATE(flags)) {
    7eda:	f003 0201 	and.w	r2, r3, #1
    7ede:	f005 0101 	and.w	r1, r5, #1
	if (bt_mesh.ivu_initiator &&
    7ee2:	428a      	cmp	r2, r1
    7ee4:	d104      	bne.n	7ef0 <bt_mesh_beacon_recv+0xf0>
	bt_mesh.ivu_initiator = enable;
    7ee6:	f36f 0341 	bfc	r3, #1, #1
    7eea:	71f3      	strb	r3, [r6, #7]
    7eec:	f7ff fe8e 	bl	7c0c <bt_mesh_beacon_ivu_initiator.part.1>
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    7ef0:	f005 0101 	and.w	r1, r5, #1
    7ef4:	4640      	mov	r0, r8
    7ef6:	f000 fb8b 	bl	8610 <bt_mesh_net_iv_update>
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    7efa:	f89d 200f 	ldrb.w	r2, [sp, #15]
	iv_change = bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(flags));
    7efe:	4605      	mov	r5, r0
	kr_change = bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(flags), new_key);
    7f00:	f007 0101 	and.w	r1, r7, #1
    7f04:	4620      	mov	r0, r4
    7f06:	f000 fb31 	bl	856c <bt_mesh_kr_update>
	if (kr_change) {
    7f0a:	b148      	cbz	r0, 7f20 <bt_mesh_beacon_recv+0x120>
		bt_mesh_net_beacon_update(sub);
    7f0c:	4620      	mov	r0, r4
    7f0e:	f000 fa8d 	bl	842c <bt_mesh_net_beacon_update>
	if (iv_change) {
    7f12:	b11d      	cbz	r5, 7f1c <bt_mesh_beacon_recv+0x11c>
		bt_mesh_net_sec_update(NULL);
    7f14:	2000      	movs	r0, #0
		bt_mesh_net_sec_update(sub);
    7f16:	f000 fb67 	bl	85e8 <bt_mesh_net_sec_update>
    7f1a:	e7bb      	b.n	7e94 <bt_mesh_beacon_recv+0x94>
    7f1c:	4620      	mov	r0, r4
    7f1e:	e7fa      	b.n	7f16 <bt_mesh_beacon_recv+0x116>
	if (iv_change) {
    7f20:	2d00      	cmp	r5, #0
    7f22:	d0b7      	beq.n	7e94 <bt_mesh_beacon_recv+0x94>
    7f24:	e7f6      	b.n	7f14 <bt_mesh_beacon_recv+0x114>
    7f26:	bf00      	nop
    7f28:	20006168 	.word	0x20006168
    7f2c:	20006406 	.word	0x20006406

00007f30 <bt_mesh_beacon_init>:
	k_delayed_work_init(&beacon_timer, beacon_send);
    7f30:	4901      	ldr	r1, [pc, #4]	; (7f38 <bt_mesh_beacon_init+0x8>)
    7f32:	4802      	ldr	r0, [pc, #8]	; (7f3c <bt_mesh_beacon_init+0xc>)
    7f34:	f010 bebe 	b.w	18cb4 <k_delayed_work_init>
    7f38:	00007ca9 	.word	0x00007ca9
    7f3c:	200006b0 	.word	0x200006b0

00007f40 <bt_mesh_beacon_ivu_initiator>:
	bt_mesh.ivu_initiator = enable;
    7f40:	4b04      	ldr	r3, [pc, #16]	; (7f54 <bt_mesh_beacon_ivu_initiator+0x14>)
    7f42:	79da      	ldrb	r2, [r3, #7]
    7f44:	f360 0241 	bfi	r2, r0, #1, #1
    7f48:	71da      	strb	r2, [r3, #7]
	if (enable) {
    7f4a:	b108      	cbz	r0, 7f50 <bt_mesh_beacon_ivu_initiator+0x10>
	k_work_submit_to_queue(&k_sys_work_q, work);
    7f4c:	f7ff be6a 	b.w	7c24 <k_work_submit_to_queue.constprop.4>
    7f50:	f7ff be5c 	b.w	7c0c <bt_mesh_beacon_ivu_initiator.part.1>
    7f54:	20006168 	.word	0x20006168

00007f58 <bt_mesh_beacon_enable>:

void bt_mesh_beacon_enable(void)
{
    7f58:	b510      	push	{r4, lr}
	int i;

	if (!bt_mesh_is_provisioned()) {
    7f5a:	f7ff fcc5 	bl	78e8 <bt_mesh_is_provisioned>
    7f5e:	b1e8      	cbz	r0, 7f9c <bt_mesh_beacon_enable+0x44>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7f60:	4c10      	ldr	r4, [pc, #64]	; (7fa4 <bt_mesh_beacon_enable+0x4c>)
    7f62:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
    7f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7f6a:	429a      	cmp	r2, r3
    7f6c:	d008      	beq.n	7f80 <bt_mesh_beacon_enable+0x28>
			continue;
		}

		sub->beacons_last = 0;
    7f6e:	2300      	movs	r3, #0
		sub->beacons_cur = 0;

		bt_mesh_net_beacon_update(sub);
    7f70:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
		sub->beacons_last = 0;
    7f74:	f884 31b8 	strb.w	r3, [r4, #440]	; 0x1b8
		sub->beacons_cur = 0;
    7f78:	f884 31b9 	strb.w	r3, [r4, #441]	; 0x1b9
		bt_mesh_net_beacon_update(sub);
    7f7c:	f000 fa56 	bl	842c <bt_mesh_net_beacon_update>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    7f80:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
    7f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7f88:	429a      	cmp	r2, r3
    7f8a:	d007      	beq.n	7f9c <bt_mesh_beacon_enable+0x44>
		sub->beacons_last = 0;
    7f8c:	2300      	movs	r3, #0
		bt_mesh_net_beacon_update(sub);
    7f8e:	4806      	ldr	r0, [pc, #24]	; (7fa8 <bt_mesh_beacon_enable+0x50>)
		sub->beacons_last = 0;
    7f90:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
		sub->beacons_cur = 0;
    7f94:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
		bt_mesh_net_beacon_update(sub);
    7f98:	f000 fa48 	bl	842c <bt_mesh_net_beacon_update>
	}

	k_work_submit(&beacon_timer.work);
}
    7f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa0:	f7ff be40 	b.w	7c24 <k_work_submit_to_queue.constprop.4>
    7fa4:	20006168 	.word	0x20006168
    7fa8:	20006400 	.word	0x20006400

00007fac <bt_mesh_beacon_disable>:

void bt_mesh_beacon_disable(void)
{
	if (!bt_mesh.ivu_initiator) {
    7fac:	4b03      	ldr	r3, [pc, #12]	; (7fbc <bt_mesh_beacon_disable+0x10>)
    7fae:	79db      	ldrb	r3, [r3, #7]
    7fb0:	079b      	lsls	r3, r3, #30
    7fb2:	d402      	bmi.n	7fba <bt_mesh_beacon_disable+0xe>
		k_delayed_work_cancel(&beacon_timer);
    7fb4:	4802      	ldr	r0, [pc, #8]	; (7fc0 <bt_mesh_beacon_disable+0x14>)
    7fb6:	f010 be9b 	b.w	18cf0 <k_delayed_work_cancel>
    7fba:	4770      	bx	lr
    7fbc:	20006168 	.word	0x20006168
    7fc0:	200006b0 	.word	0x200006b0

00007fc4 <auth_match>:
}

static bool auth_match(struct bt_mesh_subnet_keys *keys,
		       const u8_t net_id[8], u8_t flags,
		       u32_t iv_index, const u8_t auth[8])
{
    7fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7fc8:	4605      	mov	r5, r0
	u8_t net_auth[8];

	if (memcmp(net_id, keys->net_id, 8)) {
    7fca:	f105 0621 	add.w	r6, r5, #33	; 0x21
{
    7fce:	4608      	mov	r0, r1
    7fd0:	4617      	mov	r7, r2
	if (memcmp(net_id, keys->net_id, 8)) {
    7fd2:	4631      	mov	r1, r6
    7fd4:	2208      	movs	r2, #8
{
    7fd6:	4698      	mov	r8, r3
	if (memcmp(net_id, keys->net_id, 8)) {
    7fd8:	f7f8 fb29 	bl	62e <memcmp>
    7fdc:	b998      	cbnz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
		return false;
	}

	bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id, iv_index,
    7fde:	ac02      	add	r4, sp, #8
    7fe0:	4643      	mov	r3, r8
    7fe2:	4632      	mov	r2, r6
    7fe4:	4639      	mov	r1, r7
    7fe6:	9400      	str	r4, [sp, #0]
    7fe8:	f105 0049 	add.w	r0, r5, #73	; 0x49
    7fec:	f002 fd0f 	bl	aa0e <bt_mesh_beacon_auth>
			    net_auth);

	if (memcmp(auth, net_auth, 8)) {
    7ff0:	2208      	movs	r2, #8
    7ff2:	4621      	mov	r1, r4
    7ff4:	980a      	ldr	r0, [sp, #40]	; 0x28
    7ff6:	f7f8 fb1a 	bl	62e <memcmp>
    7ffa:	fab0 f080 	clz	r0, r0
    7ffe:	0940      	lsrs	r0, r0, #5
			bt_hex(auth, 8), bt_hex(net_auth, 8));
		return false;
	}

	return true;
}
    8000:	b004      	add	sp, #16
    8002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    8006:	2000      	movs	r0, #0
    8008:	e7fa      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	...

0000800c <net_decrypt.isra.2>:
	}

	return NULL;
}

static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    800c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		       struct net_buf_simple *buf)
{
	BT_DBG("NID 0x%02x net_idx 0x%04x", NID(data), sub->net_idx);
	BT_DBG("IVI %u net->iv_index 0x%08x", IVI(data), bt_mesh.iv_index);

	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    8010:	4d41      	ldr	r5, [pc, #260]	; (8118 <net_decrypt.isra.2+0x10c>)
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    8012:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    8014:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    8016:	4689      	mov	r9, r1
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    8018:	6829      	ldr	r1, [r5, #0]
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    801a:	469a      	mov	sl, r3
	rx->old_iv = (IVI(data) != (bt_mesh.iv_index & 0x01));
    801c:	7813      	ldrb	r3, [r2, #0]
    801e:	f001 0101 	and.w	r1, r1, #1
    8022:	ea81 11d3 	eor.w	r1, r1, r3, lsr #7
    8026:	7cbb      	ldrb	r3, [r7, #18]
    8028:	f361 0300 	bfi	r3, r1, #0, #1
    802c:	74bb      	strb	r3, [r7, #18]
	buf->data = buf->__buf + reserve_head;
    802e:	f104 0308 	add.w	r3, r4, #8
    8032:	6023      	str	r3, [r4, #0]
	buf->len = 0;
    8034:	2300      	movs	r3, #0
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    8036:	4690      	mov	r8, r2
    8038:	80a3      	strh	r3, [r4, #4]

	net_buf_simple_init(buf, 0);
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    803a:	4651      	mov	r1, sl
static int net_decrypt(struct bt_mesh_subnet *sub, const u8_t *enc,
    803c:	4606      	mov	r6, r0
	memcpy(net_buf_simple_add(buf, data_len), data, data_len);
    803e:	4620      	mov	r0, r4
    8040:	f00f fda0 	bl	17b84 <net_buf_simple_add>
    8044:	4652      	mov	r2, sl
    8046:	4641      	mov	r1, r8
    8048:	f7f8 fb06 	bl	658 <memcpy>

	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    804c:	7cbb      	ldrb	r3, [r7, #18]
    804e:	6829      	ldr	r1, [r5, #0]
    8050:	6820      	ldr	r0, [r4, #0]
    8052:	f003 0301 	and.w	r3, r3, #1
    8056:	464a      	mov	r2, r9
    8058:	1ac9      	subs	r1, r1, r3
    805a:	f002 fb0f 	bl	a67c <bt_mesh_net_obfuscate>
    805e:	2800      	cmp	r0, #0
    8060:	d150      	bne.n	8104 <net_decrypt.isra.2+0xf8>
		return -ENOENT;
	}

	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(rx, buf)) {
    8062:	7cbb      	ldrb	r3, [r7, #18]
    8064:	f013 0830 	ands.w	r8, r3, #48	; 0x30
    8068:	d130      	bne.n	80cc <net_decrypt.isra.2+0xc0>
    806a:	6821      	ldr	r1, [r4, #0]
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
    806c:	682a      	ldr	r2, [r5, #0]
    806e:	f891 9002 	ldrb.w	r9, [r1, #2]
    8072:	f003 0301 	and.w	r3, r3, #1
    8076:	1ad3      	subs	r3, r2, r3
	memcpy(&hash2, &pdu->data[3], 4);
    8078:	2204      	movs	r2, #4
    807a:	3103      	adds	r1, #3
    807c:	eb0d 0002 	add.w	r0, sp, r2
	hash1 = (BT_MESH_NET_IVI_RX(rx) << 8) | pdu->data[2];
    8080:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
	memcpy(&hash2, &pdu->data[3], 4);
    8084:	f7f8 fae8 	bl	658 <memcpy>
	return (u64_t)hash1 << 32 | (u64_t)hash2;
    8088:	9b01      	ldr	r3, [sp, #4]
    808a:	f8df e094 	ldr.w	lr, [pc, #148]	; 8120 <net_decrypt.isra.2+0x114>
    808e:	4640      	mov	r0, r8
    8090:	4649      	mov	r1, r9
    8092:	4318      	orrs	r0, r3
    8094:	f10e 0c50 	add.w	ip, lr, #80	; 0x50
		if (msg_cache[i] == hash) {
    8098:	e9fe 2302 	ldrd	r2, r3, [lr, #8]!
    809c:	428b      	cmp	r3, r1
    809e:	bf08      	it	eq
    80a0:	4282      	cmpeq	r2, r0
    80a2:	d032      	beq.n	810a <net_decrypt.isra.2+0xfe>
	for (i = 0; i < ARRAY_SIZE(msg_cache); i++) {
    80a4:	45f4      	cmp	ip, lr
    80a6:	d1f7      	bne.n	8098 <net_decrypt.isra.2+0x8c>
	msg_cache[msg_cache_next++] = hash;
    80a8:	f8df e078 	ldr.w	lr, [pc, #120]	; 8124 <net_decrypt.isra.2+0x118>
    80ac:	4a1b      	ldr	r2, [pc, #108]	; (811c <net_decrypt.isra.2+0x110>)
    80ae:	f8be 3000 	ldrh.w	r3, [lr]
    80b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    80b6:	3301      	adds	r3, #1
    80b8:	e9c2 0100 	strd	r0, r1, [r2]
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    80bc:	b29b      	uxth	r3, r3
    80be:	210a      	movs	r1, #10
    80c0:	fbb3 f2f1 	udiv	r2, r3, r1
    80c4:	fb01 3312 	mls	r3, r1, r2, r3
    80c8:	f8ae 3000 	strh.w	r3, [lr]
		BT_WARN("Duplicate found in Network Message Cache");
		return -EALREADY;
	}

	rx->ctx.addr = SRC(buf->data);
    80cc:	6822      	ldr	r2, [r4, #0]
	return ((u16_t)src[0] << 8) | src[1];
    80ce:	7951      	ldrb	r1, [r2, #5]
    80d0:	7993      	ldrb	r3, [r2, #6]
    80d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    80d6:	b21b      	sxth	r3, r3
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    80d8:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(buf->data);
    80da:	813b      	strh	r3, [r7, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    80dc:	dd18      	ble.n	8110 <net_decrypt.isra.2+0x104>
		return -EINVAL;
	}

	BT_DBG("src 0x%04x", rx->ctx.addr);

	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    80de:	7cba      	ldrb	r2, [r7, #18]
	    rx->net_if == BT_MESH_NET_IF_PROXY_CFG) {
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    80e0:	6829      	ldr	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) &&
    80e2:	f002 0330 	and.w	r3, r2, #48	; 0x30
    80e6:	2b30      	cmp	r3, #48	; 0x30
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    80e8:	f002 0201 	and.w	r2, r2, #1
					   true);
	}

	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    80ec:	eba1 0202 	sub.w	r2, r1, r2
		return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx),
    80f0:	bf0c      	ite	eq
    80f2:	2301      	moveq	r3, #1
	return bt_mesh_net_decrypt(enc, buf, BT_MESH_NET_IVI_RX(rx), false);
    80f4:	2300      	movne	r3, #0
    80f6:	4621      	mov	r1, r4
    80f8:	4630      	mov	r0, r6
    80fa:	f002 fb32 	bl	a762 <bt_mesh_net_decrypt>
}
    80fe:	b002      	add	sp, #8
    8100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOENT;
    8104:	f06f 0001 	mvn.w	r0, #1
    8108:	e7f9      	b.n	80fe <net_decrypt.isra.2+0xf2>
		return -EALREADY;
    810a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    810e:	e7f6      	b.n	80fe <net_decrypt.isra.2+0xf2>
		return -EINVAL;
    8110:	f06f 0015 	mvn.w	r0, #21
    8114:	e7f3      	b.n	80fe <net_decrypt.isra.2+0xf2>
    8116:	bf00      	nop
    8118:	20006168 	.word	0x20006168
    811c:	20000788 	.word	0x20000788
    8120:	20000780 	.word	0x20000780
    8124:	200007d8 	.word	0x200007d8

00008128 <bt_mesh_subnet_get>:
	if (net_idx == BT_MESH_KEY_ANY) {
    8128:	f64f 73ff 	movw	r3, #65535	; 0xffff
    812c:	4298      	cmp	r0, r3
    812e:	d011      	beq.n	8154 <bt_mesh_subnet_get+0x2c>
		if (bt_mesh.sub[i].net_idx == net_idx) {
    8130:	4b0a      	ldr	r3, [pc, #40]	; (815c <bt_mesh_subnet_get+0x34>)
    8132:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
    8136:	4282      	cmp	r2, r0
    8138:	d00a      	beq.n	8150 <bt_mesh_subnet_get+0x28>
    813a:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
    813e:	4282      	cmp	r2, r0
    8140:	d10a      	bne.n	8158 <bt_mesh_subnet_get+0x30>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    8142:	2001      	movs	r0, #1
			return &bt_mesh.sub[i];
    8144:	22e4      	movs	r2, #228	; 0xe4
    8146:	fb02 3000 	mla	r0, r2, r0, r3
    814a:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
    814e:	4770      	bx	lr
		if (bt_mesh.sub[i].net_idx == net_idx) {
    8150:	2000      	movs	r0, #0
    8152:	e7f7      	b.n	8144 <bt_mesh_subnet_get+0x1c>
		return &bt_mesh.sub[0];
    8154:	4802      	ldr	r0, [pc, #8]	; (8160 <bt_mesh_subnet_get+0x38>)
    8156:	4770      	bx	lr
	return NULL;
    8158:	2000      	movs	r0, #0
}
    815a:	4770      	bx	lr
    815c:	20006168 	.word	0x20006168
    8160:	2000631c 	.word	0x2000631c

00008164 <bt_mesh_net_keys_create>:
{
    8164:	b530      	push	{r4, r5, lr}
    8166:	b085      	sub	sp, #20
	u8_t p[] = { 0 };
    8168:	2300      	movs	r3, #0
    816a:	f88d 300c 	strb.w	r3, [sp, #12]
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    816e:	f100 0339 	add.w	r3, r0, #57	; 0x39
{
    8172:	460d      	mov	r5, r1
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    8174:	9301      	str	r3, [sp, #4]
    8176:	f100 0311 	add.w	r3, r0, #17
{
    817a:	4604      	mov	r4, r0
	err = bt_mesh_k2(key, p, sizeof(p), &nid, keys->enc, keys->privacy);
    817c:	9300      	str	r3, [sp, #0]
    817e:	2201      	movs	r2, #1
    8180:	f10d 030f 	add.w	r3, sp, #15
    8184:	a903      	add	r1, sp, #12
    8186:	4628      	mov	r0, r5
    8188:	f002 f9b4 	bl	a4f4 <bt_mesh_k2>
	if (err) {
    818c:	b9d0      	cbnz	r0, 81c4 <bt_mesh_net_keys_create+0x60>
	memcpy(keys->net, key, 16);
    818e:	4629      	mov	r1, r5
    8190:	2210      	movs	r2, #16
    8192:	4620      	mov	r0, r4
    8194:	f7f8 fa60 	bl	658 <memcpy>
	keys->nid = nid;
    8198:	f89d 300f 	ldrb.w	r3, [sp, #15]
    819c:	7423      	strb	r3, [r4, #16]
	err = bt_mesh_k3(key, keys->net_id);
    819e:	f104 0121 	add.w	r1, r4, #33	; 0x21
    81a2:	4628      	mov	r0, r5
    81a4:	f002 f9fe 	bl	a5a4 <bt_mesh_k3>
	if (err) {
    81a8:	b960      	cbnz	r0, 81c4 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_identity_key(const u8_t net_key[16],
				       u8_t identity_key[16])
{
	return bt_mesh_id128(net_key, "nkik", identity_key);
    81aa:	f104 0229 	add.w	r2, r4, #41	; 0x29
    81ae:	4906      	ldr	r1, [pc, #24]	; (81c8 <bt_mesh_net_keys_create+0x64>)
    81b0:	4628      	mov	r0, r5
    81b2:	f002 fa4d 	bl	a650 <bt_mesh_id128>
	if (err) {
    81b6:	b928      	cbnz	r0, 81c4 <bt_mesh_net_keys_create+0x60>
}

static inline int bt_mesh_beacon_key(const u8_t net_key[16],
				     u8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    81b8:	f104 0249 	add.w	r2, r4, #73	; 0x49
    81bc:	4903      	ldr	r1, [pc, #12]	; (81cc <bt_mesh_net_keys_create+0x68>)
    81be:	4628      	mov	r0, r5
    81c0:	f002 fa46 	bl	a650 <bt_mesh_id128>
}
    81c4:	b005      	add	sp, #20
    81c6:	bd30      	pop	{r4, r5, pc}
    81c8:	00019f04 	.word	0x00019f04
    81cc:	00019f09 	.word	0x00019f09

000081d0 <friend_cred_set>:
{
    81d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81d2:	b087      	sub	sp, #28
    81d4:	4605      	mov	r5, r0
    81d6:	4616      	mov	r6, r2
	lpn_addr = cred->addr;
    81d8:	8847      	ldrh	r7, [r0, #2]
{
    81da:	460c      	mov	r4, r1
	frnd_addr = bt_mesh_primary_addr();
    81dc:	f002 fd12 	bl	ac04 <bt_mesh_primary_addr>
	p[0] = 0x01;
    81e0:	2301      	movs	r3, #1
    81e2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst[0] = val >> 8;
    81e6:	0a3b      	lsrs	r3, r7, #8
    81e8:	f88d 300d 	strb.w	r3, [sp, #13]
    81ec:	0a03      	lsrs	r3, r0, #8
    81ee:	f88d 300f 	strb.w	r3, [sp, #15]
	sys_put_be16(cred->lpn_counter, p + 5);
    81f2:	88ab      	ldrh	r3, [r5, #4]
	dst[1] = val;
    81f4:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
    81f8:	0a1a      	lsrs	r2, r3, #8
	sys_put_be16(cred->frnd_counter, p + 7);
    81fa:	88eb      	ldrh	r3, [r5, #6]
    81fc:	f88d 2011 	strb.w	r2, [sp, #17]
    8200:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    8204:	0a1a      	lsrs	r2, r3, #8
    8206:	f88d 2013 	strb.w	r2, [sp, #19]
	dst[1] = val;
    820a:	f88d 3014 	strb.w	r3, [sp, #20]
			 cred->cred[idx].enc, cred->cred[idx].privacy);
    820e:	f101 0219 	add.w	r2, r1, #25
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
    8212:	f101 0308 	add.w	r3, r1, #8
			 cred->cred[idx].enc, cred->cred[idx].privacy);
    8216:	3109      	adds	r1, #9
    8218:	442a      	add	r2, r5
    821a:	4429      	add	r1, r5
    821c:	f88d 0010 	strb.w	r0, [sp, #16]
	err = bt_mesh_k2(net_key, p, sizeof(p), &cred->cred[idx].nid,
    8220:	9201      	str	r2, [sp, #4]
    8222:	9100      	str	r1, [sp, #0]
    8224:	442b      	add	r3, r5
    8226:	2209      	movs	r2, #9
    8228:	a903      	add	r1, sp, #12
    822a:	4630      	mov	r0, r6
    822c:	f88d 700e 	strb.w	r7, [sp, #14]
    8230:	f002 f960 	bl	a4f4 <bt_mesh_k2>
}
    8234:	b007      	add	sp, #28
    8236:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008238 <friend_cred_refresh>:
{
    8238:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    823a:	4c0f      	ldr	r4, [pc, #60]	; (8278 <friend_cred_refresh+0x40>)
    823c:	8863      	ldrh	r3, [r4, #2]
{
    823e:	4605      	mov	r5, r0
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    8240:	b14b      	cbz	r3, 8256 <friend_cred_refresh+0x1e>
    8242:	8823      	ldrh	r3, [r4, #0]
    8244:	4283      	cmp	r3, r0
    8246:	d106      	bne.n	8256 <friend_cred_refresh+0x1e>
			memcpy(&cred->cred[0], &cred->cred[1],
    8248:	2221      	movs	r2, #33	; 0x21
    824a:	f104 0129 	add.w	r1, r4, #41	; 0x29
    824e:	f104 0008 	add.w	r0, r4, #8
    8252:	f7f8 fa01 	bl	658 <memcpy>
		if (cred->addr != BT_MESH_ADDR_UNASSIGNED &&
    8256:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    825a:	b15b      	cbz	r3, 8274 <friend_cred_refresh+0x3c>
    825c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    8260:	42ab      	cmp	r3, r5
    8262:	d107      	bne.n	8274 <friend_cred_refresh+0x3c>
			memcpy(&cred->cred[0], &cred->cred[1],
    8264:	4905      	ldr	r1, [pc, #20]	; (827c <friend_cred_refresh+0x44>)
    8266:	2221      	movs	r2, #33	; 0x21
    8268:	f1a1 0021 	sub.w	r0, r1, #33	; 0x21
}
    826c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(&cred->cred[0], &cred->cred[1],
    8270:	f7f8 b9f2 	b.w	658 <memcpy>
    8274:	bd38      	pop	{r3, r4, r5, pc}
    8276:	bf00      	nop
    8278:	200006f0 	.word	0x200006f0
    827c:	20000763 	.word	0x20000763

00008280 <friend_cred_update>:
{
    8280:	b538      	push	{r3, r4, r5, lr}
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    8282:	4c10      	ldr	r4, [pc, #64]	; (82c4 <friend_cred_update+0x44>)
    8284:	8863      	ldrh	r3, [r4, #2]
{
    8286:	4605      	mov	r5, r0
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    8288:	b153      	cbz	r3, 82a0 <friend_cred_update+0x20>
    828a:	8822      	ldrh	r2, [r4, #0]
    828c:	8b83      	ldrh	r3, [r0, #28]
    828e:	429a      	cmp	r2, r3
    8290:	d106      	bne.n	82a0 <friend_cred_update+0x20>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    8292:	f100 0289 	add.w	r2, r0, #137	; 0x89
    8296:	2101      	movs	r1, #1
    8298:	4620      	mov	r0, r4
    829a:	f7ff ff99 	bl	81d0 <friend_cred_set>
		if (err) {
    829e:	b978      	cbnz	r0, 82c0 <friend_cred_update+0x40>
		if (cred->addr == BT_MESH_ADDR_UNASSIGNED ||
    82a0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    82a4:	b15b      	cbz	r3, 82be <friend_cred_update+0x3e>
    82a6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    82aa:	8bab      	ldrh	r3, [r5, #28]
    82ac:	429a      	cmp	r2, r3
    82ae:	d106      	bne.n	82be <friend_cred_update+0x3e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    82b0:	f105 0289 	add.w	r2, r5, #137	; 0x89
    82b4:	2101      	movs	r1, #1
    82b6:	4804      	ldr	r0, [pc, #16]	; (82c8 <friend_cred_update+0x48>)
    82b8:	f7ff ff8a 	bl	81d0 <friend_cred_set>
		if (err) {
    82bc:	b900      	cbnz	r0, 82c0 <friend_cred_update+0x40>
	return 0;
    82be:	2000      	movs	r0, #0
}
    82c0:	bd38      	pop	{r3, r4, r5, pc}
    82c2:	bf00      	nop
    82c4:	200006f0 	.word	0x200006f0
    82c8:	2000073a 	.word	0x2000073a

000082cc <friend_cred_clear>:
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
    82cc:	2100      	movs	r1, #0
	cred->net_idx = BT_MESH_KEY_UNUSED;
    82ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    82d2:	8003      	strh	r3, [r0, #0]
	cred->addr = BT_MESH_ADDR_UNASSIGNED;
    82d4:	8041      	strh	r1, [r0, #2]
	cred->lpn_counter = 0;
    82d6:	8081      	strh	r1, [r0, #4]
	cred->frnd_counter = 0;
    82d8:	80c1      	strh	r1, [r0, #6]
	memset(cred->cred, 0, sizeof(cred->cred));
    82da:	2242      	movs	r2, #66	; 0x42
    82dc:	3008      	adds	r0, #8
    82de:	f7f8 b9e7 	b.w	6b0 <memset>
	...

000082e4 <friend_cred_create>:
{
    82e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82e6:	4605      	mov	r5, r0
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    82e8:	481b      	ldr	r0, [pc, #108]	; (8358 <friend_cred_create+0x74>)
    82ea:	8844      	ldrh	r4, [r0, #2]
    82ec:	b194      	cbz	r4, 8314 <friend_cred_create+0x30>
    82ee:	42a1      	cmp	r1, r4
    82f0:	d103      	bne.n	82fa <friend_cred_create+0x16>
		    (friend_cred[i].addr == addr &&
    82f2:	8806      	ldrh	r6, [r0, #0]
    82f4:	8bac      	ldrh	r4, [r5, #28]
    82f6:	42a6      	cmp	r6, r4
    82f8:	d00b      	beq.n	8312 <friend_cred_create+0x2e>
		if ((friend_cred[i].addr == BT_MESH_ADDR_UNASSIGNED) ||
    82fa:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    82fe:	b1e4      	cbz	r4, 833a <friend_cred_create+0x56>
    8300:	42a1      	cmp	r1, r4
    8302:	d104      	bne.n	830e <friend_cred_create+0x2a>
		    (friend_cred[i].addr == addr &&
    8304:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
    8308:	8bac      	ldrh	r4, [r5, #28]
    830a:	42a6      	cmp	r6, r4
    830c:	d015      	beq.n	833a <friend_cred_create+0x56>
		return NULL;
    830e:	2400      	movs	r4, #0
    8310:	e01f      	b.n	8352 <friend_cred_create+0x6e>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    8312:	2400      	movs	r4, #0
			cred = &friend_cred[i];
    8314:	264a      	movs	r6, #74	; 0x4a
    8316:	4366      	muls	r6, r4
    8318:	1984      	adds	r4, r0, r6
	cred->net_idx = sub->net_idx;
    831a:	8baf      	ldrh	r7, [r5, #28]
    831c:	5387      	strh	r7, [r0, r6]
	cred->addr = addr;
    831e:	8061      	strh	r1, [r4, #2]
	cred->lpn_counter = lpn_counter;
    8320:	80a2      	strh	r2, [r4, #4]
	cred->frnd_counter = frnd_counter;
    8322:	80e3      	strh	r3, [r4, #6]
	err = friend_cred_set(cred, 0, sub->keys[0].net);
    8324:	f105 0230 	add.w	r2, r5, #48	; 0x30
    8328:	2100      	movs	r1, #0
    832a:	4620      	mov	r0, r4
    832c:	f7ff ff50 	bl	81d0 <friend_cred_set>
	if (err) {
    8330:	b128      	cbz	r0, 833e <friend_cred_create+0x5a>
			friend_cred_clear(cred);
    8332:	4620      	mov	r0, r4
    8334:	f7ff ffca 	bl	82cc <friend_cred_clear>
    8338:	e7e9      	b.n	830e <friend_cred_create+0x2a>
	for (cred = NULL, i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    833a:	2401      	movs	r4, #1
    833c:	e7ea      	b.n	8314 <friend_cred_create+0x30>
	if (sub->kr_flag) {
    833e:	7fab      	ldrb	r3, [r5, #30]
    8340:	b13b      	cbz	r3, 8352 <friend_cred_create+0x6e>
		err = friend_cred_set(cred, 1, sub->keys[1].net);
    8342:	f105 0289 	add.w	r2, r5, #137	; 0x89
    8346:	2101      	movs	r1, #1
    8348:	4620      	mov	r0, r4
    834a:	f7ff ff41 	bl	81d0 <friend_cred_set>
		if (err) {
    834e:	2800      	cmp	r0, #0
    8350:	d1ef      	bne.n	8332 <friend_cred_create+0x4e>
}
    8352:	4620      	mov	r0, r4
    8354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8356:	bf00      	nop
    8358:	200006f0 	.word	0x200006f0

0000835c <friend_cred_del>:
		if (cred->addr == addr && cred->net_idx == net_idx) {
    835c:	4b0d      	ldr	r3, [pc, #52]	; (8394 <friend_cred_del+0x38>)
    835e:	885a      	ldrh	r2, [r3, #2]
    8360:	428a      	cmp	r2, r1
{
    8362:	b510      	push	{r4, lr}
    8364:	461a      	mov	r2, r3
		if (cred->addr == addr && cred->net_idx == net_idx) {
    8366:	d102      	bne.n	836e <friend_cred_del+0x12>
    8368:	881c      	ldrh	r4, [r3, #0]
    836a:	4284      	cmp	r4, r0
    836c:	d00c      	beq.n	8388 <friend_cred_del+0x2c>
    836e:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    8372:	428b      	cmp	r3, r1
    8374:	d10a      	bne.n	838c <friend_cred_del+0x30>
    8376:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
    837a:	4283      	cmp	r3, r0
    837c:	d106      	bne.n	838c <friend_cred_del+0x30>
		struct friend_cred *cred = &friend_cred[i];
    837e:	4806      	ldr	r0, [pc, #24]	; (8398 <friend_cred_del+0x3c>)
			friend_cred_clear(cred);
    8380:	f7ff ffa4 	bl	82cc <friend_cred_clear>
			return 0;
    8384:	2000      	movs	r0, #0
    8386:	bd10      	pop	{r4, pc}
		struct friend_cred *cred = &friend_cred[i];
    8388:	4618      	mov	r0, r3
    838a:	e7f9      	b.n	8380 <friend_cred_del+0x24>
	return -ENOENT;
    838c:	f06f 0001 	mvn.w	r0, #1
}
    8390:	bd10      	pop	{r4, pc}
    8392:	bf00      	nop
    8394:	200006f0 	.word	0x200006f0
    8398:	2000073a 	.word	0x2000073a

0000839c <friend_cred_get>:
{
    839c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (cred->net_idx != sub->net_idx) {
    839e:	4c1c      	ldr	r4, [pc, #112]	; (8410 <friend_cred_get+0x74>)
    83a0:	8b86      	ldrh	r6, [r0, #28]
    83a2:	8827      	ldrh	r7, [r4, #0]
{
    83a4:	9d05      	ldr	r5, [sp, #20]
		if (cred->net_idx != sub->net_idx) {
    83a6:	42b7      	cmp	r7, r6
    83a8:	d103      	bne.n	83b2 <friend_cred_get+0x16>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    83aa:	b161      	cbz	r1, 83c6 <friend_cred_get+0x2a>
    83ac:	8867      	ldrh	r7, [r4, #2]
    83ae:	428f      	cmp	r7, r1
    83b0:	d029      	beq.n	8406 <friend_cred_get+0x6a>
		if (cred->net_idx != sub->net_idx) {
    83b2:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
    83b6:	42b7      	cmp	r7, r6
    83b8:	d127      	bne.n	840a <friend_cred_get+0x6e>
		if (addr != BT_MESH_ADDR_UNASSIGNED && cred->addr != addr) {
    83ba:	b119      	cbz	r1, 83c4 <friend_cred_get+0x28>
    83bc:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
    83c0:	428e      	cmp	r6, r1
    83c2:	d122      	bne.n	840a <friend_cred_get+0x6e>
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    83c4:	2101      	movs	r1, #1
		if (nid) {
    83c6:	b142      	cbz	r2, 83da <friend_cred_get+0x3e>
			*nid = cred->cred[sub->kr_flag].nid;
    83c8:	7f86      	ldrb	r6, [r0, #30]
    83ca:	eb06 1746 	add.w	r7, r6, r6, lsl #5
    83ce:	264a      	movs	r6, #74	; 0x4a
    83d0:	fb06 7601 	mla	r6, r6, r1, r7
    83d4:	4426      	add	r6, r4
    83d6:	7a36      	ldrb	r6, [r6, #8]
    83d8:	7016      	strb	r6, [r2, #0]
		if (enc) {
    83da:	b143      	cbz	r3, 83ee <friend_cred_get+0x52>
			*enc = cred->cred[sub->kr_flag].enc;
    83dc:	7f82      	ldrb	r2, [r0, #30]
    83de:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    83e2:	3209      	adds	r2, #9
    83e4:	264a      	movs	r6, #74	; 0x4a
    83e6:	fb06 2201 	mla	r2, r6, r1, r2
    83ea:	4422      	add	r2, r4
    83ec:	601a      	str	r2, [r3, #0]
		if (priv) {
    83ee:	b145      	cbz	r5, 8402 <friend_cred_get+0x66>
			*priv = cred->cred[sub->kr_flag].privacy;
    83f0:	7f83      	ldrb	r3, [r0, #30]
    83f2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    83f6:	3319      	adds	r3, #25
    83f8:	224a      	movs	r2, #74	; 0x4a
    83fa:	fb02 3101 	mla	r1, r2, r1, r3
    83fe:	4421      	add	r1, r4
    8400:	6029      	str	r1, [r5, #0]
		return 0;
    8402:	2000      	movs	r0, #0
    8404:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(friend_cred); i++) {
    8406:	2100      	movs	r1, #0
    8408:	e7dd      	b.n	83c6 <friend_cred_get+0x2a>
	return -ENOENT;
    840a:	f06f 0001 	mvn.w	r0, #1
    840e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8410:	200006f0 	.word	0x200006f0

00008414 <bt_mesh_net_flags>:
	if (sub && sub->kr_flag) {
    8414:	b100      	cbz	r0, 8418 <bt_mesh_net_flags+0x4>
    8416:	7f80      	ldrb	r0, [r0, #30]
	if (bt_mesh.iv_update) {
    8418:	4b03      	ldr	r3, [pc, #12]	; (8428 <bt_mesh_net_flags+0x14>)
    841a:	79db      	ldrb	r3, [r3, #7]
    841c:	07db      	lsls	r3, r3, #31
		flags |= BT_MESH_NET_FLAG_IVU;
    841e:	bf48      	it	mi
    8420:	f040 0002 	orrmi.w	r0, r0, #2
}
    8424:	4770      	bx	lr
    8426:	bf00      	nop
    8428:	20006168 	.word	0x20006168

0000842c <bt_mesh_net_beacon_update>:
{
    842c:	b507      	push	{r0, r1, r2, lr}
    842e:	4602      	mov	r2, r0
	u8_t flags = bt_mesh_net_flags(sub);
    8430:	f7ff fff0 	bl	8414 <bt_mesh_net_flags>
	if (sub->kr_flag) {
    8434:	7f93      	ldrb	r3, [r2, #30]
	u8_t flags = bt_mesh_net_flags(sub);
    8436:	4601      	mov	r1, r0
	if (sub->kr_flag) {
    8438:	b16b      	cbz	r3, 8456 <bt_mesh_net_beacon_update+0x2a>
		keys = &sub->keys[1];
    843a:	f102 0089 	add.w	r0, r2, #137	; 0x89
				   bt_mesh.iv_index, sub->auth);
    843e:	3228      	adds	r2, #40	; 0x28
	return bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    8440:	4b06      	ldr	r3, [pc, #24]	; (845c <bt_mesh_net_beacon_update+0x30>)
    8442:	9200      	str	r2, [sp, #0]
    8444:	681b      	ldr	r3, [r3, #0]
    8446:	f100 0221 	add.w	r2, r0, #33	; 0x21
    844a:	3049      	adds	r0, #73	; 0x49
    844c:	f002 fadf 	bl	aa0e <bt_mesh_beacon_auth>
}
    8450:	b003      	add	sp, #12
    8452:	f85d fb04 	ldr.w	pc, [sp], #4
		keys = &sub->keys[0];
    8456:	f102 0030 	add.w	r0, r2, #48	; 0x30
    845a:	e7f0      	b.n	843e <bt_mesh_net_beacon_update+0x12>
    845c:	20006168 	.word	0x20006168

00008460 <bt_mesh_net_create>:
{
    8460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (bt_mesh.valid) {
    8464:	4c24      	ldr	r4, [pc, #144]	; (84f8 <bt_mesh_net_create+0x98>)
    8466:	79e5      	ldrb	r5, [r4, #7]
    8468:	f015 0510 	ands.w	r5, r5, #16
{
    846c:	4680      	mov	r8, r0
    846e:	460e      	mov	r6, r1
    8470:	4691      	mov	r9, r2
    8472:	461f      	mov	r7, r3
	if (bt_mesh.valid) {
    8474:	d13c      	bne.n	84f0 <bt_mesh_net_create+0x90>
	memset(msg_cache, 0, sizeof(msg_cache));
    8476:	4629      	mov	r1, r5
    8478:	2250      	movs	r2, #80	; 0x50
    847a:	4820      	ldr	r0, [pc, #128]	; (84fc <bt_mesh_net_create+0x9c>)
    847c:	f7f8 f918 	bl	6b0 <memset>
	msg_cache_next = 0;
    8480:	4b1f      	ldr	r3, [pc, #124]	; (8500 <bt_mesh_net_create+0xa0>)
    8482:	801d      	strh	r5, [r3, #0]
	sub->kr_flag = BT_MESH_KEY_REFRESH(flags);
    8484:	f006 0301 	and.w	r3, r6, #1
    8488:	f884 31d2 	strb.w	r3, [r4, #466]	; 0x1d2
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    848c:	4649      	mov	r1, r9
	if (sub->kr_flag) {
    848e:	b343      	cbz	r3, 84e2 <bt_mesh_net_create+0x82>
		err = bt_mesh_net_keys_create(&sub->keys[1], key);
    8490:	f204 203d 	addw	r0, r4, #573	; 0x23d
    8494:	f7ff fe66 	bl	8164 <bt_mesh_net_keys_create>
		if (err) {
    8498:	b118      	cbz	r0, 84a2 <bt_mesh_net_create+0x42>
			return -EIO;
    849a:	f06f 0004 	mvn.w	r0, #4
    849e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    84a2:	2302      	movs	r3, #2
    84a4:	f884 31d3 	strb.w	r3, [r4, #467]	; 0x1d3
	bt_mesh.valid = 1;
    84a8:	79e3      	ldrb	r3, [r4, #7]
	sub->net_idx = idx;
    84aa:	f8a4 81d0 	strh.w	r8, [r4, #464]	; 0x1d0
	bt_mesh.valid = 1;
    84ae:	f043 0310 	orr.w	r3, r3, #16
    84b2:	71e3      	strb	r3, [r4, #7]
		sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
    84b4:	2301      	movs	r3, #1
    84b6:	f884 31d4 	strb.w	r3, [r4, #468]	; 0x1d4
    84ba:	f010 f94d 	bl	18758 <_impl_k_uptime_get_32>
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
    84be:	79e3      	ldrb	r3, [r4, #7]
		sub->node_id_start = k_uptime_get_32();
    84c0:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
	bt_mesh.iv_update = BT_MESH_IV_UPDATE(flags);
    84c4:	0876      	lsrs	r6, r6, #1
    84c6:	f366 0300 	bfi	r3, r6, #0, #1
    84ca:	71e3      	strb	r3, [r4, #7]
	bt_mesh.iv_index = iv_index;
    84cc:	6027      	str	r7, [r4, #0]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    84ce:	f010 f95b 	bl	18788 <_impl_k_uptime_get>
	bt_mesh.last_update = k_uptime_get();
    84d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
	bt_mesh_net_beacon_update(sub);
    84d6:	480b      	ldr	r0, [pc, #44]	; (8504 <bt_mesh_net_create+0xa4>)
    84d8:	f7ff ffa8 	bl	842c <bt_mesh_net_beacon_update>
	return 0;
    84dc:	2000      	movs	r0, #0
    84de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err = bt_mesh_net_keys_create(&sub->keys[0], key);
    84e2:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
    84e6:	f7ff fe3d 	bl	8164 <bt_mesh_net_keys_create>
		if (err) {
    84ea:	2800      	cmp	r0, #0
    84ec:	d0dc      	beq.n	84a8 <bt_mesh_net_create+0x48>
    84ee:	e7d4      	b.n	849a <bt_mesh_net_create+0x3a>
		return -EALREADY;
    84f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    84f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    84f8:	20006168 	.word	0x20006168
    84fc:	20000788 	.word	0x20000788
    8500:	200007d8 	.word	0x200007d8
    8504:	2000631c 	.word	0x2000631c

00008508 <bt_mesh_net_revoke_keys>:
{
    8508:	b538      	push	{r3, r4, r5, lr}
    850a:	4605      	mov	r5, r0
		if (key->net_idx != sub->net_idx || !key->updated) {
    850c:	4c15      	ldr	r4, [pc, #84]	; (8564 <bt_mesh_net_revoke_keys+0x5c>)
	memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
    850e:	2259      	movs	r2, #89	; 0x59
    8510:	f100 0189 	add.w	r1, r0, #137	; 0x89
    8514:	3030      	adds	r0, #48	; 0x30
    8516:	f7f8 f89f 	bl	658 <memcpy>
		if (key->net_idx != sub->net_idx || !key->updated) {
    851a:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    851e:	8bab      	ldrh	r3, [r5, #28]
    8520:	429a      	cmp	r2, r3
    8522:	d10c      	bne.n	853e <bt_mesh_net_revoke_keys+0x36>
    8524:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    8528:	b14b      	cbz	r3, 853e <bt_mesh_net_revoke_keys+0x36>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    852a:	2211      	movs	r2, #17
    852c:	f504 71bd 	add.w	r1, r4, #378	; 0x17a
    8530:	f204 1069 	addw	r0, r4, #361	; 0x169
    8534:	f7f8 f890 	bl	658 <memcpy>
		key->updated = false;
    8538:	2300      	movs	r3, #0
    853a:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		if (key->net_idx != sub->net_idx || !key->updated) {
    853e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
    8542:	8bab      	ldrh	r3, [r5, #28]
    8544:	429a      	cmp	r2, r3
    8546:	d10b      	bne.n	8560 <bt_mesh_net_revoke_keys+0x58>
    8548:	f894 3190 	ldrb.w	r3, [r4, #400]	; 0x190
    854c:	b143      	cbz	r3, 8560 <bt_mesh_net_revoke_keys+0x58>
		memcpy(&key->keys[0], &key->keys[1], sizeof(key->keys[0]));
    854e:	4906      	ldr	r1, [pc, #24]	; (8568 <bt_mesh_net_revoke_keys+0x60>)
    8550:	2211      	movs	r2, #17
    8552:	f1a1 0011 	sub.w	r0, r1, #17
    8556:	f7f8 f87f 	bl	658 <memcpy>
		key->updated = false;
    855a:	2300      	movs	r3, #0
    855c:	f884 3190 	strb.w	r3, [r4, #400]	; 0x190
    8560:	bd38      	pop	{r3, r4, r5, pc}
    8562:	bf00      	nop
    8564:	20006168 	.word	0x20006168
    8568:	2000630a 	.word	0x2000630a

0000856c <bt_mesh_kr_update>:
{
    856c:	b510      	push	{r4, lr}
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    856e:	7f83      	ldrb	r3, [r0, #30]
    8570:	428b      	cmp	r3, r1
{
    8572:	4604      	mov	r4, r0
    8574:	7fc0      	ldrb	r0, [r0, #31]
	if (new_kr != sub->kr_flag && sub->kr_phase == BT_MESH_KR_NORMAL) {
    8576:	d002      	beq.n	857e <bt_mesh_kr_update+0x12>
    8578:	b908      	cbnz	r0, 857e <bt_mesh_kr_update+0x12>
		return false;
    857a:	2000      	movs	r0, #0
    857c:	bd10      	pop	{r4, pc}
	sub->kr_flag = new_kr;
    857e:	2900      	cmp	r1, #0
    8580:	bf14      	ite	ne
    8582:	2301      	movne	r3, #1
    8584:	2300      	moveq	r3, #0
    8586:	77a3      	strb	r3, [r4, #30]
	if (sub->kr_flag) {
    8588:	d004      	beq.n	8594 <bt_mesh_kr_update+0x28>
		if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
    858a:	2801      	cmp	r0, #1
    858c:	d1f5      	bne.n	857a <bt_mesh_kr_update+0xe>
			sub->kr_phase = BT_MESH_KR_PHASE_2;
    858e:	2302      	movs	r3, #2
    8590:	77e3      	strb	r3, [r4, #31]
			return true;
    8592:	bd10      	pop	{r4, pc}
		switch (sub->kr_phase) {
    8594:	2801      	cmp	r0, #1
    8596:	d00b      	beq.n	85b0 <bt_mesh_kr_update+0x44>
    8598:	2802      	cmp	r0, #2
    859a:	d1ee      	bne.n	857a <bt_mesh_kr_update+0xe>
			bt_mesh_net_revoke_keys(sub);
    859c:	4620      	mov	r0, r4
    859e:	f7ff ffb3 	bl	8508 <bt_mesh_net_revoke_keys>
				friend_cred_refresh(sub->net_idx);
    85a2:	8ba0      	ldrh	r0, [r4, #28]
    85a4:	f7ff fe48 	bl	8238 <friend_cred_refresh>
			sub->kr_phase = BT_MESH_KR_NORMAL;
    85a8:	2300      	movs	r3, #0
    85aa:	77e3      	strb	r3, [r4, #31]
			return true;
    85ac:	2001      	movs	r0, #1
    85ae:	bd10      	pop	{r4, pc}
			if (!new_key) {
    85b0:	2a00      	cmp	r2, #0
    85b2:	d1f3      	bne.n	859c <bt_mesh_kr_update+0x30>
    85b4:	e7e1      	b.n	857a <bt_mesh_kr_update+0xe>
	...

000085b8 <bt_mesh_rpl_reset>:
{
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	4c0a      	ldr	r4, [pc, #40]	; (85e4 <bt_mesh_rpl_reset+0x2c>)
				rpl->old_iv = true;
    85bc:	2601      	movs	r6, #1
    85be:	f104 0550 	add.w	r5, r4, #80	; 0x50
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    85c2:	42ac      	cmp	r4, r5
    85c4:	d100      	bne.n	85c8 <bt_mesh_rpl_reset+0x10>
}
    85c6:	bd70      	pop	{r4, r5, r6, pc}
		if (rpl->src) {
    85c8:	8823      	ldrh	r3, [r4, #0]
    85ca:	b133      	cbz	r3, 85da <bt_mesh_rpl_reset+0x22>
			if (rpl->old_iv) {
    85cc:	78a3      	ldrb	r3, [r4, #2]
    85ce:	b133      	cbz	r3, 85de <bt_mesh_rpl_reset+0x26>
				memset(rpl, 0, sizeof(*rpl));
    85d0:	2208      	movs	r2, #8
    85d2:	2100      	movs	r1, #0
    85d4:	4620      	mov	r0, r4
    85d6:	f7f8 f86b 	bl	6b0 <memset>
    85da:	3408      	adds	r4, #8
    85dc:	e7f1      	b.n	85c2 <bt_mesh_rpl_reset+0xa>
				rpl->old_iv = true;
    85de:	70a6      	strb	r6, [r4, #2]
    85e0:	e7fb      	b.n	85da <bt_mesh_rpl_reset+0x22>
    85e2:	bf00      	nop
    85e4:	200064e4 	.word	0x200064e4

000085e8 <bt_mesh_net_sec_update>:
{
    85e8:	b510      	push	{r4, lr}
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
    85ea:	4604      	mov	r4, r0
    85ec:	b158      	cbz	r0, 8606 <bt_mesh_net_sec_update+0x1e>
    85ee:	8b80      	ldrh	r0, [r0, #28]
    85f0:	f005 fa74 	bl	dadc <bt_mesh_friend_sec_update>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    85f4:	f004 fb76 	bl	cce4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    85f8:	2801      	cmp	r0, #1
    85fa:	d107      	bne.n	860c <bt_mesh_net_sec_update+0x24>
		bt_mesh_proxy_beacon_send(sub);
    85fc:	4620      	mov	r0, r4
}
    85fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_proxy_beacon_send(sub);
    8602:	f007 b8ab 	b.w	f75c <bt_mesh_proxy_beacon_send>
		bt_mesh_friend_sec_update(sub ? sub->net_idx : BT_MESH_KEY_ANY);
    8606:	f64f 70ff 	movw	r0, #65535	; 0xffff
    860a:	e7f1      	b.n	85f0 <bt_mesh_net_sec_update+0x8>
    860c:	bd10      	pop	{r4, pc}
	...

00008610 <bt_mesh_net_iv_update>:
{
    8610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_mesh.iv_update) {
    8612:	4c39      	ldr	r4, [pc, #228]	; (86f8 <bt_mesh_net_iv_update+0xe8>)
    8614:	79e7      	ldrb	r7, [r4, #7]
		if (iv_index != bt_mesh.iv_index) {
    8616:	6823      	ldr	r3, [r4, #0]
	if (bt_mesh.iv_update) {
    8618:	f017 0701 	ands.w	r7, r7, #1
{
    861c:	4606      	mov	r6, r0
    861e:	460d      	mov	r5, r1
	if (bt_mesh.iv_update) {
    8620:	d01c      	beq.n	865c <bt_mesh_net_iv_update+0x4c>
		if (iv_index != bt_mesh.iv_index) {
    8622:	4283      	cmp	r3, r0
    8624:	d002      	beq.n	862c <bt_mesh_net_iv_update+0x1c>
			return false;
    8626:	2500      	movs	r5, #0
}
    8628:	4628      	mov	r0, r5
    862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_update) {
    862c:	2900      	cmp	r1, #0
    862e:	d1fa      	bne.n	8626 <bt_mesh_net_iv_update+0x16>
    8630:	f010 f8aa 	bl	18788 <_impl_k_uptime_get>
		s64_t delta = k_uptime_get() - bt_mesh.last_update;
    8634:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8638:	1a80      	subs	r0, r0, r2
    863a:	eb61 0103 	sbc.w	r1, r1, r3
		if (delta < K_HOURS(96)) {
    863e:	a32c      	add	r3, pc, #176	; (adr r3, 86f0 <bt_mesh_net_iv_update+0xe0>)
    8640:	e9d3 2300 	ldrd	r2, r3, [r3]
    8644:	4282      	cmp	r2, r0
    8646:	418b      	sbcs	r3, r1
    8648:	daed      	bge.n	8626 <bt_mesh_net_iv_update+0x16>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    864a:	b9dd      	cbnz	r5, 8684 <bt_mesh_net_iv_update+0x74>
    864c:	f001 f880 	bl	9750 <bt_mesh_tx_in_progress>
    8650:	b1c0      	cbz	r0, 8684 <bt_mesh_net_iv_update+0x74>
		bt_mesh.pending_update = 1;
    8652:	79e3      	ldrb	r3, [r4, #7]
    8654:	f043 0308 	orr.w	r3, r3, #8
    8658:	71e3      	strb	r3, [r4, #7]
		return false;
    865a:	e7e5      	b.n	8628 <bt_mesh_net_iv_update+0x18>
		if (iv_index < bt_mesh.iv_index ||
    865c:	4298      	cmp	r0, r3
    865e:	d9e2      	bls.n	8626 <bt_mesh_net_iv_update+0x16>
		    iv_index > bt_mesh.iv_index + 42) {
    8660:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    8664:	4290      	cmp	r0, r2
    8666:	d8de      	bhi.n	8626 <bt_mesh_net_iv_update+0x16>
		if (iv_index > bt_mesh.iv_index + 1) {
    8668:	3301      	adds	r3, #1
    866a:	4298      	cmp	r0, r3
    866c:	d931      	bls.n	86d2 <bt_mesh_net_iv_update+0xc2>
			memset(bt_mesh.rpl, 0, sizeof(bt_mesh.rpl));
    866e:	2250      	movs	r2, #80	; 0x50
    8670:	4639      	mov	r1, r7
    8672:	f504 705f 	add.w	r0, r4, #892	; 0x37c
    8676:	f7f8 f81b 	bl	6b0 <memset>
			bt_mesh.seq = 0;
    867a:	6863      	ldr	r3, [r4, #4]
			bt_mesh.iv_index = iv_index;
    867c:	6026      	str	r6, [r4, #0]
			bt_mesh.seq = 0;
    867e:	f367 0317 	bfi	r3, r7, #0, #24
    8682:	6063      	str	r3, [r4, #4]
	bt_mesh.iv_update = iv_update;
    8684:	79e3      	ldrb	r3, [r4, #7]
    8686:	f365 0300 	bfi	r3, r5, #0, #1
    868a:	71e3      	strb	r3, [r4, #7]
	if (bt_mesh.iv_update) {
    868c:	f013 0301 	ands.w	r3, r3, #1
    8690:	d023      	beq.n	86da <bt_mesh_net_iv_update+0xca>
		bt_mesh.iv_index = iv_index;
    8692:	6026      	str	r6, [r4, #0]
		bt_mesh_rpl_reset();
    8694:	f7ff ff90 	bl	85b8 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8698:	4a18      	ldr	r2, [pc, #96]	; (86fc <bt_mesh_net_iv_update+0xec>)
    869a:	4919      	ldr	r1, [pc, #100]	; (8700 <bt_mesh_net_iv_update+0xf0>)
    869c:	4819      	ldr	r0, [pc, #100]	; (8704 <bt_mesh_net_iv_update+0xf4>)
    869e:	f010 fb73 	bl	18d88 <k_delayed_work_submit_to_queue>
    86a2:	f010 f871 	bl	18788 <_impl_k_uptime_get>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    86a6:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
    86aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86ae:	429a      	cmp	r2, r3
	bt_mesh.last_update = k_uptime_get();
    86b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    86b4:	d002      	beq.n	86bc <bt_mesh_net_iv_update+0xac>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    86b6:	4814      	ldr	r0, [pc, #80]	; (8708 <bt_mesh_net_iv_update+0xf8>)
    86b8:	f7ff feb8 	bl	842c <bt_mesh_net_beacon_update>
		if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    86bc:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
    86c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86c4:	429a      	cmp	r2, r3
    86c6:	d002      	beq.n	86ce <bt_mesh_net_iv_update+0xbe>
			bt_mesh_net_beacon_update(&bt_mesh.sub[i]);
    86c8:	4810      	ldr	r0, [pc, #64]	; (870c <bt_mesh_net_iv_update+0xfc>)
    86ca:	f7ff feaf 	bl	842c <bt_mesh_net_beacon_update>
	return true;
    86ce:	2501      	movs	r5, #1
    86d0:	e7aa      	b.n	8628 <bt_mesh_net_iv_update+0x18>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    86d2:	d1a8      	bne.n	8626 <bt_mesh_net_iv_update+0x16>
    86d4:	2900      	cmp	r1, #0
    86d6:	d1ab      	bne.n	8630 <bt_mesh_net_iv_update+0x20>
    86d8:	e7a5      	b.n	8626 <bt_mesh_net_iv_update+0x16>
		bt_mesh.seq = 0;
    86da:	6862      	ldr	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
    86dc:	4808      	ldr	r0, [pc, #32]	; (8700 <bt_mesh_net_iv_update+0xf0>)
		bt_mesh.seq = 0;
    86de:	f363 0217 	bfi	r2, r3, #0, #24
    86e2:	6062      	str	r2, [r4, #4]
		k_delayed_work_cancel(&bt_mesh.ivu_complete);
    86e4:	f010 fb04 	bl	18cf0 <k_delayed_work_cancel>
    86e8:	e7db      	b.n	86a2 <bt_mesh_net_iv_update+0x92>
    86ea:	bf00      	nop
    86ec:	f3af 8000 	nop.w
    86f0:	14996fff 	.word	0x14996fff
    86f4:	00000000 	.word	0x00000000
    86f8:	20006168 	.word	0x20006168
    86fc:	19bfcc00 	.word	0x19bfcc00
    8700:	20006294 	.word	0x20006294
    8704:	20001dd8 	.word	0x20001dd8
    8708:	2000631c 	.word	0x2000631c
    870c:	20006400 	.word	0x20006400

00008710 <ivu_complete>:
		bt_mesh_net_relay(buf, &rx);
	}
}

static void ivu_complete(struct k_work *work)
{
    8710:	b508      	push	{r3, lr}
	BT_DBG("");

	bt_mesh_beacon_ivu_initiator(true);
    8712:	2001      	movs	r0, #1
    8714:	f7ff fc14 	bl	7f40 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    8718:	4b03      	ldr	r3, [pc, #12]	; (8728 <ivu_complete+0x18>)
    871a:	2100      	movs	r1, #0
    871c:	6818      	ldr	r0, [r3, #0]
}
    871e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    8722:	f7ff bf75 	b.w	8610 <bt_mesh_net_iv_update>
    8726:	bf00      	nop
    8728:	20006168 	.word	0x20006168

0000872c <bt_mesh_net_resend>:
{
    872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    8730:	4c34      	ldr	r4, [pc, #208]	; (8804 <bt_mesh_net_resend+0xd8>)
    8732:	2759      	movs	r7, #89	; 0x59
    8734:	4357      	muls	r7, r2
{
    8736:	4699      	mov	r9, r3
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    8738:	79e3      	ldrb	r3, [r4, #7]
{
    873a:	460e      	mov	r6, r1
	priv = sub->keys[new_key].privacy;
    873c:	f107 0869 	add.w	r8, r7, #105	; 0x69
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    8740:	6821      	ldr	r1, [r4, #0]
	priv = sub->keys[new_key].privacy;
    8742:	4480      	add	r8, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    8744:	f003 0301 	and.w	r3, r3, #1
{
    8748:	4682      	mov	sl, r0
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    874a:	4642      	mov	r2, r8
    874c:	1ac9      	subs	r1, r1, r3
    874e:	68b0      	ldr	r0, [r6, #8]
    8750:	f001 ff94 	bl	a67c <bt_mesh_net_obfuscate>
	if (err) {
    8754:	4605      	mov	r5, r0
    8756:	2800      	cmp	r0, #0
    8758:	d151      	bne.n	87fe <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    875a:	79e2      	ldrb	r2, [r4, #7]
    875c:	6821      	ldr	r1, [r4, #0]
	enc = sub->keys[new_key].enc;
    875e:	3741      	adds	r7, #65	; 0x41
    8760:	4457      	add	r7, sl
	err = bt_mesh_net_decrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    8762:	f002 0201 	and.w	r2, r2, #1
    8766:	f106 0a08 	add.w	sl, r6, #8
    876a:	4603      	mov	r3, r0
    876c:	1a8a      	subs	r2, r1, r2
    876e:	4638      	mov	r0, r7
    8770:	4651      	mov	r1, sl
    8772:	f001 fff6 	bl	a762 <bt_mesh_net_decrypt>
	if (err) {
    8776:	4605      	mov	r5, r0
    8778:	2800      	cmp	r0, #0
    877a:	d140      	bne.n	87fe <bt_mesh_net_resend+0xd2>
	buf->data[2] = (bt_mesh.seq >> 16);
    877c:	68b3      	ldr	r3, [r6, #8]
    877e:	79a2      	ldrb	r2, [r4, #6]
    8780:	709a      	strb	r2, [r3, #2]
	buf->data[3] = (bt_mesh.seq >> 8);
    8782:	6863      	ldr	r3, [r4, #4]
    8784:	68b2      	ldr	r2, [r6, #8]
    8786:	f3c3 230f 	ubfx	r3, r3, #8, #16
    878a:	70d3      	strb	r3, [r2, #3]
	buf->data[4] = bt_mesh.seq++;
    878c:	6863      	ldr	r3, [r4, #4]
    878e:	68b1      	ldr	r1, [r6, #8]
    8790:	f3c3 0217 	ubfx	r2, r3, #0, #24
    8794:	1c50      	adds	r0, r2, #1
    8796:	f360 0317 	bfi	r3, r0, #0, #24
    879a:	6063      	str	r3, [r4, #4]
    879c:	710a      	strb	r2, [r1, #4]
	err = bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_TX, false);
    879e:	79e2      	ldrb	r2, [r4, #7]
    87a0:	6821      	ldr	r1, [r4, #0]
    87a2:	f002 0201 	and.w	r2, r2, #1
    87a6:	462b      	mov	r3, r5
    87a8:	1a8a      	subs	r2, r1, r2
    87aa:	4638      	mov	r0, r7
    87ac:	4651      	mov	r1, sl
    87ae:	f001 ff8d 	bl	a6cc <bt_mesh_net_encrypt>
	if (err) {
    87b2:	4605      	mov	r5, r0
    87b4:	bb18      	cbnz	r0, 87fe <bt_mesh_net_resend+0xd2>
	err = bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    87b6:	79e3      	ldrb	r3, [r4, #7]
    87b8:	6821      	ldr	r1, [r4, #0]
    87ba:	68b0      	ldr	r0, [r6, #8]
    87bc:	f003 0301 	and.w	r3, r3, #1
    87c0:	4642      	mov	r2, r8
    87c2:	1ac9      	subs	r1, r1, r3
    87c4:	f001 ff5a 	bl	a67c <bt_mesh_net_obfuscate>
	if (err) {
    87c8:	4605      	mov	r5, r0
    87ca:	b9c0      	cbnz	r0, 87fe <bt_mesh_net_resend+0xd2>
	bt_mesh_adv_send(buf, cb, cb_data);
    87cc:	9a08      	ldr	r2, [sp, #32]
    87ce:	4649      	mov	r1, r9
    87d0:	4630      	mov	r0, r6
    87d2:	f7ff f9cf 	bl	7b74 <bt_mesh_adv_send>
	if (!bt_mesh.iv_update && bt_mesh.seq > IV_UPDATE_SEQ_LIMIT) {
    87d6:	79e3      	ldrb	r3, [r4, #7]
    87d8:	07db      	lsls	r3, r3, #31
    87da:	d410      	bmi.n	87fe <bt_mesh_net_resend+0xd2>
    87dc:	6863      	ldr	r3, [r4, #4]
    87de:	4a0a      	ldr	r2, [pc, #40]	; (8808 <bt_mesh_net_resend+0xdc>)
    87e0:	f3c3 0317 	ubfx	r3, r3, #0, #24
    87e4:	4293      	cmp	r3, r2
    87e6:	dd0a      	ble.n	87fe <bt_mesh_net_resend+0xd2>
		bt_mesh_beacon_ivu_initiator(true);
    87e8:	2001      	movs	r0, #1
    87ea:	f7ff fba9 	bl	7f40 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    87ee:	6820      	ldr	r0, [r4, #0]
    87f0:	2101      	movs	r1, #1
    87f2:	4408      	add	r0, r1
    87f4:	f7ff ff0c 	bl	8610 <bt_mesh_net_iv_update>
		bt_mesh_net_sec_update(NULL);
    87f8:	4628      	mov	r0, r5
    87fa:	f7ff fef5 	bl	85e8 <bt_mesh_net_sec_update>
}
    87fe:	4628      	mov	r0, r5
    8800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8804:	20006168 	.word	0x20006168
    8808:	007a1200 	.word	0x007a1200

0000880c <bt_mesh_net_encode>:
{
    880c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    8810:	6843      	ldr	r3, [r0, #4]
    8812:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    8816:	f64f 73ff 	movw	r3, #65535	; 0xffff
    881a:	4598      	cmp	r8, r3
{
    881c:	4605      	mov	r5, r0
    881e:	460e      	mov	r6, r1
    8820:	4617      	mov	r7, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    8822:	d008      	beq.n	8836 <bt_mesh_net_encode+0x2a>
	} else if (net_buf_simple_tailroom(buf) < 4) {
    8824:	4630      	mov	r0, r6
    8826:	f00f fa52 	bl	17cce <net_buf_simple_tailroom>
    882a:	2803      	cmp	r0, #3
    882c:	d809      	bhi.n	8842 <bt_mesh_net_encode+0x36>
		return -EINVAL;
    882e:	f06f 0015 	mvn.w	r0, #21
    8832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    8836:	4608      	mov	r0, r1
    8838:	f00f fa49 	bl	17cce <net_buf_simple_tailroom>
    883c:	2807      	cmp	r0, #7
    883e:	d8f1      	bhi.n	8824 <bt_mesh_net_encode+0x18>
    8840:	e7f5      	b.n	882e <bt_mesh_net_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    8842:	686b      	ldr	r3, [r5, #4]
	seq[0] = (bt_mesh.seq >> 16);
    8844:	4c2d      	ldr	r4, [pc, #180]	; (88fc <bt_mesh_net_encode+0xf0>)
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    8846:	8899      	ldrh	r1, [r3, #4]
    8848:	4630      	mov	r0, r6
    884a:	f00f f9e9 	bl	17c20 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    884e:	8929      	ldrh	r1, [r5, #8]
    8850:	4630      	mov	r0, r6
    8852:	f00f f9e5 	bl	17c20 <net_buf_simple_push_be16>
	seq = net_buf_simple_push(buf, 3);
    8856:	2103      	movs	r1, #3
    8858:	4630      	mov	r0, r6
    885a:	f00f f9d9 	bl	17c10 <net_buf_simple_push>
	seq[0] = (bt_mesh.seq >> 16);
    885e:	79a3      	ldrb	r3, [r4, #6]
    8860:	7003      	strb	r3, [r0, #0]
	seq[1] = (bt_mesh.seq >> 8);
    8862:	6863      	ldr	r3, [r4, #4]
    8864:	f3c3 230f 	ubfx	r3, r3, #8, #16
    8868:	7043      	strb	r3, [r0, #1]
	seq[2] = bt_mesh.seq++;
    886a:	6863      	ldr	r3, [r4, #4]
    886c:	f3c3 0217 	ubfx	r2, r3, #0, #24
    8870:	1c51      	adds	r1, r2, #1
    8872:	f361 0317 	bfi	r3, r1, #0, #24
    8876:	6063      	str	r3, [r4, #4]
    8878:	7082      	strb	r2, [r0, #2]
	if (ctl) {
    887a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    887e:	4598      	cmp	r8, r3
    8880:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    8882:	79d9      	ldrb	r1, [r3, #7]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    8884:	4630      	mov	r0, r6
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    8886:	bf08      	it	eq
    8888:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    888c:	f00f f9dc 	bl	17c48 <net_buf_simple_push_u8>
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    8890:	f8d5 8000 	ldr.w	r8, [r5]
		tx->friend_cred = 0;
    8894:	7aeb      	ldrb	r3, [r5, #11]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    8896:	f898 201e 	ldrb.w	r2, [r8, #30]
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    889a:	6821      	ldr	r1, [r4, #0]
		tx->friend_cred = 0;
    889c:	f36f 0300 	bfc	r3, #0, #1
    88a0:	72eb      	strb	r3, [r5, #11]
    88a2:	2559      	movs	r5, #89	; 0x59
    88a4:	4355      	muls	r5, r2
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    88a6:	79e3      	ldrb	r3, [r4, #7]
		nid = tx->sub->keys[tx->sub->kr_flag].nid;
    88a8:	eb08 0205 	add.w	r2, r8, r5
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    88ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
    88b0:	1acb      	subs	r3, r1, r3
    88b2:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
    88b6:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    88ba:	b2c9      	uxtb	r1, r1
    88bc:	4630      	mov	r0, r6
    88be:	f00f f9c3 	bl	17c48 <net_buf_simple_push_u8>
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    88c2:	79e2      	ldrb	r2, [r4, #7]
    88c4:	6821      	ldr	r1, [r4, #0]
		enc = tx->sub->keys[tx->sub->kr_flag].enc;
    88c6:	f105 0941 	add.w	r9, r5, #65	; 0x41
    88ca:	44c1      	add	r9, r8
	err = bt_mesh_net_encrypt(enc, buf, BT_MESH_NET_IVI_TX, proxy);
    88cc:	f002 0201 	and.w	r2, r2, #1
    88d0:	1a8a      	subs	r2, r1, r2
    88d2:	463b      	mov	r3, r7
    88d4:	4631      	mov	r1, r6
    88d6:	4648      	mov	r0, r9
    88d8:	f001 fef8 	bl	a6cc <bt_mesh_net_encrypt>
	if (err) {
    88dc:	b960      	cbnz	r0, 88f8 <bt_mesh_net_encode+0xec>
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    88de:	79e3      	ldrb	r3, [r4, #7]
    88e0:	6821      	ldr	r1, [r4, #0]
    88e2:	6830      	ldr	r0, [r6, #0]
		priv = tx->sub->keys[tx->sub->kr_flag].privacy;
    88e4:	f105 0269 	add.w	r2, r5, #105	; 0x69
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    88e8:	f003 0301 	and.w	r3, r3, #1
    88ec:	4442      	add	r2, r8
    88ee:	1ac9      	subs	r1, r1, r3
}
    88f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_TX, priv);
    88f4:	f001 bec2 	b.w	a67c <bt_mesh_net_obfuscate>
}
    88f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88fc:	20006168 	.word	0x20006168

00008900 <bt_mesh_net_send>:
{
    8900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    8904:	6846      	ldr	r6, [r0, #4]
{
    8906:	461f      	mov	r7, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    8908:	79f3      	ldrb	r3, [r6, #7]
    890a:	2bff      	cmp	r3, #255	; 0xff
{
    890c:	4605      	mov	r5, r0
    890e:	4688      	mov	r8, r1
    8910:	4614      	mov	r4, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    8912:	d102      	bne.n	891a <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    8914:	f004 fb80 	bl	d018 <bt_mesh_default_ttl_get>
    8918:	71f0      	strb	r0, [r6, #7]
	err = bt_mesh_net_encode(tx, &buf->b, false);
    891a:	f108 0908 	add.w	r9, r8, #8
    891e:	2200      	movs	r2, #0
    8920:	4649      	mov	r1, r9
    8922:	4628      	mov	r0, r5
    8924:	f7ff ff72 	bl	880c <bt_mesh_net_encode>
	if (err) {
    8928:	4606      	mov	r6, r0
    892a:	b9c8      	cbnz	r0, 8960 <bt_mesh_net_send+0x60>
	    tx->ctx->send_ttl != 1) {
    892c:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    892e:	79da      	ldrb	r2, [r3, #7]
    8930:	2a01      	cmp	r2, #1
    8932:	d01b      	beq.n	896c <bt_mesh_net_send+0x6c>
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    8934:	8899      	ldrh	r1, [r3, #4]
    8936:	4648      	mov	r0, r9
    8938:	f007 f800 	bl	f93c <bt_mesh_proxy_relay>
    893c:	b1b0      	cbz	r0, 896c <bt_mesh_net_send+0x6c>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    893e:	686b      	ldr	r3, [r5, #4]
		if (bt_mesh_proxy_relay(&buf->b, tx->ctx->addr) &&
    8940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    8944:	2b00      	cmp	r3, #0
    8946:	dd11      	ble.n	896c <bt_mesh_net_send+0x6c>
			if (cb) {
    8948:	b154      	cbz	r4, 8960 <bt_mesh_net_send+0x60>
				if (cb->start) {
    894a:	6823      	ldr	r3, [r4, #0]
    894c:	b11b      	cbz	r3, 8956 <bt_mesh_net_send+0x56>
					cb->start(0, 0, cb_data);
    894e:	463a      	mov	r2, r7
    8950:	4631      	mov	r1, r6
    8952:	4630      	mov	r0, r6
    8954:	4798      	blx	r3
				if (cb->end) {
    8956:	6863      	ldr	r3, [r4, #4]
    8958:	b113      	cbz	r3, 8960 <bt_mesh_net_send+0x60>
					cb->end(0, cb_data);
    895a:	4639      	mov	r1, r7
    895c:	2000      	movs	r0, #0
    895e:	4798      	blx	r3
	net_buf_unref(buf);
    8960:	4640      	mov	r0, r8
    8962:	f00f f8ef 	bl	17b44 <net_buf_unref>
}
    8966:	4630      	mov	r0, r6
    8968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    896c:	686b      	ldr	r3, [r5, #4]
    896e:	8898      	ldrh	r0, [r3, #4]
    8970:	f002 f9b2 	bl	acd8 <bt_mesh_fixed_group_match>
    8974:	b318      	cbz	r0, 89be <bt_mesh_net_send+0xbe>
		if (cb && cb->start) {
    8976:	bb94      	cbnz	r4, 89de <bt_mesh_net_send+0xde>
		net_buf_slist_put(&bt_mesh.local_queue, net_buf_ref(buf));
    8978:	4640      	mov	r0, r8
    897a:	f00f f8ff 	bl	17b7c <net_buf_ref>
    897e:	4601      	mov	r1, r0
    8980:	481b      	ldr	r0, [pc, #108]	; (89f0 <bt_mesh_net_send+0xf0>)
    8982:	f00f f887 	bl	17a94 <net_buf_slist_put>
		if (cb && cb->end) {
    8986:	b124      	cbz	r4, 8992 <bt_mesh_net_send+0x92>
    8988:	6863      	ldr	r3, [r4, #4]
    898a:	b113      	cbz	r3, 8992 <bt_mesh_net_send+0x92>
			cb->end(0, cb_data);
    898c:	4639      	mov	r1, r7
    898e:	2000      	movs	r0, #0
    8990:	4798      	blx	r3
    8992:	f3bf 8f5b 	dmb	ish
    8996:	4917      	ldr	r1, [pc, #92]	; (89f4 <bt_mesh_net_send+0xf4>)
    8998:	e851 3f00 	ldrex	r3, [r1]
    899c:	f043 0201 	orr.w	r2, r3, #1
    89a0:	e841 2000 	strex	r0, r2, [r1]
    89a4:	2800      	cmp	r0, #0
    89a6:	d1f7      	bne.n	8998 <bt_mesh_net_send+0x98>
    89a8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    89ac:	f013 0401 	ands.w	r4, r3, #1
    89b0:	d1d6      	bne.n	8960 <bt_mesh_net_send+0x60>
		k_queue_append(&work_q->queue, work);
    89b2:	3908      	subs	r1, #8
    89b4:	4810      	ldr	r0, [pc, #64]	; (89f8 <bt_mesh_net_send+0xf8>)
    89b6:	f00f fbd8 	bl	1816a <k_queue_append>
    89ba:	4626      	mov	r6, r4
    89bc:	e7d0      	b.n	8960 <bt_mesh_net_send+0x60>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    89be:	686b      	ldr	r3, [r5, #4]
    89c0:	8898      	ldrh	r0, [r3, #4]
    89c2:	f002 f95f 	bl	ac84 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    89c6:	2800      	cmp	r0, #0
    89c8:	d1d5      	bne.n	8976 <bt_mesh_net_send+0x76>
	} else if (tx->ctx->send_ttl != 1) {
    89ca:	686b      	ldr	r3, [r5, #4]
    89cc:	79db      	ldrb	r3, [r3, #7]
    89ce:	2b01      	cmp	r3, #1
    89d0:	d0c6      	beq.n	8960 <bt_mesh_net_send+0x60>
		bt_mesh_adv_send(buf, cb, cb_data);
    89d2:	463a      	mov	r2, r7
    89d4:	4621      	mov	r1, r4
    89d6:	4640      	mov	r0, r8
    89d8:	f7ff f8cc 	bl	7b74 <bt_mesh_adv_send>
    89dc:	e7c0      	b.n	8960 <bt_mesh_net_send+0x60>
		if (cb && cb->start) {
    89de:	6823      	ldr	r3, [r4, #0]
    89e0:	2b00      	cmp	r3, #0
    89e2:	d0c9      	beq.n	8978 <bt_mesh_net_send+0x78>
			cb->start(0, 0, cb_data);
    89e4:	2100      	movs	r1, #0
    89e6:	463a      	mov	r2, r7
    89e8:	4608      	mov	r0, r1
    89ea:	4798      	blx	r3
    89ec:	e7c4      	b.n	8978 <bt_mesh_net_send+0x78>
    89ee:	bf00      	nop
    89f0:	20006184 	.word	0x20006184
    89f4:	20006180 	.word	0x20006180
    89f8:	20001dd8 	.word	0x20001dd8

000089fc <bt_mesh_subnet_find>:
{
    89fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8a00:	4c28      	ldr	r4, [pc, #160]	; (8aa4 <bt_mesh_subnet_find+0xa8>)
{
    8a02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8a06:	4617      	mov	r7, r2
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8a08:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
{
    8a0c:	4698      	mov	r8, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8a12:	429a      	cmp	r2, r3
{
    8a14:	4605      	mov	r5, r0
    8a16:	460e      	mov	r6, r1
    8a18:	46a2      	mov	sl, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8a1a:	d016      	beq.n	8a4a <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    8a1c:	460a      	mov	r2, r1
    8a1e:	f8cd 8000 	str.w	r8, [sp]
    8a22:	4601      	mov	r1, r0
    8a24:	463b      	mov	r3, r7
    8a26:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
    8a2a:	f7ff facb 	bl	7fc4 <auth_match>
    8a2e:	bb58      	cbnz	r0, 8a88 <bt_mesh_subnet_find+0x8c>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    8a30:	f894 31d3 	ldrb.w	r3, [r4, #467]	; 0x1d3
    8a34:	b14b      	cbz	r3, 8a4a <bt_mesh_subnet_find+0x4e>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    8a36:	f8cd 8000 	str.w	r8, [sp]
    8a3a:	463b      	mov	r3, r7
    8a3c:	4632      	mov	r2, r6
    8a3e:	4629      	mov	r1, r5
    8a40:	f204 203d 	addw	r0, r4, #573	; 0x23d
    8a44:	f7ff fabe 	bl	7fc4 <auth_match>
    8a48:	bb30      	cbnz	r0, 8a98 <bt_mesh_subnet_find+0x9c>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8a4a:	f8ba 22b4 	ldrh.w	r2, [sl, #692]	; 0x2b4
    8a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8a52:	429a      	cmp	r2, r3
    8a54:	d014      	beq.n	8a80 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[0], net_id, flags, iv_index, auth)) {
    8a56:	f8cd 8000 	str.w	r8, [sp]
    8a5a:	463b      	mov	r3, r7
    8a5c:	4632      	mov	r2, r6
    8a5e:	4629      	mov	r1, r5
    8a60:	4811      	ldr	r0, [pc, #68]	; (8aa8 <bt_mesh_subnet_find+0xac>)
    8a62:	f7ff faaf 	bl	7fc4 <auth_match>
    8a66:	b9a8      	cbnz	r0, 8a94 <bt_mesh_subnet_find+0x98>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    8a68:	f89a 32b7 	ldrb.w	r3, [sl, #695]	; 0x2b7
    8a6c:	b143      	cbz	r3, 8a80 <bt_mesh_subnet_find+0x84>
		if (auth_match(&sub->keys[1], net_id, flags, iv_index, auth)) {
    8a6e:	f8cd 8000 	str.w	r8, [sp]
    8a72:	463b      	mov	r3, r7
    8a74:	4632      	mov	r2, r6
    8a76:	4629      	mov	r1, r5
    8a78:	480c      	ldr	r0, [pc, #48]	; (8aac <bt_mesh_subnet_find+0xb0>)
    8a7a:	f7ff faa3 	bl	7fc4 <auth_match>
    8a7e:	b978      	cbnz	r0, 8aa0 <bt_mesh_subnet_find+0xa4>
	return NULL;
    8a80:	2000      	movs	r0, #0
}
    8a82:	b002      	add	sp, #8
    8a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    8a88:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = false;
    8a8c:	2300      	movs	r3, #0
			*new_key = true;
    8a8e:	f889 3000 	strb.w	r3, [r9]
			return sub;
    8a92:	e7f6      	b.n	8a82 <bt_mesh_subnet_find+0x86>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    8a94:	4806      	ldr	r0, [pc, #24]	; (8ab0 <bt_mesh_subnet_find+0xb4>)
    8a96:	e7f9      	b.n	8a8c <bt_mesh_subnet_find+0x90>
    8a98:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
			*new_key = true;
    8a9c:	2301      	movs	r3, #1
    8a9e:	e7f6      	b.n	8a8e <bt_mesh_subnet_find+0x92>
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];
    8aa0:	4803      	ldr	r0, [pc, #12]	; (8ab0 <bt_mesh_subnet_find+0xb4>)
    8aa2:	e7fb      	b.n	8a9c <bt_mesh_subnet_find+0xa0>
    8aa4:	20006168 	.word	0x20006168
    8aa8:	20006430 	.word	0x20006430
    8aac:	20006489 	.word	0x20006489
    8ab0:	20006400 	.word	0x20006400

00008ab4 <bt_mesh_net_decode>:
{
    8ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    8ab8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    8abc:	f1b8 0f11 	cmp.w	r8, #17
{
    8ac0:	468b      	mov	fp, r1
    8ac2:	4614      	mov	r4, r2
    8ac4:	4699      	mov	r9, r3
	if (data->len < BT_MESH_NET_MIN_PDU_LEN) {
    8ac6:	f240 811b 	bls.w	8d00 <bt_mesh_net_decode+0x24c>
    8aca:	6806      	ldr	r6, [r0, #0]
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(data)) {
    8acc:	bb81      	cbnz	r1, 8b30 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
    8ace:	eb06 0208 	add.w	r2, r6, r8
	return ((u16_t)src[0] << 8) | src[1];
    8ad2:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    8ad6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    8ada:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8ade:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    8ae2:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8ae6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    8aee:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    8af2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8af6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    8afa:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    8afe:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    8b02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    8b06:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		if (dup_cache[i] == val) {
    8b0a:	487f      	ldr	r0, [pc, #508]	; (8d08 <bt_mesh_net_decode+0x254>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    8b0c:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    8b0e:	465a      	mov	r2, fp
		if (dup_cache[i] == val) {
    8b10:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    8b14:	428b      	cmp	r3, r1
    8b16:	f000 80f3 	beq.w	8d00 <bt_mesh_net_decode+0x24c>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    8b1a:	3201      	adds	r2, #1
    8b1c:	2a04      	cmp	r2, #4
    8b1e:	d1f7      	bne.n	8b10 <bt_mesh_net_decode+0x5c>
	dup_cache[dup_cache_next++] = val;
    8b20:	497a      	ldr	r1, [pc, #488]	; (8d0c <bt_mesh_net_decode+0x258>)
    8b22:	680a      	ldr	r2, [r1, #0]
    8b24:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    8b28:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    8b2a:	f002 0203 	and.w	r2, r2, #3
    8b2e:	600a      	str	r2, [r1, #0]
	rx->net_if = net_if;
    8b30:	7ca3      	ldrb	r3, [r4, #18]
    8b32:	4d77      	ldr	r5, [pc, #476]	; (8d10 <bt_mesh_net_decode+0x25c>)
		if (cred->net_idx != sub->net_idx) {
    8b34:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8d28 <bt_mesh_net_decode+0x274>
	rx->net_if = net_if;
    8b38:	f36b 1305 	bfi	r3, fp, #4, #2
    8b3c:	74a3      	strb	r3, [r4, #18]
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    8b3e:	2700      	movs	r7, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    8b40:	8bab      	ldrh	r3, [r5, #28]
    8b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8b46:	4293      	cmp	r3, r2
    8b48:	f000 80ca 	beq.w	8ce0 <bt_mesh_net_decode+0x22c>
		if (cred->net_idx != sub->net_idx) {
    8b4c:	f8ba 2000 	ldrh.w	r2, [sl]
    8b50:	429a      	cmp	r2, r3
    8b52:	d126      	bne.n	8ba2 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[0].nid &&
    8b54:	7833      	ldrb	r3, [r6, #0]
    8b56:	f89a 2008 	ldrb.w	r2, [sl, #8]
    8b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b5e:	429a      	cmp	r2, r3
    8b60:	d10b      	bne.n	8b7a <bt_mesh_net_decode+0xc6>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    8b62:	496c      	ldr	r1, [pc, #432]	; (8d14 <bt_mesh_net_decode+0x260>)
    8b64:	e88d 0210 	stmia.w	sp, {r4, r9}
    8b68:	4643      	mov	r3, r8
    8b6a:	4632      	mov	r2, r6
    8b6c:	f1a1 0010 	sub.w	r0, r1, #16
    8b70:	f7ff fa4c 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
    8b74:	2800      	cmp	r0, #0
    8b76:	f000 8091 	beq.w	8c9c <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    8b7a:	7feb      	ldrb	r3, [r5, #31]
    8b7c:	b18b      	cbz	r3, 8ba2 <bt_mesh_net_decode+0xee>
		if (NID(data) == cred->cred[1].nid &&
    8b7e:	7833      	ldrb	r3, [r6, #0]
    8b80:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
    8b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b88:	429a      	cmp	r2, r3
    8b8a:	d10a      	bne.n	8ba2 <bt_mesh_net_decode+0xee>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    8b8c:	4962      	ldr	r1, [pc, #392]	; (8d18 <bt_mesh_net_decode+0x264>)
    8b8e:	e88d 0210 	stmia.w	sp, {r4, r9}
    8b92:	4643      	mov	r3, r8
    8b94:	4632      	mov	r2, r6
    8b96:	f1a1 0010 	sub.w	r0, r1, #16
    8b9a:	f7ff fa37 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
    8b9e:	2800      	cmp	r0, #0
    8ba0:	d078      	beq.n	8c94 <bt_mesh_net_decode+0x1e0>
		if (cred->net_idx != sub->net_idx) {
    8ba2:	f8ba 204a 	ldrh.w	r2, [sl, #74]	; 0x4a
    8ba6:	8bab      	ldrh	r3, [r5, #28]
    8ba8:	429a      	cmp	r2, r3
    8baa:	d125      	bne.n	8bf8 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[0].nid &&
    8bac:	7833      	ldrb	r3, [r6, #0]
    8bae:	f89a 2052 	ldrb.w	r2, [sl, #82]	; 0x52
    8bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8bb6:	429a      	cmp	r2, r3
    8bb8:	d10a      	bne.n	8bd0 <bt_mesh_net_decode+0x11c>
		    !net_decrypt(sub, cred->cred[0].enc, cred->cred[0].privacy,
    8bba:	4958      	ldr	r1, [pc, #352]	; (8d1c <bt_mesh_net_decode+0x268>)
    8bbc:	e88d 0210 	stmia.w	sp, {r4, r9}
    8bc0:	4643      	mov	r3, r8
    8bc2:	4632      	mov	r2, r6
    8bc4:	f1a1 0010 	sub.w	r0, r1, #16
    8bc8:	f7ff fa20 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[0].nid &&
    8bcc:	2800      	cmp	r0, #0
    8bce:	d065      	beq.n	8c9c <bt_mesh_net_decode+0x1e8>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    8bd0:	7feb      	ldrb	r3, [r5, #31]
    8bd2:	b18b      	cbz	r3, 8bf8 <bt_mesh_net_decode+0x144>
		if (NID(data) == cred->cred[1].nid &&
    8bd4:	7833      	ldrb	r3, [r6, #0]
    8bd6:	f89a 2073 	ldrb.w	r2, [sl, #115]	; 0x73
    8bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8bde:	429a      	cmp	r2, r3
    8be0:	d10a      	bne.n	8bf8 <bt_mesh_net_decode+0x144>
		    !net_decrypt(sub, cred->cred[1].enc, cred->cred[1].privacy,
    8be2:	494f      	ldr	r1, [pc, #316]	; (8d20 <bt_mesh_net_decode+0x26c>)
    8be4:	e88d 0210 	stmia.w	sp, {r4, r9}
    8be8:	4643      	mov	r3, r8
    8bea:	4632      	mov	r2, r6
    8bec:	f1a1 0010 	sub.w	r0, r1, #16
    8bf0:	f7ff fa0c 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == cred->cred[1].nid &&
    8bf4:	2800      	cmp	r0, #0
    8bf6:	d04d      	beq.n	8c94 <bt_mesh_net_decode+0x1e0>
		if (NID(data) == sub->keys[0].nid &&
    8bf8:	7833      	ldrb	r3, [r6, #0]
    8bfa:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
    8bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8c02:	429a      	cmp	r2, r3
    8c04:	d153      	bne.n	8cae <bt_mesh_net_decode+0x1fa>
		    !net_decrypt(sub, sub->keys[0].enc, sub->keys[0].privacy,
    8c06:	e88d 0210 	stmia.w	sp, {r4, r9}
    8c0a:	4643      	mov	r3, r8
    8c0c:	4632      	mov	r2, r6
    8c0e:	f105 0169 	add.w	r1, r5, #105	; 0x69
    8c12:	f105 0041 	add.w	r0, r5, #65	; 0x41
    8c16:	f7ff f9f9 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == sub->keys[0].nid &&
    8c1a:	2800      	cmp	r0, #0
    8c1c:	d147      	bne.n	8cae <bt_mesh_net_decode+0x1fa>
			rx->ctx.net_idx = sub->net_idx;
    8c1e:	4a41      	ldr	r2, [pc, #260]	; (8d24 <bt_mesh_net_decode+0x270>)
    8c20:	23e4      	movs	r3, #228	; 0xe4
    8c22:	fb03 2707 	mla	r7, r3, r7, r2
	rx->ctx.recv_ttl = TTL(buf->data);
    8c26:	f8d9 2000 	ldr.w	r2, [r9]
			rx->ctx.net_idx = sub->net_idx;
    8c2a:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
    8c2e:	80a3      	strh	r3, [r4, #4]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    8c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8c34:	80e1      	strh	r1, [r4, #6]
			rx->sub = sub;
    8c36:	6025      	str	r5, [r4, #0]
	rx->ctx.recv_ttl = TTL(buf->data);
    8c38:	7850      	ldrb	r0, [r2, #1]
    8c3a:	7aa3      	ldrb	r3, [r4, #10]
    8c3c:	f360 0306 	bfi	r3, r0, #0, #7
    8c40:	72a3      	strb	r3, [r4, #10]
		rx->ctx.send_ttl = BT_MESH_TTL_DEFAULT;
    8c42:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
    8c46:	bf18      	it	ne
    8c48:	460b      	movne	r3, r1
    8c4a:	72e3      	strb	r3, [r4, #11]
	rx->ctl = CTL(buf->data);
    8c4c:	7853      	ldrb	r3, [r2, #1]
    8c4e:	7ca1      	ldrb	r1, [r4, #18]
    8c50:	09db      	lsrs	r3, r3, #7
    8c52:	f363 01c3 	bfi	r1, r3, #3, #1
    8c56:	74a1      	strb	r1, [r4, #18]
	rx->seq = SEQ(buf->data);
    8c58:	78d3      	ldrb	r3, [r2, #3]
    8c5a:	7891      	ldrb	r1, [r2, #2]
    8c5c:	021b      	lsls	r3, r3, #8
    8c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8c62:	7911      	ldrb	r1, [r2, #4]
    8c64:	430b      	orrs	r3, r1
    8c66:	60e3      	str	r3, [r4, #12]
	return ((u16_t)src[0] << 8) | src[1];
    8c68:	79d1      	ldrb	r1, [r2, #7]
    8c6a:	7a13      	ldrb	r3, [r2, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    8c6c:	f1bb 0f03 	cmp.w	fp, #3
    8c70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rx->dst = DST(buf->data);
    8c74:	8223      	strh	r3, [r4, #16]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    8c76:	d13e      	bne.n	8cf6 <bt_mesh_net_decode+0x242>
	if (BT_MESH_ADDR_IS_RFU(rx->dst)) {
    8c78:	f503 7380 	add.w	r3, r3, #256	; 0x100
    8c7c:	b29b      	uxth	r3, r3
    8c7e:	2bfb      	cmp	r3, #251	; 0xfb
    8c80:	d93b      	bls.n	8cfa <bt_mesh_net_decode+0x246>
	if (net_if != BT_MESH_NET_IF_LOCAL && bt_mesh_elem_find(rx->ctx.addr)) {
    8c82:	f1bb 0f01 	cmp.w	fp, #1
    8c86:	d003      	beq.n	8c90 <bt_mesh_net_decode+0x1dc>
    8c88:	8920      	ldrh	r0, [r4, #8]
    8c8a:	f001 fffb 	bl	ac84 <bt_mesh_elem_find>
    8c8e:	bba0      	cbnz	r0, 8cfa <bt_mesh_net_decode+0x246>
	return 0;
    8c90:	2000      	movs	r0, #0
    8c92:	e02d      	b.n	8cf0 <bt_mesh_net_decode+0x23c>
			rx->new_key = 1;
    8c94:	7ca3      	ldrb	r3, [r4, #18]
    8c96:	f043 0302 	orr.w	r3, r3, #2
    8c9a:	74a3      	strb	r3, [r4, #18]
			rx->friend_cred = 1;
    8c9c:	7ca3      	ldrb	r3, [r4, #18]
    8c9e:	f043 0304 	orr.w	r3, r3, #4
    8ca2:	74a3      	strb	r3, [r4, #18]
			rx->ctx.net_idx = sub->net_idx;
    8ca4:	4b1f      	ldr	r3, [pc, #124]	; (8d24 <bt_mesh_net_decode+0x270>)
    8ca6:	22e4      	movs	r2, #228	; 0xe4
    8ca8:	fb02 3707 	mla	r7, r2, r7, r3
    8cac:	e7bb      	b.n	8c26 <bt_mesh_net_decode+0x172>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
    8cae:	7feb      	ldrb	r3, [r5, #31]
    8cb0:	b1b3      	cbz	r3, 8ce0 <bt_mesh_net_decode+0x22c>
		if (NID(data) == sub->keys[1].nid &&
    8cb2:	7833      	ldrb	r3, [r6, #0]
    8cb4:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
    8cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8cbc:	429a      	cmp	r2, r3
    8cbe:	d10f      	bne.n	8ce0 <bt_mesh_net_decode+0x22c>
		    !net_decrypt(sub, sub->keys[1].enc, sub->keys[1].privacy,
    8cc0:	e88d 0210 	stmia.w	sp, {r4, r9}
    8cc4:	4643      	mov	r3, r8
    8cc6:	4632      	mov	r2, r6
    8cc8:	f105 01c2 	add.w	r1, r5, #194	; 0xc2
    8ccc:	f105 009a 	add.w	r0, r5, #154	; 0x9a
    8cd0:	f7ff f99c 	bl	800c <net_decrypt.isra.2>
		if (NID(data) == sub->keys[1].nid &&
    8cd4:	b920      	cbnz	r0, 8ce0 <bt_mesh_net_decode+0x22c>
			rx->new_key = 1;
    8cd6:	7ca3      	ldrb	r3, [r4, #18]
    8cd8:	f043 0302 	orr.w	r3, r3, #2
    8cdc:	74a3      	strb	r3, [r4, #18]
    8cde:	e79e      	b.n	8c1e <bt_mesh_net_decode+0x16a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    8ce0:	3701      	adds	r7, #1
    8ce2:	2f02      	cmp	r7, #2
    8ce4:	f105 05e4 	add.w	r5, r5, #228	; 0xe4
    8ce8:	f47f af2a 	bne.w	8b40 <bt_mesh_net_decode+0x8c>
		return -ENOENT;
    8cec:	f06f 0001 	mvn.w	r0, #1
}
    8cf0:	b003      	add	sp, #12
    8cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d1be      	bne.n	8c78 <bt_mesh_net_decode+0x1c4>
		return -EBADMSG;
    8cfa:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    8cfe:	e7f7      	b.n	8cf0 <bt_mesh_net_decode+0x23c>
		return -EINVAL;
    8d00:	f06f 0015 	mvn.w	r0, #21
    8d04:	e7f4      	b.n	8cf0 <bt_mesh_net_decode+0x23c>
    8d06:	bf00      	nop
    8d08:	200006dc 	.word	0x200006dc
    8d0c:	200006ec 	.word	0x200006ec
    8d10:	2000631c 	.word	0x2000631c
    8d14:	20000709 	.word	0x20000709
    8d18:	2000072a 	.word	0x2000072a
    8d1c:	20000753 	.word	0x20000753
    8d20:	20000774 	.word	0x20000774
    8d24:	20006168 	.word	0x20006168
    8d28:	200006f0 	.word	0x200006f0

00008d2c <bt_mesh_net_recv>:
{
    8d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d30:	b090      	sub	sp, #64	; 0x40
    8d32:	460c      	mov	r4, r1
    8d34:	4605      	mov	r5, r0
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
    8d36:	2100      	movs	r1, #0
{
    8d38:	4616      	mov	r6, r2
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
    8d3a:	a806      	add	r0, sp, #24
    8d3c:	2228      	movs	r2, #40	; 0x28
    8d3e:	f7f7 fcb7 	bl	6b0 <memset>
    8d42:	231d      	movs	r3, #29
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    8d44:	2214      	movs	r2, #20
    8d46:	2100      	movs	r1, #0
    8d48:	a801      	add	r0, sp, #4
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
    8d4a:	f8ad 301e 	strh.w	r3, [sp, #30]
	struct bt_mesh_net_rx rx = { .rssi = rssi };
    8d4e:	f7f7 fcaf 	bl	6b0 <memset>
    8d52:	f88d 4017 	strb.w	r4, [sp, #23]
	if (!bt_mesh_is_provisioned()) {
    8d56:	f7fe fdc7 	bl	78e8 <bt_mesh_is_provisioned>
    8d5a:	2800      	cmp	r0, #0
    8d5c:	d059      	beq.n	8e12 <bt_mesh_net_recv+0xe6>
	if (bt_mesh_net_decode(data, net_if, &rx, buf)) {
    8d5e:	ab06      	add	r3, sp, #24
    8d60:	aa01      	add	r2, sp, #4
    8d62:	4631      	mov	r1, r6
    8d64:	4628      	mov	r0, r5
    8d66:	f7ff fea5 	bl	8ab4 <bt_mesh_net_decode>
    8d6a:	2800      	cmp	r0, #0
    8d6c:	d151      	bne.n	8e12 <bt_mesh_net_recv+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    8d6e:	a806      	add	r0, sp, #24
    8d70:	f00e ffa8 	bl	17cc4 <net_buf_simple_headroom>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    8d74:	2e02      	cmp	r6, #2
    8d76:	4604      	mov	r4, r0
	state->len = buf->len;
    8d78:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    8d7c:	d104      	bne.n	8d88 <bt_mesh_net_recv+0x5c>
		bt_mesh_proxy_addr_add(data, rx.ctx.addr);
    8d7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    8d82:	4628      	mov	r0, r5
    8d84:	f006 fd9a 	bl	f8bc <bt_mesh_proxy_addr_add>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
    8d88:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    8d8c:	f001 ffa4 	bl	acd8 <bt_mesh_fixed_group_match>
    8d90:	bb88      	cbnz	r0, 8df6 <bt_mesh_net_recv+0xca>
			  bt_mesh_elem_find(rx.dst));
    8d92:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    8d96:	f001 ff75 	bl	ac84 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
    8d9a:	3000      	adds	r0, #0
    8d9c:	bf18      	it	ne
    8d9e:	2001      	movne	r0, #1
    8da0:	f89d 3016 	ldrb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
    8da4:	a901      	add	r1, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
    8da6:	f360 1386 	bfi	r3, r0, #6, #1
	bt_mesh_trans_recv(buf, &rx);
    8daa:	a806      	add	r0, sp, #24
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
    8dac:	f88d 3016 	strb.w	r3, [sp, #22]
	bt_mesh_trans_recv(buf, &rx);
    8db0:	f000 fe78 	bl	9aa4 <bt_mesh_trans_recv>
	if (!BT_MESH_ADDR_IS_UNICAST(rx.dst) ||
    8db4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    8db8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	dd02      	ble.n	8dc6 <bt_mesh_net_recv+0x9a>
    8dc0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8dc4:	d125      	bne.n	8e12 <bt_mesh_net_recv+0xe6>
	buf->data = buf->__buf + state->offset;
    8dc6:	ab08      	add	r3, sp, #32
    8dc8:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    8dcc:	f002 0230 	and.w	r2, r2, #48	; 0x30
    8dd0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8dd4:	9406      	str	r4, [sp, #24]
    8dd6:	2a10      	cmp	r2, #16
	buf->len = state->len;
    8dd8:	f8ad 701c 	strh.w	r7, [sp, #28]
		if (rx->ctx.recv_ttl == 1) {
    8ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    8de0:	d10b      	bne.n	8dfa <bt_mesh_net_recv+0xce>
		if (rx->ctx.recv_ttl == 1) {
    8de2:	2b01      	cmp	r3, #1
    8de4:	d015      	beq.n	8e12 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV) {
    8de6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8dea:	f013 0f30 	tst.w	r3, #48	; 0x30
    8dee:	d013      	beq.n	8e18 <bt_mesh_net_recv+0xec>
		transmit = bt_mesh_net_transmit_get();
    8df0:	f003 fe8c 	bl	cb0c <bt_mesh_net_transmit_get>
    8df4:	e012      	b.n	8e1c <bt_mesh_net_recv+0xf0>
	rx.local_match = (bt_mesh_fixed_group_match(rx.dst) ||
    8df6:	2001      	movs	r0, #1
    8df8:	e7d2      	b.n	8da0 <bt_mesh_net_recv+0x74>
		if (rx->ctx.recv_ttl <= 1) {
    8dfa:	2b01      	cmp	r3, #1
    8dfc:	dd09      	ble.n	8e12 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    8dfe:	2a00      	cmp	r2, #0
    8e00:	d1f1      	bne.n	8de6 <bt_mesh_net_recv+0xba>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    8e02:	f003 fed1 	bl	cba8 <bt_mesh_relay_get>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    8e06:	2801      	cmp	r0, #1
    8e08:	d0ed      	beq.n	8de6 <bt_mesh_net_recv+0xba>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    8e0a:	f003 ff6b 	bl	cce4 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    8e0e:	2801      	cmp	r0, #1
    8e10:	d0e9      	beq.n	8de6 <bt_mesh_net_recv+0xba>
}
    8e12:	b010      	add	sp, #64	; 0x40
    8e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		transmit = bt_mesh_relay_retransmit_get();
    8e18:	f003 feda 	bl	cbd0 <bt_mesh_relay_retransmit_get>
				 BT_MESH_TRANSMIT_INT(transmit), K_NO_WAIT);
    8e1c:	f3c0 02c7 	ubfx	r2, r0, #3, #8
    8e20:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    8e22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8e26:	0052      	lsls	r2, r2, #1
    8e28:	f000 0107 	and.w	r1, r0, #7
    8e2c:	2300      	movs	r3, #0
    8e2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    8e32:	2001      	movs	r0, #1
    8e34:	f7fe fe8e 	bl	7b54 <bt_mesh_adv_create>
	if (!buf) {
    8e38:	4604      	mov	r4, r0
    8e3a:	2800      	cmp	r0, #0
    8e3c:	d0e9      	beq.n	8e12 <bt_mesh_net_recv+0xe6>
	if (rx->net_if != BT_MESH_NET_IF_LOCAL) {
    8e3e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e42:	f003 0330 	and.w	r3, r3, #48	; 0x30
    8e46:	2b10      	cmp	r3, #16
    8e48:	d00d      	beq.n	8e66 <bt_mesh_net_recv+0x13a>
		sbuf->data[1] &= 0x80;
    8e4a:	9a06      	ldr	r2, [sp, #24]
    8e4c:	7853      	ldrb	r3, [r2, #1]
    8e4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8e52:	7053      	strb	r3, [r2, #1]
		sbuf->data[1] |= rx->ctx.recv_ttl - 1;
    8e54:	9a06      	ldr	r2, [sp, #24]
    8e56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8e5a:	7851      	ldrb	r1, [r2, #1]
    8e5c:	f3c3 0306 	ubfx	r3, r3, #0, #7
    8e60:	3b01      	subs	r3, #1
    8e62:	430b      	orrs	r3, r1
    8e64:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    8e66:	f104 0708 	add.w	r7, r4, #8
    8e6a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    8e6e:	9906      	ldr	r1, [sp, #24]
    8e70:	4638      	mov	r0, r7
    8e72:	f00e fe8d 	bl	17b90 <net_buf_simple_add_mem>
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    8e76:	9e01      	ldr	r6, [sp, #4]
	if (rx->friend_cred) {
    8e78:	f89d 3016 	ldrb.w	r3, [sp, #22]
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    8e7c:	7fb2      	ldrb	r2, [r6, #30]
    8e7e:	2559      	movs	r5, #89	; 0x59
    8e80:	4355      	muls	r5, r2
    8e82:	f105 0041 	add.w	r0, r5, #65	; 0x41
	if (rx->friend_cred) {
    8e86:	075a      	lsls	r2, r3, #29
	enc = rx->sub->keys[rx->sub->kr_flag].enc;
    8e88:	4430      	add	r0, r6
	if (rx->friend_cred) {
    8e8a:	d50b      	bpl.n	8ea4 <bt_mesh_net_recv+0x178>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    8e8c:	68a1      	ldr	r1, [r4, #8]
    8e8e:	780a      	ldrb	r2, [r1, #0]
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    8e90:	1973      	adds	r3, r6, r5
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    8e92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	nid = rx->sub->keys[rx->sub->kr_flag].nid;
    8e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    8e9a:	700a      	strb	r2, [r1, #0]
		buf->data[0] |= nid;
    8e9c:	68a2      	ldr	r2, [r4, #8]
    8e9e:	7811      	ldrb	r1, [r2, #0]
    8ea0:	430b      	orrs	r3, r1
    8ea2:	7013      	strb	r3, [r2, #0]
	if (bt_mesh_net_encrypt(enc, &buf->b, BT_MESH_NET_IVI_RX(rx), false)) {
    8ea4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8f44 <bt_mesh_net_recv+0x218>
    8ea8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    8eac:	f8d8 1000 	ldr.w	r1, [r8]
    8eb0:	f002 0201 	and.w	r2, r2, #1
    8eb4:	1a8a      	subs	r2, r1, r2
    8eb6:	2300      	movs	r3, #0
    8eb8:	4639      	mov	r1, r7
    8eba:	f001 fc07 	bl	a6cc <bt_mesh_net_encrypt>
    8ebe:	bb00      	cbnz	r0, 8f02 <bt_mesh_net_recv+0x1d6>
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    8ec0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8ec4:	f8d8 1000 	ldr.w	r1, [r8]
    8ec8:	68a0      	ldr	r0, [r4, #8]
	priv = rx->sub->keys[rx->sub->kr_flag].privacy;
    8eca:	f105 0269 	add.w	r2, r5, #105	; 0x69
	if (bt_mesh_net_obfuscate(buf->data, BT_MESH_NET_IVI_RX(rx), priv)) {
    8ece:	f003 0301 	and.w	r3, r3, #1
    8ed2:	4432      	add	r2, r6
    8ed4:	1ac9      	subs	r1, r1, r3
    8ed6:	f001 fbd1 	bl	a67c <bt_mesh_net_obfuscate>
    8eda:	b990      	cbnz	r0, 8f02 <bt_mesh_net_recv+0x1d6>
	    (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED ||
    8edc:	f003 ff02 	bl	cce4 <bt_mesh_gatt_proxy_get>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    8ee0:	2801      	cmp	r0, #1
    8ee2:	d012      	beq.n	8f0a <bt_mesh_net_recv+0x1de>
	     rx->net_if == BT_MESH_NET_IF_LOCAL)) {
    8ee4:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    8ee8:	f003 0330 	and.w	r3, r3, #48	; 0x30
    8eec:	2b10      	cmp	r3, #16
    8eee:	d00c      	beq.n	8f0a <bt_mesh_net_recv+0x1de>
	if (relay_to_adv(rx->net_if)) {
    8ef0:	f89d 3016 	ldrb.w	r3, [sp, #22]
	switch (net_if) {
    8ef4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    8ef8:	2b01      	cmp	r3, #1
    8efa:	d019      	beq.n	8f30 <bt_mesh_net_recv+0x204>
    8efc:	d311      	bcc.n	8f22 <bt_mesh_net_recv+0x1f6>
    8efe:	2b02      	cmp	r3, #2
    8f00:	d01c      	beq.n	8f3c <bt_mesh_net_recv+0x210>
	net_buf_unref(buf);
    8f02:	4620      	mov	r0, r4
    8f04:	f00e fe1e 	bl	17b44 <net_buf_unref>
    8f08:	e783      	b.n	8e12 <bt_mesh_net_recv+0xe6>
		if (bt_mesh_proxy_relay(&buf->b, rx->dst) &&
    8f0a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    8f0e:	4638      	mov	r0, r7
    8f10:	f006 fd14 	bl	f93c <bt_mesh_proxy_relay>
    8f14:	2800      	cmp	r0, #0
    8f16:	d0eb      	beq.n	8ef0 <bt_mesh_net_recv+0x1c4>
    8f18:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	dcf0      	bgt.n	8f02 <bt_mesh_net_recv+0x1d6>
    8f20:	e7e6      	b.n	8ef0 <bt_mesh_net_recv+0x1c4>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    8f22:	f003 fe41 	bl	cba8 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    8f26:	1e43      	subs	r3, r0, #1
    8f28:	4258      	negs	r0, r3
    8f2a:	4158      	adcs	r0, r3
	if (relay_to_adv(rx->net_if)) {
    8f2c:	2800      	cmp	r0, #0
    8f2e:	d0e8      	beq.n	8f02 <bt_mesh_net_recv+0x1d6>
		bt_mesh_adv_send(buf, NULL, NULL);
    8f30:	2200      	movs	r2, #0
    8f32:	4611      	mov	r1, r2
    8f34:	4620      	mov	r0, r4
    8f36:	f7fe fe1d 	bl	7b74 <bt_mesh_adv_send>
    8f3a:	e7e2      	b.n	8f02 <bt_mesh_net_recv+0x1d6>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    8f3c:	f003 fed2 	bl	cce4 <bt_mesh_gatt_proxy_get>
    8f40:	e7f1      	b.n	8f26 <bt_mesh_net_recv+0x1fa>
    8f42:	bf00      	nop
    8f44:	20006168 	.word	0x20006168

00008f48 <bt_mesh_net_local>:
{
    8f48:	b538      	push	{r3, r4, r5, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    8f4a:	4d08      	ldr	r5, [pc, #32]	; (8f6c <bt_mesh_net_local+0x24>)
    8f4c:	4628      	mov	r0, r5
    8f4e:	f00e fdba 	bl	17ac6 <net_buf_slist_get>
    8f52:	4604      	mov	r4, r0
    8f54:	b900      	cbnz	r0, 8f58 <bt_mesh_net_local+0x10>
}
    8f56:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_net_recv(&buf->b, 0, BT_MESH_NET_IF_LOCAL);
    8f58:	f104 0008 	add.w	r0, r4, #8
    8f5c:	2201      	movs	r2, #1
    8f5e:	2100      	movs	r1, #0
    8f60:	f7ff fee4 	bl	8d2c <bt_mesh_net_recv>
		net_buf_unref(buf);
    8f64:	4620      	mov	r0, r4
    8f66:	f00e fded 	bl	17b44 <net_buf_unref>
    8f6a:	e7ef      	b.n	8f4c <bt_mesh_net_local+0x4>
    8f6c:	20006184 	.word	0x20006184

00008f70 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    8f70:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_complete, ivu_complete);
    8f72:	4c0b      	ldr	r4, [pc, #44]	; (8fa0 <bt_mesh_net_init+0x30>)
    8f74:	490b      	ldr	r1, [pc, #44]	; (8fa4 <bt_mesh_net_init+0x34>)
    8f76:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    8f7a:	f00f fe9b 	bl	18cb4 <k_delayed_work_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8f7e:	f3bf 8f5b 	dmb	ish
    8f82:	f104 0318 	add.w	r3, r4, #24
    8f86:	e853 2f00 	ldrex	r2, [r3]
    8f8a:	f022 0201 	bic.w	r2, r2, #1
    8f8e:	e843 2100 	strex	r1, r2, [r3]
    8f92:	2900      	cmp	r1, #0
    8f94:	d1f7      	bne.n	8f86 <bt_mesh_net_init+0x16>
    8f96:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
    8f9a:	4b03      	ldr	r3, [pc, #12]	; (8fa8 <bt_mesh_net_init+0x38>)
    8f9c:	6163      	str	r3, [r4, #20]
    8f9e:	bd10      	pop	{r4, pc}
    8fa0:	20006168 	.word	0x20006168
    8fa4:	00008711 	.word	0x00008711
    8fa8:	00008f49 	.word	0x00008f49

00008fac <seg_send_start>:

static void seg_send_start(u16_t duration, int err, void *user_data)
{
	struct seg_tx *tx = user_data;

	if (tx->cb && tx->cb->start) {
    8fac:	6d53      	ldr	r3, [r2, #84]	; 0x54
    8fae:	b11b      	cbz	r3, 8fb8 <seg_send_start+0xc>
    8fb0:	681b      	ldr	r3, [r3, #0]
    8fb2:	b10b      	cbz	r3, 8fb8 <seg_send_start+0xc>
		tx->cb->start(duration, err, tx->cb_data);
    8fb4:	6d92      	ldr	r2, [r2, #88]	; 0x58
    8fb6:	4718      	bx	r3
    8fb8:	4770      	bx	lr
	...

00008fbc <is_replay>:

	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
		struct bt_mesh_rpl *rpl = &bt_mesh.rpl[i];

		/* Empty slot */
		if (!rpl->src) {
    8fbc:	4a1b      	ldr	r2, [pc, #108]	; (902c <is_replay+0x70>)
{
    8fbe:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    8fc0:	2300      	movs	r3, #0
    8fc2:	4614      	mov	r4, r2
		if (!rpl->src) {
    8fc4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    8fc8:	f8b1 137c 	ldrh.w	r1, [r1, #892]	; 0x37c
    8fcc:	b961      	cbnz	r1, 8fe8 <is_replay+0x2c>
			rpl->src = rx->ctx.addr;
    8fce:	336f      	adds	r3, #111	; 0x6f
    8fd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8fd4:	8902      	ldrh	r2, [r0, #8]
    8fd6:	809a      	strh	r2, [r3, #4]
			rpl->seq = rx->seq;
    8fd8:	68c2      	ldr	r2, [r0, #12]
    8fda:	609a      	str	r2, [r3, #8]
			rpl->old_iv = rx->old_iv;
    8fdc:	7c82      	ldrb	r2, [r0, #18]
    8fde:	f3c2 0200 	ubfx	r2, r2, #0, #1
    8fe2:	719a      	strb	r2, [r3, #6]

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				rpl->seq = rx->seq;
				rpl->old_iv = rx->old_iv;
				return false;
    8fe4:	2000      	movs	r0, #0
    8fe6:	bd30      	pop	{r4, r5, pc}
		if (rpl->src == rx->ctx.addr) {
    8fe8:	8905      	ldrh	r5, [r0, #8]
    8fea:	428d      	cmp	r5, r1
    8fec:	d119      	bne.n	9022 <is_replay+0x66>
			if (rx->old_iv && !rpl->old_iv) {
    8fee:	7c81      	ldrb	r1, [r0, #18]
    8ff0:	336f      	adds	r3, #111	; 0x6f
    8ff2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8ff6:	f011 0f01 	tst.w	r1, #1
    8ffa:	7992      	ldrb	r2, [r2, #6]
    8ffc:	d002      	beq.n	9004 <is_replay+0x48>
    8ffe:	b912      	cbnz	r2, 9006 <is_replay+0x4a>
				return true;
    9000:	2001      	movs	r0, #1
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    9002:	bd30      	pop	{r4, r5, pc}
			if ((!rx->old_iv && rpl->old_iv) ||
    9004:	b92a      	cbnz	r2, 9012 <is_replay+0x56>
			    rpl->seq < rx->seq) {
    9006:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
			if ((!rx->old_iv && rpl->old_iv) ||
    900a:	6895      	ldr	r5, [r2, #8]
    900c:	68c2      	ldr	r2, [r0, #12]
    900e:	4295      	cmp	r5, r2
    9010:	d2f6      	bcs.n	9000 <is_replay+0x44>
				rpl->seq = rx->seq;
    9012:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9016:	68c2      	ldr	r2, [r0, #12]
    9018:	609a      	str	r2, [r3, #8]
				rpl->old_iv = rx->old_iv;
    901a:	f3c1 0100 	ubfx	r1, r1, #0, #1
    901e:	7199      	strb	r1, [r3, #6]
    9020:	e7e0      	b.n	8fe4 <is_replay+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.rpl); i++) {
    9022:	3301      	adds	r3, #1
    9024:	2b0a      	cmp	r3, #10
    9026:	d1cd      	bne.n	8fc4 <is_replay+0x8>
    9028:	e7ea      	b.n	9000 <is_replay+0x44>
    902a:	bf00      	nop
    902c:	20006168 	.word	0x20006168

00009030 <send_unseg>:
{
    9030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9034:	460d      	mov	r5, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
    9036:	7a81      	ldrb	r1, [r0, #10]
{
    9038:	4616      	mov	r6, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
    903a:	08ca      	lsrs	r2, r1, #3
    903c:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    903e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9042:	0052      	lsls	r2, r2, #1
{
    9044:	4604      	mov	r4, r0
    9046:	461f      	mov	r7, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    9048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    904c:	2300      	movs	r3, #0
    904e:	f001 0107 	and.w	r1, r1, #7
    9052:	2001      	movs	r0, #1
    9054:	f7fe fd7e 	bl	7b54 <bt_mesh_adv_create>
	if (!buf) {
    9058:	4681      	mov	r9, r0
    905a:	b390      	cbz	r0, 90c2 <send_unseg+0x92>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    905c:	2109      	movs	r1, #9
    905e:	f00e fd14 	bl	17a8a <net_buf_reserve>
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    9062:	6863      	ldr	r3, [r4, #4]
    9064:	885a      	ldrh	r2, [r3, #2]
    9066:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    906a:	429a      	cmp	r2, r3
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    906c:	bf18      	it	ne
    906e:	7ae1      	ldrbne	r1, [r4, #11]
    9070:	f109 0808 	add.w	r8, r9, #8
    9074:	bf16      	itet	ne
    9076:	0889      	lsrne	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
    9078:	2100      	moveq	r1, #0
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    907a:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
    907e:	4640      	mov	r0, r8
    9080:	f00e fd8f 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
    9084:	88aa      	ldrh	r2, [r5, #4]
    9086:	6829      	ldr	r1, [r5, #0]
    9088:	4640      	mov	r0, r8
    908a:	f00e fd81 	bl	17b90 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
    908e:	2200      	movs	r2, #0
    9090:	4643      	mov	r3, r8
    9092:	4611      	mov	r1, r2
    9094:	4620      	mov	r0, r4
    9096:	f005 f829 	bl	e0ec <bt_mesh_friend_enqueue_tx>
    909a:	b150      	cbz	r0, 90b2 <send_unseg+0x82>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    909c:	6863      	ldr	r3, [r4, #4]
					      NULL, &buf->b) &&
    909e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    90a2:	2b00      	cmp	r3, #0
    90a4:	dd05      	ble.n	90b2 <send_unseg+0x82>
			net_buf_unref(buf);
    90a6:	4648      	mov	r0, r9
    90a8:	f00e fd4c 	bl	17b44 <net_buf_unref>
			return 0;
    90ac:	2000      	movs	r0, #0
    90ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    90b2:	463b      	mov	r3, r7
    90b4:	4632      	mov	r2, r6
    90b6:	4649      	mov	r1, r9
    90b8:	4620      	mov	r0, r4
}
    90ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    90be:	f7ff bc1f 	b.w	8900 <bt_mesh_net_send>
		return -ENOBUFS;
    90c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    90c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000090cc <sdu_recv>:

static int sdu_recv(struct bt_mesh_net_rx *rx, u8_t hdr, u8_t aszmic,
		    struct net_buf_simple *buf)
{
    90cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90d0:	b0eb      	sub	sp, #428	; 0x1ac
	struct net_buf_simple *sdu =
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
    90d2:	ad09      	add	r5, sp, #36	; 0x24
{
    90d4:	461f      	mov	r7, r3
    90d6:	4691      	mov	r9, r2
    90d8:	4604      	mov	r4, r0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
    90da:	f44f 72c2 	mov.w	r2, #388	; 0x184
{
    90de:	468b      	mov	fp, r1
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
    90e0:	4628      	mov	r0, r5
    90e2:	2100      	movs	r1, #0
    90e4:	f7f7 fae4 	bl	6b0 <memset>
    90e8:	f44f 73be 	mov.w	r3, #380	; 0x17c
	int err;

	BT_DBG("ASZMIC %u AKF %u AID 0x%02x", aszmic, AKF(&hdr), AID(&hdr));
	BT_DBG("len %u: %s", buf->len, bt_hex(buf->data, buf->len));

	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    90ec:	f1b9 0f00 	cmp.w	r9, #0
		NET_BUF_SIMPLE(CONFIG_BT_MESH_RX_SDU_MAX - 4);
    90f0:	80eb      	strh	r3, [r5, #6]
	if (buf->len < 1 + APP_MIC_LEN(aszmic)) {
    90f2:	88bb      	ldrh	r3, [r7, #4]
    90f4:	bf14      	ite	ne
    90f6:	2209      	movne	r2, #9
    90f8:	2205      	moveq	r2, #5
    90fa:	429a      	cmp	r2, r3
    90fc:	dd05      	ble.n	910a <sdu_recv+0x3e>
		BT_ERR("Too short SDU + MIC");
		return -EINVAL;
    90fe:	f06f 0315 	mvn.w	r3, #21
	}

	BT_WARN("No matching AppKey");

	return -EINVAL;
}
    9102:	4618      	mov	r0, r3
    9104:	b06b      	add	sp, #428	; 0x1ac
    9106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && !rx->local_match) {
    910a:	7ca3      	ldrb	r3, [r4, #18]
    910c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    9110:	d0f7      	beq.n	9102 <sdu_recv+0x36>
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->dst)) {
    9112:	8a20      	ldrh	r0, [r4, #16]
    9114:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    9118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    911c:	d232      	bcs.n	9184 <sdu_recv+0xb8>
		ad = bt_mesh_label_uuid_get(rx->dst);
    911e:	f003 ffcf 	bl	d0c0 <bt_mesh_label_uuid_get>
    9122:	4682      	mov	sl, r0
	buf->len -= APP_MIC_LEN(aszmic);
    9124:	88bb      	ldrh	r3, [r7, #4]
    9126:	f1b9 0f00 	cmp.w	r9, #0
    912a:	bf14      	ite	ne
    912c:	2208      	movne	r2, #8
    912e:	2204      	moveq	r2, #4
    9130:	1a9b      	subs	r3, r3, r2
    9132:	80bb      	strh	r3, [r7, #4]
	if (!AKF(&hdr)) {
    9134:	f3cb 1380 	ubfx	r3, fp, #6, #1
    9138:	bb3b      	cbnz	r3, 918a <sdu_recv+0xbe>
	buf->len = 0;
    913a:	80ab      	strh	r3, [r5, #4]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
    913c:	4835      	ldr	r0, [pc, #212]	; (9214 <sdu_recv+0x148>)
    913e:	7ca3      	ldrb	r3, [r4, #18]
	buf->data = buf->__buf + reserve_head;
    9140:	aa0b      	add	r2, sp, #44	; 0x2c
    9142:	602a      	str	r2, [r5, #0]
    9144:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(bt_mesh.dev_key, true, aszmic, buf,
    9148:	6803      	ldr	r3, [r0, #0]
    914a:	1a9b      	subs	r3, r3, r2
    914c:	9305      	str	r3, [sp, #20]
    914e:	68e3      	ldr	r3, [r4, #12]
    9150:	9304      	str	r3, [sp, #16]
    9152:	8a23      	ldrh	r3, [r4, #16]
    9154:	9303      	str	r3, [sp, #12]
    9156:	8923      	ldrh	r3, [r4, #8]
    9158:	9302      	str	r3, [sp, #8]
    915a:	e88d 0420 	stmia.w	sp, {r5, sl}
    915e:	463b      	mov	r3, r7
    9160:	464a      	mov	r2, r9
    9162:	2101      	movs	r1, #1
    9164:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    9168:	f001 fb87 	bl	a87a <bt_mesh_app_decrypt>
		if (err) {
    916c:	9007      	str	r0, [sp, #28]
    916e:	2800      	cmp	r0, #0
    9170:	d1c5      	bne.n	90fe <sdu_recv+0x32>
		rx->ctx.app_idx = BT_MESH_KEY_DEV;
    9172:	f64f 72fe 	movw	r2, #65534	; 0xfffe
		rx->ctx.app_idx = key->app_idx;
    9176:	80e2      	strh	r2, [r4, #6]
		bt_mesh_model_recv(rx, sdu);
    9178:	4629      	mov	r1, r5
    917a:	4620      	mov	r0, r4
    917c:	f001 fdc4 	bl	ad08 <bt_mesh_model_recv>
		return 0;
    9180:	9b07      	ldr	r3, [sp, #28]
    9182:	e7be      	b.n	9102 <sdu_recv+0x36>
		ad = NULL;
    9184:	f04f 0a00 	mov.w	sl, #0
    9188:	e7cc      	b.n	9124 <sdu_recv+0x58>
    918a:	4e23      	ldr	r6, [pc, #140]	; (9218 <sdu_recv+0x14c>)
		if (AID(&hdr) != keys->id) {
    918c:	f00b 033f 	and.w	r3, fp, #63	; 0x3f
	if (!AKF(&hdr)) {
    9190:	f04f 0800 	mov.w	r8, #0
		if (AID(&hdr) != keys->id) {
    9194:	9307      	str	r3, [sp, #28]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
    9196:	f5a6 7bbd 	sub.w	fp, r6, #378	; 0x17a
		if (key->net_idx != rx->sub->net_idx) {
    919a:	6823      	ldr	r3, [r4, #0]
    919c:	f836 2c16 	ldrh.w	r2, [r6, #-22]
    91a0:	8b9b      	ldrh	r3, [r3, #28]
    91a2:	429a      	cmp	r2, r3
    91a4:	d12d      	bne.n	9202 <sdu_recv+0x136>
		if (rx->new_key && key->updated) {
    91a6:	7ca3      	ldrb	r3, [r4, #18]
    91a8:	079b      	lsls	r3, r3, #30
    91aa:	d502      	bpl.n	91b2 <sdu_recv+0xe6>
    91ac:	f816 3c12 	ldrb.w	r3, [r6, #-18]
    91b0:	bb2b      	cbnz	r3, 91fe <sdu_recv+0x132>
    91b2:	f1a6 0011 	sub.w	r0, r6, #17
		if (AID(&hdr) != keys->id) {
    91b6:	7803      	ldrb	r3, [r0, #0]
    91b8:	9a07      	ldr	r2, [sp, #28]
    91ba:	4293      	cmp	r3, r2
    91bc:	d121      	bne.n	9202 <sdu_recv+0x136>
    91be:	ab0b      	add	r3, sp, #44	; 0x2c
    91c0:	602b      	str	r3, [r5, #0]
					  rx->seq, BT_MESH_NET_IVI_RX(rx));
    91c2:	7ca3      	ldrb	r3, [r4, #18]
    91c4:	f003 0201 	and.w	r2, r3, #1
		err = bt_mesh_app_decrypt(keys->val, false, aszmic, buf,
    91c8:	f8db 3000 	ldr.w	r3, [fp]
	buf->len = 0;
    91cc:	2100      	movs	r1, #0
    91ce:	1a9b      	subs	r3, r3, r2
    91d0:	80a9      	strh	r1, [r5, #4]
    91d2:	9305      	str	r3, [sp, #20]
    91d4:	68e3      	ldr	r3, [r4, #12]
    91d6:	9304      	str	r3, [sp, #16]
    91d8:	8a23      	ldrh	r3, [r4, #16]
    91da:	9303      	str	r3, [sp, #12]
    91dc:	8923      	ldrh	r3, [r4, #8]
    91de:	9302      	str	r3, [sp, #8]
    91e0:	e88d 0420 	stmia.w	sp, {r5, sl}
    91e4:	463b      	mov	r3, r7
    91e6:	464a      	mov	r2, r9
    91e8:	3001      	adds	r0, #1
    91ea:	f001 fb46 	bl	a87a <bt_mesh_app_decrypt>
		if (err) {
    91ee:	b940      	cbnz	r0, 9202 <sdu_recv+0x136>
		rx->ctx.app_idx = key->app_idx;
    91f0:	2228      	movs	r2, #40	; 0x28
    91f2:	fb02 b808 	mla	r8, r2, r8, fp
    91f6:	9007      	str	r0, [sp, #28]
    91f8:	f8b8 2166 	ldrh.w	r2, [r8, #358]	; 0x166
    91fc:	e7bb      	b.n	9176 <sdu_recv+0xaa>
    91fe:	4630      	mov	r0, r6
    9200:	e7d9      	b.n	91b6 <sdu_recv+0xea>
    9202:	f108 0801 	add.w	r8, r8, #1
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
    9206:	f1b8 0f02 	cmp.w	r8, #2
    920a:	f106 0628 	add.w	r6, r6, #40	; 0x28
    920e:	f43f af76 	beq.w	90fe <sdu_recv+0x32>
    9212:	e7c2      	b.n	919a <sdu_recv+0xce>
    9214:	20006168 	.word	0x20006168
    9218:	200062e2 	.word	0x200062e2

0000921c <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx)
{
    921c:	b510      	push	{r4, lr}
    921e:	4604      	mov	r4, r0
	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
    9220:	3020      	adds	r0, #32
    9222:	f00f fd65 	bl	18cf0 <k_delayed_work_cancel>

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    9226:	f994 3010 	ldrsb.w	r3, [r4, #16]
    922a:	2b00      	cmp	r3, #0
    922c:	da12      	bge.n	9254 <seg_rx_reset+0x38>
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    922e:	7c22      	ldrb	r2, [r4, #16]
    9230:	f002 021f 	and.w	r2, r2, #31
    9234:	3201      	adds	r2, #1
    9236:	2001      	movs	r0, #1
    9238:	2100      	movs	r1, #0
    923a:	f7f6 ffeb 	bl	214 <__aeabi_llsl>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    923e:	69a3      	ldr	r3, [r4, #24]
	    rx->block != BLOCK_COMPLETE(rx->seg_n)) {
    9240:	3801      	subs	r0, #1
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->obo &&
    9242:	4283      	cmp	r3, r0
    9244:	d006      	beq.n	9254 <seg_rx_reset+0x38>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
    9246:	f104 0308 	add.w	r3, r4, #8
    924a:	8ae2      	ldrh	r2, [r4, #22]
    924c:	8aa1      	ldrh	r1, [r4, #20]
    924e:	6820      	ldr	r0, [r4, #0]
    9250:	f004 ffce 	bl	e1f0 <bt_mesh_friend_clear_incomplete>
	/* We don't reset rx->net and rx->seq_auth here since we need to
	 * be able to send an ack if we receive a segment after we've
	 * already received the full SDU.
	 */

	rx->in_use = 0;
    9254:	7c23      	ldrb	r3, [r4, #16]
    9256:	f36f 1386 	bfc	r3, #6, #1
    925a:	7423      	strb	r3, [r4, #16]
    925c:	bd10      	pop	{r4, pc}
	...

00009260 <seg_tx_reset>:
{
    9260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9262:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    9264:	305c      	adds	r0, #92	; 0x5c
    9266:	f00f fd43 	bl	18cf0 <k_delayed_work_cancel>
	if (!tx->nack_count) {
    926a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tx->cb = NULL;
    926e:	2500      	movs	r5, #0
	tx->seq_auth = 0;
    9270:	2000      	movs	r0, #0
    9272:	2100      	movs	r1, #0
	tx->cb = NULL;
    9274:	6565      	str	r5, [r4, #84]	; 0x54
	tx->cb_data = NULL;
    9276:	65a5      	str	r5, [r4, #88]	; 0x58
	tx->seq_auth = 0;
    9278:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
	tx->sub = NULL;
    927c:	6025      	str	r5, [r4, #0]
	tx->dst = BT_MESH_ADDR_UNASSIGNED;
    927e:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
	if (!tx->nack_count) {
    9282:	b31a      	cbz	r2, 92cc <seg_tx_reset+0x6c>
    9284:	1d26      	adds	r6, r4, #4
		tx->seg[i] = NULL;
    9286:	462f      	mov	r7, r5
	for (i = 0; i <= tx->seg_n; i++) {
    9288:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    928c:	f003 031f 	and.w	r3, r3, #31
    9290:	429d      	cmp	r5, r3
    9292:	dd13      	ble.n	92bc <seg_tx_reset+0x5c>
	tx->nack_count = 0;
    9294:	2500      	movs	r5, #0
	if (bt_mesh.pending_update) {
    9296:	4a0e      	ldr	r2, [pc, #56]	; (92d0 <seg_tx_reset+0x70>)
	tx->nack_count = 0;
    9298:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	if (bt_mesh.pending_update) {
    929c:	79d3      	ldrb	r3, [r2, #7]
    929e:	0719      	lsls	r1, r3, #28
    92a0:	d514      	bpl.n	92cc <seg_tx_reset+0x6c>
		bt_mesh.pending_update = 0;
    92a2:	f365 03c3 	bfi	r3, r5, #3, #1
    92a6:	71d3      	strb	r3, [r2, #7]
		if (bt_mesh_net_iv_update(bt_mesh.iv_index, false)) {
    92a8:	4629      	mov	r1, r5
    92aa:	6810      	ldr	r0, [r2, #0]
    92ac:	f7ff f9b0 	bl	8610 <bt_mesh_net_iv_update>
    92b0:	b160      	cbz	r0, 92cc <seg_tx_reset+0x6c>
			bt_mesh_net_sec_update(NULL);
    92b2:	4628      	mov	r0, r5
}
    92b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_net_sec_update(NULL);
    92b8:	f7ff b996 	b.w	85e8 <bt_mesh_net_sec_update>
		if (!tx->seg[i]) {
    92bc:	6830      	ldr	r0, [r6, #0]
    92be:	b110      	cbz	r0, 92c6 <seg_tx_reset+0x66>
		net_buf_unref(tx->seg[i]);
    92c0:	f00e fc40 	bl	17b44 <net_buf_unref>
		tx->seg[i] = NULL;
    92c4:	6037      	str	r7, [r6, #0]
	for (i = 0; i <= tx->seg_n; i++) {
    92c6:	3501      	adds	r5, #1
    92c8:	3604      	adds	r6, #4
    92ca:	e7dd      	b.n	9288 <seg_tx_reset+0x28>
    92cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92ce:	bf00      	nop
    92d0:	20006168 	.word	0x20006168

000092d4 <send_seg>:
{
    92d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92d8:	4604      	mov	r4, r0
	if (sdu->len < 1) {
    92da:	8888      	ldrh	r0, [r1, #4]
{
    92dc:	b085      	sub	sp, #20
    92de:	4689      	mov	r9, r1
	if (sdu->len < 1) {
    92e0:	2800      	cmp	r0, #0
    92e2:	f000 80d6 	beq.w	9492 <send_seg+0x1be>
	if (sdu->len > BT_MESH_TX_SDU_MAX) {
    92e6:	28cc      	cmp	r0, #204	; 0xcc
    92e8:	f200 80d6 	bhi.w	9498 <send_seg+0x1c4>
		if (!seg_tx[i].nack_count) {
    92ec:	4970      	ldr	r1, [pc, #448]	; (94b0 <send_seg+0x1dc>)
    92ee:	f891 5053 	ldrb.w	r5, [r1, #83]	; 0x53
    92f2:	2d00      	cmp	r5, #0
    92f4:	f000 80d3 	beq.w	949e <send_seg+0x1ca>
		return -EBUSY;
    92f8:	f06f 050f 	mvn.w	r5, #15
}
    92fc:	4628      	mov	r0, r5
    92fe:	b005      	add	sp, #20
    9300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		seg_hdr = SEG_HDR(1, net_tx->aid);
    9304:	7ae7      	ldrb	r7, [r4, #11]
    9306:	08bf      	lsrs	r7, r7, #2
    9308:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
	tx->dst = net_tx->ctx->addr;
    930c:	88ad      	ldrh	r5, [r5, #4]
    930e:	f8a1 5050 	strh.w	r5, [r1, #80]	; 0x50
	tx->seg_n = (sdu->len - 1) / 12;
    9312:	3801      	subs	r0, #1
    9314:	250c      	movs	r5, #12
    9316:	fb90 f0f5 	sdiv	r0, r0, r5
    931a:	f891 5052 	ldrb.w	r5, [r1, #82]	; 0x52
    931e:	f360 0504 	bfi	r5, r0, #0, #5
    9322:	f881 5052 	strb.w	r5, [r1, #82]	; 0x52
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9326:	4d63      	ldr	r5, [pc, #396]	; (94b4 <send_seg+0x1e0>)
	tx->nack_count = tx->seg_n + 1;
    9328:	3001      	adds	r0, #1
    932a:	f881 0053 	strb.w	r0, [r1, #83]	; 0x53
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    932e:	79e8      	ldrb	r0, [r5, #7]
    9330:	f000 0601 	and.w	r6, r0, #1
    9334:	6828      	ldr	r0, [r5, #0]
    9336:	1b80      	subs	r0, r0, r6
    9338:	ea4f 2b10 	mov.w	fp, r0, lsr #8
    933c:	ea4f 6a00 	mov.w	sl, r0, lsl #24
    9340:	6868      	ldr	r0, [r5, #4]
	tx->sub = net_tx->sub;
    9342:	6825      	ldr	r5, [r4, #0]
    9344:	600d      	str	r5, [r1, #0]
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9346:	f3c0 0017 	ubfx	r0, r0, #0, #24
    934a:	ea4a 0a00 	orr.w	sl, sl, r0
	tx->new_key = net_tx->sub->kr_flag;
    934e:	7fad      	ldrb	r5, [r5, #30]
    9350:	f891 0052 	ldrb.w	r0, [r1, #82]	; 0x52
	tx->cb_data = cb_data;
    9354:	658b      	str	r3, [r1, #88]	; 0x58
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9356:	e9c1 ab12 	strd	sl, fp, [r1, #72]	; 0x48
	seq_zero = tx->seq_auth & 0x1fff;
    935a:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    935e:	ea4f 139a 	mov.w	r3, sl, lsr #6
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    9362:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
	tx->new_key = net_tx->sub->kr_flag;
    9366:	f365 1045 	bfi	r0, r5, #5, #1
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    936a:	9301      	str	r3, [sp, #4]
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    936c:	f8df b140 	ldr.w	fp, [pc, #320]	; 94b0 <send_seg+0x1dc>
	tx->new_key = net_tx->sub->kr_flag;
    9370:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    9374:	fa4f f38a 	sxtb.w	r3, sl
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    9378:	2600      	movs	r6, #0
	tx->cb = cb;
    937a:	654a      	str	r2, [r1, #84]	; 0x54
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    937c:	9302      	str	r3, [sp, #8]
	for (seg_o = 0; sdu->len; seg_o++) {
    937e:	f8b9 5004 	ldrh.w	r5, [r9, #4]
    9382:	fa5f fa86 	uxtb.w	sl, r6
    9386:	2d00      	cmp	r5, #0
    9388:	d0b8      	beq.n	92fc <send_seg+0x28>
					 BT_MESH_TRANSMIT_COUNT(net_tx->xmit),
    938a:	7aa1      	ldrb	r1, [r4, #10]
					 BT_MESH_TRANSMIT_INT(net_tx->xmit),
    938c:	08ca      	lsrs	r2, r1, #3
    938e:	3201      	adds	r2, #1
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    9390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9394:	0052      	lsls	r2, r2, #1
    9396:	2300      	movs	r3, #0
    9398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    939c:	f001 0107 	and.w	r1, r1, #7
    93a0:	2001      	movs	r0, #1
    93a2:	f7fe fbd7 	bl	7b54 <bt_mesh_adv_create>
		if (!seg) {
    93a6:	4680      	mov	r8, r0
    93a8:	b928      	cbnz	r0, 93b6 <send_seg+0xe2>
			seg_tx_reset(tx);
    93aa:	4841      	ldr	r0, [pc, #260]	; (94b0 <send_seg+0x1dc>)
    93ac:	f7ff ff58 	bl	9260 <seg_tx_reset>
			return -ENOBUFS;
    93b0:	f06f 0536 	mvn.w	r5, #54	; 0x36
    93b4:	e7a2      	b.n	92fc <send_seg+0x28>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    93b6:	89c3      	ldrh	r3, [r0, #14]
    93b8:	4403      	add	r3, r0
    93ba:	3313      	adds	r3, #19
    93bc:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    93c0:	2204      	movs	r2, #4
    93c2:	681b      	ldr	r3, [r3, #0]
		net_buf_add_u8(seg, seg_hdr);
    93c4:	f108 0508 	add.w	r5, r8, #8
		BT_MESH_ADV(seg)->seg.attempts = SEG_RETRANSMIT_ATTEMPTS;
    93c8:	729a      	strb	r2, [r3, #10]
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    93ca:	2109      	movs	r1, #9
    93cc:	f00e fb5d 	bl	17a8a <net_buf_reserve>
		net_buf_add_u8(seg, seg_hdr);
    93d0:	4639      	mov	r1, r7
    93d2:	4628      	mov	r0, r5
    93d4:	f00e fbe5 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (net_tx->aszmic << 7) | seq_zero >> 6);
    93d8:	7ae1      	ldrb	r1, [r4, #11]
    93da:	9b01      	ldr	r3, [sp, #4]
    93dc:	f3c1 0140 	ubfx	r1, r1, #1, #1
    93e0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
    93e4:	4628      	mov	r0, r5
    93e6:	f00e fbdc 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, (((seq_zero & 0x3f) << 2) |
    93ea:	9b02      	ldr	r3, [sp, #8]
    93ec:	ea43 01da 	orr.w	r1, r3, sl, lsr #3
    93f0:	b2c9      	uxtb	r1, r1
    93f2:	4628      	mov	r0, r5
    93f4:	f00e fbd5 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_add_u8(seg, ((seg_o & 0x07) << 5) | tx->seg_n);
    93f8:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
    93fc:	f3c1 0104 	ubfx	r1, r1, #0, #5
    9400:	ea41 114a 	orr.w	r1, r1, sl, lsl #5
    9404:	b2c9      	uxtb	r1, r1
    9406:	4628      	mov	r0, r5
    9408:	f00e fbcb 	bl	17ba2 <net_buf_simple_add_u8>
		len = min(sdu->len, 12);
    940c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		net_buf_add_mem(seg, sdu->data, len);
    9410:	f8d9 1000 	ldr.w	r1, [r9]
    9414:	2b0c      	cmp	r3, #12
    9416:	bf28      	it	cs
    9418:	230c      	movcs	r3, #12
    941a:	461a      	mov	r2, r3
    941c:	4628      	mov	r0, r5
    941e:	9303      	str	r3, [sp, #12]
    9420:	f00e fbb6 	bl	17b90 <net_buf_simple_add_mem>
		net_buf_simple_pull(sdu, len);
    9424:	9b03      	ldr	r3, [sp, #12]
    9426:	4648      	mov	r0, r9
    9428:	4619      	mov	r1, r3
    942a:	f00e fc16 	bl	17c5a <net_buf_simple_pull>
		tx->seg[seg_o] = net_buf_ref(seg);
    942e:	4640      	mov	r0, r8
    9430:	f00e fba4 	bl	17b7c <net_buf_ref>
			if (seg_o == tx->seg_n) {
    9434:	f89b 1052 	ldrb.w	r1, [fp, #82]	; 0x52
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
    9438:	4a1f      	ldr	r2, [pc, #124]	; (94b8 <send_seg+0x1e4>)
		tx->seg[seg_o] = net_buf_ref(seg);
    943a:	eb0b 038a 	add.w	r3, fp, sl, lsl #2
			if (seg_o == tx->seg_n) {
    943e:	f001 011f 	and.w	r1, r1, #31
		tx->seg[seg_o] = net_buf_ref(seg);
    9442:	6058      	str	r0, [r3, #4]
			if (bt_mesh_friend_enqueue_tx(net_tx, type,
    9444:	4551      	cmp	r1, sl
    9446:	bf0c      	ite	eq
    9448:	2102      	moveq	r1, #2
    944a:	2101      	movne	r1, #1
    944c:	462b      	mov	r3, r5
    944e:	4620      	mov	r0, r4
    9450:	f004 fe4c 	bl	e0ec <bt_mesh_friend_enqueue_tx>
    9454:	b148      	cbz	r0, 946a <send_seg+0x196>
			    BT_MESH_ADDR_IS_UNICAST(net_tx->ctx->addr)) {
    9456:	6863      	ldr	r3, [r4, #4]
						      &seg->b) &&
    9458:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    945c:	2b00      	cmp	r3, #0
    945e:	dd04      	ble.n	946a <send_seg+0x196>
				net_buf_unref(seg);
    9460:	4640      	mov	r0, r8
    9462:	f00e fb6f 	bl	17b44 <net_buf_unref>
				return 0;
    9466:	2500      	movs	r5, #0
    9468:	e748      	b.n	92fc <send_seg+0x28>
		err = bt_mesh_net_send(net_tx, seg,
    946a:	4914      	ldr	r1, [pc, #80]	; (94bc <send_seg+0x1e8>)
    946c:	4a14      	ldr	r2, [pc, #80]	; (94c0 <send_seg+0x1ec>)
    946e:	465b      	mov	r3, fp
    9470:	f1ba 0f00 	cmp.w	sl, #0
    9474:	bf18      	it	ne
    9476:	460a      	movne	r2, r1
    9478:	4620      	mov	r0, r4
    947a:	4641      	mov	r1, r8
    947c:	f7ff fa40 	bl	8900 <bt_mesh_net_send>
    9480:	3601      	adds	r6, #1
		if (err) {
    9482:	4605      	mov	r5, r0
    9484:	2800      	cmp	r0, #0
    9486:	f43f af7a 	beq.w	937e <send_seg+0xaa>
			seg_tx_reset(tx);
    948a:	4809      	ldr	r0, [pc, #36]	; (94b0 <send_seg+0x1dc>)
    948c:	f7ff fee8 	bl	9260 <seg_tx_reset>
			return err;
    9490:	e734      	b.n	92fc <send_seg+0x28>
		return -EINVAL;
    9492:	f06f 0515 	mvn.w	r5, #21
    9496:	e731      	b.n	92fc <send_seg+0x28>
		return -EMSGSIZE;
    9498:	f06f 0523 	mvn.w	r5, #35	; 0x23
    949c:	e72e      	b.n	92fc <send_seg+0x28>
	if (net_tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    949e:	6865      	ldr	r5, [r4, #4]
    94a0:	886f      	ldrh	r7, [r5, #2]
    94a2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    94a6:	42b7      	cmp	r7, r6
    94a8:	f47f af2c 	bne.w	9304 <send_seg+0x30>
		seg_hdr = SEG_HDR(0, 0);
    94ac:	2780      	movs	r7, #128	; 0x80
    94ae:	e72d      	b.n	930c <send_seg+0x38>
    94b0:	200007e0 	.word	0x200007e0
    94b4:	20006168 	.word	0x20006168
    94b8:	20000828 	.word	0x20000828
    94bc:	00019f18 	.word	0x00019f18
    94c0:	00019f10 	.word	0x00019f10

000094c4 <seg_tx_complete>:
{
    94c4:	b510      	push	{r4, lr}
    94c6:	4604      	mov	r4, r0
    94c8:	4608      	mov	r0, r1
	if (tx->cb && tx->cb->end) {
    94ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    94cc:	b11b      	cbz	r3, 94d6 <seg_tx_complete+0x12>
    94ce:	685b      	ldr	r3, [r3, #4]
    94d0:	b10b      	cbz	r3, 94d6 <seg_tx_complete+0x12>
		tx->cb->end(err, tx->cb_data);
    94d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
    94d4:	4798      	blx	r3
	seg_tx_reset(tx);
    94d6:	4620      	mov	r0, r4
}
    94d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	seg_tx_reset(tx);
    94dc:	f7ff bec0 	b.w	9260 <seg_tx_reset>

000094e0 <seg_tx_send_unacked>:
{
    94e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    94e2:	4f19      	ldr	r7, [pc, #100]	; (9548 <seg_tx_send_unacked+0x68>)
{
    94e4:	4604      	mov	r4, r0
    94e6:	1d06      	adds	r6, r0, #4
	for (i = 0; i <= tx->seg_n; i++) {
    94e8:	2500      	movs	r5, #0
    94ea:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    94ee:	f003 031f 	and.w	r3, r3, #31
    94f2:	429d      	cmp	r5, r3
    94f4:	dd01      	ble.n	94fa <seg_tx_send_unacked+0x1a>
}
    94f6:	b003      	add	sp, #12
    94f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct net_buf *seg = tx->seg[i];
    94fa:	f856 1b04 	ldr.w	r1, [r6], #4
		if (!seg) {
    94fe:	b309      	cbz	r1, 9544 <seg_tx_send_unacked+0x64>
    9500:	89cb      	ldrh	r3, [r1, #14]
    9502:	440b      	add	r3, r1
    9504:	3313      	adds	r3, #19
    9506:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(seg)->busy) {
    950a:	681b      	ldr	r3, [r3, #0]
    950c:	7a1a      	ldrb	r2, [r3, #8]
    950e:	0752      	lsls	r2, r2, #29
    9510:	d418      	bmi.n	9544 <seg_tx_send_unacked+0x64>
		if (!(BT_MESH_ADV(seg)->seg.attempts--)) {
    9512:	7a9a      	ldrb	r2, [r3, #10]
    9514:	1e50      	subs	r0, r2, #1
    9516:	7298      	strb	r0, [r3, #10]
    9518:	b93a      	cbnz	r2, 952a <seg_tx_send_unacked+0x4a>
			seg_tx_complete(tx, -ETIMEDOUT);
    951a:	f06f 013b 	mvn.w	r1, #59	; 0x3b
			seg_tx_complete(tx, -EIO);
    951e:	4620      	mov	r0, r4
}
    9520:	b003      	add	sp, #12
    9522:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			seg_tx_complete(tx, -EIO);
    9526:	f7ff bfcd 	b.w	94c4 <seg_tx_complete>
		err = bt_mesh_net_resend(tx->sub, seg, tx->new_key,
    952a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
    952e:	9400      	str	r4, [sp, #0]
    9530:	463b      	mov	r3, r7
    9532:	f3c2 1240 	ubfx	r2, r2, #5, #1
    9536:	6820      	ldr	r0, [r4, #0]
    9538:	f7ff f8f8 	bl	872c <bt_mesh_net_resend>
		if (err) {
    953c:	b110      	cbz	r0, 9544 <seg_tx_send_unacked+0x64>
			seg_tx_complete(tx, -EIO);
    953e:	f06f 0104 	mvn.w	r1, #4
    9542:	e7ec      	b.n	951e <seg_tx_send_unacked+0x3e>
	for (i = 0; i <= tx->seg_n; i++) {
    9544:	3501      	adds	r5, #1
    9546:	e7d0      	b.n	94ea <seg_tx_send_unacked+0xa>
    9548:	00019f18 	.word	0x00019f18

0000954c <ctl_recv>:
{
    954c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    9550:	f011 087f 	ands.w	r8, r1, #127	; 0x7f
{
    9554:	4604      	mov	r4, r0
    9556:	4615      	mov	r5, r2
    9558:	469b      	mov	fp, r3
	switch (ctl_op) {
    955a:	d013      	beq.n	9584 <ctl_recv+0x38>
    955c:	f1b8 0f0a 	cmp.w	r8, #10
    9560:	f000 809c 	beq.w	969c <ctl_recv+0x150>
	if (!rx->local_match) {
    9564:	7c83      	ldrb	r3, [r0, #18]
    9566:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    956a:	d02c      	beq.n	95c6 <ctl_recv+0x7a>
		switch (ctl_op) {
    956c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    9570:	f1b8 0f07 	cmp.w	r8, #7
    9574:	f200 80cf 	bhi.w	9716 <ctl_recv+0x1ca>
    9578:	e8df f008 	tbb	[pc, r8]
    957c:	cdb4cdaf 	.word	0xcdb4cdaf
    9580:	c8c3beb9 	.word	0xc8c3beb9
	if (buf->len < 6) {
    9584:	8893      	ldrh	r3, [r2, #4]
    9586:	2b05      	cmp	r3, #5
    9588:	d804      	bhi.n	9594 <ctl_recv+0x48>
		return -EINVAL;
    958a:	f06f 0415 	mvn.w	r4, #21
}
    958e:	4620      	mov	r0, r4
    9590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    9594:	4610      	mov	r0, r2
    9596:	f00e fb78 	bl	17c8a <net_buf_simple_pull_be16>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    959a:	f994 3012 	ldrsb.w	r3, [r4, #18]
	seq_zero = (seq_zero >> 2) & 0x1fff;
    959e:	f3c0 068c 	ubfx	r6, r0, #2, #13
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    95a2:	2b00      	cmp	r3, #0
	seq_zero = net_buf_simple_pull_be16(buf);
    95a4:	4682      	mov	sl, r0
    95a6:	b2b6      	uxth	r6, r6
    95a8:	f04f 0700 	mov.w	r7, #0
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match) {
    95ac:	da0d      	bge.n	95ca <ctl_recv+0x7e>
		*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(rx), seq_zero);
    95ae:	7ca1      	ldrb	r1, [r4, #18]
    95b0:	4a5a      	ldr	r2, [pc, #360]	; (971c <ctl_recv+0x1d0>)
    95b2:	f001 0301 	and.w	r3, r1, #1
    95b6:	6811      	ldr	r1, [r2, #0]
    95b8:	1ac9      	subs	r1, r1, r3
    95ba:	0a0b      	lsrs	r3, r1, #8
    95bc:	060a      	lsls	r2, r1, #24
    95be:	4316      	orrs	r6, r2
    95c0:	431f      	orrs	r7, r3
    95c2:	e9cb 6700 	strd	r6, r7, [fp]
		return 0;
    95c6:	2400      	movs	r4, #0
    95c8:	e7e1      	b.n	958e <ctl_recv+0x42>
	ack = net_buf_simple_pull_be32(buf);
    95ca:	4628      	mov	r0, r5
    95cc:	f00e fb68 	bl	17ca0 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    95d0:	4953      	ldr	r1, [pc, #332]	; (9720 <ctl_recv+0x1d4>)
    95d2:	e9d1 8912 	ldrd	r8, r9, [r1, #72]	; 0x48
    95d6:	2300      	movs	r3, #0
    95d8:	f641 72ff 	movw	r2, #8191	; 0x1fff
    95dc:	ea03 0309 	and.w	r3, r3, r9
    95e0:	ea02 0208 	and.w	r2, r2, r8
    95e4:	42bb      	cmp	r3, r7
    95e6:	bf08      	it	eq
    95e8:	42b2      	cmpeq	r2, r6
	ack = net_buf_simple_pull_be32(buf);
    95ea:	4605      	mov	r5, r0
    95ec:	460e      	mov	r6, r1
		if ((tx->seq_auth & 0x1fff) != seq_zero) {
    95ee:	d1cc      	bne.n	958a <ctl_recv+0x3e>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    95f0:	8922      	ldrh	r2, [r4, #8]
		if (tx->dst == addr) {
    95f2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
    95f6:	4293      	cmp	r3, r2
    95f8:	d00e      	beq.n	9618 <ctl_recv+0xcc>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    95fa:	f3ca 33cf 	ubfx	r3, sl, #15, #16
    95fe:	2b00      	cmp	r3, #0
    9600:	d0c3      	beq.n	958a <ctl_recv+0x3e>
    9602:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
    9606:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
    960a:	f003 031f 	and.w	r3, r3, #31
    960e:	3301      	adds	r3, #1
    9610:	4299      	cmp	r1, r3
    9612:	d1ba      	bne.n	958a <ctl_recv+0x3e>
			tx->dst = addr;
    9614:	f8a6 2050 	strh.w	r2, [r6, #80]	; 0x50
	*seq_auth = tx->seq_auth;
    9618:	e9cb 8900 	strd	r8, r9, [fp]
	if (!ack) {
    961c:	b92d      	cbnz	r5, 962a <ctl_recv+0xde>
		seg_tx_complete(tx, -ECANCELED);
    961e:	f06f 0147 	mvn.w	r1, #71	; 0x47
    9622:	483f      	ldr	r0, [pc, #252]	; (9720 <ctl_recv+0x1d4>)
    9624:	f7ff ff4e 	bl	94c4 <seg_tx_complete>
    9628:	e7cd      	b.n	95c6 <ctl_recv+0x7a>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    962a:	f896 3052 	ldrb.w	r3, [r6, #82]	; 0x52
	return 32 - __builtin_clz(op);
    962e:	fab5 f285 	clz	r2, r5
    9632:	f1c2 021f 	rsb	r2, r2, #31
    9636:	f003 031f 	and.w	r3, r3, #31
    963a:	429a      	cmp	r2, r3
    963c:	d8a5      	bhi.n	958a <ctl_recv+0x3e>
	k_delayed_work_cancel(&tx->retransmit);
    963e:	4839      	ldr	r0, [pc, #228]	; (9724 <ctl_recv+0x1d8>)
    9640:	f00f fb56 	bl	18cf0 <k_delayed_work_cancel>
			tx->seg[bit - 1] = NULL;
    9644:	f04f 0800 	mov.w	r8, #0
		ack &= ~BIT(bit - 1);
    9648:	f04f 0901 	mov.w	r9, #1
	return __builtin_ffs(op);
    964c:	2d00      	cmp	r5, #0
    964e:	fa95 f7a5 	rbit	r7, r5
    9652:	fab7 f787 	clz	r7, r7
    9656:	bf08      	it	eq
    9658:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	while ((bit = find_lsb_set(ack))) {
    965c:	1c7c      	adds	r4, r7, #1
    965e:	d106      	bne.n	966e <ctl_recv+0x122>
	if (tx->nack_count) {
    9660:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
    9664:	b1ab      	cbz	r3, 9692 <ctl_recv+0x146>
		seg_tx_send_unacked(tx);
    9666:	482e      	ldr	r0, [pc, #184]	; (9720 <ctl_recv+0x1d4>)
    9668:	f7ff ff3a 	bl	94e0 <seg_tx_send_unacked>
    966c:	e78f      	b.n	958e <ctl_recv+0x42>
		if (tx->seg[bit - 1]) {
    966e:	eb06 0487 	add.w	r4, r6, r7, lsl #2
    9672:	6860      	ldr	r0, [r4, #4]
    9674:	b140      	cbz	r0, 9688 <ctl_recv+0x13c>
			net_buf_unref(tx->seg[bit - 1]);
    9676:	f00e fa65 	bl	17b44 <net_buf_unref>
			tx->nack_count--;
    967a:	f896 3053 	ldrb.w	r3, [r6, #83]	; 0x53
			tx->seg[bit - 1] = NULL;
    967e:	f8c4 8004 	str.w	r8, [r4, #4]
			tx->nack_count--;
    9682:	3b01      	subs	r3, #1
    9684:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		ack &= ~BIT(bit - 1);
    9688:	fa09 f707 	lsl.w	r7, r9, r7
    968c:	ea25 0507 	bic.w	r5, r5, r7
    9690:	e7dc      	b.n	964c <ctl_recv+0x100>
		seg_tx_complete(tx, 0);
    9692:	4621      	mov	r1, r4
    9694:	4822      	ldr	r0, [pc, #136]	; (9720 <ctl_recv+0x1d4>)
    9696:	f7ff ff15 	bl	94c4 <seg_tx_complete>
    969a:	e778      	b.n	958e <ctl_recv+0x42>
	if (buf->len < 3) {
    969c:	8893      	ldrh	r3, [r2, #4]
    969e:	2b02      	cmp	r3, #2
    96a0:	f67f af73 	bls.w	958a <ctl_recv+0x3e>
	if (rx->dst != hb_sub_dst) {
    96a4:	4b20      	ldr	r3, [pc, #128]	; (9728 <ctl_recv+0x1dc>)
    96a6:	8a02      	ldrh	r2, [r0, #16]
    96a8:	881b      	ldrh	r3, [r3, #0]
    96aa:	429a      	cmp	r2, r3
    96ac:	d18b      	bne.n	95c6 <ctl_recv+0x7a>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    96ae:	4628      	mov	r0, r5
    96b0:	f00e fadb 	bl	17c6a <net_buf_simple_pull_u8>
    96b4:	4606      	mov	r6, r0
	feat = net_buf_simple_pull_be16(buf);
    96b6:	4628      	mov	r0, r5
    96b8:	f00e fae7 	bl	17c8a <net_buf_simple_pull_be16>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    96bc:	7aa2      	ldrb	r2, [r4, #10]
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
    96be:	8a21      	ldrh	r1, [r4, #16]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    96c0:	f3c2 0206 	ubfx	r2, r2, #0, #7
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    96c4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    96c8:	f1c2 0201 	rsb	r2, r2, #1
    96cc:	4432      	add	r2, r6
	bt_mesh_heartbeat(rx->ctx.addr, rx->dst, hops, feat);
    96ce:	4603      	mov	r3, r0
    96d0:	b2d2      	uxtb	r2, r2
    96d2:	8920      	ldrh	r0, [r4, #8]
    96d4:	f003 f9e4 	bl	caa0 <bt_mesh_heartbeat>
    96d8:	e775      	b.n	95c6 <ctl_recv+0x7a>
			return bt_mesh_friend_poll(rx, buf);
    96da:	4611      	mov	r1, r2
}
    96dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_poll(rx, buf);
    96e0:	f004 bae6 	b.w	dcb0 <bt_mesh_friend_poll>
			return bt_mesh_friend_req(rx, buf);
    96e4:	4611      	mov	r1, r2
}
    96e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_req(rx, buf);
    96ea:	f004 bb59 	b.w	dda0 <bt_mesh_friend_req>
			return bt_mesh_friend_clear(rx, buf);
    96ee:	4611      	mov	r1, r2
}
    96f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear(rx, buf);
    96f4:	f004 ba18 	b.w	db28 <bt_mesh_friend_clear>
			return bt_mesh_friend_clear_cfm(rx, buf);
    96f8:	4611      	mov	r1, r2
}
    96fa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_clear_cfm(rx, buf);
    96fe:	f004 bb1d 	b.w	dd3c <bt_mesh_friend_clear_cfm>
			return bt_mesh_friend_sub_add(rx, buf);
    9702:	4611      	mov	r1, r2
}
    9704:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_add(rx, buf);
    9708:	f004 ba59 	b.w	dbbe <bt_mesh_friend_sub_add>
			return bt_mesh_friend_sub_rem(rx, buf);
    970c:	4611      	mov	r1, r2
}
    970e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return bt_mesh_friend_sub_rem(rx, buf);
    9712:	f004 ba8e 	b.w	dc32 <bt_mesh_friend_sub_rem>
	return -ENOENT;
    9716:	f06f 0401 	mvn.w	r4, #1
    971a:	e738      	b.n	958e <ctl_recv+0x42>
    971c:	20006168 	.word	0x20006168
    9720:	200007e0 	.word	0x200007e0
    9724:	2000083c 	.word	0x2000083c
    9728:	200007da 	.word	0x200007da

0000972c <seg_retransmit>:
	seg_tx_send_unacked(tx);
    972c:	385c      	subs	r0, #92	; 0x5c
    972e:	f7ff bed7 	b.w	94e0 <seg_tx_send_unacked>
	...

00009734 <seg_sent>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9734:	f44f 72c8 	mov.w	r2, #400	; 0x190
    9738:	315c      	adds	r1, #92	; 0x5c
    973a:	4801      	ldr	r0, [pc, #4]	; (9740 <seg_sent+0xc>)
    973c:	f00f bb24 	b.w	18d88 <k_delayed_work_submit_to_queue>
    9740:	20001dd8 	.word	0x20001dd8

00009744 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    9744:	4b01      	ldr	r3, [pc, #4]	; (974c <bt_mesh_set_hb_sub_dst+0x8>)
    9746:	8018      	strh	r0, [r3, #0]
    9748:	4770      	bx	lr
    974a:	bf00      	nop
    974c:	200007da 	.word	0x200007da

00009750 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    9750:	4b03      	ldr	r3, [pc, #12]	; (9760 <bt_mesh_tx_in_progress+0x10>)
    9752:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
}
    9756:	3000      	adds	r0, #0
    9758:	bf18      	it	ne
    975a:	2001      	movne	r0, #1
    975c:	4770      	bx	lr
    975e:	bf00      	nop
    9760:	200007e0 	.word	0x200007e0

00009764 <bt_mesh_app_key_find>:
		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    9764:	4b0f      	ldr	r3, [pc, #60]	; (97a4 <bt_mesh_app_key_find+0x40>)
    9766:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
    976a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    976e:	4291      	cmp	r1, r2
    9770:	461a      	mov	r2, r3
    9772:	d003      	beq.n	977c <bt_mesh_app_key_find+0x18>
    9774:	f8b3 1166 	ldrh.w	r1, [r3, #358]	; 0x166
    9778:	4281      	cmp	r1, r0
    977a:	d00d      	beq.n	9798 <bt_mesh_app_key_find+0x34>
    977c:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
    9780:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9784:	4299      	cmp	r1, r3
    9786:	d00a      	beq.n	979e <bt_mesh_app_key_find+0x3a>
    9788:	f8b2 218e 	ldrh.w	r2, [r2, #398]	; 0x18e
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    978c:	4b06      	ldr	r3, [pc, #24]	; (97a8 <bt_mesh_app_key_find+0x44>)
    978e:	4282      	cmp	r2, r0
    9790:	bf0c      	ite	eq
    9792:	4618      	moveq	r0, r3
    9794:	2000      	movne	r0, #0
    9796:	4770      	bx	lr
    9798:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    979c:	4770      	bx	lr
	return NULL;
    979e:	2000      	movs	r0, #0
}
    97a0:	4770      	bx	lr
    97a2:	bf00      	nop
    97a4:	20006168 	.word	0x20006168
    97a8:	200062f4 	.word	0x200062f4

000097ac <bt_mesh_trans_send>:
{
    97ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    97b0:	4604      	mov	r4, r0
    97b2:	b087      	sub	sp, #28
	if (net_buf_simple_tailroom(msg) < 4) {
    97b4:	4608      	mov	r0, r1
{
    97b6:	460d      	mov	r5, r1
    97b8:	4617      	mov	r7, r2
    97ba:	4698      	mov	r8, r3
	if (net_buf_simple_tailroom(msg) < 4) {
    97bc:	f00e fa87 	bl	17cce <net_buf_simple_tailroom>
    97c0:	2803      	cmp	r0, #3
    97c2:	d804      	bhi.n	97ce <bt_mesh_trans_send+0x22>
		return -EINVAL;
    97c4:	f06f 0015 	mvn.w	r0, #21
}
    97c8:	b007      	add	sp, #28
    97ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (msg->len > 11) {
    97ce:	88ab      	ldrh	r3, [r5, #4]
    97d0:	f8d4 9004 	ldr.w	r9, [r4, #4]
    97d4:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = 1;
    97d6:	bf88      	it	hi
    97d8:	f899 3006 	ldrbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    97dc:	f8b9 0002 	ldrh.w	r0, [r9, #2]
		tx->ctx->send_rel = 1;
    97e0:	bf84      	itt	hi
    97e2:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
    97e6:	f889 3006 	strbhi.w	r3, [r9, #6]
	if (tx->ctx->app_idx == BT_MESH_KEY_DEV) {
    97ea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    97ee:	4298      	cmp	r0, r3
    97f0:	d148      	bne.n	9884 <bt_mesh_trans_send+0xd8>
		tx->aid = 0;
    97f2:	7ae3      	ldrb	r3, [r4, #11]
		key = bt_mesh.dev_key;
    97f4:	4e36      	ldr	r6, [pc, #216]	; (98d0 <bt_mesh_trans_send+0x124>)
		tx->aid = 0;
    97f6:	f36f 0387 	bfc	r3, #2, #6
    97fa:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    97fc:	f999 3006 	ldrsb.w	r3, [r9, #6]
    9800:	2b00      	cmp	r3, #0
    9802:	db54      	blt.n	98ae <bt_mesh_trans_send+0x102>
		tx->aszmic = 0;
    9804:	7ae3      	ldrb	r3, [r4, #11]
    9806:	f36f 0341 	bfc	r3, #1, #1
		tx->aszmic = 1;
    980a:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    980c:	6863      	ldr	r3, [r4, #4]
    980e:	8898      	ldrh	r0, [r3, #4]
    9810:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    9814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9818:	d252      	bcs.n	98c0 <bt_mesh_trans_send+0x114>
		ad = bt_mesh_label_uuid_get(tx->ctx->addr);
    981a:	f003 fc51 	bl	d0c0 <bt_mesh_label_uuid_get>
				  BT_MESH_NET_IVI_TX);
    981e:	4b2d      	ldr	r3, [pc, #180]	; (98d4 <bt_mesh_trans_send+0x128>)
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    9820:	f8d4 c004 	ldr.w	ip, [r4, #4]
				  BT_MESH_NET_IVI_TX);
    9824:	79da      	ldrb	r2, [r3, #7]
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    9826:	6819      	ldr	r1, [r3, #0]
    9828:	f8bc 9002 	ldrh.w	r9, [ip, #2]
				  tx->aszmic, msg, ad, tx->src,
    982c:	f894 e00b 	ldrb.w	lr, [r4, #11]
				  BT_MESH_NET_IVI_TX);
    9830:	f002 0201 	and.w	r2, r2, #1
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    9834:	1a8a      	subs	r2, r1, r2
    9836:	9204      	str	r2, [sp, #16]
				  tx->ctx->addr, bt_mesh.seq,
    9838:	685b      	ldr	r3, [r3, #4]
    983a:	f3c3 0317 	ubfx	r3, r3, #0, #24
	err = bt_mesh_app_encrypt(key, tx->ctx->app_idx == BT_MESH_KEY_DEV,
    983e:	9303      	str	r3, [sp, #12]
    9840:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    9844:	9302      	str	r3, [sp, #8]
    9846:	8923      	ldrh	r3, [r4, #8]
    9848:	e88d 0009 	stmia.w	sp, {r0, r3}
    984c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    9850:	eba9 0000 	sub.w	r0, r9, r0
    9854:	4241      	negs	r1, r0
    9856:	4141      	adcs	r1, r0
    9858:	462b      	mov	r3, r5
    985a:	f3ce 0240 	ubfx	r2, lr, #1, #1
    985e:	4630      	mov	r0, r6
    9860:	f000 ffc6 	bl	a7f0 <bt_mesh_app_encrypt>
	if (err) {
    9864:	2800      	cmp	r0, #0
    9866:	d1af      	bne.n	97c8 <bt_mesh_trans_send+0x1c>
	if (tx->ctx->send_rel) {
    9868:	6863      	ldr	r3, [r4, #4]
    986a:	f993 3006 	ldrsb.w	r3, [r3, #6]
    986e:	2b00      	cmp	r3, #0
		err = send_seg(tx, msg, cb, cb_data);
    9870:	463a      	mov	r2, r7
    9872:	4643      	mov	r3, r8
    9874:	4629      	mov	r1, r5
    9876:	4620      	mov	r0, r4
	if (tx->ctx->send_rel) {
    9878:	da24      	bge.n	98c4 <bt_mesh_trans_send+0x118>
}
    987a:	b007      	add	sp, #28
    987c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_seg(tx, msg, cb, cb_data);
    9880:	f7ff bd28 	b.w	92d4 <send_seg>
		app_key = bt_mesh_app_key_find(tx->ctx->app_idx);
    9884:	f7ff ff6e 	bl	9764 <bt_mesh_app_key_find>
		if (!app_key) {
    9888:	2800      	cmp	r0, #0
    988a:	d09b      	beq.n	97c4 <bt_mesh_trans_send+0x18>
		if (tx->sub->kr_phase == BT_MESH_KR_PHASE_2 &&
    988c:	6823      	ldr	r3, [r4, #0]
    988e:	7fdb      	ldrb	r3, [r3, #31]
    9890:	2b02      	cmp	r3, #2
    9892:	7ae3      	ldrb	r3, [r4, #11]
    9894:	d108      	bne.n	98a8 <bt_mesh_trans_send+0xfc>
    9896:	7902      	ldrb	r2, [r0, #4]
    9898:	b132      	cbz	r2, 98a8 <bt_mesh_trans_send+0xfc>
			tx->aid = app_key->keys[1].id;
    989a:	7d82      	ldrb	r2, [r0, #22]
			key = app_key->keys[1].val;
    989c:	f100 0617 	add.w	r6, r0, #23
			tx->aid = app_key->keys[0].id;
    98a0:	f362 0387 	bfi	r3, r2, #2, #6
    98a4:	72e3      	strb	r3, [r4, #11]
    98a6:	e7a9      	b.n	97fc <bt_mesh_trans_send+0x50>
			key = app_key->keys[0].val;
    98a8:	1d86      	adds	r6, r0, #6
			tx->aid = app_key->keys[0].id;
    98aa:	7942      	ldrb	r2, [r0, #5]
    98ac:	e7f8      	b.n	98a0 <bt_mesh_trans_send+0xf4>
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    98ae:	4628      	mov	r0, r5
    98b0:	f00e fa0d 	bl	17cce <net_buf_simple_tailroom>
    98b4:	2807      	cmp	r0, #7
    98b6:	d9a5      	bls.n	9804 <bt_mesh_trans_send+0x58>
		tx->aszmic = 1;
    98b8:	7ae3      	ldrb	r3, [r4, #11]
    98ba:	f043 0302 	orr.w	r3, r3, #2
    98be:	e7a4      	b.n	980a <bt_mesh_trans_send+0x5e>
		ad = NULL;
    98c0:	2000      	movs	r0, #0
    98c2:	e7ac      	b.n	981e <bt_mesh_trans_send+0x72>
}
    98c4:	b007      	add	sp, #28
    98c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		err = send_unseg(tx, msg, cb, cb_data);
    98ca:	f7ff bbb1 	b.w	9030 <send_unseg>
    98ce:	bf00      	nop
    98d0:	200062bc 	.word	0x200062bc
    98d4:	20006168 	.word	0x20006168

000098d8 <bt_mesh_ctl_send>:
{
    98d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98dc:	468a      	mov	sl, r1
				 BT_MESH_TRANSMIT_COUNT(tx->xmit),
    98de:	7a81      	ldrb	r1, [r0, #10]
{
    98e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    98e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    98e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    98e6:	4690      	mov	r8, r2
				 BT_MESH_TRANSMIT_INT(tx->xmit), BUF_TIMEOUT);
    98e8:	08ca      	lsrs	r2, r1, #3
    98ea:	3201      	adds	r2, #1
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    98ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    98f0:	0052      	lsls	r2, r2, #1
{
    98f2:	4604      	mov	r4, r0
    98f4:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA,
    98f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    98fa:	2300      	movs	r3, #0
    98fc:	f001 0107 	and.w	r1, r1, #7
    9900:	2001      	movs	r0, #1
    9902:	f7fe f927 	bl	7b54 <bt_mesh_adv_create>
	if (!buf) {
    9906:	4683      	mov	fp, r0
    9908:	b358      	cbz	r0, 9962 <bt_mesh_ctl_send+0x8a>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
    990a:	2109      	movs	r1, #9
    990c:	f00e f8bd 	bl	17a8a <net_buf_reserve>
	net_buf_add_u8(buf, TRANS_CTL_HDR(ctl_op, 0));
    9910:	f10b 0308 	add.w	r3, fp, #8
    9914:	f00a 017f 	and.w	r1, sl, #127	; 0x7f
    9918:	4618      	mov	r0, r3
    991a:	469a      	mov	sl, r3
    991c:	f00e f941 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
    9920:	464a      	mov	r2, r9
    9922:	4641      	mov	r1, r8
    9924:	4650      	mov	r0, sl
    9926:	f00e f933 	bl	17b90 <net_buf_simple_add_mem>
		if (bt_mesh_friend_enqueue_tx(tx, BT_MESH_FRIEND_PDU_SINGLE,
    992a:	4653      	mov	r3, sl
    992c:	463a      	mov	r2, r7
    992e:	2100      	movs	r1, #0
    9930:	4620      	mov	r0, r4
    9932:	f004 fbdb 	bl	e0ec <bt_mesh_friend_enqueue_tx>
    9936:	b158      	cbz	r0, 9950 <bt_mesh_ctl_send+0x78>
		    BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr)) {
    9938:	6863      	ldr	r3, [r4, #4]
					      seq_auth, &buf->b) &&
    993a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    993e:	2b00      	cmp	r3, #0
    9940:	dd06      	ble.n	9950 <bt_mesh_ctl_send+0x78>
			net_buf_unref(buf);
    9942:	4658      	mov	r0, fp
    9944:	f00e f8fe 	bl	17b44 <net_buf_unref>
			return 0;
    9948:	2000      	movs	r0, #0
}
    994a:	b001      	add	sp, #4
    994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    9950:	4633      	mov	r3, r6
    9952:	462a      	mov	r2, r5
    9954:	4659      	mov	r1, fp
    9956:	4620      	mov	r0, r4
}
    9958:	b001      	add	sp, #4
    995a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    995e:	f7fe bfcf 	b.w	8900 <bt_mesh_net_send>
		return -ENOBUFS;
    9962:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9966:	e7f0      	b.n	994a <bt_mesh_ctl_send+0x72>

00009968 <send_ack>:
{
    9968:	b5f0      	push	{r4, r5, r6, r7, lr}
    996a:	b08d      	sub	sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
    996c:	f8b0 e01c 	ldrh.w	lr, [r0, #28]
{
    9970:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
	struct bt_mesh_msg_ctx ctx = {
    9974:	f8ad e01c 	strh.w	lr, [sp, #28]
    9978:	2700      	movs	r7, #0
{
    997a:	460c      	mov	r4, r1
	struct bt_mesh_msg_ctx ctx = {
    997c:	f64f 7eff 	movw	lr, #65535	; 0xffff
    9980:	a907      	add	r1, sp, #28
    9982:	9708      	str	r7, [sp, #32]
{
    9984:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	struct bt_mesh_msg_ctx ctx = {
    9986:	f8ad e01e 	strh.w	lr, [sp, #30]
    998a:	f8ad 2020 	strh.w	r2, [sp, #32]
    998e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	struct bt_mesh_net_tx tx = {
    9992:	970b      	str	r7, [sp, #44]	; 0x2c
    9994:	9009      	str	r0, [sp, #36]	; 0x24
    9996:	910a      	str	r1, [sp, #40]	; 0x28
    9998:	b386      	cbz	r6, 99fc <send_ack+0x94>
    999a:	f001 f933 	bl	ac04 <bt_mesh_primary_addr>
    999e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		.xmit = bt_mesh_net_transmit_get(),
    99a2:	f003 f8b3 	bl	cb0c <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    99a6:	b224      	sxth	r4, r4
    99a8:	2c00      	cmp	r4, #0
	struct bt_mesh_net_tx tx = {
    99aa:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    99ae:	dd27      	ble.n	9a00 <send_ack+0x98>
	u16_t seq_zero = *seq_auth & 0x1fff;
    99b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
	dst[1] = val;
    99b2:	f88d 5019 	strb.w	r5, [sp, #25]
    99b6:	881a      	ldrh	r2, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    99b8:	f647 73fc 	movw	r3, #32764	; 0x7ffc
    99bc:	ea03 0382 	and.w	r3, r3, r2, lsl #2
    99c0:	ea43 33c6 	orr.w	r3, r3, r6, lsl #15
    99c4:	b21b      	sxth	r3, r3
	dst[0] = val >> 8;
    99c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[1] = val;
    99ca:	f88d 3015 	strb.w	r3, [sp, #21]
	sys_put_be16(val >> 16, dst);
    99ce:	0c2b      	lsrs	r3, r5, #16
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    99d0:	2100      	movs	r1, #0
	dst[0] = val >> 8;
    99d2:	f88d 2014 	strb.w	r2, [sp, #20]
	dst[1] = val;
    99d6:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[0] = val >> 8;
    99da:	0a1a      	lsrs	r2, r3, #8
    99dc:	f3c5 2307 	ubfx	r3, r5, #8, #8
    99e0:	f88d 2016 	strb.w	r2, [sp, #22]
    99e4:	f88d 3018 	strb.w	r3, [sp, #24]
    99e8:	9102      	str	r1, [sp, #8]
    99ea:	9101      	str	r1, [sp, #4]
    99ec:	9100      	str	r1, [sp, #0]
    99ee:	2306      	movs	r3, #6
    99f0:	aa05      	add	r2, sp, #20
    99f2:	a809      	add	r0, sp, #36	; 0x24
    99f4:	f7ff ff70 	bl	98d8 <bt_mesh_ctl_send>
}
    99f8:	b00d      	add	sp, #52	; 0x34
    99fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
    99fc:	4620      	mov	r0, r4
    99fe:	e7ce      	b.n	999e <send_ack+0x36>
		return 0;
    9a00:	2000      	movs	r0, #0
    9a02:	e7f9      	b.n	99f8 <send_ack+0x90>

00009a04 <seg_ack>:
}

static void seg_ack(struct k_work *work)
{
    9a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9a06:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9a08:	f00e fea6 	bl	18758 <_impl_k_uptime_get_32>
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);

	BT_DBG("rx %p", rx);

	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
    9a0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9a10:	f834 2c0c 	ldrh.w	r2, [r4, #-12]
    9a14:	f834 1c0a 	ldrh.w	r1, [r4, #-10]
    9a18:	1ac0      	subs	r0, r0, r3
    9a1a:	f64e 2360 	movw	r3, #60000	; 0xea60
    9a1e:	4298      	cmp	r0, r3
    9a20:	f814 0c10 	ldrb.w	r0, [r4, #-16]
    9a24:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
		BT_WARN("Incomplete timer expired");
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
    9a28:	ea4f 10d0 	mov.w	r0, r0, lsr #7
    9a2c:	f1a4 0518 	sub.w	r5, r4, #24
    9a30:	9002      	str	r0, [sp, #8]
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
    9a32:	d90e      	bls.n	9a52 <seg_ack+0x4e>
		send_ack(rx->sub, rx->dst, rx->src, rx->ttl,
    9a34:	2000      	movs	r0, #0
    9a36:	9001      	str	r0, [sp, #4]
    9a38:	9500      	str	r5, [sp, #0]
    9a3a:	f854 0c20 	ldr.w	r0, [r4, #-32]
    9a3e:	f7ff ff93 	bl	9968 <send_ack>
    9a42:	f1a4 0620 	sub.w	r6, r4, #32
			 &rx->seq_auth, 0, rx->obo);
		seg_rx_reset(rx);
    9a46:	4630      	mov	r0, r6

	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
		 rx->block, rx->obo);

	k_delayed_work_submit(&rx->ack, ack_timeout(rx));
}
    9a48:	b004      	add	sp, #16
    9a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		seg_rx_reset(rx);
    9a4e:	f7ff bbe5 	b.w	921c <seg_rx_reset>
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    9a52:	f854 0c08 	ldr.w	r0, [r4, #-8]
    9a56:	9001      	str	r0, [sp, #4]
    9a58:	9500      	str	r5, [sp, #0]
    9a5a:	f854 0c20 	ldr.w	r0, [r4, #-32]
    9a5e:	f7ff ff83 	bl	9968 <send_ack>
	to = K_MSEC(150 + (50 * rx->ttl));
    9a62:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
    9a66:	f854 0c08 	ldr.w	r0, [r4, #-8]
	to = K_MSEC(150 + (50 * rx->ttl));
    9a6a:	2232      	movs	r2, #50	; 0x32
    9a6c:	2596      	movs	r5, #150	; 0x96
    9a6e:	fb12 5503 	smlabb	r5, r2, r3, r5
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
    9a72:	f7f6 fc43 	bl	2fc <__popcountsi2>
    9a76:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    9a7a:	f003 031f 	and.w	r3, r3, #31
    9a7e:	1a18      	subs	r0, r3, r0
    9a80:	2364      	movs	r3, #100	; 0x64
    9a82:	fb00 3303 	mla	r3, r0, r3, r3
    9a86:	195a      	adds	r2, r3, r5
    9a88:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
    9a8c:	4804      	ldr	r0, [pc, #16]	; (9aa0 <seg_ack+0x9c>)
    9a8e:	bfb8      	it	lt
    9a90:	f44f 72c8 	movlt.w	r2, #400	; 0x190
    9a94:	4621      	mov	r1, r4
}
    9a96:	b004      	add	sp, #16
    9a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a9c:	f00f b974 	b.w	18d88 <k_delayed_work_submit_to_queue>
    9aa0:	20001dd8 	.word	0x20001dd8

00009aa4 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx)
{
    9aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    9aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    9aac:	b08d      	sub	sp, #52	; 0x34
	u64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    9aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9ab2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
	struct net_buf_simple_state state;
	int err;

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    9ab6:	680b      	ldr	r3, [r1, #0]
{
    9ab8:	4605      	mov	r5, r0
    9aba:	460c      	mov	r4, r1
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
    9abc:	8b98      	ldrh	r0, [r3, #28]
    9abe:	8a09      	ldrh	r1, [r1, #16]
    9ac0:	f004 fa88 	bl	dfd4 <bt_mesh_friend_match>
    9ac4:	7ca3      	ldrb	r3, [r4, #18]
    9ac6:	f360 13c7 	bfi	r3, r0, #7, #1
    9aca:	74a3      	strb	r3, [r4, #18]

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    9acc:	2109      	movs	r1, #9
    9ace:	4628      	mov	r0, r5
    9ad0:	f00e f8c3 	bl	17c5a <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    9ad4:	4628      	mov	r0, r5
    9ad6:	f00e f8f5 	bl	17cc4 <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    9ada:	682f      	ldr	r7, [r5, #0]
    9adc:	9008      	str	r0, [sp, #32]
    9ade:	f997 3000 	ldrsb.w	r3, [r7]
	state->len = buf->len;
    9ae2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	f280 816f 	bge.w	9dca <bt_mesh_trans_recv+0x326>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    9aec:	7ca6      	ldrb	r6, [r4, #18]
    9aee:	f016 06c0 	ands.w	r6, r6, #192	; 0xc0
    9af2:	f000 812d 	beq.w	9d50 <bt_mesh_trans_recv+0x2ac>
	if (buf->len < 5) {
    9af6:	f1bb 0f04 	cmp.w	fp, #4
    9afa:	d804      	bhi.n	9b06 <bt_mesh_trans_recv+0x62>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    9afc:	f04f 0a00 	mov.w	sl, #0
		return -EINVAL;
    9b00:	f06f 0615 	mvn.w	r6, #21
    9b04:	e108      	b.n	9d18 <bt_mesh_trans_recv+0x274>
	net_buf_simple_pull(buf, 1);
    9b06:	2101      	movs	r1, #1
    9b08:	4628      	mov	r0, r5
    9b0a:	f00e f8a6 	bl	17c5a <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    9b0e:	4628      	mov	r0, r5
    9b10:	f00e f8bb 	bl	17c8a <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    9b14:	00c6      	lsls	r6, r0, #3
	seq_zero = (seq_zero >> 2) & 0x1fff;
    9b16:	f3c0 098c 	ubfx	r9, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    9b1a:	4628      	mov	r0, r5
    9b1c:	f00e f8a5 	bl	17c6a <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    9b20:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    9b24:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
    9b28:	b2f6      	uxtb	r6, r6
	seg_n &= 0x1f;
    9b2a:	f000 081f 	and.w	r8, r0, #31
	if (seg_o > seg_n) {
    9b2e:	4546      	cmp	r6, r8
	seg_n = net_buf_simple_pull_u8(buf);
    9b30:	4682      	mov	sl, r0
	if (seg_o > seg_n) {
    9b32:	d8e3      	bhi.n	9afc <bt_mesh_trans_recv+0x58>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    9b34:	4abd      	ldr	r2, [pc, #756]	; (9e2c <bt_mesh_trans_recv+0x388>)
    9b36:	f894 c012 	ldrb.w	ip, [r4, #18]
    9b3a:	6811      	ldr	r1, [r2, #0]
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
    9b3c:	f8b4 e008 	ldrh.w	lr, [r4, #8]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    9b40:	f00c 0301 	and.w	r3, ip, #1
    9b44:	1ac9      	subs	r1, r1, r3
    9b46:	0a0b      	lsrs	r3, r1, #8
    9b48:	9305      	str	r3, [sp, #20]
    9b4a:	060b      	lsls	r3, r1, #24
    9b4c:	9304      	str	r3, [sp, #16]
    9b4e:	68e1      	ldr	r1, [r4, #12]
    9b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b54:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
    9b58:	f021 011f 	bic.w	r1, r1, #31
    9b5c:	ea42 0201 	orr.w	r2, r2, r1
    9b60:	ea42 0209 	orr.w	r2, r2, r9
    9b64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    9b68:	4619      	mov	r1, r3
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
    9b6a:	4bb1      	ldr	r3, [pc, #708]	; (9e30 <bt_mesh_trans_recv+0x38c>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    9b6c:	4610      	mov	r0, r2
		if (rx->src != net_rx->ctx.addr || rx->dst != net_rx->dst) {
    9b6e:	8a9a      	ldrh	r2, [r3, #20]
    9b70:	9204      	str	r2, [sp, #16]
    9b72:	4596      	cmp	lr, r2
    9b74:	4699      	mov	r9, r3
    9b76:	d113      	bne.n	9ba0 <bt_mesh_trans_recv+0xfc>
    9b78:	8adb      	ldrh	r3, [r3, #22]
    9b7a:	9307      	str	r3, [sp, #28]
    9b7c:	9a07      	ldr	r2, [sp, #28]
    9b7e:	8a23      	ldrh	r3, [r4, #16]
    9b80:	4293      	cmp	r3, r2
    9b82:	d10d      	bne.n	9ba0 <bt_mesh_trans_recv+0xfc>
		if (rx->seq_auth == *seq_auth) {
    9b84:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
    9b88:	4299      	cmp	r1, r3
    9b8a:	bf08      	it	eq
    9b8c:	4290      	cmpeq	r0, r2
    9b8e:	f000 815b 	beq.w	9e48 <bt_mesh_trans_recv+0x3a4>
		if (rx->in_use) {
    9b92:	f899 3010 	ldrb.w	r3, [r9, #16]
    9b96:	0659      	lsls	r1, r3, #25
    9b98:	d502      	bpl.n	9ba0 <bt_mesh_trans_recv+0xfc>
			seg_rx_reset(rx);
    9b9a:	4648      	mov	r0, r9
    9b9c:	f7ff fb3e 	bl	921c <seg_rx_reset>
		if (rx->in_use) {
    9ba0:	f899 3010 	ldrb.w	r3, [r9, #16]
    9ba4:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    9ba8:	f040 813b 	bne.w	9e22 <bt_mesh_trans_recv+0x37e>
		rx->in_use = 1;
    9bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9bb0:	f889 3010 	strb.w	r3, [r9, #16]
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    9bb4:	7ca2      	ldrb	r2, [r4, #18]
		rx->ctl = net_rx->ctl;
    9bb6:	f899 0010 	ldrb.w	r0, [r9, #16]
	buf->data = buf->__buf + reserve_head;
    9bba:	4b9e      	ldr	r3, [pc, #632]	; (9e34 <bt_mesh_trans_recv+0x390>)
    9bbc:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    9bc0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		rx->sub = net_rx->sub;
    9bc4:	6823      	ldr	r3, [r4, #0]
    9bc6:	f8c9 3000 	str.w	r3, [r9]
		rx->ctl = net_rx->ctl;
    9bca:	f362 1045 	bfi	r0, r2, #5, #1
		rx->seq_auth = *seq_auth;
    9bce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    9bd2:	e9c9 2302 	strd	r2, r3, [r9, #8]
		rx->seg_n = seg_n;
    9bd6:	4603      	mov	r3, r0
    9bd8:	f36a 0304 	bfi	r3, sl, #0, #5
    9bdc:	f889 3010 	strb.w	r3, [r9, #16]
	buf->len = 0;
    9be0:	f8a9 104c 	strh.w	r1, [r9, #76]	; 0x4c
		rx->hdr = *hdr;
    9be4:	783b      	ldrb	r3, [r7, #0]
    9be6:	f889 3011 	strb.w	r3, [r9, #17]
		rx->ttl = net_rx->ctx.send_ttl;
    9bea:	7ae3      	ldrb	r3, [r4, #11]
    9bec:	f889 3012 	strb.w	r3, [r9, #18]
		rx->src = net_rx->ctx.addr;
    9bf0:	8923      	ldrh	r3, [r4, #8]
    9bf2:	f8a9 3014 	strh.w	r3, [r9, #20]
		rx->dst = net_rx->dst;
    9bf6:	8a23      	ldrh	r3, [r4, #16]
    9bf8:	f8a9 3016 	strh.w	r3, [r9, #22]
	rx->obo = net_rx->friend_match;
    9bfc:	7ca3      	ldrb	r3, [r4, #18]
    9bfe:	f899 2010 	ldrb.w	r2, [r9, #16]
		rx->block = 0;
    9c02:	f8c9 1018 	str.w	r1, [r9, #24]
	rx->obo = net_rx->friend_match;
    9c06:	09db      	lsrs	r3, r3, #7
    9c08:	f363 12c7 	bfi	r2, r3, #7, #1
    9c0c:	f889 2010 	strb.w	r2, [r9, #16]
	if (BIT(seg_o) & rx->block) {
    9c10:	f8d9 1018 	ldr.w	r1, [r9, #24]
    9c14:	fa21 fa06 	lsr.w	sl, r1, r6
    9c18:	f01a 0a01 	ands.w	sl, sl, #1
    9c1c:	f040 80fc 	bne.w	9e18 <bt_mesh_trans_recv+0x374>
	if (seg_o == seg_n) {
    9c20:	4546      	cmp	r6, r8
    9c22:	f899 0010 	ldrb.w	r0, [r9, #16]
    9c26:	f040 8097 	bne.w	9d58 <bt_mesh_trans_recv+0x2b4>
		return 8;
    9c2a:	f010 0f20 	tst.w	r0, #32
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    9c2e:	88aa      	ldrh	r2, [r5, #4]
		return 8;
    9c30:	bf0c      	ite	eq
    9c32:	230c      	moveq	r3, #12
    9c34:	2308      	movne	r3, #8
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    9c36:	fb03 2306 	mla	r3, r3, r6, r2
    9c3a:	b29b      	uxth	r3, r3
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    9c3c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
		rx->buf.len = seg_n * seg_len(rx->ctl) + buf->len;
    9c40:	f8a9 304c 	strh.w	r3, [r9, #76]	; 0x4c
		if (rx->buf.len > CONFIG_BT_MESH_RX_SDU_MAX) {
    9c44:	d857      	bhi.n	9cf6 <bt_mesh_trans_recv+0x252>
    9c46:	f00e fd87 	bl	18758 <_impl_k_uptime_get_32>
	rx->last = k_uptime_get_32();
    9c4a:	f8c9 001c 	str.w	r0, [r9, #28]
 *
 * @return Remaining time (in milliseconds).
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return _timeout_remaining_get(&work->timeout);
    9c4e:	487a      	ldr	r0, [pc, #488]	; (9e38 <bt_mesh_trans_recv+0x394>)
    9c50:	f00f f9c6 	bl	18fe0 <_timeout_remaining_get>
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    9c54:	b9e8      	cbnz	r0, 9c92 <bt_mesh_trans_recv+0x1ee>
	to = K_MSEC(150 + (50 * rx->ttl));
    9c56:	f899 2012 	ldrb.w	r2, [r9, #18]
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
    9c5a:	f8d9 0018 	ldr.w	r0, [r9, #24]
	to = K_MSEC(150 + (50 * rx->ttl));
    9c5e:	2196      	movs	r1, #150	; 0x96
    9c60:	f04f 0a32 	mov.w	sl, #50	; 0x32
    9c64:	fb1a 1a02 	smlabb	sl, sl, r2, r1
	to += K_MSEC(((rx->seg_n + 1) - popcount(rx->block)) * 100);
    9c68:	f7f6 fb48 	bl	2fc <__popcountsi2>
    9c6c:	f899 3010 	ldrb.w	r3, [r9, #16]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9c70:	4972      	ldr	r1, [pc, #456]	; (9e3c <bt_mesh_trans_recv+0x398>)
    9c72:	f003 031f 	and.w	r3, r3, #31
    9c76:	1a18      	subs	r0, r3, r0
    9c78:	2364      	movs	r3, #100	; 0x64
    9c7a:	fb00 3303 	mla	r3, r0, r3, r3
    9c7e:	eb03 020a 	add.w	r2, r3, sl
    9c82:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
    9c86:	bfb8      	it	lt
    9c88:	f44f 72c8 	movlt.w	r2, #400	; 0x190
    9c8c:	486c      	ldr	r0, [pc, #432]	; (9e40 <bt_mesh_trans_recv+0x39c>)
    9c8e:	f00f f87b 	bl	18d88 <k_delayed_work_submit_to_queue>
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    9c92:	f899 3010 	ldrb.w	r3, [r9, #16]
    9c96:	88aa      	ldrh	r2, [r5, #4]
    9c98:	6829      	ldr	r1, [r5, #0]
		return 8;
    9c9a:	f013 0f20 	tst.w	r3, #32
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    9c9e:	4b65      	ldr	r3, [pc, #404]	; (9e34 <bt_mesh_trans_recv+0x390>)
		return 8;
    9ca0:	bf0c      	ite	eq
    9ca2:	200c      	moveq	r0, #12
    9ca4:	2008      	movne	r0, #8
	memcpy(rx->buf_data + (seg_o * seg_len(rx->ctl)), buf->data, buf->len);
    9ca6:	fb06 3000 	mla	r0, r6, r0, r3
    9caa:	f7f6 fcd5 	bl	658 <memcpy>
	rx->block |= BIT(seg_o);
    9cae:	f04f 0a01 	mov.w	sl, #1
    9cb2:	f8d9 3018 	ldr.w	r3, [r9, #24]
    9cb6:	fa0a f606 	lsl.w	r6, sl, r6
    9cba:	4333      	orrs	r3, r6
    9cbc:	f8c9 3018 	str.w	r3, [r9, #24]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9cc0:	eb08 020a 	add.w	r2, r8, sl
    9cc4:	2001      	movs	r0, #1
    9cc6:	2100      	movs	r1, #0
	rx->block |= BIT(seg_o);
    9cc8:	9304      	str	r3, [sp, #16]
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    9cca:	f7f6 faa3 	bl	214 <__aeabi_llsl>
    9cce:	9b04      	ldr	r3, [sp, #16]
    9cd0:	3801      	subs	r0, #1
    9cd2:	4283      	cmp	r3, r0
    9cd4:	f040 80a3 	bne.w	9e1e <bt_mesh_trans_recv+0x37a>
	if (net_rx->local_match && is_replay(net_rx)) {
    9cd8:	7ca3      	ldrb	r3, [r4, #18]
    9cda:	065a      	lsls	r2, r3, #25
    9cdc:	d546      	bpl.n	9d6c <bt_mesh_trans_recv+0x2c8>
    9cde:	4620      	mov	r0, r4
    9ce0:	f7ff f96c 	bl	8fbc <is_replay>
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d041      	beq.n	9d6c <bt_mesh_trans_recv+0x2c8>
		rx->block &= ~BIT(seg_o);
    9ce8:	f8d9 3018 	ldr.w	r3, [r9, #24]
    9cec:	ea23 0606 	bic.w	r6, r3, r6
    9cf0:	f8c9 6018 	str.w	r6, [r9, #24]
    9cf4:	e702      	b.n	9afc <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
    9cf6:	09c0      	lsrs	r0, r0, #7
    9cf8:	9002      	str	r0, [sp, #8]
    9cfa:	a80a      	add	r0, sp, #40	; 0x28
    9cfc:	7ae3      	ldrb	r3, [r4, #11]
    9cfe:	8922      	ldrh	r2, [r4, #8]
    9d00:	8a21      	ldrh	r1, [r4, #16]
    9d02:	9000      	str	r0, [sp, #0]
    9d04:	f8cd a004 	str.w	sl, [sp, #4]
    9d08:	6820      	ldr	r0, [r4, #0]
    9d0a:	f7ff fe2d 	bl	9968 <send_ack>
			seg_rx_reset(rx);
    9d0e:	4848      	ldr	r0, [pc, #288]	; (9e30 <bt_mesh_trans_recv+0x38c>)
    9d10:	f7ff fa84 	bl	921c <seg_rx_reset>
			return -EMSGSIZE;
    9d14:	f06f 0623 	mvn.w	r6, #35	; 0x23
	buf->data = buf->__buf + state->offset;
    9d18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	buf->len = state->len;
    9d1c:	f8a5 b004 	strh.w	fp, [r5, #4]
	buf->data = buf->__buf + state->offset;
    9d20:	f105 0308 	add.w	r3, r5, #8
    9d24:	fa13 f382 	uxtah	r3, r3, r2
    9d28:	602b      	str	r3, [r5, #0]
		bt_mesh_lpn_msg_received(rx);
	}

	net_buf_simple_restore(buf, &state);

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND) && rx->friend_match && !err) {
    9d2a:	f994 3012 	ldrsb.w	r3, [r4, #18]
    9d2e:	2b00      	cmp	r3, #0
    9d30:	da0e      	bge.n	9d50 <bt_mesh_trans_recv+0x2ac>
    9d32:	b96e      	cbnz	r6, 9d50 <bt_mesh_trans_recv+0x2ac>
		if (seq_auth == TRANS_SEQ_AUTH_NVAL) {
    9d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9d38:	3101      	adds	r1, #1
    9d3a:	bf08      	it	eq
    9d3c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
			bt_mesh_friend_enqueue_rx(rx, pdu_type, NULL, buf);
    9d40:	462b      	mov	r3, r5
    9d42:	bf0c      	ite	eq
    9d44:	4632      	moveq	r2, r6
		} else {
			bt_mesh_friend_enqueue_rx(rx, pdu_type, &seq_auth, buf);
    9d46:	aa0a      	addne	r2, sp, #40	; 0x28
    9d48:	4651      	mov	r1, sl
    9d4a:	4620      	mov	r0, r4
    9d4c:	f004 f958 	bl	e000 <bt_mesh_friend_enqueue_rx>
		}
	}

	return err;
}
    9d50:	4630      	mov	r0, r6
    9d52:	b00d      	add	sp, #52	; 0x34
    9d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
    9d58:	f010 0f20 	tst.w	r0, #32
		if (buf->len != seg_len(rx->ctl)) {
    9d5c:	88aa      	ldrh	r2, [r5, #4]
    9d5e:	bf0c      	ite	eq
    9d60:	230c      	moveq	r3, #12
    9d62:	2308      	movne	r3, #8
    9d64:	429a      	cmp	r2, r3
    9d66:	f43f af6e 	beq.w	9c46 <bt_mesh_trans_recv+0x1a2>
    9d6a:	e6c7      	b.n	9afc <bt_mesh_trans_recv+0x58>
	net_rx->seq = (rx->seq_auth & 0xffffff);
    9d6c:	f8d9 3008 	ldr.w	r3, [r9, #8]
	k_delayed_work_cancel(&rx->ack);
    9d70:	4832      	ldr	r0, [pc, #200]	; (9e3c <bt_mesh_trans_recv+0x398>)
	net_rx->seq = (rx->seq_auth & 0xffffff);
    9d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9d76:	60e3      	str	r3, [r4, #12]
	k_delayed_work_cancel(&rx->ack);
    9d78:	f00e ffba 	bl	18cf0 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    9d7c:	f899 0010 	ldrb.w	r0, [r9, #16]
	send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
    9d80:	7ae3      	ldrb	r3, [r4, #11]
    9d82:	8a21      	ldrh	r1, [r4, #16]
    9d84:	8922      	ldrh	r2, [r4, #8]
    9d86:	09c0      	lsrs	r0, r0, #7
    9d88:	9002      	str	r0, [sp, #8]
    9d8a:	f8d9 0018 	ldr.w	r0, [r9, #24]
    9d8e:	9001      	str	r0, [sp, #4]
    9d90:	ae0a      	add	r6, sp, #40	; 0x28
    9d92:	9600      	str	r6, [sp, #0]
    9d94:	6820      	ldr	r0, [r4, #0]
    9d96:	f7ff fde7 	bl	9968 <send_ack>
	if (net_rx->ctl) {
    9d9a:	7ca3      	ldrb	r3, [r4, #18]
    9d9c:	7839      	ldrb	r1, [r7, #0]
    9d9e:	f013 0f08 	tst.w	r3, #8
    9da2:	d00b      	beq.n	9dbc <bt_mesh_trans_recv+0x318>
		err = ctl_recv(net_rx, *hdr, &rx->buf, seq_auth);
    9da4:	4633      	mov	r3, r6
    9da6:	4a27      	ldr	r2, [pc, #156]	; (9e44 <bt_mesh_trans_recv+0x3a0>)
    9da8:	4620      	mov	r0, r4
    9daa:	f7ff fbcf 	bl	954c <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
    9dae:	4606      	mov	r6, r0
	seg_rx_reset(rx);
    9db0:	481f      	ldr	r0, [pc, #124]	; (9e30 <bt_mesh_trans_recv+0x38c>)
    9db2:	f7ff fa33 	bl	921c <seg_rx_reset>
	*pdu_type = BT_MESH_FRIEND_PDU_COMPLETE;
    9db6:	f04f 0a02 	mov.w	sl, #2
    9dba:	e7ad      	b.n	9d18 <bt_mesh_trans_recv+0x274>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &rx->buf);
    9dbc:	787a      	ldrb	r2, [r7, #1]
    9dbe:	4b21      	ldr	r3, [pc, #132]	; (9e44 <bt_mesh_trans_recv+0x3a0>)
    9dc0:	09d2      	lsrs	r2, r2, #7
    9dc2:	4620      	mov	r0, r4
    9dc4:	f7ff f982 	bl	90cc <sdu_recv>
    9dc8:	e7f1      	b.n	9dae <bt_mesh_trans_recv+0x30a>
	if (buf->len < 1) {
    9dca:	f1bb 0f00 	cmp.w	fp, #0
    9dce:	f43f ae95 	beq.w	9afc <bt_mesh_trans_recv+0x58>
	if (rx->local_match && is_replay(rx)) {
    9dd2:	7ca3      	ldrb	r3, [r4, #18]
    9dd4:	065b      	lsls	r3, r3, #25
    9dd6:	d410      	bmi.n	9dfa <bt_mesh_trans_recv+0x356>
	hdr = net_buf_simple_pull_u8(buf);
    9dd8:	4628      	mov	r0, r5
    9dda:	f00d ff46 	bl	17c6a <net_buf_simple_pull_u8>
	if (rx->ctl) {
    9dde:	7ca3      	ldrb	r3, [r4, #18]
    9de0:	f013 0708 	ands.w	r7, r3, #8
	hdr = net_buf_simple_pull_u8(buf);
    9de4:	4601      	mov	r1, r0
	if (rx->ctl) {
    9de6:	d00e      	beq.n	9e06 <bt_mesh_trans_recv+0x362>
		return ctl_recv(rx, hdr, buf, seq_auth);
    9de8:	ab0a      	add	r3, sp, #40	; 0x28
    9dea:	462a      	mov	r2, r5
    9dec:	4620      	mov	r0, r4
    9dee:	f7ff fbad 	bl	954c <ctl_recv>
    9df2:	4606      	mov	r6, r0
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    9df4:	f04f 0a00 	mov.w	sl, #0
    9df8:	e78e      	b.n	9d18 <bt_mesh_trans_recv+0x274>
	if (rx->local_match && is_replay(rx)) {
    9dfa:	4620      	mov	r0, r4
    9dfc:	f7ff f8de 	bl	8fbc <is_replay>
    9e00:	2800      	cmp	r0, #0
    9e02:	d0e9      	beq.n	9dd8 <bt_mesh_trans_recv+0x334>
    9e04:	e67a      	b.n	9afc <bt_mesh_trans_recv+0x58>
		if (!rx->local_match && !rx->friend_match) {
    9e06:	f013 0ac0 	ands.w	sl, r3, #192	; 0xc0
    9e0a:	d008      	beq.n	9e1e <bt_mesh_trans_recv+0x37a>
		return sdu_recv(rx, hdr, 0, buf);
    9e0c:	462b      	mov	r3, r5
    9e0e:	463a      	mov	r2, r7
    9e10:	4620      	mov	r0, r4
    9e12:	f7ff f95b 	bl	90cc <sdu_recv>
    9e16:	e7ec      	b.n	9df2 <bt_mesh_trans_recv+0x34e>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    9e18:	f04f 0a00 	mov.w	sl, #0
    9e1c:	e047      	b.n	9eae <bt_mesh_trans_recv+0x40a>
		return 0;
    9e1e:	2600      	movs	r6, #0
    9e20:	e77a      	b.n	9d18 <bt_mesh_trans_recv+0x274>
	enum bt_mesh_friend_pdu_type pdu_type = BT_MESH_FRIEND_PDU_SINGLE;
    9e22:	f04f 0a00 	mov.w	sl, #0
		return -ENOMEM;
    9e26:	f06f 060b 	mvn.w	r6, #11
    9e2a:	e775      	b.n	9d18 <bt_mesh_trans_recv+0x274>
    9e2c:	20006168 	.word	0x20006168
    9e30:	20006538 	.word	0x20006538
    9e34:	20006588 	.word	0x20006588
    9e38:	20006564 	.word	0x20006564
    9e3c:	20006558 	.word	0x20006558
    9e40:	20001dd8 	.word	0x20001dd8
    9e44:	20006580 	.word	0x20006580
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    9e48:	783a      	ldrb	r2, [r7, #0]
    9e4a:	f899 3011 	ldrb.w	r3, [r9, #17]
    9e4e:	429a      	cmp	r2, r3
    9e50:	f47f ae54 	bne.w	9afc <bt_mesh_trans_recv+0x58>
    9e54:	f899 3010 	ldrb.w	r3, [r9, #16]
    9e58:	f003 021f 	and.w	r2, r3, #31
    9e5c:	4542      	cmp	r2, r8
    9e5e:	f47f ae4d 	bne.w	9afc <bt_mesh_trans_recv+0x58>
	if (rx->ctl != net_rx->ctl) {
    9e62:	f3c3 1340 	ubfx	r3, r3, #5, #1
    9e66:	f3cc 00c0 	ubfx	r0, ip, #3, #1
    9e6a:	4283      	cmp	r3, r0
    9e6c:	f47f ae46 	bne.w	9afc <bt_mesh_trans_recv+0x58>
		if (rx->in_use) {
    9e70:	f899 3010 	ldrb.w	r3, [r9, #16]
    9e74:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    9e78:	f47f aeca 	bne.w	9c10 <bt_mesh_trans_recv+0x16c>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    9e7c:	3201      	adds	r2, #1
    9e7e:	2001      	movs	r0, #1
    9e80:	2100      	movs	r1, #0
    9e82:	9309      	str	r3, [sp, #36]	; 0x24
    9e84:	f7f6 f9c6 	bl	214 <__aeabi_llsl>
    9e88:	f8d9 6018 	ldr.w	r6, [r9, #24]
    9e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e8e:	3801      	subs	r0, #1
    9e90:	4286      	cmp	r6, r0
    9e92:	f47f ae33 	bne.w	9afc <bt_mesh_trans_recv+0x58>
			send_ack(net_rx->sub, net_rx->dst, net_rx->ctx.addr,
    9e96:	7ae2      	ldrb	r2, [r4, #11]
    9e98:	9601      	str	r6, [sp, #4]
    9e9a:	09db      	lsrs	r3, r3, #7
    9e9c:	9302      	str	r3, [sp, #8]
    9e9e:	ab0a      	add	r3, sp, #40	; 0x28
    9ea0:	9300      	str	r3, [sp, #0]
    9ea2:	9907      	ldr	r1, [sp, #28]
    9ea4:	6820      	ldr	r0, [r4, #0]
    9ea6:	4613      	mov	r3, r2
    9ea8:	9a04      	ldr	r2, [sp, #16]
    9eaa:	f7ff fd5d 	bl	9968 <send_ack>
		return -EALREADY;
    9eae:	f06f 0644 	mvn.w	r6, #68	; 0x44
    9eb2:	e731      	b.n	9d18 <bt_mesh_trans_recv+0x274>

00009eb4 <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    9eb4:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i]);
    9eb6:	4c04      	ldr	r4, [pc, #16]	; (9ec8 <bt_mesh_rx_reset+0x14>)
    9eb8:	4620      	mov	r0, r4
    9eba:	f7ff f9af 	bl	921c <seg_rx_reset>
		seg_rx[i].src = BT_MESH_ADDR_UNASSIGNED;
    9ebe:	2300      	movs	r3, #0
    9ec0:	82a3      	strh	r3, [r4, #20]
		seg_rx[i].dst = BT_MESH_ADDR_UNASSIGNED;
    9ec2:	82e3      	strh	r3, [r4, #22]
    9ec4:	bd10      	pop	{r4, pc}
    9ec6:	bf00      	nop
    9ec8:	20006538 	.word	0x20006538

00009ecc <bt_mesh_tx_reset>:
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    9ecc:	4801      	ldr	r0, [pc, #4]	; (9ed4 <bt_mesh_tx_reset+0x8>)
    9ece:	f7ff b9c7 	b.w	9260 <seg_tx_reset>
    9ed2:	bf00      	nop
    9ed4:	200007e0 	.word	0x200007e0

00009ed8 <bt_mesh_trans_init>:
	}
}

void bt_mesh_trans_init(void)
{
    9ed8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    9eda:	4905      	ldr	r1, [pc, #20]	; (9ef0 <bt_mesh_trans_init+0x18>)
    9edc:	4805      	ldr	r0, [pc, #20]	; (9ef4 <bt_mesh_trans_init+0x1c>)
    9ede:	f00e fee9 	bl	18cb4 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    9ee2:	4905      	ldr	r1, [pc, #20]	; (9ef8 <bt_mesh_trans_init+0x20>)
    9ee4:	4805      	ldr	r0, [pc, #20]	; (9efc <bt_mesh_trans_init+0x24>)
	}
}
    9ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    9eea:	f00e bee3 	b.w	18cb4 <k_delayed_work_init>
    9eee:	bf00      	nop
    9ef0:	0000972d 	.word	0x0000972d
    9ef4:	2000083c 	.word	0x2000083c
    9ef8:	00009a05 	.word	0x00009a05
    9efc:	20006558 	.word	0x20006558

00009f00 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
    9f00:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
    9f02:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
    9f04:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
    9f06:	f3c0 2307 	ubfx	r3, r0, #8, #8
    9f0a:	700a      	strb	r2, [r1, #0]
    9f0c:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
    9f0e:	70c8      	strb	r0, [r1, #3]
    9f10:	4770      	bx	lr

00009f12 <bt_mesh_ccm_encrypt>:

static int bt_mesh_ccm_encrypt(const u8_t key[16], u8_t nonce[13],
			       const u8_t *msg, size_t msg_len,
			       const u8_t *aad, size_t aad_len,
			       u8_t *out_msg, size_t mic_size)
{
    9f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f16:	b09b      	sub	sp, #108	; 0x6c
    9f18:	4607      	mov	r7, r0
    9f1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    9f1e:	9102      	str	r1, [sp, #8]
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00) {
    9f20:	f5b8 4f7f 	cmp.w	r8, #65280	; 0xff00
{
    9f24:	4616      	mov	r6, r2
    9f26:	9301      	str	r3, [sp, #4]
	if (aad_len >= 0xff00) {
    9f28:	f080 8135 	bcs.w	a196 <bt_mesh_ccm_encrypt+0x284>
		return -EINVAL;
	}

	/* C_mic = e(AppKey, 0x01 || nonce || 0x0000) */
	pmsg[0] = 0x01;
    9f2c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
    9f30:	2301      	movs	r3, #1
    9f32:	f809 3d50 	strb.w	r3, [r9, #-80]!
	memcpy(pmsg + 1, nonce, 13);
    9f36:	220d      	movs	r2, #13
    9f38:	f10d 0019 	add.w	r0, sp, #25
    9f3c:	f7f6 fb8c 	bl	658 <memcpy>
	dst[0] = val >> 8;
    9f40:	2300      	movs	r3, #0
	sys_put_be16(0x0000, pmsg + 14);

	err = bt_encrypt_be(key, pmsg, cmic);
    9f42:	aa0a      	add	r2, sp, #40	; 0x28
    9f44:	4649      	mov	r1, r9
    9f46:	4638      	mov	r0, r7
    9f48:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
    9f4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9f50:	f006 fefe 	bl	10d50 <bt_encrypt_be>
	if (err) {
    9f54:	4604      	mov	r4, r0
    9f56:	2800      	cmp	r0, #0
    9f58:	d13e      	bne.n	9fd8 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* X_0 = e(AppKey, 0x09 || nonce || length) */
	if (mic_size == sizeof(u64_t)) {
    9f5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9f5c:	2b08      	cmp	r3, #8
    9f5e:	d13f      	bne.n	9fe0 <bt_mesh_ccm_encrypt+0xce>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
    9f60:	f1b8 0f00 	cmp.w	r8, #0
    9f64:	bf14      	ite	ne
    9f66:	2359      	movne	r3, #89	; 0x59
    9f68:	2319      	moveq	r3, #25
	} else {
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
	}

	memcpy(pmsg + 1, nonce, 13);
    9f6a:	220d      	movs	r2, #13
    9f6c:	9902      	ldr	r1, [sp, #8]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
    9f6e:	f88d 3018 	strb.w	r3, [sp, #24]
	memcpy(pmsg + 1, nonce, 13);
    9f72:	f10d 0019 	add.w	r0, sp, #25
    9f76:	f7f6 fb6f 	bl	658 <memcpy>
	sys_put_be16(msg_len, pmsg + 14);
    9f7a:	f8bd 5004 	ldrh.w	r5, [sp, #4]

	err = bt_encrypt_be(key, pmsg, Xn);
    9f7e:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
	dst[0] = val >> 8;
    9f82:	0a2b      	lsrs	r3, r5, #8
    9f84:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    9f88:	465a      	mov	r2, fp
	dst[1] = val;
    9f8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9f8e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    9f92:	4649      	mov	r1, r9
    9f94:	4638      	mov	r0, r7
    9f96:	f006 fedb 	bl	10d50 <bt_encrypt_be>
	if (err) {
    9f9a:	4604      	mov	r4, r0
    9f9c:	b9e0      	cbnz	r0, 9fd8 <bt_mesh_ccm_encrypt+0xc6>
		return err;
	}

	/* If AAD is being used to authenticate, include it here */
	if (aad_len) {
    9f9e:	f1b8 0f00 	cmp.w	r8, #0
    9fa2:	d123      	bne.n	9fec <bt_mesh_ccm_encrypt+0xda>
			return err;
		}
	}

	last_blk = msg_len % 16;
	blk_cnt = (msg_len + 15) / 16;
    9fa4:	9b01      	ldr	r3, [sp, #4]
    9fa6:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
    9faa:	330f      	adds	r3, #15
    9fac:	091b      	lsrs	r3, r3, #4
	if (!last_blk) {
		last_blk = 16;
    9fae:	f015 050f 	ands.w	r5, r5, #15
    9fb2:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
    9fb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9fba:	bf08      	it	eq
    9fbc:	2510      	moveq	r5, #16
	}

	for (j = 0; j < blk_cnt; j++) {
    9fbe:	f04f 0800 	mov.w	r8, #0
    9fc2:	9303      	str	r3, [sp, #12]
    9fc4:	45d8      	cmp	r8, fp
    9fc6:	d35e      	bcc.n	a086 <bt_mesh_ccm_encrypt+0x174>
			}

		}
	}

	memcpy(out_msg + msg_len, mic, mic_size);
    9fc8:	9b01      	ldr	r3, [sp, #4]
    9fca:	9d26      	ldr	r5, [sp, #152]	; 0x98
    9fcc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    9fce:	442b      	add	r3, r5
    9fd0:	a912      	add	r1, sp, #72	; 0x48
    9fd2:	4618      	mov	r0, r3
    9fd4:	f7f6 fb40 	bl	658 <memcpy>

	return 0;
}
    9fd8:	4620      	mov	r0, r4
    9fda:	b01b      	add	sp, #108	; 0x6c
    9fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
    9fe0:	f1b8 0f00 	cmp.w	r8, #0
    9fe4:	bf14      	ite	ne
    9fe6:	2349      	movne	r3, #73	; 0x49
    9fe8:	2309      	moveq	r3, #9
    9fea:	e7be      	b.n	9f6a <bt_mesh_ccm_encrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
    9fec:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    9ff0:	f3c8 2307 	ubfx	r3, r8, #8, #8
    9ff4:	4053      	eors	r3, r2
    9ff6:	f88d 3018 	strb.w	r3, [sp, #24]
    9ffa:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    9ffe:	ea83 0308 	eor.w	r3, r3, r8
    a002:	f88d 3019 	strb.w	r3, [sp, #25]
		aad_len += sizeof(u16_t);
    a006:	f108 0802 	add.w	r8, r8, #2
		j = 0;
    a00a:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
    a00c:	2302      	movs	r3, #2
		while (aad_len > 16) {
    a00e:	f1b8 0f10 	cmp.w	r8, #16
    a012:	d815      	bhi.n	a040 <bt_mesh_ccm_encrypt+0x12e>
			pmsg[i] = Xn[i] ^ aad[j];
    a014:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a016:	2300      	movs	r3, #0
    a018:	4492      	add	sl, r2
    a01a:	aa16      	add	r2, sp, #88	; 0x58
    a01c:	5c98      	ldrb	r0, [r3, r2]
    a01e:	f81a 1003 	ldrb.w	r1, [sl, r3]
    a022:	4041      	eors	r1, r0
    a024:	a806      	add	r0, sp, #24
    a026:	54c1      	strb	r1, [r0, r3]
		for (i = 0; i < aad_len; i++, j++) {
    a028:	3301      	adds	r3, #1
    a02a:	4598      	cmp	r8, r3
    a02c:	d1f6      	bne.n	a01c <bt_mesh_ccm_encrypt+0x10a>
		for (i = aad_len; i < 16; i++) {
    a02e:	2b10      	cmp	r3, #16
    a030:	d124      	bne.n	a07c <bt_mesh_ccm_encrypt+0x16a>
		err = bt_encrypt_be(key, pmsg, Xn);
    a032:	a906      	add	r1, sp, #24
    a034:	4638      	mov	r0, r7
    a036:	f006 fe8b 	bl	10d50 <bt_encrypt_be>
		if (err) {
    a03a:	2800      	cmp	r0, #0
    a03c:	d0b2      	beq.n	9fa4 <bt_mesh_ccm_encrypt+0x92>
    a03e:	e01b      	b.n	a078 <bt_mesh_ccm_encrypt+0x166>
				pmsg[i] = Xn[i] ^ aad[j];
    a040:	9924      	ldr	r1, [sp, #144]	; 0x90
    a042:	ebaa 0003 	sub.w	r0, sl, r3
    a046:	461a      	mov	r2, r3
    a048:	4408      	add	r0, r1
    a04a:	5c81      	ldrb	r1, [r0, r2]
    a04c:	f812 e00b 	ldrb.w	lr, [r2, fp]
    a050:	ea81 010e 	eor.w	r1, r1, lr
    a054:	f802 1009 	strb.w	r1, [r2, r9]
				i++, j++;
    a058:	3201      	adds	r2, #1
			} while (i < 16);
    a05a:	2a10      	cmp	r2, #16
    a05c:	d1f5      	bne.n	a04a <bt_mesh_ccm_encrypt+0x138>
    a05e:	f1c3 0310 	rsb	r3, r3, #16
			err = bt_encrypt_be(key, pmsg, Xn);
    a062:	465a      	mov	r2, fp
    a064:	4649      	mov	r1, r9
    a066:	4638      	mov	r0, r7
    a068:	449a      	add	sl, r3
    a06a:	f006 fe71 	bl	10d50 <bt_encrypt_be>
			aad_len -= 16;
    a06e:	f1a8 0810 	sub.w	r8, r8, #16
			i = 0;
    a072:	2300      	movs	r3, #0
			if (err) {
    a074:	2800      	cmp	r0, #0
    a076:	d0ca      	beq.n	a00e <bt_mesh_ccm_encrypt+0xfc>
			err = bt_encrypt_be(key, pmsg, cmsg);
    a078:	4604      	mov	r4, r0
    a07a:	e7ad      	b.n	9fd8 <bt_mesh_ccm_encrypt+0xc6>
			pmsg[i] = Xn[i];
    a07c:	a806      	add	r0, sp, #24
    a07e:	5cd1      	ldrb	r1, [r2, r3]
    a080:	54c1      	strb	r1, [r0, r3]
		for (i = aad_len; i < 16; i++) {
    a082:	3301      	adds	r3, #1
    a084:	e7d3      	b.n	a02e <bt_mesh_ccm_encrypt+0x11c>
		if (j + 1 == blk_cnt) {
    a086:	f108 0801 	add.w	r8, r8, #1
    a08a:	45c3      	cmp	fp, r8
    a08c:	f04f 0300 	mov.w	r3, #0
    a090:	d14f      	bne.n	a132 <bt_mesh_ccm_encrypt+0x220>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
    a092:	a916      	add	r1, sp, #88	; 0x58
			for (i = 0; i < last_blk; i++) {
    a094:	42ab      	cmp	r3, r5
    a096:	d33f      	bcc.n	a118 <bt_mesh_ccm_encrypt+0x206>
    a098:	462b      	mov	r3, r5
    a09a:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
			for (i = last_blk; i < 16; i++) {
    a09e:	2b10      	cmp	r3, #16
    a0a0:	d141      	bne.n	a126 <bt_mesh_ccm_encrypt+0x214>
			err = bt_encrypt_be(key, pmsg, Xn);
    a0a2:	4652      	mov	r2, sl
    a0a4:	a906      	add	r1, sp, #24
    a0a6:	4638      	mov	r0, r7
    a0a8:	f006 fe52 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a0ac:	2800      	cmp	r0, #0
    a0ae:	d1e3      	bne.n	a078 <bt_mesh_ccm_encrypt+0x166>
				mic[i] = cmic[i] ^ Xn[i];
    a0b0:	aa12      	add	r2, sp, #72	; 0x48
    a0b2:	a90a      	add	r1, sp, #40	; 0x28
    a0b4:	5c43      	ldrb	r3, [r0, r1]
    a0b6:	f810 e00a 	ldrb.w	lr, [r0, sl]
    a0ba:	ea83 030e 	eor.w	r3, r3, lr
    a0be:	5483      	strb	r3, [r0, r2]
			for (i = 0; i < sizeof(mic); i++) {
    a0c0:	3001      	adds	r0, #1
    a0c2:	2810      	cmp	r0, #16
    a0c4:	d1f6      	bne.n	a0b4 <bt_mesh_ccm_encrypt+0x1a2>
			pmsg[0] = 0x01;
    a0c6:	ab1a      	add	r3, sp, #104	; 0x68
    a0c8:	2201      	movs	r2, #1
    a0ca:	f803 2d50 	strb.w	r2, [r3, #-80]!
			memcpy(pmsg + 1, nonce, 13);
    a0ce:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
    a0d0:	9304      	str	r3, [sp, #16]
			memcpy(pmsg + 1, nonce, 13);
    a0d2:	220d      	movs	r2, #13
    a0d4:	f10d 0019 	add.w	r0, sp, #25
			pmsg[0] = 0x01;
    a0d8:	9305      	str	r3, [sp, #20]
			memcpy(pmsg + 1, nonce, 13);
    a0da:	f7f6 fabd 	bl	658 <memcpy>
    a0de:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a0e2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
			err = bt_encrypt_be(key, pmsg, cmsg);
    a0e6:	9b04      	ldr	r3, [sp, #16]
	dst[1] = val;
    a0e8:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
    a0ec:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
    a0f0:	4652      	mov	r2, sl
    a0f2:	4619      	mov	r1, r3
    a0f4:	4638      	mov	r0, r7
    a0f6:	f006 fe2b 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d1bc      	bne.n	a078 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
    a0fe:	5c33      	ldrb	r3, [r6, r0]
    a100:	f810 200a 	ldrb.w	r2, [r0, sl]
    a104:	4053      	eors	r3, r2
    a106:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < last_blk; i++) {
    a10a:	3001      	adds	r0, #1
    a10c:	4285      	cmp	r5, r0
    a10e:	d8f6      	bhi.n	a0fe <bt_mesh_ccm_encrypt+0x1ec>
    a110:	3610      	adds	r6, #16
    a112:	f109 0910 	add.w	r9, r9, #16
    a116:	e755      	b.n	9fc4 <bt_mesh_ccm_encrypt+0xb2>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
    a118:	5cf0      	ldrb	r0, [r6, r3]
    a11a:	5c5a      	ldrb	r2, [r3, r1]
    a11c:	4042      	eors	r2, r0
    a11e:	a806      	add	r0, sp, #24
    a120:	54c2      	strb	r2, [r0, r3]
			for (i = 0; i < last_blk; i++) {
    a122:	3301      	adds	r3, #1
    a124:	e7b6      	b.n	a094 <bt_mesh_ccm_encrypt+0x182>
				pmsg[i] = Xn[i] ^ 0x00;
    a126:	a906      	add	r1, sp, #24
    a128:	f81a 2003 	ldrb.w	r2, [sl, r3]
    a12c:	54ca      	strb	r2, [r1, r3]
			for (i = last_blk; i < 16; i++) {
    a12e:	3301      	adds	r3, #1
    a130:	e7b5      	b.n	a09e <bt_mesh_ccm_encrypt+0x18c>
				pmsg[i] = Xn[i] ^ msg[(j * 16) + i];
    a132:	aa16      	add	r2, sp, #88	; 0x58
    a134:	5cf0      	ldrb	r0, [r6, r3]
    a136:	5c99      	ldrb	r1, [r3, r2]
    a138:	4041      	eors	r1, r0
    a13a:	a806      	add	r0, sp, #24
    a13c:	54c1      	strb	r1, [r0, r3]
			for (i = 0; i < 16; i++) {
    a13e:	3301      	adds	r3, #1
    a140:	2b10      	cmp	r3, #16
    a142:	d1f7      	bne.n	a134 <bt_mesh_ccm_encrypt+0x222>
			err = bt_encrypt_be(key, pmsg, Xn);
    a144:	4601      	mov	r1, r0
    a146:	4638      	mov	r0, r7
    a148:	f006 fe02 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a14c:	2800      	cmp	r0, #0
    a14e:	d193      	bne.n	a078 <bt_mesh_ccm_encrypt+0x166>
			pmsg[0] = 0x01;
    a150:	2301      	movs	r3, #1
			memcpy(pmsg + 1, nonce, 13);
    a152:	220d      	movs	r2, #13
    a154:	9902      	ldr	r1, [sp, #8]
			pmsg[0] = 0x01;
    a156:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(pmsg + 1, nonce, 13);
    a15a:	f10d 0019 	add.w	r0, sp, #25
			err = bt_encrypt_be(key, pmsg, cmsg);
    a15e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
			memcpy(pmsg + 1, nonce, 13);
    a162:	f7f6 fa79 	bl	658 <memcpy>
	dst[0] = val >> 8;
    a166:	f3c8 2307 	ubfx	r3, r8, #8, #8
			err = bt_encrypt_be(key, pmsg, cmsg);
    a16a:	4652      	mov	r2, sl
    a16c:	a906      	add	r1, sp, #24
    a16e:	4638      	mov	r0, r7
    a170:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	dst[1] = val;
    a174:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
    a178:	f006 fdea 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a17c:	2800      	cmp	r0, #0
    a17e:	f47f af7b 	bne.w	a078 <bt_mesh_ccm_encrypt+0x166>
				out_msg[(j * 16) + i] =
    a182:	5c33      	ldrb	r3, [r6, r0]
    a184:	f810 200a 	ldrb.w	r2, [r0, sl]
    a188:	4053      	eors	r3, r2
    a18a:	f809 3000 	strb.w	r3, [r9, r0]
			for (i = 0; i < 16; i++) {
    a18e:	3001      	adds	r0, #1
    a190:	2810      	cmp	r0, #16
    a192:	d1f6      	bne.n	a182 <bt_mesh_ccm_encrypt+0x270>
    a194:	e7bc      	b.n	a110 <bt_mesh_ccm_encrypt+0x1fe>
		return -EINVAL;
    a196:	f06f 0415 	mvn.w	r4, #21
    a19a:	e71d      	b.n	9fd8 <bt_mesh_ccm_encrypt+0xc6>

0000a19c <bt_mesh_ccm_decrypt>:
{
    a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1a0:	b09d      	sub	sp, #116	; 0x74
    a1a2:	4605      	mov	r5, r0
    a1a4:	e88d 0006 	stmia.w	sp, {r1, r2}
    a1a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
	if (msg_len < 1 || aad_len >= 0xff00) {
    a1aa:	461f      	mov	r7, r3
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	f000 8143 	beq.w	a438 <bt_mesh_ccm_decrypt+0x29c>
    a1b2:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
    a1b6:	f080 813f 	bcs.w	a438 <bt_mesh_ccm_decrypt+0x29c>
	pmsg[0] = 0x01;
    a1ba:	ae1c      	add	r6, sp, #112	; 0x70
    a1bc:	2301      	movs	r3, #1
    a1be:	f806 3d50 	strb.w	r3, [r6, #-80]!
	memcpy(pmsg + 1, nonce, 13);
    a1c2:	220d      	movs	r2, #13
    a1c4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
    a1c8:	f7f6 fa46 	bl	658 <memcpy>
	dst[0] = val >> 8;
    a1cc:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, pmsg, cmic);
    a1ce:	aa0c      	add	r2, sp, #48	; 0x30
    a1d0:	4631      	mov	r1, r6
    a1d2:	4628      	mov	r0, r5
    a1d4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
    a1d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    a1dc:	f006 fdb8 	bl	10d50 <bt_encrypt_be>
	if (err) {
    a1e0:	2800      	cmp	r0, #0
    a1e2:	f040 808a 	bne.w	a2fa <bt_mesh_ccm_decrypt+0x15e>
	if (mic_size == sizeof(u64_t)) {
    a1e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1e8:	2b08      	cmp	r3, #8
    a1ea:	d13c      	bne.n	a266 <bt_mesh_ccm_decrypt+0xca>
		pmsg[0] = 0x19 | (aad_len ? 0x40 : 0x00);
    a1ec:	2c00      	cmp	r4, #0
    a1ee:	bf14      	ite	ne
    a1f0:	2359      	movne	r3, #89	; 0x59
    a1f2:	2319      	moveq	r3, #25
	memcpy(pmsg + 1, nonce, 13);
    a1f4:	220d      	movs	r2, #13
    a1f6:	9900      	ldr	r1, [sp, #0]
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
    a1f8:	f88d 3020 	strb.w	r3, [sp, #32]
	memcpy(pmsg + 1, nonce, 13);
    a1fc:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	sys_put_be16(msg_len, pmsg + 14);
    a200:	fa1f fb87 	uxth.w	fp, r7
	err = bt_encrypt_be(key, pmsg, Xn);
    a204:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	memcpy(pmsg + 1, nonce, 13);
    a208:	f7f6 fa26 	bl	658 <memcpy>
	dst[0] = val >> 8;
    a20c:	ea4f 231b 	mov.w	r3, fp, lsr #8
	err = bt_encrypt_be(key, pmsg, Xn);
    a210:	4642      	mov	r2, r8
    a212:	4631      	mov	r1, r6
    a214:	4628      	mov	r0, r5
    a216:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	dst[1] = val;
    a21a:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    a21e:	f006 fd97 	bl	10d50 <bt_encrypt_be>
	if (err) {
    a222:	2800      	cmp	r0, #0
    a224:	d169      	bne.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
	if (aad_len) {
    a226:	bb1c      	cbnz	r4, a270 <bt_mesh_ccm_decrypt+0xd4>
	blk_cnt = (msg_len + 15) / 16;
    a228:	f107 030f 	add.w	r3, r7, #15
    a22c:	091b      	lsrs	r3, r3, #4
		last_blk = 16;
    a22e:	f01b 040f 	ands.w	r4, fp, #15
    a232:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
    a236:	f8dd 9004 	ldr.w	r9, [sp, #4]
    a23a:	fa1f fb83 	uxth.w	fp, r3
	dst[0] = val >> 8;
    a23e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a242:	bf08      	it	eq
    a244:	2410      	moveq	r4, #16
	for (j = 0; j < blk_cnt; j++) {
    a246:	2600      	movs	r6, #0
    a248:	9302      	str	r3, [sp, #8]
    a24a:	455e      	cmp	r6, fp
    a24c:	d35c      	bcc.n	a308 <bt_mesh_ccm_decrypt+0x16c>
	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
    a24e:	9b01      	ldr	r3, [sp, #4]
    a250:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    a252:	443b      	add	r3, r7
    a254:	4619      	mov	r1, r3
    a256:	a818      	add	r0, sp, #96	; 0x60
    a258:	f7f6 f9e9 	bl	62e <memcmp>
		return -EBADMSG;
    a25c:	2800      	cmp	r0, #0
    a25e:	bf18      	it	ne
    a260:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
    a264:	e049      	b.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
		pmsg[0] = 0x09 | (aad_len ? 0x40 : 0x00);
    a266:	2c00      	cmp	r4, #0
    a268:	bf14      	ite	ne
    a26a:	2349      	movne	r3, #73	; 0x49
    a26c:	2309      	moveq	r3, #9
    a26e:	e7c1      	b.n	a1f4 <bt_mesh_ccm_decrypt+0x58>
			pmsg[i] = Xn[i] ^ pmsg[i];
    a270:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a274:	f3c4 2307 	ubfx	r3, r4, #8, #8
    a278:	4053      	eors	r3, r2
    a27a:	f88d 3020 	strb.w	r3, [sp, #32]
    a27e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    a282:	4063      	eors	r3, r4
    a284:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		aad_len += sizeof(u16_t);
    a288:	3402      	adds	r4, #2
		j = 0;
    a28a:	4682      	mov	sl, r0
		for (i = 0; i < sizeof(u16_t); i++) {
    a28c:	2202      	movs	r2, #2
				pmsg[i] = Xn[i] ^ aad[j];
    a28e:	46b1      	mov	r9, r6
		while (aad_len > 16) {
    a290:	2c10      	cmp	r4, #16
    a292:	d816      	bhi.n	a2c2 <bt_mesh_ccm_decrypt+0x126>
			pmsg[i] = Xn[i] ^ aad[j];
    a294:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a296:	2300      	movs	r3, #0
    a298:	eb02 090a 	add.w	r9, r2, sl
    a29c:	aa14      	add	r2, sp, #80	; 0x50
    a29e:	f819 1003 	ldrb.w	r1, [r9, r3]
    a2a2:	5c98      	ldrb	r0, [r3, r2]
    a2a4:	4041      	eors	r1, r0
    a2a6:	54f1      	strb	r1, [r6, r3]
		for (i = 0; i < aad_len; i++, j++) {
    a2a8:	3301      	adds	r3, #1
    a2aa:	429c      	cmp	r4, r3
    a2ac:	d1f7      	bne.n	a29e <bt_mesh_ccm_decrypt+0x102>
			pmsg[i] = Xn[i];
    a2ae:	a908      	add	r1, sp, #32
		for (i = aad_len; i < 16; i++) {
    a2b0:	2b10      	cmp	r3, #16
    a2b2:	d125      	bne.n	a300 <bt_mesh_ccm_decrypt+0x164>
		err = bt_encrypt_be(key, pmsg, Xn);
    a2b4:	4631      	mov	r1, r6
    a2b6:	4628      	mov	r0, r5
    a2b8:	f006 fd4a 	bl	10d50 <bt_encrypt_be>
		if (err) {
    a2bc:	2800      	cmp	r0, #0
    a2be:	d0b3      	beq.n	a228 <bt_mesh_ccm_decrypt+0x8c>
    a2c0:	e01b      	b.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
				pmsg[i] = Xn[i] ^ aad[j];
    a2c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a2c4:	ebaa 0e02 	sub.w	lr, sl, r2
    a2c8:	4611      	mov	r1, r2
    a2ca:	449e      	add	lr, r3
    a2cc:	f81e 0001 	ldrb.w	r0, [lr, r1]
    a2d0:	f811 c008 	ldrb.w	ip, [r1, r8]
    a2d4:	ea80 000c 	eor.w	r0, r0, ip
    a2d8:	f801 0009 	strb.w	r0, [r1, r9]
				i++, j++;
    a2dc:	3101      	adds	r1, #1
			} while (i < 16);
    a2de:	2910      	cmp	r1, #16
    a2e0:	d1f4      	bne.n	a2cc <bt_mesh_ccm_decrypt+0x130>
    a2e2:	f1c2 0210 	rsb	r2, r2, #16
    a2e6:	4492      	add	sl, r2
			err = bt_encrypt_be(key, pmsg, Xn);
    a2e8:	4649      	mov	r1, r9
    a2ea:	4642      	mov	r2, r8
    a2ec:	4628      	mov	r0, r5
    a2ee:	f006 fd2f 	bl	10d50 <bt_encrypt_be>
			aad_len -= 16;
    a2f2:	3c10      	subs	r4, #16
			i = 0;
    a2f4:	2200      	movs	r2, #0
			if (err) {
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d0ca      	beq.n	a290 <bt_mesh_ccm_decrypt+0xf4>
}
    a2fa:	b01d      	add	sp, #116	; 0x74
    a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pmsg[i] = Xn[i];
    a300:	5cd0      	ldrb	r0, [r2, r3]
    a302:	5458      	strb	r0, [r3, r1]
		for (i = aad_len; i < 16; i++) {
    a304:	3301      	adds	r3, #1
    a306:	e7d3      	b.n	a2b0 <bt_mesh_ccm_decrypt+0x114>
		if (j + 1 == blk_cnt) {
    a308:	3601      	adds	r6, #1
    a30a:	2301      	movs	r3, #1
    a30c:	45b3      	cmp	fp, r6
			pmsg[0] = 0x01;
    a30e:	f88d 3020 	strb.w	r3, [sp, #32]
			memcpy(pmsg + 1, nonce, 13);
    a312:	f04f 020d 	mov.w	r2, #13
    a316:	9900      	ldr	r1, [sp, #0]
    a318:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		if (j + 1 == blk_cnt) {
    a31c:	d158      	bne.n	a3d0 <bt_mesh_ccm_decrypt+0x234>
			err = bt_encrypt_be(key, pmsg, cmsg);
    a31e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
			memcpy(pmsg + 1, nonce, 13);
    a322:	f7f6 f999 	bl	658 <memcpy>
    a326:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a32a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
    a32e:	4642      	mov	r2, r8
    a330:	a908      	add	r1, sp, #32
    a332:	4628      	mov	r0, r5
	dst[1] = val;
    a334:	f88d b02f 	strb.w	fp, [sp, #47]	; 0x2f
    a338:	f006 fd0a 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a33c:	2800      	cmp	r0, #0
    a33e:	d1dc      	bne.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
    a340:	ab04      	add	r3, sp, #16
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
    a342:	4642      	mov	r2, r8
			for (i = 0; i < last_blk; i++) {
    a344:	42a0      	cmp	r0, r4
    a346:	46a0      	mov	r8, r4
    a348:	d332      	bcc.n	a3b0 <bt_mesh_ccm_decrypt+0x214>
			memcpy(out_msg + (j * 16), msg, last_blk);
    a34a:	4619      	mov	r1, r3
    a34c:	4622      	mov	r2, r4
    a34e:	4650      	mov	r0, sl
    a350:	9303      	str	r3, [sp, #12]
    a352:	f7f6 f981 	bl	658 <memcpy>
				pmsg[i] = Xn[i] ^ msg[i];
    a356:	9b03      	ldr	r3, [sp, #12]
			for (i = 0; i < last_blk; i++) {
    a358:	2200      	movs	r2, #0
				pmsg[i] = Xn[i] ^ msg[i];
    a35a:	a908      	add	r1, sp, #32
    a35c:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
    a360:	f812 000e 	ldrb.w	r0, [r2, lr]
    a364:	f812 c003 	ldrb.w	ip, [r2, r3]
    a368:	ea80 000c 	eor.w	r0, r0, ip
    a36c:	5450      	strb	r0, [r2, r1]
			for (i = 0; i < last_blk; i++) {
    a36e:	3201      	adds	r2, #1
    a370:	4294      	cmp	r4, r2
    a372:	d8f5      	bhi.n	a360 <bt_mesh_ccm_decrypt+0x1c4>
    a374:	ab14      	add	r3, sp, #80	; 0x50
			for (i = last_blk; i < 16; i++) {
    a376:	f1b8 0f10 	cmp.w	r8, #16
    a37a:	d122      	bne.n	a3c2 <bt_mesh_ccm_decrypt+0x226>
			err = bt_encrypt_be(key, pmsg, Xn);
    a37c:	461a      	mov	r2, r3
    a37e:	4628      	mov	r0, r5
    a380:	9303      	str	r3, [sp, #12]
    a382:	f006 fce5 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a386:	2800      	cmp	r0, #0
    a388:	d1b7      	bne.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
				mic[i] = cmic[i] ^ Xn[i];
    a38a:	9b03      	ldr	r3, [sp, #12]
    a38c:	a918      	add	r1, sp, #96	; 0x60
    a38e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    a392:	f810 200e 	ldrb.w	r2, [r0, lr]
    a396:	f810 c003 	ldrb.w	ip, [r0, r3]
    a39a:	ea82 020c 	eor.w	r2, r2, ip
    a39e:	5442      	strb	r2, [r0, r1]
			for (i = 0; i < sizeof(mic); i++) {
    a3a0:	3001      	adds	r0, #1
    a3a2:	2810      	cmp	r0, #16
    a3a4:	d1f5      	bne.n	a392 <bt_mesh_ccm_decrypt+0x1f6>
    a3a6:	f10a 0a10 	add.w	sl, sl, #16
    a3aa:	f109 0910 	add.w	r9, r9, #16
    a3ae:	e74c      	b.n	a24a <bt_mesh_ccm_decrypt+0xae>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
    a3b0:	f819 1000 	ldrb.w	r1, [r9, r0]
    a3b4:	f810 e002 	ldrb.w	lr, [r0, r2]
    a3b8:	ea81 010e 	eor.w	r1, r1, lr
    a3bc:	5419      	strb	r1, [r3, r0]
			for (i = 0; i < last_blk; i++) {
    a3be:	3001      	adds	r0, #1
    a3c0:	e7c0      	b.n	a344 <bt_mesh_ccm_decrypt+0x1a8>
				pmsg[i] = Xn[i] ^ 0x00;
    a3c2:	f813 2008 	ldrb.w	r2, [r3, r8]
    a3c6:	f801 2008 	strb.w	r2, [r1, r8]
			for (i = last_blk; i < 16; i++) {
    a3ca:	f108 0801 	add.w	r8, r8, #1
    a3ce:	e7d2      	b.n	a376 <bt_mesh_ccm_decrypt+0x1da>
			memcpy(pmsg + 1, nonce, 13);
    a3d0:	f7f6 f942 	bl	658 <memcpy>
	dst[0] = val >> 8;
    a3d4:	f3c6 2307 	ubfx	r3, r6, #8, #8
    a3d8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
			err = bt_encrypt_be(key, pmsg, cmsg);
    a3dc:	ab10      	add	r3, sp, #64	; 0x40
    a3de:	461a      	mov	r2, r3
    a3e0:	a908      	add	r1, sp, #32
    a3e2:	4628      	mov	r0, r5
	dst[1] = val;
    a3e4:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
    a3e8:	9303      	str	r3, [sp, #12]
    a3ea:	f006 fcb1 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d183      	bne.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
				msg[i] = enc_msg[(j * 16) + i] ^ cmsg[i];
    a3f2:	9b03      	ldr	r3, [sp, #12]
    a3f4:	4602      	mov	r2, r0
    a3f6:	f10d 0810 	add.w	r8, sp, #16
    a3fa:	f819 1002 	ldrb.w	r1, [r9, r2]
    a3fe:	5cd0      	ldrb	r0, [r2, r3]
    a400:	4041      	eors	r1, r0
    a402:	f802 1008 	strb.w	r1, [r2, r8]
			for (i = 0; i < 16; i++) {
    a406:	3201      	adds	r2, #1
    a408:	2a10      	cmp	r2, #16
    a40a:	d1f6      	bne.n	a3fa <bt_mesh_ccm_decrypt+0x25e>
			memcpy(out_msg + (j * 16), msg, 16);
    a40c:	4641      	mov	r1, r8
    a40e:	4650      	mov	r0, sl
    a410:	f7f6 f922 	bl	658 <memcpy>
			for (i = 0; i < 16; i++) {
    a414:	2300      	movs	r3, #0
				pmsg[i] = Xn[i] ^ msg[i];
    a416:	a908      	add	r1, sp, #32
    a418:	aa14      	add	r2, sp, #80	; 0x50
    a41a:	5c98      	ldrb	r0, [r3, r2]
    a41c:	f813 e008 	ldrb.w	lr, [r3, r8]
    a420:	ea80 000e 	eor.w	r0, r0, lr
    a424:	5458      	strb	r0, [r3, r1]
			for (i = 0; i < 16; i++) {
    a426:	3301      	adds	r3, #1
    a428:	2b10      	cmp	r3, #16
    a42a:	d1f6      	bne.n	a41a <bt_mesh_ccm_decrypt+0x27e>
			err = bt_encrypt_be(key, pmsg, Xn);
    a42c:	4628      	mov	r0, r5
    a42e:	f006 fc8f 	bl	10d50 <bt_encrypt_be>
			if (err) {
    a432:	2800      	cmp	r0, #0
    a434:	d0b7      	beq.n	a3a6 <bt_mesh_ccm_decrypt+0x20a>
    a436:	e760      	b.n	a2fa <bt_mesh_ccm_decrypt+0x15e>
		return -EINVAL;
    a438:	f06f 0015 	mvn.w	r0, #21
    a43c:	e75d      	b.n	a2fa <bt_mesh_ccm_decrypt+0x15e>

0000a43e <bt_mesh_aes_cmac>:
{
    a43e:	b570      	push	{r4, r5, r6, lr}
    a440:	b0c2      	sub	sp, #264	; 0x108
    a442:	460d      	mov	r5, r1
    a444:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a446:	4601      	mov	r1, r0
    a448:	aa16      	add	r2, sp, #88	; 0x58
    a44a:	4668      	mov	r0, sp
{
    a44c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a44e:	f7f8 f9a7 	bl	27a0 <tc_cmac_setup>
    a452:	b140      	cbz	r0, a466 <bt_mesh_aes_cmac+0x28>
    a454:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
    a456:	b954      	cbnz	r4, a46e <bt_mesh_aes_cmac+0x30>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
    a458:	4669      	mov	r1, sp
    a45a:	4630      	mov	r0, r6
    a45c:	f7f8 fa30 	bl	28c0 <tc_cmac_final>
    a460:	b108      	cbz	r0, a466 <bt_mesh_aes_cmac+0x28>
	return 0;
    a462:	4620      	mov	r0, r4
    a464:	e001      	b.n	a46a <bt_mesh_aes_cmac+0x2c>
		return -EIO;
    a466:	f06f 0004 	mvn.w	r0, #4
}
    a46a:	b042      	add	sp, #264	; 0x108
    a46c:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
    a46e:	e915 0006 	ldmdb	r5, {r1, r2}
    a472:	4668      	mov	r0, sp
    a474:	f7f8 f9c0 	bl	27f8 <tc_cmac_update>
    a478:	3508      	adds	r5, #8
    a47a:	2800      	cmp	r0, #0
    a47c:	d0f3      	beq.n	a466 <bt_mesh_aes_cmac+0x28>
	for (; sg_len; sg_len--, sg++) {
    a47e:	3c01      	subs	r4, #1
    a480:	e7e9      	b.n	a456 <bt_mesh_aes_cmac+0x18>

0000a482 <bt_mesh_aes_cmac_one>:
{
    a482:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
    a484:	e88d 0006 	stmia.w	sp, {r1, r2}
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    a488:	2201      	movs	r2, #1
    a48a:	4669      	mov	r1, sp
    a48c:	f7ff ffd7 	bl	a43e <bt_mesh_aes_cmac>
}
    a490:	b003      	add	sp, #12
    a492:	f85d fb04 	ldr.w	pc, [sp], #4

0000a496 <bt_mesh_s1>:
{
    a496:	b530      	push	{r4, r5, lr}
    a498:	b085      	sub	sp, #20
    a49a:	4604      	mov	r4, r0
    a49c:	460d      	mov	r5, r1
	const u8_t zero[16] = { 0 };
    a49e:	2210      	movs	r2, #16
    a4a0:	2100      	movs	r1, #0
    a4a2:	4668      	mov	r0, sp
    a4a4:	f7f6 f904 	bl	6b0 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    a4a8:	4620      	mov	r0, r4
    a4aa:	f7f6 f8ab 	bl	604 <strlen>
    a4ae:	462b      	mov	r3, r5
    a4b0:	4602      	mov	r2, r0
    a4b2:	4621      	mov	r1, r4
    a4b4:	4668      	mov	r0, sp
    a4b6:	f7ff ffe4 	bl	a482 <bt_mesh_aes_cmac_one>
}
    a4ba:	3000      	adds	r0, #0
    a4bc:	bf18      	it	ne
    a4be:	2001      	movne	r0, #1
    a4c0:	b005      	add	sp, #20
    a4c2:	bd30      	pop	{r4, r5, pc}

0000a4c4 <bt_mesh_k1>:
{
    a4c4:	b570      	push	{r4, r5, r6, lr}
    a4c6:	9d04      	ldr	r5, [sp, #16]
    a4c8:	4616      	mov	r6, r2
    a4ca:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
    a4cc:	460a      	mov	r2, r1
    a4ce:	462b      	mov	r3, r5
    a4d0:	4601      	mov	r1, r0
    a4d2:	4630      	mov	r0, r6
    a4d4:	f7ff ffd5 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err < 0) {
    a4d8:	2800      	cmp	r0, #0
    a4da:	db0a      	blt.n	a4f2 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
    a4dc:	4620      	mov	r0, r4
    a4de:	f7f6 f891 	bl	604 <strlen>
    a4e2:	462b      	mov	r3, r5
    a4e4:	4602      	mov	r2, r0
    a4e6:	4621      	mov	r1, r4
    a4e8:	4628      	mov	r0, r5
}
    a4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
    a4ee:	f7ff bfc8 	b.w	a482 <bt_mesh_aes_cmac_one>
}
    a4f2:	bd70      	pop	{r4, r5, r6, pc}

0000a4f4 <bt_mesh_k2>:
{
    a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4f6:	b095      	sub	sp, #84	; 0x54
    a4f8:	4604      	mov	r4, r0
    a4fa:	460f      	mov	r7, r1
	err = bt_mesh_s1("smk2", salt);
    a4fc:	4828      	ldr	r0, [pc, #160]	; (a5a0 <bt_mesh_k2+0xac>)
    a4fe:	a902      	add	r1, sp, #8
{
    a500:	4615      	mov	r5, r2
    a502:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    a504:	f7ff ffc7 	bl	a496 <bt_mesh_s1>
	if (err) {
    a508:	2800      	cmp	r0, #0
    a50a:	d146      	bne.n	a59a <bt_mesh_k2+0xa6>
	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    a50c:	4621      	mov	r1, r4
    a50e:	ab0a      	add	r3, sp, #40	; 0x28
    a510:	2210      	movs	r2, #16
    a512:	a802      	add	r0, sp, #8
    a514:	f7ff ffb5 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a518:	4604      	mov	r4, r0
    a51a:	2800      	cmp	r0, #0
    a51c:	d13a      	bne.n	a594 <bt_mesh_k2+0xa0>
	pad = 0x01;
    a51e:	2301      	movs	r3, #1
	sg[1].len  = p_len;
    a520:	9511      	str	r5, [sp, #68]	; 0x44
	sg[2].data = &pad;
    a522:	f10d 0207 	add.w	r2, sp, #7
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a526:	ad06      	add	r5, sp, #24
	pad = 0x01;
    a528:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].data = NULL;
    a52c:	900e      	str	r0, [sp, #56]	; 0x38
	sg[0].len  = 0;
    a52e:	900f      	str	r0, [sp, #60]	; 0x3c
	sg[2].data = &pad;
    a530:	9212      	str	r2, [sp, #72]	; 0x48
	sg[2].len  = sizeof(pad);
    a532:	9313      	str	r3, [sp, #76]	; 0x4c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a534:	2203      	movs	r2, #3
    a536:	462b      	mov	r3, r5
    a538:	a90e      	add	r1, sp, #56	; 0x38
    a53a:	a80a      	add	r0, sp, #40	; 0x28
	sg[1].data = p;
    a53c:	9710      	str	r7, [sp, #64]	; 0x40
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a53e:	f7ff ff7e 	bl	a43e <bt_mesh_aes_cmac>
	if (err) {
    a542:	4604      	mov	r4, r0
    a544:	bb30      	cbnz	r0, a594 <bt_mesh_k2+0xa0>
	net_id[0] = out[15] & 0x7f;
    a546:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
	sg[0].data = out;
    a54a:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    a54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a550:	7033      	strb	r3, [r6, #0]
	pad = 0x02;
    a552:	2302      	movs	r3, #2
    a554:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    a558:	2610      	movs	r6, #16
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a55a:	462b      	mov	r3, r5
    a55c:	2203      	movs	r2, #3
    a55e:	a90e      	add	r1, sp, #56	; 0x38
    a560:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    a562:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a564:	f7ff ff6b 	bl	a43e <bt_mesh_aes_cmac>
	if (err) {
    a568:	4604      	mov	r4, r0
    a56a:	b998      	cbnz	r0, a594 <bt_mesh_k2+0xa0>
	memcpy(enc_key, out, 16);
    a56c:	4632      	mov	r2, r6
    a56e:	4629      	mov	r1, r5
    a570:	981a      	ldr	r0, [sp, #104]	; 0x68
    a572:	f7f6 f871 	bl	658 <memcpy>
	pad = 0x03;
    a576:	2203      	movs	r2, #3
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a578:	462b      	mov	r3, r5
    a57a:	a90e      	add	r1, sp, #56	; 0x38
    a57c:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    a57e:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    a582:	f7ff ff5c 	bl	a43e <bt_mesh_aes_cmac>
	if (err) {
    a586:	4604      	mov	r4, r0
    a588:	b920      	cbnz	r0, a594 <bt_mesh_k2+0xa0>
	memcpy(priv_key, out, 16);
    a58a:	4632      	mov	r2, r6
    a58c:	4629      	mov	r1, r5
    a58e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    a590:	f7f6 f862 	bl	658 <memcpy>
}
    a594:	4620      	mov	r0, r4
    a596:	b015      	add	sp, #84	; 0x54
    a598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a59a:	2401      	movs	r4, #1
    a59c:	e7fa      	b.n	a594 <bt_mesh_k2+0xa0>
    a59e:	bf00      	nop
    a5a0:	00019f27 	.word	0x00019f27

0000a5a4 <bt_mesh_k3>:
{
    a5a4:	b530      	push	{r4, r5, lr}
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a5a6:	4b14      	ldr	r3, [pc, #80]	; (a5f8 <bt_mesh_k3+0x54>)
{
    a5a8:	b08b      	sub	sp, #44	; 0x2c
    a5aa:	4604      	mov	r4, r0
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a5ac:	6818      	ldr	r0, [r3, #0]
    a5ae:	9000      	str	r0, [sp, #0]
{
    a5b0:	460d      	mov	r5, r1
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a5b2:	791b      	ldrb	r3, [r3, #4]
	err = bt_mesh_s1("smk3", tmp);
    a5b4:	4811      	ldr	r0, [pc, #68]	; (a5fc <bt_mesh_k3+0x58>)
	u8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    a5b6:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
    a5ba:	a902      	add	r1, sp, #8
    a5bc:	f7ff ff6b 	bl	a496 <bt_mesh_s1>
	if (err) {
    a5c0:	b9b8      	cbnz	r0, a5f2 <bt_mesh_k3+0x4e>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    a5c2:	4621      	mov	r1, r4
    a5c4:	ab06      	add	r3, sp, #24
    a5c6:	2210      	movs	r2, #16
    a5c8:	a802      	add	r0, sp, #8
    a5ca:	f7ff ff5a 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a5ce:	4604      	mov	r4, r0
    a5d0:	b960      	cbnz	r0, a5ec <bt_mesh_k3+0x48>
	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    a5d2:	ab02      	add	r3, sp, #8
    a5d4:	2205      	movs	r2, #5
    a5d6:	4669      	mov	r1, sp
    a5d8:	a806      	add	r0, sp, #24
    a5da:	f7ff ff52 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a5de:	4604      	mov	r4, r0
    a5e0:	b920      	cbnz	r0, a5ec <bt_mesh_k3+0x48>
	memcpy(out, tmp + 8, 8);
    a5e2:	2208      	movs	r2, #8
    a5e4:	a904      	add	r1, sp, #16
    a5e6:	4628      	mov	r0, r5
    a5e8:	f7f6 f836 	bl	658 <memcpy>
}
    a5ec:	4620      	mov	r0, r4
    a5ee:	b00b      	add	sp, #44	; 0x2c
    a5f0:	bd30      	pop	{r4, r5, pc}
    a5f2:	2401      	movs	r4, #1
    a5f4:	e7fa      	b.n	a5ec <bt_mesh_k3+0x48>
    a5f6:	bf00      	nop
    a5f8:	00019452 	.word	0x00019452
    a5fc:	00019f2c 	.word	0x00019f2c

0000a600 <bt_mesh_k4>:
{
    a600:	b530      	push	{r4, r5, lr}
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    a602:	4b11      	ldr	r3, [pc, #68]	; (a648 <bt_mesh_k4+0x48>)
{
    a604:	b08b      	sub	sp, #44	; 0x2c
    a606:	4605      	mov	r5, r0
	u8_t id6[] = { 'i', 'd', '6', 0x01 };
    a608:	6818      	ldr	r0, [r3, #0]
    a60a:	9001      	str	r0, [sp, #4]
{
    a60c:	460c      	mov	r4, r1
	err = bt_mesh_s1("smk4", tmp);
    a60e:	480f      	ldr	r0, [pc, #60]	; (a64c <bt_mesh_k4+0x4c>)
    a610:	a902      	add	r1, sp, #8
    a612:	f7ff ff40 	bl	a496 <bt_mesh_s1>
	if (err) {
    a616:	b9a8      	cbnz	r0, a644 <bt_mesh_k4+0x44>
	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    a618:	ab06      	add	r3, sp, #24
    a61a:	2210      	movs	r2, #16
    a61c:	4629      	mov	r1, r5
    a61e:	a802      	add	r0, sp, #8
    a620:	f7ff ff2f 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a624:	b960      	cbnz	r0, a640 <bt_mesh_k4+0x40>
	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    a626:	2204      	movs	r2, #4
    a628:	ab02      	add	r3, sp, #8
    a62a:	eb0d 0102 	add.w	r1, sp, r2
    a62e:	a806      	add	r0, sp, #24
    a630:	f7ff ff27 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a634:	b920      	cbnz	r0, a640 <bt_mesh_k4+0x40>
	out[0] = tmp[15] & BIT_MASK(6);
    a636:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a63e:	7023      	strb	r3, [r4, #0]
}
    a640:	b00b      	add	sp, #44	; 0x2c
    a642:	bd30      	pop	{r4, r5, pc}
    a644:	2001      	movs	r0, #1
    a646:	e7fb      	b.n	a640 <bt_mesh_k4+0x40>
    a648:	00019457 	.word	0x00019457
    a64c:	00019f31 	.word	0x00019f31

0000a650 <bt_mesh_id128>:
{
    a650:	b530      	push	{r4, r5, lr}
    a652:	b087      	sub	sp, #28
    a654:	4604      	mov	r4, r0
    a656:	4608      	mov	r0, r1
	err = bt_mesh_s1(s, salt);
    a658:	a902      	add	r1, sp, #8
{
    a65a:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    a65c:	f7ff ff1b 	bl	a496 <bt_mesh_s1>
	if (err) {
    a660:	b940      	cbnz	r0, a674 <bt_mesh_id128+0x24>
	return bt_mesh_k1(n, 16, salt, id128, out);
    a662:	9500      	str	r5, [sp, #0]
    a664:	4b04      	ldr	r3, [pc, #16]	; (a678 <bt_mesh_id128+0x28>)
    a666:	aa02      	add	r2, sp, #8
    a668:	2110      	movs	r1, #16
    a66a:	4620      	mov	r0, r4
    a66c:	f7ff ff2a 	bl	a4c4 <bt_mesh_k1>
}
    a670:	b007      	add	sp, #28
    a672:	bd30      	pop	{r4, r5, pc}
    a674:	2001      	movs	r0, #1
    a676:	e7fb      	b.n	a670 <bt_mesh_id128+0x20>
    a678:	00019f20 	.word	0x00019f20

0000a67c <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(u8_t *pdu, u32_t iv_index,
			  const u8_t privacy_key[16])
{
    a67c:	b570      	push	{r4, r5, r6, lr}
    a67e:	b088      	sub	sp, #32
    a680:	460d      	mov	r5, r1
    a682:	4604      	mov	r4, r0
    a684:	4616      	mov	r6, r2
	u8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    a686:	2100      	movs	r1, #0
    a688:	2210      	movs	r2, #16
    a68a:	4668      	mov	r0, sp
    a68c:	f7f6 f810 	bl	6b0 <memset>
	u8_t tmp[16];
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
    a690:	4628      	mov	r0, r5
    a692:	f10d 0105 	add.w	r1, sp, #5
    a696:	f7ff fc33 	bl	9f00 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
    a69a:	2207      	movs	r2, #7
    a69c:	18a1      	adds	r1, r4, r2
    a69e:	f10d 0009 	add.w	r0, sp, #9

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    a6a2:	ad04      	add	r5, sp, #16
	memcpy(&priv_rand[9], &pdu[7], 7);
    a6a4:	f7f5 ffd8 	bl	658 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    a6a8:	462a      	mov	r2, r5
    a6aa:	4669      	mov	r1, sp
    a6ac:	4630      	mov	r0, r6
    a6ae:	f006 fb4f 	bl	10d50 <bt_encrypt_be>
	if (err) {
    a6b2:	b948      	cbnz	r0, a6c8 <bt_mesh_net_obfuscate+0x4c>
    a6b4:	4623      	mov	r3, r4
    a6b6:	4602      	mov	r2, r0
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    a6b8:	7859      	ldrb	r1, [r3, #1]
    a6ba:	5cac      	ldrb	r4, [r5, r2]
    a6bc:	3201      	adds	r2, #1
    a6be:	4061      	eors	r1, r4
	for (i = 0; i < 6; i++) {
    a6c0:	2a06      	cmp	r2, #6
		pdu[1 + i] ^= tmp[i];
    a6c2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < 6; i++) {
    a6c6:	d1f7      	bne.n	a6b8 <bt_mesh_net_obfuscate+0x3c>
	}

	return 0;
}
    a6c8:	b008      	add	sp, #32
    a6ca:	bd70      	pop	{r4, r5, r6, pc}

0000a6cc <bt_mesh_net_encrypt>:

int bt_mesh_net_encrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
    a6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a6d0:	460c      	mov	r4, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
    a6d2:	6809      	ldr	r1, [r1, #0]
    a6d4:	f891 9001 	ldrb.w	r9, [r1, #1]
    a6d8:	f891 8002 	ldrb.w	r8, [r1, #2]
    a6dc:	f891 c003 	ldrb.w	ip, [r1, #3]
    a6e0:	f891 e004 	ldrb.w	lr, [r1, #4]
    a6e4:	794f      	ldrb	r7, [r1, #5]
    a6e6:	f019 0f80 	tst.w	r9, #128	; 0x80
{
    a6ea:	4605      	mov	r5, r0
    a6ec:	b089      	sub	sp, #36	; 0x24
    a6ee:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
    a6f0:	bf14      	ite	ne
    a6f2:	2608      	movne	r6, #8
    a6f4:	2604      	moveq	r6, #4
    a6f6:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("IVIndex %u EncKey %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);
	BT_DBG("PDU (len %u) %s", buf->len, bt_hex(buf->data, buf->len));

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
    a6f8:	b373      	cbz	r3, a758 <bt_mesh_net_encrypt+0x8c>
	nonce[0] = 0x03;
    a6fa:	2303      	movs	r3, #3
    a6fc:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
    a700:	2300      	movs	r3, #0
    a702:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
    a706:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
    a70a:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
    a70e:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
    a712:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
    a716:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
    a71a:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
    a71e:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
    a722:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
    a726:	f7ff fbeb 	bl	9f00 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7,
    a72a:	6822      	ldr	r2, [r4, #0]
    a72c:	88a3      	ldrh	r3, [r4, #4]
    a72e:	9603      	str	r6, [sp, #12]
    a730:	2100      	movs	r1, #0
    a732:	3207      	adds	r2, #7
    a734:	9101      	str	r1, [sp, #4]
    a736:	9100      	str	r1, [sp, #0]
    a738:	4628      	mov	r0, r5
    a73a:	9202      	str	r2, [sp, #8]
    a73c:	3b07      	subs	r3, #7
    a73e:	a904      	add	r1, sp, #16
    a740:	f7ff fbe7 	bl	9f12 <bt_mesh_ccm_encrypt>
				  NULL, 0, &buf->data[7], mic_len);
	if (!err) {
    a744:	4605      	mov	r5, r0
    a746:	b918      	cbnz	r0, a750 <bt_mesh_net_encrypt+0x84>
		net_buf_simple_add(buf, mic_len);
    a748:	4631      	mov	r1, r6
    a74a:	4620      	mov	r0, r4
    a74c:	f00d fa1a 	bl	17b84 <net_buf_simple_add>
	}

	return err;
}
    a750:	4628      	mov	r0, r5
    a752:	b009      	add	sp, #36	; 0x24
    a754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
    a758:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
    a75c:	f88d 9011 	strb.w	r9, [sp, #17]
    a760:	e7d1      	b.n	a706 <bt_mesh_net_encrypt+0x3a>

0000a762 <bt_mesh_net_decrypt>:

int bt_mesh_net_decrypt(const u8_t key[16], struct net_buf_simple *buf,
			u32_t iv_index, bool proxy)
{
    a762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a766:	460e      	mov	r6, r1
	u8_t mic_len = NET_MIC_LEN(buf->data);
    a768:	6809      	ldr	r1, [r1, #0]
    a76a:	f891 9001 	ldrb.w	r9, [r1, #1]
    a76e:	f891 8002 	ldrb.w	r8, [r1, #2]
    a772:	f891 c003 	ldrb.w	ip, [r1, #3]
    a776:	f891 e004 	ldrb.w	lr, [r1, #4]
    a77a:	794f      	ldrb	r7, [r1, #5]
    a77c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
    a780:	4605      	mov	r5, r0
    a782:	b089      	sub	sp, #36	; 0x24
    a784:	4610      	mov	r0, r2
	u8_t mic_len = NET_MIC_LEN(buf->data);
    a786:	bf14      	ite	ne
    a788:	2408      	movne	r4, #8
    a78a:	2404      	moveq	r4, #4
    a78c:	798a      	ldrb	r2, [r1, #6]
	BT_DBG("PDU (%u bytes) %s", buf->len, bt_hex(buf->data, buf->len));
	BT_DBG("iv_index %u, key %s mic_len %u", iv_index, bt_hex(key, 16),
	       mic_len);

#if defined(CONFIG_BT_MESH_PROXY)
	if (proxy) {
    a78e:	b353      	cbz	r3, a7e6 <bt_mesh_net_decrypt+0x84>
	nonce[0] = 0x03;
    a790:	2303      	movs	r3, #3
    a792:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = 0x00;
    a796:	2300      	movs	r3, #0
    a798:	f88d 3011 	strb.w	r3, [sp, #17]
	sys_put_be32(iv_index, &nonce[9]);
    a79c:	f10d 0119 	add.w	r1, sp, #25
	nonce[3] = pdu[3];
    a7a0:	f88d c013 	strb.w	ip, [sp, #19]
	nonce[4] = pdu[4];
    a7a4:	f88d e014 	strb.w	lr, [sp, #20]
	nonce[6] = pdu[6];
    a7a8:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0;
    a7ac:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0;
    a7b0:	f88d 3018 	strb.w	r3, [sp, #24]
	nonce[2] = pdu[2];
    a7b4:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[5] = pdu[5];
    a7b8:	f88d 7015 	strb.w	r7, [sp, #21]
	sys_put_be32(iv_index, &nonce[9]);
    a7bc:	f7ff fba0 	bl	9f00 <sys_put_be32>
	create_net_nonce(nonce, buf->data, iv_index);
#endif

	BT_DBG("Nonce %s", bt_hex(nonce, 13));

	buf->len -= mic_len;
    a7c0:	88b3      	ldrh	r3, [r6, #4]

	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
    a7c2:	6832      	ldr	r2, [r6, #0]
    a7c4:	9403      	str	r4, [sp, #12]
	buf->len -= mic_len;
    a7c6:	1b1b      	subs	r3, r3, r4
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
    a7c8:	3207      	adds	r2, #7
    a7ca:	2100      	movs	r1, #0
	buf->len -= mic_len;
    a7cc:	b29b      	uxth	r3, r3
    a7ce:	80b3      	strh	r3, [r6, #4]
	return bt_mesh_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7,
    a7d0:	9101      	str	r1, [sp, #4]
    a7d2:	9100      	str	r1, [sp, #0]
    a7d4:	9202      	str	r2, [sp, #8]
    a7d6:	3b07      	subs	r3, #7
    a7d8:	a904      	add	r1, sp, #16
    a7da:	4628      	mov	r0, r5
    a7dc:	f7ff fcde 	bl	a19c <bt_mesh_ccm_decrypt>
				   NULL, 0, &buf->data[7], mic_len);
}
    a7e0:	b009      	add	sp, #36	; 0x24
    a7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
    a7e6:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
    a7ea:	f88d 9011 	strb.w	r9, [sp, #17]
    a7ee:	e7d5      	b.n	a79c <bt_mesh_net_decrypt+0x3a>

0000a7f0 <bt_mesh_app_encrypt>:
}

int bt_mesh_app_encrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, const u8_t *ad,
			u16_t src, u16_t dst, u32_t seq_num, u32_t iv_index)
{
    a7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a7f4:	b089      	sub	sp, #36	; 0x24
    a7f6:	4681      	mov	r9, r0
    a7f8:	4616      	mov	r6, r2
    a7fa:	461c      	mov	r4, r3
    a7fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
    a7fe:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    a802:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
	if (dev_key) {
    a806:	2900      	cmp	r1, #0
    a808:	d035      	beq.n	a876 <bt_mesh_app_encrypt+0x86>
		nonce[0] = 0x02;
    a80a:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
    a80c:	9813      	ldr	r0, [sp, #76]	; 0x4c
		nonce[0] = 0x01;
    a80e:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
    a812:	ea40 70c6 	orr.w	r0, r0, r6, lsl #31
    a816:	f10d 0111 	add.w	r1, sp, #17
    a81a:	f7ff fb71 	bl	9f00 <sys_put_be32>
	dst[0] = val >> 8;
    a81e:	ea4f 2318 	mov.w	r3, r8, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
    a822:	f10d 0119 	add.w	r1, sp, #25
    a826:	f88d 3015 	strb.w	r3, [sp, #21]
    a82a:	9814      	ldr	r0, [sp, #80]	; 0x50
	dst[1] = val;
    a82c:	f88d 8016 	strb.w	r8, [sp, #22]
	dst[0] = val >> 8;
    a830:	0a3b      	lsrs	r3, r7, #8
    a832:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
    a836:	f88d 7018 	strb.w	r7, [sp, #24]
    a83a:	f7ff fb61 	bl	9f00 <sys_put_be32>

	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_encrypt(key, nonce, buf->data, buf->len, ad,
    a83e:	2d00      	cmp	r5, #0
    a840:	bf14      	ite	ne
    a842:	2110      	movne	r1, #16
    a844:	2100      	moveq	r1, #0
    a846:	2e00      	cmp	r6, #0
    a848:	6822      	ldr	r2, [r4, #0]
    a84a:	9101      	str	r1, [sp, #4]
    a84c:	bf14      	ite	ne
    a84e:	2608      	movne	r6, #8
    a850:	2604      	moveq	r6, #4
    a852:	9500      	str	r5, [sp, #0]
    a854:	88a3      	ldrh	r3, [r4, #4]
    a856:	9603      	str	r6, [sp, #12]
    a858:	9202      	str	r2, [sp, #8]
    a85a:	a904      	add	r1, sp, #16
    a85c:	4648      	mov	r0, r9
    a85e:	f7ff fb58 	bl	9f12 <bt_mesh_ccm_encrypt>
				  ad ? 16 : 0, buf->data, APP_MIC_LEN(aszmic));
	if (!err) {
    a862:	4605      	mov	r5, r0
    a864:	b918      	cbnz	r0, a86e <bt_mesh_app_encrypt+0x7e>
		net_buf_simple_add(buf, APP_MIC_LEN(aszmic));
    a866:	4631      	mov	r1, r6
    a868:	4620      	mov	r0, r4
    a86a:	f00d f98b 	bl	17b84 <net_buf_simple_add>
		BT_DBG("Encr: %s", bt_hex(buf->data, buf->len));
	}

	return err;
}
    a86e:	4628      	mov	r0, r5
    a870:	b009      	add	sp, #36	; 0x24
    a872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nonce[0] = 0x01;
    a876:	2301      	movs	r3, #1
    a878:	e7c8      	b.n	a80c <bt_mesh_app_encrypt+0x1c>

0000a87a <bt_mesh_app_decrypt>:

int bt_mesh_app_decrypt(const u8_t key[16], bool dev_key, u8_t aszmic,
			struct net_buf_simple *buf, struct net_buf_simple *out,
			const u8_t *ad, u16_t src, u16_t dst, u32_t seq_num,
			u32_t iv_index)
{
    a87a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a87e:	b088      	sub	sp, #32
    a880:	4682      	mov	sl, r0
    a882:	4617      	mov	r7, r2
    a884:	461c      	mov	r4, r3
    a886:	9e10      	ldr	r6, [sp, #64]	; 0x40
    a888:	9d11      	ldr	r5, [sp, #68]	; 0x44
    a88a:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    a88e:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
	if (dev_key) {
    a892:	2900      	cmp	r1, #0
    a894:	d037      	beq.n	a906 <bt_mesh_app_decrypt+0x8c>
		nonce[0] = 0x02;
    a896:	2302      	movs	r3, #2
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
    a898:	9814      	ldr	r0, [sp, #80]	; 0x50
		nonce[0] = 0x01;
    a89a:	f88d 3010 	strb.w	r3, [sp, #16]
	sys_put_be32((seq_num | ((u32_t)aszmic << 31)), &nonce[1]);
    a89e:	f10d 0111 	add.w	r1, sp, #17
    a8a2:	ea40 70c7 	orr.w	r0, r0, r7, lsl #31
    a8a6:	f7ff fb2b 	bl	9f00 <sys_put_be32>
	dst[0] = val >> 8;
    a8aa:	ea4f 2319 	mov.w	r3, r9, lsr #8
	sys_put_be32(iv_index, &nonce[9]);
    a8ae:	9815      	ldr	r0, [sp, #84]	; 0x54
    a8b0:	f88d 3015 	strb.w	r3, [sp, #21]
    a8b4:	f10d 0119 	add.w	r1, sp, #25
    a8b8:	ea4f 2318 	mov.w	r3, r8, lsr #8
    a8bc:	f88d 3017 	strb.w	r3, [sp, #23]
	dst[1] = val;
    a8c0:	f88d 9016 	strb.w	r9, [sp, #22]
    a8c4:	f88d 8018 	strb.w	r8, [sp, #24]
    a8c8:	f7ff fb1a 	bl	9f00 <sys_put_be32>
	create_app_nonce(nonce, dev_key, aszmic, src, dst, seq_num, iv_index);

	BT_DBG("AppKey %s", bt_hex(key, 16));
	BT_DBG("Nonce  %s", bt_hex(nonce, 13));

	err = bt_mesh_ccm_decrypt(key, nonce, buf->data, buf->len, ad,
    a8cc:	2d00      	cmp	r5, #0
    a8ce:	bf14      	ite	ne
    a8d0:	2210      	movne	r2, #16
    a8d2:	2200      	moveq	r2, #0
    a8d4:	2f00      	cmp	r7, #0
    a8d6:	6831      	ldr	r1, [r6, #0]
    a8d8:	9102      	str	r1, [sp, #8]
    a8da:	bf14      	ite	ne
    a8dc:	2008      	movne	r0, #8
    a8de:	2004      	moveq	r0, #4
    a8e0:	9003      	str	r0, [sp, #12]
    a8e2:	9201      	str	r2, [sp, #4]
    a8e4:	9500      	str	r5, [sp, #0]
    a8e6:	88a3      	ldrh	r3, [r4, #4]
    a8e8:	6822      	ldr	r2, [r4, #0]
    a8ea:	a904      	add	r1, sp, #16
    a8ec:	4650      	mov	r0, sl
    a8ee:	f7ff fc55 	bl	a19c <bt_mesh_ccm_decrypt>
				  ad ? 16 : 0, out->data, APP_MIC_LEN(aszmic));
	if (!err) {
    a8f2:	4605      	mov	r5, r0
    a8f4:	b918      	cbnz	r0, a8fe <bt_mesh_app_decrypt+0x84>
		net_buf_simple_add(out, buf->len);
    a8f6:	88a1      	ldrh	r1, [r4, #4]
    a8f8:	4630      	mov	r0, r6
    a8fa:	f00d f943 	bl	17b84 <net_buf_simple_add>
	}

	return err;
}
    a8fe:	4628      	mov	r0, r5
    a900:	b008      	add	sp, #32
    a902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nonce[0] = 0x01;
    a906:	2301      	movs	r3, #1
    a908:	e7c6      	b.n	a898 <bt_mesh_app_decrypt+0x1e>
	...

0000a90c <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

u8_t bt_mesh_fcs_calc(const u8_t *data, u8_t data_len)
{
    a90c:	b510      	push	{r4, lr}
	u8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    a90e:	4a06      	ldr	r2, [pc, #24]	; (a928 <bt_mesh_fcs_calc+0x1c>)
    a910:	4401      	add	r1, r0
	u8_t fcs = 0xff;
    a912:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    a914:	4288      	cmp	r0, r1
    a916:	d102      	bne.n	a91e <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    a918:	43d8      	mvns	r0, r3
}
    a91a:	b2c0      	uxtb	r0, r0
    a91c:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    a91e:	f810 4b01 	ldrb.w	r4, [r0], #1
    a922:	4063      	eors	r3, r4
    a924:	5cd3      	ldrb	r3, [r2, r3]
    a926:	e7f5      	b.n	a914 <bt_mesh_fcs_calc+0x8>
    a928:	00019f40 	.word	0x00019f40

0000a92c <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, u8_t received_fcs)
{
	const u8_t *data = buf->data;
    a92c:	6802      	ldr	r2, [r0, #0]
    a92e:	8880      	ldrh	r0, [r0, #4]
{
    a930:	b530      	push	{r4, r5, lr}
    a932:	4c08      	ldr	r4, [pc, #32]	; (a954 <bt_mesh_fcs_check+0x28>)
    a934:	4410      	add	r0, r2
	u16_t data_len = buf->len;
	u8_t fcs = 0xff;
    a936:	23ff      	movs	r3, #255	; 0xff

	while (data_len--) {
    a938:	4282      	cmp	r2, r0
    a93a:	d106      	bne.n	a94a <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    a93c:	404b      	eors	r3, r1
    a93e:	5ce0      	ldrb	r0, [r4, r3]
}
    a940:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    a944:	4258      	negs	r0, r3
    a946:	4158      	adcs	r0, r3
    a948:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    a94a:	f812 5b01 	ldrb.w	r5, [r2], #1
    a94e:	406b      	eors	r3, r5
    a950:	5ce3      	ldrb	r3, [r4, r3]
    a952:	e7f1      	b.n	a938 <bt_mesh_fcs_check+0xc>
    a954:	00019f40 	.word	0x00019f40

0000a958 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const u8_t virtual_label[16], u16_t *addr)
{
    a958:	b530      	push	{r4, r5, lr}
    a95a:	b089      	sub	sp, #36	; 0x24
    a95c:	4605      	mov	r5, r0
    a95e:	460c      	mov	r4, r1
	u8_t salt[16];
	u8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
    a960:	480e      	ldr	r0, [pc, #56]	; (a99c <bt_mesh_virtual_addr+0x44>)
    a962:	4669      	mov	r1, sp
    a964:	f7ff fd97 	bl	a496 <bt_mesh_s1>
	if (err) {
    a968:	b9a8      	cbnz	r0, a996 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
    a96a:	ab04      	add	r3, sp, #16
    a96c:	2210      	movs	r2, #16
    a96e:	4629      	mov	r1, r5
    a970:	4668      	mov	r0, sp
    a972:	f7ff fd86 	bl	a482 <bt_mesh_aes_cmac_one>
	if (err) {
    a976:	b960      	cbnz	r0, a992 <bt_mesh_virtual_addr+0x3a>
	return ((u16_t)src[0] << 8) | src[1];
    a978:	f89d 201e 	ldrb.w	r2, [sp, #30]
    a97c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
    a984:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    a98c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    a990:	8023      	strh	r3, [r4, #0]

	return 0;
}
    a992:	b009      	add	sp, #36	; 0x24
    a994:	bd30      	pop	{r4, r5, pc}
    a996:	2001      	movs	r0, #1
    a998:	e7fb      	b.n	a992 <bt_mesh_virtual_addr+0x3a>
    a99a:	bf00      	nop
    a99c:	00019f3b 	.word	0x00019f3b

0000a9a0 <bt_mesh_prov_conf_salt>:

int bt_mesh_prov_conf_salt(const u8_t conf_inputs[145], u8_t salt[16])
{
    a9a0:	b530      	push	{r4, r5, lr}
    a9a2:	b085      	sub	sp, #20
    a9a4:	4604      	mov	r4, r0
    a9a6:	460d      	mov	r5, r1
	const u8_t conf_salt_key[16] = { 0 };
    a9a8:	2210      	movs	r2, #16
    a9aa:	2100      	movs	r1, #0
    a9ac:	4668      	mov	r0, sp
    a9ae:	f7f5 fe7f 	bl	6b0 <memset>

	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
    a9b2:	462b      	mov	r3, r5
    a9b4:	2291      	movs	r2, #145	; 0x91
    a9b6:	4621      	mov	r1, r4
    a9b8:	4668      	mov	r0, sp
    a9ba:	f7ff fd62 	bl	a482 <bt_mesh_aes_cmac_one>
}
    a9be:	b005      	add	sp, #20
    a9c0:	bd30      	pop	{r4, r5, pc}
	...

0000a9c4 <bt_mesh_prov_conf_key>:

int bt_mesh_prov_conf_key(const u8_t dhkey[32], const u8_t conf_salt[16],
			  u8_t conf_key[16])
{
    a9c4:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    a9c6:	4b04      	ldr	r3, [pc, #16]	; (a9d8 <bt_mesh_prov_conf_key+0x14>)
    a9c8:	9200      	str	r2, [sp, #0]
    a9ca:	460a      	mov	r2, r1
    a9cc:	2120      	movs	r1, #32
    a9ce:	f7ff fd79 	bl	a4c4 <bt_mesh_k1>
}
    a9d2:	b003      	add	sp, #12
    a9d4:	f85d fb04 	ldr.w	pc, [sp], #4
    a9d8:	00019f36 	.word	0x00019f36

0000a9dc <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const u8_t conf_key[16], const u8_t rand[16],
		      const u8_t auth[16], u8_t conf[16])
{
    a9dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
    a9de:	9100      	str	r1, [sp, #0]
    a9e0:	2110      	movs	r1, #16
    a9e2:	9101      	str	r1, [sp, #4]
    a9e4:	9202      	str	r2, [sp, #8]
    a9e6:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
    a9e8:	2202      	movs	r2, #2
    a9ea:	4669      	mov	r1, sp
    a9ec:	f7ff fd27 	bl	a43e <bt_mesh_aes_cmac>
}
    a9f0:	b005      	add	sp, #20
    a9f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9f6 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const u8_t key[16], u8_t nonce[13],
			 const u8_t data[25 + 8], u8_t out[25])
{
    a9f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_mesh_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
    a9f8:	2408      	movs	r4, #8
    a9fa:	9302      	str	r3, [sp, #8]
    a9fc:	2300      	movs	r3, #0
    a9fe:	9301      	str	r3, [sp, #4]
    aa00:	9300      	str	r3, [sp, #0]
    aa02:	9403      	str	r4, [sp, #12]
    aa04:	2319      	movs	r3, #25
    aa06:	f7ff fbc9 	bl	a19c <bt_mesh_ccm_decrypt>
}
    aa0a:	b004      	add	sp, #16
    aa0c:	bd10      	pop	{r4, pc}

0000aa0e <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const u8_t beacon_key[16], u8_t flags,
			const u8_t net_id[8], u32_t iv_index,
			u8_t auth[8])
{
    aa0e:	b570      	push	{r4, r5, r6, lr}
    aa10:	b088      	sub	sp, #32

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
    aa12:	ac08      	add	r4, sp, #32
{
    aa14:	4605      	mov	r5, r0
    aa16:	4610      	mov	r0, r2
    aa18:	461e      	mov	r6, r3
	msg[0] = flags;
    aa1a:	f804 1d20 	strb.w	r1, [r4, #-32]!
	memcpy(&msg[1], net_id, 8);
    aa1e:	2208      	movs	r2, #8
    aa20:	4601      	mov	r1, r0
    aa22:	f10d 0001 	add.w	r0, sp, #1
    aa26:	f7f5 fe17 	bl	658 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
    aa2a:	f10d 0109 	add.w	r1, sp, #9
    aa2e:	4630      	mov	r0, r6
    aa30:	f7ff fa66 	bl	9f00 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
    aa34:	4621      	mov	r1, r4
    aa36:	ab04      	add	r3, sp, #16
    aa38:	220d      	movs	r2, #13
    aa3a:	4628      	mov	r0, r5
    aa3c:	f7ff fd21 	bl	a482 <bt_mesh_aes_cmac_one>
	if (!err) {
    aa40:	4604      	mov	r4, r0
    aa42:	b920      	cbnz	r0, aa4e <bt_mesh_beacon_auth+0x40>
		memcpy(auth, tmp, 8);
    aa44:	2208      	movs	r2, #8
    aa46:	a904      	add	r1, sp, #16
    aa48:	980c      	ldr	r0, [sp, #48]	; 0x30
    aa4a:	f7f5 fe05 	bl	658 <memcpy>
	}

	return err;
}
    aa4e:	4620      	mov	r0, r4
    aa50:	b008      	add	sp, #32
    aa52:	bd70      	pop	{r4, r5, r6, pc}

0000aa54 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    aa54:	b570      	push	{r4, r5, r6, lr}
    aa56:	4604      	mov	r4, r0
	int i;

	mod->elem = elem;
    aa58:	6041      	str	r1, [r0, #4]

	if (mod->pub) {
    aa5a:	6880      	ldr	r0, [r0, #8]
{
    aa5c:	4616      	mov	r6, r2
    aa5e:	461d      	mov	r5, r3
	if (mod->pub) {
    aa60:	b120      	cbz	r0, aa6c <mod_init+0x18>
		mod->pub->mod = mod;
    aa62:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    aa66:	490b      	ldr	r1, [pc, #44]	; (aa94 <mod_init+0x40>)
    aa68:	f00e f924 	bl	18cb4 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    aa6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa70:	81a3      	strh	r3, [r4, #12]
	}

	if (vnd) {
    aa72:	b976      	cbnz	r6, aa92 <mod_init+0x3e>
		return;
	}

	for (i = 0; i < ARRAY_SIZE(model_init); i++) {
		if (model_init[i].id == mod->id) {
    aa74:	8823      	ldrh	r3, [r4, #0]
    aa76:	b91b      	cbnz	r3, aa80 <mod_init+0x2c>
			model_init[i].init(mod, primary);
    aa78:	4629      	mov	r1, r5
    aa7a:	4620      	mov	r0, r4
    aa7c:	f001 ff96 	bl	c9ac <bt_mesh_cfg_srv_init>
		if (model_init[i].id == mod->id) {
    aa80:	8823      	ldrh	r3, [r4, #0]
    aa82:	2b02      	cmp	r3, #2
    aa84:	d105      	bne.n	aa92 <mod_init+0x3e>
			model_init[i].init(mod, primary);
    aa86:	4629      	mov	r1, r5
    aa88:	4620      	mov	r0, r4
		}
	}
}
    aa8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			model_init[i].init(mod, primary);
    aa8e:	f002 bc7d 	b.w	d38c <bt_mesh_health_srv_init>
    aa92:	bd70      	pop	{r4, r5, r6, pc}
    aa94:	0000afe9 	.word	0x0000afe9

0000aa98 <bt_mesh_model_foreach>:
{
    aa98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    aa9c:	f8df a068 	ldr.w	sl, [pc, #104]	; ab08 <bt_mesh_model_foreach+0x70>
{
    aaa0:	4607      	mov	r7, r0
    aaa2:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    aaa4:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    aaa6:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    aaaa:	f8da 3000 	ldr.w	r3, [sl]
    aaae:	689a      	ldr	r2, [r3, #8]
    aab0:	42aa      	cmp	r2, r5
    aab2:	d802      	bhi.n	aaba <bt_mesh_model_foreach+0x22>
}
    aab4:	b002      	add	sp, #8
    aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    aaba:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    aabc:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    aabe:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    aac2:	7923      	ldrb	r3, [r4, #4]
    aac4:	429e      	cmp	r6, r3
    aac6:	db05      	blt.n	aad4 <bt_mesh_model_foreach+0x3c>
    aac8:	2600      	movs	r6, #0
		for (j = 0; j < elem->vnd_model_count; j++) {
    aaca:	7963      	ldrb	r3, [r4, #5]
    aacc:	429e      	cmp	r6, r3
    aace:	db0e      	blt.n	aaee <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
    aad0:	3501      	adds	r5, #1
    aad2:	e7ea      	b.n	aaaa <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    aad4:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    aad6:	f8cd 8000 	str.w	r8, [sp]
    aada:	fab5 f385 	clz	r3, r5
    aade:	fb09 0006 	mla	r0, r9, r6, r0
    aae2:	095b      	lsrs	r3, r3, #5
    aae4:	2200      	movs	r2, #0
    aae6:	4621      	mov	r1, r4
    aae8:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
    aaea:	3601      	adds	r6, #1
    aaec:	e7e9      	b.n	aac2 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    aaee:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    aaf0:	f8cd 8000 	str.w	r8, [sp]
    aaf4:	fab5 f385 	clz	r3, r5
    aaf8:	fb09 0006 	mla	r0, r9, r6, r0
    aafc:	095b      	lsrs	r3, r3, #5
    aafe:	2201      	movs	r2, #1
    ab00:	4621      	mov	r1, r4
    ab02:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
    ab04:	3601      	adds	r6, #1
    ab06:	e7e0      	b.n	aaca <bt_mesh_model_foreach+0x32>
    ab08:	20000868 	.word	0x20000868

0000ab0c <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    ab0c:	6880      	ldr	r0, [r0, #8]
    ab0e:	b178      	cbz	r0, ab30 <bt_mesh_model_pub_period_get+0x24>
	switch (mod->pub->period >> 6) {
    ab10:	7a83      	ldrb	r3, [r0, #10]
    ab12:	099a      	lsrs	r2, r3, #6
    ab14:	2a02      	cmp	r2, #2
    ab16:	d012      	beq.n	ab3e <bt_mesh_model_pub_period_get+0x32>
    ab18:	2a03      	cmp	r2, #3
    ab1a:	d015      	beq.n	ab48 <bt_mesh_model_pub_period_get+0x3c>
    ab1c:	2a01      	cmp	r2, #1
    ab1e:	d008      	beq.n	ab32 <bt_mesh_model_pub_period_get+0x26>
		period = K_MSEC((mod->pub->period & BIT_MASK(6)) * 100);
    ab20:	2264      	movs	r2, #100	; 0x64
    ab22:	fb13 f302 	smulbb	r3, r3, r2
	return period >> mod->pub->period_div;
    ab26:	7ac0      	ldrb	r0, [r0, #11]
    ab28:	f000 000f 	and.w	r0, r0, #15
    ab2c:	fa43 f000 	asr.w	r0, r3, r0
}
    ab30:	4770      	bx	lr
		period = K_SECONDS(mod->pub->period & BIT_MASK(6));
    ab32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ab36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    ab3a:	4353      	muls	r3, r2
		break;
    ab3c:	e7f3      	b.n	ab26 <bt_mesh_model_pub_period_get+0x1a>
		period = K_SECONDS((mod->pub->period & BIT_MASK(6)) * 10);
    ab3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ab42:	f242 7210 	movw	r2, #10000	; 0x2710
    ab46:	e7f8      	b.n	ab3a <bt_mesh_model_pub_period_get+0x2e>
		period = K_MINUTES((mod->pub->period & BIT_MASK(6)) * 10);
    ab48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ab4c:	4a00      	ldr	r2, [pc, #0]	; (ab50 <bt_mesh_model_pub_period_get+0x44>)
    ab4e:	e7f4      	b.n	ab3a <bt_mesh_model_pub_period_get+0x2e>
    ab50:	000927c0 	.word	0x000927c0

0000ab54 <publish_sent>:
{
    ab54:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    ab56:	688e      	ldr	r6, [r1, #8]
    ab58:	7af3      	ldrb	r3, [r6, #11]
    ab5a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    ab5e:	460d      	mov	r5, r1
	if (mod->pub->count) {
    ab60:	d00b      	beq.n	ab7a <publish_sent+0x26>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    ab62:	7a72      	ldrb	r2, [r6, #9]
    ab64:	08d4      	lsrs	r4, r2, #3
    ab66:	2232      	movs	r2, #50	; 0x32
    ab68:	fb04 2202 	mla	r2, r4, r2, r2
		k_delayed_work_submit(&mod->pub->timer, delay);
    ab6c:	68a9      	ldr	r1, [r5, #8]
    ab6e:	480b      	ldr	r0, [pc, #44]	; (ab9c <publish_sent+0x48>)
    ab70:	3118      	adds	r1, #24
}
    ab72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ab76:	f00e b907 	b.w	18d88 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    ab7a:	4608      	mov	r0, r1
    ab7c:	f7ff ffc6 	bl	ab0c <bt_mesh_model_pub_period_get>
	if (!period) {
    ab80:	4604      	mov	r4, r0
    ab82:	b138      	cbz	r0, ab94 <publish_sent+0x40>
    ab84:	f00d fde8 	bl	18758 <_impl_k_uptime_get_32>
	elapsed = k_uptime_get_32() - pub->period_start;
    ab88:	68f2      	ldr	r2, [r6, #12]
    ab8a:	1a82      	subs	r2, r0, r2
	if (elapsed > period) {
    ab8c:	4294      	cmp	r4, r2
    ab8e:	d302      	bcc.n	ab96 <publish_sent+0x42>
	if (delay) {
    ab90:	1aa2      	subs	r2, r4, r2
    ab92:	d1eb      	bne.n	ab6c <publish_sent+0x18>
    ab94:	bd70      	pop	{r4, r5, r6, pc}
		return K_MSEC(1);
    ab96:	2201      	movs	r2, #1
    ab98:	e7e8      	b.n	ab6c <publish_sent+0x18>
    ab9a:	bf00      	nop
    ab9c:	20001dd8 	.word	0x20001dd8

0000aba0 <bt_mesh_comp_register>:

int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
    aba0:	b508      	push	{r3, lr}
	/* There must be at least one element */
	if (!comp->elem_count) {
    aba2:	6883      	ldr	r3, [r0, #8]
    aba4:	b13b      	cbz	r3, abb6 <bt_mesh_comp_register+0x16>
		return -EINVAL;
	}

	dev_comp = comp;
    aba6:	4b05      	ldr	r3, [pc, #20]	; (abbc <bt_mesh_comp_register+0x1c>)

	bt_mesh_model_foreach(mod_init, NULL);
    aba8:	2100      	movs	r1, #0
	dev_comp = comp;
    abaa:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    abac:	4804      	ldr	r0, [pc, #16]	; (abc0 <bt_mesh_comp_register+0x20>)
    abae:	f7ff ff73 	bl	aa98 <bt_mesh_model_foreach>

	return 0;
    abb2:	2000      	movs	r0, #0
    abb4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    abb6:	f06f 0015 	mvn.w	r0, #21
}
    abba:	bd08      	pop	{r3, pc}
    abbc:	20000868 	.word	0x20000868
    abc0:	0000aa55 	.word	0x0000aa55

0000abc4 <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(u16_t addr)
{
	int i;

	dev_primary_addr = addr;
    abc4:	4b08      	ldr	r3, [pc, #32]	; (abe8 <bt_mesh_comp_provision+0x24>)
{
    abc6:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    abc8:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
    abca:	4b08      	ldr	r3, [pc, #32]	; (abec <bt_mesh_comp_provision+0x28>)
    abcc:	6819      	ldr	r1, [r3, #0]
    abce:	688c      	ldr	r4, [r1, #8]
    abd0:	2300      	movs	r3, #0
    abd2:	18c2      	adds	r2, r0, r3
    abd4:	42a3      	cmp	r3, r4
    abd6:	b292      	uxth	r2, r2
    abd8:	d100      	bne.n	abdc <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
    abda:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    abdc:	011d      	lsls	r5, r3, #4
    abde:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    abe0:	3301      	adds	r3, #1
		elem->addr = addr++;
    abe2:	5372      	strh	r2, [r6, r5]
    abe4:	e7f5      	b.n	abd2 <bt_mesh_comp_provision+0xe>
    abe6:	bf00      	nop
    abe8:	2000086c 	.word	0x2000086c
    abec:	20000868 	.word	0x20000868

0000abf0 <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    abf0:	4b02      	ldr	r3, [pc, #8]	; (abfc <bt_mesh_comp_unprovision+0xc>)

	bt_mesh_model_foreach(mod_init, NULL);
    abf2:	4803      	ldr	r0, [pc, #12]	; (ac00 <bt_mesh_comp_unprovision+0x10>)
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    abf4:	2100      	movs	r1, #0
    abf6:	8019      	strh	r1, [r3, #0]
	bt_mesh_model_foreach(mod_init, NULL);
    abf8:	f7ff bf4e 	b.w	aa98 <bt_mesh_model_foreach>
    abfc:	2000086c 	.word	0x2000086c
    ac00:	0000aa55 	.word	0x0000aa55

0000ac04 <bt_mesh_primary_addr>:
}

u16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
    ac04:	4b01      	ldr	r3, [pc, #4]	; (ac0c <bt_mesh_primary_addr+0x8>)
    ac06:	8818      	ldrh	r0, [r3, #0]
    ac08:	4770      	bx	lr
    ac0a:	bf00      	nop
    ac0c:	2000086c 	.word	0x2000086c

0000ac10 <bt_mesh_model_find_group>:
u16_t *bt_mesh_model_find_group(struct bt_mesh_model *mod, u16_t addr)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] == addr) {
    ac10:	89c3      	ldrh	r3, [r0, #14]
    ac12:	428b      	cmp	r3, r1
    ac14:	d007      	beq.n	ac26 <bt_mesh_model_find_group+0x16>
    ac16:	8a03      	ldrh	r3, [r0, #16]
    ac18:	428b      	cmp	r3, r1
    ac1a:	d106      	bne.n	ac2a <bt_mesh_model_find_group+0x1a>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    ac1c:	2301      	movs	r3, #1
			return &mod->groups[i];
    ac1e:	3307      	adds	r3, #7
    ac20:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    ac24:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    ac26:	2300      	movs	r3, #0
    ac28:	e7f9      	b.n	ac1e <bt_mesh_model_find_group+0xe>
		}
	}

	return NULL;
    ac2a:	2000      	movs	r0, #0
}
    ac2c:	4770      	bx	lr

0000ac2e <bt_mesh_elem_find_group>:

static struct bt_mesh_model *bt_mesh_elem_find_group(struct bt_mesh_elem *elem,
						     u16_t group_addr)
{
    ac2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_model *model;
	u16_t *match;
	int i;

	for (i = 0; i < elem->model_count; i++) {
    ac32:	7907      	ldrb	r7, [r0, #4]
{
    ac34:	4605      	mov	r5, r0
    ac36:	460e      	mov	r6, r1
	for (i = 0; i < elem->model_count; i++) {
    ac38:	2400      	movs	r4, #0
		model = &elem->models[i];
    ac3a:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->model_count; i++) {
    ac3e:	42bc      	cmp	r4, r7
    ac40:	db09      	blt.n	ac56 <bt_mesh_elem_find_group+0x28>
		if (match) {
			return model;
		}
	}

	for (i = 0; i < elem->vnd_model_count; i++) {
    ac42:	796f      	ldrb	r7, [r5, #5]
    ac44:	2400      	movs	r4, #0
		model = &elem->vnd_models[i];
    ac46:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
    ac4a:	42bc      	cmp	r4, r7
    ac4c:	db0e      	blt.n	ac6c <bt_mesh_elem_find_group+0x3e>
		if (match) {
			return model;
		}
	}

	return NULL;
    ac4e:	2200      	movs	r2, #0
}
    ac50:	4610      	mov	r0, r2
    ac52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		model = &elem->models[i];
    ac56:	68aa      	ldr	r2, [r5, #8]
    ac58:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
    ac5c:	4631      	mov	r1, r6
    ac5e:	4610      	mov	r0, r2
    ac60:	f7ff ffd6 	bl	ac10 <bt_mesh_model_find_group>
		if (match) {
    ac64:	2800      	cmp	r0, #0
    ac66:	d1f3      	bne.n	ac50 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->model_count; i++) {
    ac68:	3401      	adds	r4, #1
    ac6a:	e7e8      	b.n	ac3e <bt_mesh_elem_find_group+0x10>
		model = &elem->vnd_models[i];
    ac6c:	68ea      	ldr	r2, [r5, #12]
    ac6e:	fb08 2204 	mla	r2, r8, r4, r2
		match = bt_mesh_model_find_group(model, group_addr);
    ac72:	4631      	mov	r1, r6
    ac74:	4610      	mov	r0, r2
    ac76:	f7ff ffcb 	bl	ac10 <bt_mesh_model_find_group>
		if (match) {
    ac7a:	2800      	cmp	r0, #0
    ac7c:	d1e8      	bne.n	ac50 <bt_mesh_elem_find_group+0x22>
	for (i = 0; i < elem->vnd_model_count; i++) {
    ac7e:	3401      	adds	r4, #1
    ac80:	e7e3      	b.n	ac4a <bt_mesh_elem_find_group+0x1c>
	...

0000ac84 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(u16_t addr)
{
    ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i;

	for (i = 0; i < dev_comp->elem_count; i++) {
    ac88:	4b0f      	ldr	r3, [pc, #60]	; (acc8 <bt_mesh_elem_find+0x44>)
    ac8a:	681f      	ldr	r7, [r3, #0]
    ac8c:	f8d7 8008 	ldr.w	r8, [r7, #8]
{
    ac90:	4606      	mov	r6, r0
	for (i = 0; i < dev_comp->elem_count; i++) {
    ac92:	2400      	movs	r4, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];

		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    ac94:	f480 4900 	eor.w	r9, r0, #32768	; 0x8000
	for (i = 0; i < dev_comp->elem_count; i++) {
    ac98:	4544      	cmp	r4, r8
    ac9a:	d101      	bne.n	aca0 <bt_mesh_elem_find+0x1c>
		} else if (elem->addr == addr) {
			return elem;
		}
	}

	return NULL;
    ac9c:	2500      	movs	r5, #0
    ac9e:	e00b      	b.n	acb8 <bt_mesh_elem_find+0x34>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    aca0:	68fa      	ldr	r2, [r7, #12]
    aca2:	0123      	lsls	r3, r4, #4
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    aca4:	f5b9 4ffe 	cmp.w	r9, #32512	; 0x7f00
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    aca8:	eb02 0503 	add.w	r5, r2, r3
		if (BT_MESH_ADDR_IS_GROUP(addr) ||
    acac:	d807      	bhi.n	acbe <bt_mesh_elem_find+0x3a>
			if (bt_mesh_elem_find_group(elem, addr)) {
    acae:	4631      	mov	r1, r6
    acb0:	4628      	mov	r0, r5
    acb2:	f7ff ffbc 	bl	ac2e <bt_mesh_elem_find_group>
    acb6:	b128      	cbz	r0, acc4 <bt_mesh_elem_find+0x40>
}
    acb8:	4628      	mov	r0, r5
    acba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (elem->addr == addr) {
    acbe:	5ad3      	ldrh	r3, [r2, r3]
    acc0:	42b3      	cmp	r3, r6
    acc2:	d0f9      	beq.n	acb8 <bt_mesh_elem_find+0x34>
	for (i = 0; i < dev_comp->elem_count; i++) {
    acc4:	3401      	adds	r4, #1
    acc6:	e7e7      	b.n	ac98 <bt_mesh_elem_find+0x14>
    acc8:	20000868 	.word	0x20000868

0000accc <bt_mesh_elem_count>:

u8_t bt_mesh_elem_count(void)
{
	return dev_comp->elem_count;
    accc:	4b01      	ldr	r3, [pc, #4]	; (acd4 <bt_mesh_elem_count+0x8>)
    acce:	681b      	ldr	r3, [r3, #0]
}
    acd0:	7a18      	ldrb	r0, [r3, #8]
    acd2:	4770      	bx	lr
    acd4:	20000868 	.word	0x20000868

0000acd8 <bt_mesh_fixed_group_match>:

	CODE_UNREACHABLE;
}

bool bt_mesh_fixed_group_match(u16_t addr)
{
    acd8:	b508      	push	{r3, lr}
	/* Check for fixed group addresses */
	switch (addr) {
    acda:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    acde:	4298      	cmp	r0, r3
    ace0:	d00c      	beq.n	acfc <bt_mesh_fixed_group_match+0x24>
    ace2:	d80e      	bhi.n	ad02 <bt_mesh_fixed_group_match+0x2a>
    ace4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    ace8:	4298      	cmp	r0, r3
    acea:	d001      	beq.n	acf0 <bt_mesh_fixed_group_match+0x18>
	case BT_MESH_ADDR_ALL_NODES:
		return true;
	case BT_MESH_ADDR_PROXIES:
		/* TODO: Proxy not yet supported */
		return false;
    acec:	2000      	movs	r0, #0
    acee:	bd08      	pop	{r3, pc}
	case BT_MESH_ADDR_FRIENDS:
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
    acf0:	f001 ff64 	bl	cbbc <bt_mesh_friend_get>
	case BT_MESH_ADDR_RELAYS:
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    acf4:	1e43      	subs	r3, r0, #1
    acf6:	4258      	negs	r0, r3
    acf8:	4158      	adcs	r0, r3
    acfa:	bd08      	pop	{r3, pc}
    acfc:	f001 ff54 	bl	cba8 <bt_mesh_relay_get>
    ad00:	e7f8      	b.n	acf4 <bt_mesh_fixed_group_match+0x1c>
		return true;
    ad02:	2001      	movs	r0, #1
	default:
		return false;
	}
}
    ad04:	bd08      	pop	{r3, pc}
	...

0000ad08 <bt_mesh_model_recv>:

void bt_mesh_model_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
    ad08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    ad0c:	680b      	ldr	r3, [r1, #0]
    ad0e:	781b      	ldrb	r3, [r3, #0]
    ad10:	099a      	lsrs	r2, r3, #6
    ad12:	2a02      	cmp	r2, #2
{
    ad14:	4680      	mov	r8, r0
    ad16:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
    ad18:	d00e      	beq.n	ad38 <bt_mesh_model_recv+0x30>
    ad1a:	2a03      	cmp	r2, #3
    ad1c:	d013      	beq.n	ad46 <bt_mesh_model_recv+0x3e>
		if (buf->data[0] == 0x7f) {
    ad1e:	2b7f      	cmp	r3, #127	; 0x7f
    ad20:	d044      	beq.n	adac <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf);
    ad22:	4608      	mov	r0, r1
    ad24:	f00c ffa1 	bl	17c6a <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    ad28:	4606      	mov	r6, r0
			/* The callback will likely parse the buffer, so
			 * store the parsing state in case multiple models
			 * receive the message.
			 */
			net_buf_simple_save(buf, &state);
			op->func(model, &rx->ctx, buf);
    ad2a:	f108 0304 	add.w	r3, r8, #4
			models = elem->models;
    ad2e:	2700      	movs	r7, #0
			op->func(model, &rx->ctx, buf);
    ad30:	9300      	str	r3, [sp, #0]
    ad32:	f104 0a08 	add.w	sl, r4, #8
    ad36:	e034      	b.n	ada2 <bt_mesh_model_recv+0x9a>
		if (buf->len < 2) {
    ad38:	888b      	ldrh	r3, [r1, #4]
    ad3a:	2b01      	cmp	r3, #1
    ad3c:	d936      	bls.n	adac <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_be16(buf);
    ad3e:	4608      	mov	r0, r1
    ad40:	f00c ffa3 	bl	17c8a <net_buf_simple_pull_be16>
    ad44:	e7f0      	b.n	ad28 <bt_mesh_model_recv+0x20>
		if (buf->len < 3) {
    ad46:	888b      	ldrh	r3, [r1, #4]
    ad48:	2b02      	cmp	r3, #2
    ad4a:	d92f      	bls.n	adac <bt_mesh_model_recv+0xa4>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    ad4c:	4608      	mov	r0, r1
    ad4e:	f00c ff8c 	bl	17c6a <net_buf_simple_pull_u8>
    ad52:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    ad54:	4620      	mov	r0, r4
    ad56:	f00c ff90 	bl	17c7a <net_buf_simple_pull_le16>
    ad5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    ad5e:	e7e4      	b.n	ad2a <bt_mesh_model_recv+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
    ad60:	f8b8 1010 	ldrh.w	r1, [r8, #16]
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ad64:	68db      	ldr	r3, [r3, #12]
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
    ad66:	b208      	sxth	r0, r1
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ad68:	013a      	lsls	r2, r7, #4
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
    ad6a:	2800      	cmp	r0, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    ad6c:	eb03 0902 	add.w	r9, r3, r2
		if (BT_MESH_ADDR_IS_UNICAST(rx->dst)) {
    ad70:	dd0c      	ble.n	ad8c <bt_mesh_model_recv+0x84>
			if (elem->addr != rx->dst) {
    ad72:	5a9b      	ldrh	r3, [r3, r2]
    ad74:	428b      	cmp	r3, r1
    ad76:	d113      	bne.n	ada0 <bt_mesh_model_recv+0x98>
		if (opcode < 0x10000) {
    ad78:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			models = elem->models;
    ad7c:	f8d9 2008 	ldr.w	r2, [r9, #8]
			models = elem->vnd_models;
    ad80:	f8d9 500c 	ldr.w	r5, [r9, #12]
		if (opcode < 0x10000) {
    ad84:	d31b      	bcc.n	adbe <bt_mesh_model_recv+0xb6>
			count = elem->vnd_model_count;
    ad86:	f899 3005 	ldrb.w	r3, [r9, #5]
    ad8a:	e01b      	b.n	adc4 <bt_mesh_model_recv+0xbc>
		} else if (BT_MESH_ADDR_IS_GROUP(rx->dst) ||
    ad8c:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
    ad90:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
    ad94:	d80d      	bhi.n	adb2 <bt_mesh_model_recv+0xaa>
			if (!bt_mesh_elem_find_group(elem, rx->dst)) {
    ad96:	4648      	mov	r0, r9
    ad98:	f7ff ff49 	bl	ac2e <bt_mesh_elem_find_group>
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
    ad9c:	2800      	cmp	r0, #0
    ad9e:	d1eb      	bne.n	ad78 <bt_mesh_model_recv+0x70>
	for (i = 0; i < dev_comp->elem_count; i++) {
    ada0:	3701      	adds	r7, #1
    ada2:	4b1f      	ldr	r3, [pc, #124]	; (ae20 <bt_mesh_model_recv+0x118>)
    ada4:	681b      	ldr	r3, [r3, #0]
    ada6:	689a      	ldr	r2, [r3, #8]
    ada8:	42ba      	cmp	r2, r7
    adaa:	d8d9      	bhi.n	ad60 <bt_mesh_model_recv+0x58>

		} else {
			BT_DBG("No OpCode 0x%08x for elem %d", opcode, i);
		}
	}
}
    adac:	b003      	add	sp, #12
    adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (i != 0 || !bt_mesh_fixed_group_match(rx->dst)) {
    adb2:	2f00      	cmp	r7, #0
    adb4:	d1f4      	bne.n	ada0 <bt_mesh_model_recv+0x98>
    adb6:	4608      	mov	r0, r1
    adb8:	f7ff ff8e 	bl	acd8 <bt_mesh_fixed_group_match>
    adbc:	e7ee      	b.n	ad9c <bt_mesh_model_recv+0x94>
			count = elem->model_count;
    adbe:	f899 3004 	ldrb.w	r3, [r9, #4]
			models = elem->models;
    adc2:	4615      	mov	r5, r2
    adc4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		op = find_op(models, count, rx->ctx.app_idx, opcode, &model);
    adc8:	f8b8 0006 	ldrh.w	r0, [r8, #6]
    adcc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	for (i = 0; i < model_count; i++) {
    add0:	42ab      	cmp	r3, r5
    add2:	d0e5      	beq.n	ada0 <bt_mesh_model_recv+0x98>
		if (mod->keys[i] == key) {
    add4:	89aa      	ldrh	r2, [r5, #12]
    add6:	4282      	cmp	r2, r0
    add8:	d108      	bne.n	adec <bt_mesh_model_recv+0xe4>
		for (op = (*model)->op; op->func; op++) {
    adda:	696a      	ldr	r2, [r5, #20]
    addc:	e003      	b.n	ade6 <bt_mesh_model_recv+0xde>
			if (op->opcode == opcode) {
    adde:	6811      	ldr	r1, [r2, #0]
    ade0:	42b1      	cmp	r1, r6
    ade2:	d005      	beq.n	adf0 <bt_mesh_model_recv+0xe8>
		for (op = (*model)->op; op->func; op++) {
    ade4:	320c      	adds	r2, #12
    ade6:	6891      	ldr	r1, [r2, #8]
    ade8:	2900      	cmp	r1, #0
    adea:	d1f8      	bne.n	adde <bt_mesh_model_recv+0xd6>
    adec:	351c      	adds	r5, #28
    adee:	e7ef      	b.n	add0 <bt_mesh_model_recv+0xc8>
			if (buf->len < op->min_len) {
    adf0:	88a1      	ldrh	r1, [r4, #4]
    adf2:	6853      	ldr	r3, [r2, #4]
    adf4:	4299      	cmp	r1, r3
    adf6:	d3d3      	bcc.n	ada0 <bt_mesh_model_recv+0x98>
	state->offset = net_buf_simple_headroom(buf);
    adf8:	4620      	mov	r0, r4
    adfa:	9201      	str	r2, [sp, #4]
    adfc:	f00c ff62 	bl	17cc4 <net_buf_simple_headroom>
			op->func(model, &rx->ctx, buf);
    ae00:	9a01      	ldr	r2, [sp, #4]
    ae02:	9900      	ldr	r1, [sp, #0]
    ae04:	6893      	ldr	r3, [r2, #8]
	state->len = buf->len;
    ae06:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
    ae0a:	4681      	mov	r9, r0
    ae0c:	4622      	mov	r2, r4
    ae0e:	4628      	mov	r0, r5
    ae10:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    ae12:	fa1a f389 	uxtah	r3, sl, r9
    ae16:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
    ae18:	f8a4 b004 	strh.w	fp, [r4, #4]
    ae1c:	e7c0      	b.n	ada0 <bt_mesh_model_recv+0x98>
    ae1e:	bf00      	nop
    ae20:	20000868 	.word	0x20000868

0000ae24 <bt_mesh_model_msg_init>:

void bt_mesh_model_msg_init(struct net_buf_simple *msg, u32_t opcode)
{
    ae24:	b538      	push	{r3, r4, r5, lr}
	buf->data = buf->__buf + reserve_head;
    ae26:	f100 0308 	add.w	r3, r0, #8
    ae2a:	6003      	str	r3, [r0, #0]
	net_buf_simple_init(msg, 0);

	if (opcode < 0x100) {
    ae2c:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0;
    ae2e:	f04f 0300 	mov.w	r3, #0
{
    ae32:	4604      	mov	r4, r0
    ae34:	8083      	strh	r3, [r0, #4]
	if (opcode < 0x100) {
    ae36:	d804      	bhi.n	ae42 <bt_mesh_model_msg_init+0x1e>
		/* 1-byte OpCode */
		net_buf_simple_add_u8(msg, opcode);
    ae38:	b2c9      	uxtb	r1, r1
	}

	/* 3-byte OpCode */
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
	net_buf_simple_add_le16(msg, opcode & 0xffff);
}
    ae3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
    ae3e:	f00c beb0 	b.w	17ba2 <net_buf_simple_add_u8>
	if (opcode < 0x10000) {
    ae42:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    ae46:	b28d      	uxth	r5, r1
    ae48:	d204      	bcs.n	ae54 <bt_mesh_model_msg_init+0x30>
		net_buf_simple_add_be16(msg, opcode);
    ae4a:	4629      	mov	r1, r5
}
    ae4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
    ae50:	f00c bebe 	b.w	17bd0 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
    ae54:	f3c1 4107 	ubfx	r1, r1, #16, #8
    ae58:	f00c fea3 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, opcode & 0xffff);
    ae5c:	4629      	mov	r1, r5
    ae5e:	4620      	mov	r0, r4
}
    ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_le16(msg, opcode & 0xffff);
    ae64:	f00c bea5 	b.w	17bb2 <net_buf_simple_add_le16>

0000ae68 <bt_mesh_model_send>:

int bt_mesh_model_send(struct bt_mesh_model *model,
		       struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *msg,
		       const struct bt_mesh_send_cb *cb, void *cb_data)
{
    ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae6a:	4605      	mov	r5, r0
    ae6c:	b085      	sub	sp, #20
	struct bt_mesh_net_tx tx = {
		.sub = bt_mesh_subnet_get(ctx->net_idx),
    ae6e:	8808      	ldrh	r0, [r1, #0]
{
    ae70:	461f      	mov	r7, r3
	struct bt_mesh_net_tx tx = {
    ae72:	2300      	movs	r3, #0
{
    ae74:	460e      	mov	r6, r1
    ae76:	4614      	mov	r4, r2
	struct bt_mesh_net_tx tx = {
    ae78:	9301      	str	r3, [sp, #4]
    ae7a:	9302      	str	r3, [sp, #8]
    ae7c:	9303      	str	r3, [sp, #12]
		.sub = bt_mesh_subnet_get(ctx->net_idx),
    ae7e:	f7fd f953 	bl	8128 <bt_mesh_subnet_get>
		.ctx = ctx,
		.src = model->elem->addr,
    ae82:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
    ae84:	9001      	str	r0, [sp, #4]
    ae86:	881b      	ldrh	r3, [r3, #0]
    ae88:	9602      	str	r6, [sp, #8]
    ae8a:	f8ad 300c 	strh.w	r3, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
    ae8e:	f001 fe3d 	bl	cb0c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    ae92:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!bt_mesh_is_provisioned()) {
    ae96:	f7fc fd27 	bl	78e8 <bt_mesh_is_provisioned>
    ae9a:	b178      	cbz	r0, aebc <bt_mesh_model_send+0x54>
	if (net_buf_simple_tailroom(msg) < 4) {
    ae9c:	4620      	mov	r0, r4
    ae9e:	f00c ff16 	bl	17cce <net_buf_simple_tailroom>
    aea2:	2803      	cmp	r0, #3
    aea4:	d907      	bls.n	aeb6 <bt_mesh_model_send+0x4e>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    aea6:	88a3      	ldrh	r3, [r4, #4]
    aea8:	2bc8      	cmp	r3, #200	; 0xc8
    aeaa:	d80b      	bhi.n	aec4 <bt_mesh_model_send+0x5c>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
    aeac:	9b02      	ldr	r3, [sp, #8]
		if (mod->keys[i] == key) {
    aeae:	885a      	ldrh	r2, [r3, #2]
    aeb0:	89ab      	ldrh	r3, [r5, #12]
    aeb2:	429a      	cmp	r2, r3
    aeb4:	d009      	beq.n	aeca <bt_mesh_model_send+0x62>
		return -EINVAL;
    aeb6:	f06f 0015 	mvn.w	r0, #21
    aeba:	e001      	b.n	aec0 <bt_mesh_model_send+0x58>
		return -EAGAIN;
    aebc:	f06f 000a 	mvn.w	r0, #10
		.friend_cred = 0,
	};

	return model_send(model, &tx, false, msg, cb, cb_data);
}
    aec0:	b005      	add	sp, #20
    aec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
    aec4:	f06f 0023 	mvn.w	r0, #35	; 0x23
	return model_send(model, &tx, false, msg, cb, cb_data);
    aec8:	e7fa      	b.n	aec0 <bt_mesh_model_send+0x58>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    aeca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aecc:	463a      	mov	r2, r7
    aece:	4621      	mov	r1, r4
    aed0:	a801      	add	r0, sp, #4
    aed2:	f7fe fc6b 	bl	97ac <bt_mesh_trans_send>
    aed6:	e7f3      	b.n	aec0 <bt_mesh_model_send+0x58>

0000aed8 <bt_mesh_model_publish>:

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    aed8:	b570      	push	{r4, r5, r6, lr}
    aeda:	b0ba      	sub	sp, #232	; 0xe8
    aedc:	4605      	mov	r5, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    aede:	22d4      	movs	r2, #212	; 0xd4
    aee0:	2100      	movs	r1, #0
    aee2:	a805      	add	r0, sp, #20
    aee4:	f7f5 fbe4 	bl	6b0 <memset>
    aee8:	23cc      	movs	r3, #204	; 0xcc
    aeea:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_model_pub *pub = model->pub;
	struct bt_mesh_app_key *key;
	struct bt_mesh_msg_ctx ctx = {
    aeee:	2300      	movs	r3, #0
	};
	struct bt_mesh_net_tx tx = {
    aef0:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
    aef2:	9300      	str	r3, [sp, #0]
    aef4:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_tx tx = {
    aef6:	9302      	str	r3, [sp, #8]
		.ctx = &ctx,
		.src = model->elem->addr,
    aef8:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_model_pub *pub = model->pub;
    aefa:	68ac      	ldr	r4, [r5, #8]
	struct bt_mesh_net_tx tx = {
    aefc:	881b      	ldrh	r3, [r3, #0]
    aefe:	f8cd d00c 	str.w	sp, [sp, #12]
    af02:	f8ad 3010 	strh.w	r3, [sp, #16]
		.xmit = bt_mesh_net_transmit_get(),
    af06:	f001 fe01 	bl	cb0c <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
    af0a:	f88d 0012 	strb.w	r0, [sp, #18]
	};
	int err;

	BT_DBG("");

	if (!pub) {
    af0e:	2c00      	cmp	r4, #0
    af10:	d062      	beq.n	afd8 <bt_mesh_model_publish+0x100>
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    af12:	88a3      	ldrh	r3, [r4, #4]
    af14:	b91b      	cbnz	r3, af1e <bt_mesh_model_publish+0x46>
		return -EADDRNOTAVAIL;
    af16:	f06f 0030 	mvn.w	r0, #48	; 0x30
		pub->count = 0;
		return err;
	}

	return 0;
}
    af1a:	b03a      	add	sp, #232	; 0xe8
    af1c:	bd70      	pop	{r4, r5, r6, pc}
	key = bt_mesh_app_key_find(pub->key);
    af1e:	88e0      	ldrh	r0, [r4, #6]
    af20:	f7fe fc20 	bl	9764 <bt_mesh_app_key_find>
	if (!key) {
    af24:	4606      	mov	r6, r0
    af26:	2800      	cmp	r0, #0
    af28:	d0f5      	beq.n	af16 <bt_mesh_model_publish+0x3e>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    af2a:	6923      	ldr	r3, [r4, #16]
    af2c:	889b      	ldrh	r3, [r3, #4]
    af2e:	3304      	adds	r3, #4
    af30:	2bcc      	cmp	r3, #204	; 0xcc
    af32:	dc54      	bgt.n	afde <bt_mesh_model_publish+0x106>
	if (pub->count) {
    af34:	7ae3      	ldrb	r3, [r4, #11]
    af36:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    af3a:	d003      	beq.n	af44 <bt_mesh_model_publish+0x6c>
		k_delayed_work_cancel(&pub->timer);
    af3c:	f104 0018 	add.w	r0, r4, #24
    af40:	f00d fed6 	bl	18cf0 <k_delayed_work_cancel>
	buf->data = buf->__buf + reserve_head;
    af44:	ab07      	add	r3, sp, #28
    af46:	9305      	str	r3, [sp, #20]
	buf->len = 0;
    af48:	2300      	movs	r3, #0
    af4a:	f8ad 3018 	strh.w	r3, [sp, #24]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
    af4e:	6923      	ldr	r3, [r4, #16]
    af50:	a805      	add	r0, sp, #20
    af52:	889a      	ldrh	r2, [r3, #4]
    af54:	6819      	ldr	r1, [r3, #0]
    af56:	f00c fe1b 	bl	17b90 <net_buf_simple_add_mem>
	ctx.addr = pub->addr;
    af5a:	88a3      	ldrh	r3, [r4, #4]
    af5c:	f8ad 3004 	strh.w	r3, [sp, #4]
	ctx.send_ttl = pub->ttl;
    af60:	7a23      	ldrb	r3, [r4, #8]
    af62:	f88d 3007 	strb.w	r3, [sp, #7]
	ctx.app_idx = key->app_idx;
    af66:	8873      	ldrh	r3, [r6, #2]
	ctx.net_idx = key->net_idx;
    af68:	8830      	ldrh	r0, [r6, #0]
	ctx.app_idx = key->app_idx;
    af6a:	f8ad 3002 	strh.w	r3, [sp, #2]
	tx.friend_cred = pub->cred;
    af6e:	7ae3      	ldrb	r3, [r4, #11]
    af70:	f89d 2013 	ldrb.w	r2, [sp, #19]
	ctx.net_idx = key->net_idx;
    af74:	f8ad 0000 	strh.w	r0, [sp]
	tx.friend_cred = pub->cred;
    af78:	f3c3 1300 	ubfx	r3, r3, #4, #1
    af7c:	f363 0200 	bfi	r2, r3, #0, #1
    af80:	f88d 2013 	strb.w	r2, [sp, #19]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    af84:	f7fd f8d0 	bl	8128 <bt_mesh_subnet_get>
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    af88:	7ae3      	ldrb	r3, [r4, #11]
    af8a:	7a62      	ldrb	r2, [r4, #9]
	tx.sub = bt_mesh_subnet_get(ctx.net_idx),
    af8c:	9002      	str	r0, [sp, #8]
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    af8e:	f362 1347 	bfi	r3, r2, #5, #3
    af92:	72e3      	strb	r3, [r4, #11]
	if (!bt_mesh_is_provisioned()) {
    af94:	f7fc fca8 	bl	78e8 <bt_mesh_is_provisioned>
    af98:	b1a8      	cbz	r0, afc6 <bt_mesh_model_publish+0xee>
	if (net_buf_simple_tailroom(msg) < 4) {
    af9a:	a805      	add	r0, sp, #20
    af9c:	f00c fe97 	bl	17cce <net_buf_simple_tailroom>
    afa0:	2803      	cmp	r0, #3
    afa2:	d913      	bls.n	afcc <bt_mesh_model_publish+0xf4>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    afa4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    afa8:	2bc8      	cmp	r3, #200	; 0xc8
    afaa:	d812      	bhi.n	afd2 <bt_mesh_model_publish+0xfa>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    afac:	462b      	mov	r3, r5
    afae:	4a0d      	ldr	r2, [pc, #52]	; (afe4 <bt_mesh_model_publish+0x10c>)
    afb0:	a905      	add	r1, sp, #20
    afb2:	a802      	add	r0, sp, #8
    afb4:	f7fe fbfa 	bl	97ac <bt_mesh_trans_send>
	if (err) {
    afb8:	2800      	cmp	r0, #0
    afba:	d0ae      	beq.n	af1a <bt_mesh_model_publish+0x42>
		pub->count = 0;
    afbc:	7ae3      	ldrb	r3, [r4, #11]
    afbe:	f36f 1347 	bfc	r3, #5, #3
    afc2:	72e3      	strb	r3, [r4, #11]
		return err;
    afc4:	e7a9      	b.n	af1a <bt_mesh_model_publish+0x42>
		return -EAGAIN;
    afc6:	f06f 000a 	mvn.w	r0, #10
    afca:	e7f7      	b.n	afbc <bt_mesh_model_publish+0xe4>
		return -EINVAL;
    afcc:	f06f 0015 	mvn.w	r0, #21
    afd0:	e7f4      	b.n	afbc <bt_mesh_model_publish+0xe4>
		return -EMSGSIZE;
    afd2:	f06f 0023 	mvn.w	r0, #35	; 0x23
    afd6:	e7f1      	b.n	afbc <bt_mesh_model_publish+0xe4>
		return -ENOTSUP;
    afd8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    afdc:	e79d      	b.n	af1a <bt_mesh_model_publish+0x42>
		return -EMSGSIZE;
    afde:	f06f 0023 	mvn.w	r0, #35	; 0x23
    afe2:	e79a      	b.n	af1a <bt_mesh_model_publish+0x42>
    afe4:	0001a040 	.word	0x0001a040

0000afe8 <mod_publish>:
{
    afe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    afec:	f850 7c18 	ldr.w	r7, [r0, #-24]
{
    aff0:	4604      	mov	r4, r0
    aff2:	b0bb      	sub	sp, #236	; 0xec
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    aff4:	4638      	mov	r0, r7
    aff6:	f7ff fd89 	bl	ab0c <bt_mesh_model_pub_period_get>
	if (pub->count) {
    affa:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    affe:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    b002:	4681      	mov	r9, r0
	if (pub->count) {
    b004:	d05c      	beq.n	b0c0 <mod_publish+0xd8>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    b006:	22d4      	movs	r2, #212	; 0xd4
    b008:	2100      	movs	r1, #0
    b00a:	a805      	add	r0, sp, #20
    b00c:	f7f5 fb50 	bl	6b0 <memset>
	struct bt_mesh_model_pub *pub = mod->pub;
    b010:	68bd      	ldr	r5, [r7, #8]
	struct bt_mesh_msg_ctx ctx = {
    b012:	2600      	movs	r6, #0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    b014:	23cc      	movs	r3, #204	; 0xcc
	struct bt_mesh_msg_ctx ctx = {
    b016:	9601      	str	r6, [sp, #4]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    b018:	f8ad 301a 	strh.w	r3, [sp, #26]
	struct bt_mesh_msg_ctx ctx = {
    b01c:	88ab      	ldrh	r3, [r5, #4]
    b01e:	f8ad 3004 	strh.w	r3, [sp, #4]
    b022:	7a2b      	ldrb	r3, [r5, #8]
    b024:	f88d 3007 	strb.w	r3, [sp, #7]
		.src = mod->elem->addr,
    b028:	687b      	ldr	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
    b02a:	9604      	str	r6, [sp, #16]
    b02c:	881b      	ldrh	r3, [r3, #0]
    b02e:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
    b032:	9600      	str	r6, [sp, #0]
	struct bt_mesh_net_tx tx = {
    b034:	9602      	str	r6, [sp, #8]
    b036:	f8cd d00c 	str.w	sp, [sp, #12]
		.xmit = bt_mesh_net_transmit_get(),
    b03a:	f001 fd67 	bl	cb0c <bt_mesh_net_transmit_get>
		.friend_cred = pub->cred,
    b03e:	7aeb      	ldrb	r3, [r5, #11]
	struct bt_mesh_net_tx tx = {
    b040:	f89d 2013 	ldrb.w	r2, [sp, #19]
    b044:	f88d 0012 	strb.w	r0, [sp, #18]
    b048:	f3c3 1300 	ubfx	r3, r3, #4, #1
    b04c:	f363 0200 	bfi	r2, r3, #0, #1
	key = bt_mesh_app_key_find(pub->key);
    b050:	88e8      	ldrh	r0, [r5, #6]
	struct bt_mesh_net_tx tx = {
    b052:	f88d 2013 	strb.w	r2, [sp, #19]
	key = bt_mesh_app_key_find(pub->key);
    b056:	f7fe fb85 	bl	9764 <bt_mesh_app_key_find>
	if (!key) {
    b05a:	4680      	mov	r8, r0
    b05c:	b1f8      	cbz	r0, b09e <mod_publish+0xb6>
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    b05e:	8800      	ldrh	r0, [r0, #0]
    b060:	f7fd f862 	bl	8128 <bt_mesh_subnet_get>
	ctx.net_idx = key->net_idx;
    b064:	f8b8 3000 	ldrh.w	r3, [r8]
    b068:	f8ad 3000 	strh.w	r3, [sp]
	ctx.app_idx = key->app_idx;
    b06c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
    b070:	f8ad 3002 	strh.w	r3, [sp, #2]
	buf->data = buf->__buf + reserve_head;
    b074:	ab07      	add	r3, sp, #28
    b076:	9305      	str	r3, [sp, #20]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
    b078:	692b      	ldr	r3, [r5, #16]
	buf->len = 0;
    b07a:	f8ad 6018 	strh.w	r6, [sp, #24]
    b07e:	889a      	ldrh	r2, [r3, #4]
    b080:	6819      	ldr	r1, [r3, #0]
	tx.sub = bt_mesh_subnet_get(key->net_idx);
    b082:	9002      	str	r0, [sp, #8]
	net_buf_simple_add_mem(sdu, pub->msg->data, pub->msg->len);
    b084:	a805      	add	r0, sp, #20
    b086:	f00c fd83 	bl	17b90 <net_buf_simple_add_mem>
	pub->count--;
    b08a:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
    b08c:	4a19      	ldr	r2, [pc, #100]	; (b0f4 <mod_publish+0x10c>)
	pub->count--;
    b08e:	33e0      	adds	r3, #224	; 0xe0
    b090:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, sdu, &pub_sent_cb, mod);
    b092:	a905      	add	r1, sp, #20
    b094:	463b      	mov	r3, r7
    b096:	a802      	add	r0, sp, #8
    b098:	f7fe fb88 	bl	97ac <bt_mesh_trans_send>
		if (err) {
    b09c:	b168      	cbz	r0, b0ba <mod_publish+0xd2>
			pub->count = 0;
    b09e:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    b0a2:	f36f 1347 	bfc	r3, #5, #3
    b0a6:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    b0aa:	f1b9 0f00 	cmp.w	r9, #0
    b0ae:	d004      	beq.n	b0ba <mod_publish+0xd2>
    b0b0:	464a      	mov	r2, r9
    b0b2:	4621      	mov	r1, r4
    b0b4:	4810      	ldr	r0, [pc, #64]	; (b0f8 <mod_publish+0x110>)
    b0b6:	f00d fe67 	bl	18d88 <k_delayed_work_submit_to_queue>
}
    b0ba:	b03b      	add	sp, #236	; 0xec
    b0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!period_ms) {
    b0c0:	2800      	cmp	r0, #0
    b0c2:	d0fa      	beq.n	b0ba <mod_publish+0xd2>
    b0c4:	f00d fb48 	bl	18758 <_impl_k_uptime_get_32>
	err = pub->update(pub->mod);
    b0c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	pub->period_start = k_uptime_get_32();
    b0cc:	f844 0c0c 	str.w	r0, [r4, #-12]
	err = pub->update(pub->mod);
    b0d0:	f854 0c18 	ldr.w	r0, [r4, #-24]
    b0d4:	4798      	blx	r3
	if (err) {
    b0d6:	2800      	cmp	r0, #0
    b0d8:	d1ef      	bne.n	b0ba <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
    b0da:	f854 0c18 	ldr.w	r0, [r4, #-24]
    b0de:	f7ff fefb 	bl	aed8 <bt_mesh_model_publish>
	if (pub->count) {
    b0e2:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    b0e6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    b0ea:	d0e6      	beq.n	b0ba <mod_publish+0xd2>
		k_delayed_work_cancel(&pub->timer);
    b0ec:	4620      	mov	r0, r4
    b0ee:	f00d fdff 	bl	18cf0 <k_delayed_work_cancel>
    b0f2:	e7e2      	b.n	b0ba <mod_publish+0xd2>
    b0f4:	0001a040 	.word	0x0001a040
    b0f8:	20001dd8 	.word	0x20001dd8

0000b0fc <bt_mesh_model_find_vnd>:

struct bt_mesh_model *bt_mesh_model_find_vnd(struct bt_mesh_elem *elem,
					     u16_t company, u16_t id)
{
    b0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->vnd_model_count; i++) {
    b0fe:	7947      	ldrb	r7, [r0, #5]
{
    b100:	4605      	mov	r5, r0
	for (i = 0; i < elem->vnd_model_count; i++) {
    b102:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
    b104:	f04f 0e1c 	mov.w	lr, #28
	for (i = 0; i < elem->vnd_model_count; i++) {
    b108:	b2d8      	uxtb	r0, r3
    b10a:	4287      	cmp	r7, r0
    b10c:	d801      	bhi.n	b112 <bt_mesh_model_find_vnd+0x16>
		    elem->vnd_models[i].vnd.id == id) {
			return &elem->vnd_models[i];
		}
	}

	return NULL;
    b10e:	2000      	movs	r0, #0
}
    b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
    b112:	fb0e f403 	mul.w	r4, lr, r3
    b116:	68ee      	ldr	r6, [r5, #12]
    b118:	1930      	adds	r0, r6, r4
    b11a:	5b34      	ldrh	r4, [r6, r4]
    b11c:	428c      	cmp	r4, r1
    b11e:	d102      	bne.n	b126 <bt_mesh_model_find_vnd+0x2a>
    b120:	8844      	ldrh	r4, [r0, #2]
    b122:	4294      	cmp	r4, r2
    b124:	d0f4      	beq.n	b110 <bt_mesh_model_find_vnd+0x14>
    b126:	3301      	adds	r3, #1
    b128:	e7ee      	b.n	b108 <bt_mesh_model_find_vnd+0xc>

0000b12a <bt_mesh_model_find>:

struct bt_mesh_model *bt_mesh_model_find(struct bt_mesh_elem *elem,
					 u16_t id)
{
    b12a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t i;

	for (i = 0; i < elem->model_count; i++) {
    b12c:	7906      	ldrb	r6, [r0, #4]
    b12e:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
    b130:	271c      	movs	r7, #28
	for (i = 0; i < elem->model_count; i++) {
    b132:	b2da      	uxtb	r2, r3
    b134:	4296      	cmp	r6, r2
    b136:	d801      	bhi.n	b13c <bt_mesh_model_find+0x12>
			return &elem->models[i];
		}
	}

	return NULL;
    b138:	2200      	movs	r2, #0
    b13a:	e008      	b.n	b14e <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
    b13c:	fb07 f403 	mul.w	r4, r7, r3
    b140:	6885      	ldr	r5, [r0, #8]
    b142:	192a      	adds	r2, r5, r4
    b144:	5b2c      	ldrh	r4, [r5, r4]
    b146:	428c      	cmp	r4, r1
    b148:	f103 0301 	add.w	r3, r3, #1
    b14c:	d1f1      	bne.n	b132 <bt_mesh_model_find+0x8>
}
    b14e:	4610      	mov	r0, r2
    b150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000b154 <bt_mesh_comp_get>:

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    b154:	4b01      	ldr	r3, [pc, #4]	; (b15c <bt_mesh_comp_get+0x8>)
    b156:	6818      	ldr	r0, [r3, #0]
    b158:	4770      	bx	lr
    b15a:	bf00      	nop
    b15c:	20000868 	.word	0x20000868

0000b160 <app_key_is_valid>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
    b160:	4b0d      	ldr	r3, [pc, #52]	; (b198 <app_key_is_valid+0x38>)
    b162:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
    b166:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b16a:	4291      	cmp	r1, r2
    b16c:	461a      	mov	r2, r3
    b16e:	d003      	beq.n	b178 <app_key_is_valid+0x18>
    b170:	f8b3 3166 	ldrh.w	r3, [r3, #358]	; 0x166
    b174:	4283      	cmp	r3, r0
    b176:	d00b      	beq.n	b190 <app_key_is_valid+0x30>
    b178:	f8b2 118c 	ldrh.w	r1, [r2, #396]	; 0x18c
    b17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b180:	4299      	cmp	r1, r3
    b182:	d007      	beq.n	b194 <app_key_is_valid+0x34>
    b184:	f8b2 318e 	ldrh.w	r3, [r2, #398]	; 0x18e
    b188:	1a1b      	subs	r3, r3, r0
    b18a:	4258      	negs	r0, r3
    b18c:	4158      	adcs	r0, r3
    b18e:	4770      	bx	lr
		    key->app_idx == app_idx) {
			return true;
    b190:	2001      	movs	r0, #1
    b192:	4770      	bx	lr
		}
	}

	return false;
    b194:	2000      	movs	r0, #0
}
    b196:	4770      	bx	lr
    b198:	20006168 	.word	0x20006168

0000b19c <key_idx_pack>:

#include <misc/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				u16_t idx1, u16_t idx2)
{
    b19c:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
    b19e:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
    b1a2:	4605      	mov	r5, r0
    b1a4:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
    b1a6:	b289      	uxth	r1, r1
    b1a8:	f00c fd03 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
    b1ac:	f3c4 1107 	ubfx	r1, r4, #4, #8
    b1b0:	4628      	mov	r0, r5
}
    b1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
    b1b6:	f00c bcf4 	b.w	17ba2 <net_buf_simple_add_u8>

0000b1ba <send_krp_status>:
}

static void send_krp_status(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    u16_t idx, u8_t phase, u8_t status)
{
    b1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1bc:	b089      	sub	sp, #36	; 0x24
    b1be:	4604      	mov	r4, r0
    b1c0:	460d      	mov	r5, r1
    b1c2:	4617      	mov	r7, r2
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b1c4:	2100      	movs	r1, #0
    b1c6:	2214      	movs	r2, #20
    b1c8:	a803      	add	r0, sp, #12
{
    b1ca:	461e      	mov	r6, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b1cc:	f7f5 fa70 	bl	6b0 <memset>
    b1d0:	230a      	movs	r3, #10

	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
    b1d2:	a803      	add	r0, sp, #12
    b1d4:	f248 0117 	movw	r1, #32791	; 0x8017
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b1d8:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_KRP_STATUS);
    b1dc:	f7ff fe22 	bl	ae24 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
    b1e0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    b1e4:	a803      	add	r0, sp, #12
    b1e6:	f00c fcdc 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
    b1ea:	4639      	mov	r1, r7
    b1ec:	a803      	add	r0, sp, #12
    b1ee:	f00c fce0 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, phase);
    b1f2:	4631      	mov	r1, r6
    b1f4:	a803      	add	r0, sp, #12
    b1f6:	f00c fcd4 	bl	17ba2 <net_buf_simple_add_u8>

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b1fa:	2300      	movs	r3, #0
    b1fc:	9300      	str	r3, [sp, #0]
    b1fe:	aa03      	add	r2, sp, #12
    b200:	4629      	mov	r1, r5
    b202:	4620      	mov	r0, r4
    b204:	f7ff fe30 	bl	ae68 <bt_mesh_model_send>
		BT_ERR("Unable to send Key Refresh State Status");
	}
}
    b208:	b009      	add	sp, #36	; 0x24
    b20a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b20c <lpn_timeout_get>:
{
    b20c:	b570      	push	{r4, r5, r6, lr}
    b20e:	b088      	sub	sp, #32
    b210:	4614      	mov	r4, r2
    b212:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    b214:	2214      	movs	r2, #20
{
    b216:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    b218:	a803      	add	r0, sp, #12
    b21a:	2100      	movs	r1, #0
    b21c:	f7f5 fa48 	bl	6b0 <memset>
    b220:	230b      	movs	r3, #11
	lpn_addr = net_buf_simple_pull_le16(buf);
    b222:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 5 + 4);
    b224:	f8ad 3012 	strh.w	r3, [sp, #18]
	lpn_addr = net_buf_simple_pull_le16(buf);
    b228:	f00c fd27 	bl	17c7a <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    b22c:	b203      	sxth	r3, r0
    b22e:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
    b230:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
    b232:	dd1b      	ble.n	b26c <lpn_timeout_get+0x60>
	bt_mesh_model_msg_init(msg, OP_LPN_TIMEOUT_STATUS);
    b234:	f248 012e 	movw	r1, #32814	; 0x802e
    b238:	a803      	add	r0, sp, #12
    b23a:	f7ff fdf3 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(msg, lpn_addr);
    b23e:	4621      	mov	r1, r4
    b240:	a803      	add	r0, sp, #12
    b242:	f00c fcb6 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, timeout);
    b246:	2100      	movs	r1, #0
    b248:	a803      	add	r0, sp, #12
    b24a:	f00c fcaa 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 8);
    b24e:	2100      	movs	r1, #0
    b250:	a803      	add	r0, sp, #12
    b252:	f00c fca6 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, timeout >> 16);
    b256:	2100      	movs	r1, #0
    b258:	a803      	add	r0, sp, #12
    b25a:	f00c fca2 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b25e:	2300      	movs	r3, #0
    b260:	9300      	str	r3, [sp, #0]
    b262:	aa03      	add	r2, sp, #12
    b264:	4631      	mov	r1, r6
    b266:	4628      	mov	r0, r5
    b268:	f7ff fdfe 	bl	ae68 <bt_mesh_model_send>
}
    b26c:	b008      	add	sp, #32
    b26e:	bd70      	pop	{r4, r5, r6, pc}

0000b270 <send_friend_status>:
{
    b270:	b570      	push	{r4, r5, r6, lr}
    b272:	4604      	mov	r4, r0
    b274:	b086      	sub	sp, #24
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    b276:	2210      	movs	r2, #16
{
    b278:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    b27a:	a802      	add	r0, sp, #8
    b27c:	2100      	movs	r1, #0
    b27e:	f7f5 fa17 	bl	6b0 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    b282:	69a6      	ldr	r6, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    b284:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
    b286:	a802      	add	r0, sp, #8
    b288:	f248 0111 	movw	r1, #32785	; 0x8011
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    b28c:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_FRIEND_STATUS);
    b290:	f7ff fdc8 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, cfg->frnd);
    b294:	7a71      	ldrb	r1, [r6, #9]
    b296:	a802      	add	r0, sp, #8
    b298:	f00c fc83 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b29c:	2300      	movs	r3, #0
    b29e:	9300      	str	r3, [sp, #0]
    b2a0:	aa02      	add	r2, sp, #8
    b2a2:	4629      	mov	r1, r5
    b2a4:	4620      	mov	r0, r4
    b2a6:	f7ff fddf 	bl	ae68 <bt_mesh_model_send>
}
    b2aa:	b006      	add	sp, #24
    b2ac:	bd70      	pop	{r4, r5, r6, pc}

0000b2ae <friend_get>:
	send_friend_status(model, ctx);
    b2ae:	f7ff bfdf 	b.w	b270 <send_friend_status>
	...

0000b2b4 <net_key_get>:
{
    b2b4:	b570      	push	{r4, r5, r6, lr}
    b2b6:	b088      	sub	sp, #32
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
    b2b8:	2214      	movs	r2, #20
{
    b2ba:	4605      	mov	r5, r0
    b2bc:	460e      	mov	r6, r1
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
    b2be:	a803      	add	r0, sp, #12
    b2c0:	2100      	movs	r1, #0
    b2c2:	f7f5 f9f5 	bl	6b0 <memset>
    b2c6:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
    b2c8:	f248 0143 	movw	r1, #32835	; 0x8043
    b2cc:	a803      	add	r0, sp, #12
		NET_BUF_SIMPLE(2 + 4 + IDX_LEN(CONFIG_BT_MESH_SUBNET_COUNT));
    b2ce:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_LIST);
    b2d2:	f7ff fda7 	bl	ae24 <bt_mesh_model_msg_init>
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    b2d6:	4b10      	ldr	r3, [pc, #64]	; (b318 <net_key_get+0x64>)
    b2d8:	f8b3 22b4 	ldrh.w	r2, [r3, #692]	; 0x2b4
    b2dc:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
    b2e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
    b2e4:	42a2      	cmp	r2, r4
    b2e6:	d005      	beq.n	b2f4 <net_key_get+0x40>
		if (prev == BT_MESH_KEY_UNUSED) {
    b2e8:	42a1      	cmp	r1, r4
    b2ea:	d013      	beq.n	b314 <net_key_get+0x60>
		key_idx_pack(msg, prev, sub->net_idx);
    b2ec:	a803      	add	r0, sp, #12
    b2ee:	f7ff ff55 	bl	b19c <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
    b2f2:	4621      	mov	r1, r4
	if (prev != BT_MESH_KEY_UNUSED) {
    b2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b2f8:	4299      	cmp	r1, r3
    b2fa:	d002      	beq.n	b302 <net_key_get+0x4e>
		net_buf_simple_add_le16(msg, prev);
    b2fc:	a803      	add	r0, sp, #12
    b2fe:	f00c fc58 	bl	17bb2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b302:	2300      	movs	r3, #0
    b304:	9300      	str	r3, [sp, #0]
    b306:	aa03      	add	r2, sp, #12
    b308:	4631      	mov	r1, r6
    b30a:	4628      	mov	r0, r5
    b30c:	f7ff fdac 	bl	ae68 <bt_mesh_model_send>
}
    b310:	b008      	add	sp, #32
    b312:	bd70      	pop	{r4, r5, r6, pc}
    b314:	4611      	mov	r1, r2
    b316:	e7ed      	b.n	b2f4 <net_key_get+0x40>
    b318:	20006168 	.word	0x20006168

0000b31c <send_net_key_status>:
{
    b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b31e:	b089      	sub	sp, #36	; 0x24
    b320:	4604      	mov	r4, r0
    b322:	460d      	mov	r5, r1
    b324:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    b326:	2100      	movs	r1, #0
    b328:	2214      	movs	r2, #20
    b32a:	a803      	add	r0, sp, #12
{
    b32c:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    b32e:	f7f5 f9bf 	bl	6b0 <memset>
    b332:	2309      	movs	r3, #9
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
    b334:	a803      	add	r0, sp, #12
    b336:	f248 0144 	movw	r1, #32836	; 0x8044
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 3 + 4);
    b33a:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_NET_KEY_STATUS);
    b33e:	f7ff fd71 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    b342:	4639      	mov	r1, r7
    b344:	a803      	add	r0, sp, #12
    b346:	f00c fc2c 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
    b34a:	4631      	mov	r1, r6
    b34c:	a803      	add	r0, sp, #12
    b34e:	f00c fc30 	bl	17bb2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b352:	2300      	movs	r3, #0
    b354:	9300      	str	r3, [sp, #0]
    b356:	aa03      	add	r2, sp, #12
    b358:	4629      	mov	r1, r5
    b35a:	4620      	mov	r0, r4
    b35c:	f7ff fd84 	bl	ae68 <bt_mesh_model_send>
}
    b360:	b009      	add	sp, #36	; 0x24
    b362:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b364 <krp_get>:

static void krp_get(struct bt_mesh_model *model, struct bt_mesh_msg_ctx *ctx,
		    struct net_buf_simple *buf)
{
    b364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b366:	4605      	mov	r5, r0
	struct bt_mesh_subnet *sub;
	u16_t idx;

	idx = net_buf_simple_pull_le16(buf);
    b368:	4610      	mov	r0, r2
{
    b36a:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
    b36c:	f00c fc85 	bl	17c7a <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    b370:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    b374:	4604      	mov	r4, r0
	if (idx > 0xfff) {
    b376:	d20a      	bcs.n	b38e <krp_get+0x2a>
		return;
	}

	BT_DBG("idx 0x%04x", idx);

	sub = bt_mesh_subnet_get(idx);
    b378:	f7fc fed6 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    b37c:	4603      	mov	r3, r0
    b37e:	b940      	cbnz	r0, b392 <krp_get+0x2e>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
    b380:	2204      	movs	r2, #4
	} else {
		send_krp_status(model, ctx, idx, sub->kr_phase,
    b382:	9200      	str	r2, [sp, #0]
    b384:	4631      	mov	r1, r6
    b386:	4622      	mov	r2, r4
    b388:	4628      	mov	r0, r5
    b38a:	f7ff ff16 	bl	b1ba <send_krp_status>
				STATUS_SUCCESS);
	}
}
    b38e:	b002      	add	sp, #8
    b390:	bd70      	pop	{r4, r5, r6, pc}
		send_krp_status(model, ctx, idx, sub->kr_phase,
    b392:	7fc3      	ldrb	r3, [r0, #31]
    b394:	2200      	movs	r2, #0
    b396:	e7f4      	b.n	b382 <krp_get+0x1e>

0000b398 <node_identity_get>:
{
    b398:	b5f0      	push	{r4, r5, r6, r7, lr}
    b39a:	b089      	sub	sp, #36	; 0x24
    b39c:	4614      	mov	r4, r2
    b39e:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b3a0:	2214      	movs	r2, #20
{
    b3a2:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b3a4:	a803      	add	r0, sp, #12
    b3a6:	2100      	movs	r1, #0
    b3a8:	f7f5 f982 	bl	6b0 <memset>
    b3ac:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
    b3ae:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b3b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
    b3b4:	f00c fc61 	bl	17c7a <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    b3b8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    b3bc:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    b3be:	d21c      	bcs.n	b3fa <node_identity_get+0x62>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
    b3c0:	f248 0148 	movw	r1, #32840	; 0x8048
    b3c4:	a803      	add	r0, sp, #12
    b3c6:	f7ff fd2d 	bl	ae24 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
    b3ca:	4628      	mov	r0, r5
    b3cc:	f7fc feac 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    b3d0:	4604      	mov	r4, r0
    b3d2:	b9a0      	cbnz	r0, b3fe <node_identity_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
    b3d4:	2104      	movs	r1, #4
    b3d6:	a803      	add	r0, sp, #12
    b3d8:	f00c fbe3 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, idx);
    b3dc:	4629      	mov	r1, r5
    b3de:	a803      	add	r0, sp, #12
    b3e0:	f00c fbe7 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, node_id);
    b3e4:	4621      	mov	r1, r4
    b3e6:	a803      	add	r0, sp, #12
    b3e8:	f00c fbdb 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b3ec:	2300      	movs	r3, #0
    b3ee:	9300      	str	r3, [sp, #0]
    b3f0:	aa03      	add	r2, sp, #12
    b3f2:	4639      	mov	r1, r7
    b3f4:	4630      	mov	r0, r6
    b3f6:	f7ff fd37 	bl	ae68 <bt_mesh_model_send>
}
    b3fa:	b009      	add	sp, #36	; 0x24
    b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
    b3fe:	2100      	movs	r1, #0
    b400:	a803      	add	r0, sp, #12
    b402:	f00c fbce 	bl	17ba2 <net_buf_simple_add_u8>
		node_id = sub->node_id;
    b406:	f894 4020 	ldrb.w	r4, [r4, #32]
    b40a:	e7e7      	b.n	b3dc <node_identity_get+0x44>

0000b40c <app_key_get>:
{
    b40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b410:	b089      	sub	sp, #36	; 0x24
    b412:	4614      	mov	r4, r2
    b414:	4606      	mov	r6, r0
		NET_BUF_SIMPLE(2 + 3 + 4 +
    b416:	2214      	movs	r2, #20
{
    b418:	460f      	mov	r7, r1
		NET_BUF_SIMPLE(2 + 3 + 4 +
    b41a:	a803      	add	r0, sp, #12
    b41c:	2100      	movs	r1, #0
    b41e:	f7f5 f947 	bl	6b0 <memset>
    b422:	230c      	movs	r3, #12
	get_idx = net_buf_simple_pull_le16(buf);
    b424:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 3 + 4 +
    b426:	f8ad 3012 	strh.w	r3, [sp, #18]
	get_idx = net_buf_simple_pull_le16(buf);
    b42a:	f00c fc26 	bl	17c7a <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
    b42e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
    b432:	4605      	mov	r5, r0
	if (get_idx > 0xfff) {
    b434:	d234      	bcs.n	b4a0 <app_key_get+0x94>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_LIST);
    b436:	f248 0102 	movw	r1, #32770	; 0x8002
    b43a:	a803      	add	r0, sp, #12
    b43c:	f7ff fcf2 	bl	ae24 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_get(get_idx)) {
    b440:	4628      	mov	r0, r5
    b442:	f7fc fe71 	bl	8128 <bt_mesh_subnet_get>
		status = STATUS_SUCCESS;
    b446:	2800      	cmp	r0, #0
    b448:	bf0c      	ite	eq
    b44a:	2404      	moveq	r4, #4
    b44c:	2400      	movne	r4, #0
	net_buf_simple_add_u8(msg, status);
    b44e:	4621      	mov	r1, r4
    b450:	a803      	add	r0, sp, #12
    b452:	f00c fba6 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, get_idx);
    b456:	4629      	mov	r1, r5
    b458:	a803      	add	r0, sp, #12
    b45a:	f00c fbaa 	bl	17bb2 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    b45e:	b9c4      	cbnz	r4, b492 <app_key_get+0x86>
    b460:	4c14      	ldr	r4, [pc, #80]	; (b4b4 <app_key_get+0xa8>)
    b462:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b466:	f104 0850 	add.w	r8, r4, #80	; 0x50
		if (prev == BT_MESH_KEY_UNUSED) {
    b46a:	4689      	mov	r9, r1
		if (key->net_idx != get_idx) {
    b46c:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    b470:	42ab      	cmp	r3, r5
    b472:	d104      	bne.n	b47e <app_key_get+0x72>
		if (prev == BT_MESH_KEY_UNUSED) {
    b474:	4549      	cmp	r1, r9
    b476:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    b47a:	d114      	bne.n	b4a6 <app_key_get+0x9a>
			prev = key->app_idx;
    b47c:	4611      	mov	r1, r2
    b47e:	3428      	adds	r4, #40	; 0x28
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
    b480:	45a0      	cmp	r8, r4
    b482:	d1f3      	bne.n	b46c <app_key_get+0x60>
	if (prev != BT_MESH_KEY_UNUSED) {
    b484:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b488:	4299      	cmp	r1, r3
    b48a:	d002      	beq.n	b492 <app_key_get+0x86>
		net_buf_simple_add_le16(msg, prev);
    b48c:	a803      	add	r0, sp, #12
    b48e:	f00c fb90 	bl	17bb2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b492:	2300      	movs	r3, #0
    b494:	9300      	str	r3, [sp, #0]
    b496:	aa03      	add	r2, sp, #12
    b498:	4639      	mov	r1, r7
    b49a:	4630      	mov	r0, r6
    b49c:	f7ff fce4 	bl	ae68 <bt_mesh_model_send>
}
    b4a0:	b009      	add	sp, #36	; 0x24
    b4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		key_idx_pack(msg, prev, key->app_idx);
    b4a6:	a803      	add	r0, sp, #12
    b4a8:	f7ff fe78 	bl	b19c <key_idx_pack>
		prev = BT_MESH_KEY_UNUSED;
    b4ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b4b0:	e7e5      	b.n	b47e <app_key_get+0x72>
    b4b2:	bf00      	nop
    b4b4:	20006168 	.word	0x20006168

0000b4b8 <hb_pub_send_status>:
} __packed;

static void hb_pub_send_status(struct bt_mesh_model *model,
			       struct bt_mesh_msg_ctx *ctx, u8_t status,
			       struct hb_pub_param *orig_msg)
{
    b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4bc:	b088      	sub	sp, #32
    b4be:	4605      	mov	r5, r0
    b4c0:	4690      	mov	r8, r2
    b4c2:	460e      	mov	r6, r1
	/* Needed size: opcode (1 byte) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
    b4c4:	2218      	movs	r2, #24
    b4c6:	2100      	movs	r1, #0
    b4c8:	a802      	add	r0, sp, #8
{
    b4ca:	461f      	mov	r7, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
    b4cc:	f7f5 f8f0 	bl	6b0 <memset>
    b4d0:	230f      	movs	r3, #15
	struct bt_mesh_cfg_srv *cfg = model->user_data;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
    b4d2:	2106      	movs	r1, #6
    b4d4:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(1 + 10 + 4);
    b4d6:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    b4da:	69ac      	ldr	r4, [r5, #24]
	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_PUB_STATUS);
    b4dc:	f7ff fca2 	bl	ae24 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
    b4e0:	4641      	mov	r1, r8
    b4e2:	a802      	add	r0, sp, #8
    b4e4:	f00c fb5d 	bl	17ba2 <net_buf_simple_add_u8>

	if (orig_msg) {
    b4e8:	b18f      	cbz	r7, b50e <hb_pub_send_status+0x56>
		memcpy(net_buf_simple_add(msg, sizeof(*orig_msg)), orig_msg,
    b4ea:	2109      	movs	r1, #9
    b4ec:	a802      	add	r0, sp, #8
    b4ee:	f00c fb49 	bl	17b84 <net_buf_simple_add>
    b4f2:	2209      	movs	r2, #9
    b4f4:	4639      	mov	r1, r7
    b4f6:	f7f5 f8af 	bl	658 <memcpy>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);

send:
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b4fa:	2300      	movs	r3, #0
    b4fc:	9300      	str	r3, [sp, #0]
    b4fe:	aa02      	add	r2, sp, #8
    b500:	4631      	mov	r1, r6
    b502:	4628      	mov	r0, r5
    b504:	f7ff fcb0 	bl	ae68 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Publication Status");
	}
}
    b508:	b008      	add	sp, #32
    b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(msg, cfg->hb_pub.dst);
    b50e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    b510:	a802      	add	r0, sp, #8
    b512:	f00c fb4e 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
    b516:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	if (!val) {
    b518:	b171      	cbz	r1, b538 <hb_pub_send_status+0x80>
	} else if (val == 0x01) {
    b51a:	2901      	cmp	r1, #1
    b51c:	d00c      	beq.n	b538 <hb_pub_send_status+0x80>
	} else if (val == 0xffff) {
    b51e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b522:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
    b524:	bf1f      	itttt	ne
    b526:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    b52a:	fab1 f181 	clzne	r1, r1
    b52e:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
    b532:	b2c9      	uxtbne	r1, r1
		return 0xff;
    b534:	bf08      	it	eq
    b536:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(msg, hb_pub_count_log(cfg->hb_pub.count));
    b538:	a802      	add	r0, sp, #8
    b53a:	f00c fb32 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.period);
    b53e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    b542:	a802      	add	r0, sp, #8
    b544:	f00c fb2d 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, cfg->hb_pub.ttl);
    b548:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
    b54c:	a802      	add	r0, sp, #8
    b54e:	f00c fb28 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, cfg->hb_pub.feat);
    b552:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
    b554:	a802      	add	r0, sp, #8
    b556:	f00c fb2c 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_pub.net_idx);
    b55a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b55c:	a802      	add	r0, sp, #8
    b55e:	f00c fb28 	bl	17bb2 <net_buf_simple_add_le16>
    b562:	e7ca      	b.n	b4fa <hb_pub_send_status+0x42>

0000b564 <heartbeat_pub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
    b564:	2300      	movs	r3, #0
    b566:	461a      	mov	r2, r3
    b568:	f7ff bfa6 	b.w	b4b8 <hb_pub_send_status>

0000b56c <send_mod_sub_status>:
{
    b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b570:	b088      	sub	sp, #32
    b572:	4690      	mov	r8, r2
    b574:	4604      	mov	r4, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    b576:	2218      	movs	r2, #24
{
    b578:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    b57a:	a802      	add	r0, sp, #8
    b57c:	2100      	movs	r1, #0
{
    b57e:	461f      	mov	r7, r3
    b580:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    b584:	f7f5 f894 	bl	6b0 <memset>
    b588:	230f      	movs	r3, #15
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
    b58a:	f248 011f 	movw	r1, #32799	; 0x801f
    b58e:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    b590:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_STATUS);
    b594:	f7ff fc46 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    b598:	4641      	mov	r1, r8
    b59a:	a802      	add	r0, sp, #8
    b59c:	f00c fb01 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
    b5a0:	4639      	mov	r1, r7
    b5a2:	a802      	add	r0, sp, #8
    b5a4:	f00c fb05 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, sub_addr);
    b5a8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
    b5ac:	a802      	add	r0, sp, #8
    b5ae:	f00c fb00 	bl	17bb2 <net_buf_simple_add_le16>
	if (vnd) {
    b5b2:	b18e      	cbz	r6, b5d8 <send_mod_sub_status+0x6c>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
    b5b4:	2104      	movs	r1, #4
    b5b6:	a802      	add	r0, sp, #8
    b5b8:	f00c fae4 	bl	17b84 <net_buf_simple_add>
    b5bc:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    b5be:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b5c0:	f7f5 f84a 	bl	658 <memcpy>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b5c4:	2300      	movs	r3, #0
    b5c6:	9300      	str	r3, [sp, #0]
    b5c8:	aa02      	add	r2, sp, #8
    b5ca:	4629      	mov	r1, r5
    b5cc:	4620      	mov	r0, r4
    b5ce:	f7ff fc4b 	bl	ae68 <bt_mesh_model_send>
}
    b5d2:	b008      	add	sp, #32
    b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    b5d8:	2102      	movs	r1, #2
    b5da:	a802      	add	r0, sp, #8
    b5dc:	f00c fad2 	bl	17b84 <net_buf_simple_add>
    b5e0:	2202      	movs	r2, #2
    b5e2:	e7ec      	b.n	b5be <send_mod_sub_status+0x52>

0000b5e4 <krp_set>:
{
    b5e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b5e8:	4680      	mov	r8, r0
	idx = net_buf_simple_pull_le16(buf);
    b5ea:	4610      	mov	r0, r2
{
    b5ec:	4614      	mov	r4, r2
    b5ee:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
    b5f0:	f00c fb43 	bl	17c7a <net_buf_simple_pull_le16>
    b5f4:	4606      	mov	r6, r0
	phase = net_buf_simple_pull_u8(buf);
    b5f6:	4620      	mov	r0, r4
    b5f8:	f00c fb37 	bl	17c6a <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
    b5fc:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
    b600:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    b602:	d215      	bcs.n	b630 <krp_set+0x4c>
	sub = bt_mesh_subnet_get(idx);
    b604:	4630      	mov	r0, r6
    b606:	f7fc fd8f 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    b60a:	4604      	mov	r4, r0
    b60c:	b940      	cbnz	r0, b620 <krp_set+0x3c>
		send_krp_status(model, ctx, idx, 0x00, STATUS_INVALID_NETKEY);
    b60e:	2304      	movs	r3, #4
    b610:	9300      	str	r3, [sp, #0]
    b612:	4603      	mov	r3, r0
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
    b614:	4632      	mov	r2, r6
    b616:	4639      	mov	r1, r7
    b618:	4640      	mov	r0, r8
    b61a:	f7ff fdce 	bl	b1ba <send_krp_status>
    b61e:	e007      	b.n	b630 <krp_set+0x4c>
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
    b620:	1eab      	subs	r3, r5, #2
    b622:	b2db      	uxtb	r3, r3
    b624:	2b01      	cmp	r3, #1
    b626:	d803      	bhi.n	b630 <krp_set+0x4c>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
    b628:	7fc3      	ldrb	r3, [r0, #31]
	if (phase < BT_MESH_KR_PHASE_2 || phase > BT_MESH_KR_PHASE_3 ||
    b62a:	b923      	cbnz	r3, b636 <krp_set+0x52>
	    (sub->kr_phase == BT_MESH_KR_NORMAL &&
    b62c:	2d02      	cmp	r5, #2
    b62e:	d10e      	bne.n	b64e <krp_set+0x6a>
}
    b630:	b002      	add	sp, #8
    b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sub->kr_phase == BT_MESH_KR_PHASE_1 &&
    b636:	2b01      	cmp	r3, #1
    b638:	d109      	bne.n	b64e <krp_set+0x6a>
    b63a:	2d02      	cmp	r5, #2
    b63c:	d107      	bne.n	b64e <krp_set+0x6a>
		sub->kr_phase = BT_MESH_KR_PHASE_2;
    b63e:	77c5      	strb	r5, [r0, #31]
		sub->kr_flag = 1;
    b640:	7783      	strb	r3, [r0, #30]
		bt_mesh_net_beacon_update(sub);
    b642:	f7fc fef3 	bl	842c <bt_mesh_net_beacon_update>
	send_krp_status(model, ctx, idx, sub->kr_phase, STATUS_SUCCESS);
    b646:	2200      	movs	r2, #0
    b648:	7fe3      	ldrb	r3, [r4, #31]
    b64a:	9200      	str	r2, [sp, #0]
    b64c:	e7e2      	b.n	b614 <krp_set+0x30>
	} else if ((sub->kr_phase == BT_MESH_KR_PHASE_1 ||
    b64e:	3b01      	subs	r3, #1
    b650:	2b01      	cmp	r3, #1
    b652:	d8f8      	bhi.n	b646 <krp_set+0x62>
		    sub->kr_phase == BT_MESH_KR_PHASE_2) &&
    b654:	2d03      	cmp	r5, #3
    b656:	d1f6      	bne.n	b646 <krp_set+0x62>
		bt_mesh_net_revoke_keys(sub);
    b658:	4620      	mov	r0, r4
    b65a:	f7fc ff55 	bl	8508 <bt_mesh_net_revoke_keys>
			friend_cred_refresh(ctx->net_idx);
    b65e:	8838      	ldrh	r0, [r7, #0]
    b660:	f7fc fdea 	bl	8238 <friend_cred_refresh>
		sub->kr_phase = BT_MESH_KR_NORMAL;
    b664:	2300      	movs	r3, #0
    b666:	77e3      	strb	r3, [r4, #31]
		sub->kr_flag = 0;
    b668:	77a3      	strb	r3, [r4, #30]
		bt_mesh_net_beacon_update(sub);
    b66a:	4620      	mov	r0, r4
    b66c:	e7e9      	b.n	b642 <krp_set+0x5e>

0000b66e <node_reset>:
{
    b66e:	b530      	push	{r4, r5, lr}
    b670:	b087      	sub	sp, #28
    b672:	4604      	mov	r4, r0
    b674:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
    b676:	2210      	movs	r2, #16
    b678:	2100      	movs	r1, #0
    b67a:	a802      	add	r0, sp, #8
    b67c:	f7f5 f818 	bl	6b0 <memset>
    b680:	2306      	movs	r3, #6
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
    b682:	a802      	add	r0, sp, #8
    b684:	f248 014a 	movw	r1, #32842	; 0x804a
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 0 + 4);
    b688:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NODE_RESET_STATUS);
    b68c:	f7ff fbca 	bl	ae24 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b690:	2300      	movs	r3, #0
    b692:	9300      	str	r3, [sp, #0]
    b694:	aa02      	add	r2, sp, #8
    b696:	4629      	mov	r1, r5
    b698:	4620      	mov	r0, r4
    b69a:	f7ff fbe5 	bl	ae68 <bt_mesh_model_send>
	bt_mesh_reset();
    b69e:	f7fc f8e1 	bl	7864 <bt_mesh_reset>
}
    b6a2:	b007      	add	sp, #28
    b6a4:	bd30      	pop	{r4, r5, pc}

0000b6a6 <mod_sub_get>:
{
    b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6aa:	b088      	sub	sp, #32
    b6ac:	4614      	mov	r4, r2
    b6ae:	4607      	mov	r7, r0
		NET_BUF_SIMPLE(2 + 5 + 4 +
    b6b0:	2218      	movs	r2, #24
{
    b6b2:	4688      	mov	r8, r1
		NET_BUF_SIMPLE(2 + 5 + 4 +
    b6b4:	a802      	add	r0, sp, #8
    b6b6:	2100      	movs	r1, #0
    b6b8:	f7f4 fffa 	bl	6b0 <memset>
    b6bc:	230f      	movs	r3, #15
	addr = net_buf_simple_pull_le16(buf);
    b6be:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 5 + 4 +
    b6c0:	f8ad 300e 	strh.w	r3, [sp, #14]
	addr = net_buf_simple_pull_le16(buf);
    b6c4:	f00c fad9 	bl	17c7a <net_buf_simple_pull_le16>
    b6c8:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
    b6ca:	4620      	mov	r0, r4
    b6cc:	f00c fad5 	bl	17c7a <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
    b6d0:	f248 012a 	movw	r1, #32810	; 0x802a
	id = net_buf_simple_pull_le16(buf);
    b6d4:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST);
    b6d6:	a802      	add	r0, sp, #8
    b6d8:	f7ff fba4 	bl	ae24 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    b6dc:	4628      	mov	r0, r5
    b6de:	f7ff fad1 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    b6e2:	b960      	cbnz	r0, b6fe <mod_sub_get+0x58>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
    b6e4:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
    b6e6:	a802      	add	r0, sp, #8
    b6e8:	f00c fa5b 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
    b6ec:	4629      	mov	r1, r5
    b6ee:	a802      	add	r0, sp, #8
    b6f0:	f00c fa5f 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
    b6f4:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
    b6f6:	a802      	add	r0, sp, #8
    b6f8:	f00c fa5b 	bl	17bb2 <net_buf_simple_add_le16>
    b6fc:	e01a      	b.n	b734 <mod_sub_get+0x8e>
	mod = bt_mesh_model_find(elem, id);
    b6fe:	4621      	mov	r1, r4
    b700:	f7ff fd13 	bl	b12a <bt_mesh_model_find>
	if (!mod) {
    b704:	4606      	mov	r6, r0
    b706:	b908      	cbnz	r0, b70c <mod_sub_get+0x66>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
    b708:	2102      	movs	r1, #2
    b70a:	e7ec      	b.n	b6e6 <mod_sub_get+0x40>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
    b70c:	2100      	movs	r1, #0
    b70e:	a802      	add	r0, sp, #8
    b710:	f00c fa47 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
    b714:	4629      	mov	r1, r5
    b716:	a802      	add	r0, sp, #8
    b718:	f00c fa4b 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
    b71c:	4621      	mov	r1, r4
    b71e:	a802      	add	r0, sp, #8
    b720:	f00c fa47 	bl	17bb2 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    b724:	89f1      	ldrh	r1, [r6, #14]
    b726:	b111      	cbz	r1, b72e <mod_sub_get+0x88>
			net_buf_simple_add_le16(msg, mod->groups[i]);
    b728:	a802      	add	r0, sp, #8
    b72a:	f00c fa42 	bl	17bb2 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    b72e:	8a31      	ldrh	r1, [r6, #16]
    b730:	2900      	cmp	r1, #0
    b732:	d1e0      	bne.n	b6f6 <mod_sub_get+0x50>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b734:	2300      	movs	r3, #0
    b736:	9300      	str	r3, [sp, #0]
    b738:	aa02      	add	r2, sp, #8
    b73a:	4641      	mov	r1, r8
    b73c:	4638      	mov	r0, r7
    b73e:	f7ff fb93 	bl	ae68 <bt_mesh_model_send>
}
    b742:	b008      	add	sp, #32
    b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b748 <mod_sub_get_vnd>:
{
    b748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b74c:	b08b      	sub	sp, #44	; 0x2c
    b74e:	4614      	mov	r4, r2
    b750:	4680      	mov	r8, r0
		NET_BUF_SIMPLE(2 + 7 + 4 +
    b752:	221c      	movs	r2, #28
{
    b754:	4689      	mov	r9, r1
		NET_BUF_SIMPLE(2 + 7 + 4 +
    b756:	a803      	add	r0, sp, #12
    b758:	2100      	movs	r1, #0
    b75a:	f7f4 ffa9 	bl	6b0 <memset>
    b75e:	2311      	movs	r3, #17
	addr = net_buf_simple_pull_le16(buf);
    b760:	4620      	mov	r0, r4
		NET_BUF_SIMPLE(2 + 7 + 4 +
    b762:	f8ad 3012 	strh.w	r3, [sp, #18]
	addr = net_buf_simple_pull_le16(buf);
    b766:	f00c fa88 	bl	17c7a <net_buf_simple_pull_le16>
    b76a:	4606      	mov	r6, r0
	company = net_buf_simple_pull_le16(buf);
    b76c:	4620      	mov	r0, r4
    b76e:	f00c fa84 	bl	17c7a <net_buf_simple_pull_le16>
    b772:	4605      	mov	r5, r0
	id = net_buf_simple_pull_le16(buf);
    b774:	4620      	mov	r0, r4
    b776:	f00c fa80 	bl	17c7a <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
    b77a:	f248 012c 	movw	r1, #32812	; 0x802c
	id = net_buf_simple_pull_le16(buf);
    b77e:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(msg, OP_MOD_SUB_LIST_VND);
    b780:	a803      	add	r0, sp, #12
    b782:	f7ff fb4f 	bl	ae24 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    b786:	4630      	mov	r0, r6
    b788:	f7ff fa7c 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    b78c:	b980      	cbnz	r0, b7b0 <mod_sub_get_vnd+0x68>
		net_buf_simple_add_u8(msg, STATUS_INVALID_ADDRESS);
    b78e:	2101      	movs	r1, #1
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
    b790:	a803      	add	r0, sp, #12
    b792:	f00c fa06 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, addr);
    b796:	4631      	mov	r1, r6
    b798:	a803      	add	r0, sp, #12
    b79a:	f00c fa0a 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, company);
    b79e:	4629      	mov	r1, r5
    b7a0:	a803      	add	r0, sp, #12
    b7a2:	f00c fa06 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(msg, id);
    b7a6:	4621      	mov	r1, r4
			net_buf_simple_add_le16(msg, mod->groups[i]);
    b7a8:	a803      	add	r0, sp, #12
    b7aa:	f00c fa02 	bl	17bb2 <net_buf_simple_add_le16>
    b7ae:	e01f      	b.n	b7f0 <mod_sub_get_vnd+0xa8>
	mod = bt_mesh_model_find_vnd(elem, company, id);
    b7b0:	4622      	mov	r2, r4
    b7b2:	4629      	mov	r1, r5
    b7b4:	f7ff fca2 	bl	b0fc <bt_mesh_model_find_vnd>
	if (!mod) {
    b7b8:	4607      	mov	r7, r0
    b7ba:	b908      	cbnz	r0, b7c0 <mod_sub_get_vnd+0x78>
		net_buf_simple_add_u8(msg, STATUS_INVALID_MODEL);
    b7bc:	2102      	movs	r1, #2
    b7be:	e7e7      	b.n	b790 <mod_sub_get_vnd+0x48>
	net_buf_simple_add_u8(msg, STATUS_SUCCESS);
    b7c0:	2100      	movs	r1, #0
    b7c2:	a803      	add	r0, sp, #12
    b7c4:	f00c f9ed 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, addr);
    b7c8:	4631      	mov	r1, r6
    b7ca:	a803      	add	r0, sp, #12
    b7cc:	f00c f9f1 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, company);
    b7d0:	4629      	mov	r1, r5
    b7d2:	a803      	add	r0, sp, #12
    b7d4:	f00c f9ed 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, id);
    b7d8:	4621      	mov	r1, r4
    b7da:	a803      	add	r0, sp, #12
    b7dc:	f00c f9e9 	bl	17bb2 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    b7e0:	89f9      	ldrh	r1, [r7, #14]
    b7e2:	b111      	cbz	r1, b7ea <mod_sub_get_vnd+0xa2>
			net_buf_simple_add_le16(msg, mod->groups[i]);
    b7e4:	a803      	add	r0, sp, #12
    b7e6:	f00c f9e4 	bl	17bb2 <net_buf_simple_add_le16>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
    b7ea:	8a39      	ldrh	r1, [r7, #16]
    b7ec:	2900      	cmp	r1, #0
    b7ee:	d1db      	bne.n	b7a8 <mod_sub_get_vnd+0x60>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b7f0:	2300      	movs	r3, #0
    b7f2:	9300      	str	r3, [sp, #0]
    b7f4:	aa03      	add	r2, sp, #12
    b7f6:	4649      	mov	r1, r9
    b7f8:	4640      	mov	r0, r8
    b7fa:	f7ff fb35 	bl	ae68 <bt_mesh_model_send>
}
    b7fe:	b00b      	add	sp, #44	; 0x2c
    b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b804 <_app_key_del>:
{
    b804:	b510      	push	{r4, lr}
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
    b806:	1c81      	adds	r1, r0, #2
{
    b808:	4604      	mov	r4, r0
	bt_mesh_model_foreach(_mod_unbind, &key->app_idx);
    b80a:	4807      	ldr	r0, [pc, #28]	; (b828 <_app_key_del+0x24>)
    b80c:	f7ff f944 	bl	aa98 <bt_mesh_model_foreach>
	key->net_idx = BT_MESH_KEY_UNUSED;
    b810:	4620      	mov	r0, r4
    b812:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b816:	f820 3b05 	strh.w	r3, [r0], #5
	memset(key->keys, 0, sizeof(key->keys));
    b81a:	2222      	movs	r2, #34	; 0x22
    b81c:	2100      	movs	r1, #0
}
    b81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(key->keys, 0, sizeof(key->keys));
    b822:	f7f4 bf45 	b.w	6b0 <memset>
    b826:	bf00      	nop
    b828:	0000c727 	.word	0x0000c727

0000b82c <net_key_update>:
{
    b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b830:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
    b832:	4610      	mov	r0, r2
{
    b834:	460f      	mov	r7, r1
    b836:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
    b838:	f00c fa1f 	bl	17c7a <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    b83c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    b840:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    b842:	d23e      	bcs.n	b8c2 <net_key_update+0x96>
	sub = bt_mesh_subnet_get(idx);
    b844:	f7fc fc70 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    b848:	4604      	mov	r4, r0
    b84a:	b938      	cbnz	r0, b85c <net_key_update+0x30>
		send_net_key_status(model, ctx, idx, STATUS_INVALID_NETKEY);
    b84c:	2304      	movs	r3, #4
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    b84e:	462a      	mov	r2, r5
    b850:	4639      	mov	r1, r7
    b852:	4630      	mov	r0, r6
}
    b854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    b858:	f7ff bd60 	b.w	b31c <send_net_key_status>
	switch (sub->kr_phase) {
    b85c:	7fc3      	ldrb	r3, [r0, #31]
    b85e:	2b03      	cmp	r3, #3
    b860:	d819      	bhi.n	b896 <net_key_update+0x6a>
    b862:	e8df f003 	tbb	[pc, r3]
    b866:	0c02      	.short	0x0c02
    b868:	1616      	.short	0x1616
		if (!memcmp(buf->data, sub->keys[0].net, 16)) {
    b86a:	f100 0130 	add.w	r1, r0, #48	; 0x30
    b86e:	2210      	movs	r2, #16
    b870:	f8d8 0000 	ldr.w	r0, [r8]
    b874:	f7f4 fedb 	bl	62e <memcmp>
    b878:	b968      	cbnz	r0, b896 <net_key_update+0x6a>
    b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(buf->data, sub->keys[1].net, 16)) {
    b87e:	f100 0189 	add.w	r1, r0, #137	; 0x89
    b882:	2210      	movs	r2, #16
    b884:	f8d8 0000 	ldr.w	r0, [r8]
    b888:	f7f4 fed1 	bl	62e <memcmp>
    b88c:	4603      	mov	r3, r0
    b88e:	2800      	cmp	r0, #0
    b890:	d0dd      	beq.n	b84e <net_key_update+0x22>
		send_net_key_status(model, ctx, idx, STATUS_CANNOT_UPDATE);
    b892:	230b      	movs	r3, #11
    b894:	e7db      	b.n	b84e <net_key_update+0x22>
	err = bt_mesh_net_keys_create(&sub->keys[1], buf->data);
    b896:	f8d8 1000 	ldr.w	r1, [r8]
    b89a:	f104 0089 	add.w	r0, r4, #137	; 0x89
    b89e:	f7fc fc61 	bl	8164 <bt_mesh_net_keys_create>
	if (!err && (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) ||
    b8a2:	b108      	cbz	r0, b8a8 <net_key_update+0x7c>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
    b8a4:	2310      	movs	r3, #16
    b8a6:	e7d2      	b.n	b84e <net_key_update+0x22>
		err = friend_cred_update(sub);
    b8a8:	4620      	mov	r0, r4
    b8aa:	f7fc fce9 	bl	8280 <friend_cred_update>
	if (err) {
    b8ae:	4680      	mov	r8, r0
    b8b0:	2800      	cmp	r0, #0
    b8b2:	d1f7      	bne.n	b8a4 <net_key_update+0x78>
	sub->kr_phase = BT_MESH_KR_PHASE_1;
    b8b4:	2301      	movs	r3, #1
    b8b6:	77e3      	strb	r3, [r4, #31]
	bt_mesh_net_beacon_update(sub);
    b8b8:	4620      	mov	r0, r4
    b8ba:	f7fc fdb7 	bl	842c <bt_mesh_net_beacon_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    b8be:	4643      	mov	r3, r8
    b8c0:	e7c5      	b.n	b84e <net_key_update+0x22>
    b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000b8c8 <net_key_add>:
{
    b8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8cc:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
    b8ce:	4610      	mov	r0, r2
{
    b8d0:	460f      	mov	r7, r1
    b8d2:	4690      	mov	r8, r2
	idx = net_buf_simple_pull_le16(buf);
    b8d4:	f00c f9d1 	bl	17c7a <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    b8d8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    b8dc:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    b8de:	d241      	bcs.n	b964 <net_key_add+0x9c>
	sub = bt_mesh_subnet_get(idx);
    b8e0:	f7fc fc22 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    b8e4:	4604      	mov	r4, r0
    b8e6:	b980      	cbnz	r0, b90a <net_key_add+0x42>
			if (bt_mesh.sub[i].net_idx == BT_MESH_KEY_UNUSED) {
    b8e8:	4b1f      	ldr	r3, [pc, #124]	; (b968 <net_key_add+0xa0>)
    b8ea:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
    b8ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b8f2:	4291      	cmp	r1, r2
    b8f4:	d004      	beq.n	b900 <net_key_add+0x38>
    b8f6:	f8b3 12b4 	ldrh.w	r1, [r3, #692]	; 0x2b4
    b8fa:	4291      	cmp	r1, r2
    b8fc:	d130      	bne.n	b960 <net_key_add+0x98>
		for (sub = NULL, i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    b8fe:	2401      	movs	r4, #1
				sub = &bt_mesh.sub[i];
    b900:	22e4      	movs	r2, #228	; 0xe4
    b902:	fb02 3404 	mla	r4, r2, r4, r3
    b906:	f504 74da 	add.w	r4, r4, #436	; 0x1b4
	if (sub->net_idx == idx) {
    b90a:	8ba3      	ldrh	r3, [r4, #28]
    b90c:	42ab      	cmp	r3, r5
    b90e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b912:	d110      	bne.n	b936 <net_key_add+0x6e>
		if (memcmp(buf->data, sub->keys[0].net, 16)) {
    b914:	4601      	mov	r1, r0
    b916:	2210      	movs	r2, #16
    b918:	f8d8 0000 	ldr.w	r0, [r8]
    b91c:	f7f4 fe87 	bl	62e <memcmp>
			status = STATUS_SUCCESS;
    b920:	2800      	cmp	r0, #0
		send_net_key_status(model, ctx, idx, status);
    b922:	bf14      	ite	ne
    b924:	2306      	movne	r3, #6
    b926:	2300      	moveq	r3, #0
			send_net_key_status(model, ctx, idx,
    b928:	462a      	mov	r2, r5
    b92a:	4639      	mov	r1, r7
    b92c:	4630      	mov	r0, r6
}
    b92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			send_net_key_status(model, ctx, idx,
    b932:	f7ff bcf3 	b.w	b31c <send_net_key_status>
	err = bt_mesh_net_keys_create(&sub->keys[0], buf->data);
    b936:	f8d8 1000 	ldr.w	r1, [r8]
    b93a:	f7fc fc13 	bl	8164 <bt_mesh_net_keys_create>
	if (err) {
    b93e:	4680      	mov	r8, r0
    b940:	b108      	cbz	r0, b946 <net_key_add+0x7e>
		send_net_key_status(model, ctx, idx, STATUS_UNSPECIFIED);
    b942:	2310      	movs	r3, #16
    b944:	e7f0      	b.n	b928 <net_key_add+0x60>
	sub->net_idx = idx;
    b946:	83a5      	strh	r5, [r4, #28]
	bt_mesh_net_beacon_update(sub);
    b948:	4620      	mov	r0, r4
    b94a:	f7fc fd6f 	bl	842c <bt_mesh_net_beacon_update>
		bt_mesh_proxy_beacon_send(sub);
    b94e:	4620      	mov	r0, r4
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    b950:	f884 8020 	strb.w	r8, [r4, #32]
		bt_mesh_proxy_beacon_send(sub);
    b954:	f003 ff02 	bl	f75c <bt_mesh_proxy_beacon_send>
		bt_mesh_adv_update();
    b958:	f7fc f8d0 	bl	7afc <bt_mesh_adv_update>
	send_net_key_status(model, ctx, idx, STATUS_SUCCESS);
    b95c:	4643      	mov	r3, r8
    b95e:	e7e3      	b.n	b928 <net_key_add+0x60>
			send_net_key_status(model, ctx, idx,
    b960:	2305      	movs	r3, #5
    b962:	e7e1      	b.n	b928 <net_key_add+0x60>
    b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b968:	20006168 	.word	0x20006168

0000b96c <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  u16_t *idx1, u16_t *idx2)
{
    b96c:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
    b96e:	6804      	ldr	r4, [r0, #0]
	return ((u16_t)src[1] << 8) | src[0];
    b970:	7865      	ldrb	r5, [r4, #1]
    b972:	7823      	ldrb	r3, [r4, #0]
    b974:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    b978:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b97c:	800b      	strh	r3, [r1, #0]
    b97e:	78a1      	ldrb	r1, [r4, #2]
    b980:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
    b982:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b986:	091b      	lsrs	r3, r3, #4
    b988:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
    b98a:	2103      	movs	r1, #3
}
    b98c:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
    b98e:	f00c b964 	b.w	17c5a <net_buf_simple_pull>

0000b992 <app_key_del>:
{
    b992:	b570      	push	{r4, r5, r6, lr}
    b994:	b088      	sub	sp, #32
    b996:	4614      	mov	r4, r2
    b998:	4605      	mov	r5, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b99a:	2214      	movs	r2, #20
{
    b99c:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b99e:	a803      	add	r0, sp, #12
    b9a0:	2100      	movs	r1, #0
    b9a2:	f7f4 fe85 	bl	6b0 <memset>
    b9a6:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    b9a8:	4620      	mov	r0, r4
    b9aa:	eb0d 0203 	add.w	r2, sp, r3
    b9ae:	a902      	add	r1, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    b9b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    b9b4:	f7ff ffda 	bl	b96c <key_idx_unpack>
	if (!bt_mesh_subnet_get(key_net_idx)) {
    b9b8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    b9bc:	f7fc fbb4 	bl	8128 <bt_mesh_subnet_get>
    b9c0:	b330      	cbz	r0, ba10 <app_key_del+0x7e>
	key = bt_mesh_app_key_find(key_app_idx);
    b9c2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    b9c6:	f7fd fecd 	bl	9764 <bt_mesh_app_key_find>
	if (!key) {
    b9ca:	4604      	mov	r4, r0
    b9cc:	b138      	cbz	r0, b9de <app_key_del+0x4c>
	if (key->net_idx != key_net_idx) {
    b9ce:	8802      	ldrh	r2, [r0, #0]
    b9d0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    b9d4:	429a      	cmp	r2, r3
    b9d6:	d11d      	bne.n	ba14 <app_key_del+0x82>
	_app_key_del(key);
    b9d8:	f7ff ff14 	bl	b804 <_app_key_del>
	status = STATUS_SUCCESS;
    b9dc:	2400      	movs	r4, #0
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
    b9de:	a803      	add	r0, sp, #12
    b9e0:	f248 0103 	movw	r1, #32771	; 0x8003
    b9e4:	f7ff fa1e 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    b9e8:	4621      	mov	r1, r4
    b9ea:	a803      	add	r0, sp, #12
    b9ec:	f00c f8d9 	bl	17ba2 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
    b9f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    b9f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b9f8:	a803      	add	r0, sp, #12
    b9fa:	f7ff fbcf 	bl	b19c <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    b9fe:	2300      	movs	r3, #0
    ba00:	9300      	str	r3, [sp, #0]
    ba02:	aa03      	add	r2, sp, #12
    ba04:	4631      	mov	r1, r6
    ba06:	4628      	mov	r0, r5
    ba08:	f7ff fa2e 	bl	ae68 <bt_mesh_model_send>
}
    ba0c:	b008      	add	sp, #32
    ba0e:	bd70      	pop	{r4, r5, r6, pc}
		status = STATUS_INVALID_NETKEY;
    ba10:	2404      	movs	r4, #4
    ba12:	e7e4      	b.n	b9de <app_key_del+0x4c>
		status = STATUS_INVALID_BINDING;
    ba14:	2411      	movs	r4, #17
    ba16:	e7e2      	b.n	b9de <app_key_del+0x4c>

0000ba18 <va_add>:
{
    ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    ba1c:	2500      	movs	r5, #0
    ba1e:	4e1d      	ldr	r6, [pc, #116]	; (ba94 <va_add+0x7c>)
{
    ba20:	4607      	mov	r7, r0
    ba22:	4688      	mov	r8, r1
	struct label *free_slot = NULL;
    ba24:	462c      	mov	r4, r5
		if (!labels[i].ref) {
    ba26:	f836 3c04 	ldrh.w	r3, [r6, #-4]
    ba2a:	b9cb      	cbnz	r3, ba60 <va_add+0x48>
    ba2c:	1f34      	subs	r4, r6, #4
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    ba2e:	3501      	adds	r5, #1
    ba30:	2d03      	cmp	r5, #3
    ba32:	f106 0614 	add.w	r6, r6, #20
    ba36:	d1f6      	bne.n	ba26 <va_add+0xe>
	if (!free_slot) {
    ba38:	b32c      	cbz	r4, ba86 <va_add+0x6e>
	if (bt_mesh_virtual_addr(label_uuid, addr) < 0) {
    ba3a:	4641      	mov	r1, r8
    ba3c:	4638      	mov	r0, r7
    ba3e:	f7fe ff8b 	bl	a958 <bt_mesh_virtual_addr>
    ba42:	2800      	cmp	r0, #0
    ba44:	db22      	blt.n	ba8c <va_add+0x74>
	free_slot->ref = 1;
    ba46:	2301      	movs	r3, #1
    ba48:	8023      	strh	r3, [r4, #0]
	free_slot->addr = *addr;
    ba4a:	f8b8 3000 	ldrh.w	r3, [r8]
    ba4e:	8063      	strh	r3, [r4, #2]
	memcpy(free_slot->uuid, label_uuid, 16);
    ba50:	2210      	movs	r2, #16
    ba52:	4639      	mov	r1, r7
    ba54:	1d20      	adds	r0, r4, #4
    ba56:	f7f4 fdff 	bl	658 <memcpy>
	return STATUS_SUCCESS;
    ba5a:	2000      	movs	r0, #0
    ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    ba60:	2210      	movs	r2, #16
    ba62:	4639      	mov	r1, r7
    ba64:	4630      	mov	r0, r6
    ba66:	f7f4 fde2 	bl	62e <memcmp>
    ba6a:	2800      	cmp	r0, #0
    ba6c:	d1df      	bne.n	ba2e <va_add+0x16>
			*addr = labels[i].addr;
    ba6e:	4a0a      	ldr	r2, [pc, #40]	; (ba98 <va_add+0x80>)
    ba70:	2314      	movs	r3, #20
    ba72:	435d      	muls	r5, r3
    ba74:	1953      	adds	r3, r2, r5
    ba76:	885b      	ldrh	r3, [r3, #2]
    ba78:	f8a8 3000 	strh.w	r3, [r8]
			labels[i].ref++;
    ba7c:	5b53      	ldrh	r3, [r2, r5]
    ba7e:	3301      	adds	r3, #1
    ba80:	5353      	strh	r3, [r2, r5]
			return STATUS_SUCCESS;
    ba82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_INSUFF_RESOURCES;
    ba86:	2005      	movs	r0, #5
    ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATUS_UNSPECIFIED;
    ba8c:	2010      	movs	r0, #16
}
    ba8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba92:	bf00      	nop
    ba94:	20000878 	.word	0x20000878
    ba98:	20000874 	.word	0x20000874

0000ba9c <app_key_set>:
{
    ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    baa0:	4606      	mov	r6, r0
    baa2:	4689      	mov	r9, r1
    baa4:	4617      	mov	r7, r2
    baa6:	469a      	mov	sl, r3
	sub = bt_mesh_subnet_get(net_idx);
    baa8:	f7fc fb3e 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    baac:	4605      	mov	r5, r0
    baae:	2800      	cmp	r0, #0
    bab0:	d04d      	beq.n	bb4e <app_key_set+0xb2>
	key = bt_mesh_app_key_find(app_idx);
    bab2:	4648      	mov	r0, r9
    bab4:	f7fd fe56 	bl	9764 <bt_mesh_app_key_find>
    bab8:	4604      	mov	r4, r0
	if (update) {
    baba:	f1ba 0f00 	cmp.w	sl, #0
    babe:	d026      	beq.n	bb0e <app_key_set+0x72>
		if (!key) {
    bac0:	2800      	cmp	r0, #0
    bac2:	d051      	beq.n	bb68 <app_key_set+0xcc>
		if (key->net_idx != net_idx) {
    bac4:	8803      	ldrh	r3, [r0, #0]
    bac6:	42b3      	cmp	r3, r6
    bac8:	d151      	bne.n	bb6e <app_key_set+0xd2>
		if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    baca:	7feb      	ldrb	r3, [r5, #31]
    bacc:	2b01      	cmp	r3, #1
    bace:	d002      	beq.n	bad6 <app_key_set+0x3a>
			return STATUS_CANNOT_UPDATE;
    bad0:	200b      	movs	r0, #11
    bad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key->updated) {
    bad6:	7902      	ldrb	r2, [r0, #4]
    bad8:	b14a      	cbz	r2, baee <app_key_set+0x52>
			if (memcmp(keys->val, val, 16)) {
    bada:	2210      	movs	r2, #16
    badc:	4639      	mov	r1, r7
    bade:	3017      	adds	r0, #23
    bae0:	f7f4 fda5 	bl	62e <memcmp>
    bae4:	2800      	cmp	r0, #0
    bae6:	d1f3      	bne.n	bad0 <app_key_set+0x34>
				return STATUS_SUCCESS;
    bae8:	2000      	movs	r0, #0
    baea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		keys = &key->keys[1];
    baee:	f100 0816 	add.w	r8, r0, #22
		key->updated = true;
    baf2:	7103      	strb	r3, [r0, #4]
			const u8_t net_id[16], u32_t iv_index,
			u8_t auth[8]);

static inline int bt_mesh_app_id(const u8_t app_key[16], u8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    baf4:	4641      	mov	r1, r8
    baf6:	4638      	mov	r0, r7
    baf8:	f7fe fd82 	bl	a600 <bt_mesh_k4>
	if (bt_mesh_app_id(val, &keys->id)) {
    bafc:	b350      	cbz	r0, bb54 <app_key_set+0xb8>
		if (update) {
    bafe:	f1ba 0f00 	cmp.w	sl, #0
    bb02:	d001      	beq.n	bb08 <app_key_set+0x6c>
			key->updated = false;
    bb04:	2300      	movs	r3, #0
    bb06:	7123      	strb	r3, [r4, #4]
		return STATUS_STORAGE_FAIL;
    bb08:	2009      	movs	r0, #9
    bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (key) {
    bb0e:	b968      	cbnz	r0, bb2c <app_key_set+0x90>
		if (key->net_idx == BT_MESH_KEY_UNUSED) {
    bb10:	4c1c      	ldr	r4, [pc, #112]	; (bb84 <app_key_set+0xe8>)
    bb12:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    bb16:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bb1a:	429a      	cmp	r2, r3
    bb1c:	d02a      	beq.n	bb74 <app_key_set+0xd8>
    bb1e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
    bb22:	429a      	cmp	r2, r3
    bb24:	d02b      	beq.n	bb7e <app_key_set+0xe2>
			return STATUS_INSUFF_RESOURCES;
    bb26:	2005      	movs	r0, #5
    bb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (key->net_idx == net_idx &&
    bb2c:	8803      	ldrh	r3, [r0, #0]
    bb2e:	42b3      	cmp	r3, r6
    bb30:	d005      	beq.n	bb3e <app_key_set+0xa2>
			if (key->net_idx == net_idx) {
    bb32:	8823      	ldrh	r3, [r4, #0]
    bb34:	42b3      	cmp	r3, r6
    bb36:	d10a      	bne.n	bb4e <app_key_set+0xb2>
				return STATUS_IDX_ALREADY_STORED;
    bb38:	2006      	movs	r0, #6
    bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			    !memcmp(key->keys[0].val, val, 16)) {
    bb3e:	2210      	movs	r2, #16
    bb40:	4639      	mov	r1, r7
    bb42:	3006      	adds	r0, #6
    bb44:	f7f4 fd73 	bl	62e <memcmp>
			if (key->net_idx == net_idx &&
    bb48:	2800      	cmp	r0, #0
    bb4a:	d1f2      	bne.n	bb32 <app_key_set+0x96>
    bb4c:	e7cc      	b.n	bae8 <app_key_set+0x4c>
				return STATUS_INVALID_NETKEY;
    bb4e:	2004      	movs	r0, #4
    bb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	key->net_idx = net_idx;
    bb54:	8026      	strh	r6, [r4, #0]
	key->app_idx = app_idx;
    bb56:	f8a4 9002 	strh.w	r9, [r4, #2]
	memcpy(keys->val, val, 16);
    bb5a:	2210      	movs	r2, #16
    bb5c:	4639      	mov	r1, r7
    bb5e:	f108 0001 	add.w	r0, r8, #1
    bb62:	f7f4 fd79 	bl	658 <memcpy>
    bb66:	e7bf      	b.n	bae8 <app_key_set+0x4c>
			return STATUS_INVALID_APPKEY;
    bb68:	2003      	movs	r0, #3
    bb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return STATUS_INVALID_BINDING;
    bb6e:	2011      	movs	r0, #17
    bb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    bb74:	f504 74b2 	add.w	r4, r4, #356	; 0x164
		keys = &key->keys[0];
    bb78:	f104 0805 	add.w	r8, r4, #5
    bb7c:	e7ba      	b.n	baf4 <app_key_set+0x58>
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];
    bb7e:	f504 74c6 	add.w	r4, r4, #396	; 0x18c
    bb82:	e7f9      	b.n	bb78 <app_key_set+0xdc>
    bb84:	20006168 	.word	0x20006168

0000bb88 <app_key_update>:
{
    bb88:	b570      	push	{r4, r5, r6, lr}
    bb8a:	b088      	sub	sp, #32
    bb8c:	4614      	mov	r4, r2
    bb8e:	4605      	mov	r5, r0
    bb90:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    bb92:	2214      	movs	r2, #20
    bb94:	2100      	movs	r1, #0
    bb96:	a803      	add	r0, sp, #12
    bb98:	f7f4 fd8a 	bl	6b0 <memset>
    bb9c:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    bb9e:	eb0d 0203 	add.w	r2, sp, r3
    bba2:	a902      	add	r1, sp, #8
    bba4:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    bba6:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    bbaa:	f7ff fedf 	bl	b96c <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
    bbae:	a803      	add	r0, sp, #12
    bbb0:	f248 0103 	movw	r1, #32771	; 0x8003
    bbb4:	f7ff f936 	bl	ae24 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, true);
    bbb8:	2301      	movs	r3, #1
    bbba:	6822      	ldr	r2, [r4, #0]
    bbbc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    bbc0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    bbc4:	f7ff ff6a 	bl	ba9c <app_key_set>
	net_buf_simple_add_u8(msg, status);
    bbc8:	4601      	mov	r1, r0
    bbca:	a803      	add	r0, sp, #12
    bbcc:	f00b ffe9 	bl	17ba2 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
    bbd0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    bbd4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bbd8:	a803      	add	r0, sp, #12
    bbda:	f7ff fadf 	bl	b19c <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    bbde:	2300      	movs	r3, #0
    bbe0:	9300      	str	r3, [sp, #0]
    bbe2:	aa03      	add	r2, sp, #12
    bbe4:	4631      	mov	r1, r6
    bbe6:	4628      	mov	r0, r5
    bbe8:	f7ff f93e 	bl	ae68 <bt_mesh_model_send>
}
    bbec:	b008      	add	sp, #32
    bbee:	bd70      	pop	{r4, r5, r6, pc}

0000bbf0 <app_key_add>:
{
    bbf0:	b570      	push	{r4, r5, r6, lr}
    bbf2:	b088      	sub	sp, #32
    bbf4:	4614      	mov	r4, r2
    bbf6:	4605      	mov	r5, r0
    bbf8:	460e      	mov	r6, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    bbfa:	2214      	movs	r2, #20
    bbfc:	2100      	movs	r1, #0
    bbfe:	a803      	add	r0, sp, #12
    bc00:	f7f4 fd56 	bl	6b0 <memset>
    bc04:	230a      	movs	r3, #10
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    bc06:	eb0d 0203 	add.w	r2, sp, r3
    bc0a:	a902      	add	r1, sp, #8
    bc0c:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    bc0e:	f8ad 3012 	strh.w	r3, [sp, #18]
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
    bc12:	f7ff feab 	bl	b96c <key_idx_unpack>
	bt_mesh_model_msg_init(msg, OP_APP_KEY_STATUS);
    bc16:	a803      	add	r0, sp, #12
    bc18:	f248 0103 	movw	r1, #32771	; 0x8003
    bc1c:	f7ff f902 	bl	ae24 <bt_mesh_model_msg_init>
	status = app_key_set(key_net_idx, key_app_idx, buf->data, false);
    bc20:	2300      	movs	r3, #0
    bc22:	6822      	ldr	r2, [r4, #0]
    bc24:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    bc28:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    bc2c:	f7ff ff36 	bl	ba9c <app_key_set>
	net_buf_simple_add_u8(msg, status);
    bc30:	4601      	mov	r1, r0
    bc32:	a803      	add	r0, sp, #12
    bc34:	f00b ffb5 	bl	17ba2 <net_buf_simple_add_u8>
	key_idx_pack(msg, key_net_idx, key_app_idx);
    bc38:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    bc3c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bc40:	a803      	add	r0, sp, #12
    bc42:	f7ff faab 	bl	b19c <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    bc46:	2300      	movs	r3, #0
    bc48:	9300      	str	r3, [sp, #0]
    bc4a:	aa03      	add	r2, sp, #12
    bc4c:	4631      	mov	r1, r6
    bc4e:	4628      	mov	r0, r5
    bc50:	f7ff f90a 	bl	ae68 <bt_mesh_model_send>
}
    bc54:	b008      	add	sp, #32
    bc56:	bd70      	pop	{r4, r5, r6, pc}

0000bc58 <create_mod_app_status.isra.4>:
static void create_mod_app_status(struct net_buf_simple *msg,
    bc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bc5c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    bc60:	9d09      	ldr	r5, [sp, #36]	; 0x24
    bc62:	4604      	mov	r4, r0
    bc64:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
    bc66:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
    bc6a:	4690      	mov	r8, r2
    bc6c:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
    bc6e:	f7ff f8d9 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    bc72:	4649      	mov	r1, r9
    bc74:	4620      	mov	r0, r4
    bc76:	f00b ff94 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
    bc7a:	4641      	mov	r1, r8
    bc7c:	4620      	mov	r0, r4
    bc7e:	f00b ff98 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
    bc82:	4639      	mov	r1, r7
    bc84:	4620      	mov	r0, r4
    bc86:	f00b ff94 	bl	17bb2 <net_buf_simple_add_le16>
	if (vnd) {
    bc8a:	b14e      	cbz	r6, bca0 <create_mod_app_status.isra.4+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
    bc8c:	2104      	movs	r1, #4
    bc8e:	4620      	mov	r0, r4
    bc90:	f00b ff78 	bl	17b84 <net_buf_simple_add>
    bc94:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    bc96:	4629      	mov	r1, r5
}
    bc98:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    bc9c:	f7f4 bcdc 	b.w	658 <memcpy>
    bca0:	2102      	movs	r1, #2
    bca2:	4620      	mov	r0, r4
    bca4:	f00b ff6e 	bl	17b84 <net_buf_simple_add>
    bca8:	2202      	movs	r2, #2
    bcaa:	e7f4      	b.n	bc96 <create_mod_app_status.isra.4+0x3e>

0000bcac <send_mod_pub_status.isra.6>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    bcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcb0:	b08a      	sub	sp, #40	; 0x28
    bcb2:	4692      	mov	sl, r2
    bcb4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
    bcb8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    bcbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
    bcbe:	221c      	movs	r2, #28
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    bcc0:	4606      	mov	r6, r0
    bcc2:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
    bcc4:	a803      	add	r0, sp, #12
    bcc6:	2100      	movs	r1, #0
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
    bcc8:	4699      	mov	r9, r3
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
    bcca:	f7f4 fcf1 	bl	6b0 <memset>
    bcce:	2314      	movs	r3, #20
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
    bcd0:	f248 0119 	movw	r1, #32793	; 0x8019
    bcd4:	a803      	add	r0, sp, #12
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 14 + 4);
    bcd6:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_model_msg_init(msg, OP_MOD_PUB_STATUS);
    bcda:	f7ff f8a3 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    bcde:	4629      	mov	r1, r5
    bce0:	a803      	add	r0, sp, #12
    bce2:	f00b ff5e 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
    bce6:	4651      	mov	r1, sl
    bce8:	a803      	add	r0, sp, #12
    bcea:	f00b ff62 	bl	17bb2 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
    bcee:	b1e5      	cbz	r5, bd2a <send_mod_pub_status.isra.6+0x7e>
		memset(net_buf_simple_add(msg, 7), 0, 7);
    bcf0:	2107      	movs	r1, #7
    bcf2:	a803      	add	r0, sp, #12
    bcf4:	f00b ff46 	bl	17b84 <net_buf_simple_add>
    bcf8:	2207      	movs	r2, #7
    bcfa:	2100      	movs	r1, #0
    bcfc:	f7f4 fcd8 	bl	6b0 <memset>
	if (vnd) {
    bd00:	f1b8 0f00 	cmp.w	r8, #0
    bd04:	d02f      	beq.n	bd66 <send_mod_pub_status.isra.6+0xba>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
    bd06:	2104      	movs	r1, #4
    bd08:	a803      	add	r0, sp, #12
    bd0a:	f00b ff3b 	bl	17b84 <net_buf_simple_add>
    bd0e:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    bd10:	9915      	ldr	r1, [sp, #84]	; 0x54
    bd12:	f7f4 fca1 	bl	658 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, msg, NULL, NULL)) {
    bd16:	2300      	movs	r3, #0
    bd18:	9300      	str	r3, [sp, #0]
    bd1a:	aa03      	add	r2, sp, #12
    bd1c:	4639      	mov	r1, r7
    bd1e:	4630      	mov	r0, r6
    bd20:	f7ff f8a2 	bl	ae68 <bt_mesh_model_send>
}
    bd24:	b00a      	add	sp, #40	; 0x28
    bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(msg, pub_addr);
    bd2a:	4649      	mov	r1, r9
    bd2c:	a803      	add	r0, sp, #12
    bd2e:	f00b ff40 	bl	17bb2 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (u16_t)mod->pub->cred << 12;
    bd32:	6822      	ldr	r2, [r4, #0]
    bd34:	7ad3      	ldrb	r3, [r2, #11]
    bd36:	88d1      	ldrh	r1, [r2, #6]
    bd38:	f3c3 1300 	ubfx	r3, r3, #4, #1
		net_buf_simple_add_le16(msg, idx_cred);
    bd3c:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    bd40:	a803      	add	r0, sp, #12
    bd42:	f00b ff36 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, mod->pub->ttl);
    bd46:	6823      	ldr	r3, [r4, #0]
    bd48:	a803      	add	r0, sp, #12
    bd4a:	7a19      	ldrb	r1, [r3, #8]
    bd4c:	f00b ff29 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->period);
    bd50:	6823      	ldr	r3, [r4, #0]
    bd52:	a803      	add	r0, sp, #12
    bd54:	7a99      	ldrb	r1, [r3, #10]
    bd56:	f00b ff24 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, mod->pub->retransmit);
    bd5a:	6823      	ldr	r3, [r4, #0]
    bd5c:	a803      	add	r0, sp, #12
    bd5e:	7a59      	ldrb	r1, [r3, #9]
    bd60:	f00b ff1f 	bl	17ba2 <net_buf_simple_add_u8>
    bd64:	e7cc      	b.n	bd00 <send_mod_pub_status.isra.6+0x54>
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
    bd66:	2102      	movs	r1, #2
    bd68:	a803      	add	r0, sp, #12
    bd6a:	f00b ff0b 	bl	17b84 <net_buf_simple_add>
    bd6e:	2202      	movs	r2, #2
    bd70:	e7ce      	b.n	bd10 <send_mod_pub_status.isra.6+0x64>

0000bd72 <get_model>:
{
    bd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
    bd74:	888b      	ldrh	r3, [r1, #4]
    bd76:	2b03      	cmp	r3, #3
{
    bd78:	4605      	mov	r5, r0
    bd7a:	460c      	mov	r4, r1
    bd7c:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
    bd7e:	4608      	mov	r0, r1
	if (buf->len < 4) {
    bd80:	d809      	bhi.n	bd96 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
    bd82:	f00b ff7a 	bl	17c7a <net_buf_simple_pull_le16>
		*vnd = false;
    bd86:	2300      	movs	r3, #0
    bd88:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
    bd8a:	4601      	mov	r1, r0
    bd8c:	4628      	mov	r0, r5
}
    bd8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
    bd92:	f7ff b9ca 	b.w	b12a <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
    bd96:	f00b ff70 	bl	17c7a <net_buf_simple_pull_le16>
    bd9a:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
    bd9c:	4620      	mov	r0, r4
    bd9e:	f00b ff6c 	bl	17c7a <net_buf_simple_pull_le16>
		*vnd = true;
    bda2:	2301      	movs	r3, #1
    bda4:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
    bda6:	4602      	mov	r2, r0
    bda8:	4639      	mov	r1, r7
    bdaa:	4628      	mov	r0, r5
}
    bdac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
    bdb0:	f7ff b9a4 	b.w	b0fc <bt_mesh_model_find_vnd>

0000bdb4 <mod_app_get>:
{
    bdb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bdb8:	b08b      	sub	sp, #44	; 0x2c
    bdba:	4615      	mov	r5, r2
    bdbc:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
    bdbe:	221c      	movs	r2, #28
{
    bdc0:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
    bdc2:	a803      	add	r0, sp, #12
    bdc4:	2100      	movs	r1, #0
    bdc6:	f7f4 fc73 	bl	6b0 <memset>
    bdca:	2311      	movs	r3, #17
	elem_addr = net_buf_simple_pull_le16(buf);
    bdcc:	4628      	mov	r0, r5
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + KEY_LIST_LEN + 4);
    bdce:	f8ad 3012 	strh.w	r3, [sp, #18]
	elem_addr = net_buf_simple_pull_le16(buf);
    bdd2:	f00b ff52 	bl	17c7a <net_buf_simple_pull_le16>
	mod_id = buf->data;
    bdd6:	682e      	ldr	r6, [r5, #0]
	elem_addr = net_buf_simple_pull_le16(buf);
    bdd8:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
    bdda:	f7fe ff53 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    bdde:	4604      	mov	r4, r0
    bde0:	bb88      	cbnz	r0, be46 <mod_app_get+0x92>
		vnd = (buf->len == 4);
    bde2:	88ab      	ldrh	r3, [r5, #4]
    bde4:	1f1a      	subs	r2, r3, #4
    bde6:	4253      	negs	r3, r2
    bde8:	4153      	adcs	r3, r2
    bdea:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
    bdee:	2501      	movs	r5, #1
	if (vnd) {
    bdf0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bdf4:	b393      	cbz	r3, be5c <mod_app_get+0xa8>
		bt_mesh_model_msg_init(msg, OP_VND_MOD_APP_LIST);
    bdf6:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
    bdfa:	a803      	add	r0, sp, #12
    bdfc:	f7ff f812 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
    be00:	4629      	mov	r1, r5
    be02:	a803      	add	r0, sp, #12
    be04:	f00b fecd 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
    be08:	4649      	mov	r1, r9
    be0a:	a803      	add	r0, sp, #12
    be0c:	f00b fed1 	bl	17bb2 <net_buf_simple_add_le16>
	if (vnd) {
    be10:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be14:	b32b      	cbz	r3, be62 <mod_app_get+0xae>
		net_buf_simple_add_mem(msg, mod_id, 4);
    be16:	2204      	movs	r2, #4
		net_buf_simple_add_mem(msg, mod_id, 2);
    be18:	4631      	mov	r1, r6
    be1a:	a803      	add	r0, sp, #12
    be1c:	f00b feb8 	bl	17b90 <net_buf_simple_add_mem>
	if (mod) {
    be20:	b13c      	cbz	r4, be32 <mod_app_get+0x7e>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
    be22:	89a1      	ldrh	r1, [r4, #12]
    be24:	f64f 73ff 	movw	r3, #65535	; 0xffff
    be28:	4299      	cmp	r1, r3
    be2a:	d002      	beq.n	be32 <mod_app_get+0x7e>
				net_buf_simple_add_le16(msg, mod->keys[i]);
    be2c:	a803      	add	r0, sp, #12
    be2e:	f00b fec0 	bl	17bb2 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    be32:	2300      	movs	r3, #0
    be34:	9300      	str	r3, [sp, #0]
    be36:	aa03      	add	r2, sp, #12
    be38:	4641      	mov	r1, r8
    be3a:	4638      	mov	r0, r7
    be3c:	f7ff f814 	bl	ae68 <bt_mesh_model_send>
}
    be40:	b00b      	add	sp, #44	; 0x2c
    be42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
    be46:	4629      	mov	r1, r5
    be48:	f10d 020b 	add.w	r2, sp, #11
    be4c:	f7ff ff91 	bl	bd72 <get_model>
	status = STATUS_SUCCESS;
    be50:	4604      	mov	r4, r0
    be52:	2800      	cmp	r0, #0
    be54:	bf0c      	ite	eq
    be56:	2502      	moveq	r5, #2
    be58:	2500      	movne	r5, #0
    be5a:	e7c9      	b.n	bdf0 <mod_app_get+0x3c>
		bt_mesh_model_msg_init(msg, OP_SIG_MOD_APP_LIST);
    be5c:	f248 014c 	movw	r1, #32844	; 0x804c
    be60:	e7cb      	b.n	bdfa <mod_app_get+0x46>
		net_buf_simple_add_mem(msg, mod_id, 2);
    be62:	2202      	movs	r2, #2
    be64:	e7d8      	b.n	be18 <mod_app_get+0x64>

0000be66 <mod_app_bind>:
{
    be66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    be6a:	b08b      	sub	sp, #44	; 0x2c
    be6c:	4614      	mov	r4, r2
    be6e:	4606      	mov	r6, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    be70:	2218      	movs	r2, #24
{
    be72:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    be74:	a804      	add	r0, sp, #16
    be76:	2100      	movs	r1, #0
    be78:	f7f4 fc1a 	bl	6b0 <memset>
    be7c:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
    be7e:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    be80:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
    be84:	f00b fef9 	bl	17c7a <net_buf_simple_pull_le16>
    be88:	4607      	mov	r7, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
    be8a:	4620      	mov	r0, r4
    be8c:	f00b fef5 	bl	17c7a <net_buf_simple_pull_le16>
    be90:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
    be92:	4638      	mov	r0, r7
	mod_id = buf->data;
    be94:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    be98:	f7fe fef4 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    be9c:	b9c8      	cbnz	r0, bed2 <mod_app_bind+0x6c>
		vnd = (buf->len == 4);
    be9e:	88a3      	ldrh	r3, [r4, #4]
    bea0:	1f1a      	subs	r2, r3, #4
    bea2:	4253      	negs	r3, r2
    bea4:	4153      	adcs	r3, r2
    bea6:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
    beaa:	2301      	movs	r3, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
    beac:	f89d 100f 	ldrb.w	r1, [sp, #15]
    beb0:	e88d 0208 	stmia.w	sp, {r3, r9}
    beb4:	463a      	mov	r2, r7
    beb6:	462b      	mov	r3, r5
    beb8:	a804      	add	r0, sp, #16
    beba:	f7ff fecd 	bl	bc58 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    bebe:	2300      	movs	r3, #0
    bec0:	9300      	str	r3, [sp, #0]
    bec2:	aa04      	add	r2, sp, #16
    bec4:	4641      	mov	r1, r8
    bec6:	4630      	mov	r0, r6
    bec8:	f7fe ffce 	bl	ae68 <bt_mesh_model_send>
}
    becc:	b00b      	add	sp, #44	; 0x2c
    bece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
    bed2:	4621      	mov	r1, r4
    bed4:	f10d 020f 	add.w	r2, sp, #15
    bed8:	f7ff ff4b 	bl	bd72 <get_model>
	if (!mod) {
    bedc:	4604      	mov	r4, r0
    bede:	b178      	cbz	r0, bf00 <mod_app_bind+0x9a>
	if (model == mod) {
    bee0:	42b0      	cmp	r0, r6
    bee2:	d00f      	beq.n	bf04 <mod_app_bind+0x9e>
	if (!app_key_is_valid(key_idx)) {
    bee4:	4628      	mov	r0, r5
    bee6:	f7ff f93b 	bl	b160 <app_key_is_valid>
    beea:	b168      	cbz	r0, bf08 <mod_app_bind+0xa2>
		if (model->keys[i] == key_idx) {
    beec:	89a3      	ldrh	r3, [r4, #12]
    beee:	429d      	cmp	r5, r3
    bef0:	d004      	beq.n	befc <mod_app_bind+0x96>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
    bef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bef6:	4293      	cmp	r3, r2
    bef8:	d108      	bne.n	bf0c <mod_app_bind+0xa6>
			model->keys[i] = key_idx;
    befa:	81a5      	strh	r5, [r4, #12]
			return STATUS_SUCCESS;
    befc:	2300      	movs	r3, #0
    befe:	e7d5      	b.n	beac <mod_app_bind+0x46>
		status = STATUS_INVALID_MODEL;
    bf00:	2302      	movs	r3, #2
    bf02:	e7d3      	b.n	beac <mod_app_bind+0x46>
		status = STATUS_CANNOT_BIND;
    bf04:	230d      	movs	r3, #13
    bf06:	e7d1      	b.n	beac <mod_app_bind+0x46>
		return STATUS_INVALID_APPKEY;
    bf08:	2303      	movs	r3, #3
    bf0a:	e7cf      	b.n	beac <mod_app_bind+0x46>
	return STATUS_INSUFF_RESOURCES;
    bf0c:	2305      	movs	r3, #5
    bf0e:	e7cd      	b.n	beac <mod_app_bind+0x46>

0000bf10 <mod_pub_get>:
{
    bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf14:	4604      	mov	r4, r0
    bf16:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
    bf18:	4610      	mov	r0, r2
{
    bf1a:	4690      	mov	r8, r2
    bf1c:	460d      	mov	r5, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    bf1e:	f00b feac 	bl	17c7a <net_buf_simple_pull_le16>
	mod_id = buf->data;
    bf22:	f8d8 7000 	ldr.w	r7, [r8]
	elem_addr = net_buf_simple_pull_le16(buf);
    bf26:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
    bf28:	f7fe feac 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    bf2c:	4603      	mov	r3, r0
    bf2e:	b9b0      	cbnz	r0, bf5e <mod_pub_get+0x4e>
		vnd = (buf->len == 4);
    bf30:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    bf34:	1f11      	subs	r1, r2, #4
    bf36:	424a      	negs	r2, r1
    bf38:	414a      	adcs	r2, r1
    bf3a:	f88d 2017 	strb.w	r2, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    bf3e:	2201      	movs	r2, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
    bf40:	9202      	str	r2, [sp, #8]
    bf42:	3008      	adds	r0, #8
    bf44:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bf48:	9001      	str	r0, [sp, #4]
    bf4a:	9200      	str	r2, [sp, #0]
    bf4c:	9703      	str	r7, [sp, #12]
    bf4e:	4632      	mov	r2, r6
    bf50:	4629      	mov	r1, r5
    bf52:	4620      	mov	r0, r4
    bf54:	f7ff feaa 	bl	bcac <send_mod_pub_status.isra.6>
}
    bf58:	b006      	add	sp, #24
    bf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
    bf5e:	f10d 0217 	add.w	r2, sp, #23
    bf62:	4641      	mov	r1, r8
    bf64:	f7ff ff05 	bl	bd72 <get_model>
	if (!mod) {
    bf68:	b120      	cbz	r0, bf74 <mod_pub_get+0x64>
	if (!mod->pub) {
    bf6a:	6883      	ldr	r3, [r0, #8]
    bf6c:	b12b      	cbz	r3, bf7a <mod_pub_get+0x6a>
	pub_addr = mod->pub->addr;
    bf6e:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
    bf70:	2200      	movs	r2, #0
    bf72:	e7e5      	b.n	bf40 <mod_pub_get+0x30>
		status = STATUS_INVALID_MODEL;
    bf74:	2202      	movs	r2, #2
	u16_t elem_addr, pub_addr = 0;
    bf76:	4603      	mov	r3, r0
    bf78:	e7e2      	b.n	bf40 <mod_pub_get+0x30>
		status = STATUS_NVAL_PUB_PARAM;
    bf7a:	2207      	movs	r2, #7
    bf7c:	e7e0      	b.n	bf40 <mod_pub_get+0x30>
	...

0000bf80 <mod_sub_va_del>:
{
    bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf84:	4607      	mov	r7, r0
    bf86:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
    bf88:	4610      	mov	r0, r2
{
    bf8a:	4615      	mov	r5, r2
    bf8c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    bf8e:	f00b fe74 	bl	17c7a <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
    bf92:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
    bf94:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
    bf96:	4628      	mov	r0, r5
	label_uuid = buf->data;
    bf98:	682c      	ldr	r4, [r5, #0]
	net_buf_simple_pull(buf, 16);
    bf9a:	f00b fe5e 	bl	17c5a <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
    bf9e:	4630      	mov	r0, r6
	mod_id = buf->data;
    bfa0:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
    bfa4:	f7fe fe6e 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    bfa8:	b9a0      	cbnz	r0, bfd4 <mod_sub_va_del+0x54>
		vnd = (buf->len == 4);
    bfaa:	88ab      	ldrh	r3, [r5, #4]
    bfac:	1f19      	subs	r1, r3, #4
    bfae:	424b      	negs	r3, r1
    bfb0:	414b      	adcs	r3, r1
    bfb2:	f88d 3017 	strb.w	r3, [sp, #23]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    bfb6:	4604      	mov	r4, r0
		status = STATUS_INVALID_ADDRESS;
    bfb8:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    bfba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bfbe:	9302      	str	r3, [sp, #8]
    bfc0:	e88d 0210 	stmia.w	sp, {r4, r9}
    bfc4:	4633      	mov	r3, r6
    bfc6:	4641      	mov	r1, r8
    bfc8:	4638      	mov	r0, r7
    bfca:	f7ff facf 	bl	b56c <send_mod_sub_status>
}
    bfce:	b006      	add	sp, #24
    bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
    bfd4:	4629      	mov	r1, r5
    bfd6:	f10d 0217 	add.w	r2, sp, #23
    bfda:	f7ff feca 	bl	bd72 <get_model>
	if (!mod) {
    bfde:	4605      	mov	r5, r0
    bfe0:	b358      	cbz	r0, c03a <mod_sub_va_del+0xba>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    bfe2:	2210      	movs	r2, #16
    bfe4:	4621      	mov	r1, r4
    bfe6:	4819      	ldr	r0, [pc, #100]	; (c04c <mod_sub_va_del+0xcc>)
    bfe8:	f8df a064 	ldr.w	sl, [pc, #100]	; c050 <mod_sub_va_del+0xd0>
    bfec:	f7f4 fb1f 	bl	62e <memcmp>
    bff0:	b170      	cbz	r0, c010 <mod_sub_va_del+0x90>
    bff2:	2210      	movs	r2, #16
    bff4:	4621      	mov	r1, r4
    bff6:	f10a 0018 	add.w	r0, sl, #24
    bffa:	f7f4 fb18 	bl	62e <memcmp>
    bffe:	b1d0      	cbz	r0, c036 <mod_sub_va_del+0xb6>
    c000:	2210      	movs	r2, #16
    c002:	4621      	mov	r1, r4
    c004:	f10a 002c 	add.w	r0, sl, #44	; 0x2c
    c008:	f7f4 fb11 	bl	62e <memcmp>
    c00c:	b9c0      	cbnz	r0, c040 <mod_sub_va_del+0xc0>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    c00e:	2002      	movs	r0, #2
				*addr = labels[i].addr;
    c010:	2314      	movs	r3, #20
    c012:	4358      	muls	r0, r3
    c014:	eb0a 0300 	add.w	r3, sl, r0
    c018:	885c      	ldrh	r4, [r3, #2]
			labels[i].ref--;
    c01a:	f83a 3000 	ldrh.w	r3, [sl, r0]
    c01e:	3b01      	subs	r3, #1
    c020:	f82a 3000 	strh.w	r3, [sl, r0]
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
    c024:	b17c      	cbz	r4, c046 <mod_sub_va_del+0xc6>
	match = bt_mesh_model_find_group(mod, sub_addr);
    c026:	4621      	mov	r1, r4
    c028:	4628      	mov	r0, r5
    c02a:	f7fe fdf1 	bl	ac10 <bt_mesh_model_find_group>
	if (match) {
    c02e:	b140      	cbz	r0, c042 <mod_sub_va_del+0xc2>
		*match = BT_MESH_ADDR_UNASSIGNED;
    c030:	2200      	movs	r2, #0
    c032:	8002      	strh	r2, [r0, #0]
    c034:	e7c1      	b.n	bfba <mod_sub_va_del+0x3a>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    c036:	2001      	movs	r0, #1
    c038:	e7ea      	b.n	c010 <mod_sub_va_del+0x90>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    c03a:	4604      	mov	r4, r0
		status = STATUS_INVALID_MODEL;
    c03c:	2202      	movs	r2, #2
    c03e:	e7bc      	b.n	bfba <mod_sub_va_del+0x3a>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    c040:	2400      	movs	r4, #0
		status = STATUS_CANNOT_REMOVE;
    c042:	220c      	movs	r2, #12
    c044:	e7b9      	b.n	bfba <mod_sub_va_del+0x3a>
			return STATUS_SUCCESS;
    c046:	4622      	mov	r2, r4
    c048:	e7b7      	b.n	bfba <mod_sub_va_del+0x3a>
    c04a:	bf00      	nop
    c04c:	20000878 	.word	0x20000878
    c050:	20000874 	.word	0x20000874

0000c054 <mod_sub_del>:
{
    c054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c058:	4607      	mov	r7, r0
    c05a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    c05c:	4610      	mov	r0, r2
{
    c05e:	4614      	mov	r4, r2
    c060:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    c062:	f00b fe0a 	bl	17c7a <net_buf_simple_pull_le16>
    c066:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
    c068:	4620      	mov	r0, r4
    c06a:	f00b fe06 	bl	17c7a <net_buf_simple_pull_le16>
    c06e:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
    c070:	4630      	mov	r0, r6
	mod_id = buf->data;
    c072:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    c076:	f7fe fe05 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c07a:	b938      	cbnz	r0, c08c <mod_sub_del+0x38>
		vnd = (buf->len == 4);
    c07c:	88a3      	ldrh	r3, [r4, #4]
    c07e:	1f1a      	subs	r2, r3, #4
    c080:	4253      	negs	r3, r2
    c082:	4153      	adcs	r3, r2
    c084:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    c088:	2201      	movs	r2, #1
    c08a:	e011      	b.n	c0b0 <mod_sub_del+0x5c>
	mod = get_model(elem, buf, &vnd);
    c08c:	f10d 0217 	add.w	r2, sp, #23
    c090:	4621      	mov	r1, r4
    c092:	f7ff fe6e 	bl	bd72 <get_model>
	if (!mod) {
    c096:	b1c0      	cbz	r0, c0ca <mod_sub_del+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    c098:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
    c09c:	b29b      	uxth	r3, r3
    c09e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    c0a2:	d8f1      	bhi.n	c088 <mod_sub_del+0x34>
	match = bt_mesh_model_find_group(mod, sub_addr);
    c0a4:	4629      	mov	r1, r5
    c0a6:	f7fe fdb3 	bl	ac10 <bt_mesh_model_find_group>
    c0aa:	2200      	movs	r2, #0
	if (match) {
    c0ac:	b178      	cbz	r0, c0ce <mod_sub_del+0x7a>
		*match = BT_MESH_ADDR_UNASSIGNED;
    c0ae:	8002      	strh	r2, [r0, #0]
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    c0b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c0b4:	9302      	str	r3, [sp, #8]
    c0b6:	e88d 0220 	stmia.w	sp, {r5, r9}
    c0ba:	4633      	mov	r3, r6
    c0bc:	4641      	mov	r1, r8
    c0be:	4638      	mov	r0, r7
    c0c0:	f7ff fa54 	bl	b56c <send_mod_sub_status>
}
    c0c4:	b007      	add	sp, #28
    c0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
    c0ca:	2202      	movs	r2, #2
    c0cc:	e7f0      	b.n	c0b0 <mod_sub_del+0x5c>
	status = STATUS_SUCCESS;
    c0ce:	4602      	mov	r2, r0
    c0d0:	e7ee      	b.n	c0b0 <mod_sub_del+0x5c>

0000c0d2 <mod_sub_va_add>:
{
    c0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0d6:	4607      	mov	r7, r0
    c0d8:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    c0da:	4610      	mov	r0, r2
{
    c0dc:	4614      	mov	r4, r2
    c0de:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    c0e0:	f00b fdcb 	bl	17c7a <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
    c0e4:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
    c0e6:	4606      	mov	r6, r0
	net_buf_simple_pull(buf, 16);
    c0e8:	4620      	mov	r0, r4
	label_uuid = buf->data;
    c0ea:	6825      	ldr	r5, [r4, #0]
	net_buf_simple_pull(buf, 16);
    c0ec:	f00b fdb5 	bl	17c5a <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
    c0f0:	4630      	mov	r0, r6
	mod_id = buf->data;
    c0f2:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    c0f6:	f7fe fdc5 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c0fa:	b9c8      	cbnz	r0, c130 <mod_sub_va_add+0x5e>
		vnd = (buf->len == 4);
    c0fc:	88a3      	ldrh	r3, [r4, #4]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    c0fe:	f8ad 0016 	strh.w	r0, [sp, #22]
		vnd = (buf->len == 4);
    c102:	1f19      	subs	r1, r3, #4
    c104:	424b      	negs	r3, r1
    c106:	414b      	adcs	r3, r1
    c108:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
    c10c:	2501      	movs	r5, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    c10e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c112:	9302      	str	r3, [sp, #8]
    c114:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c118:	9300      	str	r3, [sp, #0]
    c11a:	f8cd 9004 	str.w	r9, [sp, #4]
    c11e:	4633      	mov	r3, r6
    c120:	462a      	mov	r2, r5
    c122:	4641      	mov	r1, r8
    c124:	4638      	mov	r0, r7
    c126:	f7ff fa21 	bl	b56c <send_mod_sub_status>
}
    c12a:	b007      	add	sp, #28
    c12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
    c130:	4621      	mov	r1, r4
    c132:	f10d 0215 	add.w	r2, sp, #21
    c136:	f7ff fe1c 	bl	bd72 <get_model>
	if (!mod) {
    c13a:	4604      	mov	r4, r0
    c13c:	b918      	cbnz	r0, c146 <mod_sub_va_add+0x74>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
    c13e:	f8ad 0016 	strh.w	r0, [sp, #22]
		status = STATUS_INVALID_MODEL;
    c142:	2502      	movs	r5, #2
		goto send_status;
    c144:	e7e3      	b.n	c10e <mod_sub_va_add+0x3c>
	status = va_add(label_uuid, &sub_addr);
    c146:	4628      	mov	r0, r5
    c148:	f10d 0116 	add.w	r1, sp, #22
    c14c:	f7ff fc64 	bl	ba18 <va_add>
	if (status != STATUS_SUCCESS) {
    c150:	4605      	mov	r5, r0
    c152:	2800      	cmp	r0, #0
    c154:	d1db      	bne.n	c10e <mod_sub_va_add+0x3c>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
    c156:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    c15a:	4620      	mov	r0, r4
    c15c:	f7fe fd58 	bl	ac10 <bt_mesh_model_find_group>
    c160:	2800      	cmp	r0, #0
    c162:	d1d4      	bne.n	c10e <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
    c164:	89e3      	ldrh	r3, [r4, #14]
    c166:	b14b      	cbz	r3, c17c <mod_sub_va_add+0xaa>
    c168:	8a23      	ldrh	r3, [r4, #16]
    c16a:	b94b      	cbnz	r3, c180 <mod_sub_va_add+0xae>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    c16c:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
    c16e:	3304      	adds	r3, #4
    c170:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    c174:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c178:	80e3      	strh	r3, [r4, #6]
    c17a:	e7c8      	b.n	c10e <mod_sub_va_add+0x3c>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
    c17c:	462b      	mov	r3, r5
    c17e:	e7f6      	b.n	c16e <mod_sub_va_add+0x9c>
		status = STATUS_INSUFF_RESOURCES;
    c180:	2505      	movs	r5, #5
    c182:	e7c4      	b.n	c10e <mod_sub_va_add+0x3c>

0000c184 <mod_sub_add>:
{
    c184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c188:	4606      	mov	r6, r0
    c18a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    c18c:	4610      	mov	r0, r2
{
    c18e:	4691      	mov	r9, r2
    c190:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    c192:	f00b fd72 	bl	17c7a <net_buf_simple_pull_le16>
    c196:	4605      	mov	r5, r0
	sub_addr = net_buf_simple_pull_le16(buf);
    c198:	4648      	mov	r0, r9
    c19a:	f00b fd6e 	bl	17c7a <net_buf_simple_pull_le16>
    c19e:	4604      	mov	r4, r0
	elem = bt_mesh_elem_find(elem_addr);
    c1a0:	4628      	mov	r0, r5
	mod_id = buf->data;
    c1a2:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
    c1a6:	f7fe fd6d 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c1aa:	b940      	cbnz	r0, c1be <mod_sub_add+0x3a>
		vnd = (buf->len == 4);
    c1ac:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    c1b0:	1f1a      	subs	r2, r3, #4
    c1b2:	4253      	negs	r3, r2
    c1b4:	4153      	adcs	r3, r2
    c1b6:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    c1ba:	2201      	movs	r2, #1
    c1bc:	e01e      	b.n	c1fc <mod_sub_add+0x78>
	mod = get_model(elem, buf, &vnd);
    c1be:	4649      	mov	r1, r9
    c1c0:	f10d 0217 	add.w	r2, sp, #23
    c1c4:	f7ff fdd5 	bl	bd72 <get_model>
	if (!mod) {
    c1c8:	4681      	mov	r9, r0
    c1ca:	b1b0      	cbz	r0, c1fa <mod_sub_add+0x76>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    c1cc:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
    c1d0:	b29b      	uxth	r3, r3
    c1d2:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    c1d6:	d8f0      	bhi.n	c1ba <mod_sub_add+0x36>
	if (bt_mesh_model_find_group(mod, sub_addr)) {
    c1d8:	4621      	mov	r1, r4
    c1da:	f7fe fd19 	bl	ac10 <bt_mesh_model_find_group>
    c1de:	b950      	cbnz	r0, c1f6 <mod_sub_add+0x72>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
    c1e0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
    c1e4:	b11b      	cbz	r3, c1ee <mod_sub_add+0x6a>
    c1e6:	f8b9 3010 	ldrh.w	r3, [r9, #16]
    c1ea:	b9a3      	cbnz	r3, c216 <mod_sub_add+0x92>
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    c1ec:	2301      	movs	r3, #1
			mod->groups[i] = sub_addr;
    c1ee:	3304      	adds	r3, #4
    c1f0:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c1f4:	80dc      	strh	r4, [r3, #6]
		status = STATUS_SUCCESS;
    c1f6:	2200      	movs	r2, #0
    c1f8:	e000      	b.n	c1fc <mod_sub_add+0x78>
		status = STATUS_INVALID_MODEL;
    c1fa:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    c1fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c200:	9302      	str	r3, [sp, #8]
    c202:	e88d 0110 	stmia.w	sp, {r4, r8}
    c206:	462b      	mov	r3, r5
    c208:	4639      	mov	r1, r7
    c20a:	4630      	mov	r0, r6
    c20c:	f7ff f9ae 	bl	b56c <send_mod_sub_status>
}
    c210:	b007      	add	sp, #28
    c212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
    c216:	2205      	movs	r2, #5
    c218:	e7f0      	b.n	c1fc <mod_sub_add+0x78>

0000c21a <dev_comp_data_get>:
{
    c21a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c21e:	b0b9      	sub	sp, #228	; 0xe4
    c220:	4614      	mov	r4, r2
    c222:	4680      	mov	r8, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    c224:	22d4      	movs	r2, #212	; 0xd4
{
    c226:	4689      	mov	r9, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    c228:	a803      	add	r0, sp, #12
    c22a:	2100      	movs	r1, #0
    c22c:	f7f4 fa40 	bl	6b0 <memset>
    c230:	23cc      	movs	r3, #204	; 0xcc
	page = net_buf_simple_pull_u8(buf);
    c232:	4620      	mov	r0, r4
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(BT_MESH_TX_SDU_MAX);
    c234:	f8ad 3012 	strh.w	r3, [sp, #18]
	page = net_buf_simple_pull_u8(buf);
    c238:	f00b fd17 	bl	17c6a <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(sdu, OP_DEV_COMP_DATA_STATUS);
    c23c:	2102      	movs	r1, #2
    c23e:	a803      	add	r0, sp, #12
    c240:	f7fe fdf0 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(sdu, page);
    c244:	2100      	movs	r1, #0
    c246:	a803      	add	r0, sp, #12
    c248:	f00b fcab 	bl	17ba2 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
    c24c:	f7fe ff82 	bl	b154 <bt_mesh_comp_get>
    c250:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
    c252:	8801      	ldrh	r1, [r0, #0]
    c254:	a803      	add	r0, sp, #12
    c256:	f00b fcac 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
    c25a:	8869      	ldrh	r1, [r5, #2]
    c25c:	a803      	add	r0, sp, #12
    c25e:	f00b fca8 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
    c262:	88a9      	ldrh	r1, [r5, #4]
    c264:	a803      	add	r0, sp, #12
    c266:	f00b fca4 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
    c26a:	210a      	movs	r1, #10
    c26c:	a803      	add	r0, sp, #12
    c26e:	f00b fca0 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
    c272:	2107      	movs	r1, #7
    c274:	a803      	add	r0, sp, #12
    c276:	f00b fc9c 	bl	17bb2 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
    c27a:	2600      	movs	r6, #0
		net_buf_simple_add_le16(buf, mod->id);
    c27c:	271c      	movs	r7, #28
	for (i = 0; i < comp->elem_count; i++) {
    c27e:	68ab      	ldr	r3, [r5, #8]
    c280:	429e      	cmp	r6, r3
    c282:	d309      	bcc.n	c298 <dev_comp_data_get+0x7e>
	if (bt_mesh_model_send(model, ctx, sdu, NULL, NULL)) {
    c284:	2300      	movs	r3, #0
    c286:	9300      	str	r3, [sp, #0]
    c288:	aa03      	add	r2, sp, #12
    c28a:	4649      	mov	r1, r9
    c28c:	4640      	mov	r0, r8
    c28e:	f7fe fdeb 	bl	ae68 <bt_mesh_model_send>
}
    c292:	b039      	add	sp, #228	; 0xe4
    c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
    c298:	68ec      	ldr	r4, [r5, #12]
    c29a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
    c29e:	a803      	add	r0, sp, #12
    c2a0:	f00b fd15 	bl	17cce <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2) + (elem->vnd_model_count * 2)) {
    c2a4:	7923      	ldrb	r3, [r4, #4]
    c2a6:	7962      	ldrb	r2, [r4, #5]
    c2a8:	3302      	adds	r3, #2
    c2aa:	4413      	add	r3, r2
	if (net_buf_simple_tailroom(buf) <
    c2ac:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
    c2b0:	d3ef      	bcc.n	c292 <dev_comp_data_get+0x78>
	net_buf_simple_add_le16(buf, elem->loc);
    c2b2:	8861      	ldrh	r1, [r4, #2]
    c2b4:	a803      	add	r0, sp, #12
    c2b6:	f00b fc7c 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
    c2ba:	7921      	ldrb	r1, [r4, #4]
    c2bc:	a803      	add	r0, sp, #12
    c2be:	f00b fc70 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
    c2c2:	7961      	ldrb	r1, [r4, #5]
    c2c4:	a803      	add	r0, sp, #12
    c2c6:	f00b fc6c 	bl	17ba2 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
    c2ca:	f04f 0a00 	mov.w	sl, #0
    c2ce:	7923      	ldrb	r3, [r4, #4]
    c2d0:	459a      	cmp	sl, r3
    c2d2:	db06      	blt.n	c2e2 <dev_comp_data_get+0xc8>
    c2d4:	f04f 0a00 	mov.w	sl, #0
	for (i = 0; i < elem->vnd_model_count; i++) {
    c2d8:	7963      	ldrb	r3, [r4, #5]
    c2da:	459a      	cmp	sl, r3
    c2dc:	db0b      	blt.n	c2f6 <dev_comp_data_get+0xdc>
	for (i = 0; i < comp->elem_count; i++) {
    c2de:	3601      	adds	r6, #1
    c2e0:	e7cd      	b.n	c27e <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
    c2e2:	fb07 f30a 	mul.w	r3, r7, sl
    c2e6:	68a2      	ldr	r2, [r4, #8]
    c2e8:	a803      	add	r0, sp, #12
    c2ea:	5ad1      	ldrh	r1, [r2, r3]
    c2ec:	f00b fc61 	bl	17bb2 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
    c2f0:	f10a 0a01 	add.w	sl, sl, #1
    c2f4:	e7eb      	b.n	c2ce <dev_comp_data_get+0xb4>
		mod = &elem->vnd_models[i];
    c2f6:	68e2      	ldr	r2, [r4, #12]
    c2f8:	fb07 f30a 	mul.w	r3, r7, sl
    c2fc:	eb02 0b03 	add.w	fp, r2, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
    c300:	5ad1      	ldrh	r1, [r2, r3]
    c302:	a803      	add	r0, sp, #12
    c304:	f00b fc55 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
    c308:	f8bb 1002 	ldrh.w	r1, [fp, #2]
    c30c:	a803      	add	r0, sp, #12
    c30e:	f00b fc50 	bl	17bb2 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
    c312:	f10a 0a01 	add.w	sl, sl, #1
    c316:	e7df      	b.n	c2d8 <dev_comp_data_get+0xbe>

0000c318 <hb_pwr2.constprop.12>:
	if (!val) {
    c318:	b158      	cbz	r0, c332 <hb_pwr2.constprop.12+0x1a>
	} else if (val == 0xff || val == 0x11) {
    c31a:	28ff      	cmp	r0, #255	; 0xff
    c31c:	d007      	beq.n	c32e <hb_pwr2.constprop.12+0x16>
    c31e:	2811      	cmp	r0, #17
    c320:	d005      	beq.n	c32e <hb_pwr2.constprop.12+0x16>
		return (1 << (val - sub));
    c322:	2301      	movs	r3, #1
    c324:	3801      	subs	r0, #1
    c326:	fa03 f000 	lsl.w	r0, r3, r0
    c32a:	b280      	uxth	r0, r0
    c32c:	4770      	bx	lr
		return 0xffff;
    c32e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    c332:	4770      	bx	lr

0000c334 <heartbeat_pub_set>:
}

static void heartbeat_pub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
    c334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
    c338:	6815      	ldr	r5, [r2, #0]
	u16_t dst, feat, idx;
	u8_t status;

	BT_DBG("src 0x%04x", ctx->addr);

	dst = sys_le16_to_cpu(param->dst);
    c33a:	f8b5 9000 	ldrh.w	r9, [r5]
    c33e:	fa1f fb89 	uxth.w	fp, r9
	/* All other address types but virtual are valid */
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    c342:	f48b 4300 	eor.w	r3, fp, #32768	; 0x8000
    c346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
    c34a:	4606      	mov	r6, r0
    c34c:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    c34e:	d35f      	bcc.n	c410 <heartbeat_pub_set+0xdc>
		status = STATUS_INVALID_ADDRESS;
		goto failed;
	}

	if (param->count_log > 0x11 && param->count_log != 0xff) {
    c350:	78ab      	ldrb	r3, [r5, #2]
    c352:	3b12      	subs	r3, #18
    c354:	b2db      	uxtb	r3, r3
    c356:	2bec      	cmp	r3, #236	; 0xec
    c358:	d95d      	bls.n	c416 <heartbeat_pub_set+0xe2>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->period_log > 0x10) {
    c35a:	78eb      	ldrb	r3, [r5, #3]
    c35c:	2b10      	cmp	r3, #16
    c35e:	d85a      	bhi.n	c416 <heartbeat_pub_set+0xe2>
		status = STATUS_CANNOT_SET;
		goto failed;
	}

	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
    c360:	792b      	ldrb	r3, [r5, #4]
    c362:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    c366:	2b7e      	cmp	r3, #126	; 0x7e
    c368:	d959      	bls.n	c41e <heartbeat_pub_set+0xea>
		return;
	}

	feat = sys_le16_to_cpu(param->feat);

	idx = sys_le16_to_cpu(param->net_idx);
    c36a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
	if (idx > 0xfff) {
    c36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
	idx = sys_le16_to_cpu(param->net_idx);
    c372:	4618      	mov	r0, r3
	if (idx > 0xfff) {
    c374:	d253      	bcs.n	c41e <heartbeat_pub_set+0xea>
    c376:	9301      	str	r3, [sp, #4]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    c378:	69b4      	ldr	r4, [r6, #24]
	feat = sys_le16_to_cpu(param->feat);
    c37a:	f8b5 a005 	ldrh.w	sl, [r5, #5]
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
		return;
	}

	if (!bt_mesh_subnet_get(idx)) {
    c37e:	f7fb fed3 	bl	8128 <bt_mesh_subnet_get>
    c382:	2800      	cmp	r0, #0
    c384:	d049      	beq.n	c41a <heartbeat_pub_set+0xe6>
		status = STATUS_INVALID_NETKEY;
		goto failed;
	}

	cfg->hb_pub.dst = dst;
    c386:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.period = param->period_log;
    c38a:	78e9      	ldrb	r1, [r5, #3]
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
	cfg->hb_pub.net_idx = idx;
    c38c:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
    c38e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
    c392:	f00a 0a0f 	and.w	sl, sl, #15
    c396:	f8a4 a03a 	strh.w	sl, [r4, #58]	; 0x3a
	cfg->hb_pub.net_idx = idx;
    c39a:	87a3      	strh	r3, [r4, #60]	; 0x3c

	if (dst == BT_MESH_ADDR_UNASSIGNED) {
    c39c:	f1bb 0f00 	cmp.w	fp, #0
    c3a0:	d10c      	bne.n	c3bc <heartbeat_pub_set+0x88>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c3a2:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
    c3a6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
    c3aa:	f884 9039 	strb.w	r9, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
    c3ae:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
		 * has been configured for periodic publishing.
		 */
		if (param->period_log && param->count_log) {
			k_work_submit(&cfg->hb_pub.timer.work);
		} else {
			k_delayed_work_cancel(&cfg->hb_pub.timer);
    c3b2:	f104 000c 	add.w	r0, r4, #12
    c3b6:	f00c fc9b 	bl	18cf0 <k_delayed_work_cancel>
    c3ba:	e020      	b.n	c3fe <heartbeat_pub_set+0xca>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
    c3bc:	78aa      	ldrb	r2, [r5, #2]
    c3be:	4610      	mov	r0, r2
    c3c0:	f7ff ffaa 	bl	c318 <hb_pwr2.constprop.12>
    c3c4:	86e0      	strh	r0, [r4, #54]	; 0x36
		cfg->hb_pub.ttl = param->ttl;
    c3c6:	792b      	ldrb	r3, [r5, #4]
    c3c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if (param->period_log && param->count_log) {
    c3cc:	2900      	cmp	r1, #0
    c3ce:	d0f0      	beq.n	c3b2 <heartbeat_pub_set+0x7e>
    c3d0:	2a00      	cmp	r2, #0
    c3d2:	d0ee      	beq.n	c3b2 <heartbeat_pub_set+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3d4:	f3bf 8f5b 	dmb	ish
    c3d8:	f104 0314 	add.w	r3, r4, #20
    c3dc:	e853 2f00 	ldrex	r2, [r3]
    c3e0:	f042 0101 	orr.w	r1, r2, #1
    c3e4:	e843 1000 	strex	r0, r1, [r3]
    c3e8:	2800      	cmp	r0, #0
    c3ea:	d1f7      	bne.n	c3dc <heartbeat_pub_set+0xa8>
    c3ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    c3f0:	07d3      	lsls	r3, r2, #31
    c3f2:	d404      	bmi.n	c3fe <heartbeat_pub_set+0xca>
		k_queue_append(&work_q->queue, work);
    c3f4:	f104 010c 	add.w	r1, r4, #12
    c3f8:	480a      	ldr	r0, [pc, #40]	; (c424 <heartbeat_pub_set+0xf0>)
    c3fa:	f00b feb6 	bl	1816a <k_queue_append>
		}
	}

	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
    c3fe:	2300      	movs	r3, #0
    c400:	461a      	mov	r2, r3

	return;

failed:
	hb_pub_send_status(model, ctx, status, param);
    c402:	4639      	mov	r1, r7
    c404:	4630      	mov	r0, r6
}
    c406:	b003      	add	sp, #12
    c408:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
    c40c:	f7ff b854 	b.w	b4b8 <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
    c410:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
    c412:	462b      	mov	r3, r5
    c414:	e7f5      	b.n	c402 <heartbeat_pub_set+0xce>
		status = STATUS_CANNOT_SET;
    c416:	220f      	movs	r2, #15
    c418:	e7fb      	b.n	c412 <heartbeat_pub_set+0xde>
		status = STATUS_INVALID_NETKEY;
    c41a:	2204      	movs	r2, #4
    c41c:	e7f9      	b.n	c412 <heartbeat_pub_set+0xde>
}
    c41e:	b003      	add	sp, #12
    c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c424:	20001dd8 	.word	0x20001dd8

0000c428 <_mod_pub_set>:
{
    c428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c42c:	4605      	mov	r5, r0
	if (!model->pub) {
    c42e:	6880      	ldr	r0, [r0, #8]
{
    c430:	f89d 801c 	ldrb.w	r8, [sp, #28]
    c434:	460e      	mov	r6, r1
    c436:	4617      	mov	r7, r2
    c438:	461c      	mov	r4, r3
	if (!model->pub) {
    c43a:	b380      	cbz	r0, c49e <_mod_pub_set+0x76>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
    c43c:	bb6b      	cbnz	r3, c49a <_mod_pub_set+0x72>
	if (!model->pub->update && period) {
    c43e:	6943      	ldr	r3, [r0, #20]
    c440:	2b00      	cmp	r3, #0
    c442:	d13c      	bne.n	c4be <_mod_pub_set+0x96>
    c444:	f1b8 0f00 	cmp.w	r8, #0
    c448:	d129      	bne.n	c49e <_mod_pub_set+0x76>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    c44a:	b361      	cbz	r1, c4a6 <_mod_pub_set+0x7e>
	if (!bt_mesh_app_key_find(app_idx)) {
    c44c:	4638      	mov	r0, r7
    c44e:	f7fd f989 	bl	9764 <bt_mesh_app_key_find>
    c452:	b330      	cbz	r0, c4a2 <_mod_pub_set+0x7a>
	model->pub->addr = pub_addr;
    c454:	68ab      	ldr	r3, [r5, #8]
	model->pub->cred = cred_flag;
    c456:	7ada      	ldrb	r2, [r3, #11]
	model->pub->addr = pub_addr;
    c458:	809e      	strh	r6, [r3, #4]
	model->pub->cred = cred_flag;
    c45a:	f36f 1204 	bfc	r2, #4, #1
    c45e:	72da      	strb	r2, [r3, #11]
	model->pub->ttl = ttl;
    c460:	f89d 2018 	ldrb.w	r2, [sp, #24]
    c464:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
    c466:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->key = app_idx;
    c46a:	80df      	strh	r7, [r3, #6]
	model->pub->period = period;
    c46c:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
    c470:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
    c472:	695b      	ldr	r3, [r3, #20]
    c474:	b14b      	cbz	r3, c48a <_mod_pub_set+0x62>
		period_ms = bt_mesh_model_pub_period_get(model);
    c476:	4628      	mov	r0, r5
    c478:	f7fe fb48 	bl	ab0c <bt_mesh_model_pub_period_get>
    c47c:	68a9      	ldr	r1, [r5, #8]
		if (period_ms) {
    c47e:	4602      	mov	r2, r0
    c480:	b130      	cbz	r0, c490 <_mod_pub_set+0x68>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c482:	3118      	adds	r1, #24
    c484:	4815      	ldr	r0, [pc, #84]	; (c4dc <_mod_pub_set+0xb4>)
    c486:	f00c fc7f 	bl	18d88 <k_delayed_work_submit_to_queue>
}
    c48a:	4620      	mov	r0, r4
    c48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			k_delayed_work_cancel(&model->pub->timer);
    c490:	f101 0018 	add.w	r0, r1, #24
			k_delayed_work_cancel(&model->pub->timer);
    c494:	f00c fc2c 	bl	18cf0 <k_delayed_work_cancel>
    c498:	e7f7      	b.n	c48a <_mod_pub_set+0x62>
		return STATUS_FEAT_NOT_SUPP;
    c49a:	240a      	movs	r4, #10
    c49c:	e7f5      	b.n	c48a <_mod_pub_set+0x62>
		return STATUS_NVAL_PUB_PARAM;
    c49e:	2407      	movs	r4, #7
    c4a0:	e7f3      	b.n	c48a <_mod_pub_set+0x62>
		return STATUS_INVALID_APPKEY;
    c4a2:	2403      	movs	r4, #3
    c4a4:	e7f1      	b.n	c48a <_mod_pub_set+0x62>
		model->pub->cred = 0;
    c4a6:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    c4a8:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
    c4aa:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
    c4ae:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
    c4b2:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
    c4b4:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
    c4b6:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
    c4b8:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
    c4ba:	72c3      	strb	r3, [r0, #11]
    c4bc:	e7e5      	b.n	c48a <_mod_pub_set+0x62>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    c4be:	2900      	cmp	r1, #0
    c4c0:	d1c4      	bne.n	c44c <_mod_pub_set+0x24>
		model->pub->cred = 0;
    c4c2:	7ac3      	ldrb	r3, [r0, #11]
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    c4c4:	8084      	strh	r4, [r0, #4]
		model->pub->cred = 0;
    c4c6:	f364 1304 	bfi	r3, r4, #4, #1
		model->pub->count = 0;
    c4ca:	f364 1347 	bfi	r3, r4, #5, #3
		model->pub->key = 0;
    c4ce:	80c4      	strh	r4, [r0, #6]
		model->pub->ttl = 0;
    c4d0:	7204      	strb	r4, [r0, #8]
		model->pub->period = 0;
    c4d2:	7284      	strb	r4, [r0, #10]
		model->pub->retransmit = 0;
    c4d4:	7244      	strb	r4, [r0, #9]
		model->pub->count = 0;
    c4d6:	72c3      	strb	r3, [r0, #11]
			k_delayed_work_cancel(&model->pub->timer);
    c4d8:	3018      	adds	r0, #24
    c4da:	e7db      	b.n	c494 <_mod_pub_set+0x6c>
    c4dc:	20001dd8 	.word	0x20001dd8

0000c4e0 <mod_unbind.part.9>:
static u8_t mod_unbind(struct bt_mesh_model *model, u16_t key_idx)
    c4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		if (model->keys[i] != key_idx) {
    c4e2:	8982      	ldrh	r2, [r0, #12]
    c4e4:	428a      	cmp	r2, r1
    c4e6:	d10f      	bne.n	c508 <mod_unbind.part.9+0x28>
		if (model->pub && model->pub->key == key_idx) {
    c4e8:	6883      	ldr	r3, [r0, #8]
		model->keys[i] = BT_MESH_KEY_UNUSED;
    c4ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c4ee:	8181      	strh	r1, [r0, #12]
		if (model->pub && model->pub->key == key_idx) {
    c4f0:	b153      	cbz	r3, c508 <mod_unbind.part.9+0x28>
    c4f2:	88db      	ldrh	r3, [r3, #6]
    c4f4:	4293      	cmp	r3, r2
    c4f6:	d107      	bne.n	c508 <mod_unbind.part.9+0x28>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
    c4f8:	2300      	movs	r3, #0
    c4fa:	9302      	str	r3, [sp, #8]
    c4fc:	9301      	str	r3, [sp, #4]
    c4fe:	9300      	str	r3, [sp, #0]
    c500:	461a      	mov	r2, r3
    c502:	4619      	mov	r1, r3
    c504:	f7ff ff90 	bl	c428 <_mod_pub_set>
}
    c508:	2000      	movs	r0, #0
    c50a:	b005      	add	sp, #20
    c50c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c510 <mod_app_unbind>:
{
    c510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c514:	b08b      	sub	sp, #44	; 0x2c
    c516:	4614      	mov	r4, r2
    c518:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c51a:	2218      	movs	r2, #24
{
    c51c:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c51e:	a804      	add	r0, sp, #16
    c520:	2100      	movs	r1, #0
    c522:	f7f4 f8c5 	bl	6b0 <memset>
    c526:	230f      	movs	r3, #15
	elem_addr = net_buf_simple_pull_le16(buf);
    c528:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c52a:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
    c52e:	f00b fba4 	bl	17c7a <net_buf_simple_pull_le16>
    c532:	4606      	mov	r6, r0
	key_app_idx = net_buf_simple_pull_le16(buf);
    c534:	4620      	mov	r0, r4
    c536:	f00b fba0 	bl	17c7a <net_buf_simple_pull_le16>
    c53a:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
    c53c:	4630      	mov	r0, r6
	mod_id = buf->data;
    c53e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    c542:	f7fe fb9f 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c546:	b9c8      	cbnz	r0, c57c <mod_app_unbind+0x6c>
		vnd = (buf->len == 4);
    c548:	88a3      	ldrh	r3, [r4, #4]
    c54a:	1f1a      	subs	r2, r3, #4
    c54c:	4253      	negs	r3, r2
    c54e:	4153      	adcs	r3, r2
    c550:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
    c554:	2001      	movs	r0, #1
	create_mod_app_status(msg, mod, vnd, elem_addr, key_app_idx, status,
    c556:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c55a:	e88d 0201 	stmia.w	sp, {r0, r9}
    c55e:	462b      	mov	r3, r5
    c560:	4632      	mov	r2, r6
    c562:	a804      	add	r0, sp, #16
    c564:	f7ff fb78 	bl	bc58 <create_mod_app_status.isra.4>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    c568:	2300      	movs	r3, #0
    c56a:	9300      	str	r3, [sp, #0]
    c56c:	aa04      	add	r2, sp, #16
    c56e:	4641      	mov	r1, r8
    c570:	4638      	mov	r0, r7
    c572:	f7fe fc79 	bl	ae68 <bt_mesh_model_send>
}
    c576:	b00b      	add	sp, #44	; 0x2c
    c578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
    c57c:	4621      	mov	r1, r4
    c57e:	f10d 020f 	add.w	r2, sp, #15
    c582:	f7ff fbf6 	bl	bd72 <get_model>
	if (!mod) {
    c586:	4604      	mov	r4, r0
    c588:	b140      	cbz	r0, c59c <mod_app_unbind+0x8c>
	if (!app_key_is_valid(key_idx)) {
    c58a:	4628      	mov	r0, r5
    c58c:	f7fe fde8 	bl	b160 <app_key_is_valid>
    c590:	b130      	cbz	r0, c5a0 <mod_app_unbind+0x90>
    c592:	4629      	mov	r1, r5
    c594:	4620      	mov	r0, r4
    c596:	f7ff ffa3 	bl	c4e0 <mod_unbind.part.9>
    c59a:	e7dc      	b.n	c556 <mod_app_unbind+0x46>
		status = STATUS_INVALID_MODEL;
    c59c:	2002      	movs	r0, #2
    c59e:	e7da      	b.n	c556 <mod_app_unbind+0x46>
		return STATUS_INVALID_APPKEY;
    c5a0:	2003      	movs	r0, #3
    c5a2:	e7d8      	b.n	c556 <mod_app_unbind+0x46>

0000c5a4 <mod_pub_set>:
{
    c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a8:	4681      	mov	r9, r0
    c5aa:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
    c5ac:	4610      	mov	r0, r2
{
    c5ae:	4614      	mov	r4, r2
    c5b0:	468a      	mov	sl, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    c5b2:	f00b fb62 	bl	17c7a <net_buf_simple_pull_le16>
    c5b6:	4605      	mov	r5, r0
	pub_addr = net_buf_simple_pull_le16(buf);
    c5b8:	4620      	mov	r0, r4
    c5ba:	f00b fb5e 	bl	17c7a <net_buf_simple_pull_le16>
    c5be:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
    c5c0:	4620      	mov	r0, r4
    c5c2:	f00b fb5a 	bl	17c7a <net_buf_simple_pull_le16>
    c5c6:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
    c5c8:	4620      	mov	r0, r4
    c5ca:	f00b fb4e 	bl	17c6a <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    c5ce:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
    c5d6:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    c5d8:	d923      	bls.n	c622 <mod_pub_set+0x7e>
	pub_period = net_buf_simple_pull_u8(buf);
    c5da:	4620      	mov	r0, r4
    c5dc:	f00b fb45 	bl	17c6a <net_buf_simple_pull_u8>
    c5e0:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
    c5e2:	4620      	mov	r0, r4
    c5e4:	f00b fb41 	bl	17c6a <net_buf_simple_pull_u8>
	mod_id = buf->data;
    c5e8:	6823      	ldr	r3, [r4, #0]
    c5ea:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
    c5ec:	4683      	mov	fp, r0
	elem = bt_mesh_elem_find(elem_addr);
    c5ee:	4628      	mov	r0, r5
    c5f0:	f7fe fb48 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c5f4:	b9c0      	cbnz	r0, c628 <mod_pub_set+0x84>
		vnd = (buf->len == 4);
    c5f6:	88a3      	ldrh	r3, [r4, #4]
    c5f8:	1f19      	subs	r1, r3, #4
    c5fa:	424b      	negs	r3, r1
    c5fc:	414b      	adcs	r3, r1
		mod = NULL;
    c5fe:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
    c600:	f88d 301f 	strb.w	r3, [sp, #31]
		status = STATUS_INVALID_ADDRESS;
    c604:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
    c606:	9b04      	ldr	r3, [sp, #16]
    c608:	9303      	str	r3, [sp, #12]
    c60a:	3408      	adds	r4, #8
    c60c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c610:	9002      	str	r0, [sp, #8]
    c612:	9300      	str	r3, [sp, #0]
    c614:	9401      	str	r4, [sp, #4]
    c616:	4633      	mov	r3, r6
    c618:	462a      	mov	r2, r5
    c61a:	4651      	mov	r1, sl
    c61c:	4648      	mov	r0, r9
    c61e:	f7ff fb45 	bl	bcac <send_mod_pub_status.isra.6>
}
    c622:	b009      	add	sp, #36	; 0x24
    c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
    c628:	4621      	mov	r1, r4
    c62a:	f10d 021f 	add.w	r2, sp, #31
    c62e:	f7ff fba0 	bl	bd72 <get_model>
	if (!mod) {
    c632:	4604      	mov	r4, r0
    c634:	b168      	cbz	r0, c652 <mod_pub_set+0xae>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
    c636:	9b05      	ldr	r3, [sp, #20]
    c638:	9301      	str	r3, [sp, #4]
    c63a:	f8cd b008 	str.w	fp, [sp, #8]
    c63e:	f8cd 8000 	str.w	r8, [sp]
    c642:	f3c7 3300 	ubfx	r3, r7, #12, #1
    c646:	f3c7 020b 	ubfx	r2, r7, #0, #12
    c64a:	4631      	mov	r1, r6
    c64c:	f7ff feec 	bl	c428 <_mod_pub_set>
    c650:	e7d9      	b.n	c606 <mod_pub_set+0x62>
		status = STATUS_INVALID_MODEL;
    c652:	2002      	movs	r0, #2
    c654:	e7d7      	b.n	c606 <mod_pub_set+0x62>

0000c656 <mod_pub_va_set>:
{
    c656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c65a:	4680      	mov	r8, r0
    c65c:	b089      	sub	sp, #36	; 0x24
	elem_addr = net_buf_simple_pull_le16(buf);
    c65e:	4610      	mov	r0, r2
{
    c660:	4614      	mov	r4, r2
    c662:	4689      	mov	r9, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    c664:	f00b fb09 	bl	17c7a <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
    c668:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
    c66a:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
    c66c:	4620      	mov	r0, r4
	label_uuid = buf->data;
    c66e:	f8d4 b000 	ldr.w	fp, [r4]
	net_buf_simple_pull(buf, 16);
    c672:	f00b faf2 	bl	17c5a <net_buf_simple_pull>
	pub_app_idx = net_buf_simple_pull_le16(buf);
    c676:	4620      	mov	r0, r4
    c678:	f00b faff 	bl	17c7a <net_buf_simple_pull_le16>
    c67c:	4606      	mov	r6, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
    c67e:	4620      	mov	r0, r4
    c680:	f00b faf3 	bl	17c6a <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    c684:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    c688:	b2db      	uxtb	r3, r3
    c68a:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
    c68c:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
    c68e:	d926      	bls.n	c6de <mod_pub_va_set+0x88>
	pub_period = net_buf_simple_pull_u8(buf);
    c690:	4620      	mov	r0, r4
    c692:	f00b faea 	bl	17c6a <net_buf_simple_pull_u8>
    c696:	9005      	str	r0, [sp, #20]
	retransmit = net_buf_simple_pull_u8(buf);
    c698:	4620      	mov	r0, r4
    c69a:	f00b fae6 	bl	17c6a <net_buf_simple_pull_u8>
	mod_id = buf->data;
    c69e:	6823      	ldr	r3, [r4, #0]
    c6a0:	9304      	str	r3, [sp, #16]
	retransmit = net_buf_simple_pull_u8(buf);
    c6a2:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
    c6a4:	4628      	mov	r0, r5
    c6a6:	f7fe faed 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    c6aa:	b9d8      	cbnz	r0, c6e4 <mod_pub_va_set+0x8e>
		vnd = (buf->len == 4);
    c6ac:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0;
    c6ae:	f8ad 001e 	strh.w	r0, [sp, #30]
		vnd = (buf->len == 4);
    c6b2:	1f19      	subs	r1, r3, #4
    c6b4:	424b      	negs	r3, r1
    c6b6:	414b      	adcs	r3, r1
		mod = NULL;
    c6b8:	4604      	mov	r4, r0
		vnd = (buf->len == 4);
    c6ba:	f88d 301d 	strb.w	r3, [sp, #29]
		status = STATUS_INVALID_ADDRESS;
    c6be:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
    c6c0:	9a04      	ldr	r2, [sp, #16]
    c6c2:	9203      	str	r2, [sp, #12]
    c6c4:	3408      	adds	r4, #8
    c6c6:	f89d 201d 	ldrb.w	r2, [sp, #29]
    c6ca:	9002      	str	r0, [sp, #8]
    c6cc:	9200      	str	r2, [sp, #0]
    c6ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    c6d2:	9401      	str	r4, [sp, #4]
    c6d4:	462a      	mov	r2, r5
    c6d6:	4649      	mov	r1, r9
    c6d8:	4640      	mov	r0, r8
    c6da:	f7ff fae7 	bl	bcac <send_mod_pub_status.isra.6>
}
    c6de:	b009      	add	sp, #36	; 0x24
    c6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
    c6e4:	4621      	mov	r1, r4
    c6e6:	f10d 021d 	add.w	r2, sp, #29
    c6ea:	f7ff fb42 	bl	bd72 <get_model>
	if (!mod) {
    c6ee:	4604      	mov	r4, r0
    c6f0:	b918      	cbnz	r0, c6fa <mod_pub_va_set+0xa4>
		pub_addr = 0;
    c6f2:	f8ad 001e 	strh.w	r0, [sp, #30]
		status = STATUS_INVALID_MODEL;
    c6f6:	2002      	movs	r0, #2
		goto send_status;
    c6f8:	e7e2      	b.n	c6c0 <mod_pub_va_set+0x6a>
	status = va_add(label_uuid, &pub_addr);
    c6fa:	f10d 011e 	add.w	r1, sp, #30
    c6fe:	4658      	mov	r0, fp
    c700:	f7ff f98a 	bl	ba18 <va_add>
	if (status == STATUS_SUCCESS) {
    c704:	2800      	cmp	r0, #0
    c706:	d1db      	bne.n	c6c0 <mod_pub_va_set+0x6a>
		status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag,
    c708:	9b05      	ldr	r3, [sp, #20]
    c70a:	9301      	str	r3, [sp, #4]
    c70c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    c710:	f8cd a008 	str.w	sl, [sp, #8]
    c714:	9700      	str	r7, [sp, #0]
    c716:	f3c6 3300 	ubfx	r3, r6, #12, #1
    c71a:	f3c6 020b 	ubfx	r2, r6, #0, #12
    c71e:	4620      	mov	r0, r4
    c720:	f7ff fe82 	bl	c428 <_mod_pub_set>
    c724:	e7cc      	b.n	c6c0 <mod_pub_va_set+0x6a>

0000c726 <_mod_unbind>:
{
    c726:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *key_idx);
    c728:	9b04      	ldr	r3, [sp, #16]
    c72a:	881c      	ldrh	r4, [r3, #0]
{
    c72c:	4605      	mov	r5, r0
	if (!app_key_is_valid(key_idx)) {
    c72e:	4620      	mov	r0, r4
    c730:	f7fe fd16 	bl	b160 <app_key_is_valid>
    c734:	b128      	cbz	r0, c742 <_mod_unbind+0x1c>
    c736:	4621      	mov	r1, r4
    c738:	4628      	mov	r0, r5
}
    c73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c73e:	f7ff becf 	b.w	c4e0 <mod_unbind.part.9>
    c742:	bd38      	pop	{r3, r4, r5, pc}

0000c744 <hb_sub_send_status.constprop.11>:

static void hb_sub_send_status(struct bt_mesh_model *model,
    c744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c748:	4606      	mov	r6, r0
    c74a:	b089      	sub	sp, #36	; 0x24
			       struct bt_mesh_msg_ctx *ctx, u8_t status)
{
	/* Needed size: opcode (2 bytes) + msg + MIC */
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c74c:	2218      	movs	r2, #24
static void hb_sub_send_status(struct bt_mesh_model *model,
    c74e:	460f      	mov	r7, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c750:	a802      	add	r0, sp, #8
    c752:	2100      	movs	r1, #0
    c754:	f7f3 ffac 	bl	6b0 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    c758:	69b5      	ldr	r5, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 9 + 4);
    c75a:	230f      	movs	r3, #15
    c75c:	f8ad 300e 	strh.w	r3, [sp, #14]
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    c760:	f00c f812 	bl	18788 <_impl_k_uptime_get>
	s64_t uptime;

	BT_DBG("src 0x%04x status 0x%02x", ctx->addr, status);

	uptime = k_uptime_get();
	if (uptime > cfg->hb_sub.expiry) {
    c764:	e9d5 8910 	ldrd	r8, r9, [r5, #64]	; 0x40
    c768:	4580      	cmp	r8, r0
    c76a:	eb79 0301 	sbcs.w	r3, r9, r1
    c76e:	db35      	blt.n	c7dc <hb_sub_send_status.constprop.11+0x98>
		period = 0;
	} else {
		period = (cfg->hb_sub.expiry - uptime) / 1000;
    c770:	ebb8 0000 	subs.w	r0, r8, r0
    c774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c778:	f04f 0300 	mov.w	r3, #0
    c77c:	eb69 0101 	sbc.w	r1, r9, r1
    c780:	f7f3 fd54 	bl	22c <__aeabi_ldivmod>
    c784:	4604      	mov	r4, r0
	}

	bt_mesh_model_msg_init(msg, OP_HEARTBEAT_SUB_STATUS);
    c786:	f248 013c 	movw	r1, #32828	; 0x803c
    c78a:	a802      	add	r0, sp, #8
    c78c:	f7fe fb4a 	bl	ae24 <bt_mesh_model_msg_init>

	net_buf_simple_add_u8(msg, status);
    c790:	2100      	movs	r1, #0
    c792:	a802      	add	r0, sp, #8
    c794:	f00b fa05 	bl	17ba2 <net_buf_simple_add_u8>

	net_buf_simple_add_le16(msg, cfg->hb_sub.src);
    c798:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    c79c:	a802      	add	r0, sp, #8
    c79e:	f00b fa08 	bl	17bb2 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, cfg->hb_sub.dst);
    c7a2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    c7a6:	a802      	add	r0, sp, #8
    c7a8:	f00b fa03 	bl	17bb2 <net_buf_simple_add_le16>

	if (cfg->hb_sub.src == BT_MESH_ADDR_UNASSIGNED ||
    c7ac:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
    c7b0:	b113      	cbz	r3, c7b8 <hb_sub_send_status.constprop.11+0x74>
    c7b2:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
    c7b6:	b99b      	cbnz	r3, c7e0 <hb_sub_send_status.constprop.11+0x9c>
	    cfg->hb_sub.dst == BT_MESH_ADDR_UNASSIGNED) {
		memset(net_buf_simple_add(msg, 4), 0, 4);
    c7b8:	2104      	movs	r1, #4
    c7ba:	a802      	add	r0, sp, #8
    c7bc:	f00b f9e2 	bl	17b84 <net_buf_simple_add>
    c7c0:	2204      	movs	r2, #4
    c7c2:	2100      	movs	r1, #0
    c7c4:	f7f3 ff74 	bl	6b0 <memset>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
	}

	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    c7c8:	2300      	movs	r3, #0
    c7ca:	9300      	str	r3, [sp, #0]
    c7cc:	aa02      	add	r2, sp, #8
    c7ce:	4639      	mov	r1, r7
    c7d0:	4630      	mov	r0, r6
    c7d2:	f7fe fb49 	bl	ae68 <bt_mesh_model_send>
		BT_ERR("Unable to send Heartbeat Subscription Status");
	}
}
    c7d6:	b009      	add	sp, #36	; 0x24
    c7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (uptime > cfg->hb_sub.expiry) {
    c7dc:	2400      	movs	r4, #0
    c7de:	e7d2      	b.n	c786 <hb_sub_send_status.constprop.11+0x42>
    c7e0:	b2a1      	uxth	r1, r4
	if (!val) {
    c7e2:	b149      	cbz	r1, c7f8 <hb_sub_send_status.constprop.11+0xb4>
	} else if (val == 0xffff) {
    c7e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c7e8:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
    c7ea:	bf1d      	ittte	ne
    c7ec:	fab1 f181 	clzne	r1, r1
    c7f0:	f1c1 0120 	rsbne	r1, r1, #32
    c7f4:	b2c9      	uxtbne	r1, r1
		return 0xff;
    c7f6:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(period));
    c7f8:	a802      	add	r0, sp, #8
    c7fa:	f00b f9d2 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
    c7fe:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
	if (!val) {
    c802:	b149      	cbz	r1, c818 <hb_sub_send_status.constprop.11+0xd4>
	} else if (val == 0xffff) {
    c804:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c808:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
    c80a:	bf1d      	ittte	ne
    c80c:	fab1 f181 	clzne	r1, r1
    c810:	f1c1 0120 	rsbne	r1, r1, #32
    c814:	b2c9      	uxtbne	r1, r1
		return 0xff;
    c816:	21ff      	moveq	r1, #255	; 0xff
		net_buf_simple_add_u8(msg, hb_log(cfg->hb_sub.count));
    c818:	a802      	add	r0, sp, #8
    c81a:	f00b f9c2 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.min_hops);
    c81e:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
    c822:	a802      	add	r0, sp, #8
    c824:	f00b f9bd 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(msg, cfg->hb_sub.max_hops);
    c828:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
    c82c:	a802      	add	r0, sp, #8
    c82e:	f00b f9b8 	bl	17ba2 <net_buf_simple_add_u8>
    c832:	e7c9      	b.n	c7c8 <hb_sub_send_status.constprop.11+0x84>

0000c834 <heartbeat_sub_get>:
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
	BT_DBG("src 0x%04x", ctx->addr);

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
    c834:	f7ff bf86 	b.w	c744 <hb_sub_send_status.constprop.11>

0000c838 <heartbeat_sub_set>:
}

static void heartbeat_sub_set(struct bt_mesh_model *model,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
    c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    c83c:	6984      	ldr	r4, [r0, #24]
{
    c83e:	4607      	mov	r7, r0
	u8_t sub_period;
	s32_t period_ms;

	BT_DBG("src 0x%04x", ctx->addr);

	sub_src = net_buf_simple_pull_le16(buf);
    c840:	4610      	mov	r0, r2
{
    c842:	4691      	mov	r9, r2
    c844:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
    c846:	f00b fa18 	bl	17c7a <net_buf_simple_pull_le16>
    c84a:	4605      	mov	r5, r0
	sub_dst = net_buf_simple_pull_le16(buf);
    c84c:	4648      	mov	r0, r9
    c84e:	f00b fa14 	bl	17c7a <net_buf_simple_pull_le16>
    c852:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
    c854:	4648      	mov	r0, r9
    c856:	f00b fa08 	bl	17c6a <net_buf_simple_pull_u8>

	BT_DBG("sub_src 0x%04x sub_dst 0x%04x period 0x%02x",
	       sub_src, sub_dst, sub_period);

	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
    c85a:	042b      	lsls	r3, r5, #16
	sub_period = net_buf_simple_pull_u8(buf);
    c85c:	4681      	mov	r9, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
    c85e:	d416      	bmi.n	c88e <heartbeat_sub_set+0x56>
	    !BT_MESH_ADDR_IS_UNICAST(sub_src)) {
		BT_WARN("Prohibited source address");
		return;
	}

	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
    c860:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    c864:	b29b      	uxth	r3, r3
    c866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    c86a:	d310      	bcc.n	c88e <heartbeat_sub_set+0x56>
    c86c:	f506 7380 	add.w	r3, r6, #256	; 0x100
    c870:	b29b      	uxth	r3, r3
    c872:	2bfb      	cmp	r3, #251	; 0xfb
    c874:	d90b      	bls.n	c88e <heartbeat_sub_set+0x56>
    c876:	b233      	sxth	r3, r6
    c878:	2b00      	cmp	r3, #0
    c87a:	dc04      	bgt.n	c886 <heartbeat_sub_set+0x4e>
	     sub_dst != bt_mesh_primary_addr())) {
		BT_WARN("Prohibited destination address");
		return;
	}

	if (sub_period > 0x11) {
    c87c:	f1b9 0f11 	cmp.w	r9, #17
    c880:	d907      	bls.n	c892 <heartbeat_sub_set+0x5a>
    c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     sub_dst != bt_mesh_primary_addr())) {
    c886:	f7fe f9bd 	bl	ac04 <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
    c88a:	4286      	cmp	r6, r0
    c88c:	d0f6      	beq.n	c87c <heartbeat_sub_set+0x44>
    c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Prohibited subscription period 0x%02x", sub_period);
		return;
	}

	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
    c892:	b11d      	cbz	r5, c89c <heartbeat_sub_set+0x64>
    c894:	b116      	cbz	r6, c89c <heartbeat_sub_set+0x64>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
    c896:	f1b9 0f00 	cmp.w	r9, #0
    c89a:	d120      	bne.n	c8de <heartbeat_sub_set+0xa6>
	    sub_period == 0x00) {
		/* Setting the same addresses with zero period should retain
		 * the addresses according to MESH/NODE/CFG/HBS/BV-02-C.
		 */
		if (cfg->hb_sub.src != sub_src || cfg->hb_sub.dst != sub_dst) {
    c89c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c8a0:	42ab      	cmp	r3, r5
    c8a2:	f04f 0500 	mov.w	r5, #0
    c8a6:	d103      	bne.n	c8b0 <heartbeat_sub_set+0x78>
    c8a8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    c8ac:	42b3      	cmp	r3, r6
    c8ae:	d004      	beq.n	c8ba <heartbeat_sub_set+0x82>
			cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    c8b0:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
			cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
    c8b4:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
		}

		period_ms = 0;
    c8b8:	2500      	movs	r5, #0
		cfg->hb_sub.count = 0;
		period_ms = hb_pwr2(sub_period, 1) * 1000;
	}

	/* Let the transport layer know it needs to handle this address */
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
    c8ba:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
    c8be:	f7fc ff41 	bl	9744 <bt_mesh_set_hb_sub_dst>

	BT_DBG("period_ms %u", period_ms);

	if (period_ms) {
    c8c2:	b1fd      	cbz	r5, c904 <heartbeat_sub_set+0xcc>
    c8c4:	f00b ff60 	bl	18788 <_impl_k_uptime_get>
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
    c8c8:	1940      	adds	r0, r0, r5
    c8ca:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    c8ce:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	} else {
		cfg->hb_sub.expiry = 0;
	}

	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
    c8d2:	4641      	mov	r1, r8
    c8d4:	4638      	mov	r0, r7
}
    c8d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
    c8da:	f7ff bf33 	b.w	c744 <hb_sub_send_status.constprop.11>
		cfg->hb_sub.min_hops = BT_MESH_TTL_MAX;
    c8de:	237f      	movs	r3, #127	; 0x7f
    c8e0:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		cfg->hb_sub.max_hops = 0;
    c8e4:	2300      	movs	r3, #0
		cfg->hb_sub.src = sub_src;
    c8e6:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		cfg->hb_sub.dst = sub_dst;
    c8ea:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
		cfg->hb_sub.max_hops = 0;
    c8ee:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
		cfg->hb_sub.count = 0;
    c8f2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		period_ms = hb_pwr2(sub_period, 1) * 1000;
    c8f6:	4648      	mov	r0, r9
    c8f8:	f7ff fd0e 	bl	c318 <hb_pwr2.constprop.12>
    c8fc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    c900:	4345      	muls	r5, r0
    c902:	e7da      	b.n	c8ba <heartbeat_sub_set+0x82>
		cfg->hb_sub.expiry = 0;
    c904:	2200      	movs	r2, #0
    c906:	2300      	movs	r3, #0
    c908:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    c90c:	e7e1      	b.n	c8d2 <heartbeat_sub_set+0x9a>
	...

0000c910 <net_key_del>:
{
    c910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    c914:	6986      	ldr	r6, [r0, #24]
{
    c916:	4607      	mov	r7, r0
	del_idx = net_buf_simple_pull_le16(buf);
    c918:	4610      	mov	r0, r2
{
    c91a:	4688      	mov	r8, r1
	del_idx = net_buf_simple_pull_le16(buf);
    c91c:	f00b f9ad 	bl	17c7a <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
    c920:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
    c924:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
    c926:	d23a      	bcs.n	c99e <net_key_del+0x8e>
	sub = bt_mesh_subnet_get(del_idx);
    c928:	f7fb fbfe 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    c92c:	4604      	mov	r4, r0
    c92e:	b360      	cbz	r0, c98a <net_key_del+0x7a>
	if (ctx->net_idx == del_idx) {
    c930:	f8b8 3000 	ldrh.w	r3, [r8]
    c934:	42ab      	cmp	r3, r5
    c936:	d030      	beq.n	c99a <net_key_del+0x8a>
	if (cfg->hb_pub.net_idx == del_idx) {
    c938:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
    c93a:	42ab      	cmp	r3, r5
    c93c:	d10a      	bne.n	c954 <net_key_del+0x44>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    c93e:	2300      	movs	r3, #0
    c940:	86b3      	strh	r3, [r6, #52]	; 0x34
	cfg->hb_pub.count = 0;
    c942:	86f3      	strh	r3, [r6, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
    c944:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
	cfg->hb_pub.period = 0;
    c948:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
    c94c:	f106 000c 	add.w	r0, r6, #12
    c950:	f00c f9ce 	bl	18cf0 <k_delayed_work_cancel>
		if (key->net_idx == del_idx) {
    c954:	4e13      	ldr	r6, [pc, #76]	; (c9a4 <net_key_del+0x94>)
    c956:	f8b6 3164 	ldrh.w	r3, [r6, #356]	; 0x164
    c95a:	42ab      	cmp	r3, r5
    c95c:	d103      	bne.n	c966 <net_key_del+0x56>
			_app_key_del(key);
    c95e:	f506 70b2 	add.w	r0, r6, #356	; 0x164
    c962:	f7fe ff4f 	bl	b804 <_app_key_del>
		if (key->net_idx == del_idx) {
    c966:	f8b6 318c 	ldrh.w	r3, [r6, #396]	; 0x18c
    c96a:	42ab      	cmp	r3, r5
    c96c:	d102      	bne.n	c974 <net_key_del+0x64>
			_app_key_del(key);
    c96e:	480e      	ldr	r0, [pc, #56]	; (c9a8 <net_key_del+0x98>)
    c970:	f7fe ff48 	bl	b804 <_app_key_del>
		bt_mesh_friend_clear_net_idx(del_idx);
    c974:	4628      	mov	r0, r5
    c976:	f001 f88b 	bl	da90 <bt_mesh_friend_clear_net_idx>
	memset(sub, 0, sizeof(*sub));
    c97a:	22e4      	movs	r2, #228	; 0xe4
    c97c:	2100      	movs	r1, #0
    c97e:	4620      	mov	r0, r4
    c980:	f7f3 fe96 	bl	6b0 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
    c984:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c988:	83a3      	strh	r3, [r4, #28]
	status = STATUS_SUCCESS;
    c98a:	2300      	movs	r3, #0
	send_net_key_status(model, ctx, del_idx, status);
    c98c:	462a      	mov	r2, r5
    c98e:	4641      	mov	r1, r8
    c990:	4638      	mov	r0, r7
}
    c992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, del_idx, status);
    c996:	f7fe bcc1 	b.w	b31c <send_net_key_status>
		status = STATUS_CANNOT_REMOVE;
    c99a:	230c      	movs	r3, #12
    c99c:	e7f6      	b.n	c98c <net_key_del+0x7c>
    c99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9a2:	bf00      	nop
    c9a4:	20006168 	.word	0x20006168
    c9a8:	200062f4 	.word	0x200062f4

0000c9ac <bt_mesh_cfg_srv_init>:

	return true;
}

int bt_mesh_cfg_srv_init(struct bt_mesh_model *model, bool primary)
{
    c9ac:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    c9ae:	6984      	ldr	r4, [r0, #24]
{
    c9b0:	4605      	mov	r5, r0

	if (!cfg) {
    c9b2:	b14c      	cbz	r4, c9c8 <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->relay > 0x02) {
    c9b4:	7963      	ldrb	r3, [r4, #5]
    c9b6:	2b02      	cmp	r3, #2
    c9b8:	d806      	bhi.n	c9c8 <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->beacon > 0x01) {
    c9ba:	79e3      	ldrb	r3, [r4, #7]
    c9bc:	2b01      	cmp	r3, #1
    c9be:	d803      	bhi.n	c9c8 <bt_mesh_cfg_srv_init+0x1c>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
    c9c0:	f994 300a 	ldrsb.w	r3, [r4, #10]
    c9c4:	2b00      	cmp	r3, #0
    c9c6:	da02      	bge.n	c9ce <bt_mesh_cfg_srv_init+0x22>
		BT_ERR("No Configuration Server context provided");
		return -EINVAL;
    c9c8:	f06f 0015 	mvn.w	r0, #21
    c9cc:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid values in configuration");
		return -EINVAL;
	}

	/* Configuration Model security is device-key based */
	model->keys[0] = BT_MESH_KEY_DEV;
    c9ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    c9d2:	8183      	strh	r3, [r0, #12]

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
    c9d4:	4906      	ldr	r1, [pc, #24]	; (c9f0 <bt_mesh_cfg_srv_init+0x44>)
    c9d6:	f104 000c 	add.w	r0, r4, #12
    c9da:	f00c f96b 	bl	18cb4 <k_delayed_work_init>
	cfg->hb_sub.expiry = 0;
    c9de:	2200      	movs	r2, #0
    c9e0:	2300      	movs	r3, #0
    c9e2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40

	cfg->model = model;

	conf = cfg;
    c9e6:	4b03      	ldr	r3, [pc, #12]	; (c9f4 <bt_mesh_cfg_srv_init+0x48>)
	cfg->model = model;
    c9e8:	6025      	str	r5, [r4, #0]
	conf = cfg;
    c9ea:	601c      	str	r4, [r3, #0]

	return 0;
    c9ec:	2000      	movs	r0, #0
}
    c9ee:	bd38      	pop	{r3, r4, r5, pc}
    c9f0:	0000ce55 	.word	0x0000ce55
    c9f4:	20000870 	.word	0x20000870

0000c9f8 <bt_mesh_cfg_reset>:

void bt_mesh_cfg_reset(void)
{
    c9f8:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
    c9fa:	4b23      	ldr	r3, [pc, #140]	; (ca88 <bt_mesh_cfg_reset+0x90>)
    c9fc:	681c      	ldr	r4, [r3, #0]
	int i;

	if (!cfg) {
    c9fe:	2c00      	cmp	r4, #0
    ca00:	d040      	beq.n	ca84 <bt_mesh_cfg_reset+0x8c>
		return;
	}

	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
    ca02:	2000      	movs	r0, #0
    ca04:	f7fc fe9e 	bl	9744 <bt_mesh_set_hb_sub_dst>

	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    ca08:	2300      	movs	r3, #0
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
	cfg->hb_sub.expiry = 0;
    ca0a:	2000      	movs	r0, #0
    ca0c:	2100      	movs	r1, #0
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    ca0e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
    ca12:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	cfg->hb_sub.expiry = 0;
    ca16:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ca1a:	86a3      	strh	r3, [r4, #52]	; 0x34
	cfg->hb_pub.count = 0;
    ca1c:	86e3      	strh	r3, [r4, #54]	; 0x36
	cfg->hb_pub.ttl = 0;
    ca1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	cfg->hb_pub.period = 0;
    ca22:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	k_delayed_work_cancel(&cfg->hb_pub.timer);
    ca26:	f104 000c 	add.w	r0, r4, #12

	/* Delete all app keys */
	for (i = 0; i < ARRAY_SIZE(bt_mesh.app_keys); i++) {
		struct bt_mesh_app_key *key = &bt_mesh.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED) {
    ca2a:	4c18      	ldr	r4, [pc, #96]	; (ca8c <bt_mesh_cfg_reset+0x94>)
	k_delayed_work_cancel(&cfg->hb_pub.timer);
    ca2c:	f00c f960 	bl	18cf0 <k_delayed_work_cancel>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
    ca30:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    ca34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca38:	429a      	cmp	r2, r3
    ca3a:	d003      	beq.n	ca44 <bt_mesh_cfg_reset+0x4c>
			_app_key_del(key);
    ca3c:	f504 70b2 	add.w	r0, r4, #356	; 0x164
    ca40:	f7fe fee0 	bl	b804 <_app_key_del>
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
    ca44:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
    ca48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca4c:	429a      	cmp	r2, r3
    ca4e:	d002      	beq.n	ca56 <bt_mesh_cfg_reset+0x5e>
			_app_key_del(key);
    ca50:	480f      	ldr	r0, [pc, #60]	; (ca90 <bt_mesh_cfg_reset+0x98>)
    ca52:	f7fe fed7 	bl	b804 <_app_key_del>

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub = &bt_mesh.sub[i];

		memset(sub, 0, sizeof(*sub));
		sub->net_idx = BT_MESH_KEY_UNUSED;
    ca56:	f64f 75ff 	movw	r5, #65535	; 0xffff
		memset(sub, 0, sizeof(*sub));
    ca5a:	22e4      	movs	r2, #228	; 0xe4
    ca5c:	2100      	movs	r1, #0
    ca5e:	480d      	ldr	r0, [pc, #52]	; (ca94 <bt_mesh_cfg_reset+0x9c>)
    ca60:	f7f3 fe26 	bl	6b0 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
    ca64:	f8a4 51d0 	strh.w	r5, [r4, #464]	; 0x1d0
		memset(sub, 0, sizeof(*sub));
    ca68:	22e4      	movs	r2, #228	; 0xe4
    ca6a:	2100      	movs	r1, #0
    ca6c:	480a      	ldr	r0, [pc, #40]	; (ca98 <bt_mesh_cfg_reset+0xa0>)
    ca6e:	f7f3 fe1f 	bl	6b0 <memset>
		sub->net_idx = BT_MESH_KEY_UNUSED;
    ca72:	f8a4 52b4 	strh.w	r5, [r4, #692]	; 0x2b4
	}

	memset(labels, 0, sizeof(labels));
    ca76:	223c      	movs	r2, #60	; 0x3c
    ca78:	2100      	movs	r1, #0
    ca7a:	4808      	ldr	r0, [pc, #32]	; (ca9c <bt_mesh_cfg_reset+0xa4>)
}
    ca7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(labels, 0, sizeof(labels));
    ca80:	f7f3 be16 	b.w	6b0 <memset>
    ca84:	bd38      	pop	{r3, r4, r5, pc}
    ca86:	bf00      	nop
    ca88:	20000870 	.word	0x20000870
    ca8c:	20006168 	.word	0x20006168
    ca90:	200062f4 	.word	0x200062f4
    ca94:	2000631c 	.word	0x2000631c
    ca98:	20006400 	.word	0x20006400
    ca9c:	20000874 	.word	0x20000874

0000caa0 <bt_mesh_heartbeat>:

void bt_mesh_heartbeat(u16_t src, u16_t dst, u8_t hops, u16_t feat)
{
    caa0:	b570      	push	{r4, r5, r6, lr}
    caa2:	461e      	mov	r6, r3
	struct bt_mesh_cfg_srv *cfg = conf;
    caa4:	4b18      	ldr	r3, [pc, #96]	; (cb08 <bt_mesh_heartbeat+0x68>)
    caa6:	681c      	ldr	r4, [r3, #0]
{
    caa8:	4615      	mov	r5, r2

	if (!cfg) {
    caaa:	b364      	cbz	r4, cb06 <bt_mesh_heartbeat+0x66>
		BT_WARN("No configuaration server context available");
		return;
	}

	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
    caac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    cab0:	4283      	cmp	r3, r0
    cab2:	d128      	bne.n	cb06 <bt_mesh_heartbeat+0x66>
    cab4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    cab8:	428b      	cmp	r3, r1
    caba:	d124      	bne.n	cb06 <bt_mesh_heartbeat+0x66>
    cabc:	f00b fe64 	bl	18788 <_impl_k_uptime_get>
		BT_WARN("No subscription for received heartbeat");
		return;
	}

	if (k_uptime_get() > cfg->hb_sub.expiry) {
    cac0:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    cac4:	4282      	cmp	r2, r0
    cac6:	418b      	sbcs	r3, r1
    cac8:	db1d      	blt.n	cb06 <bt_mesh_heartbeat+0x66>
		BT_WARN("Heartbeat subscription period expired");
		return;
	}

	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
    caca:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);

	if (cfg->hb_sub.count < 0xffff) {
    cace:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
	cfg->hb_sub.min_hops = min(cfg->hb_sub.min_hops, hops);
    cad2:	42aa      	cmp	r2, r5
    cad4:	bf28      	it	cs
    cad6:	462a      	movcs	r2, r5
    cad8:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
    cadc:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
	if (cfg->hb_sub.count < 0xffff) {
    cae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
    cae4:	42aa      	cmp	r2, r5
    cae6:	bf38      	it	cc
    cae8:	462a      	movcc	r2, r5
	if (cfg->hb_sub.count < 0xffff) {
    caea:	4299      	cmp	r1, r3

	BT_DBG("src 0x%04x dst 0x%04x hops %u min %u max %u count %u", src,
	       dst, hops, cfg->hb_sub.min_hops, cfg->hb_sub.max_hops,
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
    caec:	6d23      	ldr	r3, [r4, #80]	; 0x50
	cfg->hb_sub.max_hops = max(cfg->hb_sub.max_hops, hops);
    caee:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
		cfg->hb_sub.count++;
    caf2:	bf1c      	itt	ne
    caf4:	3101      	addne	r1, #1
    caf6:	f8a4 104c 	strhne.w	r1, [r4, #76]	; 0x4c
	if (cfg->hb_sub.func) {
    cafa:	b123      	cbz	r3, cb06 <bt_mesh_heartbeat+0x66>
		cfg->hb_sub.func(hops, feat);
    cafc:	4631      	mov	r1, r6
    cafe:	4628      	mov	r0, r5
	}
}
    cb00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cfg->hb_sub.func(hops, feat);
    cb04:	4718      	bx	r3
    cb06:	bd70      	pop	{r4, r5, r6, pc}
    cb08:	20000870 	.word	0x20000870

0000cb0c <bt_mesh_net_transmit_get>:

u8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
    cb0c:	4b02      	ldr	r3, [pc, #8]	; (cb18 <bt_mesh_net_transmit_get+0xc>)
    cb0e:	6818      	ldr	r0, [r3, #0]
    cb10:	b100      	cbz	r0, cb14 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
    cb12:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
    cb14:	4770      	bx	lr
    cb16:	bf00      	nop
    cb18:	20000870 	.word	0x20000870

0000cb1c <net_transmit_set>:
{
    cb1c:	b570      	push	{r4, r5, r6, lr}
    cb1e:	b086      	sub	sp, #24
    cb20:	4604      	mov	r4, r0
    cb22:	460d      	mov	r5, r1
    cb24:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cb26:	2100      	movs	r1, #0
    cb28:	2210      	movs	r2, #16
    cb2a:	a802      	add	r0, sp, #8
    cb2c:	f7f3 fdc0 	bl	6b0 <memset>
    cb30:	2307      	movs	r3, #7
    cb32:	f8ad 300e 	strh.w	r3, [sp, #14]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    cb36:	69a3      	ldr	r3, [r4, #24]
	if (!cfg) {
    cb38:	b113      	cbz	r3, cb40 <net_transmit_set+0x24>
		cfg->net_transmit = buf->data[0];
    cb3a:	6832      	ldr	r2, [r6, #0]
    cb3c:	7812      	ldrb	r2, [r2, #0]
    cb3e:	711a      	strb	r2, [r3, #4]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
    cb40:	f248 0125 	movw	r1, #32805	; 0x8025
    cb44:	a802      	add	r0, sp, #8
    cb46:	f7fe f96d 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
    cb4a:	f7ff ffdf 	bl	cb0c <bt_mesh_net_transmit_get>
    cb4e:	4601      	mov	r1, r0
    cb50:	a802      	add	r0, sp, #8
    cb52:	f00b f826 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cb56:	2300      	movs	r3, #0
    cb58:	9300      	str	r3, [sp, #0]
    cb5a:	aa02      	add	r2, sp, #8
    cb5c:	4629      	mov	r1, r5
    cb5e:	4620      	mov	r0, r4
    cb60:	f7fe f982 	bl	ae68 <bt_mesh_model_send>
}
    cb64:	b006      	add	sp, #24
    cb66:	bd70      	pop	{r4, r5, r6, pc}

0000cb68 <net_transmit_get>:
{
    cb68:	b530      	push	{r4, r5, lr}
    cb6a:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cb6c:	2210      	movs	r2, #16
{
    cb6e:	4604      	mov	r4, r0
    cb70:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cb72:	a802      	add	r0, sp, #8
    cb74:	2100      	movs	r1, #0
    cb76:	f7f3 fd9b 	bl	6b0 <memset>
    cb7a:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
    cb7c:	f248 0125 	movw	r1, #32805	; 0x8025
    cb80:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cb82:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_NET_TRANSMIT_STATUS);
    cb86:	f7fe f94d 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_net_transmit_get());
    cb8a:	f7ff ffbf 	bl	cb0c <bt_mesh_net_transmit_get>
    cb8e:	4601      	mov	r1, r0
    cb90:	a802      	add	r0, sp, #8
    cb92:	f00b f806 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cb96:	2300      	movs	r3, #0
    cb98:	9300      	str	r3, [sp, #0]
    cb9a:	aa02      	add	r2, sp, #8
    cb9c:	4629      	mov	r1, r5
    cb9e:	4620      	mov	r0, r4
    cba0:	f7fe f962 	bl	ae68 <bt_mesh_model_send>
}
    cba4:	b007      	add	sp, #28
    cba6:	bd30      	pop	{r4, r5, pc}

0000cba8 <bt_mesh_relay_get>:

u8_t bt_mesh_relay_get(void)
{
	if (conf) {
    cba8:	4b03      	ldr	r3, [pc, #12]	; (cbb8 <bt_mesh_relay_get+0x10>)
    cbaa:	681b      	ldr	r3, [r3, #0]
    cbac:	b10b      	cbz	r3, cbb2 <bt_mesh_relay_get+0xa>
		return conf->relay;
    cbae:	7958      	ldrb	r0, [r3, #5]
    cbb0:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
    cbb2:	2002      	movs	r0, #2
}
    cbb4:	4770      	bx	lr
    cbb6:	bf00      	nop
    cbb8:	20000870 	.word	0x20000870

0000cbbc <bt_mesh_friend_get>:

u8_t bt_mesh_friend_get(void)
{
	BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);

	if (conf) {
    cbbc:	4b03      	ldr	r3, [pc, #12]	; (cbcc <bt_mesh_friend_get+0x10>)
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	b10b      	cbz	r3, cbc6 <bt_mesh_friend_get+0xa>
		return conf->frnd;
    cbc2:	7a58      	ldrb	r0, [r3, #9]
    cbc4:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
    cbc6:	2002      	movs	r0, #2
}
    cbc8:	4770      	bx	lr
    cbca:	bf00      	nop
    cbcc:	20000870 	.word	0x20000870

0000cbd0 <bt_mesh_relay_retransmit_get>:

u8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
    cbd0:	4b02      	ldr	r3, [pc, #8]	; (cbdc <bt_mesh_relay_retransmit_get+0xc>)
    cbd2:	6818      	ldr	r0, [r3, #0]
    cbd4:	b100      	cbz	r0, cbd8 <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
    cbd6:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
    cbd8:	4770      	bx	lr
    cbda:	bf00      	nop
    cbdc:	20000870 	.word	0x20000870

0000cbe0 <relay_get>:
{
    cbe0:	b530      	push	{r4, r5, lr}
    cbe2:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    cbe4:	2210      	movs	r2, #16
{
    cbe6:	4604      	mov	r4, r0
    cbe8:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    cbea:	a802      	add	r0, sp, #8
    cbec:	2100      	movs	r1, #0
    cbee:	f7f3 fd5f 	bl	6b0 <memset>
    cbf2:	2308      	movs	r3, #8
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
    cbf4:	eb0d 0003 	add.w	r0, sp, r3
    cbf8:	f248 0128 	movw	r1, #32808	; 0x8028
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    cbfc:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
    cc00:	f7fe f910 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
    cc04:	f7ff ffd0 	bl	cba8 <bt_mesh_relay_get>
    cc08:	4601      	mov	r1, r0
    cc0a:	a802      	add	r0, sp, #8
    cc0c:	f00a ffc9 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
    cc10:	f7ff ffde 	bl	cbd0 <bt_mesh_relay_retransmit_get>
    cc14:	4601      	mov	r1, r0
    cc16:	a802      	add	r0, sp, #8
    cc18:	f00a ffc3 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cc1c:	2300      	movs	r3, #0
    cc1e:	9300      	str	r3, [sp, #0]
    cc20:	aa02      	add	r2, sp, #8
    cc22:	4629      	mov	r1, r5
    cc24:	4620      	mov	r0, r4
    cc26:	f7fe f91f 	bl	ae68 <bt_mesh_model_send>
}
    cc2a:	b007      	add	sp, #28
    cc2c:	bd30      	pop	{r4, r5, pc}
	...

0000cc30 <bt_mesh_beacon_get>:

u8_t bt_mesh_beacon_get(void)
{
	if (conf) {
    cc30:	4b02      	ldr	r3, [pc, #8]	; (cc3c <bt_mesh_beacon_get+0xc>)
    cc32:	6818      	ldr	r0, [r3, #0]
    cc34:	b100      	cbz	r0, cc38 <bt_mesh_beacon_get+0x8>
		return conf->beacon;
    cc36:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
    cc38:	4770      	bx	lr
    cc3a:	bf00      	nop
    cc3c:	20000870 	.word	0x20000870

0000cc40 <beacon_set>:
{
    cc40:	b570      	push	{r4, r5, r6, lr}
    cc42:	4604      	mov	r4, r0
    cc44:	b086      	sub	sp, #24
    cc46:	460d      	mov	r5, r1
    cc48:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cc4a:	2100      	movs	r1, #0
    cc4c:	2210      	movs	r2, #16
    cc4e:	a802      	add	r0, sp, #8
    cc50:	f7f3 fd2e 	bl	6b0 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    cc54:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cc56:	2307      	movs	r3, #7
    cc58:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
    cc5c:	b152      	cbz	r2, cc74 <beacon_set+0x34>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
    cc5e:	6833      	ldr	r3, [r6, #0]
    cc60:	781b      	ldrb	r3, [r3, #0]
    cc62:	2b01      	cmp	r3, #1
    cc64:	d818      	bhi.n	cc98 <beacon_set+0x58>
		if (buf->data[0] != cfg->beacon) {
    cc66:	79d1      	ldrb	r1, [r2, #7]
    cc68:	4299      	cmp	r1, r3
    cc6a:	d003      	beq.n	cc74 <beacon_set+0x34>
			cfg->beacon = buf->data[0];
    cc6c:	71d3      	strb	r3, [r2, #7]
			if (cfg->beacon) {
    cc6e:	b1ab      	cbz	r3, cc9c <beacon_set+0x5c>
				bt_mesh_beacon_enable();
    cc70:	f7fb f972 	bl	7f58 <bt_mesh_beacon_enable>
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
    cc74:	f248 010b 	movw	r1, #32779	; 0x800b
    cc78:	a802      	add	r0, sp, #8
    cc7a:	f7fe f8d3 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
    cc7e:	f7ff ffd7 	bl	cc30 <bt_mesh_beacon_get>
    cc82:	4601      	mov	r1, r0
    cc84:	a802      	add	r0, sp, #8
    cc86:	f00a ff8c 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cc8a:	2300      	movs	r3, #0
    cc8c:	9300      	str	r3, [sp, #0]
    cc8e:	aa02      	add	r2, sp, #8
    cc90:	4629      	mov	r1, r5
    cc92:	4620      	mov	r0, r4
    cc94:	f7fe f8e8 	bl	ae68 <bt_mesh_model_send>
}
    cc98:	b006      	add	sp, #24
    cc9a:	bd70      	pop	{r4, r5, r6, pc}
				bt_mesh_beacon_disable();
    cc9c:	f7fb f986 	bl	7fac <bt_mesh_beacon_disable>
    cca0:	e7e8      	b.n	cc74 <beacon_set+0x34>

0000cca2 <beacon_get>:
{
    cca2:	b530      	push	{r4, r5, lr}
    cca4:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cca6:	2210      	movs	r2, #16
{
    cca8:	4604      	mov	r4, r0
    ccaa:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    ccac:	a802      	add	r0, sp, #8
    ccae:	2100      	movs	r1, #0
    ccb0:	f7f3 fcfe 	bl	6b0 <memset>
    ccb4:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
    ccb6:	f248 010b 	movw	r1, #32779	; 0x800b
    ccba:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    ccbc:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_BEACON_STATUS);
    ccc0:	f7fe f8b0 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_beacon_get());
    ccc4:	f7ff ffb4 	bl	cc30 <bt_mesh_beacon_get>
    ccc8:	4601      	mov	r1, r0
    ccca:	a802      	add	r0, sp, #8
    cccc:	f00a ff69 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    ccd0:	2300      	movs	r3, #0
    ccd2:	9300      	str	r3, [sp, #0]
    ccd4:	aa02      	add	r2, sp, #8
    ccd6:	4629      	mov	r1, r5
    ccd8:	4620      	mov	r0, r4
    ccda:	f7fe f8c5 	bl	ae68 <bt_mesh_model_send>
}
    ccde:	b007      	add	sp, #28
    cce0:	bd30      	pop	{r4, r5, pc}
	...

0000cce4 <bt_mesh_gatt_proxy_get>:

u8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
    cce4:	4b03      	ldr	r3, [pc, #12]	; (ccf4 <bt_mesh_gatt_proxy_get+0x10>)
    cce6:	681b      	ldr	r3, [r3, #0]
    cce8:	b10b      	cbz	r3, ccee <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
    ccea:	7a18      	ldrb	r0, [r3, #8]
    ccec:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
    ccee:	2002      	movs	r0, #2
}
    ccf0:	4770      	bx	lr
    ccf2:	bf00      	nop
    ccf4:	20000870 	.word	0x20000870

0000ccf8 <hb_send>:
{
    ccf8:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    ccfa:	6984      	ldr	r4, [r0, #24]
{
    ccfc:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    ccfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cd02:	2300      	movs	r3, #0
{
    cd04:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
    cd06:	f8ad 2016 	strh.w	r2, [sp, #22]
    cd0a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    cd0c:	9306      	str	r3, [sp, #24]
		.net_idx = cfg->hb_pub.net_idx,
    cd0e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
	struct bt_mesh_msg_ctx ctx = {
    cd10:	f8ad 2018 	strh.w	r2, [sp, #24]
    cd14:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    cd18:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
    cd1c:	9307      	str	r3, [sp, #28]
    cd1e:	9308      	str	r3, [sp, #32]
    cd20:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    cd22:	f8ad 0014 	strh.w	r0, [sp, #20]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
    cd26:	f7fb f9ff 	bl	8128 <bt_mesh_subnet_get>
		.src = model->elem->addr,
    cd2a:	686b      	ldr	r3, [r5, #4]
	struct bt_mesh_net_tx tx = {
    cd2c:	9007      	str	r0, [sp, #28]
    cd2e:	881b      	ldrh	r3, [r3, #0]
    cd30:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
    cd34:	ae05      	add	r6, sp, #20
	struct bt_mesh_net_tx tx = {
    cd36:	9608      	str	r6, [sp, #32]
		.xmit = bt_mesh_net_transmit_get(),
    cd38:	f7ff fee8 	bl	cb0c <bt_mesh_net_transmit_get>
	hb.init_ttl = cfg->hb_pub.ttl;
    cd3c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    cd40:	f88d 3010 	strb.w	r3, [sp, #16]
	struct bt_mesh_net_tx tx = {
    cd44:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
    cd48:	f7ff ff2e 	bl	cba8 <bt_mesh_relay_get>
	u16_t feat = 0;
    cd4c:	1e43      	subs	r3, r0, #1
    cd4e:	425a      	negs	r2, r3
    cd50:	415a      	adcs	r2, r3
	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    cd52:	f7ff ffc7 	bl	cce4 <bt_mesh_gatt_proxy_get>
    cd56:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
    cd58:	bf08      	it	eq
    cd5a:	f042 0202 	orreq.w	r2, r2, #2
	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
    cd5e:	f7ff ff2d 	bl	cbbc <bt_mesh_friend_get>
    cd62:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
    cd64:	bf08      	it	eq
    cd66:	f042 0204 	orreq.w	r2, r2, #4
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    cd6a:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
    cd6c:	0212      	lsls	r2, r2, #8
    cd6e:	f8ad 2011 	strh.w	r2, [sp, #17]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
    cd72:	9302      	str	r3, [sp, #8]
    cd74:	9301      	str	r3, [sp, #4]
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	aa04      	add	r2, sp, #16
    cd7a:	2303      	movs	r3, #3
    cd7c:	210a      	movs	r1, #10
    cd7e:	a807      	add	r0, sp, #28
    cd80:	f7fc fdaa 	bl	98d8 <bt_mesh_ctl_send>
}
    cd84:	b00a      	add	sp, #40	; 0x28
    cd86:	bd70      	pop	{r4, r5, r6, pc}

0000cd88 <friend_set>:
{
    cd88:	b570      	push	{r4, r5, r6, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    cd8a:	6813      	ldr	r3, [r2, #0]
    cd8c:	781b      	ldrb	r3, [r3, #0]
    cd8e:	2b01      	cmp	r3, #1
{
    cd90:	4605      	mov	r5, r0
    cd92:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    cd94:	d81a      	bhi.n	cdcc <friend_set+0x44>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    cd96:	6984      	ldr	r4, [r0, #24]
	if (!cfg) {
    cd98:	b194      	cbz	r4, cdc0 <friend_set+0x38>
	if (cfg->frnd == buf->data[0]) {
    cd9a:	7a62      	ldrb	r2, [r4, #9]
    cd9c:	429a      	cmp	r2, r3
    cd9e:	d00f      	beq.n	cdc0 <friend_set+0x38>
		cfg->frnd = buf->data[0];
    cda0:	7263      	strb	r3, [r4, #9]
		if (cfg->frnd == BT_MESH_FRIEND_DISABLED) {
    cda2:	b91b      	cbnz	r3, cdac <friend_set+0x24>
			bt_mesh_friend_clear_net_idx(BT_MESH_KEY_ANY);
    cda4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cda8:	f000 fe72 	bl	da90 <bt_mesh_friend_clear_net_idx>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    cdac:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    cdae:	f7fb f9bb 	bl	8128 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) && sub) {
    cdb2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    cdb4:	075b      	lsls	r3, r3, #29
    cdb6:	d503      	bpl.n	cdc0 <friend_set+0x38>
    cdb8:	b110      	cbz	r0, cdc0 <friend_set+0x38>
		hb_send(model);
    cdba:	4628      	mov	r0, r5
    cdbc:	f7ff ff9c 	bl	ccf8 <hb_send>
	send_friend_status(model, ctx);
    cdc0:	4631      	mov	r1, r6
    cdc2:	4628      	mov	r0, r5
}
    cdc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_friend_status(model, ctx);
    cdc8:	f7fe ba52 	b.w	b270 <send_friend_status>
    cdcc:	bd70      	pop	{r4, r5, r6, pc}

0000cdce <relay_set>:
{
    cdce:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdd0:	4606      	mov	r6, r0
    cdd2:	b087      	sub	sp, #28
    cdd4:	460f      	mov	r7, r1
    cdd6:	4615      	mov	r5, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    cdd8:	2100      	movs	r1, #0
    cdda:	2210      	movs	r2, #16
    cddc:	a802      	add	r0, sp, #8
    cdde:	f7f3 fc67 	bl	6b0 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    cde2:	69b4      	ldr	r4, [r6, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 2 + 4);
    cde4:	2308      	movs	r3, #8
    cde6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
    cdea:	b1bc      	cbz	r4, ce1c <relay_set+0x4e>
	} else if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
    cdec:	682a      	ldr	r2, [r5, #0]
    cdee:	7813      	ldrb	r3, [r2, #0]
    cdf0:	2b01      	cmp	r3, #1
    cdf2:	d82b      	bhi.n	ce4c <relay_set+0x7e>
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
    cdf4:	7965      	ldrb	r5, [r4, #5]
    cdf6:	2d02      	cmp	r5, #2
    cdf8:	d02a      	beq.n	ce50 <relay_set+0x82>
			cfg->relay = buf->data[0];
    cdfa:	7163      	strb	r3, [r4, #5]
			change = (cfg->relay != buf->data[0]);
    cdfc:	1b5d      	subs	r5, r3, r5
			cfg->relay_retransmit = buf->data[1];
    cdfe:	7853      	ldrb	r3, [r2, #1]
    ce00:	71a3      	strb	r3, [r4, #6]
			change = (cfg->relay != buf->data[0]);
    ce02:	bf18      	it	ne
    ce04:	2501      	movne	r5, #1
		sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    ce06:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    ce08:	f7fb f98e 	bl	8128 <bt_mesh_subnet_get>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && sub && change) {
    ce0c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    ce0e:	07db      	lsls	r3, r3, #31
    ce10:	d504      	bpl.n	ce1c <relay_set+0x4e>
    ce12:	b118      	cbz	r0, ce1c <relay_set+0x4e>
    ce14:	b115      	cbz	r5, ce1c <relay_set+0x4e>
			hb_send(model);
    ce16:	4630      	mov	r0, r6
    ce18:	f7ff ff6e 	bl	ccf8 <hb_send>
	bt_mesh_model_msg_init(msg, OP_RELAY_STATUS);
    ce1c:	f248 0128 	movw	r1, #32808	; 0x8028
    ce20:	a802      	add	r0, sp, #8
    ce22:	f7fd ffff 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_relay_get());
    ce26:	f7ff febf 	bl	cba8 <bt_mesh_relay_get>
    ce2a:	4601      	mov	r1, r0
    ce2c:	a802      	add	r0, sp, #8
    ce2e:	f00a feb8 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(msg, bt_mesh_relay_retransmit_get());
    ce32:	f7ff fecd 	bl	cbd0 <bt_mesh_relay_retransmit_get>
    ce36:	4601      	mov	r1, r0
    ce38:	a802      	add	r0, sp, #8
    ce3a:	f00a feb2 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    ce3e:	2300      	movs	r3, #0
    ce40:	9300      	str	r3, [sp, #0]
    ce42:	aa02      	add	r2, sp, #8
    ce44:	4639      	mov	r1, r7
    ce46:	4630      	mov	r0, r6
    ce48:	f7fe f80e 	bl	ae68 <bt_mesh_model_send>
}
    ce4c:	b007      	add	sp, #28
    ce4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			change = false;
    ce50:	2500      	movs	r5, #0
    ce52:	e7d8      	b.n	ce06 <relay_set+0x38>

0000ce54 <hb_publish>:
{
    ce54:	b538      	push	{r3, r4, r5, lr}
    ce56:	4604      	mov	r4, r0
	struct bt_mesh_model *model = cfg->model;
    ce58:	f850 5c0c 	ldr.w	r5, [r0, #-12]
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    ce5c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    ce5e:	f7fb f963 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    ce62:	b908      	cbnz	r0, ce68 <hb_publish+0x14>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    ce64:	8520      	strh	r0, [r4, #40]	; 0x28
		return;
    ce66:	bd38      	pop	{r3, r4, r5, pc}
	if (cfg->hb_pub.count == 0) {
    ce68:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    ce6a:	b1d9      	cbz	r1, cea4 <hb_publish+0x50>
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000;
    ce6c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ce70:	f7ff fa52 	bl	c318 <hb_pwr2.constprop.12>
    ce74:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
    ce78:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ce7c:	00d2      	lsls	r2, r2, #3
    ce7e:	b292      	uxth	r2, r2
	if (period_ms && cfg->hb_pub.count > 1) {
    ce80:	b12a      	cbz	r2, ce8e <hb_publish+0x3a>
    ce82:	2901      	cmp	r1, #1
    ce84:	d903      	bls.n	ce8e <hb_publish+0x3a>
    ce86:	4621      	mov	r1, r4
    ce88:	4807      	ldr	r0, [pc, #28]	; (cea8 <hb_publish+0x54>)
    ce8a:	f00b ff7d 	bl	18d88 <k_delayed_work_submit_to_queue>
	hb_send(model);
    ce8e:	4628      	mov	r0, r5
    ce90:	f7ff ff32 	bl	ccf8 <hb_send>
	if (cfg->hb_pub.count != 0xffff) {
    ce94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    ce96:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ce9a:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
    ce9c:	bf1c      	itt	ne
    ce9e:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
    cea2:	8563      	strhne	r3, [r4, #42]	; 0x2a
    cea4:	bd38      	pop	{r3, r4, r5, pc}
    cea6:	bf00      	nop
    cea8:	20001dd8 	.word	0x20001dd8

0000ceac <node_identity_set>:
{
    ceac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ceb0:	b088      	sub	sp, #32
    ceb2:	4614      	mov	r4, r2
    ceb4:	4607      	mov	r7, r0
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    ceb6:	2214      	movs	r2, #20
{
    ceb8:	4688      	mov	r8, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    ceba:	a803      	add	r0, sp, #12
    cebc:	2100      	movs	r1, #0
    cebe:	f7f3 fbf7 	bl	6b0 <memset>
    cec2:	230a      	movs	r3, #10
	idx = net_buf_simple_pull_le16(buf);
    cec4:	4620      	mov	r0, r4
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 4 + 4);
    cec6:	f8ad 3012 	strh.w	r3, [sp, #18]
	idx = net_buf_simple_pull_le16(buf);
    ceca:	f00a fed6 	bl	17c7a <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
    cece:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
    ced2:	4605      	mov	r5, r0
	if (idx > 0xfff) {
    ced4:	d222      	bcs.n	cf1c <node_identity_set+0x70>
	node_id = net_buf_simple_pull_u8(buf);
    ced6:	4620      	mov	r0, r4
    ced8:	f00a fec7 	bl	17c6a <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
    cedc:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
    cede:	4606      	mov	r6, r0
	if (node_id != 0x00 && node_id != 0x01) {
    cee0:	d81c      	bhi.n	cf1c <node_identity_set+0x70>
	bt_mesh_model_msg_init(msg, OP_NODE_IDENTITY_STATUS);
    cee2:	f248 0148 	movw	r1, #32840	; 0x8048
    cee6:	a803      	add	r0, sp, #12
    cee8:	f7fd ff9c 	bl	ae24 <bt_mesh_model_msg_init>
	sub = bt_mesh_subnet_get(idx);
    ceec:	4628      	mov	r0, r5
    ceee:	f7fb f91b 	bl	8128 <bt_mesh_subnet_get>
	if (!sub) {
    cef2:	4604      	mov	r4, r0
    cef4:	b9a8      	cbnz	r0, cf22 <node_identity_set+0x76>
		net_buf_simple_add_u8(msg, STATUS_INVALID_NETKEY);
    cef6:	2104      	movs	r1, #4
    cef8:	a803      	add	r0, sp, #12
    cefa:	f00a fe52 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
    cefe:	4629      	mov	r1, r5
    cf00:	a803      	add	r0, sp, #12
    cf02:	f00a fe56 	bl	17bb2 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(msg, node_id);
    cf06:	4631      	mov	r1, r6
		net_buf_simple_add_u8(msg, sub->node_id);
    cf08:	a803      	add	r0, sp, #12
    cf0a:	f00a fe4a 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cf0e:	2300      	movs	r3, #0
    cf10:	9300      	str	r3, [sp, #0]
    cf12:	aa03      	add	r2, sp, #12
    cf14:	4641      	mov	r1, r8
    cf16:	4638      	mov	r0, r7
    cf18:	f7fd ffa6 	bl	ae68 <bt_mesh_model_send>
}
    cf1c:	b008      	add	sp, #32
    cf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_u8(msg, STATUS_SUCCESS);
    cf22:	2100      	movs	r1, #0
    cf24:	a803      	add	r0, sp, #12
    cf26:	f00a fe3c 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, idx);
    cf2a:	4629      	mov	r1, r5
    cf2c:	a803      	add	r0, sp, #12
    cf2e:	f00a fe40 	bl	17bb2 <net_buf_simple_add_le16>
		    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    cf32:	f7ff fed7 	bl	cce4 <bt_mesh_gatt_proxy_get>
		if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) &&
    cf36:	2801      	cmp	r0, #1
    cf38:	d105      	bne.n	cf46 <node_identity_set+0x9a>
				bt_mesh_proxy_identity_start(sub);
    cf3a:	4620      	mov	r0, r4
			if (node_id) {
    cf3c:	b136      	cbz	r6, cf4c <node_identity_set+0xa0>
				bt_mesh_proxy_identity_start(sub);
    cf3e:	f002 fc31 	bl	f7a4 <bt_mesh_proxy_identity_start>
			bt_mesh_adv_update();
    cf42:	f7fa fddb 	bl	7afc <bt_mesh_adv_update>
		net_buf_simple_add_u8(msg, sub->node_id);
    cf46:	f894 1020 	ldrb.w	r1, [r4, #32]
    cf4a:	e7dd      	b.n	cf08 <node_identity_set+0x5c>
				bt_mesh_proxy_identity_stop(sub);
    cf4c:	f002 fc44 	bl	f7d8 <bt_mesh_proxy_identity_stop>
    cf50:	e7f7      	b.n	cf42 <node_identity_set+0x96>

0000cf52 <send_gatt_proxy_status>:
{
    cf52:	b530      	push	{r4, r5, lr}
    cf54:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cf56:	2210      	movs	r2, #16
{
    cf58:	4604      	mov	r4, r0
    cf5a:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cf5c:	a802      	add	r0, sp, #8
    cf5e:	2100      	movs	r1, #0
    cf60:	f7f3 fba6 	bl	6b0 <memset>
    cf64:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
    cf66:	f248 0114 	movw	r1, #32788	; 0x8014
    cf6a:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    cf6c:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_GATT_PROXY_STATUS);
    cf70:	f7fd ff58 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_gatt_proxy_get());
    cf74:	f7ff feb6 	bl	cce4 <bt_mesh_gatt_proxy_get>
    cf78:	4601      	mov	r1, r0
    cf7a:	a802      	add	r0, sp, #8
    cf7c:	f00a fe11 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    cf80:	2300      	movs	r3, #0
    cf82:	9300      	str	r3, [sp, #0]
    cf84:	aa02      	add	r2, sp, #8
    cf86:	4629      	mov	r1, r5
    cf88:	4620      	mov	r0, r4
    cf8a:	f7fd ff6d 	bl	ae68 <bt_mesh_model_send>
}
    cf8e:	b007      	add	sp, #28
    cf90:	bd30      	pop	{r4, r5, pc}

0000cf92 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
    cf92:	f7ff bfde 	b.w	cf52 <send_gatt_proxy_status>
	...

0000cf98 <gatt_proxy_set>:
{
    cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    cf9a:	6813      	ldr	r3, [r2, #0]
    cf9c:	781a      	ldrb	r2, [r3, #0]
    cf9e:	2a01      	cmp	r2, #1
{
    cfa0:	4606      	mov	r6, r0
    cfa2:	460f      	mov	r7, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
    cfa4:	d832      	bhi.n	d00c <gatt_proxy_set+0x74>
	    bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_NOT_SUPPORTED) {
    cfa6:	f7ff fe9d 	bl	cce4 <bt_mesh_gatt_proxy_get>
	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY) ||
    cfaa:	2802      	cmp	r0, #2
    cfac:	d028      	beq.n	d000 <gatt_proxy_set+0x68>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    cfae:	69b4      	ldr	r4, [r6, #24]
	if (!cfg) {
    cfb0:	b334      	cbz	r4, d000 <gatt_proxy_set+0x68>
	if (cfg->gatt_proxy == buf->data[0]) {
    cfb2:	7a23      	ldrb	r3, [r4, #8]
    cfb4:	4293      	cmp	r3, r2
    cfb6:	d023      	beq.n	d000 <gatt_proxy_set+0x68>
	cfg->gatt_proxy = buf->data[0];
    cfb8:	7222      	strb	r2, [r4, #8]
	if (cfg->gatt_proxy == BT_MESH_GATT_PROXY_DISABLED) {
    cfba:	b9aa      	cbnz	r2, cfe8 <gatt_proxy_set+0x50>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    cfbc:	4d14      	ldr	r5, [pc, #80]	; (d010 <gatt_proxy_set+0x78>)
    cfbe:	f8b5 21d0 	ldrh.w	r2, [r5, #464]	; 0x1d0
    cfc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cfc6:	429a      	cmp	r2, r3
    cfc8:	d003      	beq.n	cfd2 <gatt_proxy_set+0x3a>
				bt_mesh_proxy_identity_stop(sub);
    cfca:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    cfce:	f002 fc03 	bl	f7d8 <bt_mesh_proxy_identity_stop>
			if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    cfd2:	f8b5 22b4 	ldrh.w	r2, [r5, #692]	; 0x2b4
    cfd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cfda:	429a      	cmp	r2, r3
    cfdc:	d002      	beq.n	cfe4 <gatt_proxy_set+0x4c>
				bt_mesh_proxy_identity_stop(sub);
    cfde:	480d      	ldr	r0, [pc, #52]	; (d014 <gatt_proxy_set+0x7c>)
    cfe0:	f002 fbfa 	bl	f7d8 <bt_mesh_proxy_identity_stop>
		bt_mesh_proxy_gatt_disconnect();
    cfe4:	f002 fc4c 	bl	f880 <bt_mesh_proxy_gatt_disconnect>
	bt_mesh_adv_update();
    cfe8:	f7fa fd88 	bl	7afc <bt_mesh_adv_update>
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    cfec:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    cfee:	f7fb f89b 	bl	8128 <bt_mesh_subnet_get>
	if ((cfg->hb_pub.feat & BT_MESH_FEAT_PROXY) && sub) {
    cff2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    cff4:	079b      	lsls	r3, r3, #30
    cff6:	d503      	bpl.n	d000 <gatt_proxy_set+0x68>
    cff8:	b110      	cbz	r0, d000 <gatt_proxy_set+0x68>
		hb_send(model);
    cffa:	4630      	mov	r0, r6
    cffc:	f7ff fe7c 	bl	ccf8 <hb_send>
	send_gatt_proxy_status(model, ctx);
    d000:	4639      	mov	r1, r7
    d002:	4630      	mov	r0, r6
}
    d004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	send_gatt_proxy_status(model, ctx);
    d008:	f7ff bfa3 	b.w	cf52 <send_gatt_proxy_status>
    d00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d00e:	bf00      	nop
    d010:	20006168 	.word	0x20006168
    d014:	20006400 	.word	0x20006400

0000d018 <bt_mesh_default_ttl_get>:

u8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
    d018:	4b03      	ldr	r3, [pc, #12]	; (d028 <bt_mesh_default_ttl_get+0x10>)
    d01a:	681b      	ldr	r3, [r3, #0]
    d01c:	b10b      	cbz	r3, d022 <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
    d01e:	7a98      	ldrb	r0, [r3, #10]
    d020:	4770      	bx	lr
	}

	return DEFAULT_TTL;
    d022:	2007      	movs	r0, #7
}
    d024:	4770      	bx	lr
    d026:	bf00      	nop
    d028:	20000870 	.word	0x20000870

0000d02c <default_ttl_set>:
{
    d02c:	b570      	push	{r4, r5, r6, lr}
    d02e:	4604      	mov	r4, r0
    d030:	b086      	sub	sp, #24
    d032:	460d      	mov	r5, r1
    d034:	4616      	mov	r6, r2
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    d036:	2100      	movs	r1, #0
    d038:	2210      	movs	r2, #16
    d03a:	a802      	add	r0, sp, #8
    d03c:	f7f3 fb38 	bl	6b0 <memset>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    d040:	69a2      	ldr	r2, [r4, #24]
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    d042:	2307      	movs	r3, #7
    d044:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (!cfg) {
    d048:	b132      	cbz	r2, d058 <default_ttl_set+0x2c>
	} else if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
    d04a:	6833      	ldr	r3, [r6, #0]
    d04c:	781b      	ldrb	r3, [r3, #0]
    d04e:	0619      	lsls	r1, r3, #24
    d050:	d414      	bmi.n	d07c <default_ttl_set+0x50>
    d052:	2b01      	cmp	r3, #1
    d054:	d012      	beq.n	d07c <default_ttl_set+0x50>
		cfg->default_ttl = buf->data[0];
    d056:	7293      	strb	r3, [r2, #10]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
    d058:	f248 010e 	movw	r1, #32782	; 0x800e
    d05c:	a802      	add	r0, sp, #8
    d05e:	f7fd fee1 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
    d062:	f7ff ffd9 	bl	d018 <bt_mesh_default_ttl_get>
    d066:	4601      	mov	r1, r0
    d068:	a802      	add	r0, sp, #8
    d06a:	f00a fd9a 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    d06e:	2300      	movs	r3, #0
    d070:	9300      	str	r3, [sp, #0]
    d072:	aa02      	add	r2, sp, #8
    d074:	4629      	mov	r1, r5
    d076:	4620      	mov	r0, r4
    d078:	f7fd fef6 	bl	ae68 <bt_mesh_model_send>
}
    d07c:	b006      	add	sp, #24
    d07e:	bd70      	pop	{r4, r5, r6, pc}

0000d080 <default_ttl_get>:
{
    d080:	b530      	push	{r4, r5, lr}
    d082:	b087      	sub	sp, #28
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    d084:	2210      	movs	r2, #16
{
    d086:	4604      	mov	r4, r0
    d088:	460d      	mov	r5, r1
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    d08a:	a802      	add	r0, sp, #8
    d08c:	2100      	movs	r1, #0
    d08e:	f7f3 fb0f 	bl	6b0 <memset>
    d092:	2307      	movs	r3, #7
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
    d094:	f248 010e 	movw	r1, #32782	; 0x800e
    d098:	a802      	add	r0, sp, #8
	struct net_buf_simple *msg = NET_BUF_SIMPLE(2 + 1 + 4);
    d09a:	f8ad 300e 	strh.w	r3, [sp, #14]
	bt_mesh_model_msg_init(msg, OP_DEFAULT_TTL_STATUS);
    d09e:	f7fd fec1 	bl	ae24 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, bt_mesh_default_ttl_get());
    d0a2:	f7ff ffb9 	bl	d018 <bt_mesh_default_ttl_get>
    d0a6:	4601      	mov	r1, r0
    d0a8:	a802      	add	r0, sp, #8
    d0aa:	f00a fd7a 	bl	17ba2 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, msg, NULL, NULL)) {
    d0ae:	2300      	movs	r3, #0
    d0b0:	9300      	str	r3, [sp, #0]
    d0b2:	aa02      	add	r2, sp, #8
    d0b4:	4629      	mov	r1, r5
    d0b6:	4620      	mov	r0, r4
    d0b8:	f7fd fed6 	bl	ae68 <bt_mesh_model_send>
}
    d0bc:	b007      	add	sp, #28
    d0be:	bd30      	pop	{r4, r5, pc}

0000d0c0 <bt_mesh_label_uuid_get>:
	int i;

	BT_DBG("addr 0x%04x", addr);

	for (i = 0; i < ARRAY_SIZE(labels); i++) {
		if (labels[i].addr == addr) {
    d0c0:	4b0a      	ldr	r3, [pc, #40]	; (d0ec <bt_mesh_label_uuid_get+0x2c>)
    d0c2:	885a      	ldrh	r2, [r3, #2]
    d0c4:	4282      	cmp	r2, r0
    d0c6:	d00b      	beq.n	d0e0 <bt_mesh_label_uuid_get+0x20>
    d0c8:	8ada      	ldrh	r2, [r3, #22]
    d0ca:	4282      	cmp	r2, r0
    d0cc:	d00a      	beq.n	d0e4 <bt_mesh_label_uuid_get+0x24>
    d0ce:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    d0d0:	4282      	cmp	r2, r0
    d0d2:	d109      	bne.n	d0e8 <bt_mesh_label_uuid_get+0x28>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    d0d4:	2002      	movs	r0, #2
			BT_DBG("Found Label UUID for 0x%04x: %s", addr,
			       bt_hex(labels[i].uuid, 16));
			return labels[i].uuid;
    d0d6:	2214      	movs	r2, #20
    d0d8:	fb02 3000 	mla	r0, r2, r0, r3
    d0dc:	3004      	adds	r0, #4
    d0de:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    d0e0:	2000      	movs	r0, #0
    d0e2:	e7f8      	b.n	d0d6 <bt_mesh_label_uuid_get+0x16>
    d0e4:	2001      	movs	r0, #1
    d0e6:	e7f6      	b.n	d0d6 <bt_mesh_label_uuid_get+0x16>
		}
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
    d0e8:	2000      	movs	r0, #0
}
    d0ea:	4770      	bx	lr
    d0ec:	20000874 	.word	0x20000874

0000d0f0 <mod_sub_list_clear>:
{
    d0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    d0f4:	4f1c      	ldr	r7, [pc, #112]	; (d168 <mod_sub_list_clear+0x78>)
    d0f6:	f100 050e 	add.w	r5, r0, #14
    d0fa:	1f3e      	subs	r6, r7, #4
    d0fc:	f100 0412 	add.w	r4, r0, #18
    d100:	46a8      	mov	r8, r5
    d102:	f106 0918 	add.w	r9, r6, #24
	for (i = 0; i < ARRAY_SIZE(mod->groups); i++) {
    d106:	42a5      	cmp	r5, r4
    d108:	d106      	bne.n	d118 <mod_sub_list_clear+0x28>
	memset(mod->groups, 0, sizeof(mod->groups));
    d10a:	4640      	mov	r0, r8
    d10c:	2204      	movs	r2, #4
    d10e:	2100      	movs	r1, #0
}
    d110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memset(mod->groups, 0, sizeof(mod->groups));
    d114:	f7f3 bacc 	b.w	6b0 <memset>
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
    d118:	f835 0b02 	ldrh.w	r0, [r5], #2
    d11c:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    d120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    d124:	d2ef      	bcs.n	d106 <mod_sub_list_clear+0x16>
		label_uuid = bt_mesh_label_uuid_get(mod->groups[i]);
    d126:	f7ff ffcb 	bl	d0c0 <bt_mesh_label_uuid_get>
		if (!label_uuid) {
    d12a:	4682      	mov	sl, r0
    d12c:	2800      	cmp	r0, #0
    d12e:	d0ea      	beq.n	d106 <mod_sub_list_clear+0x16>
		if (!memcmp(labels[i].uuid, label_uuid, 16)) {
    d130:	4601      	mov	r1, r0
    d132:	2210      	movs	r2, #16
    d134:	4638      	mov	r0, r7
    d136:	f7f3 fa7a 	bl	62e <memcmp>
    d13a:	b168      	cbz	r0, d158 <mod_sub_list_clear+0x68>
    d13c:	2210      	movs	r2, #16
    d13e:	4651      	mov	r1, sl
    d140:	4648      	mov	r0, r9
    d142:	f7f3 fa74 	bl	62e <memcmp>
    d146:	b168      	cbz	r0, d164 <mod_sub_list_clear+0x74>
    d148:	2210      	movs	r2, #16
    d14a:	4651      	mov	r1, sl
    d14c:	4807      	ldr	r0, [pc, #28]	; (d16c <mod_sub_list_clear+0x7c>)
    d14e:	f7f3 fa6e 	bl	62e <memcmp>
    d152:	2800      	cmp	r0, #0
    d154:	d1d7      	bne.n	d106 <mod_sub_list_clear+0x16>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    d156:	2002      	movs	r0, #2
			labels[i].ref--;
    d158:	2314      	movs	r3, #20
    d15a:	4358      	muls	r0, r3
    d15c:	5a33      	ldrh	r3, [r6, r0]
    d15e:	3b01      	subs	r3, #1
    d160:	5233      	strh	r3, [r6, r0]
    d162:	e7d0      	b.n	d106 <mod_sub_list_clear+0x16>
	for (i = 0; i < ARRAY_SIZE(labels); i++) {
    d164:	2001      	movs	r0, #1
    d166:	e7f7      	b.n	d158 <mod_sub_list_clear+0x68>
    d168:	20000878 	.word	0x20000878
    d16c:	200008a0 	.word	0x200008a0

0000d170 <mod_sub_del_all>:
{
    d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d174:	4605      	mov	r5, r0
    d176:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
    d178:	4610      	mov	r0, r2
{
    d17a:	4614      	mov	r4, r2
    d17c:	460e      	mov	r6, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    d17e:	f00a fd7c 	bl	17c7a <net_buf_simple_pull_le16>
	mod_id = buf->data;
    d182:	f8d4 8000 	ldr.w	r8, [r4]
	elem_addr = net_buf_simple_pull_le16(buf);
    d186:	4607      	mov	r7, r0
	elem = bt_mesh_elem_find(elem_addr);
    d188:	f7fd fd7c 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    d18c:	b9a8      	cbnz	r0, d1ba <mod_sub_del_all+0x4a>
		vnd = (buf->len == 4);
    d18e:	88a3      	ldrh	r3, [r4, #4]
    d190:	1f1a      	subs	r2, r3, #4
    d192:	4253      	negs	r3, r2
    d194:	4153      	adcs	r3, r2
    d196:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    d19a:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
    d19c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d1a0:	9302      	str	r3, [sp, #8]
    d1a2:	2300      	movs	r3, #0
    d1a4:	9300      	str	r3, [sp, #0]
    d1a6:	f8cd 8004 	str.w	r8, [sp, #4]
    d1aa:	463b      	mov	r3, r7
    d1ac:	4631      	mov	r1, r6
    d1ae:	4628      	mov	r0, r5
    d1b0:	f7fe f9dc 	bl	b56c <send_mod_sub_status>
}
    d1b4:	b006      	add	sp, #24
    d1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
    d1ba:	f10d 0217 	add.w	r2, sp, #23
    d1be:	4621      	mov	r1, r4
    d1c0:	f7fe fdd7 	bl	bd72 <get_model>
	if (!mod) {
    d1c4:	b118      	cbz	r0, d1ce <mod_sub_del_all+0x5e>
	mod_sub_list_clear(mod);
    d1c6:	f7ff ff93 	bl	d0f0 <mod_sub_list_clear>
	status = STATUS_SUCCESS;
    d1ca:	2200      	movs	r2, #0
    d1cc:	e7e6      	b.n	d19c <mod_sub_del_all+0x2c>
		status = STATUS_INVALID_MODEL;
    d1ce:	2202      	movs	r2, #2
    d1d0:	e7e4      	b.n	d19c <mod_sub_del_all+0x2c>

0000d1d2 <mod_sub_va_overwrite>:
{
    d1d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1d6:	b087      	sub	sp, #28
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    d1d8:	2300      	movs	r3, #0
{
    d1da:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
    d1dc:	4610      	mov	r0, r2
{
    d1de:	4614      	mov	r4, r2
    d1e0:	460f      	mov	r7, r1
	u16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    d1e2:	f8ad 3016 	strh.w	r3, [sp, #22]
	elem_addr = net_buf_simple_pull_le16(buf);
    d1e6:	f00a fd48 	bl	17c7a <net_buf_simple_pull_le16>
	net_buf_simple_pull(buf, 16);
    d1ea:	2110      	movs	r1, #16
	elem_addr = net_buf_simple_pull_le16(buf);
    d1ec:	4605      	mov	r5, r0
	net_buf_simple_pull(buf, 16);
    d1ee:	4620      	mov	r0, r4
	label_uuid = buf->data;
    d1f0:	f8d4 9000 	ldr.w	r9, [r4]
	net_buf_simple_pull(buf, 16);
    d1f4:	f00a fd31 	bl	17c5a <net_buf_simple_pull>
	elem = bt_mesh_elem_find(elem_addr);
    d1f8:	4628      	mov	r0, r5
	mod_id = buf->data;
    d1fa:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    d1fe:	f7fd fd41 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    d202:	b9b0      	cbnz	r0, d232 <mod_sub_va_overwrite+0x60>
		vnd = (buf->len == 4);
    d204:	88a3      	ldrh	r3, [r4, #4]
    d206:	1f1a      	subs	r2, r3, #4
    d208:	4253      	negs	r3, r2
    d20a:	4153      	adcs	r3, r2
    d20c:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
    d210:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    d212:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d216:	9302      	str	r3, [sp, #8]
    d218:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    d21c:	9300      	str	r3, [sp, #0]
    d21e:	f8cd 8004 	str.w	r8, [sp, #4]
    d222:	462b      	mov	r3, r5
    d224:	4639      	mov	r1, r7
    d226:	4630      	mov	r0, r6
    d228:	f7fe f9a0 	bl	b56c <send_mod_sub_status>
}
    d22c:	b007      	add	sp, #28
    d22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
    d232:	4621      	mov	r1, r4
    d234:	f10d 0215 	add.w	r2, sp, #21
    d238:	f7fe fd9b 	bl	bd72 <get_model>
	if (!mod) {
    d23c:	4604      	mov	r4, r0
    d23e:	b168      	cbz	r0, d25c <mod_sub_va_overwrite+0x8a>
	mod_sub_list_clear(mod);
    d240:	f7ff ff56 	bl	d0f0 <mod_sub_list_clear>
		status = va_add(label_uuid, &sub_addr);
    d244:	f10d 0116 	add.w	r1, sp, #22
    d248:	4648      	mov	r0, r9
    d24a:	f7fe fbe5 	bl	ba18 <va_add>
		if (status == STATUS_SUCCESS) {
    d24e:	4602      	mov	r2, r0
    d250:	2800      	cmp	r0, #0
    d252:	d1de      	bne.n	d212 <mod_sub_va_overwrite+0x40>
			mod->groups[0] = sub_addr;
    d254:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    d258:	81e3      	strh	r3, [r4, #14]
    d25a:	e7da      	b.n	d212 <mod_sub_va_overwrite+0x40>
		status = STATUS_INVALID_MODEL;
    d25c:	2202      	movs	r2, #2
    d25e:	e7d8      	b.n	d212 <mod_sub_va_overwrite+0x40>

0000d260 <mod_sub_overwrite>:
{
    d260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d264:	4607      	mov	r7, r0
    d266:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    d268:	4610      	mov	r0, r2
{
    d26a:	4614      	mov	r4, r2
    d26c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
    d26e:	f00a fd04 	bl	17c7a <net_buf_simple_pull_le16>
    d272:	4606      	mov	r6, r0
	sub_addr = net_buf_simple_pull_le16(buf);
    d274:	4620      	mov	r0, r4
    d276:	f00a fd00 	bl	17c7a <net_buf_simple_pull_le16>
    d27a:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
    d27c:	4630      	mov	r0, r6
	mod_id = buf->data;
    d27e:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    d282:	f7fd fcff 	bl	ac84 <bt_mesh_elem_find>
	if (!elem) {
    d286:	b938      	cbnz	r0, d298 <mod_sub_overwrite+0x38>
		vnd = (buf->len == 4);
    d288:	88a3      	ldrh	r3, [r4, #4]
    d28a:	1f1a      	subs	r2, r3, #4
    d28c:	4253      	negs	r3, r2
    d28e:	4153      	adcs	r3, r2
    d290:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    d294:	2201      	movs	r2, #1
    d296:	e010      	b.n	d2ba <mod_sub_overwrite+0x5a>
	mod = get_model(elem, buf, &vnd);
    d298:	4621      	mov	r1, r4
    d29a:	f10d 0217 	add.w	r2, sp, #23
    d29e:	f7fe fd68 	bl	bd72 <get_model>
	if (!mod) {
    d2a2:	4604      	mov	r4, r0
    d2a4:	b1b0      	cbz	r0, d2d4 <mod_sub_overwrite+0x74>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    d2a6:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
    d2aa:	b29b      	uxth	r3, r3
    d2ac:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    d2b0:	d8f0      	bhi.n	d294 <mod_sub_overwrite+0x34>
	mod_sub_list_clear(mod);
    d2b2:	f7ff ff1d 	bl	d0f0 <mod_sub_list_clear>
		mod->groups[0] = sub_addr;
    d2b6:	81e5      	strh	r5, [r4, #14]
		status = STATUS_SUCCESS;
    d2b8:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    d2ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d2be:	9302      	str	r3, [sp, #8]
    d2c0:	e88d 0220 	stmia.w	sp, {r5, r9}
    d2c4:	4633      	mov	r3, r6
    d2c6:	4641      	mov	r1, r8
    d2c8:	4638      	mov	r0, r7
    d2ca:	f7fe f94f 	bl	b56c <send_mod_sub_status>
}
    d2ce:	b007      	add	sp, #28
    d2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
    d2d4:	2202      	movs	r2, #2
    d2d6:	e7f0      	b.n	d2ba <mod_sub_overwrite+0x5a>

0000d2d8 <attention_off>:
	struct bt_mesh_health_srv *srv = CONTAINER_OF(work,
						      struct bt_mesh_health_srv,
						      attn_timer.work);
	BT_DBG("");

	if (srv->cb && srv->cb->attn_off) {
    d2d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d2dc:	b123      	cbz	r3, d2e8 <attention_off+0x10>
    d2de:	695b      	ldr	r3, [r3, #20]
    d2e0:	b113      	cbz	r3, d2e8 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
    d2e2:	f850 0c08 	ldr.w	r0, [r0, #-8]
    d2e6:	4718      	bx	r3
    d2e8:	4770      	bx	lr

0000d2ea <health_pub_update>:
{
    d2ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
    d2ee:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
    d2f0:	f8d0 a018 	ldr.w	sl, [r0, #24]
	count = health_get_current(mod, pub->msg);
    d2f4:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
    d2f6:	2104      	movs	r1, #4
{
    d2f8:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
    d2fa:	4620      	mov	r0, r4
    d2fc:	f7fd fd92 	bl	ae24 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
    d300:	2101      	movs	r1, #1
    d302:	4620      	mov	r0, r4
    d304:	f00a fc3e 	bl	17b84 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
    d308:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
    d30a:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
    d30c:	4620      	mov	r0, r4
    d30e:	f00a fc39 	bl	17b84 <net_buf_simple_add>
    d312:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
    d314:	f7fd ff1e 	bl	b154 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
    d318:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
    d31c:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
    d31e:	b1b3      	cbz	r3, d34e <health_pub_update+0x64>
    d320:	681b      	ldr	r3, [r3, #0]
    d322:	b1a3      	cbz	r3, d34e <health_pub_update+0x64>
		fault_count = net_buf_simple_tailroom(msg);
    d324:	4620      	mov	r0, r4
    d326:	f00a fcd2 	bl	17cce <net_buf_simple_tailroom>
    d32a:	f88d 000d 	strb.w	r0, [sp, #13]
	return buf->data + buf->len;
    d32e:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
    d330:	f8da 1004 	ldr.w	r1, [sl, #4]
    d334:	88a3      	ldrh	r3, [r4, #4]
    d336:	f10d 000d 	add.w	r0, sp, #13
    d33a:	9000      	str	r0, [sp, #0]
    d33c:	f8d1 a000 	ldr.w	sl, [r1]
    d340:	4413      	add	r3, r2
    d342:	4639      	mov	r1, r7
    d344:	f10d 020e 	add.w	r2, sp, #14
    d348:	4640      	mov	r0, r8
    d34a:	47d0      	blx	sl
		if (err) {
    d34c:	b148      	cbz	r0, d362 <health_pub_update+0x78>
		sys_put_le16(comp->cid, company_ptr);
    d34e:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
    d352:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
    d354:	0a1b      	lsrs	r3, r3, #8
    d356:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
    d358:	2300      	movs	r3, #0
    d35a:	703b      	strb	r3, [r7, #0]
		fault_count = 0;
    d35c:	f88d 300d 	strb.w	r3, [sp, #13]
    d360:	e009      	b.n	d376 <health_pub_update+0x8c>
			sys_put_le16(company_id, company_ptr);
    d362:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
    d366:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
    d368:	0a1b      	lsrs	r3, r3, #8
    d36a:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
    d36c:	f89d 100d 	ldrb.w	r1, [sp, #13]
    d370:	4620      	mov	r0, r4
    d372:	f00a fc07 	bl	17b84 <net_buf_simple_add>
	return fault_count;
    d376:	f89d 200d 	ldrb.w	r2, [sp, #13]
	if (!count) {
    d37a:	b91a      	cbnz	r2, d384 <health_pub_update+0x9a>
		pub->period_div = 0;
    d37c:	7af3      	ldrb	r3, [r6, #11]
    d37e:	f362 0303 	bfi	r3, r2, #0, #4
    d382:	72f3      	strb	r3, [r6, #11]
}
    d384:	2000      	movs	r0, #0
    d386:	b004      	add	sp, #16
    d388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d38c <bt_mesh_health_srv_init>:
	}
}

int bt_mesh_health_srv_init(struct bt_mesh_model *model, bool primary)
{
    d38c:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
    d38e:	6984      	ldr	r4, [r0, #24]
{
    d390:	4605      	mov	r5, r0
    d392:	460e      	mov	r6, r1

	if (!srv) {
    d394:	b914      	cbnz	r4, d39c <bt_mesh_health_srv_init+0x10>
		if (!primary) {
    d396:	b981      	cbnz	r1, d3ba <bt_mesh_health_srv_init+0x2e>

	if (primary) {
		health_srv = srv;
	}

	return 0;
    d398:	2000      	movs	r0, #0
    d39a:	bd70      	pop	{r4, r5, r6, pc}
	if (!model->pub) {
    d39c:	6883      	ldr	r3, [r0, #8]
    d39e:	b163      	cbz	r3, d3ba <bt_mesh_health_srv_init+0x2e>
	model->pub->update = health_pub_update,
    d3a0:	4a07      	ldr	r2, [pc, #28]	; (d3c0 <bt_mesh_health_srv_init+0x34>)
    d3a2:	615a      	str	r2, [r3, #20]
	k_delayed_work_init(&srv->attn_timer, attention_off);
    d3a4:	4907      	ldr	r1, [pc, #28]	; (d3c4 <bt_mesh_health_srv_init+0x38>)
    d3a6:	f104 0008 	add.w	r0, r4, #8
    d3aa:	f00b fc83 	bl	18cb4 <k_delayed_work_init>
	srv->model = model;
    d3ae:	6025      	str	r5, [r4, #0]
	if (primary) {
    d3b0:	2e00      	cmp	r6, #0
    d3b2:	d0f1      	beq.n	d398 <bt_mesh_health_srv_init+0xc>
		health_srv = srv;
    d3b4:	4b04      	ldr	r3, [pc, #16]	; (d3c8 <bt_mesh_health_srv_init+0x3c>)
    d3b6:	601c      	str	r4, [r3, #0]
    d3b8:	e7ee      	b.n	d398 <bt_mesh_health_srv_init+0xc>
		return -EINVAL;
    d3ba:	f06f 0015 	mvn.w	r0, #21
}
    d3be:	bd70      	pop	{r4, r5, r6, pc}
    d3c0:	0000d2eb 	.word	0x0000d2eb
    d3c4:	0000d2d9 	.word	0x0000d2d9
    d3c8:	20001cec 	.word	0x20001cec

0000d3cc <bt_mesh_attention>:

void bt_mesh_attention(struct bt_mesh_model *model, u8_t time)
{
    d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3d0:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
    d3d2:	4605      	mov	r5, r0
    d3d4:	b9a8      	cbnz	r0, d402 <bt_mesh_attention+0x36>
		srv = health_srv;
    d3d6:	4b12      	ldr	r3, [pc, #72]	; (d420 <bt_mesh_attention+0x54>)
    d3d8:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
    d3da:	b1fc      	cbz	r4, d41c <bt_mesh_attention+0x50>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
    d3dc:	6825      	ldr	r5, [r4, #0]
    d3de:	f104 0608 	add.w	r6, r4, #8
	} else {
		srv = model->user_data;
	}

	if (time) {
    d3e2:	b187      	cbz	r7, d406 <bt_mesh_attention+0x3a>
		if (srv->cb && srv->cb->attn_on) {
    d3e4:	6863      	ldr	r3, [r4, #4]
    d3e6:	b11b      	cbz	r3, d3f0 <bt_mesh_attention+0x24>
    d3e8:	691b      	ldr	r3, [r3, #16]
    d3ea:	b10b      	cbz	r3, d3f0 <bt_mesh_attention+0x24>
			srv->cb->attn_on(model);
    d3ec:	4628      	mov	r0, r5
    d3ee:	4798      	blx	r3
    d3f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d3f4:	437a      	muls	r2, r7
    d3f6:	4631      	mov	r1, r6
    d3f8:	480a      	ldr	r0, [pc, #40]	; (d424 <bt_mesh_attention+0x58>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
    d3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d3fe:	f00b bcc3 	b.w	18d88 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
    d402:	6984      	ldr	r4, [r0, #24]
    d404:	e7eb      	b.n	d3de <bt_mesh_attention+0x12>
		k_delayed_work_cancel(&srv->attn_timer);
    d406:	4630      	mov	r0, r6
    d408:	f00b fc72 	bl	18cf0 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
    d40c:	6863      	ldr	r3, [r4, #4]
    d40e:	b12b      	cbz	r3, d41c <bt_mesh_attention+0x50>
    d410:	695b      	ldr	r3, [r3, #20]
    d412:	b11b      	cbz	r3, d41c <bt_mesh_attention+0x50>
			srv->cb->attn_off(model);
    d414:	4628      	mov	r0, r5
}
    d416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
    d41a:	4718      	bx	r3
    d41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d420:	20001cec 	.word	0x20001cec
    d424:	20001dd8 	.word	0x20001dd8

0000d428 <net_buf_user_data>:
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    d428:	89c3      	ldrh	r3, [r0, #14]
    d42a:	4418      	add	r0, r3
    d42c:	3013      	adds	r0, #19
}
    d42e:	f020 0003 	bic.w	r0, r0, #3
    d432:	4770      	bx	lr

0000d434 <adv_alloc>:
} adv_pool[FRIEND_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id].adv;
}
    d434:	4b02      	ldr	r3, [pc, #8]	; (d440 <adv_alloc+0xc>)
    d436:	2218      	movs	r2, #24
    d438:	fb02 3000 	mla	r0, r2, r0, r3
    d43c:	4770      	bx	lr
    d43e:	bf00      	nop
    d440:	200008b0 	.word	0x200008b0

0000d444 <friend_purge_old_ack>:
	return 0;
}

static void friend_purge_old_ack(struct bt_mesh_friend *frnd, u64_t *seq_auth,
				 u16_t src)
{
    d444:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    d448:	6c84      	ldr	r4, [r0, #72]	; 0x48
    d44a:	4605      	mov	r5, r0
	sys_snode_t *cur, *prev = NULL;
    d44c:	2600      	movs	r6, #0

	BT_DBG("SeqAuth %llx src 0x%04x", *seq_auth, src);

	for (cur = sys_slist_peek_head(&frnd->queue);
    d44e:	b90c      	cbnz	r4, d454 <friend_purge_old_ack+0x10>

			net_buf_unref(buf);
			break;
		}
	}
}
    d450:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
		if (BT_MESH_ADV(buf)->addr == src &&
    d454:	4620      	mov	r0, r4
    d456:	f7ff ffe7 	bl	d428 <net_buf_user_data>
    d45a:	6800      	ldr	r0, [r0, #0]
    d45c:	8943      	ldrh	r3, [r0, #10]
    d45e:	4293      	cmp	r3, r2
    d460:	6823      	ldr	r3, [r4, #0]
    d462:	d11c      	bne.n	d49e <friend_purge_old_ack+0x5a>
    d464:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
    d468:	e9d1 ab00 	ldrd	sl, fp, [r1]
    d46c:	45d9      	cmp	r9, fp
    d46e:	bf08      	it	eq
    d470:	45d0      	cmpeq	r8, sl
    d472:	d114      	bne.n	d49e <friend_purge_old_ack+0x5a>
    d474:	6cea      	ldr	r2, [r5, #76]	; 0x4c
	if (!prev_node) {
    d476:	b96e      	cbnz	r6, d494 <friend_purge_old_ack+0x50>
		if (list->tail == node) {
    d478:	4294      	cmp	r4, r2
		list->head = node->next;
    d47a:	64ab      	str	r3, [r5, #72]	; 0x48
		if (list->tail == node) {
    d47c:	d100      	bne.n	d480 <friend_purge_old_ack+0x3c>
			list->tail = list->head;
    d47e:	64eb      	str	r3, [r5, #76]	; 0x4c
			frnd->queue_size--;
    d480:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    d482:	3b01      	subs	r3, #1
    d484:	652b      	str	r3, [r5, #80]	; 0x50
			buf->frags = NULL;
    d486:	2300      	movs	r3, #0
    d488:	6023      	str	r3, [r4, #0]
			net_buf_unref(buf);
    d48a:	4620      	mov	r0, r4
}
    d48c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
			net_buf_unref(buf);
    d490:	f00a bb58 	b.w	17b44 <net_buf_unref>
		if (list->tail == node) {
    d494:	4294      	cmp	r4, r2
		prev_node->next = node->next;
    d496:	6033      	str	r3, [r6, #0]
			list->tail = prev_node;
    d498:	bf08      	it	eq
    d49a:	64ee      	streq	r6, [r5, #76]	; 0x4c
    d49c:	e7f0      	b.n	d480 <friend_purge_old_ack+0x3c>
	     cur != NULL; prev = cur, cur = sys_slist_peek_next(cur)) {
    d49e:	4626      	mov	r6, r4
    d4a0:	461c      	mov	r4, r3
    d4a2:	e7d4      	b.n	d44e <friend_purge_old_ack+0xa>

0000d4a4 <friend_clear>:
{
    d4a4:	b538      	push	{r3, r4, r5, lr}
    d4a6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&frnd->timer);
    d4a8:	3014      	adds	r0, #20
    d4aa:	f00b fc21 	bl	18cf0 <k_delayed_work_cancel>
	friend_cred_del(frnd->net_idx, frnd->lpn);
    d4ae:	8821      	ldrh	r1, [r4, #0]
    d4b0:	89a0      	ldrh	r0, [r4, #12]
    d4b2:	f7fa ff53 	bl	835c <friend_cred_del>
	if (frnd->last) {
    d4b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    d4b8:	b17a      	cbz	r2, d4da <friend_clear+0x36>
		if (frnd->pending_buf) {
    d4ba:	78e3      	ldrb	r3, [r4, #3]
    d4bc:	06db      	lsls	r3, r3, #27
    d4be:	d507      	bpl.n	d4d0 <friend_clear+0x2c>
			BT_MESH_ADV(frnd->last)->busy = 0;
    d4c0:	4610      	mov	r0, r2
    d4c2:	f7ff ffb1 	bl	d428 <net_buf_user_data>
    d4c6:	6803      	ldr	r3, [r0, #0]
    d4c8:	7a19      	ldrb	r1, [r3, #8]
    d4ca:	f36f 0182 	bfc	r1, #2, #1
    d4ce:	7219      	strb	r1, [r3, #8]
		net_buf_unref(frnd->last);
    d4d0:	4610      	mov	r0, r2
    d4d2:	f00a fb37 	bl	17b44 <net_buf_unref>
		frnd->last = NULL;
    d4d6:	2300      	movs	r3, #0
    d4d8:	6463      	str	r3, [r4, #68]	; 0x44
		net_buf_unref(net_buf_slist_get(&frnd->queue));
    d4da:	f104 0548 	add.w	r5, r4, #72	; 0x48
	while (!sys_slist_is_empty(&frnd->queue)) {
    d4de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d4e0:	b9bb      	cbnz	r3, d512 <friend_clear+0x6e>
		while (!sys_slist_is_empty(&seg->queue)) {
    d4e2:	f104 053c 	add.w	r5, r4, #60	; 0x3c
    d4e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    d4e8:	b9c9      	cbnz	r1, d51e <friend_clear+0x7a>
	frnd->valid = 0;
    d4ea:	78e3      	ldrb	r3, [r4, #3]
	frnd->queue_size = 0;
    d4ec:	6521      	str	r1, [r4, #80]	; 0x50
	frnd->valid = 0;
    d4ee:	f361 1345 	bfi	r3, r1, #5, #1
	frnd->established = 0;
    d4f2:	f361 1386 	bfi	r3, r1, #6, #1
	frnd->pending_buf = 0;
    d4f6:	f361 1304 	bfi	r3, r1, #4, #1
	frnd->fsn = 0;
    d4fa:	f361 0300 	bfi	r3, r1, #0, #1
	frnd->pending_req = 0;
    d4fe:	f361 0382 	bfi	r3, r1, #2, #1
    d502:	70e3      	strb	r3, [r4, #3]
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
    d504:	f104 000e 	add.w	r0, r4, #14
    d508:	2206      	movs	r2, #6
}
    d50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(frnd->sub_list, 0, sizeof(frnd->sub_list));
    d50e:	f7f3 b8cf 	b.w	6b0 <memset>
		net_buf_unref(net_buf_slist_get(&frnd->queue));
    d512:	4628      	mov	r0, r5
    d514:	f00a fad7 	bl	17ac6 <net_buf_slist_get>
    d518:	f00a fb14 	bl	17b44 <net_buf_unref>
    d51c:	e7df      	b.n	d4de <friend_clear+0x3a>
			net_buf_unref(net_buf_slist_get(&seg->queue));
    d51e:	4628      	mov	r0, r5
    d520:	f00a fad1 	bl	17ac6 <net_buf_slist_get>
    d524:	f00a fb0e 	bl	17b44 <net_buf_unref>
    d528:	e7dd      	b.n	d4e6 <friend_clear+0x42>
	...

0000d52c <send_friend_clear>:
{
    d52c:	b530      	push	{r4, r5, lr}
    d52e:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    d530:	8982      	ldrh	r2, [r0, #12]
    d532:	f8ad 2014 	strh.w	r2, [sp, #20]
    d536:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d53a:	2500      	movs	r5, #0
    d53c:	f8ad 2016 	strh.w	r2, [sp, #22]
    d540:	f8b0 2058 	ldrh.w	r2, [r0, #88]	; 0x58
    d544:	9506      	str	r5, [sp, #24]
    d546:	f8ad 2018 	strh.w	r2, [sp, #24]
    d54a:	227f      	movs	r2, #127	; 0x7f
    d54c:	ab05      	add	r3, sp, #20
    d54e:	f88d 201b 	strb.w	r2, [sp, #27]
	struct bt_mesh_net_tx tx = {
    d552:	4a12      	ldr	r2, [pc, #72]	; (d59c <send_friend_clear+0x70>)
    d554:	9207      	str	r2, [sp, #28]
{
    d556:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
    d558:	9308      	str	r3, [sp, #32]
    d55a:	9509      	str	r5, [sp, #36]	; 0x24
		.src  = bt_mesh_primary_addr(),
    d55c:	f7fd fb52 	bl	ac04 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    d560:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    d564:	f7ff fad2 	bl	cb0c <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
    d568:	8822      	ldrh	r2, [r4, #0]
	struct bt_mesh_net_tx tx = {
    d56a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(frnd->lpn),
    d56e:	0213      	lsls	r3, r2, #8
    d570:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
    d574:	8922      	ldrh	r2, [r4, #8]
	struct bt_mesh_ctl_friend_clear req = {
    d576:	f8ad 3010 	strh.w	r3, [sp, #16]
		.lpn_counter = sys_cpu_to_be16(frnd->lpn_counter),
    d57a:	0213      	lsls	r3, r2, #8
    d57c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
    d580:	f8ad 3012 	strh.w	r3, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
    d584:	4b06      	ldr	r3, [pc, #24]	; (d5a0 <send_friend_clear+0x74>)
    d586:	9301      	str	r3, [sp, #4]
    d588:	9402      	str	r4, [sp, #8]
    d58a:	9500      	str	r5, [sp, #0]
    d58c:	2304      	movs	r3, #4
    d58e:	aa04      	add	r2, sp, #16
    d590:	2105      	movs	r1, #5
    d592:	a807      	add	r0, sp, #28
    d594:	f7fc f9a0 	bl	98d8 <bt_mesh_ctl_send>
}
    d598:	b00b      	add	sp, #44	; 0x2c
    d59a:	bd30      	pop	{r4, r5, pc}
    d59c:	2000631c 	.word	0x2000631c
    d5a0:	0001a290 	.word	0x0001a290

0000d5a4 <k_delayed_work_submit>:
    d5a4:	460a      	mov	r2, r1
    d5a6:	4601      	mov	r1, r0
    d5a8:	4801      	ldr	r0, [pc, #4]	; (d5b0 <k_delayed_work_submit+0xc>)
    d5aa:	f00b bbed 	b.w	18d88 <k_delayed_work_submit_to_queue>
    d5ae:	bf00      	nop
    d5b0:	20001dd8 	.word	0x20001dd8

0000d5b4 <friend_clear_sent>:
			      K_SECONDS(frnd->clear.repeat_sec));
    d5b4:	f8b1 305a 	ldrh.w	r3, [r1, #90]	; 0x5a
{
    d5b8:	b510      	push	{r4, lr}
    d5ba:	460c      	mov	r4, r1
	k_delayed_work_submit(&frnd->clear.timer,
    d5bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d5c0:	4359      	muls	r1, r3
    d5c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d5c6:	f7ff ffed 	bl	d5a4 <k_delayed_work_submit>
	frnd->clear.repeat_sec *= 2;
    d5ca:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    d5ce:	005b      	lsls	r3, r3, #1
    d5d0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    d5d4:	bd10      	pop	{r4, pc}
	...

0000d5d8 <create_friend_pdu>:
{
    d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5dc:	4681      	mov	r9, r0
    d5de:	b089      	sub	sp, #36	; 0x24
	sub = bt_mesh_subnet_get(frnd->net_idx);
    d5e0:	8980      	ldrh	r0, [r0, #12]
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
    d5e2:	f8df b158 	ldr.w	fp, [pc, #344]	; d73c <create_friend_pdu+0x164>
{
    d5e6:	460c      	mov	r4, r1
    d5e8:	4690      	mov	r8, r2
	sub = bt_mesh_subnet_get(frnd->net_idx);
    d5ea:	f7fa fd9d 	bl	8128 <bt_mesh_subnet_get>
	buf = friend_buf_alloc(info->src);
    d5ee:	f8b4 a000 	ldrh.w	sl, [r4]
	sub = bt_mesh_subnet_get(frnd->net_idx);
    d5f2:	4606      	mov	r6, r0
	u8_t xmit = bt_mesh_net_transmit_get();
    d5f4:	f7ff fa8a 	bl	cb0c <bt_mesh_net_transmit_get>
						   BT_MESH_TRANSMIT_INT(xmit),
    d5f8:	f3c0 03c7 	ubfx	r3, r0, #3, #8
    d5fc:	3301      	adds	r3, #1
		buf = bt_mesh_adv_create_from_pool(&friend_buf_pool, adv_alloc,
    d5fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d602:	005b      	lsls	r3, r3, #1
    d604:	b2db      	uxtb	r3, r3
    d606:	9303      	str	r3, [sp, #12]
    d608:	f000 0707 	and.w	r7, r0, #7
    d60c:	2300      	movs	r3, #0
    d60e:	9301      	str	r3, [sp, #4]
    d610:	9b03      	ldr	r3, [sp, #12]
    d612:	9300      	str	r3, [sp, #0]
    d614:	2201      	movs	r2, #1
    d616:	463b      	mov	r3, r7
    d618:	4946      	ldr	r1, [pc, #280]	; (d734 <create_friend_pdu+0x15c>)
    d61a:	4658      	mov	r0, fp
    d61c:	f7fa fa74 	bl	7b08 <bt_mesh_adv_create_from_pool>
		if (!buf) {
    d620:	4605      	mov	r5, r0
    d622:	bb10      	cbnz	r0, d66a <create_friend_pdu+0x92>
		if (bt_mesh.frnd[i].queue_size > frnd->queue_size) {
    d624:	4b44      	ldr	r3, [pc, #272]	; (d738 <create_friend_pdu+0x160>)
    d626:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    d62a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    d62c:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
    d630:	3324      	adds	r3, #36	; 0x24
    d632:	4291      	cmp	r1, r2
    d634:	bf98      	it	ls
    d636:	4618      	movls	r0, r3
	buf = net_buf_slist_get(&frnd->queue);
    d638:	3048      	adds	r0, #72	; 0x48
    d63a:	f00a fa44 	bl	17ac6 <net_buf_slist_get>
	net_buf_unref(buf);
    d63e:	f00a fa81 	bl	17b44 <net_buf_unref>
    d642:	e7e3      	b.n	d60c <create_friend_pdu+0x34>
		if (friend_cred_get(sub, frnd->lpn, &nid, &enc, &priv)) {
    d644:	ab07      	add	r3, sp, #28
    d646:	9300      	str	r3, [sp, #0]
    d648:	f8b9 1000 	ldrh.w	r1, [r9]
    d64c:	ab06      	add	r3, sp, #24
    d64e:	f10d 0217 	add.w	r2, sp, #23
    d652:	4630      	mov	r0, r6
    d654:	f7fa fea2 	bl	839c <friend_cred_get>
    d658:	b388      	cbz	r0, d6be <create_friend_pdu+0xe6>
	net_buf_unref(buf);
    d65a:	4628      	mov	r0, r5
    d65c:	f00a fa72 	bl	17b44 <net_buf_unref>
	return NULL;
    d660:	2500      	movs	r5, #0
}
    d662:	4628      	mov	r0, r5
    d664:	b009      	add	sp, #36	; 0x24
    d666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	BT_MESH_ADV(buf)->addr = src;
    d66a:	f7ff fedd 	bl	d428 <net_buf_user_data>
    d66e:	6803      	ldr	r3, [r0, #0]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
    d670:	4628      	mov	r0, r5
	BT_MESH_ADV(buf)->addr = src;
    d672:	f8a3 a00a 	strh.w	sl, [r3, #10]
	FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
    d676:	f7ff fed7 	bl	d428 <net_buf_user_data>
    d67a:	6803      	ldr	r3, [r0, #0]
    d67c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d684:	e9c3 0104 	strd	r0, r1, [r3, #16]
	if (info->ctl && TRANS_CTL_OP(sdu->data) == TRANS_CTL_OP_FRIEND_OFFER) {
    d688:	f994 3007 	ldrsb.w	r3, [r4, #7]
    d68c:	2b00      	cmp	r3, #0
    d68e:	dad9      	bge.n	d644 <create_friend_pdu+0x6c>
    d690:	f8d8 3000 	ldr.w	r3, [r8]
    d694:	781b      	ldrb	r3, [r3, #0]
    d696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d69a:	2b04      	cmp	r3, #4
    d69c:	d1d2      	bne.n	d644 <create_friend_pdu+0x6c>
		enc = sub->keys[sub->kr_flag].enc;
    d69e:	7fb2      	ldrb	r2, [r6, #30]
    d6a0:	2359      	movs	r3, #89	; 0x59
    d6a2:	4353      	muls	r3, r2
    d6a4:	f103 0241 	add.w	r2, r3, #65	; 0x41
    d6a8:	4432      	add	r2, r6
    d6aa:	9206      	str	r2, [sp, #24]
		priv = sub->keys[sub->kr_flag].privacy;
    d6ac:	f103 0269 	add.w	r2, r3, #105	; 0x69
    d6b0:	4432      	add	r2, r6
		nid = sub->keys[sub->kr_flag].nid;
    d6b2:	441e      	add	r6, r3
		priv = sub->keys[sub->kr_flag].privacy;
    d6b4:	9207      	str	r2, [sp, #28]
		nid = sub->keys[sub->kr_flag].nid;
    d6b6:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    d6ba:	f88d 3017 	strb.w	r3, [sp, #23]
	net_buf_add_u8(buf, (nid | (info->iv_index & 1) << 7));
    d6be:	68a3      	ldr	r3, [r4, #8]
    d6c0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    d6c4:	f105 0608 	add.w	r6, r5, #8
    d6c8:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    d6cc:	b2c9      	uxtb	r1, r1
    d6ce:	4630      	mov	r0, r6
    d6d0:	f00a fa67 	bl	17ba2 <net_buf_simple_add_u8>
	if (info->ctl) {
    d6d4:	f994 3007 	ldrsb.w	r3, [r4, #7]
    d6d8:	79e1      	ldrb	r1, [r4, #7]
    d6da:	2b00      	cmp	r3, #0
		net_buf_add_u8(buf, info->ttl | 0x80);
    d6dc:	bfb4      	ite	lt
    d6de:	f041 0180 	orrlt.w	r1, r1, #128	; 0x80
		net_buf_add_u8(buf, info->ttl);
    d6e2:	f001 017f 	andge.w	r1, r1, #127	; 0x7f
    d6e6:	4630      	mov	r0, r6
    d6e8:	f00a fa5b 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, info->seq, sizeof(info->seq));
    d6ec:	2203      	movs	r2, #3
    d6ee:	1d21      	adds	r1, r4, #4
    d6f0:	4630      	mov	r0, r6
    d6f2:	f00a fa4d 	bl	17b90 <net_buf_simple_add_mem>
	net_buf_add_be16(buf, info->src);
    d6f6:	8821      	ldrh	r1, [r4, #0]
    d6f8:	4630      	mov	r0, r6
    d6fa:	f00a fa69 	bl	17bd0 <net_buf_simple_add_be16>
	net_buf_add_be16(buf, info->dst);
    d6fe:	8861      	ldrh	r1, [r4, #2]
    d700:	4630      	mov	r0, r6
    d702:	f00a fa65 	bl	17bd0 <net_buf_simple_add_be16>
	net_buf_add_mem(buf, sdu->data, sdu->len);
    d706:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    d70a:	f8d8 1000 	ldr.w	r1, [r8]
    d70e:	4630      	mov	r0, r6
    d710:	f00a fa3e 	bl	17b90 <net_buf_simple_add_mem>
	if (bt_mesh_net_encrypt(enc, &buf->b, info->iv_index, false)) {
    d714:	2300      	movs	r3, #0
    d716:	68a2      	ldr	r2, [r4, #8]
    d718:	9806      	ldr	r0, [sp, #24]
    d71a:	4631      	mov	r1, r6
    d71c:	f7fc ffd6 	bl	a6cc <bt_mesh_net_encrypt>
    d720:	2800      	cmp	r0, #0
    d722:	d19a      	bne.n	d65a <create_friend_pdu+0x82>
	if (bt_mesh_net_obfuscate(buf->data, info->iv_index, priv)) {
    d724:	9a07      	ldr	r2, [sp, #28]
    d726:	68a1      	ldr	r1, [r4, #8]
    d728:	68a8      	ldr	r0, [r5, #8]
    d72a:	f7fc ffa7 	bl	a67c <bt_mesh_net_obfuscate>
    d72e:	2800      	cmp	r0, #0
    d730:	d097      	beq.n	d662 <create_friend_pdu+0x8a>
    d732:	e792      	b.n	d65a <create_friend_pdu+0x82>
    d734:	0000d435 	.word	0x0000d435
    d738:	20006168 	.word	0x20006168
    d73c:	20006c08 	.word	0x20006c08

0000d740 <encode_friend_ctl>:
{
    d740:	b530      	push	{r4, r5, lr}
    d742:	4604      	mov	r4, r0
    d744:	b085      	sub	sp, #20
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
    d746:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    d74a:	4610      	mov	r0, r2
{
    d74c:	4615      	mov	r5, r2
	net_buf_simple_push_u8(sdu, TRANS_CTL_HDR(ctl_op, 0));
    d74e:	f00a fa7b 	bl	17c48 <net_buf_simple_push_u8>
	info.src = bt_mesh_primary_addr();
    d752:	f7fd fa57 	bl	ac04 <bt_mesh_primary_addr>
	info.dst = frnd->lpn;
    d756:	8823      	ldrh	r3, [r4, #0]
    d758:	f8ad 3006 	strh.w	r3, [sp, #6]
	info.ctl = 1;
    d75c:	f89d 300b 	ldrb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
    d760:	4a11      	ldr	r2, [pc, #68]	; (d7a8 <encode_friend_ctl+0x68>)
	info.src = bt_mesh_primary_addr();
    d762:	f8ad 0004 	strh.w	r0, [sp, #4]
	info.ttl = 0;
    d766:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d76a:	f36f 0306 	bfc	r3, #0, #7
    d76e:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (bt_mesh.seq >> 16);
    d772:	6853      	ldr	r3, [r2, #4]
    d774:	f3c3 0117 	ubfx	r1, r3, #0, #24
    d778:	1408      	asrs	r0, r1, #16
    d77a:	f88d 0008 	strb.w	r0, [sp, #8]
	info.seq[1] = (bt_mesh.seq >> 8);
    d77e:	1208      	asrs	r0, r1, #8
    d780:	f88d 0009 	strb.w	r0, [sp, #9]
	info.seq[2] = bt_mesh.seq++;
    d784:	1c48      	adds	r0, r1, #1
    d786:	f360 0317 	bfi	r3, r0, #0, #24
    d78a:	6053      	str	r3, [r2, #4]
    d78c:	f88d 100a 	strb.w	r1, [sp, #10]
	info.iv_index = BT_MESH_NET_IVI_TX;
    d790:	6811      	ldr	r1, [r2, #0]
    d792:	f3c3 6300 	ubfx	r3, r3, #24, #1
    d796:	1acb      	subs	r3, r1, r3
	return create_friend_pdu(frnd, &info, sdu);
    d798:	462a      	mov	r2, r5
    d79a:	a901      	add	r1, sp, #4
    d79c:	4620      	mov	r0, r4
	info.iv_index = BT_MESH_NET_IVI_TX;
    d79e:	9303      	str	r3, [sp, #12]
	return create_friend_pdu(frnd, &info, sdu);
    d7a0:	f7ff ff1a 	bl	d5d8 <create_friend_pdu>
}
    d7a4:	b005      	add	sp, #20
    d7a6:	bd30      	pop	{r4, r5, pc}
    d7a8:	20006168 	.word	0x20006168

0000d7ac <enqueue_sub_cfm>:
{
    d7ac:	b530      	push	{r4, r5, lr}
    d7ae:	b085      	sub	sp, #20
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
    d7b0:	2300      	movs	r3, #0
    d7b2:	9302      	str	r3, [sp, #8]
    d7b4:	9303      	str	r3, [sp, #12]
    d7b6:	2302      	movs	r3, #2
{
    d7b8:	460d      	mov	r5, r1
    d7ba:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*cfm));
    d7bc:	f8ad 300a 	strh.w	r3, [sp, #10]
	cfm = net_buf_simple_add(sdu, sizeof(*cfm));
    d7c0:	2101      	movs	r1, #1
	buf->data = buf->__buf + reserve_head;
    d7c2:	f10d 030d 	add.w	r3, sp, #13
    d7c6:	a801      	add	r0, sp, #4
    d7c8:	9301      	str	r3, [sp, #4]
    d7ca:	f00a f9db 	bl	17b84 <net_buf_simple_add>
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
    d7ce:	aa01      	add	r2, sp, #4
	cfm->xact = xact;
    d7d0:	7005      	strb	r5, [r0, #0]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_SUB_CFM, sdu);
    d7d2:	2109      	movs	r1, #9
    d7d4:	4620      	mov	r0, r4
    d7d6:	f7ff ffb3 	bl	d740 <encode_friend_ctl>
	if (!buf) {
    d7da:	4605      	mov	r5, r0
    d7dc:	b140      	cbz	r0, d7f0 <enqueue_sub_cfm+0x44>
	if (frnd->last) {
    d7de:	6c60      	ldr	r0, [r4, #68]	; 0x44
    d7e0:	b108      	cbz	r0, d7e6 <enqueue_sub_cfm+0x3a>
		net_buf_unref(frnd->last);
    d7e2:	f00a f9af 	bl	17b44 <net_buf_unref>
	frnd->send_last = 1;
    d7e6:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
    d7e8:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
    d7ea:	f043 0302 	orr.w	r3, r3, #2
    d7ee:	70e3      	strb	r3, [r4, #3]
}
    d7f0:	b005      	add	sp, #20
    d7f2:	bd30      	pop	{r4, r5, pc}

0000d7f4 <clear_timeout>:
{
    d7f4:	b510      	push	{r4, lr}
    d7f6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    d7f8:	f00a ffae 	bl	18758 <_impl_k_uptime_get_32>
	duration = k_uptime_get_32() - frnd->clear.start;
    d7fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d800:	1ac0      	subs	r0, r0, r3
	if (duration > 2 * frnd->poll_to) {
    d802:	f854 3c58 	ldr.w	r3, [r4, #-88]
    d806:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
    d80a:	d903      	bls.n	d814 <clear_timeout+0x20>
		frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
    d80c:	2300      	movs	r3, #0
    d80e:	f824 3c04 	strh.w	r3, [r4, #-4]
		return;
    d812:	bd10      	pop	{r4, pc}
	send_friend_clear(frnd);
    d814:	f1a4 005c 	sub.w	r0, r4, #92	; 0x5c
}
    d818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_friend_clear(frnd);
    d81c:	f7ff be86 	b.w	d52c <send_friend_clear>

0000d820 <friend_timeout>:
{
    d820:	b538      	push	{r3, r4, r5, lr}
	if (frnd->send_last && frnd->last) {
    d822:	f810 3c11 	ldrb.w	r3, [r0, #-17]
    d826:	079a      	lsls	r2, r3, #30
{
    d828:	4604      	mov	r4, r0
	struct bt_mesh_friend *frnd = CONTAINER_OF(work, struct bt_mesh_friend,
    d82a:	f1a0 0514 	sub.w	r5, r0, #20
	if (frnd->send_last && frnd->last) {
    d82e:	d514      	bpl.n	d85a <friend_timeout+0x3a>
    d830:	6b02      	ldr	r2, [r0, #48]	; 0x30
    d832:	b192      	cbz	r2, d85a <friend_timeout+0x3a>
		frnd->send_last = 0;
    d834:	f36f 0341 	bfc	r3, #1, #1
    d838:	f800 3c11 	strb.w	r3, [r0, #-17]
	frnd->pending_req = 0;
    d83c:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
    d840:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d842:	4910      	ldr	r1, [pc, #64]	; (d884 <friend_timeout+0x64>)
	frnd->pending_buf = 1;
    d844:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d848:	f043 0310 	orr.w	r3, r3, #16
    d84c:	f804 3c11 	strb.w	r3, [r4, #-17]
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
    d850:	462a      	mov	r2, r5
}
    d852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_mesh_adv_send(frnd->last, &buf_sent_cb, frnd);
    d856:	f7fa b98d 	b.w	7b74 <bt_mesh_adv_send>
	if (frnd->established && !frnd->pending_req) {
    d85a:	f003 0344 	and.w	r3, r3, #68	; 0x44
    d85e:	2b40      	cmp	r3, #64	; 0x40
    d860:	d104      	bne.n	d86c <friend_timeout+0x4c>
		friend_clear(frnd);
    d862:	4628      	mov	r0, r5
}
    d864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		friend_clear(frnd);
    d868:	f7ff be1c 	b.w	d4a4 <friend_clear>
	frnd->last = net_buf_slist_get(&frnd->queue);
    d86c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    d870:	f00a f929 	bl	17ac6 <net_buf_slist_get>
    d874:	6320      	str	r0, [r4, #48]	; 0x30
	if (!frnd->last) {
    d876:	2800      	cmp	r0, #0
    d878:	d0f3      	beq.n	d862 <friend_timeout+0x42>
	frnd->queue_size--;
    d87a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d87c:	3b01      	subs	r3, #1
    d87e:	63e3      	str	r3, [r4, #60]	; 0x3c
    d880:	e7dc      	b.n	d83c <friend_timeout+0x1c>
    d882:	bf00      	nop
    d884:	0001a288 	.word	0x0001a288

0000d888 <friend_lpn_matches>:
static bool friend_lpn_matches(struct bt_mesh_friend *frnd, u16_t net_idx,
			       u16_t addr)
{
	int i;

	if (!frnd->established) {
    d888:	78c3      	ldrb	r3, [r0, #3]
    d88a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    d88e:	d012      	beq.n	d8b6 <friend_lpn_matches+0x2e>
		return false;
	}

	if (net_idx != frnd->net_idx) {
    d890:	8983      	ldrh	r3, [r0, #12]
    d892:	428b      	cmp	r3, r1
    d894:	d10f      	bne.n	d8b6 <friend_lpn_matches+0x2e>
		return false;
	}

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    d896:	b213      	sxth	r3, r2
    d898:	2b00      	cmp	r3, #0
    d89a:	dc0a      	bgt.n	d8b2 <friend_lpn_matches+0x2a>

		return false;
	}

	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
		if (frnd->sub_list[i] == addr) {
    d89c:	89c3      	ldrh	r3, [r0, #14]
    d89e:	4293      	cmp	r3, r2
    d8a0:	d00b      	beq.n	d8ba <friend_lpn_matches+0x32>
    d8a2:	8a03      	ldrh	r3, [r0, #16]
    d8a4:	4293      	cmp	r3, r2
    d8a6:	d008      	beq.n	d8ba <friend_lpn_matches+0x32>
    d8a8:	8a40      	ldrh	r0, [r0, #18]
		if (addr == frnd->lpn) {
    d8aa:	1a83      	subs	r3, r0, r2
    d8ac:	4258      	negs	r0, r3
    d8ae:	4158      	adcs	r0, r3
    d8b0:	4770      	bx	lr
    d8b2:	8800      	ldrh	r0, [r0, #0]
    d8b4:	e7f9      	b.n	d8aa <friend_lpn_matches+0x22>
		return false;
    d8b6:	2000      	movs	r0, #0
    d8b8:	4770      	bx	lr
			return true;
    d8ba:	2001      	movs	r0, #1
		}
	}

	return false;
}
    d8bc:	4770      	bx	lr

0000d8be <buf_send_start>:
{
    d8be:	b538      	push	{r3, r4, r5, lr}
	frnd->pending_buf = 0;
    d8c0:	78d3      	ldrb	r3, [r2, #3]
    d8c2:	f36f 1304 	bfc	r3, #4, #1
	if (!frnd->established) {
    d8c6:	f013 0440 	ands.w	r4, r3, #64	; 0x40
{
    d8ca:	4615      	mov	r5, r2
	frnd->pending_buf = 0;
    d8cc:	70d3      	strb	r3, [r2, #3]
	if (!frnd->established) {
    d8ce:	d103      	bne.n	d8d8 <buf_send_start+0x1a>
		net_buf_unref(frnd->last);
    d8d0:	6c50      	ldr	r0, [r2, #68]	; 0x44
    d8d2:	f00a f937 	bl	17b44 <net_buf_unref>
		frnd->last = NULL;
    d8d6:	646c      	str	r4, [r5, #68]	; 0x44
    d8d8:	bd38      	pop	{r3, r4, r5, pc}

0000d8da <buf_send_end>:
	if (frnd->pending_req) {
    d8da:	78cb      	ldrb	r3, [r1, #3]
    d8dc:	075a      	lsls	r2, r3, #29
    d8de:	d409      	bmi.n	d8f4 <buf_send_end+0x1a>
	if (frnd->established) {
    d8e0:	f013 0f40 	tst.w	r3, #64	; 0x40
    d8e4:	f101 0014 	add.w	r0, r1, #20
		k_delayed_work_submit(&frnd->timer, frnd->poll_to);
    d8e8:	bf14      	ite	ne
    d8ea:	6849      	ldrne	r1, [r1, #4]
		k_delayed_work_submit(&frnd->timer, K_SECONDS(1));
    d8ec:	f44f 717a 	moveq.w	r1, #1000	; 0x3e8
    d8f0:	f7ff be58 	b.w	d5a4 <k_delayed_work_submit>
    d8f4:	4770      	bx	lr
	...

0000d8f8 <enqueue_update>:
{
    d8f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d8fc:	4604      	mov	r4, r0
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
    d8fe:	2210      	movs	r2, #16
{
    d900:	460f      	mov	r7, r1
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
    d902:	4668      	mov	r0, sp
    d904:	2100      	movs	r1, #0
    d906:	f7f2 fed3 	bl	6b0 <memset>
    d90a:	2307      	movs	r3, #7
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
    d90c:	89a0      	ldrh	r0, [r4, #12]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*upd));
    d90e:	f8ad 3006 	strh.w	r3, [sp, #6]
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
    d912:	f7fa fc09 	bl	8128 <bt_mesh_subnet_get>
	buf->len = 0;
    d916:	2600      	movs	r6, #0
	buf->data = buf->__buf + reserve_head;
    d918:	f10d 0309 	add.w	r3, sp, #9
	upd = net_buf_simple_add(sdu, sizeof(*upd));
    d91c:	2106      	movs	r1, #6
	struct bt_mesh_subnet *sub = bt_mesh_subnet_get(frnd->net_idx);
    d91e:	4680      	mov	r8, r0
	upd = net_buf_simple_add(sdu, sizeof(*upd));
    d920:	4668      	mov	r0, sp
    d922:	9300      	str	r3, [sp, #0]
	buf->len = 0;
    d924:	f8ad 6004 	strh.w	r6, [sp, #4]
    d928:	f00a f92c 	bl	17b84 <net_buf_simple_add>
    d92c:	4605      	mov	r5, r0
	upd->flags = bt_mesh_net_flags(sub);
    d92e:	4640      	mov	r0, r8
    d930:	f7fa fd70 	bl	8414 <bt_mesh_net_flags>
    d934:	4b0d      	ldr	r3, [pc, #52]	; (d96c <enqueue_update+0x74>)
    d936:	7028      	strb	r0, [r5, #0]
    d938:	681b      	ldr	r3, [r3, #0]
	upd->md = md;
    d93a:	716f      	strb	r7, [r5, #5]
    d93c:	ba1b      	rev	r3, r3
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
    d93e:	2102      	movs	r1, #2
	upd->iv_index = sys_cpu_to_be32(bt_mesh.iv_index);
    d940:	f8c5 3001 	str.w	r3, [r5, #1]
	return encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_UPDATE, sdu);
    d944:	466a      	mov	r2, sp
    d946:	4620      	mov	r0, r4
    d948:	f7ff fefa 	bl	d740 <encode_friend_ctl>
	if (!buf) {
    d94c:	4601      	mov	r1, r0
    d94e:	b150      	cbz	r0, d966 <enqueue_update+0x6e>
	frnd->sec_update = 0;
    d950:	78e3      	ldrb	r3, [r4, #3]
    d952:	f366 03c3 	bfi	r3, r6, #3, #1
    d956:	70e3      	strb	r3, [r4, #3]
	net_buf_slist_put(&frnd->queue, buf);
    d958:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d95c:	f00a f89a 	bl	17a94 <net_buf_slist_put>
	frnd->queue_size++;
    d960:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d962:	3301      	adds	r3, #1
    d964:	6523      	str	r3, [r4, #80]	; 0x50
}
    d966:	b004      	add	sp, #16
    d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d96c:	20006168 	.word	0x20006168

0000d970 <enqueue_friend_pdu>:
{
    d970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d974:	4604      	mov	r4, r0
    d976:	4615      	mov	r5, r2
	if (type == BT_MESH_FRIEND_PDU_SINGLE) {
    d978:	460e      	mov	r6, r1
    d97a:	b979      	cbnz	r1, d99c <enqueue_friend_pdu+0x2c>
		if (frnd->sec_update) {
    d97c:	78c3      	ldrb	r3, [r0, #3]
    d97e:	071a      	lsls	r2, r3, #28
    d980:	d502      	bpl.n	d988 <enqueue_friend_pdu+0x18>
			enqueue_update(frnd, 1);
    d982:	2101      	movs	r1, #1
    d984:	f7ff ffb8 	bl	d8f8 <enqueue_update>
	net_buf_slist_put(&frnd->queue, buf);
    d988:	4629      	mov	r1, r5
    d98a:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d98e:	f00a f881 	bl	17a94 <net_buf_slist_put>
	frnd->queue_size++;
    d992:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d994:	3301      	adds	r3, #1
    d996:	6523      	str	r3, [r4, #80]	; 0x50
    d998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	adv = FRIEND_ADV(buf);
    d99c:	4610      	mov	r0, r2
    d99e:	f7ff fd43 	bl	d428 <net_buf_user_data>
    d9a2:	6801      	ldr	r1, [r0, #0]
    d9a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	seg = get_seg(frnd, BT_MESH_ADV(buf)->addr, &adv->seq_auth);
    d9a6:	894f      	ldrh	r7, [r1, #10]
		struct bt_mesh_friend_seg *seg = &frnd->seg[i];
    d9a8:	f104 023c 	add.w	r2, r4, #60	; 0x3c
		if (buf && BT_MESH_ADV(buf)->addr == src &&
    d9ac:	b358      	cbz	r0, da06 <enqueue_friend_pdu+0x96>
    d9ae:	f7ff fd3b 	bl	d428 <net_buf_user_data>
    d9b2:	6803      	ldr	r3, [r0, #0]
    d9b4:	8958      	ldrh	r0, [r3, #10]
    d9b6:	42b8      	cmp	r0, r7
    d9b8:	d127      	bne.n	da0a <enqueue_friend_pdu+0x9a>
    d9ba:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    d9be:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    d9c2:	4589      	cmp	r9, r1
    d9c4:	bf08      	it	eq
    d9c6:	4580      	cmpeq	r8, r0
    d9c8:	d11f      	bne.n	da0a <enqueue_friend_pdu+0x9a>
	net_buf_slist_put(&seg->queue, buf);
    d9ca:	4629      	mov	r1, r5
    d9cc:	4610      	mov	r0, r2
    d9ce:	f00a f861 	bl	17a94 <net_buf_slist_put>
	if (type == BT_MESH_FRIEND_PDU_COMPLETE) {
    d9d2:	2e02      	cmp	r6, #2
    d9d4:	d115      	bne.n	da02 <enqueue_friend_pdu+0x92>
		if (frnd->sec_update) {
    d9d6:	78e3      	ldrb	r3, [r4, #3]
    d9d8:	071b      	lsls	r3, r3, #28
    d9da:	d503      	bpl.n	d9e4 <enqueue_friend_pdu+0x74>
			enqueue_update(frnd, 1);
    d9dc:	2101      	movs	r1, #1
    d9de:	4620      	mov	r0, r4
    d9e0:	f7ff ff8a 	bl	d8f8 <enqueue_update>
    d9e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
    d9e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
{
    d9ea:	460a      	mov	r2, r1
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
    d9ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
		SYS_SLIST_FOR_EACH_CONTAINER(&seg->queue, buf, node) {
    d9f0:	b982      	cbnz	r2, da14 <enqueue_friend_pdu+0xa4>
	if (!list->tail) {
    d9f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				    list_to_append->tail);
    d9f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
	if (!list->tail) {
    d9f6:	b9c2      	cbnz	r2, da2a <enqueue_friend_pdu+0xba>
		list->head = (sys_snode_t *)head;
    d9f8:	64a1      	str	r1, [r4, #72]	; 0x48
		list->tail = (sys_snode_t *)tail;
    d9fa:	64e3      	str	r3, [r4, #76]	; 0x4c
	list->head = NULL;
    d9fc:	2300      	movs	r3, #0
    d9fe:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    da00:	6423      	str	r3, [r4, #64]	; 0x40
    da02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!seg) {
    da06:	2a00      	cmp	r2, #0
    da08:	d1df      	bne.n	d9ca <enqueue_friend_pdu+0x5a>
		net_buf_unref(buf);
    da0a:	4628      	mov	r0, r5
}
    da0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		net_buf_unref(buf);
    da10:	f00a b898 	b.w	17b44 <net_buf_unref>
			FRIEND_ADV(buf)->seq_auth = TRANS_SEQ_AUTH_NVAL;
    da14:	4610      	mov	r0, r2
    da16:	f7ff fd07 	bl	d428 <net_buf_user_data>
    da1a:	6803      	ldr	r3, [r0, #0]
	return node->next;
    da1c:	6812      	ldr	r2, [r2, #0]
    da1e:	e9c3 6704 	strd	r6, r7, [r3, #16]
			frnd->queue_size++;
    da22:	6d23      	ldr	r3, [r4, #80]	; 0x50
    da24:	3301      	adds	r3, #1
    da26:	6523      	str	r3, [r4, #80]	; 0x50
    da28:	e7e2      	b.n	d9f0 <enqueue_friend_pdu+0x80>
		list->tail->next = (sys_snode_t *)head;
    da2a:	6011      	str	r1, [r2, #0]
    da2c:	e7e5      	b.n	d9fa <enqueue_friend_pdu+0x8a>
	...

0000da30 <bt_mesh_friend_find>:
{
    da30:	b5f0      	push	{r4, r5, r6, r7, lr}
    da32:	4d16      	ldr	r5, [pc, #88]	; (da8c <bt_mesh_friend_find+0x5c>)
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    da34:	2400      	movs	r4, #0
    da36:	462e      	mov	r6, r5
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
    da38:	f64f 7eff 	movw	lr, #65535	; 0xffff
		if (established && !frnd->established) {
    da3c:	2784      	movs	r7, #132	; 0x84
		if (valid && !frnd->valid) {
    da3e:	b132      	cbz	r2, da4e <bt_mesh_friend_find+0x1e>
    da40:	fb07 6c04 	mla	ip, r7, r4, r6
    da44:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
    da48:	f01c 0f20 	tst.w	ip, #32
    da4c:	d016      	beq.n	da7c <bt_mesh_friend_find+0x4c>
		if (established && !frnd->established) {
    da4e:	b133      	cbz	r3, da5e <bt_mesh_friend_find+0x2e>
    da50:	fb07 6c04 	mla	ip, r7, r4, r6
    da54:	f89c c027 	ldrb.w	ip, [ip, #39]	; 0x27
    da58:	f01c 0f40 	tst.w	ip, #64	; 0x40
    da5c:	d00e      	beq.n	da7c <bt_mesh_friend_find+0x4c>
		if (net_idx != BT_MESH_KEY_ANY && frnd->net_idx != net_idx) {
    da5e:	4570      	cmp	r0, lr
    da60:	d003      	beq.n	da6a <bt_mesh_friend_find+0x3a>
    da62:	f8b5 c030 	ldrh.w	ip, [r5, #48]	; 0x30
    da66:	4584      	cmp	ip, r0
    da68:	d108      	bne.n	da7c <bt_mesh_friend_find+0x4c>
		if (frnd->lpn == lpn_addr) {
    da6a:	f8b5 c024 	ldrh.w	ip, [r5, #36]	; 0x24
    da6e:	458c      	cmp	ip, r1
    da70:	d104      	bne.n	da7c <bt_mesh_friend_find+0x4c>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    da72:	2084      	movs	r0, #132	; 0x84
    da74:	fb00 6004 	mla	r0, r0, r4, r6
    da78:	3024      	adds	r0, #36	; 0x24
    da7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    da7c:	3401      	adds	r4, #1
    da7e:	2c02      	cmp	r4, #2
    da80:	f105 0584 	add.w	r5, r5, #132	; 0x84
    da84:	d1db      	bne.n	da3e <bt_mesh_friend_find+0xe>
	return NULL;
    da86:	2000      	movs	r0, #0
}
    da88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da8a:	bf00      	nop
    da8c:	20006168 	.word	0x20006168

0000da90 <bt_mesh_friend_clear_net_idx>:
{
    da90:	b538      	push	{r3, r4, r5, lr}
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
    da92:	4d0f      	ldr	r5, [pc, #60]	; (dad0 <bt_mesh_friend_clear_net_idx+0x40>)
    da94:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
    da96:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da9a:	428a      	cmp	r2, r1
{
    da9c:	4604      	mov	r4, r0
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
    da9e:	d004      	beq.n	daaa <bt_mesh_friend_clear_net_idx+0x1a>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    daa0:	4288      	cmp	r0, r1
    daa2:	d10f      	bne.n	dac4 <bt_mesh_friend_clear_net_idx+0x34>
			friend_clear(frnd);
    daa4:	480b      	ldr	r0, [pc, #44]	; (dad4 <bt_mesh_friend_clear_net_idx+0x44>)
    daa6:	f7ff fcfd 	bl	d4a4 <friend_clear>
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
    daaa:	f8b5 30b4 	ldrh.w	r3, [r5, #180]	; 0xb4
    daae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dab2:	4293      	cmp	r3, r2
    dab4:	d00b      	beq.n	dace <bt_mesh_friend_clear_net_idx+0x3e>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    dab6:	4294      	cmp	r4, r2
    dab8:	d107      	bne.n	daca <bt_mesh_friend_clear_net_idx+0x3a>
			friend_clear(frnd);
    daba:	4807      	ldr	r0, [pc, #28]	; (dad8 <bt_mesh_friend_clear_net_idx+0x48>)
}
    dabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			friend_clear(frnd);
    dac0:	f7ff bcf0 	b.w	d4a4 <friend_clear>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    dac4:	4290      	cmp	r0, r2
    dac6:	d1f0      	bne.n	daaa <bt_mesh_friend_clear_net_idx+0x1a>
    dac8:	e7ec      	b.n	daa4 <bt_mesh_friend_clear_net_idx+0x14>
    daca:	429c      	cmp	r4, r3
    dacc:	d0f5      	beq.n	daba <bt_mesh_friend_clear_net_idx+0x2a>
    dace:	bd38      	pop	{r3, r4, r5, pc}
    dad0:	20006168 	.word	0x20006168
    dad4:	2000618c 	.word	0x2000618c
    dad8:	20006210 	.word	0x20006210

0000dadc <bt_mesh_friend_sec_update>:
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
    dadc:	4b11      	ldr	r3, [pc, #68]	; (db24 <bt_mesh_friend_sec_update+0x48>)
    dade:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    dae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dae4:	428a      	cmp	r2, r1
    dae6:	d007      	beq.n	daf8 <bt_mesh_friend_sec_update+0x1c>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    dae8:	4288      	cmp	r0, r1
    daea:	d114      	bne.n	db16 <bt_mesh_friend_sec_update+0x3a>
			frnd->sec_update = 1;
    daec:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    daf0:	f042 0208 	orr.w	r2, r2, #8
    daf4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		if (frnd->net_idx == BT_MESH_KEY_UNUSED) {
    daf8:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
    dafc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db00:	428a      	cmp	r2, r1
    db02:	d00d      	beq.n	db20 <bt_mesh_friend_sec_update+0x44>
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    db04:	4288      	cmp	r0, r1
    db06:	d109      	bne.n	db1c <bt_mesh_friend_sec_update+0x40>
			frnd->sec_update = 1;
    db08:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    db0c:	f042 0208 	orr.w	r2, r2, #8
    db10:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
    db14:	4770      	bx	lr
		if (net_idx == BT_MESH_KEY_ANY || frnd->net_idx == net_idx) {
    db16:	4290      	cmp	r0, r2
    db18:	d1ee      	bne.n	daf8 <bt_mesh_friend_sec_update+0x1c>
    db1a:	e7e7      	b.n	daec <bt_mesh_friend_sec_update+0x10>
    db1c:	4290      	cmp	r0, r2
    db1e:	d0f3      	beq.n	db08 <bt_mesh_friend_sec_update+0x2c>
    db20:	4770      	bx	lr
    db22:	bf00      	nop
    db24:	20006168 	.word	0x20006168

0000db28 <bt_mesh_friend_clear>:
{
    db28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_net_tx tx = {
    db2c:	4603      	mov	r3, r0
{
    db2e:	b088      	sub	sp, #32
	struct bt_mesh_net_tx tx = {
    db30:	f853 2b04 	ldr.w	r2, [r3], #4
    db34:	9306      	str	r3, [sp, #24]
    db36:	2400      	movs	r4, #0
{
    db38:	460f      	mov	r7, r1
	struct bt_mesh_ctl_friend_clear *msg = (void *)buf->data;
    db3a:	680d      	ldr	r5, [r1, #0]
	struct bt_mesh_net_tx tx = {
    db3c:	9205      	str	r2, [sp, #20]
{
    db3e:	4606      	mov	r6, r0
	struct bt_mesh_net_tx tx = {
    db40:	9407      	str	r4, [sp, #28]
		.src  = bt_mesh_primary_addr(),
    db42:	f7fd f85f 	bl	ac04 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    db46:	f8ad 001c 	strh.w	r0, [sp, #28]
		.xmit = bt_mesh_net_transmit_get(),
    db4a:	f7fe ffdf 	bl	cb0c <bt_mesh_net_transmit_get>
	if (buf->len < sizeof(*msg)) {
    db4e:	88bb      	ldrh	r3, [r7, #4]
	struct bt_mesh_net_tx tx = {
    db50:	f88d 001e 	strb.w	r0, [sp, #30]
	if (buf->len < sizeof(*msg)) {
    db54:	2b03      	cmp	r3, #3
    db56:	d92c      	bls.n	dbb2 <bt_mesh_friend_clear+0x8a>
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
    db58:	f8b5 8000 	ldrh.w	r8, [r5]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
    db5c:	6830      	ldr	r0, [r6, #0]
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    db5e:	886f      	ldrh	r7, [r5, #2]
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
    db60:	8b80      	ldrh	r0, [r0, #28]
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
    db62:	ea4f 2108 	mov.w	r1, r8, lsl #8
    db66:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
	frnd = bt_mesh_friend_find(rx->sub->net_idx, lpn_addr, false, false);
    db6a:	4623      	mov	r3, r4
    db6c:	4622      	mov	r2, r4
    db6e:	b289      	uxth	r1, r1
    db70:	f7ff ff5e 	bl	da30 <bt_mesh_friend_find>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    db74:	023d      	lsls	r5, r7, #8
    db76:	ea45 2517 	orr.w	r5, r5, r7, lsr #8
    db7a:	b2ad      	uxth	r5, r5
	if (!frnd) {
    db7c:	4606      	mov	r6, r0
    db7e:	b1e8      	cbz	r0, dbbc <bt_mesh_friend_clear+0x94>
	if (lpn_counter - frnd->lpn_counter > 255) {
    db80:	8903      	ldrh	r3, [r0, #8]
    db82:	1aed      	subs	r5, r5, r3
    db84:	2dff      	cmp	r5, #255	; 0xff
    db86:	dc12      	bgt.n	dbae <bt_mesh_friend_clear+0x86>
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
    db88:	9b06      	ldr	r3, [sp, #24]
	cfm.lpn_addr    = msg->lpn_addr;
    db8a:	f8ad 8010 	strh.w	r8, [sp, #16]
	tx.ctx->send_ttl = BT_MESH_TTL_MAX;
    db8e:	227f      	movs	r2, #127	; 0x7f
    db90:	71da      	strb	r2, [r3, #7]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
    db92:	2106      	movs	r1, #6
    db94:	9402      	str	r4, [sp, #8]
    db96:	9401      	str	r4, [sp, #4]
    db98:	9400      	str	r4, [sp, #0]
    db9a:	2304      	movs	r3, #4
    db9c:	aa04      	add	r2, sp, #16
    db9e:	a805      	add	r0, sp, #20
	cfm.lpn_counter = msg->lpn_counter;
    dba0:	f8ad 7012 	strh.w	r7, [sp, #18]
	bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR_CFM, &cfm,
    dba4:	f7fb fe98 	bl	98d8 <bt_mesh_ctl_send>
	friend_clear(frnd);
    dba8:	4630      	mov	r0, r6
    dbaa:	f7ff fc7b 	bl	d4a4 <friend_clear>
		return 0;
    dbae:	4620      	mov	r0, r4
    dbb0:	e001      	b.n	dbb6 <bt_mesh_friend_clear+0x8e>
		return -EINVAL;
    dbb2:	f06f 0015 	mvn.w	r0, #21
}
    dbb6:	b008      	add	sp, #32
    dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbbc:	e7fb      	b.n	dbb6 <bt_mesh_friend_clear+0x8e>

0000dbbe <bt_mesh_friend_sub_add>:
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
    dbbe:	888b      	ldrh	r3, [r1, #4]
    dbc0:	2b02      	cmp	r3, #2
{
    dbc2:	b570      	push	{r4, r5, r6, lr}
    dbc4:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
    dbc6:	d931      	bls.n	dc2c <bt_mesh_friend_sub_add+0x6e>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
    dbc8:	6804      	ldr	r4, [r0, #0]
    dbca:	8901      	ldrh	r1, [r0, #8]
    dbcc:	8ba0      	ldrh	r0, [r4, #28]
    dbce:	2301      	movs	r3, #1
    dbd0:	461a      	mov	r2, r3
    dbd2:	f7ff ff2d 	bl	da30 <bt_mesh_friend_find>
	if (!frnd) {
    dbd6:	4604      	mov	r4, r0
    dbd8:	b1a8      	cbz	r0, dc06 <bt_mesh_friend_sub_add+0x48>
	if (frnd->pending_buf) {
    dbda:	78c3      	ldrb	r3, [r0, #3]
    dbdc:	06da      	lsls	r2, r3, #27
    dbde:	d412      	bmi.n	dc06 <bt_mesh_friend_sub_add+0x48>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
    dbe0:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
    dbe2:	f043 0304 	orr.w	r3, r3, #4
    dbe6:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
    dbe8:	3133      	adds	r1, #51	; 0x33
    dbea:	3014      	adds	r0, #20
    dbec:	f7ff fcda 	bl	d5a4 <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
    dbf0:	4628      	mov	r0, r5
    dbf2:	f00a f83a 	bl	17c6a <net_buf_simple_pull_u8>
    dbf6:	4606      	mov	r6, r0
	while (buf->len >= 2) {
    dbf8:	88ab      	ldrh	r3, [r5, #4]
    dbfa:	2b01      	cmp	r3, #1
    dbfc:	d805      	bhi.n	dc0a <bt_mesh_friend_sub_add+0x4c>
	enqueue_sub_cfm(frnd, xact);
    dbfe:	4631      	mov	r1, r6
    dc00:	4620      	mov	r0, r4
    dc02:	f7ff fdd3 	bl	d7ac <enqueue_sub_cfm>
		return 0;
    dc06:	2000      	movs	r0, #0
}
    dc08:	bd70      	pop	{r4, r5, r6, pc}
		friend_sub_add(frnd, net_buf_simple_pull_be16(buf));
    dc0a:	4628      	mov	r0, r5
    dc0c:	f00a f83d 	bl	17c8a <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == BT_MESH_ADDR_UNASSIGNED) {
    dc10:	89e3      	ldrh	r3, [r4, #14]
    dc12:	b12b      	cbz	r3, dc20 <bt_mesh_friend_sub_add+0x62>
    dc14:	8a23      	ldrh	r3, [r4, #16]
    dc16:	b13b      	cbz	r3, dc28 <bt_mesh_friend_sub_add+0x6a>
    dc18:	8a63      	ldrh	r3, [r4, #18]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d1ec      	bne.n	dbf8 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
    dc1e:	2302      	movs	r3, #2
			frnd->sub_list[i] = addr;
    dc20:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    dc24:	81d8      	strh	r0, [r3, #14]
    dc26:	e7e7      	b.n	dbf8 <bt_mesh_friend_sub_add+0x3a>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
    dc28:	2301      	movs	r3, #1
    dc2a:	e7f9      	b.n	dc20 <bt_mesh_friend_sub_add+0x62>
		return -EINVAL;
    dc2c:	f06f 0015 	mvn.w	r0, #21
    dc30:	bd70      	pop	{r4, r5, r6, pc}

0000dc32 <bt_mesh_friend_sub_rem>:
{
    dc32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
    dc34:	888b      	ldrh	r3, [r1, #4]
    dc36:	2b02      	cmp	r3, #2
{
    dc38:	460d      	mov	r5, r1
	if (buf->len < BT_MESH_FRIEND_SUB_MIN_LEN) {
    dc3a:	d936      	bls.n	dcaa <bt_mesh_friend_sub_rem+0x78>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, true);
    dc3c:	6804      	ldr	r4, [r0, #0]
    dc3e:	8901      	ldrh	r1, [r0, #8]
    dc40:	8ba0      	ldrh	r0, [r4, #28]
    dc42:	2301      	movs	r3, #1
    dc44:	461a      	mov	r2, r3
    dc46:	f7ff fef3 	bl	da30 <bt_mesh_friend_find>
	if (!frnd) {
    dc4a:	4604      	mov	r4, r0
    dc4c:	b1b0      	cbz	r0, dc7c <bt_mesh_friend_sub_rem+0x4a>
	if (frnd->pending_buf) {
    dc4e:	78c3      	ldrb	r3, [r0, #3]
    dc50:	f013 0610 	ands.w	r6, r3, #16
    dc54:	d112      	bne.n	dc7c <bt_mesh_friend_sub_rem+0x4a>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
    dc56:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
    dc58:	f043 0304 	orr.w	r3, r3, #4
    dc5c:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
    dc5e:	3133      	adds	r1, #51	; 0x33
    dc60:	3014      	adds	r0, #20
    dc62:	f7ff fc9f 	bl	d5a4 <k_delayed_work_submit>
	xact = net_buf_simple_pull_u8(buf);
    dc66:	4628      	mov	r0, r5
    dc68:	f009 ffff 	bl	17c6a <net_buf_simple_pull_u8>
    dc6c:	4607      	mov	r7, r0
	while (buf->len >= 2) {
    dc6e:	88ab      	ldrh	r3, [r5, #4]
    dc70:	2b01      	cmp	r3, #1
    dc72:	d805      	bhi.n	dc80 <bt_mesh_friend_sub_rem+0x4e>
	enqueue_sub_cfm(frnd, xact);
    dc74:	4639      	mov	r1, r7
    dc76:	4620      	mov	r0, r4
    dc78:	f7ff fd98 	bl	d7ac <enqueue_sub_cfm>
		return 0;
    dc7c:	2000      	movs	r0, #0
}
    dc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		friend_sub_rem(frnd, net_buf_simple_pull_be16(buf));
    dc80:	4628      	mov	r0, r5
    dc82:	f00a f802 	bl	17c8a <net_buf_simple_pull_be16>
		if (frnd->sub_list[i] == addr) {
    dc86:	89e3      	ldrh	r3, [r4, #14]
    dc88:	4283      	cmp	r3, r0
    dc8a:	d00a      	beq.n	dca2 <bt_mesh_friend_sub_rem+0x70>
    dc8c:	8a23      	ldrh	r3, [r4, #16]
    dc8e:	4283      	cmp	r3, r0
    dc90:	d009      	beq.n	dca6 <bt_mesh_friend_sub_rem+0x74>
    dc92:	8a63      	ldrh	r3, [r4, #18]
    dc94:	4283      	cmp	r3, r0
    dc96:	d1ea      	bne.n	dc6e <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
    dc98:	2302      	movs	r3, #2
			frnd->sub_list[i] = BT_MESH_ADDR_UNASSIGNED;
    dc9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    dc9e:	81de      	strh	r6, [r3, #14]
    dca0:	e7e5      	b.n	dc6e <bt_mesh_friend_sub_rem+0x3c>
	for (i = 0; i < ARRAY_SIZE(frnd->sub_list); i++) {
    dca2:	2300      	movs	r3, #0
    dca4:	e7f9      	b.n	dc9a <bt_mesh_friend_sub_rem+0x68>
    dca6:	2301      	movs	r3, #1
    dca8:	e7f7      	b.n	dc9a <bt_mesh_friend_sub_rem+0x68>
		return -EINVAL;
    dcaa:	f06f 0015 	mvn.w	r0, #21
    dcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dcb0 <bt_mesh_friend_poll>:
	if (buf->len < sizeof(*msg)) {
    dcb0:	888b      	ldrh	r3, [r1, #4]
{
    dcb2:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_ctl_friend_poll *msg = (void *)buf->data;
    dcb4:	680e      	ldr	r6, [r1, #0]
	if (buf->len < sizeof(*msg)) {
    dcb6:	2b00      	cmp	r3, #0
    dcb8:	d03d      	beq.n	dd36 <bt_mesh_friend_poll+0x86>
	frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr, true, false);
    dcba:	6804      	ldr	r4, [r0, #0]
    dcbc:	8901      	ldrh	r1, [r0, #8]
    dcbe:	8ba0      	ldrh	r0, [r4, #28]
    dcc0:	2300      	movs	r3, #0
    dcc2:	2201      	movs	r2, #1
    dcc4:	f7ff feb4 	bl	da30 <bt_mesh_friend_find>
	if (!frnd) {
    dcc8:	4604      	mov	r4, r0
    dcca:	b910      	cbnz	r0, dcd2 <bt_mesh_friend_poll+0x22>
		return 0;
    dccc:	2500      	movs	r5, #0
}
    dcce:	4628      	mov	r0, r5
    dcd0:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->fsn & ~1) {
    dcd2:	7835      	ldrb	r5, [r6, #0]
    dcd4:	f035 0501 	bics.w	r5, r5, #1
    dcd8:	d12d      	bne.n	dd36 <bt_mesh_friend_poll+0x86>
	if (frnd->pending_buf) {
    dcda:	78c3      	ldrb	r3, [r0, #3]
    dcdc:	06d9      	lsls	r1, r3, #27
    dcde:	d4f5      	bmi.n	dccc <bt_mesh_friend_poll+0x1c>
	return (s32_t)frnd->recv_delay + (CONFIG_BT_MESH_FRIEND_RECV_WIN / 5);
    dce0:	7881      	ldrb	r1, [r0, #2]
	frnd->pending_req = 1;
    dce2:	f043 0304 	orr.w	r3, r3, #4
    dce6:	70c3      	strb	r3, [r0, #3]
	k_delayed_work_submit(&frnd->timer, recv_delay(frnd));
    dce8:	3133      	adds	r1, #51	; 0x33
    dcea:	3014      	adds	r0, #20
    dcec:	f7ff fc5a 	bl	d5a4 <k_delayed_work_submit>
	if (!frnd->established) {
    dcf0:	78e3      	ldrb	r3, [r4, #3]
    dcf2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    dcf4:	065a      	lsls	r2, r3, #25
		frnd->established = 1;
    dcf6:	bf5c      	itt	pl
    dcf8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
    dcfc:	70e3      	strbpl	r3, [r4, #3]
	if (msg->fsn == frnd->fsn && frnd->last) {
    dcfe:	78e3      	ldrb	r3, [r4, #3]
    dd00:	7831      	ldrb	r1, [r6, #0]
    dd02:	f003 0201 	and.w	r2, r3, #1
    dd06:	4291      	cmp	r1, r2
    dd08:	d104      	bne.n	dd14 <bt_mesh_friend_poll+0x64>
    dd0a:	b140      	cbz	r0, dd1e <bt_mesh_friend_poll+0x6e>
		frnd->send_last = 1;
    dd0c:	f043 0302 	orr.w	r3, r3, #2
    dd10:	70e3      	strb	r3, [r4, #3]
    dd12:	e7dc      	b.n	dcce <bt_mesh_friend_poll+0x1e>
		if (frnd->last) {
    dd14:	b118      	cbz	r0, dd1e <bt_mesh_friend_poll+0x6e>
			net_buf_unref(frnd->last);
    dd16:	f009 ff15 	bl	17b44 <net_buf_unref>
			frnd->last = NULL;
    dd1a:	2300      	movs	r3, #0
    dd1c:	6463      	str	r3, [r4, #68]	; 0x44
		frnd->fsn = msg->fsn;
    dd1e:	78e3      	ldrb	r3, [r4, #3]
    dd20:	7832      	ldrb	r2, [r6, #0]
		if (sys_slist_is_empty(&frnd->queue)) {
    dd22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		frnd->fsn = msg->fsn;
    dd24:	f362 0300 	bfi	r3, r2, #0, #1
    dd28:	70e3      	strb	r3, [r4, #3]
		if (sys_slist_is_empty(&frnd->queue)) {
    dd2a:	2900      	cmp	r1, #0
    dd2c:	d1ce      	bne.n	dccc <bt_mesh_friend_poll+0x1c>
			enqueue_update(frnd, 0);
    dd2e:	4620      	mov	r0, r4
    dd30:	f7ff fde2 	bl	d8f8 <enqueue_update>
    dd34:	e7cb      	b.n	dcce <bt_mesh_friend_poll+0x1e>
		return -EINVAL;
    dd36:	f06f 0515 	mvn.w	r5, #21
    dd3a:	e7c8      	b.n	dcce <bt_mesh_friend_poll+0x1e>

0000dd3c <bt_mesh_friend_clear_cfm>:
{
    dd3c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
    dd3e:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
    dd40:	680a      	ldr	r2, [r1, #0]
	if (buf->len < sizeof(*msg)) {
    dd42:	2b03      	cmp	r3, #3
    dd44:	d90b      	bls.n	dd5e <bt_mesh_friend_clear_cfm+0x22>
		if (frnd->clear.frnd == prev_friend) {
    dd46:	4c15      	ldr	r4, [pc, #84]	; (dd9c <bt_mesh_friend_clear_cfm+0x60>)
	frnd = find_clear(rx->ctx.addr);
    dd48:	8903      	ldrh	r3, [r0, #8]
		if (frnd->clear.frnd == prev_friend) {
    dd4a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    dd4e:	4299      	cmp	r1, r3
    dd50:	d008      	beq.n	dd64 <bt_mesh_friend_clear_cfm+0x28>
    dd52:	f8b4 1100 	ldrh.w	r1, [r4, #256]	; 0x100
    dd56:	4299      	cmp	r1, r3
    dd58:	d01e      	beq.n	dd98 <bt_mesh_friend_clear_cfm+0x5c>
		return 0;
    dd5a:	2000      	movs	r0, #0
    dd5c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    dd5e:	f06f 0015 	mvn.w	r0, #21
    dd62:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    dd64:	3424      	adds	r4, #36	; 0x24
	lpn_addr = sys_be16_to_cpu(msg->lpn_addr);
    dd66:	8811      	ldrh	r1, [r2, #0]
    dd68:	020b      	lsls	r3, r1, #8
    dd6a:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
	if (lpn_addr != frnd->lpn) {
    dd6e:	8821      	ldrh	r1, [r4, #0]
    dd70:	b29b      	uxth	r3, r3
    dd72:	4299      	cmp	r1, r3
    dd74:	d1f1      	bne.n	dd5a <bt_mesh_friend_clear_cfm+0x1e>
	lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    dd76:	8852      	ldrh	r2, [r2, #2]
    dd78:	0213      	lsls	r3, r2, #8
    dd7a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (lpn_counter != frnd->lpn_counter) {
    dd7e:	8922      	ldrh	r2, [r4, #8]
    dd80:	b29b      	uxth	r3, r3
    dd82:	429a      	cmp	r2, r3
    dd84:	f04f 0500 	mov.w	r5, #0
    dd88:	d1e7      	bne.n	dd5a <bt_mesh_friend_clear_cfm+0x1e>
	k_delayed_work_cancel(&frnd->clear.timer);
    dd8a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dd8e:	f00a ffaf 	bl	18cf0 <k_delayed_work_cancel>
	frnd->clear.frnd = BT_MESH_ADDR_UNASSIGNED;
    dd92:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    dd96:	e7e0      	b.n	dd5a <bt_mesh_friend_clear_cfm+0x1e>
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];
    dd98:	34a8      	adds	r4, #168	; 0xa8
    dd9a:	e7e4      	b.n	dd66 <bt_mesh_friend_clear_cfm+0x2a>
    dd9c:	20006168 	.word	0x20006168

0000dda0 <bt_mesh_friend_req>:
{
    dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*msg)) {
    dda4:	888b      	ldrh	r3, [r1, #4]
	struct bt_mesh_ctl_friend_req *msg = (void *)buf->data;
    dda6:	680d      	ldr	r5, [r1, #0]
	if (buf->len < sizeof(*msg)) {
    dda8:	2b09      	cmp	r3, #9
{
    ddaa:	b085      	sub	sp, #20
    ddac:	4607      	mov	r7, r0
	if (buf->len < sizeof(*msg)) {
    ddae:	f240 80ce 	bls.w	df4e <bt_mesh_friend_req+0x1ae>
	if (msg->recv_delay <= 0x09) {
    ddb2:	786b      	ldrb	r3, [r5, #1]
    ddb4:	2b09      	cmp	r3, #9
    ddb6:	f240 80ca 	bls.w	df4e <bt_mesh_friend_req+0x1ae>
		   ((u32_t)msg->poll_to[1] << 8) |
    ddba:	78ee      	ldrb	r6, [r5, #3]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
    ddbc:	78ab      	ldrb	r3, [r5, #2]
		   ((u32_t)msg->poll_to[1] << 8) |
    ddbe:	0236      	lsls	r6, r6, #8
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
    ddc0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
		   ((u32_t)msg->poll_to[2]));
    ddc4:	792b      	ldrb	r3, [r5, #4]
	poll_to = (((u32_t)msg->poll_to[0] << 16) |
    ddc6:	431e      	orrs	r6, r3
	if (poll_to <= 0x000009 || poll_to >= 0x34bc00) {
    ddc8:	4b64      	ldr	r3, [pc, #400]	; (df5c <bt_mesh_friend_req+0x1bc>)
    ddca:	f1a6 020a 	sub.w	r2, r6, #10
    ddce:	429a      	cmp	r2, r3
    ddd0:	f200 80bd 	bhi.w	df4e <bt_mesh_friend_req+0x1ae>
	if (msg->num_elem == 0x00) {
    ddd4:	79eb      	ldrb	r3, [r5, #7]
    ddd6:	2b00      	cmp	r3, #0
    ddd8:	f000 80b9 	beq.w	df4e <bt_mesh_friend_req+0x1ae>
    dddc:	782b      	ldrb	r3, [r5, #0]
	if (!MIN_QUEUE_SIZE_LOG(msg->criteria)) {
    ddde:	f013 0307 	ands.w	r3, r3, #7
    dde2:	f000 80b4 	beq.w	df4e <bt_mesh_friend_req+0x1ae>
	if (CONFIG_BT_MESH_FRIEND_QUEUE_SIZE < MIN_QUEUE_SIZE(msg->criteria)) {
    dde6:	2201      	movs	r2, #1
    dde8:	fa02 f303 	lsl.w	r3, r2, r3
    ddec:	2b10      	cmp	r3, #16
    ddee:	d903      	bls.n	ddf8 <bt_mesh_friend_req+0x58>
	return 0;
    ddf0:	2000      	movs	r0, #0
}
    ddf2:	b005      	add	sp, #20
    ddf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	old_friend = sys_be16_to_cpu(msg->prev_addr);
    ddf8:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    ddfc:	6800      	ldr	r0, [r0, #0]
    ddfe:	ea4f 2803 	mov.w	r8, r3, lsl #8
    de02:	ea48 2813 	orr.w	r8, r8, r3, lsr #8
    de06:	fa0f f888 	sxth.w	r8, r8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend)) {
    de0a:	f1b8 0f00 	cmp.w	r8, #0
	old_friend = sys_be16_to_cpu(msg->prev_addr);
    de0e:	fa1f f988 	uxth.w	r9, r8
		frnd = bt_mesh_friend_find(rx->sub->net_idx, old_friend,
    de12:	f04f 0300 	mov.w	r3, #0
    de16:	bfcc      	ite	gt
    de18:	4649      	movgt	r1, r9
		frnd = bt_mesh_friend_find(rx->sub->net_idx, rx->ctx.addr,
    de1a:	8939      	ldrhle	r1, [r7, #8]
    de1c:	8b80      	ldrh	r0, [r0, #28]
    de1e:	f7ff fe07 	bl	da30 <bt_mesh_friend_find>
    de22:	4604      	mov	r4, r0
	if (frnd) {
    de24:	b9b8      	cbnz	r0, de56 <bt_mesh_friend_req+0xb6>
		if (!bt_mesh.frnd[i].valid) {
    de26:	4b4e      	ldr	r3, [pc, #312]	; (df60 <bt_mesh_friend_req+0x1c0>)
    de28:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    de2c:	0691      	lsls	r1, r2, #26
    de2e:	d505      	bpl.n	de3c <bt_mesh_friend_req+0x9c>
    de30:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    de34:	0692      	lsls	r2, r2, #26
    de36:	f100 808d 	bmi.w	df54 <bt_mesh_friend_req+0x1b4>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    de3a:	2401      	movs	r4, #1
			frnd = &bt_mesh.frnd[i];
    de3c:	2284      	movs	r2, #132	; 0x84
    de3e:	4362      	muls	r2, r4
    de40:	f102 0424 	add.w	r4, r2, #36	; 0x24
    de44:	441c      	add	r4, r3
			frnd->valid = 1;
    de46:	4413      	add	r3, r2
    de48:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
    de4c:	f042 0220 	orr.w	r2, r2, #32
    de50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    de54:	e001      	b.n	de5a <bt_mesh_friend_req+0xba>
		friend_clear(frnd);
    de56:	f7ff fb25 	bl	d4a4 <friend_clear>
	frnd->lpn = rx->ctx.addr;
    de5a:	893b      	ldrh	r3, [r7, #8]
    de5c:	8023      	strh	r3, [r4, #0]
	frnd->net_idx = rx->sub->net_idx;
    de5e:	683b      	ldr	r3, [r7, #0]
    de60:	8b9b      	ldrh	r3, [r3, #28]
    de62:	81a3      	strh	r3, [r4, #12]
	frnd->recv_delay = msg->recv_delay;
    de64:	786b      	ldrb	r3, [r5, #1]
    de66:	70a3      	strb	r3, [r4, #2]
	frnd->poll_to = poll_to * 100;
    de68:	2364      	movs	r3, #100	; 0x64
    de6a:	435e      	muls	r6, r3
    de6c:	6066      	str	r6, [r4, #4]
	frnd->lpn_counter = sys_be16_to_cpu(msg->lpn_counter);
    de6e:	892a      	ldrh	r2, [r5, #8]
    de70:	0213      	lsls	r3, r2, #8
    de72:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    de76:	8123      	strh	r3, [r4, #8]
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
    de78:	f8b5 2005 	ldrh.w	r2, [r5, #5]
    de7c:	0213      	lsls	r3, r2, #8
    de7e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
    de82:	f1b8 0f00 	cmp.w	r8, #0
	frnd->clear.frnd = sys_be16_to_cpu(msg->prev_addr);
    de86:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
    de8a:	dd0f      	ble.n	deac <bt_mesh_friend_req+0x10c>
	    !bt_mesh_elem_find(old_friend)) {
    de8c:	4648      	mov	r0, r9
    de8e:	f7fc fef9 	bl	ac84 <bt_mesh_elem_find>
	if (BT_MESH_ADDR_IS_UNICAST(old_friend) &&
    de92:	b958      	cbnz	r0, deac <bt_mesh_friend_req+0x10c>
    de94:	f00a fc60 	bl	18758 <_impl_k_uptime_get_32>
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
    de98:	6863      	ldr	r3, [r4, #4]
    de9a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	frnd->clear.repeat_sec = 1;
    de9e:	2301      	movs	r3, #1
	frnd->clear.start = k_uptime_get_32() + (2 * frnd->poll_to);
    dea0:	6560      	str	r0, [r4, #84]	; 0x54
	frnd->clear.repeat_sec = 1;
    dea2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	send_friend_clear(frnd);
    dea6:	4620      	mov	r0, r4
    dea8:	f7ff fb40 	bl	d52c <send_friend_clear>
	k_delayed_work_submit(&frnd->timer,
    deac:	782a      	ldrb	r2, [r5, #0]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    deae:	482d      	ldr	r0, [pc, #180]	; (df64 <bt_mesh_friend_req+0x1c4>)
    deb0:	f3c2 03c1 	ubfx	r3, r2, #3, #2
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
    deb4:	f3c2 1241 	ubfx	r2, r2, #5, #2
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    deb8:	5cc1      	ldrb	r1, [r0, r3]
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
    deba:	5c82      	ldrb	r2, [r0, r2]
	delay = (s32_t)fact[RECV_WIN_FACT(crit)] * RECV_WIN;
    debc:	ebc1 2301 	rsb	r3, r1, r1, lsl #8
	delay -= (s32_t)fact[RSSI_FACT(crit)] * rssi;
    dec0:	f997 1013 	ldrsb.w	r1, [r7, #19]
    dec4:	fb02 3111 	mls	r1, r2, r1, r3
	delay /= 10;
    dec8:	230a      	movs	r3, #10
    deca:	fb91 f1f3 	sdiv	r1, r1, r3
	k_delayed_work_submit(&frnd->timer,
    dece:	2964      	cmp	r1, #100	; 0x64
    ded0:	bfb8      	it	lt
    ded2:	2164      	movlt	r1, #100	; 0x64
    ded4:	f104 0014 	add.w	r0, r4, #20
    ded8:	f7ff fb64 	bl	d5a4 <k_delayed_work_submit>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
    dedc:	2510      	movs	r5, #16
	friend_cred_create(rx->sub, frnd->lpn, frnd->lpn_counter,
    dede:	8963      	ldrh	r3, [r4, #10]
    dee0:	8922      	ldrh	r2, [r4, #8]
    dee2:	8821      	ldrh	r1, [r4, #0]
    dee4:	6838      	ldr	r0, [r7, #0]
    dee6:	f7fa f9fd 	bl	82e4 <friend_cred_create>
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
    deea:	462a      	mov	r2, r5
    deec:	2100      	movs	r1, #0
    deee:	4668      	mov	r0, sp
	enqueue_offer(frnd, rx->rssi);
    def0:	f997 6013 	ldrsb.w	r6, [r7, #19]
	struct net_buf_simple *sdu = NET_BUF_SIMPLE(1 + sizeof(*off));
    def4:	f7f2 fbdc 	bl	6b0 <memset>
    def8:	2307      	movs	r3, #7
    defa:	f8ad 3006 	strh.w	r3, [sp, #6]
	off = net_buf_simple_add(sdu, sizeof(*off));
    defe:	2106      	movs	r1, #6
	buf->data = buf->__buf + reserve_head;
    df00:	f10d 0309 	add.w	r3, sp, #9
    df04:	4668      	mov	r0, sp
    df06:	9300      	str	r3, [sp, #0]
    df08:	f009 fe3c 	bl	17b84 <net_buf_simple_add>
	off->recv_win = CONFIG_BT_MESH_FRIEND_RECV_WIN,
    df0c:	23ff      	movs	r3, #255	; 0xff
    df0e:	7003      	strb	r3, [r0, #0]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
    df10:	2303      	movs	r3, #3
	off->queue_size = CONFIG_BT_MESH_FRIEND_QUEUE_SIZE,
    df12:	7045      	strb	r5, [r0, #1]
	off->sub_list_size = ARRAY_SIZE(frnd->sub_list),
    df14:	7083      	strb	r3, [r0, #2]
	off->rssi = rssi,
    df16:	70c6      	strb	r6, [r0, #3]
	off->frnd_counter = sys_cpu_to_be16(frnd->counter);
    df18:	8962      	ldrh	r2, [r4, #10]
    df1a:	0213      	lsls	r3, r2, #8
    df1c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    df20:	8083      	strh	r3, [r0, #4]
	buf = encode_friend_ctl(frnd, TRANS_CTL_OP_FRIEND_OFFER, sdu);
    df22:	466a      	mov	r2, sp
    df24:	2104      	movs	r1, #4
    df26:	4620      	mov	r0, r4
    df28:	f7ff fc0a 	bl	d740 <encode_friend_ctl>
	if (!buf) {
    df2c:	4605      	mov	r5, r0
    df2e:	2800      	cmp	r0, #0
    df30:	f43f af5e 	beq.w	ddf0 <bt_mesh_friend_req+0x50>
	frnd->counter++;
    df34:	8963      	ldrh	r3, [r4, #10]
	if (frnd->last) {
    df36:	6c60      	ldr	r0, [r4, #68]	; 0x44
	frnd->counter++;
    df38:	3301      	adds	r3, #1
    df3a:	8163      	strh	r3, [r4, #10]
	if (frnd->last) {
    df3c:	b108      	cbz	r0, df42 <bt_mesh_friend_req+0x1a2>
		net_buf_unref(frnd->last);
    df3e:	f009 fe01 	bl	17b44 <net_buf_unref>
	frnd->send_last = 1;
    df42:	78e3      	ldrb	r3, [r4, #3]
	frnd->last = buf;
    df44:	6465      	str	r5, [r4, #68]	; 0x44
	frnd->send_last = 1;
    df46:	f043 0302 	orr.w	r3, r3, #2
    df4a:	70e3      	strb	r3, [r4, #3]
    df4c:	e750      	b.n	ddf0 <bt_mesh_friend_req+0x50>
		return -EINVAL;
    df4e:	f06f 0015 	mvn.w	r0, #21
    df52:	e74e      	b.n	ddf2 <bt_mesh_friend_req+0x52>
		return -ENOMEM;
    df54:	f06f 000b 	mvn.w	r0, #11
    df58:	e74b      	b.n	ddf2 <bt_mesh_friend_req+0x52>
    df5a:	bf00      	nop
    df5c:	0034bbf5 	.word	0x0034bbf5
    df60:	20006168 	.word	0x20006168
    df64:	0001a298 	.word	0x0001a298

0000df68 <bt_mesh_friend_init>:
{
    df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		frnd->net_idx = BT_MESH_KEY_UNUSED;
    df6c:	4c16      	ldr	r4, [pc, #88]	; (dfc8 <bt_mesh_friend_init+0x60>)
		k_delayed_work_init(&frnd->timer, friend_timeout);
    df6e:	4f17      	ldr	r7, [pc, #92]	; (dfcc <bt_mesh_friend_init+0x64>)
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
    df70:	4e17      	ldr	r6, [pc, #92]	; (dfd0 <bt_mesh_friend_init+0x68>)
	list->head = NULL;
    df72:	2500      	movs	r5, #0
		frnd->net_idx = BT_MESH_KEY_UNUSED;
    df74:	f64f 78ff 	movw	r8, #65535	; 0xffff
		k_delayed_work_init(&frnd->timer, friend_timeout);
    df78:	4639      	mov	r1, r7
    df7a:	f104 0038 	add.w	r0, r4, #56	; 0x38
		frnd->net_idx = BT_MESH_KEY_UNUSED;
    df7e:	f8a4 8030 	strh.w	r8, [r4, #48]	; 0x30
    df82:	66e5      	str	r5, [r4, #108]	; 0x6c
	list->tail = NULL;
    df84:	6725      	str	r5, [r4, #112]	; 0x70
		k_delayed_work_init(&frnd->timer, friend_timeout);
    df86:	f00a fe95 	bl	18cb4 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
    df8a:	4631      	mov	r1, r6
    df8c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    df90:	f00a fe90 	bl	18cb4 <k_delayed_work_init>
		k_delayed_work_init(&frnd->timer, friend_timeout);
    df94:	4639      	mov	r1, r7
    df96:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
	list->head = NULL;
    df9a:	6625      	str	r5, [r4, #96]	; 0x60
	list->tail = NULL;
    df9c:	6665      	str	r5, [r4, #100]	; 0x64
		frnd->net_idx = BT_MESH_KEY_UNUSED;
    df9e:	f8a4 80b4 	strh.w	r8, [r4, #180]	; 0xb4
	list->head = NULL;
    dfa2:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
	list->tail = NULL;
    dfa6:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		k_delayed_work_init(&frnd->timer, friend_timeout);
    dfaa:	f00a fe83 	bl	18cb4 <k_delayed_work_init>
		k_delayed_work_init(&frnd->clear.timer, clear_timeout);
    dfae:	f504 7082 	add.w	r0, r4, #260	; 0x104
    dfb2:	4631      	mov	r1, r6
    dfb4:	f00a fe7e 	bl	18cb4 <k_delayed_work_init>
	list->head = NULL;
    dfb8:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
	list->tail = NULL;
    dfbc:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
}
    dfc0:	4628      	mov	r0, r5
    dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfc6:	bf00      	nop
    dfc8:	20006168 	.word	0x20006168
    dfcc:	0000d821 	.word	0x0000d821
    dfd0:	0000d7f5 	.word	0x0000d7f5

0000dfd4 <bt_mesh_friend_match>:

bool bt_mesh_friend_match(u16_t net_idx, u16_t addr)
{
    dfd4:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
		struct bt_mesh_friend *frnd = &bt_mesh.frnd[i];

		if (friend_lpn_matches(frnd, net_idx, addr)) {
    dfd6:	460a      	mov	r2, r1
{
    dfd8:	4604      	mov	r4, r0
    dfda:	460d      	mov	r5, r1
		if (friend_lpn_matches(frnd, net_idx, addr)) {
    dfdc:	4601      	mov	r1, r0
    dfde:	4806      	ldr	r0, [pc, #24]	; (dff8 <bt_mesh_friend_match+0x24>)
    dfe0:	f7ff fc52 	bl	d888 <friend_lpn_matches>
    dfe4:	b930      	cbnz	r0, dff4 <bt_mesh_friend_match+0x20>
    dfe6:	462a      	mov	r2, r5
    dfe8:	4621      	mov	r1, r4
    dfea:	4804      	ldr	r0, [pc, #16]	; (dffc <bt_mesh_friend_match+0x28>)
	}

	BT_DBG("No matching LPN for address 0x%04x", addr);

	return false;
}
    dfec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (friend_lpn_matches(frnd, net_idx, addr)) {
    dff0:	f7ff bc4a 	b.w	d888 <friend_lpn_matches>
}
    dff4:	bd38      	pop	{r3, r4, r5, pc}
    dff6:	bf00      	nop
    dff8:	2000618c 	.word	0x2000618c
    dffc:	20006210 	.word	0x20006210

0000e000 <bt_mesh_friend_enqueue_rx>:

void bt_mesh_friend_enqueue_rx(struct bt_mesh_net_rx *rx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
    e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e004:	4699      	mov	r9, r3
	int i;

	if (!rx->friend_match ||
    e006:	7c83      	ldrb	r3, [r0, #18]
{
    e008:	4616      	mov	r6, r2
	if (!rx->friend_match ||
    e00a:	061a      	lsls	r2, r3, #24
{
    e00c:	b085      	sub	sp, #20
    e00e:	4604      	mov	r4, r0
    e010:	460f      	mov	r7, r1
	if (!rx->friend_match ||
    e012:	d513      	bpl.n	e03c <bt_mesh_friend_enqueue_rx+0x3c>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
    e014:	7a82      	ldrb	r2, [r0, #10]
    e016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (!rx->friend_match ||
    e01a:	2a01      	cmp	r2, #1
    e01c:	dc03      	bgt.n	e026 <bt_mesh_friend_enqueue_rx+0x26>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
    e01e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    e022:	2b10      	cmp	r3, #16
    e024:	d10a      	bne.n	e03c <bt_mesh_friend_enqueue_rx+0x3c>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
    e026:	f7fe fdc9 	bl	cbbc <bt_mesh_friend_get>
	    (rx->ctx.recv_ttl <= 1 && rx->net_if != BT_MESH_NET_IF_LOCAL) ||
    e02a:	2801      	cmp	r0, #1
    e02c:	d106      	bne.n	e03c <bt_mesh_friend_enqueue_rx+0x3c>
    e02e:	4d2e      	ldr	r5, [pc, #184]	; (e0e8 <bt_mesh_friend_enqueue_rx+0xe8>)
    e030:	f505 7884 	add.w	r8, r5, #264	; 0x108
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e034:	f1a5 0a24 	sub.w	sl, r5, #36	; 0x24
	}

	BT_DBG("recv_ttl %u net_idx 0x%04x src 0x%04x dst 0x%04x",
	       rx->ctx.recv_ttl, rx->sub->net_idx, rx->ctx.addr, rx->dst);

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e038:	45a8      	cmp	r8, r5
    e03a:	d102      	bne.n	e042 <bt_mesh_friend_enqueue_rx+0x42>

		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
			friend_lpn_enqueue_rx(frnd, rx, type, seq_auth, sbuf);
		}
	}
}
    e03c:	b005      	add	sp, #20
    e03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (friend_lpn_matches(frnd, rx->sub->net_idx, rx->dst)) {
    e042:	6823      	ldr	r3, [r4, #0]
    e044:	8a22      	ldrh	r2, [r4, #16]
    e046:	8b99      	ldrh	r1, [r3, #28]
    e048:	4628      	mov	r0, r5
    e04a:	f7ff fc1d 	bl	d888 <friend_lpn_matches>
    e04e:	2800      	cmp	r0, #0
    e050:	d048      	beq.n	e0e4 <bt_mesh_friend_enqueue_rx+0xe4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
    e052:	b92f      	cbnz	r7, e060 <bt_mesh_friend_enqueue_rx+0x60>
    e054:	b126      	cbz	r6, e060 <bt_mesh_friend_enqueue_rx+0x60>
		friend_purge_old_ack(frnd, seq_auth, rx->ctx.addr);
    e056:	8922      	ldrh	r2, [r4, #8]
    e058:	4631      	mov	r1, r6
    e05a:	4628      	mov	r0, r5
    e05c:	f7ff f9f2 	bl	d444 <friend_purge_old_ack>
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e060:	7ca1      	ldrb	r1, [r4, #18]
	info.src = rx->ctx.addr;
    e062:	8923      	ldrh	r3, [r4, #8]
    e064:	f8ad 3004 	strh.w	r3, [sp, #4]
	info.dst = rx->dst;
    e068:	8a23      	ldrh	r3, [r4, #16]
    e06a:	7aa2      	ldrb	r2, [r4, #10]
    e06c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    e070:	f001 0330 	and.w	r3, r1, #48	; 0x30
    e074:	2b10      	cmp	r3, #16
		info.ttl = rx->ctx.recv_ttl - 1;
    e076:	bf18      	it	ne
    e078:	f3c2 0206 	ubfxne	r2, r2, #0, #7
    e07c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e080:	bf18      	it	ne
    e082:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    e086:	f362 0306 	bfi	r3, r2, #0, #7
    e08a:	f88d 300b 	strb.w	r3, [sp, #11]
	info.ctl = rx->ctl;
    e08e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e092:	f3c1 02c0 	ubfx	r2, r1, #3, #1
    e096:	f362 13c7 	bfi	r3, r2, #7, #1
    e09a:	f88d 300b 	strb.w	r3, [sp, #11]
	info.seq[0] = (rx->seq >> 16);
    e09e:	68e3      	ldr	r3, [r4, #12]
	info.seq[2] = rx->seq;
    e0a0:	f88d 300a 	strb.w	r3, [sp, #10]
	info.seq[0] = (rx->seq >> 16);
    e0a4:	0c1a      	lsrs	r2, r3, #16
    e0a6:	f88d 2008 	strb.w	r2, [sp, #8]
	info.seq[1] = (rx->seq >> 8);
    e0aa:	0a1a      	lsrs	r2, r3, #8
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e0ac:	f8da 3000 	ldr.w	r3, [sl]
	info.seq[1] = (rx->seq >> 8);
    e0b0:	f88d 2009 	strb.w	r2, [sp, #9]
	info.iv_index = BT_MESH_NET_IVI_RX(rx);
    e0b4:	f001 0101 	and.w	r1, r1, #1
    e0b8:	1a59      	subs	r1, r3, r1
    e0ba:	9103      	str	r1, [sp, #12]
	buf = create_friend_pdu(frnd, &info, sbuf);
    e0bc:	464a      	mov	r2, r9
    e0be:	a901      	add	r1, sp, #4
    e0c0:	4628      	mov	r0, r5
    e0c2:	f7ff fa89 	bl	d5d8 <create_friend_pdu>
	if (!buf) {
    e0c6:	4683      	mov	fp, r0
    e0c8:	b160      	cbz	r0, e0e4 <bt_mesh_friend_enqueue_rx+0xe4>
	if (seq_auth) {
    e0ca:	b136      	cbz	r6, e0da <bt_mesh_friend_enqueue_rx+0xda>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
    e0cc:	f7ff f9ac 	bl	d428 <net_buf_user_data>
    e0d0:	e9d6 1200 	ldrd	r1, r2, [r6]
    e0d4:	6803      	ldr	r3, [r0, #0]
    e0d6:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
    e0da:	465a      	mov	r2, fp
    e0dc:	4639      	mov	r1, r7
    e0de:	4628      	mov	r0, r5
    e0e0:	f7ff fc46 	bl	d970 <enqueue_friend_pdu>
    e0e4:	3584      	adds	r5, #132	; 0x84
    e0e6:	e7a7      	b.n	e038 <bt_mesh_friend_enqueue_rx+0x38>
    e0e8:	2000618c 	.word	0x2000618c

0000e0ec <bt_mesh_friend_enqueue_tx>:

bool bt_mesh_friend_enqueue_tx(struct bt_mesh_net_tx *tx,
			       enum bt_mesh_friend_pdu_type type,
			       u64_t *seq_auth, struct net_buf_simple *sbuf)
{
    e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0f0:	b087      	sub	sp, #28
    e0f2:	4617      	mov	r7, r2
    e0f4:	9301      	str	r3, [sp, #4]
	bool matched = false;
	int i;

	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e0f6:	6842      	ldr	r2, [r0, #4]
    e0f8:	6803      	ldr	r3, [r0, #0]
{
    e0fa:	4604      	mov	r4, r0
    e0fc:	468a      	mov	sl, r1
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e0fe:	8b98      	ldrh	r0, [r3, #28]
    e100:	8891      	ldrh	r1, [r2, #4]
    e102:	f7ff ff67 	bl	dfd4 <bt_mesh_friend_match>
    e106:	b920      	cbnz	r0, e112 <bt_mesh_friend_enqueue_tx+0x26>
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
		return matched;
    e108:	2300      	movs	r3, #0
			matched = true;
		}
	}

	return matched;
}
    e10a:	4618      	mov	r0, r3
    e10c:	b007      	add	sp, #28
    e10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    bt_mesh_friend_get() != BT_MESH_FRIEND_ENABLED) {
    e112:	f7fe fd53 	bl	cbbc <bt_mesh_friend_get>
	if (!bt_mesh_friend_match(tx->sub->net_idx, tx->ctx->addr) ||
    e116:	2801      	cmp	r0, #1
    e118:	d1f6      	bne.n	e108 <bt_mesh_friend_enqueue_tx+0x1c>
    e11a:	f8df b0d0 	ldr.w	fp, [pc, #208]	; e1ec <bt_mesh_friend_enqueue_tx+0x100>
    e11e:	2600      	movs	r6, #0
    e120:	4633      	mov	r3, r6
    e122:	46d8      	mov	r8, fp
		if (friend_lpn_matches(frnd, tx->sub->net_idx, tx->ctx->addr)) {
    e124:	e894 0006 	ldmia.w	r4, {r1, r2}
    e128:	f106 0524 	add.w	r5, r6, #36	; 0x24
    e12c:	445d      	add	r5, fp
    e12e:	8892      	ldrh	r2, [r2, #4]
    e130:	8b89      	ldrh	r1, [r1, #28]
    e132:	9300      	str	r3, [sp, #0]
    e134:	4628      	mov	r0, r5
    e136:	f7ff fba7 	bl	d888 <friend_lpn_matches>
    e13a:	9b00      	ldr	r3, [sp, #0]
    e13c:	4681      	mov	r9, r0
    e13e:	2800      	cmp	r0, #0
    e140:	d04e      	beq.n	e1e0 <bt_mesh_friend_enqueue_tx+0xf4>
	if (type == BT_MESH_FRIEND_PDU_SINGLE && seq_auth) {
    e142:	f1ba 0f00 	cmp.w	sl, #0
    e146:	d105      	bne.n	e154 <bt_mesh_friend_enqueue_tx+0x68>
    e148:	b127      	cbz	r7, e154 <bt_mesh_friend_enqueue_tx+0x68>
		friend_purge_old_ack(frnd, seq_auth, tx->src);
    e14a:	8922      	ldrh	r2, [r4, #8]
    e14c:	4639      	mov	r1, r7
    e14e:	4628      	mov	r0, r5
    e150:	f7ff f978 	bl	d444 <friend_purge_old_ack>
	info.src = tx->src;
    e154:	8923      	ldrh	r3, [r4, #8]
    e156:	f8ad 300c 	strh.w	r3, [sp, #12]
	info.dst = tx->ctx->addr;
    e15a:	6863      	ldr	r3, [r4, #4]
    e15c:	889a      	ldrh	r2, [r3, #4]
	info.ttl = tx->ctx->send_ttl;
    e15e:	79d9      	ldrb	r1, [r3, #7]
	info.dst = tx->ctx->addr;
    e160:	f8ad 200e 	strh.w	r2, [sp, #14]
	info.ttl = tx->ctx->send_ttl;
    e164:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e168:	f361 0206 	bfi	r2, r1, #0, #7
    e16c:	f88d 2013 	strb.w	r2, [sp, #19]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    e170:	885b      	ldrh	r3, [r3, #2]
    e172:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e176:	1a9a      	subs	r2, r3, r2
    e178:	4253      	negs	r3, r2
    e17a:	4153      	adcs	r3, r2
    e17c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e180:	f363 12c7 	bfi	r2, r3, #7, #1
	info.seq[0] = (bt_mesh.seq >> 16);
    e184:	f8d8 3004 	ldr.w	r3, [r8, #4]
	info.ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    e188:	f88d 2013 	strb.w	r2, [sp, #19]
	info.seq[0] = (bt_mesh.seq >> 16);
    e18c:	f3c3 0217 	ubfx	r2, r3, #0, #24
    e190:	1411      	asrs	r1, r2, #16
    e192:	f88d 1010 	strb.w	r1, [sp, #16]
	info.seq[1] = (bt_mesh.seq >> 8);
    e196:	1211      	asrs	r1, r2, #8
    e198:	f88d 1011 	strb.w	r1, [sp, #17]
	info.seq[2] = bt_mesh.seq++;
    e19c:	1c51      	adds	r1, r2, #1
    e19e:	f361 0317 	bfi	r3, r1, #0, #24
    e1a2:	f8c8 3004 	str.w	r3, [r8, #4]
    e1a6:	f88d 2012 	strb.w	r2, [sp, #18]
	info.iv_index = BT_MESH_NET_IVI_TX;
    e1aa:	f8d8 2000 	ldr.w	r2, [r8]
    e1ae:	f3c3 6300 	ubfx	r3, r3, #24, #1
    e1b2:	1ad3      	subs	r3, r2, r3
	buf = create_friend_pdu(frnd, &info, sbuf);
    e1b4:	a903      	add	r1, sp, #12
    e1b6:	9a01      	ldr	r2, [sp, #4]
	info.iv_index = BT_MESH_NET_IVI_TX;
    e1b8:	9305      	str	r3, [sp, #20]
	buf = create_friend_pdu(frnd, &info, sbuf);
    e1ba:	4628      	mov	r0, r5
    e1bc:	f7ff fa0c 	bl	d5d8 <create_friend_pdu>
	if (!buf) {
    e1c0:	9000      	str	r0, [sp, #0]
    e1c2:	b160      	cbz	r0, e1de <bt_mesh_friend_enqueue_tx+0xf2>
	if (seq_auth) {
    e1c4:	b137      	cbz	r7, e1d4 <bt_mesh_friend_enqueue_tx+0xe8>
		FRIEND_ADV(buf)->seq_auth = *seq_auth;
    e1c6:	f7ff f92f 	bl	d428 <net_buf_user_data>
    e1ca:	e9d7 1200 	ldrd	r1, r2, [r7]
    e1ce:	6803      	ldr	r3, [r0, #0]
    e1d0:	e9c3 1204 	strd	r1, r2, [r3, #16]
	enqueue_friend_pdu(frnd, type, buf);
    e1d4:	9a00      	ldr	r2, [sp, #0]
    e1d6:	4651      	mov	r1, sl
    e1d8:	4628      	mov	r0, r5
    e1da:	f7ff fbc9 	bl	d970 <enqueue_friend_pdu>
			matched = true;
    e1de:	464b      	mov	r3, r9
    e1e0:	3684      	adds	r6, #132	; 0x84
	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e1e2:	f5b6 7f84 	cmp.w	r6, #264	; 0x108
    e1e6:	d19d      	bne.n	e124 <bt_mesh_friend_enqueue_tx+0x38>
    e1e8:	e78f      	b.n	e10a <bt_mesh_friend_enqueue_tx+0x1e>
    e1ea:	bf00      	nop
    e1ec:	20006168 	.word	0x20006168

0000e1f0 <bt_mesh_friend_clear_incomplete>:

void bt_mesh_friend_clear_incomplete(struct bt_mesh_subnet *sub, u16_t src,
				     u16_t dst, u64_t *seq_auth)
{
    e1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1f4:	f8df 8064 	ldr.w	r8, [pc, #100]	; e25c <bt_mesh_friend_clear_incomplete+0x6c>
    e1f8:	4604      	mov	r4, r0
    e1fa:	460d      	mov	r5, r1
    e1fc:	4616      	mov	r6, r2
    e1fe:	461f      	mov	r7, r3
    e200:	f508 7a84 	add.w	sl, r8, #264	; 0x108
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(bt_mesh.frnd); i++) {
    e204:	45c2      	cmp	sl, r8
    e206:	d101      	bne.n	e20c <bt_mesh_friend_clear_incomplete+0x1c>
			while (!sys_slist_is_empty(&seg->queue)) {
				net_buf_unref(net_buf_slist_get(&seg->queue));
			}
		}
	}
}
    e208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!friend_lpn_matches(frnd, sub->net_idx, dst)) {
    e20c:	4632      	mov	r2, r6
    e20e:	8ba1      	ldrh	r1, [r4, #28]
    e210:	4640      	mov	r0, r8
    e212:	f7ff fb39 	bl	d888 <friend_lpn_matches>
    e216:	b910      	cbnz	r0, e21e <bt_mesh_friend_clear_incomplete+0x2e>
    e218:	f108 0884 	add.w	r8, r8, #132	; 0x84
    e21c:	e7f2      	b.n	e204 <bt_mesh_friend_clear_incomplete+0x14>
    e21e:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
    e222:	f108 093c 	add.w	r9, r8, #60	; 0x3c
			if (!buf) {
    e226:	2800      	cmp	r0, #0
    e228:	d0f6      	beq.n	e218 <bt_mesh_friend_clear_incomplete+0x28>
			if (BT_MESH_ADV(buf)->addr != src) {
    e22a:	f7ff f8fd 	bl	d428 <net_buf_user_data>
    e22e:	6803      	ldr	r3, [r0, #0]
    e230:	895a      	ldrh	r2, [r3, #10]
    e232:	42aa      	cmp	r2, r5
    e234:	d1f0      	bne.n	e218 <bt_mesh_friend_clear_incomplete+0x28>
			if (FRIEND_ADV(buf)->seq_auth != *seq_auth) {
    e236:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    e23a:	e9d7 2300 	ldrd	r2, r3, [r7]
    e23e:	4299      	cmp	r1, r3
    e240:	bf08      	it	eq
    e242:	4290      	cmpeq	r0, r2
    e244:	d1e8      	bne.n	e218 <bt_mesh_friend_clear_incomplete+0x28>
			while (!sys_slist_is_empty(&seg->queue)) {
    e246:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
    e24a:	2b00      	cmp	r3, #0
    e24c:	d0e4      	beq.n	e218 <bt_mesh_friend_clear_incomplete+0x28>
				net_buf_unref(net_buf_slist_get(&seg->queue));
    e24e:	4648      	mov	r0, r9
    e250:	f009 fc39 	bl	17ac6 <net_buf_slist_get>
    e254:	f009 fc76 	bl	17b44 <net_buf_unref>
    e258:	e7f5      	b.n	e246 <bt_mesh_friend_clear_incomplete+0x56>
    e25a:	bf00      	nop
    e25c:	2000618c 	.word	0x2000618c

0000e260 <ack_complete>:
static u8_t pending_ack = XACT_NVAL;

static void ack_complete(u16_t duration, int err, void *user_data)
{
	BT_DBG("xact %u complete", (u8_t)pending_ack);
	pending_ack = XACT_NVAL;
    e260:	4b01      	ldr	r3, [pc, #4]	; (e268 <ack_complete+0x8>)
    e262:	22ff      	movs	r2, #255	; 0xff
    e264:	701a      	strb	r2, [r3, #0]
    e266:	4770      	bx	lr
    e268:	20006710 	.word	0x20006710

0000e26c <prov_failed>:
{
	BT_DBG("");
}

static void prov_failed(const u8_t *data)
{
    e26c:	4770      	bx	lr

0000e26e <adv_buf_create>:
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV, PROV_XMIT_COUNT,
    e26e:	f44f 73c8 	mov.w	r3, #400	; 0x190
    e272:	2214      	movs	r2, #20
    e274:	2102      	movs	r1, #2
    e276:	2000      	movs	r0, #0
    e278:	f7f9 bc6c 	b.w	7b54 <bt_mesh_adv_create>

0000e27c <send_reliable>:
{
    e27c:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    e27e:	f00a fa83 	bl	18788 <_impl_k_uptime_get>
	link.tx.start = k_uptime_get();
    e282:	4c0c      	ldr	r4, [pc, #48]	; (e2b4 <send_reliable+0x38>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e284:	4e0c      	ldr	r6, [pc, #48]	; (e2b8 <send_reliable+0x3c>)
	link.tx.start = k_uptime_get();
    e286:	e9c4 0100 	strd	r0, r1, [r4]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e28a:	2500      	movs	r5, #0
    e28c:	340c      	adds	r4, #12
		struct net_buf *buf = link.tx.buf[i];
    e28e:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
    e292:	b158      	cbz	r0, e2ac <send_reliable+0x30>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    e294:	3501      	adds	r5, #1
    e296:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
    e298:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    e29c:	d007      	beq.n	e2ae <send_reliable+0x32>
    e29e:	6823      	ldr	r3, [r4, #0]
    e2a0:	b12b      	cbz	r3, e2ae <send_reliable+0x32>
			bt_mesh_adv_send(buf, NULL, NULL);
    e2a2:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e2a4:	f7f9 fc66 	bl	7b74 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e2a8:	2d03      	cmp	r5, #3
    e2aa:	d1f0      	bne.n	e28e <send_reliable+0x12>
    e2ac:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e2ae:	4631      	mov	r1, r6
    e2b0:	e7f8      	b.n	e2a4 <send_reliable+0x28>
    e2b2:	bf00      	nop
    e2b4:	20000d10 	.word	0x20000d10
    e2b8:	20006708 	.word	0x20006708

0000e2bc <atomic_or>:
{
    e2bc:	b500      	push	{lr}
}
    e2be:	f3bf 8f5b 	dmb	ish
    e2c2:	e850 3f00 	ldrex	r3, [r0]
    e2c6:	ea43 0201 	orr.w	r2, r3, r1
    e2ca:	e840 2e00 	strex	lr, r2, [r0]
    e2ce:	f1be 0f00 	cmp.w	lr, #0
    e2d2:	d1f6      	bne.n	e2c2 <atomic_or+0x6>
    e2d4:	f3bf 8f5b 	dmb	ish
    e2d8:	4618      	mov	r0, r3
    e2da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e2e0 <gen_prov_ack_send>:
{
    e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (pending_ack == xact_id) {
    e2e2:	4d16      	ldr	r5, [pc, #88]	; (e33c <gen_prov_ack_send+0x5c>)
    e2e4:	782b      	ldrb	r3, [r5, #0]
    e2e6:	4283      	cmp	r3, r0
{
    e2e8:	4606      	mov	r6, r0
	if (pending_ack == xact_id) {
    e2ea:	d025      	beq.n	e338 <gen_prov_ack_send+0x58>
	buf = adv_buf_create();
    e2ec:	f7ff ffbf 	bl	e26e <adv_buf_create>
	if (!buf) {
    e2f0:	4604      	mov	r4, r0
    e2f2:	b308      	cbz	r0, e338 <gen_prov_ack_send+0x58>
	if (pending_ack == XACT_NVAL) {
    e2f4:	782b      	ldrb	r3, [r5, #0]
    e2f6:	2bff      	cmp	r3, #255	; 0xff
	net_buf_add_be32(buf, link.id);
    e2f8:	4b11      	ldr	r3, [pc, #68]	; (e340 <gen_prov_ack_send+0x60>)
		pending_ack = xact_id;
    e2fa:	bf08      	it	eq
    e2fc:	702e      	strbeq	r6, [r5, #0]
	net_buf_add_be32(buf, link.id);
    e2fe:	f100 0508 	add.w	r5, r0, #8
    e302:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
		complete = &cb;
    e306:	bf08      	it	eq
    e308:	4f0e      	ldreq	r7, [pc, #56]	; (e344 <gen_prov_ack_send+0x64>)
	net_buf_add_be32(buf, link.id);
    e30a:	4628      	mov	r0, r5
		complete = NULL;
    e30c:	bf18      	it	ne
    e30e:	2700      	movne	r7, #0
	net_buf_add_be32(buf, link.id);
    e310:	f009 fc6f 	bl	17bf2 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
    e314:	4631      	mov	r1, r6
    e316:	4628      	mov	r0, r5
    e318:	f009 fc43 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
    e31c:	2101      	movs	r1, #1
    e31e:	4628      	mov	r0, r5
    e320:	f009 fc3f 	bl	17ba2 <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
    e324:	4620      	mov	r0, r4
    e326:	4639      	mov	r1, r7
    e328:	2200      	movs	r2, #0
    e32a:	f7f9 fc23 	bl	7b74 <bt_mesh_adv_send>
	net_buf_unref(buf);
    e32e:	4620      	mov	r0, r4
}
    e330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    e334:	f009 bc06 	b.w	17b44 <net_buf_unref>
    e338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e33a:	bf00      	nop
    e33c:	20006710 	.word	0x20006710
    e340:	20000be0 	.word	0x20000be0
    e344:	0001a2a8 	.word	0x0001a2a8

0000e348 <prov_input_complete>:
    e348:	4770      	bx	lr

0000e34a <sys_memcpy_swap.constprop.19>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    e34a:	f101 0320 	add.w	r3, r1, #32
    e34e:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    e350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    e354:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
    e358:	428b      	cmp	r3, r1
    e35a:	d1f9      	bne.n	e350 <sys_memcpy_swap.constprop.19+0x6>
}
    e35c:	4770      	bx	lr
	...

0000e360 <buf_sent>:
	if (!link.tx.buf[0]) {
    e360:	4905      	ldr	r1, [pc, #20]	; (e378 <buf_sent+0x18>)
    e362:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
    e366:	b133      	cbz	r3, e376 <buf_sent+0x16>
    e368:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    e36c:	f501 71a4 	add.w	r1, r1, #328	; 0x148
    e370:	4802      	ldr	r0, [pc, #8]	; (e37c <buf_sent+0x1c>)
    e372:	f00a bd09 	b.w	18d88 <k_delayed_work_submit_to_queue>
    e376:	4770      	bx	lr
    e378:	20000be0 	.word	0x20000be0
    e37c:	20001dd8 	.word	0x20001dd8

0000e380 <atomic_test_bit.constprop.24>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e380:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e382:	4b07      	ldr	r3, [pc, #28]	; (e3a0 <atomic_test_bit.constprop.24+0x20>)
    e384:	f3bf 8f5b 	dmb	ish
    e388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    e38c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    e390:	f000 001f 	and.w	r0, r0, #31
    e394:	fa43 f000 	asr.w	r0, r3, r0
}
    e398:	f000 0001 	and.w	r0, r0, #1
    e39c:	4770      	bx	lr
    e39e:	bf00      	nop
    e3a0:	20000be0 	.word	0x20000be0

0000e3a4 <prov_complete>:
    e3a4:	4770      	bx	lr

0000e3a6 <prov_capabilities>:
    e3a6:	4770      	bx	lr

0000e3a8 <free_segments>:
{
    e3a8:	b570      	push	{r4, r5, r6, lr}
    e3aa:	4c0c      	ldr	r4, [pc, #48]	; (e3dc <free_segments+0x34>)
		link.tx.buf[i] = NULL;
    e3ac:	2500      	movs	r5, #0
    e3ae:	f104 060c 	add.w	r6, r4, #12
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e3b2:	42b4      	cmp	r4, r6
    e3b4:	d100      	bne.n	e3b8 <free_segments+0x10>
    e3b6:	bd70      	pop	{r4, r5, r6, pc}
		struct net_buf *buf = link.tx.buf[i];
    e3b8:	f854 0f04 	ldr.w	r0, [r4, #4]!
		if (!buf) {
    e3bc:	2800      	cmp	r0, #0
    e3be:	d0fa      	beq.n	e3b6 <free_segments+0xe>
		link.tx.buf[i] = NULL;
    e3c0:	6025      	str	r5, [r4, #0]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e3c2:	89c3      	ldrh	r3, [r0, #14]
    e3c4:	4403      	add	r3, r0
    e3c6:	3313      	adds	r3, #19
    e3c8:	f023 0303 	bic.w	r3, r3, #3
		BT_MESH_ADV(buf)->busy = 0;
    e3cc:	681b      	ldr	r3, [r3, #0]
    e3ce:	7a1a      	ldrb	r2, [r3, #8]
    e3d0:	f365 0282 	bfi	r2, r5, #2, #1
    e3d4:	721a      	strb	r2, [r3, #8]
		net_buf_unref(buf);
    e3d6:	f009 fbb5 	bl	17b44 <net_buf_unref>
    e3da:	e7ea      	b.n	e3b2 <free_segments+0xa>
    e3dc:	20000d18 	.word	0x20000d18

0000e3e0 <prov_clear_tx>:
{
    e3e0:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&link.tx.retransmit);
    e3e2:	4803      	ldr	r0, [pc, #12]	; (e3f0 <prov_clear_tx+0x10>)
    e3e4:	f00a fc84 	bl	18cf0 <k_delayed_work_cancel>
}
    e3e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
    e3ec:	f7ff bfdc 	b.w	e3a8 <free_segments>
    e3f0:	20000d28 	.word	0x20000d28

0000e3f4 <gen_prov_ack>:

static void gen_prov_ack(struct prov_rx *rx, struct net_buf_simple *buf)
{
	BT_DBG("len %u", buf->len);

	if (!link.tx.buf[0]) {
    e3f4:	4b05      	ldr	r3, [pc, #20]	; (e40c <gen_prov_ack+0x18>)
    e3f6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    e3fa:	b132      	cbz	r2, e40a <gen_prov_ack+0x16>
		return;
	}

	if (rx->xact_id == link.tx.id) {
    e3fc:	7902      	ldrb	r2, [r0, #4]
    e3fe:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
    e402:	429a      	cmp	r2, r3
    e404:	d101      	bne.n	e40a <gen_prov_ack+0x16>
		prov_clear_tx();
    e406:	f7ff bfeb 	b.w	e3e0 <prov_clear_tx>
    e40a:	4770      	bx	lr
    e40c:	20000be0 	.word	0x20000be0

0000e410 <bearer_ctl_send>:
{
    e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e414:	4604      	mov	r4, r0
    e416:	4688      	mov	r8, r1
    e418:	4691      	mov	r9, r2
	prov_clear_tx();
    e41a:	f7ff ffe1 	bl	e3e0 <prov_clear_tx>
	buf = adv_buf_create();
    e41e:	f7ff ff26 	bl	e26e <adv_buf_create>
	if (!buf) {
    e422:	4606      	mov	r6, r0
    e424:	b1f0      	cbz	r0, e464 <bearer_ctl_send+0x54>
	net_buf_add_be32(buf, link.id);
    e426:	4f11      	ldr	r7, [pc, #68]	; (e46c <bearer_ctl_send+0x5c>)
    e428:	f100 0508 	add.w	r5, r0, #8
    e42c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
    e430:	4628      	mov	r0, r5
    e432:	f009 fbde 	bl	17bf2 <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
    e436:	2100      	movs	r1, #0
    e438:	4628      	mov	r0, r5
    e43a:	f009 fbb2 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
    e43e:	00a1      	lsls	r1, r4, #2
    e440:	f041 0103 	orr.w	r1, r1, #3
    e444:	b2c9      	uxtb	r1, r1
    e446:	4628      	mov	r0, r5
    e448:	f009 fbab 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
    e44c:	464a      	mov	r2, r9
    e44e:	4641      	mov	r1, r8
    e450:	4628      	mov	r0, r5
    e452:	f009 fb9d 	bl	17b90 <net_buf_simple_add_mem>
	link.tx.buf[0] = buf;
    e456:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
	send_reliable();
    e45a:	f7ff ff0f 	bl	e27c <send_reliable>
	return 0;
    e45e:	2000      	movs	r0, #0
    e460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
    e464:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    e468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e46c:	20000be0 	.word	0x20000be0

0000e470 <prov_send>:
{
    e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (link.conn) {
    e474:	4e4e      	ldr	r6, [pc, #312]	; (e5b0 <prov_send+0x140>)
{
    e476:	4604      	mov	r4, r0
	if (link.conn) {
    e478:	6870      	ldr	r0, [r6, #4]
    e47a:	b128      	cbz	r0, e488 <prov_send+0x18>
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
    e47c:	4622      	mov	r2, r4
    e47e:	2103      	movs	r1, #3
}
    e480:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, msg);
    e484:	f001 ba3b 	b.w	f8fe <bt_mesh_proxy_send>
	prov_clear_tx();
    e488:	f7ff ffaa 	bl	e3e0 <prov_clear_tx>
	start = adv_buf_create();
    e48c:	f7ff feef 	bl	e26e <adv_buf_create>
	if (!start) {
    e490:	4680      	mov	r8, r0
    e492:	2800      	cmp	r0, #0
    e494:	d060      	beq.n	e558 <prov_send+0xe8>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
    e496:	f896 5138 	ldrb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
    e49a:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    e49e:	f8df 9114 	ldr.w	r9, [pc, #276]	; e5b4 <prov_send+0x144>
	if (link.tx.id != 0 && link.tx.id != 0xFF) {
    e4a2:	1e6b      	subs	r3, r5, #1
    e4a4:	b2db      	uxtb	r3, r3
    e4a6:	2bfd      	cmp	r3, #253	; 0xfd
		return ++link.tx.id;
    e4a8:	bf98      	it	ls
    e4aa:	3501      	addls	r5, #1
	net_buf_add_be32(start, link.id);
    e4ac:	f100 0708 	add.w	r7, r0, #8
		return ++link.tx.id;
    e4b0:	bf94      	ite	ls
    e4b2:	b2ed      	uxtbls	r5, r5
	link.tx.id = 0x80;
    e4b4:	2580      	movhi	r5, #128	; 0x80
	net_buf_add_be32(start, link.id);
    e4b6:	4638      	mov	r0, r7
	link.tx.id = 0x80;
    e4b8:	f886 5138 	strb.w	r5, [r6, #312]	; 0x138
	net_buf_add_be32(start, link.id);
    e4bc:	f009 fb99 	bl	17bf2 <net_buf_simple_add_be32>
	net_buf_add_u8(start, xact_id);
    e4c0:	4629      	mov	r1, r5
    e4c2:	4638      	mov	r0, r7
    e4c4:	f009 fb6d 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    e4c8:	7923      	ldrb	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
    e4ca:	2b14      	cmp	r3, #20
	len -= START_PAYLOAD_MAX;
    e4cc:	bf81      	itttt	hi
    e4ce:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
    e4d2:	b2c9      	uxtbhi	r1, r1
    e4d4:	2317      	movhi	r3, #23
    e4d6:	fbb1 f1f3 	udivhi	r1, r1, r3
    e4da:	bf86      	itte	hi
    e4dc:	3101      	addhi	r1, #1
    e4de:	b2c9      	uxtbhi	r1, r1
		return 0;
    e4e0:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
    e4e2:	0089      	lsls	r1, r1, #2
    e4e4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    e4e8:	4638      	mov	r0, r7
    e4ea:	f009 fb5a 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
    e4ee:	88a1      	ldrh	r1, [r4, #4]
    e4f0:	4638      	mov	r0, r7
    e4f2:	f009 fb6d 	bl	17bd0 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
    e4f6:	7921      	ldrb	r1, [r4, #4]
    e4f8:	6820      	ldr	r0, [r4, #0]
    e4fa:	f7fc fa07 	bl	a90c <bt_mesh_fcs_calc>
    e4fe:	4601      	mov	r1, r0
    e500:	4638      	mov	r0, r7
    e502:	f009 fb4e 	bl	17ba2 <net_buf_simple_add_u8>
	link.tx.buf[0] = start;
    e506:	f8c6 813c 	str.w	r8, [r6, #316]	; 0x13c
	seg_len = min(msg->len, START_PAYLOAD_MAX);
    e50a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
    e50e:	6821      	ldr	r1, [r4, #0]
	seg_len = min(msg->len, START_PAYLOAD_MAX);
    e510:	f1b8 0f14 	cmp.w	r8, #20
    e514:	bf28      	it	cs
    e516:	f04f 0814 	movcs.w	r8, #20
	net_buf_add_mem(start, msg->data, seg_len);
    e51a:	4642      	mov	r2, r8
    e51c:	4638      	mov	r0, r7
    e51e:	f009 fb37 	bl	17b90 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
    e522:	4641      	mov	r1, r8
    e524:	4620      	mov	r0, r4
    e526:	f009 fb98 	bl	17c5a <net_buf_simple_pull>
    e52a:	f04f 0804 	mov.w	r8, #4
	for (seg_id = 1; msg->len > 0; seg_id++) {
    e52e:	88a7      	ldrh	r7, [r4, #4]
    e530:	b927      	cbnz	r7, e53c <prov_send+0xcc>
	send_reliable();
    e532:	f7ff fea3 	bl	e27c <send_reliable>
	return 0;
    e536:	4638      	mov	r0, r7
    e538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
    e53c:	f1b8 0f0c 	cmp.w	r8, #12
    e540:	d105      	bne.n	e54e <prov_send+0xde>
			free_segments();
    e542:	f7ff ff31 	bl	e3a8 <free_segments>
			return -E2BIG;
    e546:	f06f 0006 	mvn.w	r0, #6
    e54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create();
    e54e:	f7ff fe8e 	bl	e26e <adv_buf_create>
		if (!buf) {
    e552:	b928      	cbnz	r0, e560 <prov_send+0xf0>
			free_segments();
    e554:	f7ff ff28 	bl	e3a8 <free_segments>
		return -ENOBUFS;
    e558:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
    e560:	f8b4 a004 	ldrh.w	sl, [r4, #4]
		link.tx.buf[seg_id] = buf;
    e564:	f849 0f04 	str.w	r0, [r9, #4]!
		net_buf_add_be32(buf, link.id);
    e568:	f100 0708 	add.w	r7, r0, #8
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
    e56c:	f1ba 0f17 	cmp.w	sl, #23
		net_buf_add_be32(buf, link.id);
    e570:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    e574:	4638      	mov	r0, r7
		seg_len = min(msg->len, CONT_PAYLOAD_MAX);
    e576:	bf28      	it	cs
    e578:	f04f 0a17 	movcs.w	sl, #23
		net_buf_add_be32(buf, link.id);
    e57c:	f009 fb39 	bl	17bf2 <net_buf_simple_add_be32>
		net_buf_add_u8(buf, xact_id);
    e580:	4629      	mov	r1, r5
    e582:	4638      	mov	r0, r7
    e584:	f009 fb0d 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
    e588:	f048 0102 	orr.w	r1, r8, #2
    e58c:	4638      	mov	r0, r7
    e58e:	f009 fb08 	bl	17ba2 <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
    e592:	4652      	mov	r2, sl
    e594:	6821      	ldr	r1, [r4, #0]
    e596:	4638      	mov	r0, r7
    e598:	f009 fafa 	bl	17b90 <net_buf_simple_add_mem>
    e59c:	f108 0804 	add.w	r8, r8, #4
		net_buf_simple_pull(msg, seg_len);
    e5a0:	4651      	mov	r1, sl
    e5a2:	4620      	mov	r0, r4
    e5a4:	f009 fb59 	bl	17c5a <net_buf_simple_pull>
    e5a8:	fa5f f888 	uxtb.w	r8, r8
    e5ac:	e7bf      	b.n	e52e <prov_send+0xbe>
    e5ae:	bf00      	nop
    e5b0:	20000be0 	.word	0x20000be0
    e5b4:	20000d1c 	.word	0x20000d1c

0000e5b8 <atomic_test_and_clear_bit.constprop.23>:
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
    e5b8:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    e5ba:	f000 021f 	and.w	r2, r0, #31
    e5be:	2301      	movs	r3, #1
    e5c0:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e5c2:	0942      	lsrs	r2, r0, #5
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e5c4:	480b      	ldr	r0, [pc, #44]	; (e5f4 <atomic_test_and_clear_bit.constprop.23+0x3c>)
    e5c6:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e5ca:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e5cc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    e5d0:	e850 2f00 	ldrex	r2, [r0]
    e5d4:	ea02 0e01 	and.w	lr, r2, r1
    e5d8:	e840 ec00 	strex	ip, lr, [r0]
    e5dc:	f1bc 0f00 	cmp.w	ip, #0
    e5e0:	d1f6      	bne.n	e5d0 <atomic_test_and_clear_bit.constprop.23+0x18>
    e5e2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    e5e6:	421a      	tst	r2, r3
}
    e5e8:	bf14      	ite	ne
    e5ea:	2001      	movne	r0, #1
    e5ec:	2000      	moveq	r0, #0
    e5ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f2:	bf00      	nop
    e5f4:	20000be0 	.word	0x20000be0

0000e5f8 <prov_send_fail_msg>:
{
    e5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct net_buf_simple *buf = PROV_BUF(2);
    e5fa:	2210      	movs	r2, #16
{
    e5fc:	4604      	mov	r4, r0
	struct net_buf_simple *buf = PROV_BUF(2);
    e5fe:	2100      	movs	r1, #0
    e600:	4668      	mov	r0, sp
    e602:	f7f2 f855 	bl	6b0 <memset>
    e606:	2307      	movs	r3, #7
    e608:	f8ad 3006 	strh.w	r3, [sp, #6]
	net_buf_simple_add_u8(buf, type);
    e60c:	2109      	movs	r1, #9
	buf->data = buf->__buf + reserve_head;
    e60e:	f10d 030d 	add.w	r3, sp, #13
    e612:	4668      	mov	r0, sp
    e614:	9300      	str	r3, [sp, #0]
    e616:	f009 fac4 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, err);
    e61a:	4621      	mov	r1, r4
    e61c:	4668      	mov	r0, sp
    e61e:	f009 fac0 	bl	17ba2 <net_buf_simple_add_u8>
	prov_send(buf);
    e622:	4668      	mov	r0, sp
    e624:	f7ff ff24 	bl	e470 <prov_send>
}
    e628:	b004      	add	sp, #16
    e62a:	bd10      	pop	{r4, pc}

0000e62c <prov_start>:
{
    e62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (data[0] != PROV_ALG_P256) {
    e630:	7803      	ldrb	r3, [r0, #0]
{
    e632:	b08b      	sub	sp, #44	; 0x2c
    e634:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
    e636:	b11b      	cbz	r3, e640 <prov_start+0x14>
		prov_send_fail_msg(PROV_ERR_NVAL_FMT);
    e638:	2002      	movs	r0, #2
    e63a:	f7ff ffdd 	bl	e5f8 <prov_send_fail_msg>
    e63e:	e01e      	b.n	e67e <prov_start+0x52>
	if (data[1] > 0x01) {
    e640:	7843      	ldrb	r3, [r0, #1]
    e642:	2b01      	cmp	r3, #1
    e644:	d8f8      	bhi.n	e638 <prov_start+0xc>
	memcpy(&link.conf_inputs[12], data, 5);
    e646:	4f65      	ldr	r7, [pc, #404]	; (e7dc <prov_start+0x1b0>)
    e648:	2205      	movs	r2, #5
    e64a:	4601      	mov	r1, r0
    e64c:	f107 0088 	add.w	r0, r7, #136	; 0x88
    e650:	f7f2 f802 	bl	658 <memcpy>
	link.expect = PROV_PUB_KEY;
    e654:	2303      	movs	r3, #3
    e656:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	switch (method) {
    e65a:	78a2      	ldrb	r2, [r4, #2]
	if (prov_auth(data[2], data[3], data[4]) < 0) {
    e65c:	78e3      	ldrb	r3, [r4, #3]
    e65e:	7925      	ldrb	r5, [r4, #4]
	switch (method) {
    e660:	2a03      	cmp	r2, #3
    e662:	d8e9      	bhi.n	e638 <prov_start+0xc>
    e664:	e8df f002 	tbb	[pc, r2]
    e668:	9c230e02 	.word	0x9c230e02
		if (action || size) {
    e66c:	2b00      	cmp	r3, #0
    e66e:	d1e3      	bne.n	e638 <prov_start+0xc>
    e670:	2d00      	cmp	r5, #0
    e672:	d1e1      	bne.n	e638 <prov_start+0xc>
		memset(link.auth, 0, sizeof(link.auth));
    e674:	485a      	ldr	r0, [pc, #360]	; (e7e0 <prov_start+0x1b4>)
    e676:	2210      	movs	r2, #16
    e678:	4629      	mov	r1, r5
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
    e67a:	f7f2 f819 	bl	6b0 <memset>
}
    e67e:	b00b      	add	sp, #44	; 0x2c
    e680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (action || size) {
    e684:	2b00      	cmp	r3, #0
    e686:	d1d7      	bne.n	e638 <prov_start+0xc>
    e688:	2d00      	cmp	r5, #0
    e68a:	d1d5      	bne.n	e638 <prov_start+0xc>
		memcpy(link.auth + 16 - prov->static_val_len,
    e68c:	4e55      	ldr	r6, [pc, #340]	; (e7e4 <prov_start+0x1b8>)
    e68e:	4c54      	ldr	r4, [pc, #336]	; (e7e0 <prov_start+0x1b4>)
    e690:	6833      	ldr	r3, [r6, #0]
    e692:	7a1a      	ldrb	r2, [r3, #8]
    e694:	6859      	ldr	r1, [r3, #4]
    e696:	f1c2 0010 	rsb	r0, r2, #16
    e69a:	4420      	add	r0, r4
    e69c:	f7f1 ffdc 	bl	658 <memcpy>
		memset(link.auth, 0, sizeof(link.auth) - prov->static_val_len);
    e6a0:	6833      	ldr	r3, [r6, #0]
    e6a2:	7a1a      	ldrb	r2, [r3, #8]
    e6a4:	4629      	mov	r1, r5
    e6a6:	f1c2 0210 	rsb	r2, r2, #16
    e6aa:	4620      	mov	r0, r4
    e6ac:	e7e5      	b.n	e67a <prov_start+0x4e>
    e6ae:	2b04      	cmp	r3, #4
    e6b0:	d8c2      	bhi.n	e638 <prov_start+0xc>
    e6b2:	4a4d      	ldr	r2, [pc, #308]	; (e7e8 <prov_start+0x1bc>)
    e6b4:	f812 8003 	ldrb.w	r8, [r2, r3]
		if (!output) {
    e6b8:	f1b8 0f00 	cmp.w	r8, #0
    e6bc:	d0bc      	beq.n	e638 <prov_start+0xc>
		if (!(prov->output_actions & output)) {
    e6be:	f8df 9124 	ldr.w	r9, [pc, #292]	; e7e4 <prov_start+0x1b8>
    e6c2:	f8d9 3000 	ldr.w	r3, [r9]
    e6c6:	895a      	ldrh	r2, [r3, #10]
    e6c8:	ea12 0f08 	tst.w	r2, r8
    e6cc:	464e      	mov	r6, r9
    e6ce:	d0b3      	beq.n	e638 <prov_start+0xc>
		if (size > prov->output_size) {
    e6d0:	7a5b      	ldrb	r3, [r3, #9]
    e6d2:	42ab      	cmp	r3, r5
    e6d4:	d3b0      	bcc.n	e638 <prov_start+0xc>
		if (output == BT_MESH_DISPLAY_STRING) {
    e6d6:	f1b8 0f10 	cmp.w	r8, #16
    e6da:	ac02      	add	r4, sp, #8
    e6dc:	d131      	bne.n	e742 <prov_start+0x116>
			bt_rand(str, size);
    e6de:	4629      	mov	r1, r5
    e6e0:	4620      	mov	r0, r4
    e6e2:	f002 fb19 	bl	10d18 <bt_rand>
    e6e6:	4622      	mov	r2, r4
				str[i] %= 36;
    e6e8:	2124      	movs	r1, #36	; 0x24
			for (i = 0; i < size; i++) {
    e6ea:	1b13      	subs	r3, r2, r4
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	429d      	cmp	r5, r3
    e6f0:	d818      	bhi.n	e724 <prov_start+0xf8>
			memcpy(link.auth, str, size);
    e6f2:	4f3b      	ldr	r7, [pc, #236]	; (e7e0 <prov_start+0x1b4>)
			str[size] = '\0';
    e6f4:	ab0a      	add	r3, sp, #40	; 0x28
    e6f6:	442b      	add	r3, r5
    e6f8:	f04f 0800 	mov.w	r8, #0
			memcpy(link.auth, str, size);
    e6fc:	462a      	mov	r2, r5
    e6fe:	4621      	mov	r1, r4
    e700:	4638      	mov	r0, r7
			str[size] = '\0';
    e702:	f803 8c20 	strb.w	r8, [r3, #-32]
			memcpy(link.auth, str, size);
    e706:	f7f1 ffa7 	bl	658 <memcpy>
			memset(link.auth + size, 0, sizeof(link.auth) - size);
    e70a:	f1c5 0210 	rsb	r2, r5, #16
    e70e:	4641      	mov	r1, r8
    e710:	1978      	adds	r0, r7, r5
    e712:	f7f1 ffcd 	bl	6b0 <memset>
			return prov->output_string((char *)str);
    e716:	6833      	ldr	r3, [r6, #0]
    e718:	4620      	mov	r0, r4
    e71a:	695b      	ldr	r3, [r3, #20]
    e71c:	4798      	blx	r3
	if (prov_auth(data[2], data[3], data[4]) < 0) {
    e71e:	2800      	cmp	r0, #0
    e720:	daad      	bge.n	e67e <prov_start+0x52>
    e722:	e789      	b.n	e638 <prov_start+0xc>
				str[i] %= 36;
    e724:	7810      	ldrb	r0, [r2, #0]
    e726:	fbb0 f3f1 	udiv	r3, r0, r1
    e72a:	fb01 0313 	mls	r3, r1, r3, r0
    e72e:	b2db      	uxtb	r3, r3
    e730:	f802 3b01 	strb.w	r3, [r2], #1
				if (str[i] < 10) {
    e734:	2b09      	cmp	r3, #9
					str[i] += '0';
    e736:	bf94      	ite	ls
    e738:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
    e73a:	3337      	addhi	r3, #55	; 0x37
    e73c:	f802 3c01 	strb.w	r3, [r2, #-1]
    e740:	e7d3      	b.n	e6ea <prov_start+0xbe>
			u32_t div[8] = { 10, 100, 1000, 10000, 100000,
    e742:	4e2a      	ldr	r6, [pc, #168]	; (e7ec <prov_start+0x1c0>)
    e744:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e74c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
    e750:	2104      	movs	r1, #4
    e752:	eb0d 0001 	add.w	r0, sp, r1
    e756:	f002 fadf 	bl	10d18 <bt_rand>
			num %= div[size - 1];
    e75a:	ab0a      	add	r3, sp, #40	; 0x28
    e75c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e760:	9901      	ldr	r1, [sp, #4]
    e762:	f855 2c24 	ldr.w	r2, [r5, #-36]
    e766:	fbb1 f3f2 	udiv	r3, r1, r2
    e76a:	fb02 1313 	mls	r3, r2, r3, r1
	sys_put_be16(val >> 16, dst);
    e76e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
    e770:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
    e772:	f887 2059 	strb.w	r2, [r7, #89]	; 0x59
	dst[0] = val >> 8;
    e776:	f3c3 2207 	ubfx	r2, r3, #8, #8
    e77a:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
    e77e:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	dst[1] = val;
    e782:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			memset(link.auth, 0, 12);
    e786:	220c      	movs	r2, #12
    e788:	2100      	movs	r1, #0
    e78a:	4815      	ldr	r0, [pc, #84]	; (e7e0 <prov_start+0x1b4>)
			num %= div[size - 1];
    e78c:	9301      	str	r3, [sp, #4]
			memset(link.auth, 0, 12);
    e78e:	f7f1 ff8f 	bl	6b0 <memset>
			return prov->output_number(output, num);
    e792:	f8d9 3000 	ldr.w	r3, [r9]
    e796:	9901      	ldr	r1, [sp, #4]
    e798:	691b      	ldr	r3, [r3, #16]
    e79a:	4640      	mov	r0, r8
    e79c:	4798      	blx	r3
    e79e:	e7be      	b.n	e71e <prov_start+0xf2>
    e7a0:	2b03      	cmp	r3, #3
    e7a2:	f63f af49 	bhi.w	e638 <prov_start+0xc>
    e7a6:	4a12      	ldr	r2, [pc, #72]	; (e7f0 <prov_start+0x1c4>)
    e7a8:	5cd4      	ldrb	r4, [r2, r3]
		if (!input) {
    e7aa:	2c00      	cmp	r4, #0
    e7ac:	f43f af44 	beq.w	e638 <prov_start+0xc>
		if (!(prov->input_actions & input)) {
    e7b0:	4b0c      	ldr	r3, [pc, #48]	; (e7e4 <prov_start+0x1b8>)
    e7b2:	681e      	ldr	r6, [r3, #0]
    e7b4:	89f3      	ldrh	r3, [r6, #14]
    e7b6:	4223      	tst	r3, r4
    e7b8:	f43f af3e 	beq.w	e638 <prov_start+0xc>
		if (size > prov->input_size) {
    e7bc:	7b33      	ldrb	r3, [r6, #12]
    e7be:	42ab      	cmp	r3, r5
    e7c0:	f4ff af3a 	bcc.w	e638 <prov_start+0xc>
		if (input == BT_MESH_ENTER_STRING) {
    e7c4:	2c08      	cmp	r4, #8
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    e7c6:	bf0c      	ite	eq
    e7c8:	2140      	moveq	r1, #64	; 0x40
    e7ca:	2120      	movne	r1, #32
    e7cc:	4803      	ldr	r0, [pc, #12]	; (e7dc <prov_start+0x1b0>)
    e7ce:	f7ff fd75 	bl	e2bc <atomic_or>
		return prov->input(input, size);
    e7d2:	69b3      	ldr	r3, [r6, #24]
    e7d4:	4629      	mov	r1, r5
    e7d6:	4620      	mov	r0, r4
    e7d8:	4798      	blx	r3
    e7da:	e7a0      	b.n	e71e <prov_start+0xf2>
    e7dc:	20000be0 	.word	0x20000be0
    e7e0:	20000c2c 	.word	0x20000c2c
    e7e4:	20000d50 	.word	0x20000d50
    e7e8:	0001a29c 	.word	0x0001a29c
    e7ec:	0001945c 	.word	0x0001945c
    e7f0:	0001a2a1 	.word	0x0001a2a1

0000e7f4 <reset_link>:
{
    e7f4:	b510      	push	{r4, lr}
	prov_clear_tx();
    e7f6:	f7ff fdf3 	bl	e3e0 <prov_clear_tx>
	if (prov->link_close) {
    e7fa:	4b12      	ldr	r3, [pc, #72]	; (e844 <reset_link+0x50>)
    e7fc:	681b      	ldr	r3, [r3, #0]
    e7fe:	6a1b      	ldr	r3, [r3, #32]
    e800:	b10b      	cbz	r3, e806 <reset_link+0x12>
		prov->link_close(BT_MESH_PROV_ADV);
    e802:	2001      	movs	r0, #1
    e804:	4798      	blx	r3
	memset(&link, 0, offsetof(struct prov_link, tx.retransmit));
    e806:	4c10      	ldr	r4, [pc, #64]	; (e848 <reset_link+0x54>)
    e808:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e80c:	2100      	movs	r1, #0
    e80e:	4620      	mov	r0, r4
    e810:	f7f1 ff4e 	bl	6b0 <memset>
	link.rx.prev_id = XACT_NVAL;
    e814:	23ff      	movs	r3, #255	; 0xff
    e816:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (bt_pub_key_get()) {
    e81a:	f7f6 fc93 	bl	5144 <bt_pub_key_get>
    e81e:	b118      	cbz	r0, e828 <reset_link+0x34>
    e820:	2102      	movs	r1, #2
    e822:	4620      	mov	r0, r4
    e824:	f7ff fd4a 	bl	e2bc <atomic_or>
	link.rx.buf = bt_mesh_proxy_get_buf();
    e828:	f000 ffdc 	bl	f7e4 <bt_mesh_proxy_get_buf>
	if (link.conf_inputs[0]) {
    e82c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
	link.rx.buf = bt_mesh_proxy_get_buf();
    e830:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	if (link.conf_inputs[0]) {
    e834:	b12b      	cbz	r3, e842 <reset_link+0x4e>
		bt_mesh_attention(NULL, 0);
    e836:	2100      	movs	r1, #0
    e838:	4608      	mov	r0, r1
}
    e83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_attention(NULL, 0);
    e83e:	f7fe bdc5 	b.w	d3cc <bt_mesh_attention>
    e842:	bd10      	pop	{r4, pc}
    e844:	20000d50 	.word	0x20000d50
    e848:	20000be0 	.word	0x20000be0

0000e84c <gen_prov_ctl>:
{
    e84c:	b570      	push	{r4, r5, r6, lr}
    e84e:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
    e850:	7940      	ldrb	r0, [r0, #5]
    e852:	0880      	lsrs	r0, r0, #2
    e854:	2801      	cmp	r0, #1
{
    e856:	460e      	mov	r6, r1
	switch (BEARER_CTL(rx->gpc)) {
    e858:	d02e      	beq.n	e8b8 <gen_prov_ctl+0x6c>
    e85a:	d302      	bcc.n	e862 <gen_prov_ctl+0x16>
    e85c:	2802      	cmp	r0, #2
    e85e:	d030      	beq.n	e8c2 <gen_prov_ctl+0x76>
    e860:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len < 16) {
    e862:	888b      	ldrh	r3, [r1, #4]
    e864:	2b0f      	cmp	r3, #15
    e866:	d933      	bls.n	e8d0 <gen_prov_ctl+0x84>
	if (atomic_test_bit(link.flags, LINK_ACTIVE)) {
    e868:	2002      	movs	r0, #2
    e86a:	f7ff fd89 	bl	e380 <atomic_test_bit.constprop.24>
    e86e:	bb78      	cbnz	r0, e8d0 <gen_prov_ctl+0x84>
	if (memcmp(buf->data, prov->uuid, 16)) {
    e870:	4d18      	ldr	r5, [pc, #96]	; (e8d4 <gen_prov_ctl+0x88>)
    e872:	6830      	ldr	r0, [r6, #0]
    e874:	682b      	ldr	r3, [r5, #0]
    e876:	2210      	movs	r2, #16
    e878:	6819      	ldr	r1, [r3, #0]
    e87a:	f7f1 fed8 	bl	62e <memcmp>
    e87e:	bb38      	cbnz	r0, e8d0 <gen_prov_ctl+0x84>
	if (prov->link_open) {
    e880:	682b      	ldr	r3, [r5, #0]
    e882:	69db      	ldr	r3, [r3, #28]
    e884:	b10b      	cbz	r3, e88a <gen_prov_ctl+0x3e>
		prov->link_open(BT_MESH_PROV_ADV);
    e886:	2001      	movs	r0, #1
    e888:	4798      	blx	r3
	link.id = rx->link_id;
    e88a:	6823      	ldr	r3, [r4, #0]
    e88c:	4c12      	ldr	r4, [pc, #72]	; (e8d8 <gen_prov_ctl+0x8c>)
    e88e:	2104      	movs	r1, #4
    e890:	4620      	mov	r0, r4
    e892:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e896:	f7ff fd11 	bl	e2bc <atomic_or>
	net_buf_simple_init(link.rx.buf, 0);
    e89a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	buf->len = 0;
    e89e:	2500      	movs	r5, #0
	buf->data = buf->__buf + reserve_head;
    e8a0:	f103 0208 	add.w	r2, r3, #8
    e8a4:	601a      	str	r2, [r3, #0]
	buf->len = 0;
    e8a6:	809d      	strh	r5, [r3, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0);
    e8a8:	462a      	mov	r2, r5
    e8aa:	4629      	mov	r1, r5
    e8ac:	2001      	movs	r0, #1
    e8ae:	f7ff fdaf 	bl	e410 <bearer_ctl_send>
	link.expect = PROV_INVITE;
    e8b2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    e8b6:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
    e8b8:	2002      	movs	r0, #2
}
    e8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
    e8be:	f7ff bd5f 	b.w	e380 <atomic_test_bit.constprop.24>
		if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
    e8c2:	f7ff fd5d 	bl	e380 <atomic_test_bit.constprop.24>
    e8c6:	b118      	cbz	r0, e8d0 <gen_prov_ctl+0x84>
}
    e8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	reset_link();
    e8cc:	f7ff bf92 	b.w	e7f4 <reset_link>
    e8d0:	bd70      	pop	{r4, r5, r6, pc}
    e8d2:	bf00      	nop
    e8d4:	20000d50 	.word	0x20000d50
    e8d8:	20000be0 	.word	0x20000be0

0000e8dc <prov_retransmit>:
{
    e8dc:	b570      	push	{r4, r5, r6, lr}
	if (!atomic_test_bit(link.flags, LINK_ACTIVE)) {
    e8de:	2002      	movs	r0, #2
    e8e0:	f7ff fd4e 	bl	e380 <atomic_test_bit.constprop.24>
    e8e4:	b378      	cbz	r0, e946 <prov_retransmit+0x6a>
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
    e8e6:	4c18      	ldr	r4, [pc, #96]	; (e948 <prov_retransmit+0x6c>)
    e8e8:	f009 ff4e 	bl	18788 <_impl_k_uptime_get>
    e8ec:	e9d4 2300 	ldrd	r2, r3, [r4]
    e8f0:	1a80      	subs	r0, r0, r2
    e8f2:	f247 5230 	movw	r2, #30000	; 0x7530
    e8f6:	eb61 0103 	sbc.w	r1, r1, r3
    e8fa:	2300      	movs	r3, #0
    e8fc:	4282      	cmp	r2, r0
    e8fe:	418b      	sbcs	r3, r1
    e900:	db1d      	blt.n	e93e <prov_retransmit+0x62>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e902:	4e12      	ldr	r6, [pc, #72]	; (e94c <prov_retransmit+0x70>)
    e904:	340c      	adds	r4, #12
	if (k_uptime_get() - link.tx.start > TRANSACTION_TIMEOUT) {
    e906:	2501      	movs	r5, #1
		struct net_buf *buf = link.tx.buf[i];
    e908:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
    e90c:	b1d8      	cbz	r0, e946 <prov_retransmit+0x6a>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e90e:	89c3      	ldrh	r3, [r0, #14]
    e910:	4403      	add	r3, r0
    e912:	3313      	adds	r3, #19
    e914:	f023 0303 	bic.w	r3, r3, #3
		if (BT_MESH_ADV(buf)->busy) {
    e918:	681b      	ldr	r3, [r3, #0]
    e91a:	7a1a      	ldrb	r2, [r3, #8]
    e91c:	f012 0204 	ands.w	r2, r2, #4
    e920:	d106      	bne.n	e930 <prov_retransmit+0x54>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
    e922:	2d03      	cmp	r5, #3
    e924:	d008      	beq.n	e938 <prov_retransmit+0x5c>
    e926:	6823      	ldr	r3, [r4, #0]
    e928:	b133      	cbz	r3, e938 <prov_retransmit+0x5c>
			bt_mesh_adv_send(buf, NULL, NULL);
    e92a:	4611      	mov	r1, r2
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e92c:	f7f9 f922 	bl	7b74 <bt_mesh_adv_send>
    e930:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
    e932:	2d04      	cmp	r5, #4
    e934:	d1e8      	bne.n	e908 <prov_retransmit+0x2c>
    e936:	bd70      	pop	{r4, r5, r6, pc}
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
    e938:	2200      	movs	r2, #0
    e93a:	4631      	mov	r1, r6
    e93c:	e7f6      	b.n	e92c <prov_retransmit+0x50>
}
    e93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		reset_link();
    e942:	f7ff bf57 	b.w	e7f4 <reset_link>
    e946:	bd70      	pop	{r4, r5, r6, pc}
    e948:	20000d10 	.word	0x20000d10
    e94c:	20006708 	.word	0x20006708

0000e950 <bt_mesh_pb_gatt_recv>:
}
#endif /* CONFIG_BT_MESH_PB_ADV */

#if defined(CONFIG_BT_MESH_PB_GATT)
int bt_mesh_pb_gatt_recv(struct bt_conn *conn, struct net_buf_simple *buf)
{
    e950:	b538      	push	{r3, r4, r5, lr}
	u8_t type;

	BT_DBG("%u bytes: %s", buf->len, bt_hex(buf->data, buf->len));

	if (link.conn != conn) {
    e952:	4d12      	ldr	r5, [pc, #72]	; (e99c <bt_mesh_pb_gatt_recv+0x4c>)
    e954:	686b      	ldr	r3, [r5, #4]
    e956:	4283      	cmp	r3, r0
{
    e958:	460c      	mov	r4, r1
	if (link.conn != conn) {
    e95a:	d11c      	bne.n	e996 <bt_mesh_pb_gatt_recv+0x46>
		BT_WARN("Data for unexpected connection");
		return -ENOTCONN;
	}

	if (buf->len < 1) {
    e95c:	888b      	ldrh	r3, [r1, #4]
    e95e:	b913      	cbnz	r3, e966 <bt_mesh_pb_gatt_recv+0x16>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
		return -EINVAL;
    e960:	f06f 0015 	mvn.w	r0, #21
    e964:	bd38      	pop	{r3, r4, r5, pc}
	}

	type = net_buf_simple_pull_u8(buf);
    e966:	4608      	mov	r0, r1
    e968:	f009 f97f 	bl	17c6a <net_buf_simple_pull_u8>
	if (type != PROV_FAILED && type != link.expect) {
    e96c:	2809      	cmp	r0, #9
    e96e:	d005      	beq.n	e97c <bt_mesh_pb_gatt_recv+0x2c>
    e970:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e974:	4283      	cmp	r3, r0
    e976:	d1f3      	bne.n	e960 <bt_mesh_pb_gatt_recv+0x10>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, link.expect);
		return -EINVAL;
	}

	if (type >= ARRAY_SIZE(prov_handlers)) {
    e978:	2809      	cmp	r0, #9
    e97a:	d8f1      	bhi.n	e960 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
		return -EINVAL;
	}

	if (prov_handlers[type].len != buf->len) {
    e97c:	4b08      	ldr	r3, [pc, #32]	; (e9a0 <bt_mesh_pb_gatt_recv+0x50>)
    e97e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    e982:	8891      	ldrh	r1, [r2, #4]
    e984:	88a2      	ldrh	r2, [r4, #4]
    e986:	4291      	cmp	r1, r2
    e988:	d1ea      	bne.n	e960 <bt_mesh_pb_gatt_recv+0x10>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
		return -EINVAL;
	}

	prov_handlers[type].func(buf->data);
    e98a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    e98e:	6820      	ldr	r0, [r4, #0]
    e990:	4798      	blx	r3

	return 0;
    e992:	2000      	movs	r0, #0
    e994:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    e996:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    e99a:	bd38      	pop	{r3, r4, r5, pc}
    e99c:	20000be0 	.word	0x20000be0
    e9a0:	0001a2e0 	.word	0x0001a2e0

0000e9a4 <bt_mesh_pb_gatt_open>:

int bt_mesh_pb_gatt_open(struct bt_conn *conn)
{
    e9a4:	b570      	push	{r4, r5, r6, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e9a6:	4c0e      	ldr	r4, [pc, #56]	; (e9e0 <bt_mesh_pb_gatt_open+0x3c>)
    e9a8:	4606      	mov	r6, r0
    e9aa:	2104      	movs	r1, #4
    e9ac:	4620      	mov	r0, r4
    e9ae:	f7ff fc85 	bl	e2bc <atomic_or>
	BT_DBG("conn %p", conn);

	if (atomic_test_and_set_bit(link.flags, LINK_ACTIVE)) {
    e9b2:	f010 0504 	ands.w	r5, r0, #4
    e9b6:	d10d      	bne.n	e9d4 <bt_mesh_pb_gatt_open+0x30>
		return -EBUSY;
	}

	link.conn = bt_conn_ref(conn);
    e9b8:	4630      	mov	r0, r6
    e9ba:	f7f6 ff31 	bl	5820 <bt_conn_ref>
	link.expect = PROV_INVITE;

	if (prov->link_open) {
    e9be:	4b09      	ldr	r3, [pc, #36]	; (e9e4 <bt_mesh_pb_gatt_open+0x40>)
	link.expect = PROV_INVITE;
    e9c0:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	if (prov->link_open) {
    e9c4:	681b      	ldr	r3, [r3, #0]
	link.conn = bt_conn_ref(conn);
    e9c6:	6060      	str	r0, [r4, #4]
	if (prov->link_open) {
    e9c8:	69db      	ldr	r3, [r3, #28]
    e9ca:	b133      	cbz	r3, e9da <bt_mesh_pb_gatt_open+0x36>
		prov->link_open(BT_MESH_PROV_GATT);
    e9cc:	2002      	movs	r0, #2
    e9ce:	4798      	blx	r3
	}

	return 0;
    e9d0:	4628      	mov	r0, r5
    e9d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    e9d4:	f06f 000f 	mvn.w	r0, #15
    e9d8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    e9da:	4618      	mov	r0, r3
}
    e9dc:	bd70      	pop	{r4, r5, r6, pc}
    e9de:	bf00      	nop
    e9e0:	20000be0 	.word	0x20000be0
    e9e4:	20000d50 	.word	0x20000d50

0000e9e8 <bt_mesh_pb_gatt_close>:

int bt_mesh_pb_gatt_close(struct bt_conn *conn)
{
    e9e8:	b510      	push	{r4, lr}
	bool pub_key;

	BT_DBG("conn %p", conn);

	if (link.conn != conn) {
    e9ea:	4c14      	ldr	r4, [pc, #80]	; (ea3c <bt_mesh_pb_gatt_close+0x54>)
    e9ec:	6863      	ldr	r3, [r4, #4]
    e9ee:	4283      	cmp	r3, r0
    e9f0:	d121      	bne.n	ea36 <bt_mesh_pb_gatt_close+0x4e>
		BT_ERR("Not connected");
		return -ENOTCONN;
	}

	/* Disable Attention Timer if it was set */
	if (link.conf_inputs[0]) {
    e9f2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    e9f6:	b11b      	cbz	r3, ea00 <bt_mesh_pb_gatt_close+0x18>
		bt_mesh_attention(NULL, 0);
    e9f8:	2100      	movs	r1, #0
    e9fa:	4608      	mov	r0, r1
    e9fc:	f7fe fce6 	bl	d3cc <bt_mesh_attention>
	}

	if (prov->link_close) {
    ea00:	4b0f      	ldr	r3, [pc, #60]	; (ea40 <bt_mesh_pb_gatt_close+0x58>)
    ea02:	681b      	ldr	r3, [r3, #0]
    ea04:	6a1b      	ldr	r3, [r3, #32]
    ea06:	b10b      	cbz	r3, ea0c <bt_mesh_pb_gatt_close+0x24>
		prov->link_close(BT_MESH_PROV_GATT);
    ea08:	2002      	movs	r0, #2
    ea0a:	4798      	blx	r3
	}

	bt_conn_unref(link.conn);
    ea0c:	6860      	ldr	r0, [r4, #4]
    ea0e:	f7f6 ff0e 	bl	582e <bt_conn_unref>

	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
    ea12:	2001      	movs	r0, #1
    ea14:	f7ff fcb4 	bl	e380 <atomic_test_bit.constprop.24>
	memset(&link, 0, sizeof(link));
    ea18:	f44f 72b8 	mov.w	r2, #368	; 0x170
	pub_key = atomic_test_bit(link.flags, LOCAL_PUB_KEY);
    ea1c:	4604      	mov	r4, r0
	memset(&link, 0, sizeof(link));
    ea1e:	2100      	movs	r1, #0
    ea20:	4806      	ldr	r0, [pc, #24]	; (ea3c <bt_mesh_pb_gatt_close+0x54>)
    ea22:	f7f1 fe45 	bl	6b0 <memset>

	if (pub_key) {
    ea26:	b124      	cbz	r4, ea32 <bt_mesh_pb_gatt_close+0x4a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea28:	2102      	movs	r1, #2
    ea2a:	4804      	ldr	r0, [pc, #16]	; (ea3c <bt_mesh_pb_gatt_close+0x54>)
    ea2c:	f7ff fc46 	bl	e2bc <atomic_or>
    ea30:	2400      	movs	r4, #0
		atomic_set_bit(link.flags, LOCAL_PUB_KEY);
	}

	return 0;
}
    ea32:	4620      	mov	r0, r4
    ea34:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    ea36:	f06f 0438 	mvn.w	r4, #56	; 0x38
    ea3a:	e7fa      	b.n	ea32 <bt_mesh_pb_gatt_close+0x4a>
    ea3c:	20000be0 	.word	0x20000be0
    ea40:	20000d50 	.word	0x20000d50

0000ea44 <close_link.constprop.21>:
static void close_link(u8_t err, u8_t reason)
    ea44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (link.conn) {
    ea46:	4c16      	ldr	r4, [pc, #88]	; (eaa0 <close_link.constprop.21+0x5c>)
    ea48:	2302      	movs	r3, #2
    ea4a:	f88d 3007 	strb.w	r3, [sp, #7]
    ea4e:	6863      	ldr	r3, [r4, #4]
    ea50:	b123      	cbz	r3, ea5c <close_link.constprop.21+0x18>
		bt_mesh_pb_gatt_close(link.conn);
    ea52:	4618      	mov	r0, r3
    ea54:	f7ff ffc8 	bl	e9e8 <bt_mesh_pb_gatt_close>
}
    ea58:	b003      	add	sp, #12
    ea5a:	bd30      	pop	{r4, r5, pc}
	if (err) {
    ea5c:	b108      	cbz	r0, ea62 <close_link.constprop.21+0x1e>
		prov_send_fail_msg(err);
    ea5e:	f7ff fdcb 	bl	e5f8 <prov_send_fail_msg>
	link.rx.seg = 0;
    ea62:	2500      	movs	r5, #0
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
    ea64:	2201      	movs	r2, #1
    ea66:	f10d 0107 	add.w	r1, sp, #7
    ea6a:	2002      	movs	r0, #2
	link.rx.seg = 0;
    ea6c:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
	bearer_ctl_send(LINK_CLOSE, &reason, sizeof(reason));
    ea70:	f7ff fcce 	bl	e410 <bearer_ctl_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ea74:	f3bf 8f5b 	dmb	ish
    ea78:	e854 3f00 	ldrex	r3, [r4]
    ea7c:	f023 0304 	bic.w	r3, r3, #4
    ea80:	e844 3200 	strex	r2, r3, [r4]
    ea84:	2a00      	cmp	r2, #0
    ea86:	d1f7      	bne.n	ea78 <close_link.constprop.21+0x34>
    ea88:	f3bf 8f5b 	dmb	ish
	if (link.conf_inputs[0]) {
    ea8c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ea90:	2b00      	cmp	r3, #0
    ea92:	d0e1      	beq.n	ea58 <close_link.constprop.21+0x14>
		bt_mesh_attention(NULL, 0);
    ea94:	4629      	mov	r1, r5
    ea96:	4628      	mov	r0, r5
    ea98:	f7fe fc98 	bl	d3cc <bt_mesh_attention>
    ea9c:	e7dc      	b.n	ea58 <close_link.constprop.21+0x14>
    ea9e:	bf00      	nop
    eaa0:	20000be0 	.word	0x20000be0

0000eaa4 <prov_invite>:
{
    eaa4:	b530      	push	{r4, r5, lr}
    eaa6:	4604      	mov	r4, r0
    eaa8:	b089      	sub	sp, #36	; 0x24
	struct net_buf_simple *buf = PROV_BUF(12);
    eaaa:	2100      	movs	r1, #0
    eaac:	221c      	movs	r2, #28
    eaae:	a801      	add	r0, sp, #4
    eab0:	f7f1 fdfe 	bl	6b0 <memset>
	if (data[0]) {
    eab4:	7821      	ldrb	r1, [r4, #0]
	struct net_buf_simple *buf = PROV_BUF(12);
    eab6:	2311      	movs	r3, #17
    eab8:	f8ad 300a 	strh.w	r3, [sp, #10]
	if (data[0]) {
    eabc:	b111      	cbz	r1, eac4 <prov_invite+0x20>
		bt_mesh_attention(NULL, data[0]);
    eabe:	2000      	movs	r0, #0
    eac0:	f7fe fc84 	bl	d3cc <bt_mesh_attention>
	link.conf_inputs[0] = data[0];
    eac4:	4d26      	ldr	r5, [pc, #152]	; (eb60 <prov_invite+0xbc>)
    eac6:	7823      	ldrb	r3, [r4, #0]
    eac8:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	buf->len = 0;
    eacc:	2400      	movs	r4, #0
	buf->data = buf->__buf + reserve_head;
    eace:	f10d 0311 	add.w	r3, sp, #17
	net_buf_simple_add_u8(buf, type);
    ead2:	2101      	movs	r1, #1
    ead4:	a801      	add	r0, sp, #4
    ead6:	9301      	str	r3, [sp, #4]
	buf->len = 0;
    ead8:	f8ad 4008 	strh.w	r4, [sp, #8]
    eadc:	f009 f861 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, bt_mesh_elem_count());
    eae0:	f7fc f8f4 	bl	accc <bt_mesh_elem_count>
    eae4:	4601      	mov	r1, r0
    eae6:	a801      	add	r0, sp, #4
    eae8:	f009 f85b 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, BIT(PROV_ALG_P256));
    eaec:	2101      	movs	r1, #1
    eaee:	a801      	add	r0, sp, #4
    eaf0:	f009 f86e 	bl	17bd0 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, 0x00);
    eaf4:	4621      	mov	r1, r4
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
    eaf6:	4c1b      	ldr	r4, [pc, #108]	; (eb64 <prov_invite+0xc0>)
	net_buf_simple_add_u8(buf, 0x00);
    eaf8:	a801      	add	r0, sp, #4
    eafa:	f009 f852 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->static_val ? BIT(0) : 0x00);
    eafe:	6823      	ldr	r3, [r4, #0]
    eb00:	6859      	ldr	r1, [r3, #4]
    eb02:	3100      	adds	r1, #0
    eb04:	bf18      	it	ne
    eb06:	2101      	movne	r1, #1
    eb08:	a801      	add	r0, sp, #4
    eb0a:	f009 f84a 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, prov->output_size);
    eb0e:	6823      	ldr	r3, [r4, #0]
    eb10:	a801      	add	r0, sp, #4
    eb12:	7a59      	ldrb	r1, [r3, #9]
    eb14:	f009 f845 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->output_actions);
    eb18:	6823      	ldr	r3, [r4, #0]
    eb1a:	a801      	add	r0, sp, #4
    eb1c:	8959      	ldrh	r1, [r3, #10]
    eb1e:	f009 f857 	bl	17bd0 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(buf, prov->input_size);
    eb22:	6823      	ldr	r3, [r4, #0]
    eb24:	a801      	add	r0, sp, #4
    eb26:	7b19      	ldrb	r1, [r3, #12]
    eb28:	f009 f83b 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(buf, prov->input_actions);
    eb2c:	6823      	ldr	r3, [r4, #0]
    eb2e:	a801      	add	r0, sp, #4
    eb30:	89d9      	ldrh	r1, [r3, #14]
    eb32:	f009 f84d 	bl	17bd0 <net_buf_simple_add_be16>
	memcpy(&link.conf_inputs[1], &buf->data[1], 11);
    eb36:	9901      	ldr	r1, [sp, #4]
    eb38:	220b      	movs	r2, #11
    eb3a:	3101      	adds	r1, #1
    eb3c:	f105 007d 	add.w	r0, r5, #125	; 0x7d
    eb40:	f7f1 fd8a 	bl	658 <memcpy>
	if (prov_send(buf)) {
    eb44:	a801      	add	r0, sp, #4
    eb46:	f7ff fc93 	bl	e470 <prov_send>
    eb4a:	b120      	cbz	r0, eb56 <prov_invite+0xb2>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    eb4c:	2005      	movs	r0, #5
    eb4e:	f7ff ff79 	bl	ea44 <close_link.constprop.21>
}
    eb52:	b009      	add	sp, #36	; 0x24
    eb54:	bd30      	pop	{r4, r5, pc}
	link.expect = PROV_START;
    eb56:	2302      	movs	r3, #2
    eb58:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    eb5c:	e7f9      	b.n	eb52 <prov_invite+0xae>
    eb5e:	bf00      	nop
    eb60:	20000be0 	.word	0x20000be0
    eb64:	20000d50 	.word	0x20000d50

0000eb68 <send_pub_key>:
{
    eb68:	b530      	push	{r4, r5, lr}
    eb6a:	b095      	sub	sp, #84	; 0x54
	struct net_buf_simple *buf = PROV_BUF(65);
    eb6c:	2250      	movs	r2, #80	; 0x50
    eb6e:	2100      	movs	r1, #0
    eb70:	4668      	mov	r0, sp
    eb72:	f7f1 fd9d 	bl	6b0 <memset>
    eb76:	2346      	movs	r3, #70	; 0x46
    eb78:	f8ad 3006 	strh.w	r3, [sp, #6]
	key = bt_pub_key_get();
    eb7c:	f7f6 fae2 	bl	5144 <bt_pub_key_get>
	if (!key) {
    eb80:	4604      	mov	r4, r0
    eb82:	b920      	cbnz	r0, eb8e <send_pub_key+0x26>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    eb84:	2005      	movs	r0, #5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    eb86:	f7ff ff5d 	bl	ea44 <close_link.constprop.21>
}
    eb8a:	b015      	add	sp, #84	; 0x54
    eb8c:	bd30      	pop	{r4, r5, pc}
	buf->data = buf->__buf + reserve_head;
    eb8e:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
    eb92:	2500      	movs	r5, #0
	net_buf_simple_add_u8(buf, type);
    eb94:	2103      	movs	r1, #3
    eb96:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
    eb98:	9300      	str	r3, [sp, #0]
	buf->len = 0;
    eb9a:	f8ad 5004 	strh.w	r5, [sp, #4]
    eb9e:	f009 f800 	bl	17ba2 <net_buf_simple_add_u8>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), key, 32);
    eba2:	2120      	movs	r1, #32
    eba4:	4668      	mov	r0, sp
    eba6:	f008 ffed 	bl	17b84 <net_buf_simple_add>
    ebaa:	4621      	mov	r1, r4
    ebac:	f7ff fbcd 	bl	e34a <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(net_buf_simple_add(buf, 32), &key[32], 32);
    ebb0:	2120      	movs	r1, #32
    ebb2:	4668      	mov	r0, sp
    ebb4:	f008 ffe6 	bl	17b84 <net_buf_simple_add>
    ebb8:	f104 0120 	add.w	r1, r4, #32
    ebbc:	f7ff fbc5 	bl	e34a <sys_memcpy_swap.constprop.19>
	memcpy(&link.conf_inputs[81], &buf->data[1], 64);
    ebc0:	4c11      	ldr	r4, [pc, #68]	; (ec08 <send_pub_key+0xa0>)
    ebc2:	9900      	ldr	r1, [sp, #0]
    ebc4:	2240      	movs	r2, #64	; 0x40
    ebc6:	3101      	adds	r1, #1
    ebc8:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
    ebcc:	f7f1 fd44 	bl	658 <memcpy>
	prov_send(buf);
    ebd0:	4668      	mov	r0, sp
    ebd2:	f7ff fc4d 	bl	e470 <prov_send>
	buf->data = buf->__buf + reserve_head;
    ebd6:	a802      	add	r0, sp, #8
	sys_memcpy_swap(buf->data, &link.conf_inputs[17], 32);
    ebd8:	f104 018d 	add.w	r1, r4, #141	; 0x8d
    ebdc:	9000      	str	r0, [sp, #0]
	buf->len = 0;
    ebde:	f8ad 5004 	strh.w	r5, [sp, #4]
    ebe2:	f7ff fbb2 	bl	e34a <sys_memcpy_swap.constprop.19>
	sys_memcpy_swap(&buf->data[32], &link.conf_inputs[49], 32);
    ebe6:	9800      	ldr	r0, [sp, #0]
    ebe8:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    ebec:	3020      	adds	r0, #32
    ebee:	f7ff fbac 	bl	e34a <sys_memcpy_swap.constprop.19>
	if (bt_dh_key_gen(buf->data, prov_dh_key_cb)) {
    ebf2:	4906      	ldr	r1, [pc, #24]	; (ec0c <send_pub_key+0xa4>)
    ebf4:	9800      	ldr	r0, [sp, #0]
    ebf6:	f7f6 fab3 	bl	5160 <bt_dh_key_gen>
    ebfa:	b108      	cbz	r0, ec00 <send_pub_key+0x98>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    ebfc:	2007      	movs	r0, #7
    ebfe:	e7c2      	b.n	eb86 <send_pub_key+0x1e>
	link.expect = PROV_CONFIRM;
    ec00:	2305      	movs	r3, #5
    ec02:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ec06:	e7c0      	b.n	eb8a <send_pub_key+0x22>
    ec08:	20000be0 	.word	0x20000be0
    ec0c:	0000f0ad 	.word	0x0000f0ad

0000ec10 <prov_pub_key>:
{
    ec10:	b508      	push	{r3, lr}
	memcpy(&link.conf_inputs[17], data, 64);
    ec12:	4601      	mov	r1, r0
    ec14:	2240      	movs	r2, #64	; 0x40
    ec16:	4809      	ldr	r0, [pc, #36]	; (ec3c <prov_pub_key+0x2c>)
    ec18:	f7f1 fd1e 	bl	658 <memcpy>
	if (!atomic_test_bit(link.flags, LOCAL_PUB_KEY)) {
    ec1c:	2001      	movs	r0, #1
    ec1e:	f7ff fbaf 	bl	e380 <atomic_test_bit.constprop.24>
    ec22:	b938      	cbnz	r0, ec34 <prov_pub_key+0x24>
		prov_clear_tx();
    ec24:	f7ff fbdc 	bl	e3e0 <prov_clear_tx>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    ec28:	2101      	movs	r1, #1
    ec2a:	4805      	ldr	r0, [pc, #20]	; (ec40 <prov_pub_key+0x30>)
}
    ec2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ec30:	f7ff bb44 	b.w	e2bc <atomic_or>
    ec34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	send_pub_key();
    ec38:	f7ff bf96 	b.w	eb68 <send_pub_key>
    ec3c:	20000c6d 	.word	0x20000c6d
    ec40:	20000be0 	.word	0x20000be0

0000ec44 <pub_key_ready>:
{
    ec44:	b508      	push	{r3, lr}
	if (!pkey) {
    ec46:	b158      	cbz	r0, ec60 <pub_key_ready+0x1c>
    ec48:	2102      	movs	r1, #2
    ec4a:	4806      	ldr	r0, [pc, #24]	; (ec64 <pub_key_ready+0x20>)
    ec4c:	f7ff fb36 	bl	e2bc <atomic_or>
	if (atomic_test_and_clear_bit(link.flags, REMOTE_PUB_KEY)) {
    ec50:	2000      	movs	r0, #0
    ec52:	f7ff fcb1 	bl	e5b8 <atomic_test_and_clear_bit.constprop.23>
    ec56:	b118      	cbz	r0, ec60 <pub_key_ready+0x1c>
}
    ec58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
    ec5c:	f7ff bf84 	b.w	eb68 <send_pub_key>
    ec60:	bd08      	pop	{r3, pc}
    ec62:	bf00      	nop
    ec64:	20000be0 	.word	0x20000be0

0000ec68 <prov_random>:
{
    ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec6a:	b097      	sub	sp, #92	; 0x5c
    ec6c:	4607      	mov	r7, r0
	struct net_buf_simple *rnd = PROV_BUF(16);
    ec6e:	2220      	movs	r2, #32
    ec70:	2100      	movs	r1, #0
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
    ec72:	4c28      	ldr	r4, [pc, #160]	; (ed14 <prov_random+0xac>)
	struct net_buf_simple *rnd = PROV_BUF(16);
    ec74:	a80e      	add	r0, sp, #56	; 0x38
    ec76:	f7f1 fd1b 	bl	6b0 <memset>
    ec7a:	2315      	movs	r3, #21
    ec7c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	if (bt_mesh_prov_conf(link.conf_key, data, link.auth, conf_verify)) {
    ec80:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    ec84:	466b      	mov	r3, sp
    ec86:	4639      	mov	r1, r7
    ec88:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    ec8c:	f7fb fea6 	bl	a9dc <bt_mesh_prov_conf>
    ec90:	b120      	cbz	r0, ec9c <prov_random+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    ec92:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    ec94:	f7ff fed6 	bl	ea44 <close_link.constprop.21>
}
    ec98:	b017      	add	sp, #92	; 0x5c
    ec9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (memcmp(conf_verify, link.conf, 16)) {
    ec9c:	2210      	movs	r2, #16
    ec9e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    eca2:	4668      	mov	r0, sp
    eca4:	f7f1 fcc3 	bl	62e <memcmp>
    eca8:	b108      	cbz	r0, ecae <prov_random+0x46>
		close_link(PROV_ERR_CFM_FAILED, CLOSE_REASON_FAILED);
    ecaa:	2004      	movs	r0, #4
    ecac:	e7f2      	b.n	ec94 <prov_random+0x2c>
	buf->data = buf->__buf + reserve_head;
    ecae:	f10d 0345 	add.w	r3, sp, #69	; 0x45
	buf->len = 0;
    ecb2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
	net_buf_simple_add_u8(buf, type);
    ecb6:	2106      	movs	r1, #6
    ecb8:	a80e      	add	r0, sp, #56	; 0x38
	net_buf_simple_add_mem(rnd, link.rand, 16);
    ecba:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	buf->data = buf->__buf + reserve_head;
    ecbe:	930e      	str	r3, [sp, #56]	; 0x38
	net_buf_simple_add_u8(buf, type);
    ecc0:	f008 ff6f 	bl	17ba2 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(rnd, link.rand, 16);
    ecc4:	4631      	mov	r1, r6
    ecc6:	2210      	movs	r2, #16
    ecc8:	a80e      	add	r0, sp, #56	; 0x38
    ecca:	f008 ff61 	bl	17b90 <net_buf_simple_add_mem>
	if (prov_send(rnd)) {
    ecce:	a80e      	add	r0, sp, #56	; 0x38
    ecd0:	f7ff fbce 	bl	e470 <prov_send>
    ecd4:	4601      	mov	r1, r0
    ecd6:	b108      	cbz	r0, ecdc <prov_random+0x74>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    ecd8:	2005      	movs	r0, #5
    ecda:	e7db      	b.n	ec94 <prov_random+0x2c>
static inline int bt_mesh_prov_salt(const u8_t conf_salt[16],
				    const u8_t prov_rand[16],
				    const u8_t dev_rand[16],
				    u8_t prov_salt[16])
{
	const u8_t prov_salt_key[16] = { 0 };
    ecdc:	2510      	movs	r5, #16
    ecde:	462a      	mov	r2, r5
    ece0:	eb0d 0005 	add.w	r0, sp, r5
    ece4:	f7f1 fce4 	bl	6b0 <memset>
	struct bt_mesh_sg sg[] = {
    ece8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    ecec:	9308      	str	r3, [sp, #32]
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
    ecee:	2203      	movs	r2, #3
    ecf0:	f204 130d 	addw	r3, r4, #269	; 0x10d
    ecf4:	a908      	add	r1, sp, #32
    ecf6:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
    ecfa:	9509      	str	r5, [sp, #36]	; 0x24
    ecfc:	970a      	str	r7, [sp, #40]	; 0x28
    ecfe:	950b      	str	r5, [sp, #44]	; 0x2c
    ed00:	960c      	str	r6, [sp, #48]	; 0x30
    ed02:	950d      	str	r5, [sp, #52]	; 0x34
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
    ed04:	f7fb fb9b 	bl	a43e <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(link.conf_salt, data, link.rand,
    ed08:	2800      	cmp	r0, #0
    ed0a:	d1c2      	bne.n	ec92 <prov_random+0x2a>
	link.expect = PROV_DATA;
    ed0c:	2307      	movs	r3, #7
    ed0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ed12:	e7c1      	b.n	ec98 <prov_random+0x30>
    ed14:	20000be0 	.word	0x20000be0

0000ed18 <prov_data>:
{
    ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
    ed1c:	4c3d      	ldr	r4, [pc, #244]	; (ee14 <prov_data+0xfc>)
    ed1e:	b09d      	sub	sp, #116	; 0x74
	struct net_buf_simple *msg = PROV_BUF(1);
    ed20:	2210      	movs	r2, #16
    ed22:	2100      	movs	r1, #0
{
    ed24:	4607      	mov	r7, r0
    ed26:	ae0d      	add	r6, sp, #52	; 0x34
	struct net_buf_simple *msg = PROV_BUF(1);
    ed28:	a809      	add	r0, sp, #36	; 0x24
    ed2a:	f7f1 fcc1 	bl	6b0 <memset>
    ed2e:	2506      	movs	r5, #6
    ed30:	9600      	str	r6, [sp, #0]
    ed32:	4b39      	ldr	r3, [pc, #228]	; (ee18 <prov_data+0x100>)
    ed34:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    ed38:	f204 120d 	addw	r2, r4, #269	; 0x10d
    ed3c:	2120      	movs	r1, #32
    ed3e:	f104 0008 	add.w	r0, r4, #8
    ed42:	f7fb fbbf 	bl	a4c4 <bt_mesh_k1>
	if (err) {
    ed46:	b108      	cbz	r0, ed4c <prov_data+0x34>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    ed48:	2007      	movs	r0, #7
    ed4a:	e01b      	b.n	ed84 <prov_data+0x6c>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
    ed4c:	f10d 0854 	add.w	r8, sp, #84	; 0x54
    ed50:	f8cd 8000 	str.w	r8, [sp]
    ed54:	4b31      	ldr	r3, [pc, #196]	; (ee1c <prov_data+0x104>)
    ed56:	f204 120d 	addw	r2, r4, #269	; 0x10d
    ed5a:	2120      	movs	r1, #32
    ed5c:	f104 0008 	add.w	r0, r4, #8
    ed60:	f7fb fbb0 	bl	a4c4 <bt_mesh_k1>
	if (!err) {
    ed64:	2800      	cmp	r0, #0
    ed66:	d1ef      	bne.n	ed48 <prov_data+0x30>
		memcpy(nonce, tmp + 3, 13);
    ed68:	220d      	movs	r2, #13
    ed6a:	f10d 0157 	add.w	r1, sp, #87	; 0x57
    ed6e:	a805      	add	r0, sp, #20
    ed70:	f7f1 fc72 	bl	658 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
    ed74:	4643      	mov	r3, r8
    ed76:	463a      	mov	r2, r7
    ed78:	a905      	add	r1, sp, #20
    ed7a:	4630      	mov	r0, r6
    ed7c:	f7fb fe3b 	bl	a9f6 <bt_mesh_prov_decrypt>
	if (err) {
    ed80:	b118      	cbz	r0, ed8a <prov_data+0x72>
		close_link(PROV_ERR_DECRYPT, CLOSE_REASON_FAILED);
    ed82:	4628      	mov	r0, r5
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    ed84:	f7ff fe5e 	bl	ea44 <close_link.constprop.21>
		return;
    ed88:	e040      	b.n	ee0c <prov_data+0xf4>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
    ed8a:	af11      	add	r7, sp, #68	; 0x44
    ed8c:	9700      	str	r7, [sp, #0]
    ed8e:	4b24      	ldr	r3, [pc, #144]	; (ee20 <prov_data+0x108>)
    ed90:	f204 120d 	addw	r2, r4, #269	; 0x10d
    ed94:	2120      	movs	r1, #32
    ed96:	f104 0008 	add.w	r0, r4, #8
    ed9a:	f7fb fb93 	bl	a4c4 <bt_mesh_k1>
	if (err) {
    ed9e:	4683      	mov	fp, r0
    eda0:	2800      	cmp	r0, #0
    eda2:	d1d1      	bne.n	ed48 <prov_data+0x30>
	return ((u16_t)src[0] << 8) | src[1];
    eda4:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    eda8:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
    edac:	f89d 5067 	ldrb.w	r5, [sp, #103]	; 0x67
    edb0:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
    edb4:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
	flags = pdu[18];
    edb8:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
	buf->len = 0;
    edbc:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    edc0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    edc4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    edc8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
    edcc:	f89d 506a 	ldrb.w	r5, [sp, #106]	; 0x6a
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    edd0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    edd4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((u16_t)src[0] << 8) | src[1];
    edd8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
	net_buf_simple_add_u8(buf, type);
    eddc:	2108      	movs	r1, #8
    edde:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    ede2:	a809      	add	r0, sp, #36	; 0x24
	buf->data = buf->__buf + reserve_head;
    ede4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
    ede8:	9309      	str	r3, [sp, #36]	; 0x24
    edea:	f008 feda 	bl	17ba2 <net_buf_simple_add_u8>
	prov_send(msg);
    edee:	a809      	add	r0, sp, #36	; 0x24
    edf0:	f7ff fb3e 	bl	e470 <prov_send>
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
    edf4:	9702      	str	r7, [sp, #8]
    edf6:	9601      	str	r6, [sp, #4]
    edf8:	f8cd b000 	str.w	fp, [sp]
    edfc:	462b      	mov	r3, r5
    edfe:	4652      	mov	r2, sl
    ee00:	4649      	mov	r1, r9
    ee02:	4640      	mov	r0, r8
	link.expect = 0;
    ee04:	f884 b028 	strb.w	fp, [r4, #40]	; 0x28
	bt_mesh_provision(pdu, net_idx, flags, iv_index, 0, addr, dev_key);
    ee08:	f7f8 fce4 	bl	77d4 <bt_mesh_provision>
}
    ee0c:	b01d      	add	sp, #116	; 0x74
    ee0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee12:	bf00      	nop
    ee14:	20000be0 	.word	0x20000be0
    ee18:	0001a2d0 	.word	0x0001a2d0
    ee1c:	0001a2d5 	.word	0x0001a2d5
    ee20:	0001a2da 	.word	0x0001a2da

0000ee24 <prov_msg_recv>:
{
    ee24:	b570      	push	{r4, r5, r6, lr}
	u8_t type = link.rx.buf->data[0];
    ee26:	4c1e      	ldr	r4, [pc, #120]	; (eea0 <prov_msg_recv+0x7c>)
    ee28:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
    ee2c:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
	u8_t type = link.rx.buf->data[0];
    ee30:	6803      	ldr	r3, [r0, #0]
    ee32:	781d      	ldrb	r5, [r3, #0]
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
    ee34:	f7fb fd7a 	bl	a92c <bt_mesh_fcs_check>
    ee38:	4626      	mov	r6, r4
    ee3a:	b380      	cbz	r0, ee9e <prov_msg_recv+0x7a>
	gen_prov_ack_send(link.rx.id);
    ee3c:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    ee40:	f7ff fa4e 	bl	e2e0 <gen_prov_ack_send>
	link.rx.prev_id = link.rx.id;
    ee44:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    ee48:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
	if (type != PROV_FAILED && type != link.expect) {
    ee4c:	2d09      	cmp	r5, #9
	link.rx.id = 0;
    ee4e:	f04f 0300 	mov.w	r3, #0
    ee52:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	if (type != PROV_FAILED && type != link.expect) {
    ee56:	d00f      	beq.n	ee78 <prov_msg_recv+0x54>
    ee58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ee5c:	42ab      	cmp	r3, r5
    ee5e:	d004      	beq.n	ee6a <prov_msg_recv+0x46>
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
    ee60:	2003      	movs	r0, #3
}
    ee62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_send_fail_msg(PROV_ERR_UNEXP_PDU);
    ee66:	f7ff bbc7 	b.w	e5f8 <prov_send_fail_msg>
	if (type >= ARRAY_SIZE(prov_handlers)) {
    ee6a:	2b09      	cmp	r3, #9
    ee6c:	d904      	bls.n	ee78 <prov_msg_recv+0x54>
		close_link(PROV_ERR_NVAL_PDU, CLOSE_REASON_FAILED);
    ee6e:	2001      	movs	r0, #1
}
    ee70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    ee74:	f7ff bde6 	b.w	ea44 <close_link.constprop.21>
	if (1 + prov_handlers[type].len != link.rx.buf->len) {
    ee78:	4a0a      	ldr	r2, [pc, #40]	; (eea4 <prov_msg_recv+0x80>)
    ee7a:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
    ee7e:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
    ee82:	8888      	ldrh	r0, [r1, #4]
    ee84:	889b      	ldrh	r3, [r3, #4]
    ee86:	3301      	adds	r3, #1
    ee88:	4283      	cmp	r3, r0
    ee8a:	d001      	beq.n	ee90 <prov_msg_recv+0x6c>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    ee8c:	2002      	movs	r0, #2
    ee8e:	e7ef      	b.n	ee70 <prov_msg_recv+0x4c>
	prov_handlers[type].func(&link.rx.buf->data[1]);
    ee90:	6808      	ldr	r0, [r1, #0]
    ee92:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
    ee96:	3001      	adds	r0, #1
}
    ee98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prov_handlers[type].func(&link.rx.buf->data[1]);
    ee9c:	4718      	bx	r3
    ee9e:	bd70      	pop	{r4, r5, r6, pc}
    eea0:	20000be0 	.word	0x20000be0
    eea4:	0001a2e0 	.word	0x0001a2e0

0000eea8 <gen_prov_cont>:
{
    eea8:	b570      	push	{r4, r5, r6, lr}
	if (!link.rx.seg && link.rx.prev_id == rx->xact_id) {
    eeaa:	4a26      	ldr	r2, [pc, #152]	; (ef44 <gen_prov_cont+0x9c>)
    eeac:	7903      	ldrb	r3, [r0, #4]
    eeae:	f892 6126 	ldrb.w	r6, [r2, #294]	; 0x126
    eeb2:	4615      	mov	r5, r2
    eeb4:	b946      	cbnz	r6, eec8 <gen_prov_cont+0x20>
    eeb6:	f892 2125 	ldrb.w	r2, [r2, #293]	; 0x125
    eeba:	4293      	cmp	r3, r2
    eebc:	d104      	bne.n	eec8 <gen_prov_cont+0x20>
		gen_prov_ack_send(rx->xact_id);
    eebe:	4618      	mov	r0, r3
}
    eec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gen_prov_ack_send(rx->xact_id);
    eec4:	f7ff ba0c 	b.w	e2e0 <gen_prov_ack_send>
	if (rx->xact_id != link.rx.id) {
    eec8:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
    eecc:	4293      	cmp	r3, r2
    eece:	d137      	bne.n	ef40 <gen_prov_cont+0x98>
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
    eed0:	7944      	ldrb	r4, [r0, #5]
	if (seg > link.rx.last_seg) {
    eed2:	f895 3127 	ldrb.w	r3, [r5, #295]	; 0x127
	u8_t seg = CONT_SEG_INDEX(rx->gpc);
    eed6:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
    eed8:	429c      	cmp	r4, r3
    eeda:	d904      	bls.n	eee6 <gen_prov_cont+0x3e>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    eedc:	2002      	movs	r0, #2
}
    eede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    eee2:	f7ff bdaf 	b.w	ea44 <close_link.constprop.21>
	} else if (seg == link.rx.last_seg) {
    eee6:	d10f      	bne.n	ef08 <gen_prov_cont+0x60>
		expect_len = (link.rx.buf->len - 20 -
    eee8:	f8d5 312c 	ldr.w	r3, [r5, #300]	; 0x12c
			      (23 * (link.rx.last_seg - 1)));
    eeec:	1e62      	subs	r2, r4, #1
		expect_len = (link.rx.buf->len - 20 -
    eeee:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
    eef2:	791b      	ldrb	r3, [r3, #4]
    eef4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    eef8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    eefc:	3b14      	subs	r3, #20
    eefe:	4413      	add	r3, r2
		if (expect_len != buf->len) {
    ef00:	888a      	ldrh	r2, [r1, #4]
    ef02:	b2db      	uxtb	r3, r3
    ef04:	4293      	cmp	r3, r2
    ef06:	d1e9      	bne.n	eedc <gen_prov_cont+0x34>
	if (!(link.rx.seg & BIT(seg))) {
    ef08:	40e6      	lsrs	r6, r4
    ef0a:	07f3      	lsls	r3, r6, #31
    ef0c:	d518      	bpl.n	ef40 <gen_prov_cont+0x98>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
    ef0e:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
    ef12:	1e60      	subs	r0, r4, #1
    ef14:	2317      	movs	r3, #23
    ef16:	4343      	muls	r3, r0
    ef18:	6810      	ldr	r0, [r2, #0]
    ef1a:	888a      	ldrh	r2, [r1, #4]
    ef1c:	6809      	ldr	r1, [r1, #0]
    ef1e:	3314      	adds	r3, #20
    ef20:	4418      	add	r0, r3
    ef22:	f7f1 fb99 	bl	658 <memcpy>
	XACT_SEG_RECV(seg);
    ef26:	2301      	movs	r3, #1
    ef28:	40a3      	lsls	r3, r4
    ef2a:	f895 4126 	ldrb.w	r4, [r5, #294]	; 0x126
    ef2e:	ea24 0403 	bic.w	r4, r4, r3
    ef32:	f885 4126 	strb.w	r4, [r5, #294]	; 0x126
	if (!link.rx.seg) {
    ef36:	b91c      	cbnz	r4, ef40 <gen_prov_cont+0x98>
}
    ef38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prov_msg_recv();
    ef3c:	f7ff bf72 	b.w	ee24 <prov_msg_recv>
    ef40:	bd70      	pop	{r4, r5, r6, pc}
    ef42:	bf00      	nop
    ef44:	20000be0 	.word	0x20000be0

0000ef48 <gen_prov_start>:
{
    ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (link.rx.seg) {
    ef4a:	4b24      	ldr	r3, [pc, #144]	; (efdc <gen_prov_start+0x94>)
    ef4c:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
{
    ef50:	4606      	mov	r6, r0
    ef52:	460d      	mov	r5, r1
    ef54:	461c      	mov	r4, r3
	if (link.rx.seg) {
    ef56:	2a00      	cmp	r2, #0
    ef58:	d13f      	bne.n	efda <gen_prov_start+0x92>
	if (link.rx.prev_id == rx->xact_id) {
    ef5a:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    ef5e:	7900      	ldrb	r0, [r0, #4]
    ef60:	4298      	cmp	r0, r3
    ef62:	d103      	bne.n	ef6c <gen_prov_start+0x24>
}
    ef64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		gen_prov_ack_send(rx->xact_id);
    ef68:	f7ff b9ba 	b.w	e2e0 <gen_prov_ack_send>
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
    ef6c:	4608      	mov	r0, r1
    ef6e:	f8d4 712c 	ldr.w	r7, [r4, #300]	; 0x12c
    ef72:	f008 fe8a 	bl	17c8a <net_buf_simple_pull_be16>
    ef76:	80b8      	strh	r0, [r7, #4]
	link.rx.id  = rx->xact_id;
    ef78:	7933      	ldrb	r3, [r6, #4]
    ef7a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
	link.rx.fcs = net_buf_simple_pull_u8(buf);
    ef7e:	4628      	mov	r0, r5
    ef80:	f008 fe73 	bl	17c6a <net_buf_simple_pull_u8>
    ef84:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
	if (link.rx.buf->len < 1) {
    ef88:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    ef8c:	8882      	ldrh	r2, [r0, #4]
    ef8e:	b922      	cbnz	r2, ef9a <gen_prov_start+0x52>
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    ef90:	2002      	movs	r0, #2
}
    ef92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		close_link(PROV_ERR_NVAL_FMT, CLOSE_REASON_FAILED);
    ef96:	f7ff bd55 	b.w	ea44 <close_link.constprop.21>
	if (link.rx.buf->len > link.rx.buf->size) {
    ef9a:	88c3      	ldrh	r3, [r0, #6]
    ef9c:	4293      	cmp	r3, r2
    ef9e:	d3f7      	bcc.n	ef90 <gen_prov_start+0x48>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20) {
    efa0:	7973      	ldrb	r3, [r6, #5]
    efa2:	089b      	lsrs	r3, r3, #2
    efa4:	d001      	beq.n	efaa <gen_prov_start+0x62>
    efa6:	2a14      	cmp	r2, #20
    efa8:	d9f2      	bls.n	ef90 <gen_prov_start+0x48>
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
    efaa:	1c59      	adds	r1, r3, #1
    efac:	2201      	movs	r2, #1
    efae:	408a      	lsls	r2, r1
    efb0:	3a01      	subs	r2, #1
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
    efb2:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	link.rx.seg = (1 << (START_LAST_SEG(rx->gpc) + 1)) - 1;
    efb6:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
	memcpy(link.rx.buf->data, buf->data, buf->len);
    efba:	88aa      	ldrh	r2, [r5, #4]
    efbc:	6829      	ldr	r1, [r5, #0]
    efbe:	6800      	ldr	r0, [r0, #0]
    efc0:	f7f1 fb4a 	bl	658 <memcpy>
	XACT_SEG_RECV(0);
    efc4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    efc8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    efcc:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	if (!link.rx.seg) {
    efd0:	b91b      	cbnz	r3, efda <gen_prov_start+0x92>
}
    efd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
    efd6:	f7ff bf25 	b.w	ee24 <prov_msg_recv>
    efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efdc:	20000be0 	.word	0x20000be0

0000efe0 <send_confirm>:
{
    efe0:	b510      	push	{r4, lr}
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
    efe2:	4c24      	ldr	r4, [pc, #144]	; (f074 <send_confirm+0x94>)
{
    efe4:	b088      	sub	sp, #32
	struct net_buf_simple *cfm = PROV_BUF(17);
    efe6:	2100      	movs	r1, #0
    efe8:	2220      	movs	r2, #32
    efea:	4668      	mov	r0, sp
    efec:	f7f1 fb60 	bl	6b0 <memset>
    eff0:	2316      	movs	r3, #22
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
    eff2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    eff6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
	struct net_buf_simple *cfm = PROV_BUF(17);
    effa:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (bt_mesh_prov_conf_salt(link.conf_inputs, link.conf_salt)) {
    effe:	f7fb fccf 	bl	a9a0 <bt_mesh_prov_conf_salt>
    f002:	b120      	cbz	r0, f00e <send_confirm+0x2e>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    f004:	2007      	movs	r0, #7
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    f006:	f7ff fd1d 	bl	ea44 <close_link.constprop.21>
}
    f00a:	b008      	add	sp, #32
    f00c:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(link.dhkey, link.conf_salt, link.conf_key)) {
    f00e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    f012:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    f016:	f104 0008 	add.w	r0, r4, #8
    f01a:	f7fb fcd3 	bl	a9c4 <bt_mesh_prov_conf_key>
    f01e:	2800      	cmp	r0, #0
    f020:	d1f0      	bne.n	f004 <send_confirm+0x24>
	if (bt_rand(link.rand, 16)) {
    f022:	2110      	movs	r1, #16
    f024:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    f028:	f001 fe76 	bl	10d18 <bt_rand>
    f02c:	2800      	cmp	r0, #0
    f02e:	d1e9      	bne.n	f004 <send_confirm+0x24>
    f030:	f10d 030d 	add.w	r3, sp, #13
	buf->len = 0;
    f034:	f8ad 0004 	strh.w	r0, [sp, #4]
	net_buf_simple_add_u8(buf, type);
    f038:	2105      	movs	r1, #5
    f03a:	4668      	mov	r0, sp
	buf->data = buf->__buf + reserve_head;
    f03c:	9300      	str	r3, [sp, #0]
    f03e:	f008 fdb0 	bl	17ba2 <net_buf_simple_add_u8>
			      net_buf_simple_add(cfm, 16))) {
    f042:	2110      	movs	r1, #16
    f044:	4668      	mov	r0, sp
    f046:	f008 fd9d 	bl	17b84 <net_buf_simple_add>
	if (bt_mesh_prov_conf(link.conf_key, link.rand, link.auth,
    f04a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    f04e:	4603      	mov	r3, r0
    f050:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    f054:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    f058:	f7fb fcc0 	bl	a9dc <bt_mesh_prov_conf>
    f05c:	2800      	cmp	r0, #0
    f05e:	d1d1      	bne.n	f004 <send_confirm+0x24>
	if (prov_send(cfm)) {
    f060:	4668      	mov	r0, sp
    f062:	f7ff fa05 	bl	e470 <prov_send>
    f066:	b108      	cbz	r0, f06c <send_confirm+0x8c>
		close_link(PROV_ERR_RESOURCES, CLOSE_REASON_FAILED);
    f068:	2005      	movs	r0, #5
    f06a:	e7cc      	b.n	f006 <send_confirm+0x26>
	link.expect = PROV_RANDOM;
    f06c:	2306      	movs	r3, #6
    f06e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    f072:	e7ca      	b.n	f00a <send_confirm+0x2a>
    f074:	20000be0 	.word	0x20000be0

0000f078 <prov_confirm>:
{
    f078:	b508      	push	{r3, lr}
	memcpy(link.conf, data, 16);
    f07a:	4601      	mov	r1, r0
    f07c:	2210      	movs	r2, #16
    f07e:	4809      	ldr	r0, [pc, #36]	; (f0a4 <prov_confirm+0x2c>)
    f080:	f7f1 faea 	bl	658 <memcpy>
	if (!atomic_test_bit(link.flags, HAVE_DHKEY)) {
    f084:	2003      	movs	r0, #3
    f086:	f7ff f97b 	bl	e380 <atomic_test_bit.constprop.24>
    f08a:	b938      	cbnz	r0, f09c <prov_confirm+0x24>
		prov_clear_tx();
    f08c:	f7ff f9a8 	bl	e3e0 <prov_clear_tx>
    f090:	2110      	movs	r1, #16
    f092:	4805      	ldr	r0, [pc, #20]	; (f0a8 <prov_confirm+0x30>)
}
    f094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f098:	f7ff b910 	b.w	e2bc <atomic_or>
    f09c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
    f0a0:	f7ff bf9e 	b.w	efe0 <send_confirm>
    f0a4:	20000c0c 	.word	0x20000c0c
    f0a8:	20000be0 	.word	0x20000be0

0000f0ac <prov_dh_key_cb>:
{
    f0ac:	b508      	push	{r3, lr}
	if (!key) {
    f0ae:	4601      	mov	r1, r0
    f0b0:	b920      	cbnz	r0, f0bc <prov_dh_key_cb+0x10>
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    f0b2:	2007      	movs	r0, #7
}
    f0b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		close_link(PROV_ERR_UNEXP_ERR, CLOSE_REASON_FAILED);
    f0b8:	f7ff bcc4 	b.w	ea44 <close_link.constprop.21>
	sys_memcpy_swap(link.dhkey, key, 32);
    f0bc:	480b      	ldr	r0, [pc, #44]	; (f0ec <prov_dh_key_cb+0x40>)
    f0be:	f7ff f944 	bl	e34a <sys_memcpy_swap.constprop.19>
    f0c2:	2108      	movs	r1, #8
    f0c4:	480a      	ldr	r0, [pc, #40]	; (f0f0 <prov_dh_key_cb+0x44>)
    f0c6:	f7ff f8f9 	bl	e2bc <atomic_or>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
    f0ca:	2005      	movs	r0, #5
    f0cc:	f7ff f958 	bl	e380 <atomic_test_bit.constprop.24>
    f0d0:	b958      	cbnz	r0, f0ea <prov_dh_key_cb+0x3e>
	    atomic_test_bit(link.flags, WAIT_STRING)) {
    f0d2:	2006      	movs	r0, #6
    f0d4:	f7ff f954 	bl	e380 <atomic_test_bit.constprop.24>
	if (atomic_test_bit(link.flags, WAIT_NUMBER) ||
    f0d8:	b938      	cbnz	r0, f0ea <prov_dh_key_cb+0x3e>
	if (atomic_test_and_clear_bit(link.flags, SEND_CONFIRM)) {
    f0da:	2004      	movs	r0, #4
    f0dc:	f7ff fa6c 	bl	e5b8 <atomic_test_and_clear_bit.constprop.23>
    f0e0:	b118      	cbz	r0, f0ea <prov_dh_key_cb+0x3e>
}
    f0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_confirm();
    f0e6:	f7ff bf7b 	b.w	efe0 <send_confirm>
    f0ea:	bd08      	pop	{r3, pc}
    f0ec:	20000be8 	.word	0x20000be8
    f0f0:	20000be0 	.word	0x20000be0

0000f0f4 <bt_mesh_prov_get_uuid>:
#endif /* CONFIG_BT_MESH_PB_GATT */

const u8_t *bt_mesh_prov_get_uuid(void)
{
	return prov->uuid;
    f0f4:	4b01      	ldr	r3, [pc, #4]	; (f0fc <bt_mesh_prov_get_uuid+0x8>)
    f0f6:	681b      	ldr	r3, [r3, #0]
}
    f0f8:	6818      	ldr	r0, [r3, #0]
    f0fa:	4770      	bx	lr
    f0fc:	20000d50 	.word	0x20000d50

0000f100 <bt_prov_active>:

bool bt_prov_active(void)
{
    f100:	b508      	push	{r3, lr}
	return atomic_test_bit(link.flags, LINK_ACTIVE);
    f102:	2002      	movs	r0, #2
    f104:	f7ff f93c 	bl	e380 <atomic_test_bit.constprop.24>
}
    f108:	3000      	adds	r0, #0
    f10a:	bf18      	it	ne
    f10c:	2001      	movne	r0, #1
    f10e:	bd08      	pop	{r3, pc}

0000f110 <bt_mesh_pb_adv_recv>:
{
    f110:	b513      	push	{r0, r1, r4, lr}
    f112:	4604      	mov	r4, r0
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
    f114:	f7ff fff4 	bl	f100 <bt_prov_active>
    f118:	2800      	cmp	r0, #0
    f11a:	d039      	beq.n	f190 <bt_mesh_pb_adv_recv+0x80>
	if (buf->len < 6) {
    f11c:	88a3      	ldrh	r3, [r4, #4]
    f11e:	2b05      	cmp	r3, #5
    f120:	d93a      	bls.n	f198 <bt_mesh_pb_adv_recv+0x88>
	rx.link_id = net_buf_simple_pull_be32(buf);
    f122:	4620      	mov	r0, r4
    f124:	f008 fdbc 	bl	17ca0 <net_buf_simple_pull_be32>
    f128:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
    f12a:	4620      	mov	r0, r4
    f12c:	f008 fd9d 	bl	17c6a <net_buf_simple_pull_u8>
    f130:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
    f134:	4620      	mov	r0, r4
    f136:	f008 fd98 	bl	17c6a <net_buf_simple_pull_u8>
    f13a:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, LINK_ACTIVE) && link.id != rx.link_id) {
    f13e:	2002      	movs	r0, #2
    f140:	f7ff f91e 	bl	e380 <atomic_test_bit.constprop.24>
    f144:	b128      	cbz	r0, f152 <bt_mesh_pb_adv_recv+0x42>
    f146:	4b15      	ldr	r3, [pc, #84]	; (f19c <bt_mesh_pb_adv_recv+0x8c>)
    f148:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f14c:	9b00      	ldr	r3, [sp, #0]
    f14e:	429a      	cmp	r2, r3
    f150:	d122      	bne.n	f198 <bt_mesh_pb_adv_recv+0x88>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
    f152:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f156:	4912      	ldr	r1, [pc, #72]	; (f1a0 <bt_mesh_pb_adv_recv+0x90>)
    f158:	88a2      	ldrh	r2, [r4, #4]
    f15a:	f003 0303 	and.w	r3, r3, #3
    f15e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    f162:	795b      	ldrb	r3, [r3, #5]
    f164:	429a      	cmp	r2, r3
    f166:	d317      	bcc.n	f198 <bt_mesh_pb_adv_recv+0x88>
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
    f168:	2002      	movs	r0, #2
    f16a:	f7ff f909 	bl	e380 <atomic_test_bit.constprop.24>
    f16e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f172:	b928      	cbnz	r0, f180 <bt_mesh_pb_adv_recv+0x70>
	    gen_prov[GPCF(rx->gpc)].require_link) {
    f174:	f003 0203 	and.w	r2, r3, #3
    f178:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, LINK_ACTIVE) &&
    f17c:	7912      	ldrb	r2, [r2, #4]
    f17e:	b95a      	cbnz	r2, f198 <bt_mesh_pb_adv_recv+0x88>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
    f180:	f003 0303 	and.w	r3, r3, #3
    f184:	4668      	mov	r0, sp
    f186:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    f18a:	4621      	mov	r1, r4
    f18c:	4798      	blx	r3
    f18e:	e003      	b.n	f198 <bt_mesh_pb_adv_recv+0x88>
	if (!bt_prov_active() && bt_mesh_is_provisioned()) {
    f190:	f7f8 fbaa 	bl	78e8 <bt_mesh_is_provisioned>
    f194:	2800      	cmp	r0, #0
    f196:	d0c1      	beq.n	f11c <bt_mesh_pb_adv_recv+0xc>
}
    f198:	b002      	add	sp, #8
    f19a:	bd10      	pop	{r4, pc}
    f19c:	20000be0 	.word	0x20000be0
    f1a0:	0001a2b0 	.word	0x0001a2b0

0000f1a4 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
    f1a4:	b538      	push	{r3, r4, r5, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func = pub_key_ready,
	};
	int err;

	if (!prov_info) {
    f1a6:	4605      	mov	r5, r0
    f1a8:	b1a8      	cbz	r0, f1d6 <bt_mesh_prov_init+0x32>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	err = bt_pub_key_gen(&pub_key_cb);
    f1aa:	480c      	ldr	r0, [pc, #48]	; (f1dc <bt_mesh_prov_init+0x38>)
    f1ac:	f7f5 ff88 	bl	50c0 <bt_pub_key_gen>
	if (err) {
    f1b0:	4604      	mov	r4, r0
    f1b2:	b970      	cbnz	r0, f1d2 <bt_mesh_prov_init+0x2e>
		BT_ERR("Failed to generate public key (%d)", err);
		return err;
	}

	prov = prov_info;
    f1b4:	4b0a      	ldr	r3, [pc, #40]	; (f1e0 <bt_mesh_prov_init+0x3c>)

#if defined(CONFIG_BT_MESH_PB_ADV)
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
    f1b6:	490b      	ldr	r1, [pc, #44]	; (f1e4 <bt_mesh_prov_init+0x40>)
	prov = prov_info;
    f1b8:	601d      	str	r5, [r3, #0]
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
    f1ba:	4d0b      	ldr	r5, [pc, #44]	; (f1e8 <bt_mesh_prov_init+0x44>)
    f1bc:	f505 70a4 	add.w	r0, r5, #328	; 0x148
    f1c0:	f009 fd78 	bl	18cb4 <k_delayed_work_init>
	link.rx.prev_id = XACT_NVAL;
    f1c4:	23ff      	movs	r3, #255	; 0xff
    f1c6:	f885 3125 	strb.w	r3, [r5, #293]	; 0x125

#if defined(CONFIG_BT_MESH_PB_GATT)
	link.rx.buf = bt_mesh_proxy_get_buf();
    f1ca:	f000 fb0b 	bl	f7e4 <bt_mesh_proxy_get_buf>
    f1ce:	f8c5 012c 	str.w	r0, [r5, #300]	; 0x12c
		memcpy(uuid.val, prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	return 0;
}
    f1d2:	4620      	mov	r0, r4
    f1d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f1d6:	f06f 0415 	mvn.w	r4, #21
    f1da:	e7fa      	b.n	f1d2 <bt_mesh_prov_init+0x2e>
    f1dc:	20006714 	.word	0x20006714
    f1e0:	20000d50 	.word	0x20000d50
    f1e4:	0000e8dd 	.word	0x0000e8dd
    f1e8:	20000be0 	.word	0x20000be0

0000f1ec <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(u16_t net_idx, u16_t addr)
{
	if (prov->complete) {
    f1ec:	4b02      	ldr	r3, [pc, #8]	; (f1f8 <bt_mesh_prov_complete+0xc>)
    f1ee:	681b      	ldr	r3, [r3, #0]
    f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f1f2:	b103      	cbz	r3, f1f6 <bt_mesh_prov_complete+0xa>
		prov->complete(net_idx, addr);
    f1f4:	4718      	bx	r3
    f1f6:	4770      	bx	lr
    f1f8:	20000d50 	.word	0x20000d50

0000f1fc <bt_mesh_prov_reset>:
	}
}

void bt_mesh_prov_reset(void)
{
	if (prov->reset) {
    f1fc:	4b02      	ldr	r3, [pc, #8]	; (f208 <bt_mesh_prov_reset+0xc>)
    f1fe:	681b      	ldr	r3, [r3, #0]
    f200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f202:	b103      	cbz	r3, f206 <bt_mesh_prov_reset+0xa>
		prov->reset();
    f204:	4718      	bx	r3
    f206:	4770      	bx	lr
    f208:	20000d50 	.word	0x20000d50

0000f20c <find_client>:
static struct bt_mesh_proxy_client *find_client(struct bt_conn *conn)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		if (clients[i].conn == conn) {
    f20c:	4b03      	ldr	r3, [pc, #12]	; (f21c <find_client+0x10>)
    f20e:	681a      	ldr	r2, [r3, #0]
			return &clients[i];
		}
	}

	return NULL;
}
    f210:	4282      	cmp	r2, r0
    f212:	bf0c      	ite	eq
    f214:	4618      	moveq	r0, r3
    f216:	2000      	movne	r0, #0
    f218:	4770      	bx	lr
    f21a:	bf00      	nop
    f21c:	20006790 	.word	0x20006790

0000f220 <proxy_ccc_read>:
}

static ssize_t proxy_ccc_read(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr,
			      void *buf, u16_t len, u16_t offset)
{
    f220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u16_t *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    f222:	2402      	movs	r4, #2
    f224:	9402      	str	r4, [sp, #8]
    f226:	68cc      	ldr	r4, [r1, #12]
    f228:	9401      	str	r4, [sp, #4]
    f22a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    f22e:	9400      	str	r4, [sp, #0]
    f230:	f7f8 f982 	bl	7538 <bt_gatt_attr_read>
				 sizeof(*value));
}
    f234:	b004      	add	sp, #16
    f236:	bd10      	pop	{r4, pc}

0000f238 <prov_ccc_read>:
    f238:	b410      	push	{r4}
    f23a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    f23e:	9401      	str	r4, [sp, #4]
    f240:	bc10      	pop	{r4}
    f242:	f7ff bfed 	b.w	f220 <proxy_ccc_read>
	...

0000f248 <next_sub>:
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
}

static struct bt_mesh_subnet *next_sub(void)
{
    f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
		struct bt_mesh_subnet *sub;

		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
    f24c:	4f15      	ldr	r7, [pc, #84]	; (f2a4 <next_sub+0x5c>)
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f24e:	f8df 8058 	ldr.w	r8, [pc, #88]	; f2a8 <next_sub+0x60>
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    f252:	2500      	movs	r5, #0
    f254:	463e      	mov	r6, r7
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
    f256:	683c      	ldr	r4, [r7, #0]
    f258:	442c      	add	r4, r5
    f25a:	f004 0401 	and.w	r4, r4, #1
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    f25e:	23e4      	movs	r3, #228	; 0xe4
    f260:	fb03 8304 	mla	r3, r3, r4, r8
    f264:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f268:	f8b3 11d0 	ldrh.w	r1, [r3, #464]	; 0x1d0
    f26c:	4291      	cmp	r1, r2
    f26e:	d013      	beq.n	f298 <next_sub+0x50>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
    f270:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
    f274:	2b01      	cmp	r3, #1
    f276:	d003      	beq.n	f280 <next_sub+0x38>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    f278:	f7fd fd34 	bl	cce4 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
    f27c:	2801      	cmp	r0, #1
    f27e:	d10b      	bne.n	f298 <next_sub+0x50>
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
    f280:	6833      	ldr	r3, [r6, #0]
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
    f282:	20e4      	movs	r0, #228	; 0xe4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
    f284:	3301      	adds	r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
    f286:	fb00 8004 	mla	r0, r0, r4, r8
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
    f28a:	f003 0301 	and.w	r3, r3, #1
		sub = &bt_mesh.sub[(i + next_idx) % ARRAY_SIZE(bt_mesh.sub)];
    f28e:	f500 70da 	add.w	r0, r0, #436	; 0x1b4
			next_idx = (next_idx + 1) % ARRAY_SIZE(bt_mesh.sub);
    f292:	6033      	str	r3, [r6, #0]
			return sub;
    f294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    f298:	3501      	adds	r5, #1
    f29a:	2d02      	cmp	r5, #2
    f29c:	d1db      	bne.n	f256 <next_sub+0xe>
		}
	}

	return NULL;
    f29e:	2000      	movs	r0, #0
}
    f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2a4:	20000d5c 	.word	0x20000d5c
    f2a8:	20006168 	.word	0x20006168

0000f2ac <proxy_disconnected>:
	conn_count--;
    f2ac:	4a0b      	ldr	r2, [pc, #44]	; (f2dc <proxy_disconnected+0x30>)
    f2ae:	6813      	ldr	r3, [r2, #0]
{
    f2b0:	b510      	push	{r4, lr}
		if (client->conn == conn) {
    f2b2:	4c0b      	ldr	r4, [pc, #44]	; (f2e0 <proxy_disconnected+0x34>)
	conn_count--;
    f2b4:	3b01      	subs	r3, #1
    f2b6:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
    f2b8:	6823      	ldr	r3, [r4, #0]
    f2ba:	4283      	cmp	r3, r0
    f2bc:	d109      	bne.n	f2d2 <proxy_disconnected+0x26>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
    f2be:	7aa3      	ldrb	r3, [r4, #10]
    f2c0:	2b03      	cmp	r3, #3
    f2c2:	d101      	bne.n	f2c8 <proxy_disconnected+0x1c>
				bt_mesh_pb_gatt_close(conn);
    f2c4:	f7ff fb90 	bl	e9e8 <bt_mesh_pb_gatt_close>
			bt_conn_unref(client->conn);
    f2c8:	6820      	ldr	r0, [r4, #0]
    f2ca:	f7f6 fab0 	bl	582e <bt_conn_unref>
			client->conn = NULL;
    f2ce:	2300      	movs	r3, #0
    f2d0:	6023      	str	r3, [r4, #0]
}
    f2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
    f2d6:	f7f8 bc11 	b.w	7afc <bt_mesh_adv_update>
    f2da:	bf00      	nop
    f2dc:	20000d54 	.word	0x20000d54
    f2e0:	20006790 	.word	0x20006790

0000f2e4 <proxy_connected>:
	conn_count++;
    f2e4:	4a0f      	ldr	r2, [pc, #60]	; (f324 <proxy_connected+0x40>)
    f2e6:	6813      	ldr	r3, [r2, #0]
    f2e8:	3301      	adds	r3, #1
{
    f2ea:	b570      	push	{r4, r5, r6, lr}
	proxy_adv_enabled = false;
    f2ec:	2100      	movs	r1, #0
	conn_count++;
    f2ee:	6013      	str	r3, [r2, #0]
	proxy_adv_enabled = false;
    f2f0:	4a0d      	ldr	r2, [pc, #52]	; (f328 <proxy_connected+0x44>)
	if (conn_count < CONFIG_BT_MAX_CONN) {
    f2f2:	428b      	cmp	r3, r1
{
    f2f4:	4606      	mov	r6, r0
	proxy_adv_enabled = false;
    f2f6:	7011      	strb	r1, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
    f2f8:	dc01      	bgt.n	f2fe <proxy_connected+0x1a>
		bt_mesh_adv_update();
    f2fa:	f7f8 fbff 	bl	7afc <bt_mesh_adv_update>
		if (!clients[i].conn) {
    f2fe:	4c0b      	ldr	r4, [pc, #44]	; (f32c <proxy_connected+0x48>)
    f300:	6825      	ldr	r5, [r4, #0]
    f302:	b96d      	cbnz	r5, f320 <proxy_connected+0x3c>
	client->conn = bt_conn_ref(conn);
    f304:	4630      	mov	r0, r6
    f306:	f7f6 fa8b 	bl	5820 <bt_conn_ref>
	client->filter_type = NONE;
    f30a:	72a5      	strb	r5, [r4, #10]
	client->conn = bt_conn_ref(conn);
    f30c:	6020      	str	r0, [r4, #0]
	memset(client->filter, 0, sizeof(client->filter));
    f30e:	2206      	movs	r2, #6
    f310:	4629      	mov	r1, r5
    f312:	1d20      	adds	r0, r4, #4
    f314:	f7f1 f9cc 	bl	6b0 <memset>
    f318:	f104 0320 	add.w	r3, r4, #32
    f31c:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
    f31e:	83a5      	strh	r5, [r4, #28]
    f320:	bd70      	pop	{r4, r5, r6, pc}
    f322:	bf00      	nop
    f324:	20000d54 	.word	0x20000d54
    f328:	20000d63 	.word	0x20000d63
    f32c:	20006790 	.word	0x20006790

0000f330 <filter_add>:
{
    f330:	b510      	push	{r4, lr}
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    f332:	b179      	cbz	r1, f354 <filter_add+0x24>
		if (client->filter[i] == addr) {
    f334:	8883      	ldrh	r3, [r0, #4]
    f336:	428b      	cmp	r3, r1
    f338:	d00c      	beq.n	f354 <filter_add+0x24>
    f33a:	88c4      	ldrh	r4, [r0, #6]
    f33c:	428c      	cmp	r4, r1
    f33e:	d009      	beq.n	f354 <filter_add+0x24>
    f340:	8902      	ldrh	r2, [r0, #8]
    f342:	428a      	cmp	r2, r1
    f344:	d006      	beq.n	f354 <filter_add+0x24>
		if (client->filter[i] == BT_MESH_ADDR_UNASSIGNED) {
    f346:	b113      	cbz	r3, f34e <filter_add+0x1e>
    f348:	b12c      	cbz	r4, f356 <filter_add+0x26>
    f34a:	b91a      	cbnz	r2, f354 <filter_add+0x24>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f34c:	2302      	movs	r3, #2
			client->filter[i] = addr;
    f34e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    f352:	8081      	strh	r1, [r0, #4]
    f354:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f356:	2301      	movs	r3, #1
    f358:	e7f9      	b.n	f34e <filter_add+0x1e>
	...

0000f35c <proxy_send>:
{
    f35c:	4613      	mov	r3, r2
	if (gatt_svc == MESH_GATT_PROXY) {
    f35e:	4a07      	ldr	r2, [pc, #28]	; (f37c <proxy_send+0x20>)
    f360:	7812      	ldrb	r2, [r2, #0]
    f362:	2a02      	cmp	r2, #2
    f364:	d103      	bne.n	f36e <proxy_send+0x12>
		return bt_gatt_notify(conn, &proxy_attrs[4], data, len);
    f366:	460a      	mov	r2, r1
    f368:	4905      	ldr	r1, [pc, #20]	; (f380 <proxy_send+0x24>)
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
    f36a:	f7f8 b9c7 	b.w	76fc <bt_gatt_notify>
	if (gatt_svc == MESH_GATT_PROV) {
    f36e:	2a01      	cmp	r2, #1
    f370:	d102      	bne.n	f378 <proxy_send+0x1c>
		return bt_gatt_notify(conn, &prov_attrs[4], data, len);
    f372:	460a      	mov	r2, r1
    f374:	4903      	ldr	r1, [pc, #12]	; (f384 <proxy_send+0x28>)
    f376:	e7f8      	b.n	f36a <proxy_send+0xe>
}
    f378:	2000      	movs	r0, #0
    f37a:	4770      	bx	lr
    f37c:	20000d58 	.word	0x20000d58
    f380:	200068f0 	.word	0x200068f0
    f384:	20006858 	.word	0x20006858

0000f388 <proxy_segment_and_send>:
{
    f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f38c:	4688      	mov	r8, r1
    f38e:	4614      	mov	r4, r2
    f390:	4607      	mov	r7, r0
	mtu = bt_gatt_get_mtu(conn) - 3;
    f392:	f7f8 f9d3 	bl	773c <bt_gatt_get_mtu>
	if (mtu > msg->len) {
    f396:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
    f398:	3803      	subs	r0, #3
    f39a:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
    f39c:	42ab      	cmp	r3, r5
    f39e:	f008 013f 	and.w	r1, r8, #63	; 0x3f
    f3a2:	d209      	bcs.n	f3b8 <proxy_segment_and_send+0x30>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
    f3a4:	4620      	mov	r0, r4
    f3a6:	f008 fc4f 	bl	17c48 <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
    f3aa:	88a2      	ldrh	r2, [r4, #4]
    f3ac:	6821      	ldr	r1, [r4, #0]
    f3ae:	4638      	mov	r0, r7
}
    f3b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
    f3b4:	f7ff bfd2 	b.w	f35c <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
    f3b8:	b2ce      	uxtb	r6, r1
    f3ba:	f046 0140 	orr.w	r1, r6, #64	; 0x40
    f3be:	4620      	mov	r0, r4
    f3c0:	f008 fc42 	bl	17c48 <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
    f3c4:	462a      	mov	r2, r5
    f3c6:	6821      	ldr	r1, [r4, #0]
    f3c8:	4638      	mov	r0, r7
    f3ca:	f7ff ffc7 	bl	f35c <proxy_send>
	net_buf_simple_pull(msg, mtu);
    f3ce:	4629      	mov	r1, r5
    f3d0:	4620      	mov	r0, r4
    f3d2:	f008 fc42 	bl	17c5a <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
    f3d6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
	while (msg->len) {
    f3da:	88a3      	ldrh	r3, [r4, #4]
    f3dc:	b163      	cbz	r3, f3f8 <proxy_segment_and_send+0x70>
		if (msg->len + 1 < mtu) {
    f3de:	3301      	adds	r3, #1
    f3e0:	42ab      	cmp	r3, r5
    f3e2:	da0c      	bge.n	f3fe <proxy_segment_and_send+0x76>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
    f3e4:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
    f3e8:	4620      	mov	r0, r4
    f3ea:	f008 fc2d 	bl	17c48 <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
    f3ee:	88a2      	ldrh	r2, [r4, #4]
    f3f0:	6821      	ldr	r1, [r4, #0]
    f3f2:	4638      	mov	r0, r7
    f3f4:	f7ff ffb2 	bl	f35c <proxy_send>
}
    f3f8:	2000      	movs	r0, #0
    f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
    f3fe:	4631      	mov	r1, r6
    f400:	4620      	mov	r0, r4
    f402:	f008 fc21 	bl	17c48 <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
    f406:	6821      	ldr	r1, [r4, #0]
    f408:	462a      	mov	r2, r5
    f40a:	4638      	mov	r0, r7
    f40c:	f7ff ffa6 	bl	f35c <proxy_send>
		net_buf_simple_pull(msg, mtu);
    f410:	4629      	mov	r1, r5
    f412:	4620      	mov	r0, r4
    f414:	f008 fc21 	bl	17c5a <net_buf_simple_pull>
    f418:	e7df      	b.n	f3da <proxy_segment_and_send+0x52>

0000f41a <beacon_send>:
{
    f41a:	b530      	push	{r4, r5, lr}
    f41c:	b089      	sub	sp, #36	; 0x24
    f41e:	4604      	mov	r4, r0
    f420:	460d      	mov	r5, r1
	struct net_buf_simple *buf = NET_BUF_SIMPLE(23);
    f422:	2220      	movs	r2, #32
    f424:	2100      	movs	r1, #0
    f426:	4668      	mov	r0, sp
    f428:	f7f1 f942 	bl	6b0 <memset>
    f42c:	2317      	movs	r3, #23
    f42e:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_mesh_beacon_create(sub, buf);
    f432:	4669      	mov	r1, sp
	buf->data = buf->__buf + reserve_head;
    f434:	f10d 0309 	add.w	r3, sp, #9
    f438:	4628      	mov	r0, r5
    f43a:	9300      	str	r3, [sp, #0]
    f43c:	f7f8 fc0a 	bl	7c54 <bt_mesh_beacon_create>
	return proxy_segment_and_send(conn, BT_MESH_PROXY_BEACON, buf);
    f440:	466a      	mov	r2, sp
    f442:	2101      	movs	r1, #1
    f444:	4620      	mov	r0, r4
    f446:	f7ff ff9f 	bl	f388 <proxy_segment_and_send>
}
    f44a:	b009      	add	sp, #36	; 0x24
    f44c:	bd30      	pop	{r4, r5, pc}
	...

0000f450 <proxy_send_beacons>:
{
    f450:	b538      	push	{r3, r4, r5, lr}
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f452:	4c0e      	ldr	r4, [pc, #56]	; (f48c <proxy_send_beacons+0x3c>)
    f454:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
    f458:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f45c:	429a      	cmp	r2, r3
{
    f45e:	4605      	mov	r5, r0
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f460:	d005      	beq.n	f46e <proxy_send_beacons+0x1e>
			beacon_send(client->conn, sub);
    f462:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    f466:	f850 0c0c 	ldr.w	r0, [r0, #-12]
    f46a:	f7ff ffd6 	bl	f41a <beacon_send>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    f46e:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
    f472:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f476:	429a      	cmp	r2, r3
    f478:	d006      	beq.n	f488 <proxy_send_beacons+0x38>
			beacon_send(client->conn, sub);
    f47a:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    f47e:	4904      	ldr	r1, [pc, #16]	; (f490 <proxy_send_beacons+0x40>)
}
    f480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(client->conn, sub);
    f484:	f7ff bfc9 	b.w	f41a <beacon_send>
    f488:	bd38      	pop	{r3, r4, r5, pc}
    f48a:	bf00      	nop
    f48c:	20006168 	.word	0x20006168
    f490:	20006400 	.word	0x20006400

0000f494 <send_filter_status>:
{
    f494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_net_tx tx = {
    f496:	f851 3b04 	ldr.w	r3, [r1], #4
    f49a:	9301      	str	r3, [sp, #4]
    f49c:	2600      	movs	r6, #0
{
    f49e:	4614      	mov	r4, r2
    f4a0:	4605      	mov	r5, r0
	struct bt_mesh_net_tx tx = {
    f4a2:	9102      	str	r1, [sp, #8]
    f4a4:	9603      	str	r6, [sp, #12]
		.src = bt_mesh_primary_addr(),
    f4a6:	f7fb fbad 	bl	ac04 <bt_mesh_primary_addr>
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    f4aa:	9b02      	ldr	r3, [sp, #8]
	struct bt_mesh_net_tx tx = {
    f4ac:	f8ad 000c 	strh.w	r0, [sp, #12]
	tx.ctx->addr = BT_MESH_ADDR_UNASSIGNED;
    f4b0:	809e      	strh	r6, [r3, #4]
    f4b2:	f104 0312 	add.w	r3, r4, #18
	net_buf_simple_add_u8(buf, CFG_FILTER_STATUS);
    f4b6:	2103      	movs	r1, #3
    f4b8:	6023      	str	r3, [r4, #0]
	buf->len = 0;
    f4ba:	80a6      	strh	r6, [r4, #4]
    f4bc:	4620      	mov	r0, r4
    f4be:	f008 fb70 	bl	17ba2 <net_buf_simple_add_u8>
	if (client->filter_type == WHITELIST) {
    f4c2:	7aab      	ldrb	r3, [r5, #10]
    f4c4:	2b01      	cmp	r3, #1
		net_buf_simple_add_u8(buf, 0x00);
    f4c6:	bf0c      	ite	eq
    f4c8:	4631      	moveq	r1, r6
		net_buf_simple_add_u8(buf, 0x01);
    f4ca:	2101      	movne	r1, #1
    f4cc:	4620      	mov	r0, r4
    f4ce:	f008 fb68 	bl	17ba2 <net_buf_simple_add_u8>
    f4d2:	1d2b      	adds	r3, r5, #4
    f4d4:	f105 020a 	add.w	r2, r5, #10
	for (filter_size = 0, i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f4d8:	2100      	movs	r1, #0
    f4da:	4293      	cmp	r3, r2
    f4dc:	d10f      	bne.n	f4fe <send_filter_status+0x6a>
	net_buf_simple_add_be16(buf, filter_size);
    f4de:	4620      	mov	r0, r4
    f4e0:	f008 fb76 	bl	17bd0 <net_buf_simple_add_be16>
	err = bt_mesh_net_encode(&tx, buf, true);
    f4e4:	2201      	movs	r2, #1
    f4e6:	4621      	mov	r1, r4
    f4e8:	a801      	add	r0, sp, #4
    f4ea:	f7f9 f98f 	bl	880c <bt_mesh_net_encode>
	if (err) {
    f4ee:	b920      	cbnz	r0, f4fa <send_filter_status+0x66>
	err = proxy_segment_and_send(client->conn, BT_MESH_PROXY_CONFIG, buf);
    f4f0:	4622      	mov	r2, r4
    f4f2:	2102      	movs	r1, #2
    f4f4:	6828      	ldr	r0, [r5, #0]
    f4f6:	f7ff ff47 	bl	f388 <proxy_segment_and_send>
}
    f4fa:	b004      	add	sp, #16
    f4fc:	bd70      	pop	{r4, r5, r6, pc}
		if (client->filter[i] != BT_MESH_ADDR_UNASSIGNED) {
    f4fe:	f833 0b02 	ldrh.w	r0, [r3], #2
    f502:	2800      	cmp	r0, #0
    f504:	d0e9      	beq.n	f4da <send_filter_status+0x46>
			filter_size++;
    f506:	3101      	adds	r1, #1
    f508:	b289      	uxth	r1, r1
    f50a:	e7e6      	b.n	f4da <send_filter_status+0x46>

0000f50c <proxy_complete_pdu>:
{
    f50c:	b530      	push	{r4, r5, lr}
	switch (client->msg_type) {
    f50e:	7ac3      	ldrb	r3, [r0, #11]
{
    f510:	b091      	sub	sp, #68	; 0x44
    f512:	4604      	mov	r4, r0
	switch (client->msg_type) {
    f514:	2b03      	cmp	r3, #3
    f516:	d808      	bhi.n	f52a <proxy_complete_pdu+0x1e>
    f518:	e8df f003 	tbb	[pc, r3]
    f51c:	79120e02 	.word	0x79120e02
		bt_mesh_net_recv(&client->buf, 0, BT_MESH_NET_IF_PROXY);
    f520:	2202      	movs	r2, #2
    f522:	2100      	movs	r1, #0
    f524:	3018      	adds	r0, #24
    f526:	f7f9 fc01 	bl	8d2c <bt_mesh_net_recv>
	buf->data = buf->__buf + reserve_head;
    f52a:	f104 0320 	add.w	r3, r4, #32
    f52e:	61a3      	str	r3, [r4, #24]
	buf->len = 0;
    f530:	2300      	movs	r3, #0
    f532:	83a3      	strh	r3, [r4, #28]
}
    f534:	b011      	add	sp, #68	; 0x44
    f536:	bd30      	pop	{r4, r5, pc}
		bt_mesh_beacon_recv(&client->buf);
    f538:	3018      	adds	r0, #24
    f53a:	f7f8 fc61 	bl	7e00 <bt_mesh_beacon_recv>
		break;
    f53e:	e7f4      	b.n	f52a <proxy_complete_pdu+0x1e>
	struct net_buf_simple *buf = NET_BUF_SIMPLE(29);
    f540:	2228      	movs	r2, #40	; 0x28
    f542:	2100      	movs	r1, #0
    f544:	a806      	add	r0, sp, #24
    f546:	f7f1 f8b3 	bl	6b0 <memset>
    f54a:	231d      	movs	r3, #29
    f54c:	f8ad 301e 	strh.w	r3, [sp, #30]
	err = bt_mesh_net_decode(&client->buf, BT_MESH_NET_IF_PROXY_CFG,
    f550:	aa01      	add	r2, sp, #4
    f552:	ab06      	add	r3, sp, #24
    f554:	2103      	movs	r1, #3
    f556:	f104 0018 	add.w	r0, r4, #24
    f55a:	f7f9 faab 	bl	8ab4 <bt_mesh_net_decode>
	if (err) {
    f55e:	4605      	mov	r5, r0
    f560:	2800      	cmp	r0, #0
    f562:	d1e2      	bne.n	f52a <proxy_complete_pdu+0x1e>
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    f564:	2109      	movs	r1, #9
    f566:	a806      	add	r0, sp, #24
    f568:	f008 fb77 	bl	17c5a <net_buf_simple_pull>
	if (buf->len < 1) {
    f56c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    f570:	2b00      	cmp	r3, #0
    f572:	d0da      	beq.n	f52a <proxy_complete_pdu+0x1e>
	opcode = net_buf_simple_pull_u8(buf);
    f574:	a806      	add	r0, sp, #24
    f576:	f008 fb78 	bl	17c6a <net_buf_simple_pull_u8>
	switch (opcode) {
    f57a:	2801      	cmp	r0, #1
    f57c:	d03e      	beq.n	f5fc <proxy_complete_pdu+0xf0>
    f57e:	d318      	bcc.n	f5b2 <proxy_complete_pdu+0xa6>
    f580:	2802      	cmp	r0, #2
    f582:	d1d2      	bne.n	f52a <proxy_complete_pdu+0x1e>
		while (buf->len >= 2) {
    f584:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    f588:	2b01      	cmp	r3, #1
    f58a:	d91c      	bls.n	f5c6 <proxy_complete_pdu+0xba>
			addr = net_buf_simple_pull_be16(buf);
    f58c:	a806      	add	r0, sp, #24
    f58e:	f008 fb7c 	bl	17c8a <net_buf_simple_pull_be16>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    f592:	2800      	cmp	r0, #0
    f594:	d0f6      	beq.n	f584 <proxy_complete_pdu+0x78>
		if (client->filter[i] == addr) {
    f596:	88a3      	ldrh	r3, [r4, #4]
    f598:	4283      	cmp	r3, r0
    f59a:	d034      	beq.n	f606 <proxy_complete_pdu+0xfa>
    f59c:	88e3      	ldrh	r3, [r4, #6]
    f59e:	4283      	cmp	r3, r0
    f5a0:	d033      	beq.n	f60a <proxy_complete_pdu+0xfe>
    f5a2:	8923      	ldrh	r3, [r4, #8]
    f5a4:	4283      	cmp	r3, r0
    f5a6:	d1ed      	bne.n	f584 <proxy_complete_pdu+0x78>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f5a8:	2302      	movs	r3, #2
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
    f5aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    f5ae:	809d      	strh	r5, [r3, #4]
    f5b0:	e7e8      	b.n	f584 <proxy_complete_pdu+0x78>
	if (buf->len < 1) {
    f5b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    f5b6:	b133      	cbz	r3, f5c6 <proxy_complete_pdu+0xba>
	type = net_buf_simple_pull_u8(buf);
    f5b8:	a806      	add	r0, sp, #24
    f5ba:	f008 fb56 	bl	17c6a <net_buf_simple_pull_u8>
	switch (type) {
    f5be:	4601      	mov	r1, r0
    f5c0:	b138      	cbz	r0, f5d2 <proxy_complete_pdu+0xc6>
    f5c2:	2801      	cmp	r0, #1
    f5c4:	d00c      	beq.n	f5e0 <proxy_complete_pdu+0xd4>
		send_filter_status(client, &rx, buf);
    f5c6:	aa06      	add	r2, sp, #24
    f5c8:	a901      	add	r1, sp, #4
    f5ca:	4620      	mov	r0, r4
    f5cc:	f7ff ff62 	bl	f494 <send_filter_status>
    f5d0:	e7ab      	b.n	f52a <proxy_complete_pdu+0x1e>
		memset(client->filter, 0, sizeof(client->filter));
    f5d2:	2206      	movs	r2, #6
    f5d4:	1d20      	adds	r0, r4, #4
    f5d6:	f7f1 f86b 	bl	6b0 <memset>
		client->filter_type = WHITELIST;
    f5da:	2301      	movs	r3, #1
		client->filter_type = BLACKLIST;
    f5dc:	72a3      	strb	r3, [r4, #10]
    f5de:	e7f2      	b.n	f5c6 <proxy_complete_pdu+0xba>
		memset(client->filter, 0, sizeof(client->filter));
    f5e0:	2206      	movs	r2, #6
    f5e2:	4629      	mov	r1, r5
    f5e4:	1d20      	adds	r0, r4, #4
    f5e6:	f7f1 f863 	bl	6b0 <memset>
		client->filter_type = BLACKLIST;
    f5ea:	2302      	movs	r3, #2
    f5ec:	e7f6      	b.n	f5dc <proxy_complete_pdu+0xd0>
			addr = net_buf_simple_pull_be16(buf);
    f5ee:	a806      	add	r0, sp, #24
    f5f0:	f008 fb4b 	bl	17c8a <net_buf_simple_pull_be16>
			filter_add(client, addr);
    f5f4:	4601      	mov	r1, r0
    f5f6:	4620      	mov	r0, r4
    f5f8:	f7ff fe9a 	bl	f330 <filter_add>
		while (buf->len >= 2) {
    f5fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    f600:	2b01      	cmp	r3, #1
    f602:	d8f4      	bhi.n	f5ee <proxy_complete_pdu+0xe2>
    f604:	e7df      	b.n	f5c6 <proxy_complete_pdu+0xba>
		if (client->filter[i] == addr) {
    f606:	2300      	movs	r3, #0
    f608:	e7cf      	b.n	f5aa <proxy_complete_pdu+0x9e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f60a:	2301      	movs	r3, #1
    f60c:	e7cd      	b.n	f5aa <proxy_complete_pdu+0x9e>
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
    f60e:	f100 0118 	add.w	r1, r0, #24
    f612:	6800      	ldr	r0, [r0, #0]
    f614:	f7ff f99c 	bl	e950 <bt_mesh_pb_gatt_recv>
		break;
    f618:	e787      	b.n	f52a <proxy_complete_pdu+0x1e>

0000f61a <proxy_recv>:
{
    f61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f61e:	4616      	mov	r6, r2
    f620:	461d      	mov	r5, r3
	struct bt_mesh_proxy_client *client = find_client(conn);
    f622:	f7ff fdf3 	bl	f20c <find_client>
	if (!client) {
    f626:	4604      	mov	r4, r0
    f628:	2800      	cmp	r0, #0
    f62a:	d04b      	beq.n	f6c4 <proxy_recv+0xaa>
	if (len < 1) {
    f62c:	b925      	cbnz	r5, f638 <proxy_recv+0x1e>
		return -EINVAL;
    f62e:	f06f 0515 	mvn.w	r5, #21
}
    f632:	4628      	mov	r0, r5
    f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
    f638:	7832      	ldrb	r2, [r6, #0]
    f63a:	68c9      	ldr	r1, [r1, #12]
    f63c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    f640:	3100      	adds	r1, #0
    f642:	f1a2 0303 	sub.w	r3, r2, #3
    f646:	bf18      	it	ne
    f648:	2101      	movne	r1, #1
    f64a:	425a      	negs	r2, r3
    f64c:	415a      	adcs	r2, r3
    f64e:	4291      	cmp	r1, r2
    f650:	d1ed      	bne.n	f62e <proxy_recv+0x14>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
    f652:	f100 0718 	add.w	r7, r0, #24
    f656:	4638      	mov	r0, r7
    f658:	f008 fb39 	bl	17cce <net_buf_simple_tailroom>
    f65c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    f660:	4580      	cmp	r8, r0
    f662:	d8e4      	bhi.n	f62e <proxy_recv+0x14>
	switch (PDU_SAR(data)) {
    f664:	7830      	ldrb	r0, [r6, #0]
    f666:	8ba3      	ldrh	r3, [r4, #28]
    f668:	0982      	lsrs	r2, r0, #6
    f66a:	2a02      	cmp	r2, #2
    f66c:	d01a      	beq.n	f6a4 <proxy_recv+0x8a>
    f66e:	2a03      	cmp	r2, #3
    f670:	d020      	beq.n	f6b4 <proxy_recv+0x9a>
    f672:	2a01      	cmp	r2, #1
    f674:	d00b      	beq.n	f68e <proxy_recv+0x74>
		if (client->buf.len) {
    f676:	2b00      	cmp	r3, #0
    f678:	d1d9      	bne.n	f62e <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
    f67a:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    f67c:	4642      	mov	r2, r8
    f67e:	1c71      	adds	r1, r6, #1
    f680:	4638      	mov	r0, r7
    f682:	f008 fa85 	bl	17b90 <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
    f686:	4620      	mov	r0, r4
    f688:	f7ff ff40 	bl	f50c <proxy_complete_pdu>
		break;
    f68c:	e7d1      	b.n	f632 <proxy_recv+0x18>
		if (client->buf.len) {
    f68e:	2b00      	cmp	r3, #0
    f690:	d1cd      	bne.n	f62e <proxy_recv+0x14>
		client->msg_type = PDU_TYPE(data);
    f692:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f696:	72e0      	strb	r0, [r4, #11]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
    f698:	4642      	mov	r2, r8
    f69a:	1c71      	adds	r1, r6, #1
    f69c:	4638      	mov	r0, r7
    f69e:	f008 fa77 	bl	17b90 <net_buf_simple_add_mem>
		break;
    f6a2:	e7c6      	b.n	f632 <proxy_recv+0x18>
		if (!client->buf.len) {
    f6a4:	2b00      	cmp	r3, #0
    f6a6:	d0c2      	beq.n	f62e <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
    f6a8:	7ae3      	ldrb	r3, [r4, #11]
    f6aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f6ae:	4283      	cmp	r3, r0
    f6b0:	d0f2      	beq.n	f698 <proxy_recv+0x7e>
    f6b2:	e7bc      	b.n	f62e <proxy_recv+0x14>
		if (!client->buf.len) {
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	d0ba      	beq.n	f62e <proxy_recv+0x14>
		if (client->msg_type != PDU_TYPE(data)) {
    f6b8:	7ae3      	ldrb	r3, [r4, #11]
    f6ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f6be:	4283      	cmp	r3, r0
    f6c0:	d0dc      	beq.n	f67c <proxy_recv+0x62>
    f6c2:	e7b4      	b.n	f62e <proxy_recv+0x14>
		return -ENOTCONN;
    f6c4:	f06f 0538 	mvn.w	r5, #56	; 0x38
    f6c8:	e7b3      	b.n	f632 <proxy_recv+0x18>

0000f6ca <prov_ccc_write>:
	if (len != sizeof(*value)) {
    f6ca:	2b02      	cmp	r3, #2
{
    f6cc:	b570      	push	{r4, r5, r6, lr}
	u16_t *value = attr->user_data;
    f6ce:	68c9      	ldr	r1, [r1, #12]
{
    f6d0:	4605      	mov	r5, r0
    f6d2:	461c      	mov	r4, r3
	if (len != sizeof(*value)) {
    f6d4:	d111      	bne.n	f6fa <prov_ccc_write+0x30>
	return ((u16_t)src[1] << 8) | src[0];
    f6d6:	7856      	ldrb	r6, [r2, #1]
    f6d8:	7813      	ldrb	r3, [r2, #0]
    f6da:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (*value != BT_GATT_CCC_NOTIFY) {
    f6de:	2b01      	cmp	r3, #1
	*value = sys_get_le16(buf);
    f6e0:	800b      	strh	r3, [r1, #0]
	if (*value != BT_GATT_CCC_NOTIFY) {
    f6e2:	d108      	bne.n	f6f6 <prov_ccc_write+0x2c>
	client = find_client(conn);
    f6e4:	f7ff fd92 	bl	f20c <find_client>
	if (client->filter_type == NONE) {
    f6e8:	7a83      	ldrb	r3, [r0, #10]
    f6ea:	b923      	cbnz	r3, f6f6 <prov_ccc_write+0x2c>
		client->filter_type = PROV;
    f6ec:	2303      	movs	r3, #3
    f6ee:	7283      	strb	r3, [r0, #10]
		bt_mesh_pb_gatt_open(conn);
    f6f0:	4628      	mov	r0, r5
    f6f2:	f7ff f957 	bl	e9a4 <bt_mesh_pb_gatt_open>
}
    f6f6:	4620      	mov	r0, r4
    f6f8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    f6fa:	f06f 040c 	mvn.w	r4, #12
    f6fe:	e7fa      	b.n	f6f6 <prov_ccc_write+0x2c>

0000f700 <proxy_ccc_write>:
	if (len != sizeof(value)) {
    f700:	2b02      	cmp	r3, #2
{
    f702:	b538      	push	{r3, r4, r5, lr}
	if (len != sizeof(value)) {
    f704:	d124      	bne.n	f750 <proxy_ccc_write+0x50>
    f706:	7853      	ldrb	r3, [r2, #1]
    f708:	7815      	ldrb	r5, [r2, #0]
    f70a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	if (value != BT_GATT_CCC_NOTIFY) {
    f70e:	b22d      	sxth	r5, r5
    f710:	2d01      	cmp	r5, #1
    f712:	d001      	beq.n	f718 <proxy_ccc_write+0x18>
		return len;
    f714:	2002      	movs	r0, #2
    f716:	bd38      	pop	{r3, r4, r5, pc}
	client = find_client(conn);
    f718:	f7ff fd78 	bl	f20c <find_client>
	if (client->filter_type == NONE) {
    f71c:	7a83      	ldrb	r3, [r0, #10]
    f71e:	2b00      	cmp	r3, #0
    f720:	d1f8      	bne.n	f714 <proxy_ccc_write+0x14>
		client->filter_type = WHITELIST;
    f722:	7285      	strb	r5, [r0, #10]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f724:	f100 0314 	add.w	r3, r0, #20
    f728:	f3bf 8f5b 	dmb	ish
    f72c:	e853 2f00 	ldrex	r2, [r3]
    f730:	f042 0101 	orr.w	r1, r2, #1
    f734:	e843 1500 	strex	r5, r1, [r3]
    f738:	2d00      	cmp	r5, #0
    f73a:	d1f7      	bne.n	f72c <proxy_ccc_write+0x2c>
    f73c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f740:	07d3      	lsls	r3, r2, #31
    f742:	d4e7      	bmi.n	f714 <proxy_ccc_write+0x14>
		k_queue_append(&work_q->queue, work);
    f744:	f100 010c 	add.w	r1, r0, #12
    f748:	4803      	ldr	r0, [pc, #12]	; (f758 <proxy_ccc_write+0x58>)
    f74a:	f008 fd0e 	bl	1816a <k_queue_append>
    f74e:	e7e1      	b.n	f714 <proxy_ccc_write+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    f750:	f06f 000c 	mvn.w	r0, #12
}
    f754:	bd38      	pop	{r3, r4, r5, pc}
    f756:	bf00      	nop
    f758:	20001dd8 	.word	0x20001dd8

0000f75c <bt_mesh_proxy_beacon_send>:
{
    f75c:	b538      	push	{r3, r4, r5, lr}
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    f75e:	4c0e      	ldr	r4, [pc, #56]	; (f798 <bt_mesh_proxy_beacon_send+0x3c>)
{
    f760:	4601      	mov	r1, r0
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
    f762:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
	if (!sub) {
    f766:	b131      	cbz	r1, f776 <bt_mesh_proxy_beacon_send+0x1a>
		if (clients[i].conn) {
    f768:	4b0c      	ldr	r3, [pc, #48]	; (f79c <bt_mesh_proxy_beacon_send+0x40>)
    f76a:	6818      	ldr	r0, [r3, #0]
    f76c:	b198      	cbz	r0, f796 <bt_mesh_proxy_beacon_send+0x3a>
}
    f76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			beacon_send(clients[i].conn, sub);
    f772:	f7ff be52 	b.w	f41a <beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    f776:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
    f77a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f77e:	429a      	cmp	r2, r3
    f780:	d002      	beq.n	f788 <bt_mesh_proxy_beacon_send+0x2c>
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
    f782:	4628      	mov	r0, r5
    f784:	f7ff ffea 	bl	f75c <bt_mesh_proxy_beacon_send>
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    f788:	f8b4 22b4 	ldrh.w	r2, [r4, #692]	; 0x2b4
				bt_mesh_proxy_beacon_send(&bt_mesh.sub[i]);
    f78c:	4904      	ldr	r1, [pc, #16]	; (f7a0 <bt_mesh_proxy_beacon_send+0x44>)
			if (bt_mesh.sub[i].net_idx != BT_MESH_KEY_UNUSED) {
    f78e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f792:	429a      	cmp	r2, r3
    f794:	d1e7      	bne.n	f766 <bt_mesh_proxy_beacon_send+0xa>
    f796:	bd38      	pop	{r3, r4, r5, pc}
    f798:	20006168 	.word	0x20006168
    f79c:	20006790 	.word	0x20006790
    f7a0:	20006400 	.word	0x20006400

0000f7a4 <bt_mesh_proxy_identity_start>:
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
    f7a4:	2301      	movs	r3, #1
{
    f7a6:	b510      	push	{r4, lr}
	sub->node_id = BT_MESH_NODE_IDENTITY_RUNNING;
    f7a8:	f880 3020 	strb.w	r3, [r0, #32]
{
    f7ac:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    f7ae:	f008 ffd3 	bl	18758 <_impl_k_uptime_get_32>
	next_idx = sub - bt_mesh.sub;
    f7b2:	4b07      	ldr	r3, [pc, #28]	; (f7d0 <bt_mesh_proxy_identity_start+0x2c>)
	sub->node_id_start = k_uptime_get_32();
    f7b4:	6260      	str	r0, [r4, #36]	; 0x24
	next_idx = sub - bt_mesh.sub;
    f7b6:	1ae4      	subs	r4, r4, r3
    f7b8:	10a4      	asrs	r4, r4, #2
    f7ba:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    f7be:	ebc4 2444 	rsb	r4, r4, r4, lsl #9
    f7c2:	eb04 4484 	add.w	r4, r4, r4, lsl #18
    f7c6:	4b03      	ldr	r3, [pc, #12]	; (f7d4 <bt_mesh_proxy_identity_start+0x30>)
    f7c8:	4264      	negs	r4, r4
    f7ca:	601c      	str	r4, [r3, #0]
    f7cc:	bd10      	pop	{r4, pc}
    f7ce:	bf00      	nop
    f7d0:	2000631c 	.word	0x2000631c
    f7d4:	20000d5c 	.word	0x20000d5c

0000f7d8 <bt_mesh_proxy_identity_stop>:
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    f7d8:	2300      	movs	r3, #0
    f7da:	f880 3020 	strb.w	r3, [r0, #32]
	sub->node_id_start = 0;
    f7de:	6243      	str	r3, [r0, #36]	; 0x24
    f7e0:	4770      	bx	lr
	...

0000f7e4 <bt_mesh_proxy_get_buf>:
	buf->data = buf->__buf + reserve_head;
    f7e4:	4803      	ldr	r0, [pc, #12]	; (f7f4 <bt_mesh_proxy_get_buf+0x10>)
    f7e6:	f100 0320 	add.w	r3, r0, #32
    f7ea:	6183      	str	r3, [r0, #24]
	buf->len = 0;
    f7ec:	2300      	movs	r3, #0
    f7ee:	8383      	strh	r3, [r0, #28]
}
    f7f0:	3018      	adds	r0, #24
    f7f2:	4770      	bx	lr
    f7f4:	20006790 	.word	0x20006790

0000f7f8 <bt_mesh_proxy_prov_enable>:
{
    f7f8:	b508      	push	{r3, lr}
	bt_gatt_service_register(&prov_svc);
    f7fa:	4807      	ldr	r0, [pc, #28]	; (f818 <bt_mesh_proxy_prov_enable+0x20>)
    f7fc:	f7f7 fe3e 	bl	747c <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROV;
    f800:	4a06      	ldr	r2, [pc, #24]	; (f81c <bt_mesh_proxy_prov_enable+0x24>)
    f802:	2301      	movs	r3, #1
    f804:	7013      	strb	r3, [r2, #0]
	prov_fast_adv = true;
    f806:	4a06      	ldr	r2, [pc, #24]	; (f820 <bt_mesh_proxy_prov_enable+0x28>)
    f808:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
    f80a:	4b06      	ldr	r3, [pc, #24]	; (f824 <bt_mesh_proxy_prov_enable+0x2c>)
    f80c:	681a      	ldr	r2, [r3, #0]
    f80e:	b10a      	cbz	r2, f814 <bt_mesh_proxy_prov_enable+0x1c>
			clients[i].filter_type = PROV;
    f810:	2203      	movs	r2, #3
    f812:	729a      	strb	r2, [r3, #10]
}
    f814:	2000      	movs	r0, #0
    f816:	bd08      	pop	{r3, pc}
    f818:	20006880 	.word	0x20006880
    f81c:	20000d58 	.word	0x20000d58
    f820:	20000d62 	.word	0x20000d62
    f824:	20006790 	.word	0x20006790

0000f828 <bt_mesh_proxy_prov_disable>:
{
    f828:	b538      	push	{r3, r4, r5, lr}
		if (client->conn && client->filter_type == PROV) {
    f82a:	4c08      	ldr	r4, [pc, #32]	; (f84c <bt_mesh_proxy_prov_disable+0x24>)
	bt_gatt_service_unregister(&prov_svc);
    f82c:	4808      	ldr	r0, [pc, #32]	; (f850 <bt_mesh_proxy_prov_disable+0x28>)
    f82e:	f7f7 fe57 	bl	74e0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
    f832:	4b08      	ldr	r3, [pc, #32]	; (f854 <bt_mesh_proxy_prov_disable+0x2c>)
		if (client->conn && client->filter_type == PROV) {
    f834:	6820      	ldr	r0, [r4, #0]
	gatt_svc = MESH_GATT_NONE;
    f836:	2500      	movs	r5, #0
    f838:	701d      	strb	r5, [r3, #0]
		if (client->conn && client->filter_type == PROV) {
    f83a:	b128      	cbz	r0, f848 <bt_mesh_proxy_prov_disable+0x20>
    f83c:	7aa3      	ldrb	r3, [r4, #10]
    f83e:	2b03      	cmp	r3, #3
    f840:	d102      	bne.n	f848 <bt_mesh_proxy_prov_disable+0x20>
			bt_mesh_pb_gatt_close(client->conn);
    f842:	f7ff f8d1 	bl	e9e8 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
    f846:	72a5      	strb	r5, [r4, #10]
}
    f848:	2000      	movs	r0, #0
    f84a:	bd38      	pop	{r3, r4, r5, pc}
    f84c:	20006790 	.word	0x20006790
    f850:	20006880 	.word	0x20006880
    f854:	20000d58 	.word	0x20000d58

0000f858 <bt_mesh_proxy_gatt_enable>:
{
    f858:	b508      	push	{r3, lr}
	bt_gatt_service_register(&proxy_svc);
    f85a:	4806      	ldr	r0, [pc, #24]	; (f874 <bt_mesh_proxy_gatt_enable+0x1c>)
    f85c:	f7f7 fe0e 	bl	747c <bt_gatt_service_register>
	gatt_svc = MESH_GATT_PROXY;
    f860:	4b05      	ldr	r3, [pc, #20]	; (f878 <bt_mesh_proxy_gatt_enable+0x20>)
    f862:	2202      	movs	r2, #2
    f864:	701a      	strb	r2, [r3, #0]
		if (clients[i].conn) {
    f866:	4b05      	ldr	r3, [pc, #20]	; (f87c <bt_mesh_proxy_gatt_enable+0x24>)
    f868:	681a      	ldr	r2, [r3, #0]
    f86a:	b10a      	cbz	r2, f870 <bt_mesh_proxy_gatt_enable+0x18>
			clients[i].filter_type = WHITELIST;
    f86c:	2201      	movs	r2, #1
    f86e:	729a      	strb	r2, [r3, #10]
}
    f870:	2000      	movs	r0, #0
    f872:	bd08      	pop	{r3, pc}
    f874:	20006918 	.word	0x20006918
    f878:	20000d58 	.word	0x20000d58
    f87c:	20006790 	.word	0x20006790

0000f880 <bt_mesh_proxy_gatt_disconnect>:
		if (client->conn && (client->filter_type == WHITELIST ||
    f880:	4b06      	ldr	r3, [pc, #24]	; (f89c <bt_mesh_proxy_gatt_disconnect+0x1c>)
    f882:	6818      	ldr	r0, [r3, #0]
    f884:	b140      	cbz	r0, f898 <bt_mesh_proxy_gatt_disconnect+0x18>
    f886:	7a9a      	ldrb	r2, [r3, #10]
    f888:	3a01      	subs	r2, #1
    f88a:	2a01      	cmp	r2, #1
    f88c:	d804      	bhi.n	f898 <bt_mesh_proxy_gatt_disconnect+0x18>
			client->filter_type = NONE;
    f88e:	2200      	movs	r2, #0
    f890:	729a      	strb	r2, [r3, #10]
			bt_conn_disconnect(client->conn,
    f892:	2113      	movs	r1, #19
    f894:	f7f5 bfce 	b.w	5834 <bt_conn_disconnect>
    f898:	4770      	bx	lr
    f89a:	bf00      	nop
    f89c:	20006790 	.word	0x20006790

0000f8a0 <bt_mesh_proxy_gatt_disable>:
{
    f8a0:	b508      	push	{r3, lr}
	bt_mesh_proxy_gatt_disconnect();
    f8a2:	f7ff ffed 	bl	f880 <bt_mesh_proxy_gatt_disconnect>
	bt_gatt_service_unregister(&proxy_svc);
    f8a6:	4803      	ldr	r0, [pc, #12]	; (f8b4 <bt_mesh_proxy_gatt_disable+0x14>)
    f8a8:	f7f7 fe1a 	bl	74e0 <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
    f8ac:	4b02      	ldr	r3, [pc, #8]	; (f8b8 <bt_mesh_proxy_gatt_disable+0x18>)
    f8ae:	2000      	movs	r0, #0
    f8b0:	7018      	strb	r0, [r3, #0]
}
    f8b2:	bd08      	pop	{r3, pc}
    f8b4:	20006918 	.word	0x20006918
    f8b8:	20000d58 	.word	0x20000d58

0000f8bc <bt_mesh_proxy_addr_add>:
	if (client->filter_type == WHITELIST) {
    f8bc:	f810 3c0e 	ldrb.w	r3, [r0, #-14]
    f8c0:	2b01      	cmp	r3, #1
{
    f8c2:	460a      	mov	r2, r1
	if (client->filter_type == WHITELIST) {
    f8c4:	d102      	bne.n	f8cc <bt_mesh_proxy_addr_add+0x10>
		filter_add(client, addr);
    f8c6:	3818      	subs	r0, #24
    f8c8:	f7ff bd32 	b.w	f330 <filter_add>
	} else if (client->filter_type == BLACKLIST) {
    f8cc:	2b02      	cmp	r3, #2
    f8ce:	d111      	bne.n	f8f4 <bt_mesh_proxy_addr_add+0x38>
	if (addr == BT_MESH_ADDR_UNASSIGNED) {
    f8d0:	b181      	cbz	r1, f8f4 <bt_mesh_proxy_addr_add+0x38>
		if (client->filter[i] == addr) {
    f8d2:	f830 1c14 	ldrh.w	r1, [r0, #-20]
    f8d6:	4291      	cmp	r1, r2
    f8d8:	d00d      	beq.n	f8f6 <bt_mesh_proxy_addr_add+0x3a>
    f8da:	f830 1c12 	ldrh.w	r1, [r0, #-18]
    f8de:	4291      	cmp	r1, r2
    f8e0:	d00b      	beq.n	f8fa <bt_mesh_proxy_addr_add+0x3e>
    f8e2:	f830 1c10 	ldrh.w	r1, [r0, #-16]
    f8e6:	4291      	cmp	r1, r2
    f8e8:	d104      	bne.n	f8f4 <bt_mesh_proxy_addr_add+0x38>
			client->filter[i] = BT_MESH_ADDR_UNASSIGNED;
    f8ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    f8ee:	2300      	movs	r3, #0
    f8f0:	f820 3c14 	strh.w	r3, [r0, #-20]
    f8f4:	4770      	bx	lr
		if (client->filter[i] == addr) {
    f8f6:	2300      	movs	r3, #0
    f8f8:	e7f7      	b.n	f8ea <bt_mesh_proxy_addr_add+0x2e>
	for (i = 0; i < ARRAY_SIZE(client->filter); i++) {
    f8fa:	2301      	movs	r3, #1
    f8fc:	e7f5      	b.n	f8ea <bt_mesh_proxy_addr_add+0x2e>

0000f8fe <bt_mesh_proxy_send>:
{
    f8fe:	b538      	push	{r3, r4, r5, lr}
    f900:	4604      	mov	r4, r0
    f902:	4615      	mov	r5, r2
	struct bt_mesh_proxy_client *client = find_client(conn);
    f904:	f7ff fc82 	bl	f20c <find_client>
	if (!client) {
    f908:	b188      	cbz	r0, f92e <bt_mesh_proxy_send+0x30>
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
    f90a:	7a83      	ldrb	r3, [r0, #10]
    f90c:	1ed8      	subs	r0, r3, #3
    f90e:	4243      	negs	r3, r0
    f910:	f1a1 0c03 	sub.w	ip, r1, #3
    f914:	4143      	adcs	r3, r0
    f916:	f1dc 0200 	rsbs	r2, ip, #0
    f91a:	eb42 020c 	adc.w	r2, r2, ip
    f91e:	4293      	cmp	r3, r2
    f920:	d108      	bne.n	f934 <bt_mesh_proxy_send+0x36>
	return proxy_segment_and_send(conn, type, msg);
    f922:	462a      	mov	r2, r5
    f924:	4620      	mov	r0, r4
}
    f926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return proxy_segment_and_send(conn, type, msg);
    f92a:	f7ff bd2d 	b.w	f388 <proxy_segment_and_send>
		return -ENOTCONN;
    f92e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    f932:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f934:	f06f 0015 	mvn.w	r0, #21
}
    f938:	bd38      	pop	{r3, r4, r5, pc}
	...

0000f93c <bt_mesh_proxy_relay>:
{
    f93c:	b570      	push	{r4, r5, r6, lr}
    f93e:	b08a      	sub	sp, #40	; 0x28
    f940:	4605      	mov	r5, r0
    f942:	460c      	mov	r4, r1
		struct net_buf_simple *msg = NET_BUF_SIMPLE(32);
    f944:	2228      	movs	r2, #40	; 0x28
    f946:	2100      	movs	r1, #0
    f948:	4668      	mov	r0, sp
    f94a:	f7f0 feb1 	bl	6b0 <memset>
    f94e:	2320      	movs	r3, #32
    f950:	f8ad 3006 	strh.w	r3, [sp, #6]
		if (!client->conn) {
    f954:	4b16      	ldr	r3, [pc, #88]	; (f9b0 <bt_mesh_proxy_relay+0x74>)
    f956:	6818      	ldr	r0, [r3, #0]
    f958:	461e      	mov	r6, r3
    f95a:	b160      	cbz	r0, f976 <bt_mesh_proxy_relay+0x3a>
	if (client->filter_type == WHITELIST) {
    f95c:	7a9a      	ldrb	r2, [r3, #10]
    f95e:	2a01      	cmp	r2, #1
    f960:	d10b      	bne.n	f97a <bt_mesh_proxy_relay+0x3e>
			if (client->filter[i] == addr) {
    f962:	889a      	ldrh	r2, [r3, #4]
    f964:	42a2      	cmp	r2, r4
    f966:	d013      	beq.n	f990 <bt_mesh_proxy_relay+0x54>
    f968:	88da      	ldrh	r2, [r3, #6]
    f96a:	42a2      	cmp	r2, r4
    f96c:	d010      	beq.n	f990 <bt_mesh_proxy_relay+0x54>
    f96e:	891b      	ldrh	r3, [r3, #8]
    f970:	42a3      	cmp	r3, r4
    f972:	d00d      	beq.n	f990 <bt_mesh_proxy_relay+0x54>
			if (client->filter[i] == addr) {
    f974:	2000      	movs	r0, #0
}
    f976:	b00a      	add	sp, #40	; 0x28
    f978:	bd70      	pop	{r4, r5, r6, pc}
	if (client->filter_type == BLACKLIST) {
    f97a:	2a02      	cmp	r2, #2
    f97c:	d1fa      	bne.n	f974 <bt_mesh_proxy_relay+0x38>
			if (client->filter[i] == addr) {
    f97e:	889a      	ldrh	r2, [r3, #4]
    f980:	42a2      	cmp	r2, r4
    f982:	d0f7      	beq.n	f974 <bt_mesh_proxy_relay+0x38>
    f984:	88da      	ldrh	r2, [r3, #6]
    f986:	42a2      	cmp	r2, r4
    f988:	d0f4      	beq.n	f974 <bt_mesh_proxy_relay+0x38>
    f98a:	891b      	ldrh	r3, [r3, #8]
    f98c:	42a3      	cmp	r3, r4
    f98e:	d0f1      	beq.n	f974 <bt_mesh_proxy_relay+0x38>
	buf->data = buf->__buf + reserve_head;
    f990:	f10d 0309 	add.w	r3, sp, #9
		net_buf_simple_add_mem(msg, buf->data, buf->len);
    f994:	88aa      	ldrh	r2, [r5, #4]
    f996:	6829      	ldr	r1, [r5, #0]
    f998:	9300      	str	r3, [sp, #0]
    f99a:	4668      	mov	r0, sp
    f99c:	f008 f8f8 	bl	17b90 <net_buf_simple_add_mem>
		bt_mesh_proxy_send(client->conn, BT_MESH_PROXY_NET_PDU, msg);
    f9a0:	466a      	mov	r2, sp
    f9a2:	2100      	movs	r1, #0
    f9a4:	6830      	ldr	r0, [r6, #0]
    f9a6:	f7ff ffaa 	bl	f8fe <bt_mesh_proxy_send>
		relayed = true;
    f9aa:	2001      	movs	r0, #1
	return relayed;
    f9ac:	e7e3      	b.n	f976 <bt_mesh_proxy_relay+0x3a>
    f9ae:	bf00      	nop
    f9b0:	20006790 	.word	0x20006790

0000f9b4 <bt_mesh_proxy_adv_start>:
	return remaining;
}
#endif /* GATT_PROXY */

s32_t bt_mesh_proxy_adv_start(void)
{
    f9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
    f9b8:	4b68      	ldr	r3, [pc, #416]	; (fb5c <bt_mesh_proxy_adv_start+0x1a8>)
    f9ba:	781b      	ldrb	r3, [r3, #0]
{
    f9bc:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
    f9be:	b92b      	cbnz	r3, f9cc <bt_mesh_proxy_adv_start+0x18>
		return K_FOREVER;
    f9c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return K_FOREVER;
}
    f9c4:	4620      	mov	r0, r4
    f9c6:	b006      	add	sp, #24
    f9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!bt_mesh_is_provisioned()) {
    f9cc:	f7f7 ff8c 	bl	78e8 <bt_mesh_is_provisioned>
    f9d0:	b9b0      	cbnz	r0, fa00 <bt_mesh_proxy_adv_start+0x4c>
		if (prov_fast_adv) {
    f9d2:	4c63      	ldr	r4, [pc, #396]	; (fb60 <bt_mesh_proxy_adv_start+0x1ac>)
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
    f9d4:	4e63      	ldr	r6, [pc, #396]	; (fb64 <bt_mesh_proxy_adv_start+0x1b0>)
		if (prov_fast_adv) {
    f9d6:	7827      	ldrb	r7, [r4, #0]
		if (bt_le_adv_start(param, prov_ad, ARRAY_SIZE(prov_ad),
    f9d8:	4863      	ldr	r0, [pc, #396]	; (fb68 <bt_mesh_proxy_adv_start+0x1b4>)
    f9da:	4b64      	ldr	r3, [pc, #400]	; (fb6c <bt_mesh_proxy_adv_start+0x1b8>)
    f9dc:	4964      	ldr	r1, [pc, #400]	; (fb70 <bt_mesh_proxy_adv_start+0x1bc>)
    f9de:	2501      	movs	r5, #1
    f9e0:	9500      	str	r5, [sp, #0]
    f9e2:	2203      	movs	r2, #3
    f9e4:	2f00      	cmp	r7, #0
    f9e6:	bf08      	it	eq
    f9e8:	4630      	moveq	r0, r6
    f9ea:	f7f5 f9bf 	bl	4d6c <bt_le_adv_start>
    f9ee:	b938      	cbnz	r0, fa00 <bt_mesh_proxy_adv_start+0x4c>
			proxy_adv_enabled = true;
    f9f0:	4b60      	ldr	r3, [pc, #384]	; (fb74 <bt_mesh_proxy_adv_start+0x1c0>)
    f9f2:	701d      	strb	r5, [r3, #0]
			if (prov_fast_adv) {
    f9f4:	7823      	ldrb	r3, [r4, #0]
    f9f6:	b11b      	cbz	r3, fa00 <bt_mesh_proxy_adv_start+0x4c>
				prov_fast_adv = false;
    f9f8:	7020      	strb	r0, [r4, #0]
				return K_SECONDS(60);
    f9fa:	f64e 2460 	movw	r4, #60000	; 0xea60
    f9fe:	e7e1      	b.n	f9c4 <bt_mesh_proxy_adv_start+0x10>
	if (bt_mesh_is_provisioned()) {
    fa00:	f7f7 ff72 	bl	78e8 <bt_mesh_is_provisioned>
    fa04:	2800      	cmp	r0, #0
    fa06:	d0db      	beq.n	f9c0 <bt_mesh_proxy_adv_start+0xc>
		return gatt_proxy_advertise(next_sub());
    fa08:	f7ff fc1e 	bl	f248 <next_sub>
	proxy_svc_data[2] = ID_TYPE_NODE;
    fa0c:	4f5a      	ldr	r7, [pc, #360]	; (fb78 <bt_mesh_proxy_adv_start+0x1c4>)
	if (conn_count == CONFIG_BT_MAX_CONN) {
    fa0e:	f8df 8180 	ldr.w	r8, [pc, #384]	; fb90 <bt_mesh_proxy_adv_start+0x1dc>
		return gatt_proxy_advertise(next_sub());
    fa12:	4605      	mov	r5, r0
	err = bt_rand(proxy_svc_data + 11, 8);
    fa14:	f107 090b 	add.w	r9, r7, #11
	if (conn_count == CONFIG_BT_MAX_CONN) {
    fa18:	f8d8 3000 	ldr.w	r3, [r8]
    fa1c:	2b01      	cmp	r3, #1
    fa1e:	d0cf      	beq.n	f9c0 <bt_mesh_proxy_adv_start+0xc>
	if (!sub) {
    fa20:	2d00      	cmp	r5, #0
    fa22:	d0cd      	beq.n	f9c0 <bt_mesh_proxy_adv_start+0xc>
	if (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING) {
    fa24:	f895 6020 	ldrb.w	r6, [r5, #32]
    fa28:	2e01      	cmp	r6, #1
    fa2a:	f040 808e 	bne.w	fb4a <bt_mesh_proxy_adv_start+0x196>
    fa2e:	f008 fe93 	bl	18758 <_impl_k_uptime_get_32>
		u32_t active = k_uptime_get_32() - sub->node_id_start;
    fa32:	6a6c      	ldr	r4, [r5, #36]	; 0x24
		if (active < NODE_ID_TIMEOUT) {
    fa34:	f64e 235f 	movw	r3, #59999	; 0xea5f
		u32_t active = k_uptime_get_32() - sub->node_id_start;
    fa38:	1b04      	subs	r4, r0, r4
		if (active < NODE_ID_TIMEOUT) {
    fa3a:	429c      	cmp	r4, r3
    fa3c:	f200 8081 	bhi.w	fb42 <bt_mesh_proxy_adv_start+0x18e>
	err = bt_rand(proxy_svc_data + 11, 8);
    fa40:	2108      	movs	r1, #8
    fa42:	4648      	mov	r0, r9
	proxy_svc_data[2] = ID_TYPE_NODE;
    fa44:	70be      	strb	r6, [r7, #2]
	err = bt_rand(proxy_svc_data + 11, 8);
    fa46:	f001 f967 	bl	10d18 <bt_rand>
			remaining = NODE_ID_TIMEOUT - active;
    fa4a:	f5c4 446a 	rsb	r4, r4, #59904	; 0xea00
    fa4e:	3460      	adds	r4, #96	; 0x60
	if (err) {
    fa50:	4601      	mov	r1, r0
    fa52:	bb58      	cbnz	r0, faac <bt_mesh_proxy_adv_start+0xf8>
	memset(tmp, 0, 6);
    fa54:	2206      	movs	r2, #6
    fa56:	a802      	add	r0, sp, #8
    fa58:	f7f0 fe2a 	bl	6b0 <memset>
	memcpy(tmp + 6, proxy_svc_data + 11, 8);
    fa5c:	2208      	movs	r2, #8
    fa5e:	4947      	ldr	r1, [pc, #284]	; (fb7c <bt_mesh_proxy_adv_start+0x1c8>)
    fa60:	f10d 000e 	add.w	r0, sp, #14
    fa64:	f7f0 fdf8 	bl	658 <memcpy>
	sys_put_be16(bt_mesh_primary_addr(), tmp + 14);
    fa68:	f7fb f8cc 	bl	ac04 <bt_mesh_primary_addr>
	dst[0] = val >> 8;
    fa6c:	0a03      	lsrs	r3, r0, #8
    fa6e:	f88d 3016 	strb.w	r3, [sp, #22]
	err = bt_encrypt_be(sub->keys[sub->kr_flag].identity, tmp, tmp);
    fa72:	7fab      	ldrb	r3, [r5, #30]
	dst[1] = val;
    fa74:	f88d 0017 	strb.w	r0, [sp, #23]
    fa78:	2059      	movs	r0, #89	; 0x59
    fa7a:	fb03 0000 	mla	r0, r3, r0, r0
    fa7e:	aa02      	add	r2, sp, #8
    fa80:	4611      	mov	r1, r2
    fa82:	4428      	add	r0, r5
    fa84:	f001 f964 	bl	10d50 <bt_encrypt_be>
	if (err) {
    fa88:	4682      	mov	sl, r0
    fa8a:	b978      	cbnz	r0, faac <bt_mesh_proxy_adv_start+0xf8>
	memcpy(proxy_svc_data + 3, tmp + 8, 8);
    fa8c:	2208      	movs	r2, #8
    fa8e:	a904      	add	r1, sp, #16
    fa90:	483b      	ldr	r0, [pc, #236]	; (fb80 <bt_mesh_proxy_adv_start+0x1cc>)
    fa92:	f7f0 fde1 	bl	658 <memcpy>
	err = bt_le_adv_start(&fast_adv_param, node_id_ad,
    fa96:	f8cd a000 	str.w	sl, [sp]
    fa9a:	4653      	mov	r3, sl
    fa9c:	2203      	movs	r2, #3
    fa9e:	4939      	ldr	r1, [pc, #228]	; (fb84 <bt_mesh_proxy_adv_start+0x1d0>)
    faa0:	4831      	ldr	r0, [pc, #196]	; (fb68 <bt_mesh_proxy_adv_start+0x1b4>)
    faa2:	f7f5 f963 	bl	4d6c <bt_le_adv_start>
	if (err) {
    faa6:	b908      	cbnz	r0, faac <bt_mesh_proxy_adv_start+0xf8>
	proxy_adv_enabled = true;
    faa8:	4b32      	ldr	r3, [pc, #200]	; (fb74 <bt_mesh_proxy_adv_start+0x1c0>)
    faaa:	701e      	strb	r6, [r3, #0]
	if (sub->node_id == BT_MESH_NODE_IDENTITY_STOPPED) {
    faac:	f895 6020 	ldrb.w	r6, [r5, #32]
    fab0:	b9d6      	cbnz	r6, fae8 <bt_mesh_proxy_adv_start+0x134>
		if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
    fab2:	f7fd f917 	bl	cce4 <bt_mesh_gatt_proxy_get>
    fab6:	2801      	cmp	r0, #1
    fab8:	4682      	mov	sl, r0
    faba:	d149      	bne.n	fb50 <bt_mesh_proxy_adv_start+0x19c>
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
    fabc:	7fa9      	ldrb	r1, [r5, #30]
	proxy_svc_data[2] = ID_TYPE_NET;
    fabe:	482e      	ldr	r0, [pc, #184]	; (fb78 <bt_mesh_proxy_adv_start+0x1c4>)
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
    fac0:	2359      	movs	r3, #89	; 0x59
    fac2:	fb03 5101 	mla	r1, r3, r1, r5
	proxy_svc_data[2] = ID_TYPE_NET;
    fac6:	7086      	strb	r6, [r0, #2]
	memcpy(proxy_svc_data + 3, sub->keys[sub->kr_flag].net_id, 8);
    fac8:	2208      	movs	r2, #8
    faca:	3151      	adds	r1, #81	; 0x51
    facc:	3003      	adds	r0, #3
    face:	f7f0 fdc3 	bl	658 <memcpy>
	err = bt_le_adv_start(&slow_adv_param, net_id_ad,
    fad2:	9600      	str	r6, [sp, #0]
    fad4:	4633      	mov	r3, r6
    fad6:	2203      	movs	r2, #3
    fad8:	492b      	ldr	r1, [pc, #172]	; (fb88 <bt_mesh_proxy_adv_start+0x1d4>)
    fada:	4822      	ldr	r0, [pc, #136]	; (fb64 <bt_mesh_proxy_adv_start+0x1b0>)
    fadc:	f7f5 f946 	bl	4d6c <bt_le_adv_start>
	if (err) {
    fae0:	b910      	cbnz	r0, fae8 <bt_mesh_proxy_adv_start+0x134>
	proxy_adv_enabled = true;
    fae2:	4b24      	ldr	r3, [pc, #144]	; (fb74 <bt_mesh_proxy_adv_start+0x1c0>)
    fae4:	f883 a000 	strb.w	sl, [r3]
	s32_t remaining = K_FOREVER;
    fae8:	2600      	movs	r6, #0
    faea:	4f28      	ldr	r7, [pc, #160]	; (fb8c <bt_mesh_proxy_adv_start+0x1d8>)
    faec:	4635      	mov	r5, r6
	if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    faee:	f64f 78ff 	movw	r8, #65535	; 0xffff
    faf2:	19f3      	adds	r3, r6, r7
    faf4:	f8b3 21d0 	ldrh.w	r2, [r3, #464]	; 0x1d0
    faf8:	4542      	cmp	r2, r8
    fafa:	d008      	beq.n	fb0e <bt_mesh_proxy_adv_start+0x15a>
	return (sub->node_id == BT_MESH_NODE_IDENTITY_RUNNING ||
    fafc:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
    fb00:	2b01      	cmp	r3, #1
    fb02:	d003      	beq.n	fb0c <bt_mesh_proxy_adv_start+0x158>
		bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    fb04:	f7fd f8ee 	bl	cce4 <bt_mesh_gatt_proxy_get>
		if (advertise_subnet(sub)) {
    fb08:	2801      	cmp	r0, #1
    fb0a:	d100      	bne.n	fb0e <bt_mesh_proxy_adv_start+0x15a>
			count++;
    fb0c:	3501      	adds	r5, #1
    fb0e:	36e4      	adds	r6, #228	; 0xe4
	for (i = 0; i < ARRAY_SIZE(bt_mesh.sub); i++) {
    fb10:	f5b6 7fe4 	cmp.w	r6, #456	; 0x1c8
    fb14:	d1ed      	bne.n	faf2 <bt_mesh_proxy_adv_start+0x13e>
	if (subnet_count > 1) {
    fb16:	2d01      	cmp	r5, #1
    fb18:	f77f af54 	ble.w	f9c4 <bt_mesh_proxy_adv_start+0x10>
		max_timeout = NODE_ID_TIMEOUT / max(subnet_count, 6);
    fb1c:	2d06      	cmp	r5, #6
    fb1e:	bfb8      	it	lt
    fb20:	2506      	movlt	r5, #6
    fb22:	f64e 2360 	movw	r3, #60000	; 0xea60
    fb26:	fb93 f3f5 	sdiv	r3, r3, r5
		max_timeout = max(max_timeout, K_SECONDS(1));
    fb2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    fb2e:	bfb8      	it	lt
    fb30:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
		if (remaining > max_timeout || remaining < 0) {
    fb34:	42a3      	cmp	r3, r4
    fb36:	db0f      	blt.n	fb58 <bt_mesh_proxy_adv_start+0x1a4>
    fb38:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    fb3c:	bf08      	it	eq
    fb3e:	461c      	moveq	r4, r3
    fb40:	e740      	b.n	f9c4 <bt_mesh_proxy_adv_start+0x10>
	sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
    fb42:	2300      	movs	r3, #0
    fb44:	f885 3020 	strb.w	r3, [r5, #32]
	sub->node_id_start = 0;
    fb48:	626b      	str	r3, [r5, #36]	; 0x24
	s32_t remaining = K_FOREVER;
    fb4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    fb4e:	e7ad      	b.n	faac <bt_mesh_proxy_adv_start+0xf8>
			return gatt_proxy_advertise(next_sub());
    fb50:	f7ff fb7a 	bl	f248 <next_sub>
    fb54:	4605      	mov	r5, r0
    fb56:	e75f      	b.n	fa18 <bt_mesh_proxy_adv_start+0x64>
		if (remaining > max_timeout || remaining < 0) {
    fb58:	461c      	mov	r4, r3
    fb5a:	e733      	b.n	f9c4 <bt_mesh_proxy_adv_start+0x10>
    fb5c:	20000d58 	.word	0x20000d58
    fb60:	20000d62 	.word	0x20000d62
    fb64:	0001a38c 	.word	0x0001a38c
    fb68:	0001a330 	.word	0x0001a330
    fb6c:	0001a384 	.word	0x0001a384
    fb70:	0001a36c 	.word	0x0001a36c
    fb74:	20000d63 	.word	0x20000d63
    fb78:	20006924 	.word	0x20006924
    fb7c:	2000692f 	.word	0x2000692f
    fb80:	20006927 	.word	0x20006927
    fb84:	0001a354 	.word	0x0001a354
    fb88:	0001a33c 	.word	0x0001a33c
    fb8c:	20006168 	.word	0x20006168
    fb90:	20000d54 	.word	0x20000d54

0000fb94 <bt_mesh_proxy_adv_stop>:

void bt_mesh_proxy_adv_stop(void)
{
    fb94:	b510      	push	{r4, lr}
	int err;

	BT_DBG("adv_enabled %u", proxy_adv_enabled);

	if (!proxy_adv_enabled) {
    fb96:	4c04      	ldr	r4, [pc, #16]	; (fba8 <bt_mesh_proxy_adv_stop+0x14>)
    fb98:	7823      	ldrb	r3, [r4, #0]
    fb9a:	b11b      	cbz	r3, fba4 <bt_mesh_proxy_adv_stop+0x10>
		return;
	}

	err = bt_le_adv_stop();
    fb9c:	f7f5 f982 	bl	4ea4 <bt_le_adv_stop>
	if (err) {
    fba0:	b900      	cbnz	r0, fba4 <bt_mesh_proxy_adv_stop+0x10>
		BT_ERR("Failed to stop advertising (err %d)", err);
	} else {
		proxy_adv_enabled = false;
    fba2:	7020      	strb	r0, [r4, #0]
    fba4:	bd10      	pop	{r4, pc}
    fba6:	bf00      	nop
    fba8:	20000d63 	.word	0x20000d63

0000fbac <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
    fbac:	b508      	push	{r3, lr}
	bt_conn_cb_register(&conn_callbacks);
    fbae:	4806      	ldr	r0, [pc, #24]	; (fbc8 <bt_mesh_proxy_init+0x1c>)
    fbb0:	f7f5 fb84 	bl	52bc <bt_conn_cb_register>

#if defined(CONFIG_BT_MESH_PB_GATT)
	memcpy(prov_svc_data + 2, bt_mesh_prov_get_uuid(), 16);
    fbb4:	f7ff fa9e 	bl	f0f4 <bt_mesh_prov_get_uuid>
    fbb8:	2210      	movs	r2, #16
    fbba:	4601      	mov	r1, r0
    fbbc:	4803      	ldr	r0, [pc, #12]	; (fbcc <bt_mesh_proxy_init+0x20>)
    fbbe:	f7f0 fd4b 	bl	658 <memcpy>
#endif

	return 0;
}
    fbc2:	2000      	movs	r0, #0
    fbc4:	bd08      	pop	{r3, pc}
    fbc6:	bf00      	nop
    fbc8:	200067f4 	.word	0x200067f4
    fbcc:	2000688e 	.word	0x2000688e

0000fbd0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    fbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    fbd2:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fbd4:	1dc3      	adds	r3, r0, #7
{
    fbd6:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fbd8:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fbdc:	1e50      	subs	r0, r2, #1
{
    fbde:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fbe0:	b280      	uxth	r0, r0
{
    fbe2:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fbe4:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fbe6:	2100      	movs	r1, #0
    fbe8:	2204      	movs	r2, #4
    fbea:	fb06 5000 	mla	r0, r6, r0, r5
    fbee:	f7f0 fd5f 	bl	6b0 <memset>
    fbf2:	3c02      	subs	r4, #2
    fbf4:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    fbf6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    fbfa:	42bc      	cmp	r4, r7
    fbfc:	d101      	bne.n	fc02 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    fbfe:	b003      	add	sp, #12
    fc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    fc02:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    fc06:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    fc08:	2204      	movs	r2, #4
    fc0a:	1b80      	subs	r0, r0, r6
    fc0c:	eb0d 0102 	add.w	r1, sp, r2
    fc10:	4428      	add	r0, r5
    fc12:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    fc14:	9301      	str	r3, [sp, #4]
    fc16:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    fc18:	f7f0 fd1e 	bl	658 <memcpy>
    fc1c:	e7ed      	b.n	fbfa <mem_init+0x2a>

0000fc1e <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    fc1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    fc20:	6805      	ldr	r5, [r0, #0]
{
    fc22:	4606      	mov	r6, r0
	if (*mem_head) {
    fc24:	b195      	cbz	r5, fc4c <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    fc26:	1deb      	adds	r3, r5, #7
    fc28:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    fc2c:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    fc2e:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    fc30:	4629      	mov	r1, r5
    fc32:	eb0d 0002 	add.w	r0, sp, r2
    fc36:	f7f0 fd0f 	bl	658 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    fc3a:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    fc3c:	3c01      	subs	r4, #1
    fc3e:	b2a4      	uxth	r4, r4
		if (head) {
    fc40:	b11b      	cbz	r3, fc4a <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    fc42:	1dda      	adds	r2, r3, #7
    fc44:	f022 0203 	bic.w	r2, r2, #3
    fc48:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    fc4a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    fc4c:	4628      	mov	r0, r5
    fc4e:	b002      	add	sp, #8
    fc50:	bd70      	pop	{r4, r5, r6, pc}

0000fc52 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    fc52:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    fc54:	680c      	ldr	r4, [r1, #0]
{
    fc56:	4606      	mov	r6, r0
    fc58:	460d      	mov	r5, r1
	if (*mem_head) {
    fc5a:	b11c      	cbz	r4, fc64 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    fc5c:	1de3      	adds	r3, r4, #7
    fc5e:	f023 0303 	bic.w	r3, r3, #3
    fc62:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    fc64:	2204      	movs	r2, #4
    fc66:	4629      	mov	r1, r5
    fc68:	4630      	mov	r0, r6
    fc6a:	f7f0 fcf5 	bl	658 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    fc6e:	1df2      	adds	r2, r6, #7
    fc70:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    fc74:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    fc76:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    fc78:	602e      	str	r6, [r5, #0]
    fc7a:	bd70      	pop	{r4, r5, r6, pc}

0000fc7c <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    fc7c:	fb02 0001 	mla	r0, r2, r1, r0
    fc80:	4770      	bx	lr

0000fc82 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    fc82:	1a40      	subs	r0, r0, r1
    fc84:	b280      	uxth	r0, r0
}
    fc86:	fbb0 f0f2 	udiv	r0, r0, r2
    fc8a:	4770      	bx	lr

0000fc8c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    fc8c:	b510      	push	{r4, lr}
	src += len;
    fc8e:	4411      	add	r1, r2
    fc90:	3801      	subs	r0, #1
	while (len--) {
    fc92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc96:	3a01      	subs	r2, #1
    fc98:	b292      	uxth	r2, r2
    fc9a:	429a      	cmp	r2, r3
    fc9c:	d100      	bne.n	fca0 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    fc9e:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    fca0:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    fca4:	f800 4f01 	strb.w	r4, [r0, #1]!
    fca8:	e7f5      	b.n	fc96 <mem_rcopy+0xa>

0000fcaa <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    fcaa:	6010      	str	r0, [r2, #0]
    fcac:	6008      	str	r0, [r1, #0]

	return link;
}
    fcae:	4770      	bx	lr

0000fcb0 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    fcb0:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    fcb2:	6814      	ldr	r4, [r2, #0]
    fcb4:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    fcb6:	6814      	ldr	r4, [r2, #0]
    fcb8:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    fcba:	6010      	str	r0, [r2, #0]

	return link;
}
    fcbc:	bd10      	pop	{r4, pc}

0000fcbe <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    fcbe:	4288      	cmp	r0, r1
    fcc0:	d003      	beq.n	fcca <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    fcc2:	b11a      	cbz	r2, fccc <memq_peek+0xe>
		*mem = head->mem;
    fcc4:	6843      	ldr	r3, [r0, #4]
    fcc6:	6013      	str	r3, [r2, #0]
    fcc8:	4770      	bx	lr
		return NULL;
    fcca:	2000      	movs	r0, #0
	}

	return head;
}
    fccc:	4770      	bx	lr

0000fcce <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    fcce:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    fcd0:	4283      	cmp	r3, r0
    fcd2:	d009      	beq.n	fce8 <memq_dequeue+0x1a>
	if (mem) {
    fcd4:	b122      	cbz	r2, fce0 <memq_dequeue+0x12>
		*mem = head->mem;
    fcd6:	6858      	ldr	r0, [r3, #4]
    fcd8:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    fcda:	681a      	ldr	r2, [r3, #0]
    fcdc:	600a      	str	r2, [r1, #0]

	return link;
    fcde:	e001      	b.n	fce4 <memq_dequeue+0x16>
	if (!link) {
    fce0:	2b00      	cmp	r3, #0
    fce2:	d1fa      	bne.n	fcda <memq_dequeue+0xc>
}
    fce4:	4618      	mov	r0, r3
    fce6:	4770      	bx	lr
		return NULL;
    fce8:	2300      	movs	r3, #0
    fcea:	e7fb      	b.n	fce4 <memq_dequeue+0x16>

0000fcec <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    fcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    fcf0:	4f11      	ldr	r7, [pc, #68]	; (fd38 <mayfly_init+0x4c>)
    fcf2:	f8df 9048 	ldr.w	r9, [pc, #72]	; fd3c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    fcf6:	2604      	movs	r6, #4
	while (callee_id--) {
    fcf8:	3e01      	subs	r6, #1
    fcfa:	b2f6      	uxtb	r6, r6
    fcfc:	2eff      	cmp	r6, #255	; 0xff
    fcfe:	d019      	beq.n	fd34 <mayfly_init+0x48>
    fd00:	b233      	sxth	r3, r6
    fd02:	ea4f 0883 	mov.w	r8, r3, lsl #2
    fd06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fd0a:	011d      	lsls	r5, r3, #4
    fd0c:	2404      	movs	r4, #4
    fd0e:	f04f 0a0c 	mov.w	sl, #12
    fd12:	e00a      	b.n	fd2a <mayfly_init+0x3e>
    fd14:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    fd18:	1d0a      	adds	r2, r1, #4
    fd1a:	eb04 0008 	add.w	r0, r4, r8
    fd1e:	443a      	add	r2, r7
    fd20:	4439      	add	r1, r7
    fd22:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    fd26:	f7ff ffc0 	bl	fcaa <memq_init>
		while (caller_id--) {
    fd2a:	3c01      	subs	r4, #1
    fd2c:	b2e4      	uxtb	r4, r4
    fd2e:	2cff      	cmp	r4, #255	; 0xff
    fd30:	d1f0      	bne.n	fd14 <mayfly_init+0x28>
    fd32:	e7e1      	b.n	fcf8 <mayfly_init+0xc>
    fd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd38:	20000de8 	.word	0x20000de8
    fd3c:	20000d68 	.word	0x20000d68

0000fd40 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    fd40:	b4f0      	push	{r4, r5, r6, r7}
    fd42:	4b12      	ldr	r3, [pc, #72]	; (fd8c <mayfly_enable+0x4c>)
    fd44:	4605      	mov	r5, r0
    fd46:	460f      	mov	r7, r1
    fd48:	260c      	movs	r6, #12
    fd4a:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    fd4c:	b172      	cbz	r2, fd6c <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    fd4e:	4361      	muls	r1, r4
    fd50:	fb06 1400 	mla	r4, r6, r0, r1
    fd54:	4423      	add	r3, r4
    fd56:	7a59      	ldrb	r1, [r3, #9]
    fd58:	7a18      	ldrb	r0, [r3, #8]
    fd5a:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    fd5c:	bf04      	itt	eq
    fd5e:	3101      	addeq	r1, #1
    fd60:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    fd62:	4628      	mov	r0, r5
    fd64:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    fd66:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    fd68:	f007 bdd8 	b.w	1791c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    fd6c:	434c      	muls	r4, r1
    fd6e:	fb06 4400 	mla	r4, r6, r0, r4
    fd72:	4423      	add	r3, r4
    fd74:	7a9c      	ldrb	r4, [r3, #10]
    fd76:	7ada      	ldrb	r2, [r3, #11]
    fd78:	42a2      	cmp	r2, r4
    fd7a:	d104      	bne.n	fd86 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    fd7c:	3201      	adds	r2, #1
    fd7e:	729a      	strb	r2, [r3, #10]
}
    fd80:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    fd82:	f007 bdf9 	b.w	17978 <mayfly_pend>
}
    fd86:	bcf0      	pop	{r4, r5, r6, r7}
    fd88:	4770      	bx	lr
    fd8a:	bf00      	nop
    fd8c:	20000de8 	.word	0x20000de8

0000fd90 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd92:	4605      	mov	r5, r0
    fd94:	460e      	mov	r6, r1
    fd96:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    fd98:	b18a      	cbz	r2, fdbe <mayfly_enqueue+0x2e>
    fd9a:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    fd9c:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    fd9e:	7820      	ldrb	r0, [r4, #0]
    fda0:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    fda2:	f010 0703 	ands.w	r7, r0, #3
    fda6:	d029      	beq.n	fdfc <mayfly_enqueue+0x6c>
		if (chain) {
    fda8:	b303      	cbz	r3, fdec <mayfly_enqueue+0x5c>
			if (state != 1) {
    fdaa:	2f01      	cmp	r7, #1
    fdac:	d039      	beq.n	fe22 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    fdae:	3201      	adds	r2, #1
    fdb0:	b2d2      	uxtb	r2, r2
    fdb2:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    fdb4:	4631      	mov	r1, r6
    fdb6:	4628      	mov	r0, r5
    fdb8:	f007 fdde 	bl	17978 <mayfly_pend>
    fdbc:	e01c      	b.n	fdf8 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fdbe:	f007 fdc9 	bl	17954 <mayfly_prio_is_equal>
    fdc2:	2800      	cmp	r0, #0
    fdc4:	d0e9      	beq.n	fd9a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    fdc6:	4631      	mov	r1, r6
    fdc8:	4628      	mov	r0, r5
    fdca:	f007 fdb5 	bl	17938 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fdce:	2800      	cmp	r0, #0
    fdd0:	d0e3      	beq.n	fd9a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    fdd2:	2330      	movs	r3, #48	; 0x30
    fdd4:	220c      	movs	r2, #12
    fdd6:	4373      	muls	r3, r6
    fdd8:	fb02 3305 	mla	r3, r2, r5, r3
    fddc:	4a12      	ldr	r2, [pc, #72]	; (fe28 <mayfly_enqueue+0x98>)
    fdde:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    fde0:	7a93      	ldrb	r3, [r2, #10]
    fde2:	7ad2      	ldrb	r2, [r2, #11]
    fde4:	1a9b      	subs	r3, r3, r2
    fde6:	bf18      	it	ne
    fde8:	2301      	movne	r3, #1
    fdea:	e7d7      	b.n	fd9c <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    fdec:	3202      	adds	r2, #2
    fdee:	b2d2      	uxtb	r2, r2
    fdf0:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    fdf2:	68e3      	ldr	r3, [r4, #12]
    fdf4:	68a0      	ldr	r0, [r4, #8]
    fdf6:	4798      	blx	r3
		return 0;
    fdf8:	2000      	movs	r0, #0
    fdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	d0f8      	beq.n	fdf2 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    fe00:	3201      	adds	r2, #1
    fe02:	b2d2      	uxtb	r2, r2
    fe04:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fe06:	2304      	movs	r3, #4
    fe08:	2230      	movs	r2, #48	; 0x30
    fe0a:	fb12 3206 	smlabb	r2, r2, r6, r3
    fe0e:	230c      	movs	r3, #12
    fe10:	fb13 2305 	smlabb	r3, r3, r5, r2
    fe14:	4a04      	ldr	r2, [pc, #16]	; (fe28 <mayfly_enqueue+0x98>)
    fe16:	6860      	ldr	r0, [r4, #4]
    fe18:	441a      	add	r2, r3
    fe1a:	4621      	mov	r1, r4
    fe1c:	f7ff ff48 	bl	fcb0 <memq_enqueue>
    fe20:	e7c8      	b.n	fdb4 <mayfly_enqueue+0x24>
			return 1;
    fe22:	4638      	mov	r0, r7

	return 0;
}
    fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe26:	bf00      	nop
    fe28:	20000de8 	.word	0x20000de8

0000fe2c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    fe2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe30:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    fe34:	b089      	sub	sp, #36	; 0x24
    fe36:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    fe38:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    fe3c:	4e43      	ldr	r6, [pc, #268]	; (ff4c <mayfly_run+0x120>)
    fe3e:	9304      	str	r3, [sp, #16]
{
    fe40:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    fe42:	2404      	movs	r4, #4
	u8_t disable = 0;
    fe44:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    fe48:	3c01      	subs	r4, #1
    fe4a:	b2e4      	uxtb	r4, r4
    fe4c:	2cff      	cmp	r4, #255	; 0xff
    fe4e:	d10b      	bne.n	fe68 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    fe50:	9b01      	ldr	r3, [sp, #4]
    fe52:	2b00      	cmp	r3, #0
    fe54:	d076      	beq.n	ff44 <mayfly_run+0x118>
    fe56:	f1b8 0f00 	cmp.w	r8, #0
    fe5a:	d173      	bne.n	ff44 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    fe5c:	4642      	mov	r2, r8
    fe5e:	4629      	mov	r1, r5
    fe60:	4628      	mov	r0, r5
    fe62:	f007 fd5b 	bl	1791c <mayfly_enable_cb>
    fe66:	e06d      	b.n	ff44 <mayfly_run+0x118>
		struct mayfly *m = 0;
    fe68:	f10d 0b20 	add.w	fp, sp, #32
    fe6c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    fe6e:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    fe70:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    fe74:	f04f 0930 	mov.w	r9, #48	; 0x30
    fe78:	fb07 f304 	mul.w	r3, r7, r4
    fe7c:	fb09 3005 	mla	r0, r9, r5, r3
    fe80:	1831      	adds	r1, r6, r0
    fe82:	465a      	mov	r2, fp
    fe84:	6849      	ldr	r1, [r1, #4]
    fe86:	5830      	ldr	r0, [r6, r0]
    fe88:	9302      	str	r3, [sp, #8]
    fe8a:	f7ff ff18 	bl	fcbe <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    fe8e:	9b04      	ldr	r3, [sp, #16]
    fe90:	fb17 3704 	smlabb	r7, r7, r4, r3
    fe94:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    fe96:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    fe98:	9303      	str	r3, [sp, #12]
		while (link) {
    fe9a:	f1ba 0f00 	cmp.w	sl, #0
    fe9e:	d119      	bne.n	fed4 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    fea0:	2230      	movs	r2, #48	; 0x30
    fea2:	230c      	movs	r3, #12
    fea4:	436a      	muls	r2, r5
    fea6:	fb03 2204 	mla	r2, r3, r4, r2
    feaa:	4432      	add	r2, r6
    feac:	7a91      	ldrb	r1, [r2, #10]
    feae:	7ad0      	ldrb	r0, [r2, #11]
    feb0:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    feb2:	bf1e      	ittt	ne
    feb4:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    feb6:	2201      	movne	r2, #1
    feb8:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    feba:	2230      	movs	r2, #48	; 0x30
    febc:	436a      	muls	r2, r5
    febe:	fb03 2304 	mla	r3, r3, r4, r2
    fec2:	4433      	add	r3, r6
    fec4:	7a1a      	ldrb	r2, [r3, #8]
    fec6:	7a59      	ldrb	r1, [r3, #9]
    fec8:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    feca:	bf1c      	itt	ne
    fecc:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    fece:	f04f 0801 	movne.w	r8, #1
    fed2:	e7b9      	b.n	fe48 <mayfly_run+0x1c>
			req = m->_req;
    fed4:	9b07      	ldr	r3, [sp, #28]
    fed6:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    fed8:	785a      	ldrb	r2, [r3, #1]
    feda:	1abf      	subs	r7, r7, r2
    fedc:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    fee0:	2f01      	cmp	r7, #1
    fee2:	d104      	bne.n	feee <mayfly_run+0xc2>
				m->_ack--;
    fee4:	3a01      	subs	r2, #1
    fee6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    fee8:	6898      	ldr	r0, [r3, #8]
    feea:	68da      	ldr	r2, [r3, #12]
    feec:	4790      	blx	r2
			req = m->_req;
    feee:	9a07      	ldr	r2, [sp, #28]
    fef0:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    fef2:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    fef4:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    fef6:	1a9a      	subs	r2, r3, r2
    fef8:	f002 0203 	and.w	r2, r2, #3
    fefc:	2a01      	cmp	r2, #1
    fefe:	9305      	str	r3, [sp, #20]
    ff00:	d00d      	beq.n	ff1e <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    ff02:	9b02      	ldr	r3, [sp, #8]
    ff04:	9903      	ldr	r1, [sp, #12]
    ff06:	fb09 3005 	mla	r0, r9, r5, r3
    ff0a:	4430      	add	r0, r6
    ff0c:	2200      	movs	r2, #0
    ff0e:	6840      	ldr	r0, [r0, #4]
    ff10:	f7ff fedd 	bl	fcce <memq_dequeue>
				m->_link = link;
    ff14:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    ff16:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    ff18:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    ff1c:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    ff1e:	9b02      	ldr	r3, [sp, #8]
    ff20:	fb09 3305 	mla	r3, r9, r5, r3
    ff24:	18f1      	adds	r1, r6, r3
    ff26:	465a      	mov	r2, fp
    ff28:	6849      	ldr	r1, [r1, #4]
    ff2a:	58f0      	ldr	r0, [r6, r3]
    ff2c:	f7ff fec7 	bl	fcbe <memq_peek>
			if (state == 1) {
    ff30:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    ff32:	4682      	mov	sl, r0
			if (state == 1) {
    ff34:	d1b1      	bne.n	fe9a <mayfly_run+0x6e>
				if (caller_id || link) {
    ff36:	b90c      	cbnz	r4, ff3c <mayfly_run+0x110>
    ff38:	2800      	cmp	r0, #0
    ff3a:	d0b1      	beq.n	fea0 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    ff3c:	4629      	mov	r1, r5
    ff3e:	4628      	mov	r0, r5
    ff40:	f007 fd1a 	bl	17978 <mayfly_pend>
	}
}
    ff44:	b009      	add	sp, #36	; 0x24
    ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff4a:	bf00      	nop
    ff4c:	20000de8 	.word	0x20000de8

0000ff50 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    ff50:	b510      	push	{r4, lr}
    ff52:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    ff54:	2000      	movs	r0, #0

	while (octets_len--) {
    ff56:	3901      	subs	r1, #1
    ff58:	b2c9      	uxtb	r1, r1
    ff5a:	29ff      	cmp	r1, #255	; 0xff
    ff5c:	d100      	bne.n	ff60 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    ff5e:	bd10      	pop	{r4, pc}
		bite = *octets;
    ff60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    ff64:	2b00      	cmp	r3, #0
    ff66:	d0f6      	beq.n	ff56 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    ff68:	1e5c      	subs	r4, r3, #1
			one_count++;
    ff6a:	3001      	adds	r0, #1
			bite &= (bite - 1);
    ff6c:	4023      	ands	r3, r4
			one_count++;
    ff6e:	b2c0      	uxtb	r0, r0
    ff70:	e7f8      	b.n	ff64 <util_ones_count_get+0x14>

0000ff72 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    ff72:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    ff74:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->node[0];
    ff76:	6805      	ldr	r5, [r0, #0]
	current = previous;
    ff78:	461a      	mov	r2, r3
	total = 0;
    ff7a:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    ff7c:	2aff      	cmp	r2, #255	; 0xff
    ff7e:	d101      	bne.n	ff84 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    ff80:	2000      	movs	r0, #0
    ff82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    ff84:	eb02 07c2 	add.w	r7, r2, r2, lsl #3
		if (current == id) {
    ff88:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    ff8a:	eb05 0687 	add.w	r6, r5, r7, lsl #2
    ff8e:	f815 7027 	ldrb.w	r7, [r5, r7, lsl #2]
		if (current == id) {
    ff92:	d004      	beq.n	ff9e <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    ff94:	68b3      	ldr	r3, [r6, #8]
    ff96:	441c      	add	r4, r3
		current = ticker_current->next;
    ff98:	4613      	mov	r3, r2
    ff9a:	463a      	mov	r2, r7
    ff9c:	e7ee      	b.n	ff7c <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    ff9e:	4293      	cmp	r3, r2
    ffa0:	d100      	bne.n	ffa4 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    ffa2:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    ffa4:	b21b      	sxth	r3, r3
    ffa6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ffaa:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    ffac:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    ffae:	f805 2023 	strb.w	r2, [r5, r3, lsl #2]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    ffb2:	7833      	ldrb	r3, [r6, #0]
    ffb4:	2bff      	cmp	r3, #255	; 0xff
    ffb6:	d006      	beq.n	ffc6 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    ffb8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    ffbc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ffc0:	689a      	ldr	r2, [r3, #8]
    ffc2:	4402      	add	r2, r0
    ffc4:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    ffc6:	4420      	add	r0, r4
    ffc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ffca <ticks_to_expire_prep>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    ffca:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
    ffcc:	1a55      	subs	r5, r2, r1
    ffce:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    ffd2:	6884      	ldr	r4, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    ffd4:	8a83      	ldrh	r3, [r0, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
    ffd6:	d109      	bne.n	ffec <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ffd8:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    ffdc:	4422      	add	r2, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    ffde:	429a      	cmp	r2, r3
    ffe0:	d90f      	bls.n	10002 <__kernel_ram_size+0x2>
		ticks_to_expire -= ticks_to_expire_minus;
    ffe2:	1ad2      	subs	r2, r2, r3
		ticks_to_expire_minus = 0;
    ffe4:	2300      	movs	r3, #0
	ticker->ticks_to_expire = ticks_to_expire;
    ffe6:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    ffe8:	8283      	strh	r3, [r0, #20]
    ffea:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ffec:	1a8a      	subs	r2, r1, r2
    ffee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    fff2:	4294      	cmp	r4, r2
    fff4:	d901      	bls.n	fffa <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    fff6:	1aa2      	subs	r2, r4, r2
    fff8:	e7f1      	b.n	ffde <ticks_to_expire_prep+0x14>
    fffa:	4413      	add	r3, r2
			ticks_to_expire_minus +=
    fffc:	1b1b      	subs	r3, r3, r4
    fffe:	b29b      	uxth	r3, r3
			ticks_to_expire = 0;
   10000:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   10002:	1a9b      	subs	r3, r3, r2
   10004:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
   10006:	2200      	movs	r2, #0
   10008:	e7ed      	b.n	ffe6 <ticks_to_expire_prep+0x1c>

0001000a <ticker_job_op_cb>:
{
   1000a:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1000c:	2200      	movs	r2, #0
   1000e:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   10010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	user_op->status = status;
   10012:	6219      	str	r1, [r3, #32]
{
   10014:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   10016:	b10a      	cbz	r2, 1001c <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10018:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1001a:	4710      	bx	r2
   1001c:	4770      	bx	lr

0001001e <ticker_instance1_cmp_set>:
	cntr_cmp_set(1, value);
   1001e:	4601      	mov	r1, r0
   10020:	2001      	movs	r0, #1
   10022:	f006 bf27 	b.w	16e74 <cntr_cmp_set>

00010026 <ticker_instance0_cmp_set>:
	cntr_cmp_set(0, value);
   10026:	4601      	mov	r1, r0
   10028:	2000      	movs	r0, #0
   1002a:	f006 bf23 	b.w	16e74 <cntr_cmp_set>
	...

00010030 <ticker_instance1_sched>:
	switch (caller_id) {
   10030:	2803      	cmp	r0, #3
   10032:	d813      	bhi.n	1005c <ticker_instance1_sched+0x2c>
   10034:	e8df f000 	tbb	[pc, r0]
   10038:	1d0e0902 	.word	0x1d0e0902
		switch (callee_id) {
   1003c:	2901      	cmp	r1, #1
   1003e:	d10d      	bne.n	1005c <ticker_instance1_sched+0x2c>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10040:	4b0e      	ldr	r3, [pc, #56]	; (1007c <ticker_instance1_sched+0x4c>)
   10042:	2102      	movs	r1, #2
   10044:	2000      	movs	r0, #0
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10046:	f7ff bea3 	b.w	fd90 <mayfly_enqueue>
		switch (callee_id) {
   1004a:	2902      	cmp	r1, #2
   1004c:	d106      	bne.n	1005c <ticker_instance1_sched+0x2c>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1004e:	4b0c      	ldr	r3, [pc, #48]	; (10080 <ticker_instance1_sched+0x50>)
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10050:	4608      	mov	r0, r1
   10052:	e7f8      	b.n	10046 <ticker_instance1_sched+0x16>
		switch (callee_id) {
   10054:	2901      	cmp	r1, #1
   10056:	d007      	beq.n	10068 <ticker_instance1_sched+0x38>
   10058:	2902      	cmp	r1, #2
   1005a:	d008      	beq.n	1006e <ticker_instance1_sched+0x3e>
		LL_ASSERT(0);
   1005c:	4040      	eors	r0, r0
   1005e:	f380 8811 	msr	BASEPRI, r0
   10062:	f04f 0004 	mov.w	r0, #4
   10066:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10068:	4b06      	ldr	r3, [pc, #24]	; (10084 <ticker_instance1_sched+0x54>)
   1006a:	2102      	movs	r1, #2
   1006c:	e7f0      	b.n	10050 <ticker_instance1_sched+0x20>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1006e:	4b06      	ldr	r3, [pc, #24]	; (10088 <ticker_instance1_sched+0x58>)
   10070:	e7ee      	b.n	10050 <ticker_instance1_sched+0x20>
		switch (callee_id) {
   10072:	2902      	cmp	r1, #2
   10074:	d1f2      	bne.n	1005c <ticker_instance1_sched+0x2c>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10076:	4b05      	ldr	r3, [pc, #20]	; (1008c <ticker_instance1_sched+0x5c>)
   10078:	2003      	movs	r0, #3
   1007a:	e7e4      	b.n	10046 <ticker_instance1_sched+0x16>
   1007c:	20006988 	.word	0x20006988
   10080:	20006998 	.word	0x20006998
   10084:	200069a8 	.word	0x200069a8
   10088:	200069b8 	.word	0x200069b8
   1008c:	200069c8 	.word	0x200069c8

00010090 <ticker_instance0_sched>:
{
   10090:	b410      	push	{r4}
   10092:	460c      	mov	r4, r1
	switch (caller_id) {
   10094:	2803      	cmp	r0, #3
   10096:	d814      	bhi.n	100c2 <ticker_instance0_sched+0x32>
   10098:	e8df f000 	tbb	[pc, r0]
   1009c:	210f0a02 	.word	0x210f0a02
		switch (callee_id) {
   100a0:	2901      	cmp	r1, #1
   100a2:	d10e      	bne.n	100c2 <ticker_instance0_sched+0x32>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   100a4:	4b11      	ldr	r3, [pc, #68]	; (100ec <ticker_instance0_sched+0x5c>)
   100a6:	2100      	movs	r1, #0
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   100a8:	2000      	movs	r0, #0
}
   100aa:	bc10      	pop	{r4}
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   100ac:	f7ff be70 	b.w	fd90 <mayfly_enqueue>
		switch (callee_id) {
   100b0:	2902      	cmp	r1, #2
   100b2:	d106      	bne.n	100c2 <ticker_instance0_sched+0x32>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   100b4:	4b0e      	ldr	r3, [pc, #56]	; (100f0 <ticker_instance0_sched+0x60>)
   100b6:	2101      	movs	r1, #1
   100b8:	e7f6      	b.n	100a8 <ticker_instance0_sched+0x18>
		switch (callee_id) {
   100ba:	2901      	cmp	r1, #1
   100bc:	d007      	beq.n	100ce <ticker_instance0_sched+0x3e>
   100be:	2902      	cmp	r1, #2
   100c0:	d009      	beq.n	100d6 <ticker_instance0_sched+0x46>
		LL_ASSERT(0);
   100c2:	4040      	eors	r0, r0
   100c4:	f380 8811 	msr	BASEPRI, r0
   100c8:	f04f 0004 	mov.w	r0, #4
   100cc:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   100ce:	4b09      	ldr	r3, [pc, #36]	; (100f4 <ticker_instance0_sched+0x64>)
   100d0:	2100      	movs	r1, #0
   100d2:	4620      	mov	r0, r4
   100d4:	e7e9      	b.n	100aa <ticker_instance0_sched+0x1a>
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   100d6:	2101      	movs	r1, #1
   100d8:	4b07      	ldr	r3, [pc, #28]	; (100f8 <ticker_instance0_sched+0x68>)
   100da:	4608      	mov	r0, r1
   100dc:	e7e5      	b.n	100aa <ticker_instance0_sched+0x1a>
		switch (callee_id) {
   100de:	2902      	cmp	r1, #2
   100e0:	d1ef      	bne.n	100c2 <ticker_instance0_sched+0x32>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   100e2:	4b06      	ldr	r3, [pc, #24]	; (100fc <ticker_instance0_sched+0x6c>)
   100e4:	2101      	movs	r1, #1
   100e6:	2003      	movs	r0, #3
   100e8:	e7df      	b.n	100aa <ticker_instance0_sched+0x1a>
   100ea:	bf00      	nop
   100ec:	20006938 	.word	0x20006938
   100f0:	20006948 	.word	0x20006948
   100f4:	20006958 	.word	0x20006958
   100f8:	20006968 	.word	0x20006968
   100fc:	20006978 	.word	0x20006978

00010100 <ticker_instance0_caller_id_get.part.1>:
		LL_ASSERT(0);
   10100:	4040      	eors	r0, r0
   10102:	f380 8811 	msr	BASEPRI, r0
   10106:	f04f 0004 	mov.w	r0, #4
   1010a:	df02      	svc	2

0001010c <ticker_instance1_caller_id_get>:
{
   1010c:	b508      	push	{r3, lr}
	switch (user_id) {
   1010e:	1e83      	subs	r3, r0, #2
   10110:	2b01      	cmp	r3, #1
   10112:	d901      	bls.n	10118 <ticker_instance1_caller_id_get+0xc>
   10114:	f7ff fff4 	bl	10100 <ticker_instance0_caller_id_get.part.1>
}
   10118:	bd08      	pop	{r3, pc}

0001011a <ticker_instance0_caller_id_get>:
	switch (user_id) {
   1011a:	2801      	cmp	r0, #1
{
   1011c:	b508      	push	{r3, lr}
	switch (user_id) {
   1011e:	d004      	beq.n	1012a <ticker_instance0_caller_id_get+0x10>
   10120:	d305      	bcc.n	1012e <ticker_instance0_caller_id_get+0x14>
   10122:	2803      	cmp	r0, #3
   10124:	d004      	beq.n	10130 <ticker_instance0_caller_id_get+0x16>
   10126:	f7ff ffeb 	bl	10100 <ticker_instance0_caller_id_get.part.1>
		return CALL_ID_JOB;
   1012a:	2002      	movs	r0, #2
   1012c:	bd08      	pop	{r3, pc}
		return CALL_ID_WORKER;
   1012e:	2001      	movs	r0, #1
}
   10130:	bd08      	pop	{r3, pc}

00010132 <ticker_worker>:
{
   10132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
   10136:	7f05      	ldrb	r5, [r0, #28]
	instance->worker_trigger = 1;
   10138:	2301      	movs	r3, #1
{
   1013a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
   1013c:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   1013e:	2d00      	cmp	r5, #0
   10140:	d14a      	bne.n	101d8 <ticker_worker+0xa6>
	if (instance->ticker_id_head == TICKER_NULL) {
   10142:	7e03      	ldrb	r3, [r0, #24]
   10144:	2bff      	cmp	r3, #255	; 0xff
   10146:	d102      	bne.n	1014e <ticker_worker+0x1c>
		instance->worker_trigger = 0;
   10148:	7745      	strb	r5, [r0, #29]
		return;
   1014a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1014e:	f006 fe8b 	bl	16e68 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10152:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
   10154:	7e26      	ldrb	r6, [r4, #24]
	node = &instance->node[0];
   10156:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   1015a:	1bc7      	subs	r7, r0, r7
   1015c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
   10160:	2eff      	cmp	r6, #255	; 0xff
   10162:	d006      	beq.n	10172 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
   10164:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   10168:	eb08 0186 	add.w	r1, r8, r6, lsl #2
		ticks_to_expire = ticker->ticks_to_expire;
   1016c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1016e:	42bb      	cmp	r3, r7
   10170:	d916      	bls.n	101a0 <ticker_worker+0x6e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10172:	7aa2      	ldrb	r2, [r4, #10]
   10174:	7ae3      	ldrb	r3, [r4, #11]
   10176:	4293      	cmp	r3, r2
   10178:	d105      	bne.n	10186 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
   1017a:	3301      	adds	r3, #1
   1017c:	b2db      	uxtb	r3, r3
			last = 0;
   1017e:	2b02      	cmp	r3, #2
   10180:	bf08      	it	eq
   10182:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
   10184:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10186:	7ae3      	ldrb	r3, [r4, #11]
   10188:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   1018c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1018e:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
   10190:	2300      	movs	r3, #0
   10192:	7763      	strb	r3, [r4, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   10194:	2102      	movs	r1, #2
   10196:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10198:	4610      	mov	r0, r2
}
   1019a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   1019e:	4718      	bx	r3
		ticks_elapsed -= ticks_to_expire;
   101a0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   101a2:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   101a4:	788a      	ldrb	r2, [r1, #2]
   101a6:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
   101a8:	f818 6026 	ldrb.w	r6, [r8, r6, lsl #2]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   101ac:	1a9b      	subs	r3, r3, r2
   101ae:	b2db      	uxtb	r3, r3
   101b0:	2b01      	cmp	r3, #1
   101b2:	d1d5      	bne.n	10160 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
   101b4:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
   101b8:	3a01      	subs	r2, #1
   101ba:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   101bc:	f1b9 0f00 	cmp.w	r9, #0
   101c0:	d0ce      	beq.n	10160 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   101c2:	6960      	ldr	r0, [r4, #20]
					   ticker->ticks_to_expire_minus) &
   101c4:	8a8b      	ldrh	r3, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
   101c6:	8b4a      	ldrh	r2, [r1, #26]
			ticks_at_expire = (instance->ticks_current +
   101c8:	4428      	add	r0, r5
					   ticks_expired -
   101ca:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   101cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   101d0:	690b      	ldr	r3, [r1, #16]
   101d2:	6a09      	ldr	r1, [r1, #32]
   101d4:	47c8      	blx	r9
   101d6:	e7c3      	b.n	10160 <ticker_worker+0x2e>
   101d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000101dc <ticker_job>:
{
   101dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
   101e0:	7f42      	ldrb	r2, [r0, #29]
{
   101e2:	b093      	sub	sp, #76	; 0x4c
   101e4:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   101e6:	2a00      	cmp	r2, #0
   101e8:	f040 8398 	bne.w	1091c <ticker_job+0x740>
	ticks_previous = instance->ticks_current;
   101ec:	6943      	ldr	r3, [r0, #20]
   101ee:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
   101f0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   101f2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
   101f4:	7701      	strb	r1, [r0, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   101f6:	7ac0      	ldrb	r0, [r0, #11]
   101f8:	4298      	cmp	r0, r3
   101fa:	d079      	beq.n	102f0 <ticker_job+0x114>
		first = instance->ticks_elapsed_first + 1;
   101fc:	440b      	add	r3, r1
   101fe:	b2db      	uxtb	r3, r3
			first = 0;
   10200:	2b02      	cmp	r3, #2
   10202:	bf08      	it	eq
   10204:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
   10206:	72a3      	strb	r3, [r4, #10]
		ticks_elapsed =
   10208:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		flag_elapsed = 1;
   1020c:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
   1020e:	f8d3 900c 	ldr.w	r9, [r3, #12]
		instance->ticks_current += ticks_elapsed;
   10212:	9b05      	ldr	r3, [sp, #20]
   10214:	444b      	add	r3, r9
		instance->ticks_current &= 0x00FFFFFF;
   10216:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1021a:	6163      	str	r3, [r4, #20]
	ticker_id_old_head = instance->ticker_id_head;
   1021c:	7e23      	ldrb	r3, [r4, #24]
   1021e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
   10220:	6823      	ldr	r3, [r4, #0]
   10222:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
   10224:	6863      	ldr	r3, [r4, #4]
   10226:	930b      	str	r3, [sp, #44]	; 0x2c
   10228:	7a63      	ldrb	r3, [r4, #9]
   1022a:	3b01      	subs	r3, #1
   1022c:	b2db      	uxtb	r3, r3
   1022e:	9302      	str	r3, [sp, #8]
	pending = 0;
   10230:	2300      	movs	r3, #0
   10232:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
   10234:	f04f 0bff 	mov.w	fp, #255	; 0xff
	while (count_user--) {
   10238:	9b02      	ldr	r3, [sp, #8]
   1023a:	2bff      	cmp	r3, #255	; 0xff
   1023c:	d15b      	bne.n	102f6 <ticker_job+0x11a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1023e:	7e23      	ldrb	r3, [r4, #24]
	flag_compare_update = 0;
   10240:	9a03      	ldr	r2, [sp, #12]
   10242:	1a9b      	subs	r3, r3, r2
   10244:	bf18      	it	ne
   10246:	2301      	movne	r3, #1
   10248:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
   1024a:	9b01      	ldr	r3, [sp, #4]
   1024c:	b1db      	cbz	r3, 10286 <ticker_job+0xaa>
	node = &instance->node[0];
   1024e:	6823      	ldr	r3, [r4, #0]
   10250:	9302      	str	r3, [sp, #8]
	ticks_expired = 0;
   10252:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   10256:	7e27      	ldrb	r7, [r4, #24]
   10258:	2fff      	cmp	r7, #255	; 0xff
   1025a:	d00d      	beq.n	10278 <ticker_job+0x9c>
		ticker = &node[id_expired];
   1025c:	fa0f f887 	sxth.w	r8, r7
   10260:	9b02      	ldr	r3, [sp, #8]
   10262:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   10266:	eb03 0588 	add.w	r5, r3, r8, lsl #2
		ticks_to_expire = ticker->ticks_to_expire;
   1026a:	68ae      	ldr	r6, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1026c:	454e      	cmp	r6, r9
   1026e:	f240 812a 	bls.w	104c6 <ticker_job+0x2ea>
			ticker->ticks_to_expire -= ticks_elapsed;
   10272:	eba6 0609 	sub.w	r6, r6, r9
   10276:	60ae      	str	r6, [r5, #8]
			flag_compare_update = 1;
   10278:	9b04      	ldr	r3, [sp, #16]
   1027a:	9a01      	ldr	r2, [sp, #4]
   1027c:	9903      	ldr	r1, [sp, #12]
   1027e:	42b9      	cmp	r1, r7
   10280:	bf18      	it	ne
   10282:	4613      	movne	r3, r2
   10284:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
   10286:	6823      	ldr	r3, [r4, #0]
   10288:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
   1028a:	6863      	ldr	r3, [r4, #4]
   1028c:	9310      	str	r3, [sp, #64]	; 0x40
   1028e:	7a63      	ldrb	r3, [r4, #9]
   10290:	3b01      	subs	r3, #1
   10292:	b2db      	uxtb	r3, r3
   10294:	9306      	str	r3, [sp, #24]
	while (count_user--) {
   10296:	9b06      	ldr	r3, [sp, #24]
   10298:	2bff      	cmp	r3, #255	; 0xff
   1029a:	f040 8160 	bne.w	1055e <ticker_job+0x382>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1029e:	7e23      	ldrb	r3, [r4, #24]
   102a0:	9a03      	ldr	r2, [sp, #12]
   102a2:	4293      	cmp	r3, r2
	if (!pending) {
   102a4:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   102a6:	f040 8330 	bne.w	1090a <ticker_job+0x72e>
	if (!pending) {
   102aa:	b94b      	cbnz	r3, 102c0 <ticker_job+0xe4>
   102ac:	7a65      	ldrb	r5, [r4, #9]
	users = &instance->user[0];
   102ae:	6863      	ldr	r3, [r4, #4]
   102b0:	9301      	str	r3, [sp, #4]
   102b2:	3d01      	subs	r5, #1
   102b4:	b2ed      	uxtb	r5, r5
			ticker_job_op_inquire(instance, &user_op[user->first]);
   102b6:	f04f 082c 	mov.w	r8, #44	; 0x2c
	while (count_user--) {
   102ba:	2dff      	cmp	r5, #255	; 0xff
   102bc:	f040 8294 	bne.w	107e8 <ticker_job+0x60c>
	instance->job_guard = 0;
   102c0:	2300      	movs	r3, #0
   102c2:	7723      	strb	r3, [r4, #28]
	if (flag_compare_update) {
   102c4:	9b04      	ldr	r3, [sp, #16]
   102c6:	b13b      	cbz	r3, 102d8 <ticker_job+0xfc>
	if (instance->ticker_id_head == TICKER_NULL) {
   102c8:	7e23      	ldrb	r3, [r4, #24]
   102ca:	2bff      	cmp	r3, #255	; 0xff
   102cc:	f040 82e1 	bne.w	10892 <ticker_job+0x6b6>
		if (cntr_stop() == 0) {
   102d0:	f006 fdb2 	bl	16e38 <cntr_stop>
   102d4:	b900      	cbnz	r0, 102d8 <ticker_job+0xfc>
			instance->ticks_slot_previous = 0;
   102d6:	8360      	strh	r0, [r4, #26]
	if (instance->worker_trigger) {
   102d8:	7f63      	ldrb	r3, [r4, #29]
   102da:	2b00      	cmp	r3, #0
   102dc:	f000 831e 	beq.w	1091c <ticker_job+0x740>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   102e0:	2201      	movs	r2, #1
   102e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   102e4:	4611      	mov	r1, r2
   102e6:	2002      	movs	r0, #2
}
   102e8:	b013      	add	sp, #76	; 0x4c
   102ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   102ee:	4718      	bx	r3
		flag_elapsed = 0;
   102f0:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
   102f2:	4691      	mov	r9, r2
   102f4:	e792      	b.n	1021c <ticker_job+0x40>
		user = &users[count_user];
   102f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102f8:	9a02      	ldr	r2, [sp, #8]
   102fa:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   102fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10302:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
   10304:	f898 1003 	ldrb.w	r1, [r8, #3]
			user_op = &user_ops[user->middle];
   10308:	202c      	movs	r0, #44	; 0x2c
		while (user->middle != user->last) {
   1030a:	f898 7002 	ldrb.w	r7, [r8, #2]
   1030e:	428f      	cmp	r7, r1
   10310:	f000 80d4 	beq.w	104bc <ticker_job+0x2e0>
			user_op = &user_ops[user->middle];
   10314:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
   10316:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   1031a:	fb17 f200 	smulbb	r2, r7, r0
   1031e:	189e      	adds	r6, r3, r2
			middle = user->middle + 1;
   10320:	1c7b      	adds	r3, r7, #1
   10322:	b2db      	uxtb	r3, r3
				middle = 0;
   10324:	429d      	cmp	r5, r3
   10326:	bf08      	it	eq
   10328:	2300      	moveq	r3, #0
			user->middle = middle;
   1032a:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1032e:	9b06      	ldr	r3, [sp, #24]
   10330:	5c9a      	ldrb	r2, [r3, r2]
   10332:	2a03      	cmp	r2, #3
   10334:	d9e9      	bls.n	1030a <ticker_job+0x12e>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10336:	2a05      	cmp	r2, #5
   10338:	d817      	bhi.n	1036a <ticker_job+0x18e>
			ticker = &node[user_op->id];
   1033a:	7871      	ldrb	r1, [r6, #1]
   1033c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   10340:	930a      	str	r3, [sp, #40]	; 0x28
   10342:	980a      	ldr	r0, [sp, #40]	; 0x28
   10344:	9b04      	ldr	r3, [sp, #16]
   10346:	eb03 0580 	add.w	r5, r3, r0, lsl #2
			state = (ticker->req - ticker->ack) & 0xff;
   1034a:	786b      	ldrb	r3, [r5, #1]
   1034c:	78a8      	ldrb	r0, [r5, #2]
   1034e:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10350:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   10354:	d009      	beq.n	1036a <ticker_job+0x18e>
			    (state == 0) ||
   10356:	2a04      	cmp	r2, #4
   10358:	d10c      	bne.n	10374 <ticker_job+0x198>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   1035a:	6872      	ldr	r2, [r6, #4]
   1035c:	b952      	cbnz	r2, 10374 <ticker_job+0x198>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   1035e:	68b2      	ldr	r2, [r6, #8]
   10360:	b942      	cbnz	r2, 10374 <ticker_job+0x198>
			     (user_op->params.update.lazy == 0) &&
   10362:	68f2      	ldr	r2, [r6, #12]
   10364:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10368:	d104      	bne.n	10374 <ticker_job+0x198>
				ticker_job_op_cb(user_op,
   1036a:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   1036c:	4630      	mov	r0, r6
   1036e:	f7ff fe4c 	bl	1000a <ticker_job_op_cb>
   10372:	e7c7      	b.n	10304 <ticker_job+0x128>
			if (state == 1) {
   10374:	2b01      	cmp	r3, #1
   10376:	f040 8098 	bne.w	104aa <ticker_job+0x2ce>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1037a:	4620      	mov	r0, r4
   1037c:	f7ff fdf9 	bl	ff72 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10380:	7833      	ldrb	r3, [r6, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10382:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10384:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10386:	4607      	mov	r7, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10388:	f040 8084 	bne.w	10494 <ticker_job+0x2b8>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1038c:	6963      	ldr	r3, [r4, #20]
   1038e:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   10390:	f006 fd6a 	bl	16e68 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10394:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
   10396:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10398:	1ac3      	subs	r3, r0, r3
   1039a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1039e:	444b      	add	r3, r9
	if (ticks_to_expire > ticks_elapsed) {
   103a0:	429f      	cmp	r7, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   103a2:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
   103a4:	bf9c      	itt	ls
   103a6:	8aaa      	ldrhls	r2, [r5, #20]
   103a8:	1bd7      	subls	r7, r2, r7
	if ((ticker->ticks_periodic != 0) &&
   103aa:	686a      	ldr	r2, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   103ac:	bf9b      	ittet	ls
   103ae:	19db      	addls	r3, r3, r7
   103b0:	82ab      	strhls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   103b2:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0;
   103b4:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
   103b6:	b18a      	cbz	r2, 103dc <ticker_job+0x200>
	    (user_op->params.update.lazy != 0)) {
   103b8:	89b1      	ldrh	r1, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   103ba:	b179      	cbz	r1, 103dc <ticker_job+0x200>
		user_op->params.update.lazy--;
   103bc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   103c0:	fa1f fe8e 	uxth.w	lr, lr
   103c4:	f8a6 e00c 	strh.w	lr, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   103c8:	429a      	cmp	r2, r3
   103ca:	d32c      	bcc.n	10426 <ticker_job+0x24a>
		ticker->remainder_current -= 30517578UL;
   103cc:	f8df a310 	ldr.w	sl, [pc, #784]	; 106e0 <ticker_job+0x504>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   103d0:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
   103d4:	45e6      	cmp	lr, ip
   103d6:	d848      	bhi.n	1046a <ticker_job+0x28e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   103d8:	f8a5 e018 	strh.w	lr, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   103dc:	88b2      	ldrh	r2, [r6, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   103de:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
   103e0:	4413      	add	r3, r2
   103e2:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   103e4:	88f2      	ldrh	r2, [r6, #6]
   103e6:	8aab      	ldrh	r3, [r5, #20]
   103e8:	4413      	add	r3, r2
   103ea:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   103ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   103ee:	4628      	mov	r0, r5
   103f0:	f7ff fdeb 	bl	ffca <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   103f4:	8932      	ldrh	r2, [r6, #8]
   103f6:	8aeb      	ldrh	r3, [r5, #22]
   103f8:	4413      	add	r3, r2
   103fa:	b29b      	uxth	r3, r3
   103fc:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   103fe:	8972      	ldrh	r2, [r6, #10]
   10400:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10402:	bf8c      	ite	hi
   10404:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
   10406:	2300      	movls	r3, #0
   10408:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   1040a:	7bb3      	ldrb	r3, [r6, #14]
   1040c:	b103      	cbz	r3, 10410 <ticker_job+0x234>
		ticker->force = user_op->params.update.force;
   1040e:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   10410:	9b04      	ldr	r3, [sp, #16]
   10412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10414:	f803 b022 	strb.w	fp, [r3, r2, lsl #2]
		ticker->req++;
   10418:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   1041a:	f896 b001 	ldrb.w	fp, [r6, #1]
		ticker->req++;
   1041e:	3301      	adds	r3, #1
   10420:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10422:	2100      	movs	r1, #0
   10424:	e7a2      	b.n	1036c <ticker_job+0x190>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   10426:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1042a:	45e6      	cmp	lr, ip
   1042c:	d2ce      	bcs.n	103cc <ticker_job+0x1f0>
	if ((ticker->remainder_current >= BIT(31)) ||
   1042e:	6a29      	ldr	r1, [r5, #32]
   10430:	4fa9      	ldr	r7, [pc, #676]	; (106d8 <ticker_job+0x4fc>)
   10432:	48aa      	ldr	r0, [pc, #680]	; (106dc <ticker_job+0x500>)
   10434:	19cf      	adds	r7, r1, r7
   10436:	4287      	cmp	r7, r0
		ticker->remainder_current += 30517578UL;
   10438:	bf81      	itttt	hi
   1043a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1043e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   10442:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   10446:	6229      	strhi	r1, [r5, #32]
	ticker->remainder_current -= ticker->remainder_periodic;
   10448:	6a2f      	ldr	r7, [r5, #32]
   1044a:	69e9      	ldr	r1, [r5, #28]
		decrement++;
   1044c:	bf8c      	ite	hi
   1044e:	f04f 0a01 	movhi.w	sl, #1
	u8_t decrement = 0;
   10452:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   10456:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   10458:	4492      	add	sl, r2
			ticker->lazy_current--;
   1045a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
   1045e:	622f      	str	r7, [r5, #32]
			ticks_to_expire -= ticker->ticks_periodic +
   10460:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   10464:	f8a5 c01a 	strh.w	ip, [r5, #26]
   10468:	e7ae      	b.n	103c8 <ticker_job+0x1ec>
	ticker->remainder_current += ticker->remainder_periodic;
   1046a:	6a2f      	ldr	r7, [r5, #32]
   1046c:	69e9      	ldr	r1, [r5, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   1046e:	489b      	ldr	r0, [pc, #620]	; (106dc <ticker_job+0x500>)
	ticker->remainder_current += ticker->remainder_periodic;
   10470:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10472:	4999      	ldr	r1, [pc, #612]	; (106d8 <ticker_job+0x4fc>)
   10474:	1879      	adds	r1, r7, r1
   10476:	4281      	cmp	r1, r0
	return 0;
   10478:	bf8e      	itee	hi
   1047a:	2100      	movhi	r1, #0
		return 1;
   1047c:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
   1047e:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
   10480:	4411      	add	r1, r2
			ticker->lazy_current++;
   10482:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10486:	bf8c      	ite	hi
   10488:	622f      	strhi	r7, [r5, #32]
		ticker->remainder_current -= 30517578UL;
   1048a:	622f      	strls	r7, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   1048c:	440b      	add	r3, r1
			ticker->lazy_current++;
   1048e:	f8a5 c01a 	strh.w	ip, [r5, #26]
   10492:	e79d      	b.n	103d0 <ticker_job+0x1f4>
		ticker->req = ticker->ack;
   10494:	78ab      	ldrb	r3, [r5, #2]
   10496:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10498:	7873      	ldrb	r3, [r6, #1]
   1049a:	7e62      	ldrb	r2, [r4, #25]
   1049c:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   1049e:	bf01      	itttt	eq
   104a0:	23ff      	moveq	r3, #255	; 0xff
   104a2:	7663      	strbeq	r3, [r4, #25]
			instance->ticks_slot_previous = 0;
   104a4:	2300      	moveq	r3, #0
   104a6:	8363      	strheq	r3, [r4, #26]
   104a8:	e7bb      	b.n	10422 <ticker_job+0x246>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   104aa:	2102      	movs	r1, #2
   104ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   104ae:	2201      	movs	r2, #1
   104b0:	4608      	mov	r0, r1
   104b2:	4798      	blx	r3
				pending = 1;
   104b4:	2301      	movs	r3, #1
				user->middle = prev;
   104b6:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1;
   104ba:	9307      	str	r3, [sp, #28]
   104bc:	9b02      	ldr	r3, [sp, #8]
   104be:	3b01      	subs	r3, #1
   104c0:	b2db      	uxtb	r3, r3
   104c2:	9302      	str	r3, [sp, #8]
   104c4:	e6b8      	b.n	10238 <ticker_job+0x5c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   104c6:	8b63      	ldrh	r3, [r4, #26]
   104c8:	429e      	cmp	r6, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   104ca:	bf29      	itett	cs
   104cc:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
   104ce:	1b9b      	subcc	r3, r3, r6
			instance->ticker_id_slot_previous = TICKER_NULL;
   104d0:	7663      	strbcs	r3, [r4, #25]
			instance->ticks_slot_previous = 0;
   104d2:	2300      	movcs	r3, #0
   104d4:	8363      	strh	r3, [r4, #26]
		if (ticker->ticks_slot != 0) {
   104d6:	8aeb      	ldrh	r3, [r5, #22]
		ticks_expired += ticks_to_expire;
   104d8:	44b2      	add	sl, r6
		if (ticker->ticks_slot != 0) {
   104da:	b10b      	cbz	r3, 104e0 <ticker_job+0x304>
			instance->ticker_id_slot_previous = id_expired;
   104dc:	7667      	strb	r7, [r4, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   104de:	8363      	strh	r3, [r4, #26]
		ticker->ticks_to_expire = 0;
   104e0:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
   104e2:	9b02      	ldr	r3, [sp, #8]
		ticker->ticks_to_expire = 0;
   104e4:	60aa      	str	r2, [r5, #8]
		instance->ticker_id_head = ticker->next;
   104e6:	f813 3028 	ldrb.w	r3, [r3, r8, lsl #2]
   104ea:	7623      	strb	r3, [r4, #24]
		if (ticker->ticks_periodic != 0) {
   104ec:	f8d5 e004 	ldr.w	lr, [r5, #4]
   104f0:	f1be 0f00 	cmp.w	lr, #0
   104f4:	d02f      	beq.n	10556 <ticker_job+0x37a>
   104f6:	8b28      	ldrh	r0, [r5, #24]
	if ((ticker->remainder_current < BIT(31)) &&
   104f8:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 106dc <ticker_job+0x500>
	ticker->remainder_current += ticker->remainder_periodic;
   104fc:	6a2b      	ldr	r3, [r5, #32]
   104fe:	69e9      	ldr	r1, [r5, #28]
   10500:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
   10502:	4975      	ldr	r1, [pc, #468]	; (106d8 <ticker_job+0x4fc>)
   10504:	1859      	adds	r1, r3, r1
   10506:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
   10508:	bf9f      	itttt	ls
   1050a:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   1050e:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   10512:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
   10516:	622b      	strls	r3, [r5, #32]
		return 1;
   10518:	bf92      	itee	ls
   1051a:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
   1051c:	622b      	strhi	r3, [r5, #32]
	return 0;
   1051e:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
   10520:	4473      	add	r3, lr
			while (count--) {
   10522:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
   10526:	441a      	add	r2, r3
			while (count--) {
   10528:	d2e8      	bcs.n	104fc <ticker_job+0x320>
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1052a:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
   1052c:	60aa      	str	r2, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1052e:	6961      	ldr	r1, [r4, #20]
   10530:	eb03 020a 	add.w	r2, r3, sl
   10534:	4628      	mov	r0, r5
   10536:	f7ff fd48 	bl	ffca <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   1053a:	8b2b      	ldrh	r3, [r5, #24]
   1053c:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   1053e:	2300      	movs	r3, #0
   10540:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   10542:	9b02      	ldr	r3, [sp, #8]
   10544:	f803 b028 	strb.w	fp, [r3, r8, lsl #2]
			ticker->req++;
   10548:	786b      	ldrb	r3, [r5, #1]
   1054a:	3301      	adds	r3, #1
   1054c:	706b      	strb	r3, [r5, #1]
		ticks_elapsed -= ticks_to_expire;
   1054e:	eba9 0906 	sub.w	r9, r9, r6
   10552:	46bb      	mov	fp, r7
   10554:	e67f      	b.n	10256 <ticker_job+0x7a>
			ticker->req = ticker->ack;
   10556:	78ab      	ldrb	r3, [r5, #2]
   10558:	706b      	strb	r3, [r5, #1]
   1055a:	465f      	mov	r7, fp
   1055c:	e7f7      	b.n	1054e <ticker_job+0x372>
		user = &users[count_user];
   1055e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10560:	9a06      	ldr	r2, [sp, #24]
   10562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10566:	9305      	str	r3, [sp, #20]
		user_ops = (void *)&user->user_op[0];
   10568:	685b      	ldr	r3, [r3, #4]
   1056a:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
   1056c:	9b05      	ldr	r3, [sp, #20]
   1056e:	785b      	ldrb	r3, [r3, #1]
   10570:	9301      	str	r3, [sp, #4]
		while ((insert_head != TICKER_NULL) ||
   10572:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10576:	f000 808e 	beq.w	10696 <ticker_job+0x4ba>
				ticker = &node[id_insert];
   1057a:	fa0f f38b 	sxth.w	r3, fp
   1057e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10582:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
   10584:	46da      	mov	sl, fp
   10586:	f812 b023 	ldrb.w	fp, [r2, r3, lsl #2]
				ticker = &node[id_insert];
   1058a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
				user_op = NULL;
   1058e:	2600      	movs	r6, #0
	struct ticker_node *node = &instance->node[0];
   10590:	6823      	ldr	r3, [r4, #0]
   10592:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
   10594:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
   10596:	8b2a      	ldrh	r2, [r5, #24]
	ticker->next = TICKER_NULL;
   10598:	702b      	strb	r3, [r5, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   1059a:	8b6b      	ldrh	r3, [r5, #26]
   1059c:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
   1059e:	bf86      	itte	hi
   105a0:	1a9b      	subhi	r3, r3, r2
   105a2:	b29b      	uxthhi	r3, r3
		skip = 0;
   105a4:	2300      	movls	r3, #0
   105a6:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
   105a8:	fa0f f38a 	sxth.w	r3, sl
   105ac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   105b0:	009b      	lsls	r3, r3, #2
   105b2:	9311      	str	r3, [sp, #68]	; 0x44
   105b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
   105b6:	6822      	ldr	r2, [r4, #0]
	ticks_slot_previous = instance->ticks_slot_previous;
   105b8:	8b60      	ldrh	r0, [r4, #26]
   105ba:	9002      	str	r0, [sp, #8]
	ticker_new = &node[id];
   105bc:	eb02 0903 	add.w	r9, r2, r3
	current = instance->ticker_id_head;
   105c0:	7e23      	ldrb	r3, [r4, #24]
	ticks_to_expire = ticker_new->ticks_to_expire;
   105c2:	f8d9 1008 	ldr.w	r1, [r9, #8]
	previous = current;
   105c6:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
   105c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	while ((current != TICKER_NULL) &&
   105cc:	2bff      	cmp	r3, #255	; 0xff
   105ce:	d008      	beq.n	105e2 <ticker_job+0x406>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   105d0:	eb03 08c3 	add.w	r8, r3, r3, lsl #3
   105d4:	eb02 0e88 	add.w	lr, r2, r8, lsl #2
		(ticks_to_expire_current =
   105d8:	f8de 7008 	ldr.w	r7, [lr, #8]
	while ((current != TICKER_NULL) &&
   105dc:	42b9      	cmp	r1, r7
   105de:	f200 80a1 	bhi.w	10724 <ticker_job+0x548>
				     ticks_to_expire + ticker_new->ticks_slot);
   105e2:	f8b9 7016 	ldrh.w	r7, [r9, #22]
   105e6:	970d      	str	r7, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
   105e8:	eb07 0801 	add.w	r8, r7, r1
   105ec:	461f      	mov	r7, r3
	while (ticker_id_head != TICKER_NULL) {
   105ee:	2fff      	cmp	r7, #255	; 0xff
   105f0:	f040 80ad 	bne.w	1074e <ticker_job+0x572>
	if ((ticker_new->ticks_slot == 0) ||
   105f4:	980d      	ldr	r0, [sp, #52]	; 0x34
   105f6:	b130      	cbz	r0, 10606 <ticker_job+0x42a>
   105f8:	9802      	ldr	r0, [sp, #8]
   105fa:	4281      	cmp	r1, r0
   105fc:	f0c0 80bf 	bcc.w	1077e <ticker_job+0x5a2>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   10600:	2fff      	cmp	r7, #255	; 0xff
   10602:	f040 8187 	bne.w	10914 <ticker_job+0x738>
		if (previous == current) {
   10606:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
   10608:	f8c9 1008 	str.w	r1, [r9, #8]
		if (previous == current) {
   1060c:	4283      	cmp	r3, r0
			node[previous].next = id;
   1060e:	bf18      	it	ne
   10610:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
   10614:	f889 3000 	strb.w	r3, [r9]
			node[previous].next = id;
   10618:	bf16      	itet	ne
   1061a:	eb00 00c0 	addne.w	r0, r0, r0, lsl #3
			instance->ticker_id_head = id;
   1061e:	f884 a018 	strbeq.w	sl, [r4, #24]
			node[previous].next = id;
   10622:	f802 a020 	strbne.w	sl, [r2, r0, lsl #2]
		if (current != TICKER_NULL) {
   10626:	2bff      	cmp	r3, #255	; 0xff
   10628:	d006      	beq.n	10638 <ticker_job+0x45c>
			node[current].ticks_to_expire -= ticks_to_expire;
   1062a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1062e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10632:	689a      	ldr	r2, [r3, #8]
   10634:	1a51      	subs	r1, r2, r1
   10636:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
   10638:	78ab      	ldrb	r3, [r5, #2]
   1063a:	3301      	adds	r3, #1
   1063c:	706b      	strb	r3, [r5, #1]
	return TICKER_STATUS_SUCCESS;
   1063e:	2100      	movs	r1, #0
			if (user_op) {
   10640:	2e00      	cmp	r6, #0
   10642:	d096      	beq.n	10572 <ticker_job+0x396>
				ticker_job_op_cb(user_op, status);
   10644:	4630      	mov	r0, r6
   10646:	f7ff fce0 	bl	1000a <ticker_job_op_cb>
   1064a:	e792      	b.n	10572 <ticker_job+0x396>
				user_op = &user_ops[user_ops_first];
   1064c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10650:	232c      	movs	r3, #44	; 0x2c
   10652:	fb12 f303 	smulbb	r3, r2, r3
   10656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10658:	18d6      	adds	r6, r2, r3
				first = user_ops_first + 1;
   1065a:	9a01      	ldr	r2, [sp, #4]
   1065c:	3201      	adds	r2, #1
   1065e:	b2d2      	uxtb	r2, r2
   10660:	9201      	str	r2, [sp, #4]
				if (first == user->count_user_op) {
   10662:	9a05      	ldr	r2, [sp, #20]
					first = 0;
   10664:	9901      	ldr	r1, [sp, #4]
				if (first == user->count_user_op) {
   10666:	7812      	ldrb	r2, [r2, #0]
					first = 0;
   10668:	428a      	cmp	r2, r1
   1066a:	bf08      	it	eq
   1066c:	2100      	moveq	r1, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1066e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					first = 0;
   10670:	9101      	str	r1, [sp, #4]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10672:	5cd3      	ldrb	r3, [r2, r3]
   10674:	2b03      	cmp	r3, #3
   10676:	d10e      	bne.n	10696 <ticker_job+0x4ba>
				id_insert = user_op->id;
   10678:	f896 a001 	ldrb.w	sl, [r6, #1]
				ticker = &node[id_insert];
   1067c:	9b08      	ldr	r3, [sp, #32]
   1067e:	eb0a 05ca 	add.w	r5, sl, sl, lsl #3
   10682:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   10686:	786a      	ldrb	r2, [r5, #1]
   10688:	78ab      	ldrb	r3, [r5, #2]
   1068a:	429a      	cmp	r2, r3
   1068c:	d00a      	beq.n	106a4 <ticker_job+0x4c8>
					ticker_job_op_cb(user_op,
   1068e:	2101      	movs	r1, #1
   10690:	4630      	mov	r0, r6
   10692:	f7ff fcba 	bl	1000a <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   10696:	9b05      	ldr	r3, [sp, #20]
   10698:	9a01      	ldr	r2, [sp, #4]
   1069a:	789b      	ldrb	r3, [r3, #2]
   1069c:	4293      	cmp	r3, r2
   1069e:	d1d5      	bne.n	1064c <ticker_job+0x470>
   106a0:	9b06      	ldr	r3, [sp, #24]
   106a2:	e5f5      	b.n	10290 <ticker_job+0xb4>
	ticker->ticks_periodic = start->ticks_periodic;
   106a4:	68f3      	ldr	r3, [r6, #12]
				ticker_job_op_start(ticker, user_op,
   106a6:	6961      	ldr	r1, [r4, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   106a8:	606b      	str	r3, [r5, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   106aa:	6933      	ldr	r3, [r6, #16]
   106ac:	61eb      	str	r3, [r5, #28]
	ticker->lazy_periodic = start->lazy;
   106ae:	8ab3      	ldrh	r3, [r6, #20]
   106b0:	832b      	strh	r3, [r5, #24]
	ticker->ticks_slot = start->ticks_slot;
   106b2:	8af3      	ldrh	r3, [r6, #22]
   106b4:	82eb      	strh	r3, [r5, #22]
	ticker->timeout_func = start->fp_timeout_func;
   106b6:	69b3      	ldr	r3, [r6, #24]
   106b8:	60eb      	str	r3, [r5, #12]
	ticker->context = start->context;
   106ba:	69f3      	ldr	r3, [r6, #28]
   106bc:	612b      	str	r3, [r5, #16]
	ticker->ticks_to_expire_minus = 0;
   106be:	2700      	movs	r7, #0
	ticker->ticks_to_expire = start->ticks_first;
   106c0:	68b3      	ldr	r3, [r6, #8]
   106c2:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0;
   106c4:	82af      	strh	r7, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   106c6:	6872      	ldr	r2, [r6, #4]
   106c8:	4628      	mov	r0, r5
   106ca:	f7ff fc7e 	bl	ffca <ticks_to_expire_prep>
	ticker->force = 1;
   106ce:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
   106d0:	622f      	str	r7, [r5, #32]
	ticker->lazy_current = 0;
   106d2:	836f      	strh	r7, [r5, #26]
	ticker->force = 1;
   106d4:	70eb      	strb	r3, [r5, #3]
   106d6:	e75b      	b.n	10590 <ticker_job+0x3b4>
   106d8:	ff172b5a 	.word	0xff172b5a
   106dc:	7f172b59 	.word	0x7f172b59
   106e0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
   106e4:	6869      	ldr	r1, [r5, #4]
   106e6:	2900      	cmp	r1, #0
   106e8:	d07c      	beq.n	107e4 <ticker_job+0x608>
	ticker->remainder_current += ticker->remainder_periodic;
   106ea:	6a2b      	ldr	r3, [r5, #32]
   106ec:	69ea      	ldr	r2, [r5, #28]
	if ((ticker->remainder_current < BIT(31)) &&
   106ee:	488d      	ldr	r0, [pc, #564]	; (10924 <ticker_job+0x748>)
	ticker->remainder_current += ticker->remainder_periodic;
   106f0:	4413      	add	r3, r2
	if ((ticker->remainder_current < BIT(31)) &&
   106f2:	4a8d      	ldr	r2, [pc, #564]	; (10928 <ticker_job+0x74c>)
   106f4:	189a      	adds	r2, r3, r2
   106f6:	4282      	cmp	r2, r0
		ticker->remainder_current -= 30517578UL;
   106f8:	bf9d      	ittte	ls
   106fa:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
   106fe:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
   10702:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
	ticker->remainder_current += ticker->remainder_periodic;
   10706:	622b      	strhi	r3, [r5, #32]
		ticker->remainder_current -= 30517578UL;
   10708:	bf98      	it	ls
   1070a:	622b      	strls	r3, [r5, #32]
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1070c:	68ab      	ldr	r3, [r5, #8]
   1070e:	4419      	add	r1, r3
			ticker->lazy_current++;
   10710:	8b6b      	ldrh	r3, [r5, #26]
	return 0;
   10712:	bf8c      	ite	hi
   10714:	2200      	movhi	r2, #0
		return 1;
   10716:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10718:	4411      	add	r1, r2
			ticker->lazy_current++;
   1071a:	3301      	adds	r3, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1071c:	60a9      	str	r1, [r5, #8]
			ticker->lazy_current++;
   1071e:	836b      	strh	r3, [r5, #26]
   10720:	465f      	mov	r7, fp
   10722:	e05d      	b.n	107e0 <ticker_job+0x604>
		if (ticker_current->ticks_slot != 0) {
   10724:	f8be e016 	ldrh.w	lr, [lr, #22]
		ticks_to_expire -= ticks_to_expire_current;
   10728:	1bc9      	subs	r1, r1, r7
		if (ticker_current->ticks_slot != 0) {
   1072a:	f1be 0f00 	cmp.w	lr, #0
   1072e:	d006      	beq.n	1073e <ticker_job+0x562>
			ticks_slot_previous = ticker_current->ticks_slot;
   10730:	f8cd e008 	str.w	lr, [sp, #8]
   10734:	469c      	mov	ip, r3
		current = ticker_current->next;
   10736:	9309      	str	r3, [sp, #36]	; 0x24
   10738:	f812 3028 	ldrb.w	r3, [r2, r8, lsl #2]
   1073c:	e746      	b.n	105cc <ticker_job+0x3f0>
			if (ticks_slot_previous > ticks_to_expire_current) {
   1073e:	9802      	ldr	r0, [sp, #8]
   10740:	4287      	cmp	r7, r0
				ticks_slot_previous -= ticks_to_expire_current;
   10742:	bf3a      	itte	cc
   10744:	1bc0      	subcc	r0, r0, r7
   10746:	9002      	strcc	r0, [sp, #8]
				ticks_slot_previous = 0;
   10748:	f8cd e008 	strcs.w	lr, [sp, #8]
   1074c:	e7f3      	b.n	10736 <ticker_job+0x55a>
		ticker = &node[ticker_id_head];
   1074e:	fa0f fe87 	sxth.w	lr, r7
   10752:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   10756:	eb02 008e 	add.w	r0, r2, lr, lsl #2
   1075a:	900e      	str	r0, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
   1075c:	6880      	ldr	r0, [r0, #8]
   1075e:	900f      	str	r0, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
   10760:	4540      	cmp	r0, r8
   10762:	d20a      	bcs.n	1077a <ticker_job+0x59e>
		if (ticker->ticks_slot) {
   10764:	980e      	ldr	r0, [sp, #56]	; 0x38
   10766:	8ac0      	ldrh	r0, [r0, #22]
   10768:	2800      	cmp	r0, #0
   1076a:	f47f af43 	bne.w	105f4 <ticker_job+0x418>
		ticks_slot -= ticks_to_expire;
   1076e:	980f      	ldr	r0, [sp, #60]	; 0x3c
		ticker_id_head = ticker->next;
   10770:	f812 702e 	ldrb.w	r7, [r2, lr, lsl #2]
		ticks_slot -= ticks_to_expire;
   10774:	eba8 0800 	sub.w	r8, r8, r0
   10778:	e739      	b.n	105ee <ticker_job+0x412>
			return TICKER_NULL;
   1077a:	27ff      	movs	r7, #255	; 0xff
   1077c:	e73a      	b.n	105f4 <ticker_job+0x418>
	while (id_insert !=
   1077e:	45e2      	cmp	sl, ip
   10780:	f43f af5a 	beq.w	10638 <ticker_job+0x45c>
		if (id_collide != TICKER_NULL) {
   10784:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10788:	d0ac      	beq.n	106e4 <ticker_job+0x508>
   1078a:	4667      	mov	r7, ip
			struct ticker_node *ticker_collide = &node[id_collide];
   1078c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1078e:	fa0f f987 	sxth.w	r9, r7
   10792:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
   10796:	eb03 0889 	add.w	r8, r3, r9, lsl #2
			if (ticker_collide->lazy_current >
   1079a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
			    ticker_collide->lazy_periodic) {
   1079e:	f8b8 2018 	ldrh.w	r2, [r8, #24]
			if (ticker_collide->lazy_current >
   107a2:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
   107a4:	bf88      	it	hi
   107a6:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
   107a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
				skip_collide = ticker_collide->lazy_current -
   107ac:	bf8c      	ite	hi
   107ae:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
   107b0:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
   107b2:	2a00      	cmp	r2, #0
   107b4:	d096      	beq.n	106e4 <ticker_job+0x508>
   107b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   107b8:	4293      	cmp	r3, r2
   107ba:	d893      	bhi.n	106e4 <ticker_job+0x508>
			    skip_collide <= skip &&
   107bc:	f898 2003 	ldrb.w	r2, [r8, #3]
   107c0:	78eb      	ldrb	r3, [r5, #3]
   107c2:	429a      	cmp	r2, r3
   107c4:	d28e      	bcs.n	106e4 <ticker_job+0x508>
					ticker_dequeue(instance, id_collide);
   107c6:	4639      	mov	r1, r7
   107c8:	4620      	mov	r0, r4
   107ca:	f7ff fbd2 	bl	ff72 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
   107ce:	f898 3002 	ldrb.w	r3, [r8, #2]
   107d2:	f888 3001 	strb.w	r3, [r8, #1]
				ticker_collide->next = *insert_head;
   107d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
   107d8:	f8c8 0008 	str.w	r0, [r8, #8]
				ticker_collide->next = *insert_head;
   107dc:	f803 b029 	strb.w	fp, [r3, r9, lsl #2]
			ticker->lazy_current++;
   107e0:	46bb      	mov	fp, r7
   107e2:	e6e7      	b.n	105b4 <ticker_job+0x3d8>
			return TICKER_STATUS_FAILURE;
   107e4:	2101      	movs	r1, #1
   107e6:	e72b      	b.n	10640 <ticker_job+0x464>
		user = &users[count_user];
   107e8:	9b01      	ldr	r3, [sp, #4]
   107ea:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   107ee:	6877      	ldr	r7, [r6, #4]
		while (user->first != user->last) {
   107f0:	7873      	ldrb	r3, [r6, #1]
   107f2:	78f2      	ldrb	r2, [r6, #3]
   107f4:	429a      	cmp	r2, r3
   107f6:	d102      	bne.n	107fe <ticker_job+0x622>
   107f8:	3d01      	subs	r5, #1
   107fa:	b2ed      	uxtb	r5, r5
   107fc:	e55d      	b.n	102ba <ticker_job+0xde>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   107fe:	fb13 f308 	smulbb	r3, r3, r8
   10802:	18fa      	adds	r2, r7, r3
	switch (uop->op) {
   10804:	5cfb      	ldrb	r3, [r7, r3]
   10806:	2b01      	cmp	r3, #1
   10808:	d028      	beq.n	1085c <ticker_job+0x680>
   1080a:	2b02      	cmp	r3, #2
   1080c:	d12d      	bne.n	1086a <ticker_job+0x68e>
		ticker_by_next_slot_get(instance,
   1080e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   10812:	f8d2 a008 	ldr.w	sl, [r2, #8]
	_ticker_id_head = *ticker_id_head;
   10816:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
   1081a:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
   1081e:	f8d4 e000 	ldr.w	lr, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   10822:	28ff      	cmp	r0, #255	; 0xff
   10824:	d004      	beq.n	10830 <ticker_job+0x654>
   10826:	f8da 3000 	ldr.w	r3, [sl]
   1082a:	6961      	ldr	r1, [r4, #20]
   1082c:	428b      	cmp	r3, r1
   1082e:	d025      	beq.n	1087c <ticker_job+0x6a0>
		*ticks_current = instance->ticks_current;
   10830:	6960      	ldr	r0, [r4, #20]
		_ticker_id_head = instance->ticker_id_head;
   10832:	7e21      	ldrb	r1, [r4, #24]
		*ticks_current = instance->ticks_current;
   10834:	f8ca 0000 	str.w	r0, [sl]
		_ticks_to_expire = 0;
   10838:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   1083a:	29ff      	cmp	r1, #255	; 0xff
   1083c:	d00a      	beq.n	10854 <ticker_job+0x678>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   1083e:	eb01 0ac1 	add.w	sl, r1, r1, lsl #3
   10842:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
	while ((_ticker_id_head != TICKER_NULL) &&
   10846:	f8b0 b016 	ldrh.w	fp, [r0, #22]
   1084a:	6880      	ldr	r0, [r0, #8]
   1084c:	f1bb 0f00 	cmp.w	fp, #0
   10850:	d01b      	beq.n	1088a <ticker_job+0x6ae>
		_ticks_to_expire += ticker->ticks_to_expire;
   10852:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
   10854:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
   10858:	f8c9 3000 	str.w	r3, [r9]
		uop->status = TICKER_STATUS_SUCCESS;
   1085c:	2300      	movs	r3, #0
   1085e:	6213      	str	r3, [r2, #32]
		fp_op_func = uop->fp_op_func;
   10860:	6a53      	ldr	r3, [r2, #36]	; 0x24
	if (fp_op_func) {
   10862:	b113      	cbz	r3, 1086a <ticker_job+0x68e>
		fp_op_func(uop->status, uop->op_context);
   10864:	6a91      	ldr	r1, [r2, #40]	; 0x28
   10866:	2000      	movs	r0, #0
   10868:	4798      	blx	r3
			first = user->first + 1;
   1086a:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   1086c:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   1086e:	3301      	adds	r3, #1
   10870:	b2db      	uxtb	r3, r3
				first = 0;
   10872:	429a      	cmp	r2, r3
   10874:	bf08      	it	eq
   10876:	2300      	moveq	r3, #0
			user->first = first;
   10878:	7073      	strb	r3, [r6, #1]
   1087a:	e7b9      	b.n	107f0 <ticker_job+0x614>
		ticker = &node[_ticker_id_head];
   1087c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
	_ticks_to_expire = *ticks_to_expire;
   10880:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
   10884:	f81e 1020 	ldrb.w	r1, [lr, r0, lsl #2]
   10888:	e7d7      	b.n	1083a <ticker_job+0x65e>
		_ticks_to_expire += ticker->ticks_to_expire;
   1088a:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
   1088c:	f81e 102a 	ldrb.w	r1, [lr, sl, lsl #2]
   10890:	e7d3      	b.n	1083a <ticker_job+0x65e>
	if (ticker_id_old_head == TICKER_NULL) {
   10892:	9b03      	ldr	r3, [sp, #12]
   10894:	2bff      	cmp	r3, #255	; 0xff
   10896:	d106      	bne.n	108a6 <ticker_job+0x6ca>
		ticks_current = cntr_cnt_get();
   10898:	f006 fae6 	bl	16e68 <cntr_cnt_get>
   1089c:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   1089e:	f006 fabd 	bl	16e1c <cntr_start>
   108a2:	b900      	cbnz	r0, 108a6 <ticker_job+0x6ca>
			instance->ticks_current = ticks_current;
   108a4:	6165      	str	r5, [r4, #20]
	ticker = &instance->node[instance->ticker_id_head];
   108a6:	7e23      	ldrb	r3, [r4, #24]
	ticks_to_expire = ticker->ticks_to_expire;
   108a8:	6822      	ldr	r2, [r4, #0]
	ticker = &instance->node[instance->ticker_id_head];
   108aa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	ticks_to_expire = ticker->ticks_to_expire;
   108ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   108b2:	270a      	movs	r7, #10
   108b4:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   108b6:	f006 fad7 	bl	16e68 <cntr_cnt_get>
		cc = instance->ticks_current;
   108ba:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   108bc:	1b43      	subs	r3, r0, r5
   108be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   108c2:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   108c4:	42b3      	cmp	r3, r6
   108c6:	bf2c      	ite	cs
   108c8:	18ed      	addcs	r5, r5, r3
   108ca:	19ad      	addcc	r5, r5, r6
		cc &= 0x00FFFFFF;
   108cc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   108d0:	4680      	mov	r8, r0
		instance->fp_cmp_set(cc);
   108d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   108d4:	4628      	mov	r0, r5
   108d6:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   108d8:	f006 fac6 	bl	16e68 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   108dc:	eba0 0008 	sub.w	r0, r0, r8
   108e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   108e4:	eba5 0508 	sub.w	r5, r5, r8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   108e8:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   108ea:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   108ee:	42a8      	cmp	r0, r5
   108f0:	f67f acf2 	bls.w	102d8 <ticker_job+0xfc>
		LL_ASSERT(i);
   108f4:	3f01      	subs	r7, #1
   108f6:	d1de      	bne.n	108b6 <ticker_job+0x6da>
   108f8:	4040      	eors	r0, r0
   108fa:	f380 8811 	msr	BASEPRI, r0
   108fe:	f04f 0004 	mov.w	r0, #4
   10902:	df02      	svc	2
	instance->job_guard = 0;
   10904:	2300      	movs	r3, #0
   10906:	7723      	strb	r3, [r4, #28]
   10908:	e4de      	b.n	102c8 <ticker_job+0xec>
	if (!pending) {
   1090a:	2b00      	cmp	r3, #0
   1090c:	d1fa      	bne.n	10904 <ticker_job+0x728>
		flag_compare_update = 1;
   1090e:	2301      	movs	r3, #1
   10910:	9304      	str	r3, [sp, #16]
   10912:	e4cb      	b.n	102ac <ticker_job+0xd0>
	while (id_insert !=
   10914:	45ba      	cmp	sl, r7
   10916:	f47f af39 	bne.w	1078c <ticker_job+0x5b0>
   1091a:	e68d      	b.n	10638 <ticker_job+0x45c>
}
   1091c:	b013      	add	sp, #76	; 0x4c
   1091e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10922:	bf00      	nop
   10924:	7f172b59 	.word	0x7f172b59
   10928:	ff172b5a 	.word	0xff172b5a

0001092c <ticker_init>:
{
   1092c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1092e:	9f05      	ldr	r7, [sp, #20]
   10930:	f89d 4018 	ldrb.w	r4, [sp, #24]
	switch (instance_index) {
   10934:	b118      	cbz	r0, 1093e <ticker_init+0x12>
   10936:	2801      	cmp	r0, #1
   10938:	d028      	beq.n	1098c <ticker_init+0x60>
		return TICKER_STATUS_FAILURE;
   1093a:	2001      	movs	r0, #1
}
   1093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   1093e:	4d1d      	ldr	r5, [pc, #116]	; (109b4 <ticker_init+0x88>)
   10940:	4e1d      	ldr	r6, [pc, #116]	; (109b8 <ticker_init+0x8c>)
   10942:	622e      	str	r6, [r5, #32]
		instance->fp_sched = ticker_instance0_sched;
   10944:	4e1d      	ldr	r6, [pc, #116]	; (109bc <ticker_init+0x90>)
   10946:	626e      	str	r6, [r5, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10948:	4e1d      	ldr	r6, [pc, #116]	; (109c0 <ticker_init+0x94>)
   1094a:	62ae      	str	r6, [r5, #40]	; 0x28
	instance->count_node = count_node;
   1094c:	4d19      	ldr	r5, [pc, #100]	; (109b4 <ticker_init+0x88>)
   1094e:	262c      	movs	r6, #44	; 0x2c
   10950:	fb06 fc00 	mul.w	ip, r6, r0
   10954:	eb05 0e0c 	add.w	lr, r5, ip
	instance->node = node;
   10958:	f845 200c 	str.w	r2, [r5, ip]
	instance->count_node = count_node;
   1095c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10960:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
   10962:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
   10966:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
   1096a:	3b01      	subs	r3, #1
   1096c:	b2db      	uxtb	r3, r3
   1096e:	2bff      	cmp	r3, #255	; 0xff
   10970:	d114      	bne.n	1099c <ticker_init+0x70>
	if (count_op) {
   10972:	2c00      	cmp	r4, #0
   10974:	d1e1      	bne.n	1093a <ticker_init+0xe>
	instance->ticker_id_head = TICKER_NULL;
   10976:	222c      	movs	r2, #44	; 0x2c
   10978:	fb02 5000 	mla	r0, r2, r0, r5
   1097c:	7603      	strb	r3, [r0, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1097e:	7643      	strb	r3, [r0, #25]
	instance->ticks_slot_previous = 0;
   10980:	8344      	strh	r4, [r0, #26]
	instance->ticks_current = 0;
   10982:	6144      	str	r4, [r0, #20]
	instance->ticks_elapsed_first = 0;
   10984:	7284      	strb	r4, [r0, #10]
	instance->ticks_elapsed_last = 0;
   10986:	72c4      	strb	r4, [r0, #11]
	return TICKER_STATUS_SUCCESS;
   10988:	4620      	mov	r0, r4
   1098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   1098c:	4d09      	ldr	r5, [pc, #36]	; (109b4 <ticker_init+0x88>)
   1098e:	4e0d      	ldr	r6, [pc, #52]	; (109c4 <ticker_init+0x98>)
   10990:	64ee      	str	r6, [r5, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
   10992:	4e0d      	ldr	r6, [pc, #52]	; (109c8 <ticker_init+0x9c>)
   10994:	652e      	str	r6, [r5, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10996:	4e0d      	ldr	r6, [pc, #52]	; (109cc <ticker_init+0xa0>)
   10998:	656e      	str	r6, [r5, #84]	; 0x54
		break;
   1099a:	e7d7      	b.n	1094c <ticker_init+0x20>
		users[count_user].user_op = user_op_;
   1099c:	b21a      	sxth	r2, r3
   1099e:	eb07 0ec2 	add.w	lr, r7, r2, lsl #3
   109a2:	f8ce 1004 	str.w	r1, [lr, #4]
		user_op_ += users[count_user].count_user_op;
   109a6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
		count_op -= users[count_user].count_user_op;
   109aa:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
   109ac:	fb02 1106 	mla	r1, r2, r6, r1
		count_op -= users[count_user].count_user_op;
   109b0:	b2e4      	uxtb	r4, r4
   109b2:	e7da      	b.n	1096a <ticker_init+0x3e>
   109b4:	20000ea8 	.word	0x20000ea8
   109b8:	0001011b 	.word	0x0001011b
   109bc:	00010091 	.word	0x00010091
   109c0:	00010027 	.word	0x00010027
   109c4:	0001010d 	.word	0x0001010d
   109c8:	00010031 	.word	0x00010031
   109cc:	0001001f 	.word	0x0001001f

000109d0 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   109d0:	4a04      	ldr	r2, [pc, #16]	; (109e4 <ticker_is_initialized+0x14>)
   109d2:	232c      	movs	r3, #44	; 0x2c
   109d4:	fb03 2000 	mla	r0, r3, r0, r2
   109d8:	7a00      	ldrb	r0, [r0, #8]
}
   109da:	3000      	adds	r0, #0
   109dc:	bf18      	it	ne
   109de:	2001      	movne	r0, #1
   109e0:	4770      	bx	lr
   109e2:	bf00      	nop
   109e4:	20000ea8 	.word	0x20000ea8

000109e8 <ticker_trigger>:
	if (_instance[instance_index].fp_sched) {
   109e8:	4a05      	ldr	r2, [pc, #20]	; (10a00 <ticker_trigger+0x18>)
   109ea:	232c      	movs	r3, #44	; 0x2c
   109ec:	fb03 2000 	mla	r0, r3, r0, r2
   109f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   109f2:	b11b      	cbz	r3, 109fc <ticker_trigger+0x14>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   109f4:	2201      	movs	r2, #1
   109f6:	4611      	mov	r1, r2
   109f8:	2000      	movs	r0, #0
   109fa:	4718      	bx	r3
   109fc:	4770      	bx	lr
   109fe:	bf00      	nop
   10a00:	20000ea8 	.word	0x20000ea8

00010a04 <ticker_start>:
{
   10a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
   10a06:	4d22      	ldr	r5, [pc, #136]	; (10a90 <ticker_start+0x8c>)
   10a08:	242c      	movs	r4, #44	; 0x2c
   10a0a:	fb04 5000 	mla	r0, r4, r0, r5
   10a0e:	fa0f fc81 	sxth.w	ip, r1
   10a12:	f8d0 e004 	ldr.w	lr, [r0, #4]
   10a16:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3
	if (last >= user->count_user_op) {
   10a1a:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
   10a1e:	78fe      	ldrb	r6, [r7, #3]
   10a20:	1c75      	adds	r5, r6, #1
   10a22:	b2ed      	uxtb	r5, r5
		last = 0;
   10a24:	45ae      	cmp	lr, r5
   10a26:	bf98      	it	ls
   10a28:	2500      	movls	r5, #0
	if (last == user->first) {
   10a2a:	f897 e001 	ldrb.w	lr, [r7, #1]
   10a2e:	45ae      	cmp	lr, r5
   10a30:	d02b      	beq.n	10a8a <ticker_start+0x86>
	user_op = &user->user_op[user->last];
   10a32:	f8d7 e004 	ldr.w	lr, [r7, #4]
   10a36:	fb16 f604 	smulbb	r6, r6, r4
   10a3a:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10a3e:	f04f 0c03 	mov.w	ip, #3
   10a42:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10a46:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10a48:	9b06      	ldr	r3, [sp, #24]
   10a4a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10a4c:	9b07      	ldr	r3, [sp, #28]
   10a4e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10a50:	9b08      	ldr	r3, [sp, #32]
   10a52:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10a54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10a58:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10a5a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10a5e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   10a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a62:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a66:	61e3      	str	r3, [r4, #28]
	user_op->fp_op_func = fp_op_func;
   10a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a6a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
   10a6c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   10a70:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   10a72:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
   10a74:	6226      	str	r6, [r4, #32]
	user->last = last;
   10a76:	70fd      	strb	r5, [r7, #3]
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10a78:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10a7a:	6a03      	ldr	r3, [r0, #32]
   10a7c:	4608      	mov	r0, r1
   10a7e:	4798      	blx	r3
   10a80:	2200      	movs	r2, #0
   10a82:	4631      	mov	r1, r6
   10a84:	47a8      	blx	r5
	return user_op->status;
   10a86:	6a20      	ldr	r0, [r4, #32]
   10a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10a8a:	2001      	movs	r0, #1
}
   10a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a8e:	bf00      	nop
   10a90:	20000ea8 	.word	0x20000ea8

00010a94 <ticker_update>:
{
   10a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
   10a96:	4d21      	ldr	r5, [pc, #132]	; (10b1c <ticker_update+0x88>)
   10a98:	242c      	movs	r4, #44	; 0x2c
   10a9a:	fb04 5000 	mla	r0, r4, r0, r5
   10a9e:	fa0f fc81 	sxth.w	ip, r1
   10aa2:	f8d0 e004 	ldr.w	lr, [r0, #4]
   10aa6:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3
	if (last >= user->count_user_op) {
   10aaa:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
   10aae:	78fe      	ldrb	r6, [r7, #3]
   10ab0:	1c75      	adds	r5, r6, #1
   10ab2:	b2ed      	uxtb	r5, r5
		last = 0;
   10ab4:	45ae      	cmp	lr, r5
   10ab6:	bf98      	it	ls
   10ab8:	2500      	movls	r5, #0
	if (last == user->first) {
   10aba:	f897 e001 	ldrb.w	lr, [r7, #1]
   10abe:	45ae      	cmp	lr, r5
   10ac0:	d02a      	beq.n	10b18 <ticker_update+0x84>
	user_op = &user->user_op[user->last];
   10ac2:	f8d7 e004 	ldr.w	lr, [r7, #4]
   10ac6:	fb16 f604 	smulbb	r6, r6, r4
   10aca:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10ace:	f04f 0c04 	mov.w	ip, #4
   10ad2:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10ad6:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10ad8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10adc:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10ade:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10ae2:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10ae4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10ae8:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10aea:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10aee:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10af0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10af4:	73a3      	strb	r3, [r4, #14]
	user_op->fp_op_func = fp_op_func;
   10af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10af8:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
   10afa:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   10afe:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   10b00:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
   10b02:	6226      	str	r6, [r4, #32]
	user->last = last;
   10b04:	70fd      	strb	r5, [r7, #3]
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10b08:	6a03      	ldr	r3, [r0, #32]
   10b0a:	4608      	mov	r0, r1
   10b0c:	4798      	blx	r3
   10b0e:	2200      	movs	r2, #0
   10b10:	4631      	mov	r1, r6
   10b12:	47a8      	blx	r5
	return user_op->status;
   10b14:	6a20      	ldr	r0, [r4, #32]
   10b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10b18:	2001      	movs	r0, #1
}
   10b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b1c:	20000ea8 	.word	0x20000ea8

00010b20 <ticker_stop>:
{
   10b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
   10b22:	4c19      	ldr	r4, [pc, #100]	; (10b88 <ticker_stop+0x68>)
   10b24:	252c      	movs	r5, #44	; 0x2c
   10b26:	fb05 4000 	mla	r0, r5, r0, r4
   10b2a:	fa0f fc81 	sxth.w	ip, r1
   10b2e:	f8d0 e004 	ldr.w	lr, [r0, #4]
   10b32:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3
	if (last >= user->count_user_op) {
   10b36:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
   10b3a:	78fe      	ldrb	r6, [r7, #3]
   10b3c:	1c74      	adds	r4, r6, #1
   10b3e:	b2e4      	uxtb	r4, r4
		last = 0;
   10b40:	45a6      	cmp	lr, r4
   10b42:	bf98      	it	ls
   10b44:	2400      	movls	r4, #0
	if (last == user->first) {
   10b46:	f897 e001 	ldrb.w	lr, [r7, #1]
   10b4a:	45a6      	cmp	lr, r4
   10b4c:	d019      	beq.n	10b82 <ticker_stop+0x62>
	user_op = &user->user_op[user->last];
   10b4e:	f8d7 e004 	ldr.w	lr, [r7, #4]
   10b52:	fb16 f605 	smulbb	r6, r6, r5
   10b56:	eb0e 0506 	add.w	r5, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10b5a:	f04f 0c05 	mov.w	ip, #5
   10b5e:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->fp_op_func = fp_op_func;
   10b62:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->status = TICKER_STATUS_BUSY;
   10b64:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10b66:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   10b68:	706a      	strb	r2, [r5, #1]
	user_op->op_context = op_context;
   10b6a:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
   10b6c:	622e      	str	r6, [r5, #32]
	user->last = last;
   10b6e:	70fc      	strb	r4, [r7, #3]
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10b72:	6a03      	ldr	r3, [r0, #32]
   10b74:	4608      	mov	r0, r1
   10b76:	4798      	blx	r3
   10b78:	2200      	movs	r2, #0
   10b7a:	4631      	mov	r1, r6
   10b7c:	47a0      	blx	r4
	return user_op->status;
   10b7e:	6a28      	ldr	r0, [r5, #32]
   10b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10b82:	2001      	movs	r0, #1
}
   10b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b86:	bf00      	nop
   10b88:	20000ea8 	.word	0x20000ea8

00010b8c <ticker_next_slot_get>:
{
   10b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->user[user_id];
   10b90:	4d1c      	ldr	r5, [pc, #112]	; (10c04 <ticker_next_slot_get+0x78>)
   10b92:	242c      	movs	r4, #44	; 0x2c
   10b94:	fb04 5000 	mla	r0, r4, r0, r5
   10b98:	fa0f fc81 	sxth.w	ip, r1
   10b9c:	f8d0 e004 	ldr.w	lr, [r0, #4]
   10ba0:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3
	if (last >= user->count_user_op) {
   10ba4:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
   10ba8:	78fe      	ldrb	r6, [r7, #3]
   10baa:	1c75      	adds	r5, r6, #1
   10bac:	b2ed      	uxtb	r5, r5
		last = 0;
   10bae:	45ae      	cmp	lr, r5
   10bb0:	bf98      	it	ls
   10bb2:	2500      	movls	r5, #0
	if (last == user->first) {
   10bb4:	f897 e001 	ldrb.w	lr, [r7, #1]
   10bb8:	45ae      	cmp	lr, r5
   10bba:	d020      	beq.n	10bfe <ticker_next_slot_get+0x72>
	user_op = &user->user_op[user->last];
   10bbc:	f8d7 e004 	ldr.w	lr, [r7, #4]
   10bc0:	fb16 f604 	smulbb	r6, r6, r4
   10bc4:	eb0e 0406 	add.w	r4, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10bc8:	f04f 0802 	mov.w	r8, #2
   10bcc:	f80e 8006 	strb.w	r8, [lr, r6]
	user_op->params.slot_get.ticks_current = ticks_current;
   10bd0:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10bd2:	9b06      	ldr	r3, [sp, #24]
   10bd4:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   10bd6:	9b07      	ldr	r3, [sp, #28]
   10bd8:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->id = TICKER_NULL;
   10bda:	26ff      	movs	r6, #255	; 0xff
	user_op->op_context = op_context;
   10bdc:	9b08      	ldr	r3, [sp, #32]
	user_op->params.slot_get.ticker_id = ticker_id;
   10bde:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
   10be0:	7066      	strb	r6, [r4, #1]
	user_op->op_context = op_context;
   10be2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
   10be4:	f8c4 8020 	str.w	r8, [r4, #32]
	user->last = last;
   10be8:	70fd      	strb	r5, [r7, #3]
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10bea:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10bec:	6a03      	ldr	r3, [r0, #32]
   10bee:	4608      	mov	r0, r1
   10bf0:	4798      	blx	r3
   10bf2:	2200      	movs	r2, #0
   10bf4:	4641      	mov	r1, r8
   10bf6:	47a8      	blx	r5
	return user_op->status;
   10bf8:	6a20      	ldr	r0, [r4, #32]
   10bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10bfe:	2001      	movs	r0, #1
}
   10c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c04:	20000ea8 	.word	0x20000ea8

00010c08 <ticker_job_idle_get>:
{
   10c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	user = &instance->user[user_id];
   10c0a:	4c19      	ldr	r4, [pc, #100]	; (10c70 <ticker_job_idle_get+0x68>)
   10c0c:	252c      	movs	r5, #44	; 0x2c
   10c0e:	fb05 4000 	mla	r0, r5, r0, r4
   10c12:	fa0f fc81 	sxth.w	ip, r1
   10c16:	f8d0 e004 	ldr.w	lr, [r0, #4]
   10c1a:	eb0e 07cc 	add.w	r7, lr, ip, lsl #3
	if (last >= user->count_user_op) {
   10c1e:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
   10c22:	78fe      	ldrb	r6, [r7, #3]
   10c24:	1c74      	adds	r4, r6, #1
   10c26:	b2e4      	uxtb	r4, r4
		last = 0;
   10c28:	45a6      	cmp	lr, r4
   10c2a:	bf98      	it	ls
   10c2c:	2400      	movls	r4, #0
	if (last == user->first) {
   10c2e:	f897 e001 	ldrb.w	lr, [r7, #1]
   10c32:	45a6      	cmp	lr, r4
   10c34:	d019      	beq.n	10c6a <ticker_job_idle_get+0x62>
	user_op = &user->user_op[user->last];
   10c36:	f8d7 e004 	ldr.w	lr, [r7, #4]
   10c3a:	fb16 f605 	smulbb	r6, r6, r5
   10c3e:	eb0e 0506 	add.w	r5, lr, r6
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10c42:	f04f 0c01 	mov.w	ip, #1
   10c46:	f80e c006 	strb.w	ip, [lr, r6]
	user_op->id = TICKER_NULL;
   10c4a:	26ff      	movs	r6, #255	; 0xff
   10c4c:	706e      	strb	r6, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10c4e:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
   10c50:	626a      	str	r2, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10c52:	62ab      	str	r3, [r5, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
   10c54:	622e      	str	r6, [r5, #32]
	user->last = last;
   10c56:	70fc      	strb	r4, [r7, #3]
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c58:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10c5a:	6a03      	ldr	r3, [r0, #32]
   10c5c:	4608      	mov	r0, r1
   10c5e:	4798      	blx	r3
   10c60:	2200      	movs	r2, #0
   10c62:	4631      	mov	r1, r6
   10c64:	47a0      	blx	r4
	return user_op->status;
   10c66:	6a28      	ldr	r0, [r5, #32]
   10c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10c6a:	2001      	movs	r0, #1
}
   10c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c6e:	bf00      	nop
   10c70:	20000ea8 	.word	0x20000ea8

00010c74 <ticker_job_sched>:
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c74:	4a07      	ldr	r2, [pc, #28]	; (10c94 <ticker_job_sched+0x20>)
{
   10c76:	b510      	push	{r4, lr}
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c78:	232c      	movs	r3, #44	; 0x2c
   10c7a:	fb03 2000 	mla	r0, r3, r0, r2
   10c7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10c80:	6a03      	ldr	r3, [r0, #32]
   10c82:	4608      	mov	r0, r1
   10c84:	4798      	blx	r3
   10c86:	4623      	mov	r3, r4
   10c88:	2200      	movs	r2, #0
   10c8a:	2102      	movs	r1, #2
}
   10c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c90:	4718      	bx	r3
   10c92:	bf00      	nop
   10c94:	20000ea8 	.word	0x20000ea8

00010c98 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   10c98:	f006 b8e6 	b.w	16e68 <cntr_cnt_get>

00010c9c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10c9c:	1a40      	subs	r0, r0, r1
}
   10c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10ca2:	4770      	bx	lr

00010ca4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   10ca4:	b508      	push	{r3, lr}
   10ca6:	4603      	mov	r3, r0
	if (addr_type > 1) {
   10ca8:	2b01      	cmp	r3, #1
{
   10caa:	4608      	mov	r0, r1
	if (addr_type > 1) {
   10cac:	d80e      	bhi.n	10ccc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   10cae:	b133      	cbz	r3, 10cbe <ll_addr_get+0x1a>
		if (bdaddr) {
   10cb0:	b119      	cbz	r1, 10cba <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   10cb2:	2206      	movs	r2, #6
   10cb4:	4906      	ldr	r1, [pc, #24]	; (10cd0 <ll_addr_get+0x2c>)
   10cb6:	f7ef fccf 	bl	658 <memcpy>
		}

		return rnd_addr;
   10cba:	4805      	ldr	r0, [pc, #20]	; (10cd0 <ll_addr_get+0x2c>)
   10cbc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
   10cbe:	b119      	cbz	r1, 10cc8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   10cc0:	2206      	movs	r2, #6
   10cc2:	4904      	ldr	r1, [pc, #16]	; (10cd4 <ll_addr_get+0x30>)
   10cc4:	f7ef fcc8 	bl	658 <memcpy>
	}

	return pub_addr;
   10cc8:	4802      	ldr	r0, [pc, #8]	; (10cd4 <ll_addr_get+0x30>)
}
   10cca:	bd08      	pop	{r3, pc}
		return NULL;
   10ccc:	2000      	movs	r0, #0
   10cce:	bd08      	pop	{r3, pc}
   10cd0:	20000f56 	.word	0x20000f56
   10cd4:	20000f50 	.word	0x20000f50

00010cd8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   10cd8:	b570      	push	{r4, r5, r6, lr}
   10cda:	4606      	mov	r6, r0
   10cdc:	460d      	mov	r5, r1
	if (radio_adv_is_enabled() || radio_scan_is_enabled()) {
   10cde:	f005 f82d 	bl	15d3c <radio_adv_is_enabled>
   10ce2:	b110      	cbz	r0, 10cea <ll_addr_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ce4:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   10ce6:	4620      	mov	r0, r4
   10ce8:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_is_enabled() || radio_scan_is_enabled()) {
   10cea:	f005 f83d 	bl	15d68 <radio_scan_is_enabled>
   10cee:	4604      	mov	r4, r0
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d1f7      	bne.n	10ce4 <ll_addr_set+0xc>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   10cf4:	2206      	movs	r2, #6
   10cf6:	4629      	mov	r1, r5
	if (addr_type) {
   10cf8:	b11e      	cbz	r6, 10d02 <ll_addr_set+0x2a>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   10cfa:	4803      	ldr	r0, [pc, #12]	; (10d08 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   10cfc:	f7ef fcac 	bl	658 <memcpy>
   10d00:	e7f1      	b.n	10ce6 <ll_addr_set+0xe>
   10d02:	4802      	ldr	r0, [pc, #8]	; (10d0c <ll_addr_set+0x34>)
   10d04:	e7fa      	b.n	10cfc <ll_addr_set+0x24>
   10d06:	bf00      	nop
   10d08:	20000f56 	.word	0x20000f56
   10d0c:	20000f50 	.word	0x20000f50

00010d10 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
   10d10:	2300      	movs	r3, #0
   10d12:	7003      	strb	r3, [r0, #0]
	*max = 0;
   10d14:	700b      	strb	r3, [r1, #0]
   10d16:	4770      	bx	lr

00010d18 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   10d18:	b570      	push	{r4, r5, r6, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   10d1a:	4d0c      	ldr	r5, [pc, #48]	; (10d4c <bt_rand+0x34>)
   10d1c:	4606      	mov	r6, r0
   10d1e:	460c      	mov	r4, r1
	while (len) {
   10d20:	b90c      	cbnz	r4, 10d26 <bt_rand+0xe>
			cpu_sleep();
		}
	}

	return 0;
}
   10d22:	2000      	movs	r0, #0
   10d24:	bd70      	pop	{r4, r5, r6, pc}
   10d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d2a:	4628      	mov	r0, r5
   10d2c:	f007 f904 	bl	17f38 <_impl_k_mutex_lock>
		len = rand_get(len, buf);
   10d30:	4620      	mov	r0, r4
   10d32:	4631      	mov	r1, r6
   10d34:	f006 f96e 	bl	17014 <rand_get>
   10d38:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   10d3a:	4628      	mov	r0, r5
   10d3c:	f007 f960 	bl	18000 <_impl_k_mutex_unlock>
		if (len) {
   10d40:	2c00      	cmp	r4, #0
   10d42:	d0ee      	beq.n	10d22 <bt_rand+0xa>
   10d44:	bf20      	wfe
  __ASM volatile ("sev");
   10d46:	bf40      	sev
  __ASM volatile ("wfe");
   10d48:	bf20      	wfe
   10d4a:	e7e9      	b.n	10d20 <bt_rand+0x8>
   10d4c:	20006b94 	.word	0x20006b94

00010d50 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   10d50:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   10d52:	f006 f9b9 	bl	170c8 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   10d56:	2000      	movs	r0, #0
   10d58:	bd08      	pop	{r3, pc}
	...

00010d5c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   10d5c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   10d5e:	4802      	ldr	r0, [pc, #8]	; (10d68 <_hci_driver_init+0xc>)
   10d60:	f7f3 ff9e 	bl	4ca0 <bt_hci_driver_register>

	return 0;
}
   10d64:	2000      	movs	r0, #0
   10d66:	bd08      	pop	{r3, pc}
   10d68:	0001a398 	.word	0x0001a398

00010d6c <hci_driver_send>:
{
   10d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
   10d6e:	8983      	ldrh	r3, [r0, #12]
{
   10d70:	4605      	mov	r5, r0
	if (!buf->len) {
   10d72:	b1fb      	cbz	r3, 10db4 <hci_driver_send+0x48>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
   10d74:	89c3      	ldrh	r3, [r0, #14]
   10d76:	4403      	add	r3, r0
   10d78:	3313      	adds	r3, #19
   10d7a:	f023 0303 	bic.w	r3, r3, #3
	switch (type) {
   10d7e:	781b      	ldrb	r3, [r3, #0]
   10d80:	b18b      	cbz	r3, 10da6 <hci_driver_send+0x3a>
   10d82:	2b02      	cmp	r3, #2
   10d84:	d116      	bne.n	10db4 <hci_driver_send+0x48>
	err = hci_acl_handle(buf, &evt);
   10d86:	a901      	add	r1, sp, #4
   10d88:	f000 fd50 	bl	1182c <hci_acl_handle>
   10d8c:	4604      	mov	r4, r0
	if (evt) {
   10d8e:	9801      	ldr	r0, [sp, #4]
   10d90:	b108      	cbz	r0, 10d96 <hci_driver_send+0x2a>
		bt_recv_prio(evt);
   10d92:	f7f3 fef7 	bl	4b84 <bt_recv_prio>
	if (!err) {
   10d96:	b91c      	cbnz	r4, 10da0 <hci_driver_send+0x34>
		net_buf_unref(buf);
   10d98:	4628      	mov	r0, r5
   10d9a:	f006 fed3 	bl	17b44 <net_buf_unref>
   10d9e:	2400      	movs	r4, #0
}
   10da0:	4620      	mov	r0, r4
   10da2:	b003      	add	sp, #12
   10da4:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
   10da6:	f000 f971 	bl	1108c <hci_cmd_handle>
	if (evt) {
   10daa:	2800      	cmp	r0, #0
   10dac:	d0f4      	beq.n	10d98 <hci_driver_send+0x2c>
		bt_recv_prio(evt);
   10dae:	f7f3 fee9 	bl	4b84 <bt_recv_prio>
   10db2:	e7f1      	b.n	10d98 <hci_driver_send+0x2c>
		return -EINVAL;
   10db4:	f06f 0415 	mvn.w	r4, #21
   10db8:	e7f2      	b.n	10da0 <hci_driver_send+0x34>
	...

00010dbc <recv_thread>:
{
   10dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
   10dbe:	4d23      	ldr	r5, [pc, #140]	; (10e4c <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
   10dc0:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
   10dc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10dc6:	4628      	mov	r0, r5
   10dc8:	f007 f9f3 	bl	181b2 <k_queue_get>
		if (node_rx && !buf) {
   10dcc:	4604      	mov	r4, r0
   10dce:	b368      	cbz	r0, 10e2c <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
   10dd0:	f000 ffb4 	bl	11d3c <hci_get_class>
	switch (class) {
   10dd4:	1e03      	subs	r3, r0, #0
   10dd6:	9401      	str	r4, [sp, #4]
   10dd8:	db03      	blt.n	10de2 <recv_thread+0x26>
   10dda:	2b02      	cmp	r3, #2
   10ddc:	dd07      	ble.n	10dee <recv_thread+0x32>
   10dde:	2b03      	cmp	r3, #3
   10de0:	d027      	beq.n	10e32 <recv_thread+0x76>
		LL_ASSERT(0);
   10de2:	4040      	eors	r0, r0
   10de4:	f380 8811 	msr	BASEPRI, r0
   10de8:	f04f 0004 	mov.w	r0, #4
   10dec:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10dee:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   10df0:	bf0e      	itee	eq
   10df2:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10df4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10df8:	2001      	movne	r0, #1
   10dfa:	f7f4 f92b 	bl	5054 <bt_buf_get_rx>
   10dfe:	4604      	mov	r4, r0
		if (buf) {
   10e00:	b118      	cbz	r0, 10e0a <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
   10e02:	4601      	mov	r1, r0
   10e04:	9801      	ldr	r0, [sp, #4]
   10e06:	f000 fd9b 	bl	11940 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
   10e0a:	9b01      	ldr	r3, [sp, #4]
   10e0c:	2100      	movs	r1, #0
   10e0e:	88d8      	ldrh	r0, [r3, #6]
   10e10:	f005 f968 	bl	160e4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
   10e14:	a802      	add	r0, sp, #8
   10e16:	f850 3d04 	ldr.w	r3, [r0, #-4]!
   10e1a:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10e1c:	f005 f902 	bl	16024 <ll_rx_mem_release>
		if (buf) {
   10e20:	b124      	cbz	r4, 10e2c <recv_thread+0x70>
			if (buf->len) {
   10e22:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   10e24:	4620      	mov	r0, r4
			if (buf->len) {
   10e26:	b173      	cbz	r3, 10e46 <recv_thread+0x8a>
				bt_recv(buf);
   10e28:	f7f3 fbbe 	bl	45a8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   10e2c:	f007 fb68 	bl	18500 <_impl_k_yield>
   10e30:	e7c7      	b.n	10dc2 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   10e32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e36:	f7f4 f90d 	bl	5054 <bt_buf_get_rx>
   10e3a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   10e3c:	4601      	mov	r1, r0
   10e3e:	9801      	ldr	r0, [sp, #4]
   10e40:	f000 fd52 	bl	118e8 <hci_acl_encode>
   10e44:	e7e1      	b.n	10e0a <recv_thread+0x4e>
				net_buf_unref(buf);
   10e46:	f006 fe7d 	bl	17b44 <net_buf_unref>
   10e4a:	e7ef      	b.n	10e2c <recv_thread+0x70>
   10e4c:	20006bb8 	.word	0x20006bb8

00010e50 <prio_recv_thread>:
{
   10e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10e52:	4d14      	ldr	r5, [pc, #80]	; (10ea4 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
   10e54:	4e14      	ldr	r6, [pc, #80]	; (10ea8 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
   10e56:	f10d 0102 	add.w	r1, sp, #2
   10e5a:	a801      	add	r0, sp, #4
   10e5c:	f005 f8aa 	bl	15fb4 <ll_rx_get>
   10e60:	4604      	mov	r4, r0
   10e62:	b940      	cbnz	r0, 10e76 <prio_recv_thread+0x26>
		if (node_rx) {
   10e64:	9b01      	ldr	r3, [sp, #4]
   10e66:	b1bb      	cbz	r3, 10e98 <prio_recv_thread+0x48>
			ll_rx_dequeue();
   10e68:	f005 fc50 	bl	1670c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   10e6c:	9901      	ldr	r1, [sp, #4]
   10e6e:	4630      	mov	r0, r6
   10e70:	f007 f97b 	bl	1816a <k_queue_append>
   10e74:	e7ef      	b.n	10e56 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e7a:	2001      	movs	r0, #1
   10e7c:	f7f4 f8ea 	bl	5054 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10e80:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   10e82:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10e84:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   10e88:	f000 ff44 	bl	11d14 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   10e8c:	4638      	mov	r0, r7
   10e8e:	f7f3 fe79 	bl	4b84 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   10e92:	f007 fb35 	bl	18500 <_impl_k_yield>
   10e96:	e7de      	b.n	10e56 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   10e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e9c:	4628      	mov	r0, r5
   10e9e:	f007 fc3d 	bl	1871c <_impl_k_sem_take>
   10ea2:	e7d8      	b.n	10e56 <prio_recv_thread+0x6>
   10ea4:	20006b7c 	.word	0x20006b7c
   10ea8:	20006bb8 	.word	0x20006bb8

00010eac <hci_driver_open>:
{
   10eac:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
   10eae:	4814      	ldr	r0, [pc, #80]	; (10f00 <hci_driver_open+0x54>)
{
   10eb0:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
   10eb2:	f005 fccf 	bl	16854 <ll_init>
	if (err) {
   10eb6:	4604      	mov	r4, r0
   10eb8:	b9f8      	cbnz	r0, 10efa <hci_driver_open+0x4e>
	hci_init(NULL);
   10eba:	f000 ff57 	bl	11d6c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   10ebe:	f06f 0309 	mvn.w	r3, #9
   10ec2:	9303      	str	r3, [sp, #12]
   10ec4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   10ec8:	4b0e      	ldr	r3, [pc, #56]	; (10f04 <hci_driver_open+0x58>)
   10eca:	490f      	ldr	r1, [pc, #60]	; (10f08 <hci_driver_open+0x5c>)
   10ecc:	9405      	str	r4, [sp, #20]
   10ece:	9404      	str	r4, [sp, #16]
   10ed0:	9402      	str	r4, [sp, #8]
   10ed2:	9401      	str	r4, [sp, #4]
   10ed4:	9400      	str	r4, [sp, #0]
   10ed6:	480d      	ldr	r0, [pc, #52]	; (10f0c <hci_driver_open+0x60>)
   10ed8:	f007 fdfc 	bl	18ad4 <_impl_k_thread_create>
   10edc:	f06f 0307 	mvn.w	r3, #7
   10ee0:	9303      	str	r3, [sp, #12]
   10ee2:	9405      	str	r4, [sp, #20]
   10ee4:	9404      	str	r4, [sp, #16]
   10ee6:	9402      	str	r4, [sp, #8]
   10ee8:	9401      	str	r4, [sp, #4]
   10eea:	9400      	str	r4, [sp, #0]
   10eec:	4b08      	ldr	r3, [pc, #32]	; (10f10 <hci_driver_open+0x64>)
   10eee:	4909      	ldr	r1, [pc, #36]	; (10f14 <hci_driver_open+0x68>)
   10ef0:	4809      	ldr	r0, [pc, #36]	; (10f18 <hci_driver_open+0x6c>)
   10ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10ef6:	f007 fded 	bl	18ad4 <_impl_k_thread_create>
}
   10efa:	4620      	mov	r0, r4
   10efc:	b006      	add	sp, #24
   10efe:	bd10      	pop	{r4, pc}
   10f00:	20006b7c 	.word	0x20006b7c
   10f04:	00010e51 	.word	0x00010e51
   10f08:	20004048 	.word	0x20004048
   10f0c:	20001d58 	.word	0x20001d58
   10f10:	00010dbd 	.word	0x00010dbd
   10f14:	20004208 	.word	0x20004208
   10f18:	20001cf0 	.word	0x20001cf0

00010f1c <sys_put_le32>:
	dst[1] = val >> 8;
   10f1c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   10f20:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   10f22:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   10f24:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   10f26:	0a00      	lsrs	r0, r0, #8
   10f28:	704b      	strb	r3, [r1, #1]
   10f2a:	70c8      	strb	r0, [r1, #3]
   10f2c:	4770      	bx	lr

00010f2e <evt_create>:
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
   10f2e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
   10f30:	3008      	adds	r0, #8
{
   10f32:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   10f34:	2102      	movs	r1, #2
{
   10f36:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   10f38:	f006 fe24 	bl	17b84 <net_buf_simple_add>
	hdr->evt = evt;
   10f3c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   10f3e:	7044      	strb	r4, [r0, #1]
   10f40:	bd38      	pop	{r3, r4, r5, pc}
	...

00010f44 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
   10f44:	b538      	push	{r3, r4, r5, lr}
   10f46:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
   10f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f4c:	f7f4 f894 	bl	5078 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   10f50:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
   10f52:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   10f54:	210f      	movs	r1, #15
   10f56:	f7ff ffea 	bl	10f2e <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   10f5a:	2104      	movs	r1, #4
   10f5c:	f104 0008 	add.w	r0, r4, #8
   10f60:	f006 fe10 	bl	17b84 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
   10f64:	2301      	movs	r3, #1
   10f66:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
   10f68:	4b02      	ldr	r3, [pc, #8]	; (10f74 <cmd_status+0x30>)
	cs->status = status;
   10f6a:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
   10f6c:	881b      	ldrh	r3, [r3, #0]
   10f6e:	8043      	strh	r3, [r0, #2]

	return buf;
}
   10f70:	4620      	mov	r0, r4
   10f72:	bd38      	pop	{r3, r4, r5, pc}
   10f74:	20000f5c 	.word	0x20000f5c

00010f78 <cmd_complete>:
{
   10f78:	b538      	push	{r3, r4, r5, lr}
   10f7a:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   10f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   10f80:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   10f82:	f7f4 f879 	bl	5078 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   10f86:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
   10f88:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   10f8a:	b2d2      	uxtb	r2, r2
   10f8c:	210e      	movs	r1, #14
   10f8e:	f7ff ffce 	bl	10f2e <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
   10f92:	6820      	ldr	r0, [r4, #0]
   10f94:	2103      	movs	r1, #3
   10f96:	3008      	adds	r0, #8
   10f98:	f006 fdf4 	bl	17b84 <net_buf_simple_add>
	cc->ncmd = 1;
   10f9c:	2301      	movs	r3, #1
   10f9e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
   10fa0:	4b05      	ldr	r3, [pc, #20]	; (10fb8 <cmd_complete+0x40>)
   10fa2:	881b      	ldrh	r3, [r3, #0]
   10fa4:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
   10fa8:	6820      	ldr	r0, [r4, #0]
   10faa:	4629      	mov	r1, r5
   10fac:	3008      	adds	r0, #8
}
   10fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   10fb2:	f006 bde7 	b.w	17b84 <net_buf_simple_add>
   10fb6:	bf00      	nop
   10fb8:	20000f5c 	.word	0x20000f5c

00010fbc <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
   10fbc:	b570      	push	{r4, r5, r6, lr}
   10fbe:	4604      	mov	r4, r0
   10fc0:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   10fc2:	3201      	adds	r2, #1
{
   10fc4:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
   10fc6:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   10fc8:	b2d2      	uxtb	r2, r2
   10fca:	213e      	movs	r1, #62	; 0x3e
   10fcc:	f7ff ffaf 	bl	10f2e <evt_create>
	me = net_buf_add(buf, sizeof(*me));
   10fd0:	2101      	movs	r1, #1
   10fd2:	4620      	mov	r0, r4
   10fd4:	f006 fdd6 	bl	17b84 <net_buf_simple_add>
	me->subevent = subevt;
   10fd8:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   10fda:	4629      	mov	r1, r5
   10fdc:	4620      	mov	r0, r4
}
   10fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   10fe2:	f006 bdcf 	b.w	17b84 <net_buf_simple_add>
	...

00010fe8 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10fe8:	4b0e      	ldr	r3, [pc, #56]	; (11024 <encrypt_change+0x3c>)
{
   10fea:	b570      	push	{r4, r5, r6, lr}
   10fec:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10fee:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ff2:	2300      	movs	r3, #0
   10ff4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   10ff8:	4313      	orrs	r3, r2
{
   10ffa:	4604      	mov	r4, r0
   10ffc:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   10ffe:	d010      	beq.n	11022 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
   11000:	2204      	movs	r2, #4
   11002:	2108      	movs	r1, #8
   11004:	4628      	mov	r0, r5
   11006:	f7ff ff92 	bl	10f2e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   1100a:	2104      	movs	r1, #4
   1100c:	f105 0008 	add.w	r0, r5, #8
   11010:	f006 fdb8 	bl	17b84 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   11014:	fab4 f384 	clz	r3, r4
   11018:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1101a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1101c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   11020:	70c3      	strb	r3, [r0, #3]
   11022:	bd70      	pop	{r4, r5, r6, pc}
   11024:	200069d8 	.word	0x200069d8

00011028 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
   11028:	b570      	push	{r4, r5, r6, lr}
   1102a:	4604      	mov	r4, r0
   1102c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1102e:	4b13      	ldr	r3, [pc, #76]	; (1107c <le_remote_feat_complete+0x54>)
{
   11030:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11032:	e9d3 2300 	ldrd	r2, r3, [r3]
   11036:	2200      	movs	r2, #0
   11038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   1103c:	4313      	orrs	r3, r2
{
   1103e:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11040:	d01b      	beq.n	1107a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11042:	4b0f      	ldr	r3, [pc, #60]	; (11080 <le_remote_feat_complete+0x58>)
   11044:	e9d3 2300 	ldrd	r2, r3, [r3]
   11048:	2300      	movs	r3, #0
   1104a:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1104e:	4313      	orrs	r3, r2
   11050:	d013      	beq.n	1107a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   11052:	220b      	movs	r2, #11
   11054:	2104      	movs	r1, #4
   11056:	f7ff ffb1 	bl	10fbc <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   1105a:	2208      	movs	r2, #8
	sep->status = status;
   1105c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1105e:	f8a0 6001 	strh.w	r6, [r0, #1]
   11062:	3003      	adds	r0, #3
	if (!status) {
   11064:	b924      	cbnz	r4, 11070 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
   11066:	1d29      	adds	r1, r5, #4
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
   1106c:	f7ef baf4 	b.w	658 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
   11070:	2100      	movs	r1, #0
}
   11072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
   11076:	f7ef bb1b 	b.w	6b0 <memset>
   1107a:	bd70      	pop	{r4, r5, r6, pc}
   1107c:	200069d8 	.word	0x200069d8
   11080:	200069e0 	.word	0x200069e0

00011084 <sys_get_le64>:
{
   11084:	4603      	mov	r3, r0
}
   11086:	6800      	ldr	r0, [r0, #0]
   11088:	6859      	ldr	r1, [r3, #4]
   1108a:	4770      	bx	lr

0001108c <hci_cmd_handle>:
{
   1108c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1108e:	8981      	ldrh	r1, [r0, #12]
{
   11090:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   11092:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   11094:	2902      	cmp	r1, #2
{
   11096:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   11098:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   1109a:	d802      	bhi.n	110a2 <hci_cmd_handle+0x16>
		return NULL;
   1109c:	2000      	movs	r0, #0
}
   1109e:	b011      	add	sp, #68	; 0x44
   110a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
   110a2:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   110a4:	4e8f      	ldr	r6, [pc, #572]	; (112e4 <hci_cmd_handle+0x258>)
   110a6:	781a      	ldrb	r2, [r3, #0]
   110a8:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
   110aa:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   110ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
   110b0:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
   110b2:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
   110b4:	d8f2      	bhi.n	1109c <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
   110b6:	2103      	movs	r1, #3
   110b8:	f104 0008 	add.w	r0, r4, #8
   110bc:	f006 fdcd 	bl	17c5a <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
   110c0:	8833      	ldrh	r3, [r6, #0]
   110c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   110c6:	0a9b      	lsrs	r3, r3, #10
   110c8:	2b04      	cmp	r3, #4
   110ca:	f000 8082 	beq.w	111d2 <hci_cmd_handle+0x146>
   110ce:	d809      	bhi.n	110e4 <hci_cmd_handle+0x58>
   110d0:	2b01      	cmp	r3, #1
   110d2:	d027      	beq.n	11124 <hci_cmd_handle+0x98>
   110d4:	2b03      	cmp	r3, #3
   110d6:	d03c      	beq.n	11152 <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   110d8:	2101      	movs	r1, #1
   110da:	a805      	add	r0, sp, #20
   110dc:	f7ff ff4c 	bl	10f78 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   110e0:	2301      	movs	r3, #1
   110e2:	e245      	b.n	11570 <hci_cmd_handle+0x4e4>
	switch (BT_OGF(_opcode)) {
   110e4:	2b08      	cmp	r3, #8
   110e6:	f000 8103 	beq.w	112f0 <hci_cmd_handle+0x264>
   110ea:	2b3f      	cmp	r3, #63	; 0x3f
   110ec:	d1f4      	bne.n	110d8 <hci_cmd_handle+0x4c>
	switch (ocf) {
   110ee:	3a01      	subs	r2, #1
   110f0:	2a09      	cmp	r2, #9
   110f2:	d8f1      	bhi.n	110d8 <hci_cmd_handle+0x4c>
   110f4:	a301      	add	r3, pc, #4	; (adr r3, 110fc <hci_cmd_handle+0x70>)
   110f6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   110fa:	bf00      	nop
   110fc:	00011645 	.word	0x00011645
   11100:	00011673 	.word	0x00011673
   11104:	0001169b 	.word	0x0001169b
   11108:	000110d9 	.word	0x000110d9
   1110c:	000110d9 	.word	0x000110d9
   11110:	000116df 	.word	0x000116df
   11114:	000110d9 	.word	0x000110d9
   11118:	000116b1 	.word	0x000116b1
   1111c:	000116f5 	.word	0x000116f5
   11120:	00011761 	.word	0x00011761
	switch (ocf) {
   11124:	2a06      	cmp	r2, #6
   11126:	d006      	beq.n	11136 <hci_cmd_handle+0xaa>
   11128:	2a1d      	cmp	r2, #29
   1112a:	d1d5      	bne.n	110d8 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
   1112c:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   1112e:	8818      	ldrh	r0, [r3, #0]
   11130:	f004 ff0d 	bl	15f4e <ll_version_ind_send>
   11134:	e004      	b.n	11140 <hci_cmd_handle+0xb4>
   11136:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   11138:	7899      	ldrb	r1, [r3, #2]
   1113a:	8818      	ldrh	r0, [r3, #0]
   1113c:	f004 ff1b 	bl	15f76 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
   11140:	2800      	cmp	r0, #0
   11142:	bf14      	ite	ne
   11144:	200c      	movne	r0, #12
   11146:	2000      	moveq	r0, #0
   11148:	f7ff fefc 	bl	10f44 <cmd_status>
   1114c:	9005      	str	r0, [sp, #20]
	return evt;
   1114e:	9805      	ldr	r0, [sp, #20]
   11150:	e7a5      	b.n	1109e <hci_cmd_handle+0x12>
	switch (ocf) {
   11152:	2a03      	cmp	r2, #3
   11154:	d018      	beq.n	11188 <hci_cmd_handle+0xfc>
   11156:	d80d      	bhi.n	11174 <hci_cmd_handle+0xe8>
   11158:	2a01      	cmp	r2, #1
   1115a:	d1bd      	bne.n	110d8 <hci_cmd_handle+0x4c>
	event_mask = sys_get_le64(cmd->events);
   1115c:	68a0      	ldr	r0, [r4, #8]
   1115e:	f7ff ff91 	bl	11084 <sys_get_le64>
   11162:	4b61      	ldr	r3, [pc, #388]	; (112e8 <hci_cmd_handle+0x25c>)
   11164:	e9c3 0100 	strd	r0, r1, [r3]
		ccst = cmd_complete(evt, sizeof(*ccst));
   11168:	2101      	movs	r1, #1
   1116a:	a805      	add	r0, sp, #20
   1116c:	f7ff ff04 	bl	10f78 <cmd_complete>
		ccst->status = 0x00;
   11170:	7005      	strb	r5, [r0, #0]
   11172:	e7ec      	b.n	1114e <hci_cmd_handle+0xc2>
	switch (ocf) {
   11174:	2a2d      	cmp	r2, #45	; 0x2d
   11176:	d016      	beq.n	111a6 <hci_cmd_handle+0x11a>
   11178:	2a63      	cmp	r2, #99	; 0x63
   1117a:	d1ad      	bne.n	110d8 <hci_cmd_handle+0x4c>
	ccst = cmd_complete(evt, sizeof(*ccst));
   1117c:	2101      	movs	r1, #1
   1117e:	a805      	add	r0, sp, #20
   11180:	f7ff fefa 	bl	10f78 <cmd_complete>
	ccst->status = 0x00;
   11184:	2300      	movs	r3, #0
   11186:	e1f3      	b.n	11570 <hci_cmd_handle+0x4e4>
	event_mask = DEFAULT_EVENT_MASK;
   11188:	4b57      	ldr	r3, [pc, #348]	; (112e8 <hci_cmd_handle+0x25c>)
   1118a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1118e:	f641 71ff 	movw	r1, #8191	; 0x1fff
   11192:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11196:	4b55      	ldr	r3, [pc, #340]	; (112ec <hci_cmd_handle+0x260>)
   11198:	201f      	movs	r0, #31
   1119a:	2100      	movs	r1, #0
   1119c:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   111a0:	f004 fd70 	bl	15c84 <ll_reset>
   111a4:	e7e0      	b.n	11168 <hci_cmd_handle+0xdc>
   111a6:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   111a8:	2104      	movs	r1, #4
   111aa:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   111ac:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   111ae:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
   111b0:	f7ff fee2 	bl	10f78 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   111b4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   111b6:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
   111b8:	1cc2      	adds	r2, r0, #3
   111ba:	4639      	mov	r1, r7
   111bc:	4630      	mov	r0, r6
   111be:	f004 feee 	bl	15f9e <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   111c2:	2800      	cmp	r0, #0
   111c4:	bf0c      	ite	eq
   111c6:	2300      	moveq	r3, #0
   111c8:	2302      	movne	r3, #2
   111ca:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   111cc:	f8a4 5001 	strh.w	r5, [r4, #1]
   111d0:	e7bd      	b.n	1114e <hci_cmd_handle+0xc2>
	switch (ocf) {
   111d2:	3a01      	subs	r2, #1
   111d4:	2a08      	cmp	r2, #8
   111d6:	f63f af7f 	bhi.w	110d8 <hci_cmd_handle+0x4c>
   111da:	a301      	add	r3, pc, #4	; (adr r3, 111e0 <hci_cmd_handle+0x154>)
   111dc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   111e0:	00011205 	.word	0x00011205
   111e4:	00011229 	.word	0x00011229
   111e8:	000112b1 	.word	0x000112b1
   111ec:	000110d9 	.word	0x000110d9
   111f0:	000110d9 	.word	0x000110d9
   111f4:	000110d9 	.word	0x000110d9
   111f8:	000110d9 	.word	0x000110d9
   111fc:	000110d9 	.word	0x000110d9
   11200:	000112cd 	.word	0x000112cd
	rp = cmd_complete(evt, sizeof(*rp));
   11204:	2109      	movs	r1, #9
   11206:	a805      	add	r0, sp, #20
   11208:	f7ff feb6 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   1120c:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
   1120e:	2209      	movs	r2, #9
	rp->status = 0x00;
   11210:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   11212:	7083      	strb	r3, [r0, #2]
   11214:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   11216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
   1121a:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
   1121c:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
   1121e:	7143      	strb	r3, [r0, #5]
   11220:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
   11222:	71c3      	strb	r3, [r0, #7]
   11224:	7203      	strb	r3, [r0, #8]
   11226:	e792      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   11228:	2141      	movs	r1, #65	; 0x41
   1122a:	a805      	add	r0, sp, #20
   1122c:	f7ff fea4 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11230:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   11232:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
   11234:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   11236:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
   1123a:	f7ef fa39 	bl	6b0 <memset>
	rp->commands[2] |= BIT(7);
   1123e:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[28] |= BIT(3);
   11240:	7f62      	ldrb	r2, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
   11242:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11244:	7ea0      	ldrb	r0, [r4, #26]
	rp->commands[2] |= BIT(7);
   11246:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1124a:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
   1124c:	79a3      	ldrb	r3, [r4, #6]
   1124e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11252:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   11254:	7ae3      	ldrb	r3, [r4, #11]
   11256:	f043 0304 	orr.w	r3, r3, #4
   1125a:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1125c:	7be3      	ldrb	r3, [r4, #15]
   1125e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   11262:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   11264:	7c23      	ldrb	r3, [r4, #16]
   11266:	f043 0302 	orr.w	r3, r3, #2
   1126a:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1126c:	7de3      	ldrb	r3, [r4, #23]
   1126e:	f043 0304 	orr.w	r3, r3, #4
   11272:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   11274:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   11276:	f063 0308 	orn	r3, r3, #8
   1127a:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   1127c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[28] |= BIT(1) | BIT(2);
   11280:	f042 020e 	orr.w	r2, r2, #14
	rp->commands[33] |= BIT(4) | BIT(5);
   11284:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
   11288:	7762      	strb	r2, [r4, #29]
	rp->commands[33] |= BIT(4) | BIT(5);
   1128a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1128e:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   11290:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11294:	f060 0008 	orn	r0, r0, #8
	rp->commands[26] |= BIT(2) | BIT(3);
   11298:	f061 0130 	orn	r1, r1, #48	; 0x30
	rp->commands[0] |= BIT(5);
   1129c:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   112a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   112a4:	76a0      	strb	r0, [r4, #26]
	rp->commands[26] |= BIT(2) | BIT(3);
   112a6:	76e1      	strb	r1, [r4, #27]
	rp->commands[0] |= BIT(5);
   112a8:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   112aa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   112ae:	e74e      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   112b0:	2109      	movs	r1, #9
   112b2:	a805      	add	r0, sp, #20
   112b4:	f7ff fe60 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   112b8:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   112ba:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
   112bc:	2208      	movs	r2, #8
	rp->status = 0x00;
   112be:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
   112c2:	f7ef f9f5 	bl	6b0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   112c6:	2360      	movs	r3, #96	; 0x60
   112c8:	7163      	strb	r3, [r4, #5]
   112ca:	e740      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   112cc:	2107      	movs	r1, #7
   112ce:	a805      	add	r0, sp, #20
   112d0:	f7ff fe52 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   112d4:	4601      	mov	r1, r0
   112d6:	2300      	movs	r3, #0
   112d8:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   112dc:	4618      	mov	r0, r3
   112de:	f7ff fce1 	bl	10ca4 <ll_addr_get>
   112e2:	e734      	b.n	1114e <hci_cmd_handle+0xc2>
   112e4:	20000f5c 	.word	0x20000f5c
   112e8:	200069d8 	.word	0x200069d8
   112ec:	200069e0 	.word	0x200069e0
	switch (ocf) {
   112f0:	3a01      	subs	r2, #1
   112f2:	2a4a      	cmp	r2, #74	; 0x4a
   112f4:	f63f aef0 	bhi.w	110d8 <hci_cmd_handle+0x4c>
   112f8:	a301      	add	r3, pc, #4	; (adr r3, 11300 <hci_cmd_handle+0x274>)
   112fa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   112fe:	bf00      	nop
   11300:	0001142d 	.word	0x0001142d
   11304:	0001143b 	.word	0x0001143b
   11308:	00011453 	.word	0x00011453
   1130c:	000110d9 	.word	0x000110d9
   11310:	00011475 	.word	0x00011475
   11314:	00011523 	.word	0x00011523
   11318:	00011751 	.word	0x00011751
   1131c:	0001153f 	.word	0x0001153f
   11320:	0001154b 	.word	0x0001154b
   11324:	00011557 	.word	0x00011557
   11328:	00011575 	.word	0x00011575
   1132c:	0001158d 	.word	0x0001158d
   11330:	000110d9 	.word	0x000110d9
   11334:	000110d9 	.word	0x000110d9
   11338:	0001148b 	.word	0x0001148b
   1133c:	000114a1 	.word	0x000114a1
   11340:	000114b3 	.word	0x000114b3
   11344:	000114bb 	.word	0x000114bb
   11348:	000115ed 	.word	0x000115ed
   1134c:	000110d9 	.word	0x000110d9
   11350:	000115c9 	.word	0x000115c9
   11354:	000115e3 	.word	0x000115e3
   11358:	000114c3 	.word	0x000114c3
   1135c:	000114e9 	.word	0x000114e9
   11360:	000110d9 	.word	0x000110d9
   11364:	00011597 	.word	0x00011597
   11368:	000115bf 	.word	0x000115bf
   1136c:	000114ff 	.word	0x000114ff
   11370:	000110d9 	.word	0x000110d9
   11374:	000110d9 	.word	0x000110d9
   11378:	000110d9 	.word	0x000110d9
   1137c:	00011605 	.word	0x00011605
   11380:	0001161f 	.word	0x0001161f
   11384:	000110d9 	.word	0x000110d9
   11388:	000110d9 	.word	0x000110d9
   1138c:	000110d9 	.word	0x000110d9
   11390:	000110d9 	.word	0x000110d9
   11394:	000110d9 	.word	0x000110d9
   11398:	000110d9 	.word	0x000110d9
   1139c:	000110d9 	.word	0x000110d9
   113a0:	000110d9 	.word	0x000110d9
   113a4:	000110d9 	.word	0x000110d9
   113a8:	000110d9 	.word	0x000110d9
   113ac:	000110d9 	.word	0x000110d9
   113b0:	000110d9 	.word	0x000110d9
   113b4:	000110d9 	.word	0x000110d9
   113b8:	000110d9 	.word	0x000110d9
   113bc:	000110d9 	.word	0x000110d9
   113c0:	000110d9 	.word	0x000110d9
   113c4:	000110d9 	.word	0x000110d9
   113c8:	000110d9 	.word	0x000110d9
   113cc:	000110d9 	.word	0x000110d9
   113d0:	000110d9 	.word	0x000110d9
   113d4:	000110d9 	.word	0x000110d9
   113d8:	000110d9 	.word	0x000110d9
   113dc:	000110d9 	.word	0x000110d9
   113e0:	000110d9 	.word	0x000110d9
   113e4:	000110d9 	.word	0x000110d9
   113e8:	000110d9 	.word	0x000110d9
   113ec:	000110d9 	.word	0x000110d9
   113f0:	000110d9 	.word	0x000110d9
   113f4:	000110d9 	.word	0x000110d9
   113f8:	000110d9 	.word	0x000110d9
   113fc:	000110d9 	.word	0x000110d9
   11400:	000110d9 	.word	0x000110d9
   11404:	000110d9 	.word	0x000110d9
   11408:	000110d9 	.word	0x000110d9
   1140c:	000110d9 	.word	0x000110d9
   11410:	000110d9 	.word	0x000110d9
   11414:	000110d9 	.word	0x000110d9
   11418:	000110d9 	.word	0x000110d9
   1141c:	000110d9 	.word	0x000110d9
   11420:	000110d9 	.word	0x000110d9
   11424:	000110d9 	.word	0x000110d9
   11428:	0001162d 	.word	0x0001162d
	le_event_mask = sys_get_le64(cmd->events);
   1142c:	68a0      	ldr	r0, [r4, #8]
   1142e:	f7ff fe29 	bl	11084 <sys_get_le64>
   11432:	4bad      	ldr	r3, [pc, #692]	; (116e8 <hci_cmd_handle+0x65c>)
   11434:	e9c3 0100 	strd	r0, r1, [r3]
   11438:	e6a0      	b.n	1117c <hci_cmd_handle+0xf0>
	rp = cmd_complete(evt, sizeof(*rp));
   1143a:	2104      	movs	r1, #4
   1143c:	a805      	add	r0, sp, #20
   1143e:	f7ff fd9b 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11442:	2300      	movs	r3, #0
   11444:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   11446:	221b      	movs	r2, #27
   11448:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1144a:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
   1144c:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
   1144e:	70c3      	strb	r3, [r0, #3]
   11450:	e67d      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   11452:	2109      	movs	r1, #9
   11454:	a805      	add	r0, sp, #20
   11456:	f7ff fd8f 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   1145a:	2500      	movs	r5, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1145c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
   1145e:	2208      	movs	r2, #8
	rp->status = 0x00;
   11460:	f800 5b01 	strb.w	r5, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
   11464:	4629      	mov	r1, r5
   11466:	f7ef f923 	bl	6b0 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
   1146a:	238f      	movs	r3, #143	; 0x8f
   1146c:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
   1146e:	70a5      	strb	r5, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
   11470:	70e5      	strb	r5, [r4, #3]
   11472:	e66c      	b.n	1114e <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   11474:	68a1      	ldr	r1, [r4, #8]
   11476:	2001      	movs	r0, #1
   11478:	f7ff fc2e 	bl	10cd8 <ll_addr_set>
	status = ll_adv_params_set(min_interval, cmd->type,
   1147c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   1147e:	2101      	movs	r1, #1
   11480:	a805      	add	r0, sp, #20
   11482:	f7ff fd79 	bl	10f78 <cmd_complete>
	status = ll_adv_params_set(min_interval, cmd->type,
   11486:	7004      	strb	r4, [r0, #0]
   11488:	e661      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   1148a:	2102      	movs	r1, #2
   1148c:	a805      	add	r0, sp, #20
   1148e:	f7ff fd73 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11492:	2300      	movs	r3, #0
   11494:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   11496:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   11498:	f005 fc10 	bl	16cbc <ll_wl_size_get>
   1149c:	7060      	strb	r0, [r4, #1]
   1149e:	e656      	b.n	1114e <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
   114a0:	2101      	movs	r1, #1
   114a2:	a805      	add	r0, sp, #20
   114a4:	f7ff fd68 	bl	10f78 <cmd_complete>
   114a8:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   114aa:	f005 fc09 	bl	16cc0 <ll_wl_clear>
   114ae:	7020      	strb	r0, [r4, #0]
   114b0:	e64d      	b.n	1114e <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
   114b2:	68a0      	ldr	r0, [r4, #8]
   114b4:	f005 fc1a 	bl	16cec <ll_wl_add>
   114b8:	e7e0      	b.n	1147c <hci_cmd_handle+0x3f0>
	status = ll_wl_remove(&cmd->addr);
   114ba:	68a0      	ldr	r0, [r4, #8]
   114bc:	f005 fc4e 	bl	16d5c <ll_wl_remove>
   114c0:	e7dc      	b.n	1147c <hci_cmd_handle+0x3f0>
   114c2:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   114c4:	2300      	movs	r3, #0
   114c6:	aa06      	add	r2, sp, #24
   114c8:	f100 0110 	add.w	r1, r0, #16
   114cc:	f005 fe15 	bl	170fa <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
   114d0:	2111      	movs	r1, #17
   114d2:	a805      	add	r0, sp, #20
   114d4:	f7ff fd50 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   114d8:	2300      	movs	r3, #0
   114da:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   114de:	2210      	movs	r2, #16
   114e0:	a906      	add	r1, sp, #24
	memcpy(rp->info, build_info, sizeof(build_info));
   114e2:	f7ef f8b9 	bl	658 <memcpy>
   114e6:	e632      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   114e8:	2109      	movs	r1, #9
   114ea:	a805      	add	r0, sp, #20
   114ec:	f7ff fd44 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   114f0:	2300      	movs	r3, #0
   114f2:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
   114f6:	2108      	movs	r1, #8
   114f8:	f7ff fc0e 	bl	10d18 <bt_rand>
   114fc:	e627      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   114fe:	2109      	movs	r1, #9
   11500:	a805      	add	r0, sp, #20
   11502:	f7ff fd39 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11506:	4601      	mov	r1, r0
   11508:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1150a:	4602      	mov	r2, r0
	rp->status = 0x00;
   1150c:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
   11510:	4876      	ldr	r0, [pc, #472]	; (116ec <hci_cmd_handle+0x660>)
   11512:	f7ff fd03 	bl	10f1c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
   11516:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
   1151a:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1151c:	f7ff fcfe 	bl	10f1c <sys_put_le32>
   11520:	e615      	b.n	1114e <hci_cmd_handle+0xc2>
   11522:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   11524:	7ba5      	ldrb	r5, [r4, #14]
   11526:	79a3      	ldrb	r3, [r4, #6]
   11528:	7962      	ldrb	r2, [r4, #5]
   1152a:	7921      	ldrb	r1, [r4, #4]
   1152c:	8820      	ldrh	r0, [r4, #0]
   1152e:	9502      	str	r5, [sp, #8]
   11530:	7b65      	ldrb	r5, [r4, #13]
   11532:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   11534:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   11536:	9400      	str	r4, [sp, #0]
   11538:	f005 fa12 	bl	16960 <ll_adv_params_set>
   1153c:	e79e      	b.n	1147c <hci_cmd_handle+0x3f0>
   1153e:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
   11540:	1c59      	adds	r1, r3, #1
   11542:	7818      	ldrb	r0, [r3, #0]
   11544:	f005 fa84 	bl	16a50 <ll_adv_data_set>
   11548:	e618      	b.n	1117c <hci_cmd_handle+0xf0>
   1154a:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
   1154c:	1c59      	adds	r1, r3, #1
   1154e:	7818      	ldrb	r0, [r3, #0]
   11550:	f005 facd 	bl	16aee <ll_scan_data_set>
   11554:	e612      	b.n	1117c <hci_cmd_handle+0xf0>
	status = ll_adv_enable(cmd->enable);
   11556:	68a3      	ldr	r3, [r4, #8]
   11558:	7818      	ldrb	r0, [r3, #0]
   1155a:	f005 fb0f 	bl	16b7c <ll_adv_enable>
	status = ll_scan_enable(cmd->enable);
   1155e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
   11560:	2101      	movs	r1, #1
   11562:	a805      	add	r0, sp, #20
   11564:	f7ff fd08 	bl	10f78 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   11568:	2c00      	cmp	r4, #0
   1156a:	bf0c      	ite	eq
   1156c:	2300      	moveq	r3, #0
   1156e:	230c      	movne	r3, #12
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   11570:	7003      	strb	r3, [r0, #0]
   11572:	e5ec      	b.n	1114e <hci_cmd_handle+0xc2>
   11574:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   11576:	7963      	ldrb	r3, [r4, #5]
   11578:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   1157c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   11580:	7820      	ldrb	r0, [r4, #0]
   11582:	79a4      	ldrb	r4, [r4, #6]
   11584:	9400      	str	r4, [sp, #0]
   11586:	f005 fb41 	bl	16c0c <ll_scan_params_set>
   1158a:	e7e8      	b.n	1155e <hci_cmd_handle+0x4d2>
	status = ll_scan_enable(cmd->enable);
   1158c:	68a3      	ldr	r3, [r4, #8]
   1158e:	7818      	ldrb	r0, [r3, #0]
   11590:	f005 fb5c 	bl	16c4c <ll_scan_enable>
   11594:	e7e3      	b.n	1155e <hci_cmd_handle+0x4d2>
	handle = sys_le16_to_cpu(cmd->handle);
   11596:	68a2      	ldr	r2, [r4, #8]
   11598:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1159c:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1159e:	b2a0      	uxth	r0, r4
   115a0:	f004 fc7e 	bl	15ea0 <ll_start_enc_req_send>
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   115a4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
   115a6:	2103      	movs	r1, #3
   115a8:	a805      	add	r0, sp, #20
   115aa:	f7ff fce5 	bl	10f78 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
   115ae:	2d00      	cmp	r5, #0
   115b0:	bf0c      	ite	eq
   115b2:	2300      	moveq	r3, #0
   115b4:	230c      	movne	r3, #12
   115b6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   115b8:	f8a0 4001 	strh.w	r4, [r0, #1]
   115bc:	e5c7      	b.n	1114e <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
   115be:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   115c0:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
   115c2:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   115c4:	2106      	movs	r1, #6
   115c6:	e7ea      	b.n	1159e <hci_cmd_handle+0x512>
	handle = sys_le16_to_cpu(cmd->handle);
   115c8:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
   115ca:	2108      	movs	r1, #8
   115cc:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   115ce:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
   115d0:	f7ff fcd2 	bl	10f78 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   115d4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
   115d6:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   115d8:	1cc1      	adds	r1, r0, #3
   115da:	4630      	mov	r0, r6
   115dc:	f004 fc4b 	bl	15e76 <ll_chm_get>
   115e0:	e5ef      	b.n	111c2 <hci_cmd_handle+0x136>
	handle = sys_le16_to_cpu(cmd->handle);
   115e2:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   115e4:	8818      	ldrh	r0, [r3, #0]
   115e6:	f004 fc9e 	bl	15f26 <ll_feature_req_send>
   115ea:	e5a9      	b.n	11140 <hci_cmd_handle+0xb4>
   115ec:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
   115ee:	8911      	ldrh	r1, [r2, #8]
   115f0:	8893      	ldrh	r3, [r2, #4]
   115f2:	8810      	ldrh	r0, [r2, #0]
   115f4:	9101      	str	r1, [sp, #4]
   115f6:	88d2      	ldrh	r2, [r2, #6]
   115f8:	9200      	str	r2, [sp, #0]
   115fa:	2200      	movs	r2, #0
   115fc:	4611      	mov	r1, r2
   115fe:	f004 fbc9 	bl	15d94 <ll_conn_update>
   11602:	e59d      	b.n	11140 <hci_cmd_handle+0xb4>
   11604:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   11606:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11608:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
   1160a:	8893      	ldrh	r3, [r2, #4]
   1160c:	9101      	str	r1, [sp, #4]
   1160e:	88d2      	ldrh	r2, [r2, #6]
   11610:	9200      	str	r2, [sp, #0]
   11612:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   11614:	2102      	movs	r1, #2
   11616:	b2a0      	uxth	r0, r4
   11618:	f004 fbbc 	bl	15d94 <ll_conn_update>
   1161c:	e7c2      	b.n	115a4 <hci_cmd_handle+0x518>
   1161e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11620:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
   11622:	789a      	ldrb	r2, [r3, #2]
   11624:	2300      	movs	r3, #0
   11626:	9301      	str	r3, [sp, #4]
   11628:	9300      	str	r3, [sp, #0]
   1162a:	e7f3      	b.n	11614 <hci_cmd_handle+0x588>
	rp = cmd_complete(evt, sizeof(*rp));
   1162c:	2103      	movs	r1, #3
   1162e:	a805      	add	r0, sp, #20
   11630:	f7ff fca2 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11634:	4601      	mov	r1, r0
   11636:	2300      	movs	r3, #0
   11638:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1163c:	3001      	adds	r0, #1
   1163e:	f7ff fb67 	bl	10d10 <ll_tx_pwr_get>
   11642:	e584      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   11644:	210d      	movs	r1, #13
   11646:	a805      	add	r0, sp, #20
   11648:	f7ff fc96 	bl	10f78 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   1164c:	2202      	movs	r2, #2
   1164e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   11650:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11652:	2201      	movs	r2, #1
   11654:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   11656:	220a      	movs	r2, #10
	rp->status = 0x00;
   11658:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
   1165a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   1165c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
   1165e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
   11660:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
   11662:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
   11664:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
   11666:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
   11668:	7242      	strb	r2, [r0, #9]
   1166a:	7283      	strb	r3, [r0, #10]
   1166c:	72c3      	strb	r3, [r0, #11]
   1166e:	7303      	strb	r3, [r0, #12]
   11670:	e56d      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   11672:	2141      	movs	r1, #65	; 0x41
   11674:	a805      	add	r0, sp, #20
   11676:	f7ff fc7f 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   1167a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
   1167c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
   1167e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   11680:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
   11684:	f7ef f814 	bl	6b0 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   11688:	7863      	ldrb	r3, [r4, #1]
   1168a:	f063 0358 	orn	r3, r3, #88	; 0x58
   1168e:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11690:	78a3      	ldrb	r3, [r4, #2]
   11692:	f043 0303 	orr.w	r3, r3, #3
   11696:	70a3      	strb	r3, [r4, #2]
   11698:	e559      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   1169a:	2109      	movs	r1, #9
   1169c:	a805      	add	r0, sp, #20
   1169e:	f7ff fc6b 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   116a2:	2100      	movs	r1, #0
   116a4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
   116a8:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
   116aa:	f7ef f801 	bl	6b0 <memset>
   116ae:	e54e      	b.n	1114e <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
   116b0:	4b0f      	ldr	r3, [pc, #60]	; (116f0 <hci_cmd_handle+0x664>)
   116b2:	aa06      	add	r2, sp, #24
   116b4:	f103 0628 	add.w	r6, r3, #40	; 0x28
   116b8:	4615      	mov	r5, r2
   116ba:	6818      	ldr	r0, [r3, #0]
   116bc:	6859      	ldr	r1, [r3, #4]
   116be:	4614      	mov	r4, r2
   116c0:	c403      	stmia	r4!, {r0, r1}
   116c2:	3308      	adds	r3, #8
   116c4:	42b3      	cmp	r3, r6
   116c6:	4622      	mov	r2, r4
   116c8:	d1f7      	bne.n	116ba <hci_cmd_handle+0x62e>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   116ca:	2129      	movs	r1, #41	; 0x29
   116cc:	a805      	add	r0, sp, #20
   116ce:	f7ff fc53 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   116d2:	2300      	movs	r3, #0
   116d4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   116d8:	2228      	movs	r2, #40	; 0x28
   116da:	4629      	mov	r1, r5
   116dc:	e701      	b.n	114e2 <hci_cmd_handle+0x456>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   116de:	68a1      	ldr	r1, [r4, #8]
   116e0:	2000      	movs	r0, #0
   116e2:	f7ff faf9 	bl	10cd8 <ll_addr_set>
   116e6:	e549      	b.n	1117c <hci_cmd_handle+0xf0>
   116e8:	200069e0 	.word	0x200069e0
   116ec:	ec30ffbf 	.word	0xec30ffbf
   116f0:	0001a3b8 	.word	0x0001a3b8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   116f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   116f8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   116fc:	3201      	adds	r2, #1
   116fe:	d106      	bne.n	1170e <hci_cmd_handle+0x682>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   11704:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11708:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1170a:	4293      	cmp	r3, r2
   1170c:	d020      	beq.n	11750 <hci_cmd_handle+0x6c4>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1170e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   11712:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11716:	07db      	lsls	r3, r3, #31
   11718:	d51a      	bpl.n	11750 <hci_cmd_handle+0x6c4>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   1171a:	2118      	movs	r1, #24
   1171c:	a805      	add	r0, sp, #20
   1171e:	f7ff fc2b 	bl	10f78 <cmd_complete>
		rp->status = 0x00;
   11722:	2600      	movs	r6, #0
		rp->num_addrs = 1;
   11724:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
   11726:	4604      	mov	r4, r0
		rp->num_addrs = 1;
   11728:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
   1172a:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
   1172c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   11730:	1ca1      	adds	r1, r4, #2
   11732:	f7ff fbf3 	bl	10f1c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
   11736:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
   1173a:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   1173c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
   11740:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11744:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
   11746:	2210      	movs	r2, #16
   11748:	4631      	mov	r1, r6
   1174a:	f104 0008 	add.w	r0, r4, #8
   1174e:	e7ac      	b.n	116aa <hci_cmd_handle+0x61e>
	rp = cmd_complete(evt, sizeof(*rp));
   11750:	2102      	movs	r1, #2
   11752:	a805      	add	r0, sp, #20
   11754:	f7ff fc10 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11758:	2300      	movs	r3, #0
   1175a:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
   1175c:	7043      	strb	r3, [r0, #1]
   1175e:	e4f6      	b.n	1114e <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
   11760:	2121      	movs	r1, #33	; 0x21
   11762:	a805      	add	r0, sp, #20
   11764:	f7ff fc08 	bl	10f78 <cmd_complete>
	rp->status = 0x00;
   11768:	4603      	mov	r3, r0
   1176a:	2200      	movs	r2, #0
   1176c:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   11770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
   11774:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   11776:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   1177a:	3101      	adds	r1, #1
   1177c:	d04b      	beq.n	11816 <hci_cmd_handle+0x78a>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1177e:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   11782:	3101      	adds	r1, #1
   11784:	d047      	beq.n	11816 <hci_cmd_handle+0x78a>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   11786:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1178a:	3101      	adds	r1, #1
   1178c:	d043      	beq.n	11816 <hci_cmd_handle+0x78a>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1178e:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
   11792:	3101      	adds	r1, #1
   11794:	d03f      	beq.n	11816 <hci_cmd_handle+0x78a>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
   11796:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   1179a:	4619      	mov	r1, r3
   1179c:	f7ff fbbe 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
   117a0:	1d61      	adds	r1, r4, #5
   117a2:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   117a6:	f7ff fbb9 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
   117aa:	f104 0109 	add.w	r1, r4, #9
   117ae:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   117b2:	f7ff fbb3 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
   117b6:	f104 010d 	add.w	r1, r4, #13
   117ba:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   117be:	f7ff fbad 	bl	10f1c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   117c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   117c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   117ca:	3301      	adds	r3, #1
   117cc:	f104 0311 	add.w	r3, r4, #17
   117d0:	d027      	beq.n	11822 <hci_cmd_handle+0x796>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   117d2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   117d6:	3101      	adds	r1, #1
   117d8:	d023      	beq.n	11822 <hci_cmd_handle+0x796>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   117da:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   117de:	3101      	adds	r1, #1
   117e0:	d01f      	beq.n	11822 <hci_cmd_handle+0x796>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   117e2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   117e6:	3101      	adds	r1, #1
   117e8:	d01b      	beq.n	11822 <hci_cmd_handle+0x796>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
   117ea:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   117ee:	4619      	mov	r1, r3
   117f0:	f7ff fb94 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
   117f4:	f104 0115 	add.w	r1, r4, #21
   117f8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   117fc:	f7ff fb8e 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
   11800:	f104 0119 	add.w	r1, r4, #25
   11804:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   11808:	f7ff fb88 	bl	10f1c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
   1180c:	f104 011d 	add.w	r1, r4, #29
   11810:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
   11814:	e682      	b.n	1151c <hci_cmd_handle+0x490>
		memset(rp->ir, 0x00, sizeof(rp->ir));
   11816:	2210      	movs	r2, #16
   11818:	2100      	movs	r1, #0
   1181a:	4618      	mov	r0, r3
   1181c:	f7ee ff48 	bl	6b0 <memset>
   11820:	e7cf      	b.n	117c2 <hci_cmd_handle+0x736>
		memset(rp->er, 0x00, sizeof(rp->er));
   11822:	2210      	movs	r2, #16
   11824:	2100      	movs	r1, #0
   11826:	4618      	mov	r0, r3
   11828:	e73f      	b.n	116aa <hci_cmd_handle+0x61e>
   1182a:	bf00      	nop

0001182c <hci_acl_handle>:
{
   1182c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   11830:	2300      	movs	r3, #0
   11832:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11834:	8983      	ldrh	r3, [r0, #12]
   11836:	2b03      	cmp	r3, #3
{
   11838:	4606      	mov	r6, r0
   1183a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   1183c:	d803      	bhi.n	11846 <hci_acl_handle+0x1a>
		return -EINVAL;
   1183e:	f06f 0015 	mvn.w	r0, #21
   11842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
   11846:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
   1184a:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
   1184c:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1184e:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
   11850:	f006 fa03 	bl	17c5a <net_buf_simple_pull>
	if (buf->len < len) {
   11854:	89b3      	ldrh	r3, [r6, #12]
   11856:	42bb      	cmp	r3, r7
   11858:	d3f1      	bcc.n	1183e <hci_acl_handle+0x12>
	radio_pdu_node_tx = ll_tx_mem_acquire();
   1185a:	f004 fc6f 	bl	1613c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1185e:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!radio_pdu_node_tx) {
   11862:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
   11864:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!radio_pdu_node_tx) {
   11868:	b9f0      	cbnz	r0, 118a8 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1186a:	4b1e      	ldr	r3, [pc, #120]	; (118e4 <hci_acl_handle+0xb8>)
   1186c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11870:	2300      	movs	r3, #0
   11872:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
   11876:	4313      	orrs	r3, r2
   11878:	d012      	beq.n	118a0 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1187a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1187e:	2001      	movs	r0, #1
   11880:	f7f3 fbe8 	bl	5054 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   11884:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11886:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
   1188a:	211a      	movs	r1, #26
   1188c:	f7ff fb4f 	bl	10f2e <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
   11890:	f8d8 0000 	ldr.w	r0, [r8]
   11894:	2101      	movs	r1, #1
   11896:	3008      	adds	r0, #8
   11898:	f006 f974 	bl	17b84 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1189c:	2301      	movs	r3, #1
   1189e:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   118a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   118a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   118a8:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   118aa:	f1b9 0f00 	cmp.w	r9, #0
   118ae:	d002      	beq.n	118b6 <hci_acl_handle+0x8a>
   118b0:	f1b9 0f02 	cmp.w	r9, #2
   118b4:	d113      	bne.n	118de <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   118b6:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   118b8:	f362 0301 	bfi	r3, r2, #0, #2
   118bc:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
   118be:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
   118c0:	68b1      	ldr	r1, [r6, #8]
   118c2:	463a      	mov	r2, r7
   118c4:	1de0      	adds	r0, r4, #7
   118c6:	f7ee fec7 	bl	658 <memcpy>
	if (ll_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
   118ca:	4621      	mov	r1, r4
   118cc:	4628      	mov	r0, r5
   118ce:	f004 fc41 	bl	16154 <ll_tx_mem_enqueue>
   118d2:	2800      	cmp	r0, #0
   118d4:	d0e6      	beq.n	118a4 <hci_acl_handle+0x78>
		ll_tx_mem_release(radio_pdu_node_tx);
   118d6:	4620      	mov	r0, r4
   118d8:	f004 fc36 	bl	16148 <ll_tx_mem_release>
   118dc:	e7af      	b.n	1183e <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   118de:	2201      	movs	r2, #1
   118e0:	e7ea      	b.n	118b8 <hci_acl_handle+0x8c>
   118e2:	bf00      	nop
   118e4:	200069d8 	.word	0x200069d8

000118e8 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   118e8:	7a03      	ldrb	r3, [r0, #8]
   118ea:	f003 0303 	and.w	r3, r3, #3
   118ee:	3b01      	subs	r3, #1
   118f0:	2b01      	cmp	r3, #1
{
   118f2:	b570      	push	{r4, r5, r6, lr}
   118f4:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
   118f6:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
   118f8:	d81b      	bhi.n	11932 <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   118fa:	f101 0608 	add.w	r6, r1, #8
   118fe:	4630      	mov	r0, r6
   11900:	2104      	movs	r1, #4
   11902:	f006 f93f 	bl	17b84 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   11906:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
   11908:	7a61      	ldrb	r1, [r4, #9]
   1190a:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1190c:	f003 0303 	and.w	r3, r3, #3
   11910:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   11912:	bf0c      	ite	eq
   11914:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   11918:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1191c:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1191e:	4630      	mov	r0, r6
   11920:	f006 f930 	bl	17b84 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
   11924:	7a62      	ldrb	r2, [r4, #9]
   11926:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
   1192a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
   1192e:	f7ee be93 	b.w	658 <memcpy>
		LL_ASSERT(0);
   11932:	4040      	eors	r0, r0
   11934:	f380 8811 	msr	BASEPRI, r0
   11938:	f04f 0004 	mov.w	r0, #4
   1193c:	df02      	svc	2
	...

00011940 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
   11940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11944:	7902      	ldrb	r2, [r0, #4]
	handle = node_rx->hdr.handle;
   11946:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11948:	2a01      	cmp	r2, #1
{
   1194a:	4604      	mov	r4, r0
   1194c:	460d      	mov	r5, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1194e:	f000 8124 	beq.w	11b9a <hci_evt_encode+0x25a>
	switch (node_rx->hdr.type) {
   11952:	3a02      	subs	r2, #2
   11954:	4bc0      	ldr	r3, [pc, #768]	; (11c58 <hci_evt_encode+0x318>)
   11956:	2a04      	cmp	r2, #4
   11958:	d844      	bhi.n	119e4 <hci_evt_encode+0xa4>
   1195a:	e8df f012 	tbh	[pc, r2, lsl #1]
   1195e:	0005      	.short	0x0005
   11960:	00c70092 	.word	0x00c70092
   11964:	010700e3 	.word	0x010700e3
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   11968:	2200      	movs	r2, #0
   1196a:	f88d 2008 	strb.w	r2, [sp, #8]
   1196e:	2201      	movs	r2, #1
   11970:	f88d 2009 	strb.w	r2, [sp, #9]
   11974:	2203      	movs	r2, #3
   11976:	f88d 200a 	strb.w	r2, [sp, #10]
   1197a:	22ff      	movs	r2, #255	; 0xff
   1197c:	f88d 200b 	strb.w	r2, [sp, #11]
   11980:	f88d 200d 	strb.w	r2, [sp, #13]
   11984:	2202      	movs	r2, #2
   11986:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
   1198a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1198e:	2200      	movs	r2, #0
   11990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   11994:	2104      	movs	r1, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
   11996:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   11998:	f88d 100c 	strb.w	r1, [sp, #12]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
   1199c:	d048      	beq.n	11a30 <hci_evt_encode+0xf0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
   1199e:	7a46      	ldrb	r6, [r0, #9]
   119a0:	4bae      	ldr	r3, [pc, #696]	; (11c5c <hci_evt_encode+0x31c>)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   119a2:	4430      	add	r0, r6
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
   119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   119a8:	7b01      	ldrb	r1, [r0, #12]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
   119aa:	bb09      	cbnz	r1, 119f0 <hci_evt_encode+0xb0>
   119ac:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   119b0:	2300      	movs	r3, #0
   119b2:	4313      	orrs	r3, r2
   119b4:	d03c      	beq.n	11a30 <hci_evt_encode+0xf0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   119b6:	f894 a008 	ldrb.w	sl, [r4, #8]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   119ba:	7a87      	ldrb	r7, [r0, #10]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   119bc:	f00a 0a0f 	and.w	sl, sl, #15
   119c0:	f1ba 0f01 	cmp.w	sl, #1
		data_len = (adv->len - BDADDR_SIZE);
   119c4:	bf18      	it	ne
   119c6:	3e06      	subne	r6, #6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   119c8:	f1c7 0700 	rsb	r7, r7, #0
		data_len = (adv->len - BDADDR_SIZE);
   119cc:	bf14      	ite	ne
   119ce:	b2f6      	uxtbne	r6, r6
		data_len = 0;
   119d0:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
   119d2:	b27f      	sxtb	r7, r7
   119d4:	f104 0808 	add.w	r8, r4, #8
   119d8:	f104 090a 	add.w	r9, r4, #10
	if (direct) {
   119dc:	b359      	cbz	r1, 11a36 <hci_evt_encode+0xf6>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   119de:	f1ba 0f01 	cmp.w	sl, #1
   119e2:	d008      	beq.n	119f6 <hci_evt_encode+0xb6>
		LL_ASSERT(0);
   119e4:	4040      	eors	r0, r0
   119e6:	f380 8811 	msr	BASEPRI, r0
   119ea:	f04f 0004 	mov.w	r0, #4
   119ee:	df02      	svc	2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
   119f0:	f002 020b 	and.w	r2, r2, #11
   119f4:	e7dc      	b.n	119b0 <hci_evt_encode+0x70>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   119f6:	2211      	movs	r2, #17
   119f8:	210b      	movs	r1, #11
   119fa:	4628      	mov	r0, r5
   119fc:	f7ff fade 	bl	10fbc <meta_evt>
		drp->num_reports = 1;
   11a00:	f880 a000 	strb.w	sl, [r0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
   11a04:	f880 a001 	strb.w	sl, [r0, #1]
			dir_info->addr.type = adv->tx_addr;
   11a08:	7a23      	ldrb	r3, [r4, #8]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   11a0a:	4605      	mov	r5, r0
			dir_info->addr.type = adv->tx_addr;
   11a0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11a10:	7083      	strb	r3, [r0, #2]
			memcpy(&dir_info->addr.a.val[0],
   11a12:	2206      	movs	r2, #6
   11a14:	4649      	mov	r1, r9
   11a16:	3003      	adds	r0, #3
   11a18:	f7ee fe1e 	bl	658 <memcpy>
		dir_info->dir_addr.type = 0x1;
   11a1c:	f885 a009 	strb.w	sl, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
   11a20:	2206      	movs	r2, #6
   11a22:	f108 0108 	add.w	r1, r8, #8
   11a26:	f105 000a 	add.w	r0, r5, #10
   11a2a:	f7ee fe15 	bl	658 <memcpy>
		dir_info->rssi = rssi;
   11a2e:	742f      	strb	r7, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   11a30:	b004      	add	sp, #16
   11a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   11a36:	f106 020b 	add.w	r2, r6, #11
   11a3a:	b2d2      	uxtb	r2, r2
   11a3c:	2102      	movs	r1, #2
   11a3e:	4628      	mov	r0, r5
   11a40:	f7ff fabc 	bl	10fbc <meta_evt>
	sep->num_reports = 1;
   11a44:	2301      	movs	r3, #1
   11a46:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   11a48:	7a23      	ldrb	r3, [r4, #8]
   11a4a:	aa04      	add	r2, sp, #16
   11a4c:	f003 030f 	and.w	r3, r3, #15
   11a50:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   11a52:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   11a54:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   11a58:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   11a5a:	7a23      	ldrb	r3, [r4, #8]
   11a5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11a60:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
   11a62:	2206      	movs	r2, #6
   11a64:	4649      	mov	r1, r9
   11a66:	3003      	adds	r0, #3
   11a68:	f7ee fdf6 	bl	658 <memcpy>
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
   11a6c:	350a      	adds	r5, #10
	adv_info->length = data_len;
   11a6e:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
   11a72:	4632      	mov	r2, r6
   11a74:	f108 0108 	add.w	r1, r8, #8
   11a78:	4628      	mov	r0, r5
   11a7a:	f7ee fded 	bl	658 <memcpy>
	*prssi = rssi;
   11a7e:	55af      	strb	r7, [r5, r6]
   11a80:	e7d6      	b.n	11a30 <hci_evt_encode+0xf0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11a82:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a86:	2200      	movs	r2, #0
   11a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   11a8c:	4313      	orrs	r3, r2
   11a8e:	d0cf      	beq.n	11a30 <hci_evt_encode+0xf0>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   11a90:	4b72      	ldr	r3, [pc, #456]	; (11c5c <hci_evt_encode+0x31c>)
   11a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a96:	2300      	movs	r3, #0
   11a98:	f002 0201 	and.w	r2, r2, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11a9c:	4313      	orrs	r3, r2
   11a9e:	d0c7      	beq.n	11a30 <hci_evt_encode+0xf0>
	if (!radio_cc->status) {
   11aa0:	7ac3      	ldrb	r3, [r0, #11]
   11aa2:	b91b      	cbnz	r3, 11aac <hci_evt_encode+0x16c>
		conn_count++;
   11aa4:	4a6e      	ldr	r2, [pc, #440]	; (11c60 <hci_evt_encode+0x320>)
   11aa6:	6813      	ldr	r3, [r2, #0]
   11aa8:	3301      	adds	r3, #1
   11aaa:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   11aac:	2212      	movs	r2, #18
   11aae:	2101      	movs	r1, #1
   11ab0:	4628      	mov	r0, r5
   11ab2:	f7ff fa83 	bl	10fbc <meta_evt>
	lecc->status = radio_cc->status;
   11ab6:	7ae3      	ldrb	r3, [r4, #11]
   11ab8:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   11aba:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
   11abe:	7b23      	ldrb	r3, [r4, #12]
   11ac0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
   11ac2:	7b63      	ldrb	r3, [r4, #13]
   11ac4:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   11ac6:	4605      	mov	r5, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
   11ac8:	2206      	movs	r2, #6
   11aca:	f104 010e 	add.w	r1, r4, #14
   11ace:	3005      	adds	r0, #5
   11ad0:	f7ee fdc2 	bl	658 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
   11ad4:	8aa3      	ldrh	r3, [r4, #20]
   11ad6:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
   11ada:	8ae3      	ldrh	r3, [r4, #22]
   11adc:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
   11ae0:	8b23      	ldrh	r3, [r4, #24]
   11ae2:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = radio_cc->mca;
   11ae6:	7ea3      	ldrb	r3, [r4, #26]
   11ae8:	746b      	strb	r3, [r5, #17]
   11aea:	e7a1      	b.n	11a30 <hci_evt_encode+0xf0>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11aec:	e9d3 2300 	ldrd	r2, r3, [r3]
   11af0:	2300      	movs	r3, #0
   11af2:	f002 0210 	and.w	r2, r2, #16
   11af6:	4313      	orrs	r3, r2
   11af8:	d09a      	beq.n	11a30 <hci_evt_encode+0xf0>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
   11afa:	2204      	movs	r2, #4
   11afc:	2105      	movs	r1, #5
   11afe:	4628      	mov	r0, r5
   11b00:	f7ff fa15 	bl	10f2e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   11b04:	2104      	movs	r1, #4
   11b06:	f105 0008 	add.w	r0, r5, #8
   11b0a:	f006 f83b 	bl	17b84 <net_buf_simple_add>
	ep->status = 0x00;
   11b0e:	2300      	movs	r3, #0
	conn_count--;
   11b10:	4a53      	ldr	r2, [pc, #332]	; (11c60 <hci_evt_encode+0x320>)
	ep->status = 0x00;
   11b12:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   11b14:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
   11b18:	7a23      	ldrb	r3, [r4, #8]
   11b1a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
   11b1c:	6813      	ldr	r3, [r2, #0]
   11b1e:	3b01      	subs	r3, #1
   11b20:	6013      	str	r3, [r2, #0]
   11b22:	e785      	b.n	11a30 <hci_evt_encode+0xf0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11b24:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b28:	2200      	movs	r2, #0
   11b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   11b2e:	4313      	orrs	r3, r2
   11b30:	f43f af7e 	beq.w	11a30 <hci_evt_encode+0xf0>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   11b34:	4b49      	ldr	r3, [pc, #292]	; (11c5c <hci_evt_encode+0x31c>)
   11b36:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b3a:	2300      	movs	r3, #0
   11b3c:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11b40:	4313      	orrs	r3, r2
   11b42:	f43f af75 	beq.w	11a30 <hci_evt_encode+0xf0>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   11b46:	2209      	movs	r2, #9
   11b48:	2103      	movs	r1, #3
   11b4a:	4628      	mov	r0, r5
   11b4c:	f7ff fa36 	bl	10fbc <meta_evt>
	sep->status = radio_cu->status;
   11b50:	7ae3      	ldrb	r3, [r4, #11]
   11b52:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   11b54:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
   11b56:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
   11b5a:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
   11b5e:	89e3      	ldrh	r3, [r4, #14]
   11b60:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
   11b64:	8a23      	ldrh	r3, [r4, #16]
   11b66:	f8a0 3007 	strh.w	r3, [r0, #7]
   11b6a:	e761      	b.n	11a30 <hci_evt_encode+0xf0>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   11b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b70:	2200      	movs	r2, #0
   11b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   11b76:	4313      	orrs	r3, r2
   11b78:	f43f af5a 	beq.w	11a30 <hci_evt_encode+0xf0>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
   11b7c:	2203      	movs	r2, #3
   11b7e:	2130      	movs	r1, #48	; 0x30
   11b80:	4628      	mov	r0, r5
   11b82:	f7ff f9d4 	bl	10f2e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   11b86:	2103      	movs	r1, #3
   11b88:	f105 0008 	add.w	r0, r5, #8
   11b8c:	f005 fffa 	bl	17b84 <net_buf_simple_add>
	ep->status = 0x00;
   11b90:	2300      	movs	r3, #0
   11b92:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   11b94:	f8a0 6001 	strh.w	r6, [r0, #1]
   11b98:	e74a      	b.n	11a30 <hci_evt_encode+0xf0>
	switch (pdu_data->payload.llctrl.opcode) {
   11b9a:	7ac3      	ldrb	r3, [r0, #11]
   11b9c:	3b03      	subs	r3, #3
   11b9e:	2b0c      	cmp	r3, #12
   11ba0:	f63f af20 	bhi.w	119e4 <hci_evt_encode+0xa4>
   11ba4:	a201      	add	r2, pc, #4	; (adr r2, 11bac <hci_evt_encode+0x26c>)
   11ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11baa:	bf00      	nop
   11bac:	00011be1 	.word	0x00011be1
   11bb0:	000119e5 	.word	0x000119e5
   11bb4:	000119e5 	.word	0x000119e5
   11bb8:	00011c33 	.word	0x00011c33
   11bbc:	00011cfb 	.word	0x00011cfb
   11bc0:	000119e5 	.word	0x000119e5
   11bc4:	00011c43 	.word	0x00011c43
   11bc8:	000119e5 	.word	0x000119e5
   11bcc:	000119e5 	.word	0x000119e5
   11bd0:	00011c65 	.word	0x00011c65
   11bd4:	00011ca3 	.word	0x00011ca3
   11bd8:	000119e5 	.word	0x000119e5
   11bdc:	00011cab 	.word	0x00011cab
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11be0:	4b1d      	ldr	r3, [pc, #116]	; (11c58 <hci_evt_encode+0x318>)
   11be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11be6:	2200      	movs	r2, #0
   11be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   11bec:	4313      	orrs	r3, r2
   11bee:	f43f af1f 	beq.w	11a30 <hci_evt_encode+0xf0>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   11bf2:	4b1a      	ldr	r3, [pc, #104]	; (11c5c <hci_evt_encode+0x31c>)
   11bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bf8:	2300      	movs	r3, #0
   11bfa:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11bfe:	4313      	orrs	r3, r2
   11c00:	f43f af16 	beq.w	11a30 <hci_evt_encode+0xf0>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   11c04:	220c      	movs	r2, #12
   11c06:	2105      	movs	r1, #5
   11c08:	4628      	mov	r0, r5
   11c0a:	f7ff f9d7 	bl	10fbc <meta_evt>
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
   11c0e:	f104 010c 	add.w	r1, r4, #12
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   11c12:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
   11c14:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   11c16:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
   11c1a:	f7ee fd1d 	bl	658 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
   11c1e:	2202      	movs	r2, #2
   11c20:	f104 0114 	add.w	r1, r4, #20
   11c24:	f105 000a 	add.w	r0, r5, #10
}
   11c28:	b004      	add	sp, #16
   11c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
   11c2e:	f7ee bd13 	b.w	658 <memcpy>
		encrypt_change(0x00, handle, buf);
   11c32:	460a      	mov	r2, r1
   11c34:	2000      	movs	r0, #0
   11c36:	4631      	mov	r1, r6
}
   11c38:	b004      	add	sp, #16
   11c3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
   11c3e:	f7ff b9d3 	b.w	10fe8 <encrypt_change>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   11c42:	460b      	mov	r3, r1
   11c44:	4632      	mov	r2, r6
   11c46:	f100 0108 	add.w	r1, r0, #8
   11c4a:	2000      	movs	r0, #0
}
   11c4c:	b004      	add	sp, #16
   11c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11c52:	f7ff b9e9 	b.w	11028 <le_remote_feat_complete>
   11c56:	bf00      	nop
   11c58:	200069d8 	.word	0x200069d8
   11c5c:	200069e0 	.word	0x200069e0
   11c60:	20000f60 	.word	0x20000f60
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
   11c64:	4b29      	ldr	r3, [pc, #164]	; (11d0c <hci_evt_encode+0x3cc>)
   11c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c6a:	2300      	movs	r3, #0
   11c6c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
   11c70:	4313      	orrs	r3, r2
   11c72:	f43f aedd 	beq.w	11a30 <hci_evt_encode+0xf0>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
   11c76:	2208      	movs	r2, #8
   11c78:	210c      	movs	r1, #12
   11c7a:	4628      	mov	r0, r5
   11c7c:	f7ff f957 	bl	10f2e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
   11c80:	2108      	movs	r1, #8
   11c82:	1868      	adds	r0, r5, r1
   11c84:	f005 ff7e 	bl	17b84 <net_buf_simple_add>
	ep->status = 0x00;
   11c88:	2300      	movs	r3, #0
   11c8a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   11c8c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
   11c90:	7b23      	ldrb	r3, [r4, #12]
   11c92:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
   11c94:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   11c98:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
   11c9a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   11c9e:	80c3      	strh	r3, [r0, #6]
   11ca0:	e6c6      	b.n	11a30 <hci_evt_encode+0xf0>
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
   11ca2:	460a      	mov	r2, r1
   11ca4:	7b00      	ldrb	r0, [r0, #12]
   11ca6:	4631      	mov	r1, r6
   11ca8:	e7c6      	b.n	11c38 <hci_evt_encode+0x2f8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11caa:	4b18      	ldr	r3, [pc, #96]	; (11d0c <hci_evt_encode+0x3cc>)
   11cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cb0:	2200      	movs	r2, #0
   11cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   11cb6:	4313      	orrs	r3, r2
   11cb8:	d007      	beq.n	11cca <hci_evt_encode+0x38a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   11cba:	4b15      	ldr	r3, [pc, #84]	; (11d10 <hci_evt_encode+0x3d0>)
   11cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   11cc0:	2300      	movs	r3, #0
   11cc2:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11cc6:	4313      	orrs	r3, r2
   11cc8:	d108      	bne.n	11cdc <hci_evt_encode+0x39c>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11cca:	2300      	movs	r3, #0
   11ccc:	9301      	str	r3, [sp, #4]
   11cce:	9300      	str	r3, [sp, #0]
   11cd0:	221a      	movs	r2, #26
   11cd2:	2102      	movs	r1, #2
   11cd4:	4630      	mov	r0, r6
   11cd6:	f004 f85d 	bl	15d94 <ll_conn_update>
   11cda:	e6a9      	b.n	11a30 <hci_evt_encode+0xf0>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   11cdc:	220a      	movs	r2, #10
   11cde:	2106      	movs	r1, #6
   11ce0:	4628      	mov	r0, r5
   11ce2:	f7ff f96b 	bl	10fbc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11ce6:	8006      	strh	r6, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
   11ce8:	89a3      	ldrh	r3, [r4, #12]
	sep->interval_min =
   11cea:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
   11cec:	89e3      	ldrh	r3, [r4, #14]
	sep->interval_max =
   11cee:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
   11cf0:	8a23      	ldrh	r3, [r4, #16]
   11cf2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
   11cf4:	8a63      	ldrh	r3, [r4, #18]
   11cf6:	8103      	strh	r3, [r0, #8]
   11cf8:	e69a      	b.n	11a30 <hci_evt_encode+0xf0>
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
   11cfa:	7b03      	ldrb	r3, [r0, #12]
   11cfc:	2b0e      	cmp	r3, #14
   11cfe:	f47f ae97 	bne.w	11a30 <hci_evt_encode+0xf0>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   11d02:	460b      	mov	r3, r1
   11d04:	4632      	mov	r2, r6
   11d06:	2100      	movs	r1, #0
   11d08:	201a      	movs	r0, #26
   11d0a:	e79f      	b.n	11c4c <hci_evt_encode+0x30c>
   11d0c:	200069d8 	.word	0x200069d8
   11d10:	200069e0 	.word	0x200069e0

00011d14 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
   11d14:	b570      	push	{r4, r5, r6, lr}
   11d16:	4606      	mov	r6, r0
   11d18:	460d      	mov	r5, r1
   11d1a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   11d1c:	2113      	movs	r1, #19
   11d1e:	2205      	movs	r2, #5
   11d20:	f7ff f905 	bl	10f2e <evt_create>

	ep = net_buf_add(buf, len);
   11d24:	2105      	movs	r1, #5
   11d26:	f106 0008 	add.w	r0, r6, #8
   11d2a:	f005 ff2b 	bl	17b84 <net_buf_simple_add>
	ep->num_handles = num_handles;
   11d2e:	2301      	movs	r3, #1
   11d30:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   11d32:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   11d36:	f8a0 4003 	strh.w	r4, [r0, #3]
   11d3a:	bd70      	pop	{r4, r5, r6, pc}

00011d3c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11d3c:	7903      	ldrb	r3, [r0, #4]
   11d3e:	2b01      	cmp	r3, #1
   11d40:	d006      	beq.n	11d50 <hci_get_class+0x14>
   11d42:	3b02      	subs	r3, #2
   11d44:	b2db      	uxtb	r3, r3
   11d46:	2b04      	cmp	r3, #4
   11d48:	d80a      	bhi.n	11d60 <hci_get_class+0x24>
   11d4a:	4a07      	ldr	r2, [pc, #28]	; (11d68 <hci_get_class+0x2c>)
   11d4c:	56d0      	ldrsb	r0, [r2, r3]
   11d4e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   11d50:	7a03      	ldrb	r3, [r0, #8]
   11d52:	f003 0303 	and.w	r3, r3, #3
   11d56:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
   11d58:	bf0c      	ite	eq
   11d5a:	2002      	moveq	r0, #2
   11d5c:	2003      	movne	r0, #3
   11d5e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
   11d64:	4770      	bx	lr
   11d66:	bf00      	nop
   11d68:	0001a3b3 	.word	0x0001a3b3

00011d6c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   11d6c:	4b06      	ldr	r3, [pc, #24]	; (11d88 <hci_init+0x1c>)
   11d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11d72:	f641 71ff 	movw	r1, #8191	; 0x1fff
   11d76:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11d7a:	4b04      	ldr	r3, [pc, #16]	; (11d8c <hci_init+0x20>)
   11d7c:	201f      	movs	r0, #31
   11d7e:	2100      	movs	r1, #0
   11d80:	e9c3 0100 	strd	r0, r1, [r3]
   11d84:	4770      	bx	lr
   11d86:	bf00      	nop
   11d88:	200069d8 	.word	0x200069d8
   11d8c:	200069e0 	.word	0x200069e0

00011d90 <cpu_sleep>:
   11d90:	bf20      	wfe
  __ASM volatile ("sev");
   11d92:	bf40      	sev
  __ASM volatile ("wfe");
   11d94:	bf20      	wfe
   11d96:	4770      	bx	lr

00011d98 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
   11d98:	6008      	str	r0, [r1, #0]
   11d9a:	4770      	bx	lr

00011d9c <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   11d9c:	b918      	cbnz	r0, 11da6 <prepare_reduced+0xa>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   11d9e:	680b      	ldr	r3, [r1, #0]
   11da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11da4:	600b      	str	r3, [r1, #0]
   11da6:	4770      	bx	lr

00011da8 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
   11da8:	b918      	cbnz	r0, 11db2 <prepare_normal+0xa>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   11daa:	680b      	ldr	r3, [r1, #0]
   11dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11db0:	600b      	str	r3, [r1, #0]
   11db2:	4770      	bx	lr

00011db4 <chan_sel_1>:
	return chan_next;
}

static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
   11db4:	b570      	push	{r4, r5, r6, lr}
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11db6:	fb02 1101 	mla	r1, r2, r1, r1
   11dba:	7802      	ldrb	r2, [r0, #0]
{
   11dbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11dc0:	440a      	add	r2, r1
   11dc2:	2125      	movs	r1, #37	; 0x25
   11dc4:	fb92 f4f1 	sdiv	r4, r2, r1
   11dc8:	fb01 2414 	mls	r4, r1, r4, r2
   11dcc:	b2e1      	uxtb	r1, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11dce:	08ca      	lsrs	r2, r1, #3
	*chan_use = chan_next;
   11dd0:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11dd2:	5c9a      	ldrb	r2, [r3, r2]
   11dd4:	f004 0407 	and.w	r4, r4, #7
   11dd8:	4122      	asrs	r2, r4
   11dda:	f012 0201 	ands.w	r2, r2, #1
   11dde:	d109      	bne.n	11df4 <chan_sel_1+0x40>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
   11de0:	fbb1 f0f5 	udiv	r0, r1, r5
   11de4:	fb05 1010 	mls	r0, r5, r0, r1
   11de8:	b2c0      	uxtb	r0, r0
   11dea:	1e5d      	subs	r5, r3, #1
   11dec:	3304      	adds	r3, #4
	while (byte_count--) {
   11dee:	429d      	cmp	r5, r3
   11df0:	d102      	bne.n	11df8 <chan_sel_1+0x44>
   11df2:	4611      	mov	r1, r2
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
   11df4:	4608      	mov	r0, r1
   11df6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
   11df8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   11dfc:	2400      	movs	r4, #0
   11dfe:	1911      	adds	r1, r2, r4
		while (bit_count--) {
   11e00:	2c08      	cmp	r4, #8
   11e02:	b2c9      	uxtb	r1, r1
   11e04:	d101      	bne.n	11e0a <chan_sel_1+0x56>
   11e06:	460a      	mov	r2, r1
   11e08:	e7f1      	b.n	11dee <chan_sel_1+0x3a>
			if (bite & 0x01) {
   11e0a:	f016 0f01 	tst.w	r6, #1
   11e0e:	d003      	beq.n	11e18 <chan_sel_1+0x64>
				if (chan_index == 0) {
   11e10:	2800      	cmp	r0, #0
   11e12:	d0ef      	beq.n	11df4 <chan_sel_1+0x40>
				chan_index--;
   11e14:	3801      	subs	r0, #1
   11e16:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   11e18:	0876      	lsrs	r6, r6, #1
   11e1a:	3401      	adds	r4, #1
   11e1c:	e7ef      	b.n	11dfe <chan_sel_1+0x4a>
	...

00011e20 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
   11e20:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   11e22:	4a0c      	ldr	r2, [pc, #48]	; (11e54 <packet_rx_reserve_get+0x34>)
   11e24:	f892 3136 	ldrb.w	r3, [r2, #310]	; 0x136
	    _radio.packet_rx_last) {
   11e28:	f892 1135 	ldrb.w	r1, [r2, #309]	; 0x135
	if (_radio.packet_rx_acquire >=
   11e2c:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
   11e2e:	bf38      	it	cc
   11e30:	f892 4134 	ldrbcc.w	r4, [r2, #308]	; 0x134
			_radio.packet_rx_last);
   11e34:	f892 1135 	ldrb.w	r1, [r2, #309]	; 0x135
			_radio.packet_rx_last +
   11e38:	bf38      	it	cc
   11e3a:	191b      	addcc	r3, r3, r4
   11e3c:	1a5b      	subs	r3, r3, r1
   11e3e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   11e40:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   11e42:	bf9d      	ittte	ls
   11e44:	f892 1135 	ldrbls.w	r1, [r2, #309]	; 0x135
   11e48:	f8d2 3130 	ldrls.w	r3, [r2, #304]	; 0x130
   11e4c:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
   11e50:	2000      	movhi	r0, #0
}
   11e52:	bd10      	pop	{r4, pc}
   11e54:	20000f64 	.word	0x20000f64

00011e58 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
   11e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
   11e5c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11e5e:	4294      	cmp	r4, r2
{
   11e60:	4681      	mov	r9, r0
   11e62:	460f      	mov	r7, r1
   11e64:	4690      	mov	r8, r2
	if (_first == last) {
   11e66:	d03d      	beq.n	11ee4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
   11e68:	4e1f      	ldr	r6, [pc, #124]	; (11ee8 <tx_cmplt_get+0x90>)
   11e6a:	f8d6 3164 	ldr.w	r3, [r6, #356]	; 0x164
   11e6e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11e72:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11e74:	2500      	movs	r5, #0
				(struct radio_pdu_node_tx *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
   11e76:	f04f 0b02 	mov.w	fp, #2
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11e7a:	f506 7aac 	add.w	sl, r6, #344	; 0x158
		if (*handle != _radio.pkt_release[_first].handle) {
   11e7e:	b222      	sxth	r2, r4
   11e80:	f8d6 0164 	ldr.w	r0, [r6, #356]	; 0x164
   11e84:	f8b9 e000 	ldrh.w	lr, [r9]
   11e88:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   11e8c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
   11e90:	4596      	cmp	lr, r2
   11e92:	d120      	bne.n	11ed6 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
   11e94:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11e96:	2801      	cmp	r0, #1
   11e98:	f020 0303 	bic.w	r3, r0, #3
   11e9c:	d90a      	bls.n	11eb4 <tx_cmplt_get+0x5c>
   11e9e:	b1f3      	cbz	r3, 11ede <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11ea0:	1d02      	adds	r2, r0, #4
   11ea2:	d01c      	beq.n	11ede <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11ea4:	7942      	ldrb	r2, [r0, #5]
   11ea6:	b1d2      	cbz	r2, 11ede <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11ea8:	7902      	ldrb	r2, [r0, #4]
   11eaa:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11eae:	3a01      	subs	r2, #1
   11eb0:	2a01      	cmp	r2, #1
   11eb2:	d814      	bhi.n	11ede <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx =
   11eb4:	2201      	movs	r2, #1
			cmplt++;
   11eb6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx =
   11eb8:	604a      	str	r2, [r1, #4]
			cmplt++;
   11eba:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11ebc:	b113      	cbz	r3, 11ec4 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11ebe:	4651      	mov	r1, sl
   11ec0:	f7fd fec7 	bl	fc52 <mem_release>
		}

		_first = _first + 1;
   11ec4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
   11ec6:	f896 2168 	ldrb.w	r2, [r6, #360]	; 0x168
		_first = _first + 1;
   11eca:	b2e4      	uxtb	r4, r4
			_first = 0;
   11ecc:	42a2      	cmp	r2, r4
   11ece:	bf08      	it	eq
   11ed0:	2400      	moveq	r4, #0
		}

	} while (_first != last);
   11ed2:	4544      	cmp	r4, r8
   11ed4:	d1d3      	bne.n	11e7e <tx_cmplt_get+0x26>

	*first = _first;
   11ed6:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
   11ed8:	4628      	mov	r0, r5
   11eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx =
   11ede:	f8c1 b004 	str.w	fp, [r1, #4]
   11ee2:	e7eb      	b.n	11ebc <tx_cmplt_get+0x64>
		return 0;
   11ee4:	2500      	movs	r5, #0
   11ee6:	e7f7      	b.n	11ed8 <tx_cmplt_get+0x80>
   11ee8:	20000f64 	.word	0x20000f64

00011eec <connection_get>:
{
   11eec:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
   11eee:	4b09      	ldr	r3, [pc, #36]	; (11f14 <connection_get+0x28>)
   11ef0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   11ef4:	4282      	cmp	r2, r0
{
   11ef6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
   11ef8:	d90a      	bls.n	11f10 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11efa:	4602      	mov	r2, r0
   11efc:	f44f 7196 	mov.w	r1, #300	; 0x12c
   11f00:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11f04:	f7fd feba 	bl	fc7c <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11f08:	b110      	cbz	r0, 11f10 <connection_get+0x24>
   11f0a:	8c03      	ldrh	r3, [r0, #32]
   11f0c:	42a3      	cmp	r3, r4
   11f0e:	d000      	beq.n	11f12 <connection_get+0x26>
	return 0;
   11f10:	2000      	movs	r0, #0
}
   11f12:	bd10      	pop	{r4, pc}
   11f14:	20000f64 	.word	0x20000f64

00011f18 <role_disable>:
{
   11f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f1c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f1e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
   11f20:	2805      	cmp	r0, #5
{
   11f22:	4605      	mov	r5, r0
   11f24:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f26:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
   11f28:	d00e      	beq.n	11f48 <role_disable+0x30>
   11f2a:	2806      	cmp	r0, #6
   11f2c:	f000 808e 	beq.w	1204c <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11f30:	f240 8086 	bls.w	12040 <role_disable+0x128>
			conn_handle = ticker_id_primary -
   11f34:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11f36:	b280      	uxth	r0, r0
   11f38:	f7ff ffd8 	bl	11eec <connection_get>
			if (!conn) {
   11f3c:	2800      	cmp	r0, #0
   11f3e:	f000 80d9 	beq.w	120f4 <role_disable+0x1dc>
			ticks_active_to_start =
   11f42:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
   11f46:	e010      	b.n	11f6a <role_disable+0x52>
		ticks_xtal_to_start =
   11f48:	4b6b      	ldr	r3, [pc, #428]	; (120f8 <role_disable+0x1e0>)
   11f4a:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11f4c:	f8d3 8018 	ldr.w	r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f50:	ab02      	add	r3, sp, #8
   11f52:	9300      	str	r3, [sp, #0]
   11f54:	460a      	mov	r2, r1
   11f56:	4b69      	ldr	r3, [pc, #420]	; (120fc <role_disable+0x1e4>)
   11f58:	2103      	movs	r1, #3
   11f5a:	2000      	movs	r0, #0
   11f5c:	f7fe fde0 	bl	10b20 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11f60:	2802      	cmp	r0, #2
   11f62:	d066      	beq.n	12032 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11f64:	9b02      	ldr	r3, [sp, #8]
   11f66:	2b00      	cmp	r3, #0
   11f68:	d167      	bne.n	1203a <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
   11f6a:	4c63      	ldr	r4, [pc, #396]	; (120f8 <role_disable+0x1e0>)
   11f6c:	7ba3      	ldrb	r3, [r4, #14]
   11f6e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   11f72:	2b00      	cmp	r3, #0
   11f74:	d164      	bne.n	12040 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
   11f76:	ab06      	add	r3, sp, #24
   11f78:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
   11f7a:	73a5      	strb	r5, [r4, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11f7c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f80:	2103      	movs	r1, #3
   11f82:	9300      	str	r3, [sp, #0]
   11f84:	462a      	mov	r2, r5
   11f86:	4b5d      	ldr	r3, [pc, #372]	; (120fc <role_disable+0x1e4>)
   11f88:	f7fe fdca 	bl	10b20 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11f8c:	2802      	cmp	r0, #2
   11f8e:	d063      	beq.n	12058 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11f90:	9b02      	ldr	r3, [sp, #8]
   11f92:	2b00      	cmp	r3, #0
   11f94:	d145      	bne.n	12022 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11f96:	7b23      	ldrb	r3, [r4, #12]
   11f98:	429d      	cmp	r5, r3
   11f9a:	d002      	beq.n	11fa2 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11f9c:	7b63      	ldrb	r3, [r4, #13]
   11f9e:	429d      	cmp	r5, r3
   11fa0:	d13b      	bne.n	1201a <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   11fa2:	ab06      	add	r3, sp, #24
   11fa4:	2202      	movs	r2, #2
   11fa6:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11faa:	2200      	movs	r2, #0
   11fac:	9300      	str	r3, [sp, #0]
   11fae:	2103      	movs	r1, #3
   11fb0:	4b52      	ldr	r3, [pc, #328]	; (120fc <role_disable+0x1e4>)
   11fb2:	4610      	mov	r0, r2
   11fb4:	f7fe fdb4 	bl	10b20 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11fb8:	2802      	cmp	r0, #2
   11fba:	d107      	bne.n	11fcc <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11fbc:	2201      	movs	r2, #1
   11fbe:	4611      	mov	r1, r2
   11fc0:	2003      	movs	r0, #3
   11fc2:	f7fd febd 	bl	fd40 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
   11fc6:	9b03      	ldr	r3, [sp, #12]
   11fc8:	2b02      	cmp	r3, #2
   11fca:	d039      	beq.n	12040 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   11fcc:	9803      	ldr	r0, [sp, #12]
   11fce:	2800      	cmp	r0, #0
   11fd0:	d15e      	bne.n	12090 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   11fd2:	2302      	movs	r3, #2
   11fd4:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
   11fd6:	7b23      	ldrb	r3, [r4, #12]
   11fd8:	2b00      	cmp	r3, #0
   11fda:	d031      	beq.n	12040 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fdc:	ab04      	add	r3, sp, #16
   11fde:	9300      	str	r3, [sp, #0]
   11fe0:	2201      	movs	r2, #1
   11fe2:	4b46      	ldr	r3, [pc, #280]	; (120fc <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
   11fe4:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fe6:	2103      	movs	r1, #3
   11fe8:	f7fe fd9a 	bl	10b20 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11fec:	2802      	cmp	r0, #2
   11fee:	d107      	bne.n	12000 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11ff0:	2201      	movs	r2, #1
   11ff2:	4611      	mov	r1, r2
   11ff4:	2003      	movs	r0, #3
   11ff6:	f7fd fea3 	bl	fd40 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
   11ffa:	9b04      	ldr	r3, [sp, #16]
   11ffc:	2b02      	cmp	r3, #2
   11ffe:	d01f      	beq.n	12040 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   12000:	9a04      	ldr	r2, [sp, #16]
   12002:	2a00      	cmp	r2, #0
   12004:	d136      	bne.n	12074 <role_disable+0x15c>
			ticks_xtal_to_start &= ~BIT(31);
   12006:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   1200a:	45b0      	cmp	r8, r6
   1200c:	d93e      	bls.n	1208c <role_disable+0x174>
				ret = mayfly_enqueue(
   1200e:	4b3c      	ldr	r3, [pc, #240]	; (12100 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12010:	4611      	mov	r1, r2
   12012:	2003      	movs	r0, #3
   12014:	f7fd febc 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12018:	b990      	cbnz	r0, 12040 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
   1201a:	7ba3      	ldrb	r3, [r4, #14]
   1201c:	b90b      	cbnz	r3, 12022 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
   1201e:	2301      	movs	r3, #1
   12020:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
   12022:	2300      	movs	r3, #0
   12024:	73a3      	strb	r3, [r4, #14]
	return ret_cb;
   12026:	9802      	ldr	r0, [sp, #8]
}
   12028:	b006      	add	sp, #24
   1202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
   1202e:	f7ff feaf 	bl	11d90 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12032:	9b02      	ldr	r3, [sp, #8]
   12034:	2b02      	cmp	r3, #2
   12036:	d0fa      	beq.n	1202e <role_disable+0x116>
   12038:	e794      	b.n	11f64 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1203a:	9b02      	ldr	r3, [sp, #8]
   1203c:	2b01      	cmp	r3, #1
   1203e:	d094      	beq.n	11f6a <role_disable+0x52>
		LL_ASSERT(0);
   12040:	4040      	eors	r0, r0
   12042:	f380 8811 	msr	BASEPRI, r0
   12046:	f04f 0004 	mov.w	r0, #4
   1204a:	df02      	svc	2
		ticks_xtal_to_start =
   1204c:	4b2a      	ldr	r3, [pc, #168]	; (120f8 <role_disable+0x1e0>)
   1204e:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   12052:	f8d3 80d0 	ldr.w	r8, [r3, #208]	; 0xd0
		break;
   12056:	e788      	b.n	11f6a <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
   12058:	7b63      	ldrb	r3, [r4, #13]
   1205a:	429d      	cmp	r5, r3
   1205c:	d104      	bne.n	12068 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1205e:	2201      	movs	r2, #1
   12060:	4611      	mov	r1, r2
   12062:	2003      	movs	r0, #3
   12064:	f7fd fe6c 	bl	fd40 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12068:	9b02      	ldr	r3, [sp, #8]
   1206a:	2b02      	cmp	r3, #2
   1206c:	d190      	bne.n	11f90 <role_disable+0x78>
			cpu_sleep();
   1206e:	f7ff fe8f 	bl	11d90 <cpu_sleep>
   12072:	e7f9      	b.n	12068 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   12074:	9b04      	ldr	r3, [sp, #16]
   12076:	2b01      	cmp	r3, #1
   12078:	d1e2      	bne.n	12040 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1207a:	2200      	movs	r2, #0
   1207c:	4611      	mov	r1, r2
   1207e:	4b20      	ldr	r3, [pc, #128]	; (12100 <role_disable+0x1e8>)
   12080:	2003      	movs	r0, #3
   12082:	f7fd fe85 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12086:	4602      	mov	r2, r0
   12088:	2800      	cmp	r0, #0
   1208a:	d1d9      	bne.n	12040 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1208c:	4b1d      	ldr	r3, [pc, #116]	; (12104 <role_disable+0x1ec>)
   1208e:	e7bf      	b.n	12010 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   12090:	9d03      	ldr	r5, [sp, #12]
   12092:	2d01      	cmp	r5, #1
   12094:	d1d4      	bne.n	12040 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
   12096:	2fff      	cmp	r7, #255	; 0xff
   12098:	d019      	beq.n	120ce <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
   1209a:	ab06      	add	r3, sp, #24
   1209c:	2202      	movs	r2, #2
   1209e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   120a2:	2103      	movs	r1, #3
   120a4:	9300      	str	r3, [sp, #0]
   120a6:	463a      	mov	r2, r7
   120a8:	4b14      	ldr	r3, [pc, #80]	; (120fc <role_disable+0x1e4>)
   120aa:	2000      	movs	r0, #0
   120ac:	f7fe fd38 	bl	10b20 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   120b0:	2802      	cmp	r0, #2
   120b2:	d107      	bne.n	120c4 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   120b4:	462a      	mov	r2, r5
   120b6:	4629      	mov	r1, r5
   120b8:	2003      	movs	r0, #3
   120ba:	f7fd fe41 	bl	fd40 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
   120be:	9b05      	ldr	r3, [sp, #20]
   120c0:	2b02      	cmp	r3, #2
   120c2:	d0bd      	beq.n	12040 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
   120c4:	9b05      	ldr	r3, [sp, #20]
   120c6:	b113      	cbz	r3, 120ce <role_disable+0x1b6>
   120c8:	9b05      	ldr	r3, [sp, #20]
   120ca:	2b01      	cmp	r3, #1
   120cc:	d1b8      	bne.n	12040 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
   120ce:	7be3      	ldrb	r3, [r4, #15]
   120d0:	2b00      	cmp	r3, #0
   120d2:	d0a2      	beq.n	1201a <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   120d4:	4b0c      	ldr	r3, [pc, #48]	; (12108 <role_disable+0x1f0>)
   120d6:	2204      	movs	r2, #4
   120d8:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   120da:	2200      	movs	r2, #0
   120dc:	4611      	mov	r1, r2
   120de:	2003      	movs	r0, #3
   120e0:	f7fd fe56 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   120e4:	2800      	cmp	r0, #0
   120e6:	d1ab      	bne.n	12040 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
   120e8:	7be3      	ldrb	r3, [r4, #15]
   120ea:	2b00      	cmp	r3, #0
   120ec:	d095      	beq.n	1201a <role_disable+0x102>
				cpu_sleep();
   120ee:	f7ff fe4f 	bl	11d90 <cpu_sleep>
   120f2:	e7f9      	b.n	120e8 <role_disable+0x1d0>
				return 1;
   120f4:	2001      	movs	r0, #1
   120f6:	e797      	b.n	12028 <role_disable+0x110>
   120f8:	20000f64 	.word	0x20000f64
   120fc:	00011d99 	.word	0x00011d99
   12100:	20006a28 	.word	0x20006a28
   12104:	20006ab8 	.word	0x20006ab8
   12108:	20006a58 	.word	0x20006a58

0001210c <isr_adv_ci_adva_check>:
{
   1210c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
   1210e:	7804      	ldrb	r4, [r0, #0]
   12110:	780a      	ldrb	r2, [r1, #0]
   12112:	f3c4 1380 	ubfx	r3, r4, #6, #1
   12116:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1211a:	d119      	bne.n	12150 <isr_adv_ci_adva_check+0x44>
   1211c:	f004 040f 	and.w	r4, r4, #15
   12120:	2c01      	cmp	r4, #1
   12122:	f101 0608 	add.w	r6, r1, #8
   12126:	f100 0502 	add.w	r5, r0, #2
   1212a:	d008      	beq.n	1213e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->payload.adv_ind.addr,
   1212c:	2206      	movs	r2, #6
   1212e:	4631      	mov	r1, r6
   12130:	4628      	mov	r0, r5
   12132:	f7ee fa7c 	bl	62e <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   12136:	fab0 f080 	clz	r0, r0
   1213a:	0940      	lsrs	r0, r0, #5
   1213c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->payload.direct_ind.adv_addr,
   1213e:	2206      	movs	r2, #6
   12140:	4631      	mov	r1, r6
   12142:	4628      	mov	r0, r5
   12144:	f7ee fa73 	bl	62e <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   12148:	2800      	cmp	r0, #0
   1214a:	d1ef      	bne.n	1212c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
   1214c:	4620      	mov	r0, r4
   1214e:	bd70      	pop	{r4, r5, r6, pc}
   12150:	2000      	movs	r0, #0
}
   12152:	bd70      	pop	{r4, r5, r6, pc}

00012154 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   12154:	4a0b      	ldr	r2, [pc, #44]	; (12184 <rx_fc_lock+0x30>)
   12156:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   1215a:	f892 1175 	ldrb.w	r1, [r2, #373]	; 0x175
   1215e:	4299      	cmp	r1, r3
   12160:	d10e      	bne.n	12180 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   12162:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   12166:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1216a:	f8a3 016e 	strh.w	r0, [r3, #366]	; 0x16e
		req = _radio.fc_req + 1;
   1216e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   12172:	3301      	adds	r3, #1
   12174:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
   12176:	2b03      	cmp	r3, #3
   12178:	bf08      	it	eq
   1217a:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
   1217c:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
   12180:	4770      	bx	lr
   12182:	bf00      	nop
   12184:	20000f64 	.word	0x20000f64

00012188 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
   12188:	4b04      	ldr	r3, [pc, #16]	; (1219c <ticker_job_disable+0x14>)
   1218a:	7c1b      	ldrb	r3, [r3, #16]
   1218c:	b123      	cbz	r3, 12198 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1218e:	2101      	movs	r1, #1
   12190:	2200      	movs	r2, #0
   12192:	4608      	mov	r0, r1
   12194:	f7fd bdd4 	b.w	fd40 <mayfly_enable>
   12198:	4770      	bx	lr
   1219a:	bf00      	nop
   1219c:	20000f64 	.word	0x20000f64

000121a0 <mayfly_xtal_retain.part.15>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
   121a0:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <mayfly_xtal_retain.part.15+0x2c>)
   121a4:	2200      	movs	r2, #0
   121a6:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   121a8:	b168      	cbz	r0, 121c6 <mayfly_xtal_retain.part.15+0x26>
   121aa:	2801      	cmp	r0, #1
   121ac:	d105      	bne.n	121ba <mayfly_xtal_retain.part.15+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   121ae:	4b08      	ldr	r3, [pc, #32]	; (121d0 <mayfly_xtal_retain.part.15+0x30>)
			retval = mayfly_enqueue(caller_id,
   121b0:	2200      	movs	r2, #0
   121b2:	4611      	mov	r1, r2
   121b4:	f7fd fdec 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!retval);
   121b8:	b138      	cbz	r0, 121ca <mayfly_xtal_retain.part.15+0x2a>
   121ba:	4040      	eors	r0, r0
   121bc:	f380 8811 	msr	BASEPRI, r0
   121c0:	f04f 0004 	mov.w	r0, #4
   121c4:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   121c6:	4b03      	ldr	r3, [pc, #12]	; (121d4 <mayfly_xtal_retain.part.15+0x34>)
   121c8:	e7f2      	b.n	121b0 <mayfly_xtal_retain.part.15+0x10>
   121ca:	bd08      	pop	{r3, pc}
   121cc:	20001160 	.word	0x20001160
   121d0:	20006a98 	.word	0x20006a98
   121d4:	20006a88 	.word	0x20006a88

000121d8 <rx_packet_set>:
{
   121d8:	b538      	push	{r3, r4, r5, lr}
   121da:	4605      	mov	r5, r0
   121dc:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
   121de:	2100      	movs	r1, #0
   121e0:	4608      	mov	r0, r1
   121e2:	f005 f873 	bl	172cc <radio_phy_set>
	if (conn->enc_rx) {
   121e6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   121ea:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   121ec:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
   121f0:	d50d      	bpl.n	1220e <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   121f2:	211f      	movs	r1, #31
   121f4:	2008      	movs	r0, #8
   121f6:	f005 f8af 	bl	17358 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   121fa:	4622      	mov	r2, r4
   121fc:	2100      	movs	r1, #0
   121fe:	f105 00d1 	add.w	r0, r5, #209	; 0xd1
   12202:	f005 fadb 	bl	177bc <radio_ccm_rx_pkt_set>
}
   12206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
   1220a:	f005 b8d3 	b.w	173b4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1220e:	2008      	movs	r0, #8
   12210:	211b      	movs	r1, #27
   12212:	f005 f8a1 	bl	17358 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12216:	4620      	mov	r0, r4
   12218:	e7f5      	b.n	12206 <rx_packet_set+0x2e>

0001221a <tx_packet_set>:
{
   1221a:	b538      	push	{r3, r4, r5, lr}
   1221c:	4605      	mov	r5, r0
   1221e:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   12220:	2100      	movs	r1, #0
   12222:	4608      	mov	r0, r1
   12224:	f005 f852 	bl	172cc <radio_phy_set>
	if (conn->enc_tx) {
   12228:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1222c:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   1222e:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
   12232:	d50c      	bpl.n	1224e <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   12234:	211f      	movs	r1, #31
   12236:	2008      	movs	r0, #8
   12238:	f005 f88e 	bl	17358 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   1223c:	4621      	mov	r1, r4
   1223e:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
   12242:	f005 faf7 	bl	17834 <radio_ccm_tx_pkt_set>
}
   12246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1224a:	f005 b8b9 	b.w	173c0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1224e:	2008      	movs	r0, #8
   12250:	211b      	movs	r1, #27
   12252:	f005 f881 	bl	17358 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12256:	4620      	mov	r0, r4
   12258:	e7f5      	b.n	12246 <tx_packet_set+0x2c>
	...

0001225c <isr_scan_tgta_check.isra.28>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
   1225c:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1225e:	4c17      	ldr	r4, [pc, #92]	; (122bc <isr_scan_tgta_check.isra.28+0x60>)
   12260:	7802      	ldrb	r2, [r0, #0]
   12262:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
			BDADDR_SIZE) == 0))) ||
   12266:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1226a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
   1226e:	4605      	mov	r5, r0
   12270:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
   12272:	d007      	beq.n	12284 <isr_scan_tgta_check.isra.28+0x28>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   12274:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   12278:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1227c:	f010 0002 	ands.w	r0, r0, #2
   12280:	d10b      	bne.n	1229a <isr_scan_tgta_check.isra.28+0x3e>
   12282:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
   12284:	f100 0108 	add.w	r1, r0, #8
   12288:	2206      	movs	r2, #6
   1228a:	f104 00de 	add.w	r0, r4, #222	; 0xde
   1228e:	f7ee f9ce 	bl	62e <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   12292:	2800      	cmp	r0, #0
   12294:	d1ee      	bne.n	12274 <isr_scan_tgta_check.isra.28+0x18>
			BDADDR_SIZE) == 0))) ||
   12296:	2001      	movs	r0, #1
   12298:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1229a:	f995 3000 	ldrsb.w	r3, [r5]
   1229e:	2b00      	cmp	r3, #0
   122a0:	da09      	bge.n	122b6 <isr_scan_tgta_check.isra.28+0x5a>
	    (pdu->rx_addr != 0) &&
   122a2:	7b6b      	ldrb	r3, [r5, #13]
   122a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   122a8:	2b40      	cmp	r3, #64	; 0x40
   122aa:	d104      	bne.n	122b6 <isr_scan_tgta_check.isra.28+0x5a>
		if (dir_report) {
   122ac:	2e00      	cmp	r6, #0
   122ae:	d0f2      	beq.n	12296 <isr_scan_tgta_check.isra.28+0x3a>
			*dir_report = true;
   122b0:	2001      	movs	r0, #1
   122b2:	7030      	strb	r0, [r6, #0]
   122b4:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
   122b6:	2000      	movs	r0, #0
}
   122b8:	bd70      	pop	{r4, r5, r6, pc}
   122ba:	bf00      	nop
   122bc:	20000f64 	.word	0x20000f64

000122c0 <chan_set.part.23>:
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   122c0:	4040      	eors	r0, r0
   122c2:	f380 8811 	msr	BASEPRI, r0
   122c6:	f04f 0004 	mov.w	r0, #4
   122ca:	df02      	svc	2

000122cc <prepare_normal_set>:
{
   122cc:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   122ce:	6804      	ldr	r4, [r0, #0]
   122d0:	2c00      	cmp	r4, #0
{
   122d2:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   122d4:	da19      	bge.n	1230a <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
   122d6:	6843      	ldr	r3, [r0, #4]
   122d8:	6885      	ldr	r5, [r0, #8]
		ticker_status =
   122da:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus =
   122dc:	429d      	cmp	r5, r3
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   122de:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   122e2:	bf34      	ite	cc
   122e4:	1ae4      	subcc	r4, r4, r3
   122e6:	1b64      	subcs	r4, r4, r5
		ticker_status =
   122e8:	4b09      	ldr	r3, [pc, #36]	; (12310 <prepare_normal_set+0x44>)
   122ea:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   122ec:	b2a4      	uxth	r4, r4
		ticker_status =
   122ee:	2300      	movs	r3, #0
   122f0:	9304      	str	r3, [sp, #16]
   122f2:	9303      	str	r3, [sp, #12]
   122f4:	9302      	str	r3, [sp, #8]
   122f6:	4618      	mov	r0, r3
   122f8:	9401      	str	r4, [sp, #4]
   122fa:	9400      	str	r4, [sp, #0]
   122fc:	f7fe fbca 	bl	10a94 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12300:	f030 0302 	bics.w	r3, r0, #2
   12304:	d001      	beq.n	1230a <prepare_normal_set+0x3e>
   12306:	f7ff ffdb 	bl	122c0 <chan_set.part.23>
}
   1230a:	b009      	add	sp, #36	; 0x24
   1230c:	bd30      	pop	{r4, r5, pc}
   1230e:	bf00      	nop
   12310:	00011da9 	.word	0x00011da9

00012314 <terminate_ind_rx_enqueue>:
{
   12314:	b510      	push	{r4, lr}
   12316:	4603      	mov	r3, r0
   12318:	460a      	mov	r2, r1
	radio_pdu_node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   1231a:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   1231e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   12322:	b908      	cbnz	r0, 12328 <terminate_ind_rx_enqueue+0x14>
   12324:	f7ff ffcc 	bl	122c0 <chan_set.part.23>
	radio_pdu_node_rx->hdr.handle = conn->handle;
   12328:	8c1c      	ldrh	r4, [r3, #32]
   1232a:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   1232e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   12332:	2404      	movs	r4, #4
	    _radio.packet_release_last;
   12334:	4a0a      	ldr	r2, [pc, #40]	; (12360 <terminate_ind_rx_enqueue+0x4c>)
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   12336:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	    _radio.packet_release_last;
   1233a:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   1233e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, radio_pdu_node_rx,
   12342:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   12346:	f7fd fcb3 	bl	fcb0 <memq_enqueue>
	LL_ASSERT(link);
   1234a:	b928      	cbnz	r0, 12358 <terminate_ind_rx_enqueue+0x44>
   1234c:	4040      	eors	r0, r0
   1234e:	f380 8811 	msr	BASEPRI, r0
   12352:	f04f 0004 	mov.w	r0, #4
   12356:	df02      	svc	2
}
   12358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   1235c:	f004 ba74 	b.w	16848 <radio_event_callback>
   12360:	20000f64 	.word	0x20000f64

00012364 <packet_rx_enqueue>:
{
   12364:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   12366:	4a16      	ldr	r2, [pc, #88]	; (123c0 <packet_rx_enqueue+0x5c>)
   12368:	f892 3135 	ldrb.w	r3, [r2, #309]	; 0x135
   1236c:	f892 1136 	ldrb.w	r1, [r2, #310]	; 0x136
   12370:	4299      	cmp	r1, r3
   12372:	d101      	bne.n	12378 <packet_rx_enqueue+0x14>
   12374:	f7ff ffa4 	bl	122c0 <chan_set.part.23>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   12378:	f892 1135 	ldrb.w	r1, [r2, #309]	; 0x135
   1237c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   12380:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	    _radio.packet_release_last;
   12384:	f892 316c 	ldrb.w	r3, [r2, #364]	; 0x16c
	link = radio_pdu_node_rx->hdr.onion.link;
   12388:	6808      	ldr	r0, [r1, #0]
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   1238a:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
   1238c:	f892 3135 	ldrb.w	r3, [r2, #309]	; 0x135
	if (last == _radio.packet_rx_count) {
   12390:	f892 4134 	ldrb.w	r4, [r2, #308]	; 0x134
	last = _radio.packet_rx_last + 1;
   12394:	3301      	adds	r3, #1
   12396:	b2db      	uxtb	r3, r3
		last = 0;
   12398:	429c      	cmp	r4, r3
   1239a:	bf08      	it	eq
   1239c:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
   1239e:	f882 3135 	strb.w	r3, [r2, #309]	; 0x135
	link = memq_enqueue(link, radio_pdu_node_rx,
   123a2:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   123a6:	f7fd fc83 	bl	fcb0 <memq_enqueue>
	LL_ASSERT(link);
   123aa:	b928      	cbnz	r0, 123b8 <packet_rx_enqueue+0x54>
   123ac:	4040      	eors	r0, r0
   123ae:	f380 8811 	msr	BASEPRI, r0
   123b2:	f04f 0004 	mov.w	r0, #4
   123b6:	df02      	svc	2
}
   123b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   123bc:	f004 ba44 	b.w	16848 <radio_event_callback>
   123c0:	20000f64 	.word	0x20000f64

000123c4 <mayfly_adv_stop>:
{
   123c4:	b510      	push	{r4, lr}
	radio_pdu_node_rx = packet_rx_reserve_get(1);
   123c6:	2001      	movs	r0, #1
   123c8:	f7ff fd2a 	bl	11e20 <packet_rx_reserve_get>
	LL_ASSERT(radio_pdu_node_rx);
   123cc:	4604      	mov	r4, r0
   123ce:	b908      	cbnz	r0, 123d4 <mayfly_adv_stop+0x10>
   123d0:	f7ff ff76 	bl	122c0 <chan_set.part.23>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   123d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   123d8:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   123da:	2303      	movs	r3, #3
   123dc:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   123de:	2210      	movs	r2, #16
   123e0:	2100      	movs	r1, #0
   123e2:	300b      	adds	r0, #11
   123e4:	f7ee f964 	bl	6b0 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   123e8:	233c      	movs	r3, #60	; 0x3c
   123ea:	72e3      	strb	r3, [r4, #11]
}
   123ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   123f0:	f7ff bfb8 	b.w	12364 <packet_rx_enqueue>

000123f4 <isr_rx_scan_report.isra.35>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   123f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123f8:	4680      	mov	r8, r0
	radio_pdu_node_rx = packet_rx_reserve_get(3);
   123fa:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
   123fc:	460f      	mov	r7, r1
	radio_pdu_node_rx = packet_rx_reserve_get(3);
   123fe:	f7ff fd0f 	bl	11e20 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
   12402:	4604      	mov	r4, r0
   12404:	b1d0      	cbz	r0, 1243c <isr_rx_scan_report.isra.35+0x48>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   12406:	f64f 73ff 	movw	r3, #65535	; 0xffff
			     pdu_adv_rx->len] =
   1240a:	7a46      	ldrb	r6, [r0, #9]
	radio_pdu_node_rx->hdr.handle = 0xffff;
   1240c:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1240e:	2302      	movs	r3, #2
   12410:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   12412:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   12416:	441e      	add	r6, r3
			     pdu_adv_rx->len] =
   12418:	f1b8 0f00 	cmp.w	r8, #0
   1241c:	d00c      	beq.n	12438 <isr_rx_scan_report.isra.35+0x44>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   1241e:	f005 f877 	bl	17510 <radio_rssi_get>
			     pdu_adv_rx->len] =
   12422:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   12426:	55a8      	strb	r0, [r5, r6]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   12428:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1242a:	441d      	add	r5, r3
   1242c:	712f      	strb	r7, [r5, #4]
	packet_rx_enqueue();
   1242e:	f7ff ff99 	bl	12364 <packet_rx_enqueue>
	return 0;
   12432:	2000      	movs	r0, #0
   12434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     pdu_adv_rx->len] =
   12438:	207f      	movs	r0, #127	; 0x7f
   1243a:	e7f4      	b.n	12426 <isr_rx_scan_report.isra.35+0x32>
		return 1;
   1243c:	2001      	movs	r0, #1
}
   1243e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012442 <chan_set>:
	switch (chan) {
   12442:	2826      	cmp	r0, #38	; 0x26
{
   12444:	b510      	push	{r4, lr}
   12446:	4604      	mov	r4, r0
	switch (chan) {
   12448:	d00b      	beq.n	12462 <chan_set+0x20>
   1244a:	2827      	cmp	r0, #39	; 0x27
   1244c:	d00b      	beq.n	12466 <chan_set+0x24>
   1244e:	2825      	cmp	r0, #37	; 0x25
   12450:	d10b      	bne.n	1246a <chan_set+0x28>
		radio_freq_chan_set(2);
   12452:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
   12454:	f004 ff50 	bl	172f8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12458:	4620      	mov	r0, r4
}
   1245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1245e:	f004 bf51 	b.w	17304 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   12462:	201a      	movs	r0, #26
   12464:	e7f6      	b.n	12454 <chan_set+0x12>
		radio_freq_chan_set(80);
   12466:	2050      	movs	r0, #80	; 0x50
   12468:	e7f4      	b.n	12454 <chan_set+0x12>
		if (chan < 11) {
   1246a:	280a      	cmp	r0, #10
   1246c:	d802      	bhi.n	12474 <chan_set+0x32>
			radio_freq_chan_set(4 + (2 * chan));
   1246e:	3002      	adds	r0, #2
   12470:	0040      	lsls	r0, r0, #1
   12472:	e7ef      	b.n	12454 <chan_set+0x12>
		} else if (chan < 40) {
   12474:	2827      	cmp	r0, #39	; 0x27
   12476:	d801      	bhi.n	1247c <chan_set+0x3a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12478:	3003      	adds	r0, #3
   1247a:	e7f9      	b.n	12470 <chan_set+0x2e>
   1247c:	f7ff ff20 	bl	122c0 <chan_set.part.23>

00012480 <adv_setup>:
{
   12480:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   12482:	4c29      	ldr	r4, [pc, #164]	; (12528 <adv_setup+0xa8>)
   12484:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   12488:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1248c:	429a      	cmp	r2, r3
   1248e:	d006      	beq.n	1249e <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
   12490:	3301      	adds	r3, #1
   12492:	b2db      	uxtb	r3, r3
			first = 0;
   12494:	2b02      	cmp	r3, #2
   12496:	bf08      	it	eq
   12498:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   1249a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	if (_radio.advertiser.scan_data.first != _radio.
   1249e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   124a2:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
   124a6:	429a      	cmp	r2, r3
   124a8:	d006      	beq.n	124b8 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
   124aa:	3301      	adds	r3, #1
   124ac:	b2db      	uxtb	r3, r3
			first = 0;
   124ae:	2b02      	cmp	r3, #2
   124b0:	bf08      	it	eq
   124b2:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   124b4:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
	pdu = (struct pdu_adv *)
   124b8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   124bc:	2326      	movs	r3, #38	; 0x26
   124be:	2527      	movs	r5, #39	; 0x27
   124c0:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
   124c4:	1960      	adds	r0, r4, r5
   124c6:	f004 ff7b 	bl	173c0 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   124ca:	5d63      	ldrb	r3, [r4, r5]
   124cc:	f003 030f 	and.w	r3, r3, #15
   124d0:	2b02      	cmp	r3, #2
   124d2:	d021      	beq.n	12518 <adv_setup+0x98>
		_radio.state = STATE_TX;
   124d4:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
   124d6:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   124d8:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   124da:	f005 f87b 	bl	175d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   124de:	2000      	movs	r0, #0
   124e0:	f004 ffe8 	bl	174b4 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
   124e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   124e8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   124ec:	b2d3      	uxtb	r3, r2
   124ee:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
   124f0:	2000      	movs	r0, #0
   124f2:	f011 0f01 	tst.w	r1, #1
   124f6:	f100 0501 	add.w	r5, r0, #1
   124fa:	d012      	beq.n	12522 <adv_setup+0xa2>
		(_radio.advertiser.chan_map_current - 1);
   124fc:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
   124fe:	4013      	ands	r3, r2
   12500:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	chan_set(37 + chan);
   12504:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
   12506:	f363 0243 	bfi	r2, r3, #1, #3
   1250a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	chan_set(37 + chan);
   1250e:	3025      	adds	r0, #37	; 0x25
}
   12510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
   12514:	f7ff bf95 	b.w	12442 <chan_set>
		_radio.state = STATE_CLOSE;
   12518:	2303      	movs	r3, #3
   1251a:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   1251c:	f004 ffe0 	bl	174e0 <radio_switch_complete_and_disable>
   12520:	e7e0      	b.n	124e4 <adv_setup+0x64>
		bitmap >>= 1;
   12522:	0849      	lsrs	r1, r1, #1
   12524:	4628      	mov	r0, r5
   12526:	e7e4      	b.n	124f2 <adv_setup+0x72>
   12528:	20000f64 	.word	0x20000f64

0001252c <pdu_node_tx_release>:
{
   1252c:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   1252e:	4a10      	ldr	r2, [pc, #64]	; (12570 <pdu_node_tx_release+0x44>)
   12530:	f892 316c 	ldrb.w	r3, [r2, #364]	; 0x16c
	if (last == _radio.packet_tx_count) {
   12534:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
	last = _radio.packet_release_last + 1;
   12538:	3301      	adds	r3, #1
   1253a:	b2db      	uxtb	r3, r3
		last = 0;
   1253c:	429c      	cmp	r4, r3
   1253e:	bf08      	it	eq
   12540:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
   12542:	f892 416b 	ldrb.w	r4, [r2, #363]	; 0x16b
   12546:	429c      	cmp	r4, r3
   12548:	d101      	bne.n	1254e <pdu_node_tx_release+0x22>
   1254a:	f7ff feb9 	bl	122c0 <chan_set.part.23>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   1254e:	f892 516c 	ldrb.w	r5, [r2, #364]	; 0x16c
   12552:	f8d2 4164 	ldr.w	r4, [r2, #356]	; 0x164
   12556:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   1255a:	f892 016c 	ldrb.w	r0, [r2, #364]	; 0x16c
   1255e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   12562:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
   12564:	f882 316c 	strb.w	r3, [r2, #364]	; 0x16c
}
   12568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
   1256c:	f004 b96c 	b.w	16848 <radio_event_callback>
   12570:	20000f64 	.word	0x20000f64

00012574 <packet_tx_enqueue>:
{
   12574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   12578:	4c24      	ldr	r4, [pc, #144]	; (1260c <packet_tx_enqueue+0x98>)
{
   1257a:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
   1257c:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1257e:	b12e      	cbz	r6, 1258c <packet_tx_enqueue+0x18>
   12580:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
   12584:	f894 216a 	ldrb.w	r2, [r4, #362]	; 0x16a
   12588:	429a      	cmp	r2, r3
   1258a:	d101      	bne.n	12590 <packet_tx_enqueue+0x1c>
   1258c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12590:	f894 8169 	ldrb.w	r8, [r4, #361]	; 0x169
   12594:	f8d4 9160 	ldr.w	r9, [r4, #352]	; 0x160
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12598:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   1259c:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   125a0:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   125a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
		node_tx_new = pdu_data_q_tx->node_tx;
   125a8:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
   125aa:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   125ac:	f7fd fb66 	bl	fc7c <mem_get>
   125b0:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
   125b2:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
   125b6:	8c1a      	ldrh	r2, [r3, #32]
   125b8:	4282      	cmp	r2, r0
   125ba:	d11f      	bne.n	125fc <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
   125bc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   125c0:	b942      	cbnz	r2, 125d4 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
   125c2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
				conn->pkt_tx_data = node_tx_new;
   125c6:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
				if (conn->pkt_tx_head == 0) {
   125ca:	b91a      	cbnz	r2, 125d4 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
   125cc:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
					conn->pkt_tx_last = NULL;
   125d0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			if (conn->pkt_tx_last) {
   125d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   125d8:	b102      	cbz	r2, 125dc <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
   125da:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
   125dc:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
		first = _radio.packet_tx_first + 1;
   125e0:	f894 3169 	ldrb.w	r3, [r4, #361]	; 0x169
		if (first == _radio.packet_tx_count) {
   125e4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
		first = _radio.packet_tx_first + 1;
   125e8:	3301      	adds	r3, #1
   125ea:	b2db      	uxtb	r3, r3
			first = 0;
   125ec:	429a      	cmp	r2, r3
   125ee:	bf08      	it	eq
   125f0:	2300      	moveq	r3, #0
   125f2:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
   125f4:	f884 3169 	strb.w	r3, [r4, #361]	; 0x169
   125f8:	b2f6      	uxtb	r6, r6
   125fa:	e7c0      	b.n	1257e <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   125fc:	792b      	ldrb	r3, [r5, #4]
   125fe:	f367 0301 	bfi	r3, r7, #0, #2
   12602:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   12604:	4629      	mov	r1, r5
   12606:	f7ff ff91 	bl	1252c <pdu_node_tx_release>
   1260a:	e7e9      	b.n	125e0 <packet_tx_enqueue+0x6c>
   1260c:	20000f64 	.word	0x20000f64

00012610 <connection_release>:
{
   12610:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12612:	2201      	movs	r2, #1
{
   12614:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12616:	4611      	mov	r1, r2
   12618:	2000      	movs	r0, #0
   1261a:	f7fd fb91 	bl	fd40 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1261e:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
   12622:	2100      	movs	r1, #0
   12624:	f242 231a 	movw	r3, #8730	; 0x221a
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12628:	3207      	adds	r2, #7
	ticker_status =
   1262a:	9300      	str	r3, [sp, #0]
   1262c:	4608      	mov	r0, r1
   1262e:	4b3a      	ldr	r3, [pc, #232]	; (12718 <connection_release+0x108>)
   12630:	b2d2      	uxtb	r2, r2
   12632:	f7fe fa75 	bl	10b20 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12636:	f030 0102 	bics.w	r1, r0, #2
   1263a:	d005      	beq.n	12648 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1263c:	4040      	eors	r0, r0
   1263e:	f380 8811 	msr	BASEPRI, r0
   12642:	f04f 0004 	mov.w	r0, #4
   12646:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
   12648:	4b34      	ldr	r3, [pc, #208]	; (1271c <connection_release+0x10c>)
   1264a:	7c1a      	ldrb	r2, [r3, #16]
   1264c:	2a05      	cmp	r2, #5
   1264e:	461d      	mov	r5, r3
   12650:	d11b      	bne.n	1268a <connection_release+0x7a>
					  conn->handle))) {
   12652:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12654:	7b18      	ldrb	r0, [r3, #12]
   12656:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
   12658:	4290      	cmp	r0, r2
   1265a:	d116      	bne.n	1268a <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
   1265c:	7319      	strb	r1, [r3, #12]
		ticker_status =
   1265e:	f242 232b 	movw	r3, #8747	; 0x222b
   12662:	9300      	str	r3, [sp, #0]
   12664:	2201      	movs	r2, #1
   12666:	4b2c      	ldr	r3, [pc, #176]	; (12718 <connection_release+0x108>)
   12668:	4608      	mov	r0, r1
   1266a:	f7fe fa59 	bl	10b20 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1266e:	f030 0202 	bics.w	r2, r0, #2
   12672:	d1e3      	bne.n	1263c <connection_release+0x2c>
		ticker_status =
   12674:	f242 2332 	movw	r3, #8754	; 0x2232
   12678:	9300      	str	r3, [sp, #0]
   1267a:	4611      	mov	r1, r2
   1267c:	4b26      	ldr	r3, [pc, #152]	; (12718 <connection_release+0x108>)
   1267e:	4610      	mov	r0, r2
   12680:	f7fe fa4e 	bl	10b20 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12684:	f030 0302 	bics.w	r3, r0, #2
   12688:	d1d8      	bne.n	1263c <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1268a:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   1268e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   12692:	4299      	cmp	r1, r3
   12694:	d003      	beq.n	1269e <connection_release+0x8e>
   12696:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1269a:	4299      	cmp	r1, r3
   1269c:	d101      	bne.n	126a2 <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1269e:	4e20      	ldr	r6, [pc, #128]	; (12720 <connection_release+0x110>)
   126a0:	e012      	b.n	126c8 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   126a2:	790b      	ldrb	r3, [r1, #4]
   126a4:	f36f 0301 	bfc	r3, #0, #2
   126a8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   126aa:	680b      	ldr	r3, [r1, #0]
   126ac:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		pdu_node_tx_release(conn->handle, node_tx);
   126b0:	8c20      	ldrh	r0, [r4, #32]
   126b2:	f7ff ff3b 	bl	1252c <pdu_node_tx_release>
   126b6:	e7e8      	b.n	1268a <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   126b8:	6803      	ldr	r3, [r0, #0]
   126ba:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   126be:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   126c2:	4631      	mov	r1, r6
   126c4:	f7fd fac5 	bl	fc52 <mem_release>
	while ((conn->pkt_tx_head) &&
   126c8:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   126cc:	b118      	cbz	r0, 126d6 <connection_release+0xc6>
   126ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   126d2:	4298      	cmp	r0, r3
   126d4:	d1f0      	bne.n	126b8 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
   126d6:	2300      	movs	r3, #0
   126d8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	conn->pkt_tx_ctrl_last = NULL;
   126dc:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	while (conn->pkt_tx_head) {
   126e0:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   126e4:	b951      	cbnz	r1, 126fc <connection_release+0xec>
	conn->handle = 0xffff;
   126e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   126ea:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   126ec:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
   126f0:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
   126f2:	bf08      	it	eq
   126f4:	f8c5 117c 	streq.w	r1, [r5, #380]	; 0x17c
}
   126f8:	b002      	add	sp, #8
   126fa:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   126fc:	790b      	ldrb	r3, [r1, #4]
   126fe:	f36f 0301 	bfc	r3, #0, #2
   12702:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12704:	680b      	ldr	r3, [r1, #0]
   12706:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		conn->pkt_tx_data = conn->pkt_tx_head;
   1270a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		pdu_node_tx_release(conn->handle, node_tx);
   1270e:	8c20      	ldrh	r0, [r4, #32]
   12710:	f7ff ff0c 	bl	1252c <pdu_node_tx_release>
   12714:	e7e4      	b.n	126e0 <connection_release+0xd0>
   12716:	bf00      	nop
   12718:	00012891 	.word	0x00012891
   1271c:	20000f64 	.word	0x20000f64
   12720:	200010b4 	.word	0x200010b4

00012724 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
   12724:	b2c0      	uxtb	r0, r0
{
   12726:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12728:	1f03      	subs	r3, r0, #4
   1272a:	2b01      	cmp	r3, #1
   1272c:	d901      	bls.n	12732 <mayfly_radio_stop+0xe>
   1272e:	f7ff fdc7 	bl	122c0 <chan_set.part.23>
	radio_used = ((_radio.state != STATE_NONE) &&
   12732:	4a08      	ldr	r2, [pc, #32]	; (12754 <mayfly_radio_stop+0x30>)
   12734:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
   12736:	b13b      	cbz	r3, 12748 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
   12738:	3b04      	subs	r3, #4
   1273a:	2b01      	cmp	r3, #1
   1273c:	d904      	bls.n	12748 <mayfly_radio_stop+0x24>
			_radio.state = state;
   1273e:	7410      	strb	r0, [r2, #16]
}
   12740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
   12744:	f004 be5c 	b.w	17400 <radio_disable>
	if (radio_used || !radio_is_idle()) {
   12748:	f004 fe8c 	bl	17464 <radio_is_idle>
   1274c:	2800      	cmp	r0, #0
   1274e:	d0f7      	beq.n	12740 <mayfly_radio_stop+0x1c>
}
   12750:	bd08      	pop	{r3, pc}
   12752:	bf00      	nop
   12754:	20000f64 	.word	0x20000f64

00012758 <mayfly_radio_active>:
{
   12758:	b508      	push	{r3, lr}
   1275a:	4a0a      	ldr	r2, [pc, #40]	; (12784 <mayfly_radio_active+0x2c>)
		if (s_active++) {
   1275c:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
   1275e:	b138      	cbz	r0, 12770 <mayfly_radio_active+0x18>
		if (s_active++) {
   12760:	1c59      	adds	r1, r3, #1
   12762:	7011      	strb	r1, [r2, #0]
   12764:	b963      	cbnz	r3, 12780 <mayfly_radio_active+0x28>
		radio_active_callback(1);
   12766:	2001      	movs	r0, #1
}
   12768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
   1276c:	f004 b86a 	b.w	16844 <radio_active_callback>
		LL_ASSERT(s_active);
   12770:	b90b      	cbnz	r3, 12776 <mayfly_radio_active+0x1e>
   12772:	f7ff fda5 	bl	122c0 <chan_set.part.23>
		if (--s_active) {
   12776:	3b01      	subs	r3, #1
   12778:	b2db      	uxtb	r3, r3
   1277a:	7013      	strb	r3, [r2, #0]
   1277c:	2b00      	cmp	r3, #0
   1277e:	d0f3      	beq.n	12768 <mayfly_radio_active+0x10>
   12780:	bd08      	pop	{r3, pc}
   12782:	bf00      	nop
   12784:	20001114 	.word	0x20001114

00012788 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
   12788:	2000      	movs	r0, #0
   1278a:	f7ff bfe5 	b.w	12758 <mayfly_radio_active>
	...

00012790 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12790:	2200      	movs	r2, #0
{
   12792:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12794:	4611      	mov	r1, r2
   12796:	4b04      	ldr	r3, [pc, #16]	; (127a8 <event_xtal+0x18>)
   12798:	4610      	mov	r0, r2
   1279a:	f7fd faf9 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1279e:	b108      	cbz	r0, 127a4 <event_xtal+0x14>
   127a0:	f7ff fd8e 	bl	122c0 <chan_set.part.23>
   127a4:	bd08      	pop	{r3, pc}
   127a6:	bf00      	nop
   127a8:	20006a68 	.word	0x20006a68

000127ac <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   127ac:	2200      	movs	r2, #0
{
   127ae:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   127b0:	4611      	mov	r1, r2
   127b2:	4b04      	ldr	r3, [pc, #16]	; (127c4 <event_active+0x18>)
   127b4:	4610      	mov	r0, r2
   127b6:	f7fd faeb 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   127ba:	b108      	cbz	r0, 127c0 <event_active+0x14>
   127bc:	f7ff fd80 	bl	122c0 <chan_set.part.23>
   127c0:	bd08      	pop	{r3, pc}
   127c2:	bf00      	nop
   127c4:	200069f8 	.word	0x200069f8

000127c8 <event_stop>:
	s_mfy_radio_stop.param = context;
   127c8:	4a06      	ldr	r2, [pc, #24]	; (127e4 <event_stop+0x1c>)
{
   127ca:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   127cc:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   127ce:	4613      	mov	r3, r2
   127d0:	2200      	movs	r2, #0
   127d2:	4611      	mov	r1, r2
   127d4:	4610      	mov	r0, r2
   127d6:	f7fd fadb 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   127da:	b108      	cbz	r0, 127e0 <event_stop+0x18>
   127dc:	f7ff fd70 	bl	122c0 <chan_set.part.23>
   127e0:	bd08      	pop	{r3, pc}
   127e2:	bf00      	nop
   127e4:	20006a38 	.word	0x20006a38

000127e8 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
   127e8:	b508      	push	{r3, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   127ea:	b108      	cbz	r0, 127f0 <ticker_op_latency_cancelled+0x8>
   127ec:	f7ff fd68 	bl	122c0 <chan_set.part.23>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   127f0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   127f4:	f360 0341 	bfi	r3, r0, #1, #1
   127f8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
   127fc:	bd08      	pop	{r3, pc}
	...

00012800 <ticker_update_slave_assert>:
{
   12800:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   12802:	b130      	cbz	r0, 12812 <ticker_update_slave_assert+0x12>
   12804:	4b03      	ldr	r3, [pc, #12]	; (12814 <ticker_update_slave_assert+0x14>)
   12806:	7b9b      	ldrb	r3, [r3, #14]
   12808:	b2c9      	uxtb	r1, r1
   1280a:	4299      	cmp	r1, r3
   1280c:	d001      	beq.n	12812 <ticker_update_slave_assert+0x12>
   1280e:	f7ff fd57 	bl	122c0 <chan_set.part.23>
   12812:	bd08      	pop	{r3, pc}
   12814:	20000f64 	.word	0x20000f64

00012818 <ticker_update_adv_assert>:
{
   12818:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1281a:	b128      	cbz	r0, 12828 <ticker_update_adv_assert+0x10>
   1281c:	4b03      	ldr	r3, [pc, #12]	; (1282c <ticker_update_adv_assert+0x14>)
   1281e:	7b9b      	ldrb	r3, [r3, #14]
   12820:	2b05      	cmp	r3, #5
   12822:	d001      	beq.n	12828 <ticker_update_adv_assert+0x10>
   12824:	f7ff fd4c 	bl	122c0 <chan_set.part.23>
   12828:	bd08      	pop	{r3, pc}
   1282a:	bf00      	nop
   1282c:	20000f64 	.word	0x20000f64

00012830 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   12830:	2801      	cmp	r0, #1
{
   12832:	b508      	push	{r3, lr}
   12834:	4b09      	ldr	r3, [pc, #36]	; (1285c <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
   12836:	d107      	bne.n	12848 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   12838:	7b9a      	ldrb	r2, [r3, #14]
   1283a:	2a06      	cmp	r2, #6
   1283c:	d102      	bne.n	12844 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
   1283e:	2200      	movs	r2, #0
   12840:	739a      	strb	r2, [r3, #14]
   12842:	bd08      	pop	{r3, pc}
   12844:	f7ff fd3c 	bl	122c0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   12848:	7b1b      	ldrb	r3, [r3, #12]
   1284a:	2b06      	cmp	r3, #6
   1284c:	d105      	bne.n	1285a <ticker_stop_scan_assert+0x2a>
   1284e:	4040      	eors	r0, r0
   12850:	f380 8811 	msr	BASEPRI, r0
   12854:	f04f 0004 	mov.w	r0, #4
   12858:	df02      	svc	2
   1285a:	bd08      	pop	{r3, pc}
   1285c:	20000f64 	.word	0x20000f64

00012860 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   12860:	2801      	cmp	r0, #1
{
   12862:	b508      	push	{r3, lr}
   12864:	4b09      	ldr	r3, [pc, #36]	; (1288c <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
   12866:	d107      	bne.n	12878 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   12868:	7b9a      	ldrb	r2, [r3, #14]
   1286a:	2a05      	cmp	r2, #5
   1286c:	d102      	bne.n	12874 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
   1286e:	2200      	movs	r2, #0
   12870:	739a      	strb	r2, [r3, #14]
   12872:	bd08      	pop	{r3, pc}
   12874:	f7ff fd24 	bl	122c0 <chan_set.part.23>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   12878:	7b1b      	ldrb	r3, [r3, #12]
   1287a:	2b05      	cmp	r3, #5
   1287c:	d105      	bne.n	1288a <ticker_stop_adv_assert+0x2a>
   1287e:	4040      	eors	r0, r0
   12880:	f380 8811 	msr	BASEPRI, r0
   12884:	f04f 0004 	mov.w	r0, #4
   12888:	df02      	svc	2
   1288a:	bd08      	pop	{r3, pc}
   1288c:	20000f64 	.word	0x20000f64

00012890 <ticker_success_assert>:
{
   12890:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12892:	b108      	cbz	r0, 12898 <ticker_success_assert+0x8>
   12894:	f7ff fd14 	bl	122c0 <chan_set.part.23>
   12898:	bd08      	pop	{r3, pc}
	...

0001289c <ticker_stop_adv_stop>:
{
   1289c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1289e:	4c3e      	ldr	r4, [pc, #248]	; (12998 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
   128a0:	b120      	cbz	r0, 128ac <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   128a2:	7ba3      	ldrb	r3, [r4, #14]
   128a4:	2b05      	cmp	r3, #5
   128a6:	d075      	beq.n	12994 <ticker_stop_adv_stop+0xf8>
   128a8:	f7ff fd0a 	bl	122c0 <chan_set.part.23>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   128ac:	7b23      	ldrb	r3, [r4, #12]
   128ae:	2b05      	cmp	r3, #5
   128b0:	d002      	beq.n	128b8 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   128b2:	7b63      	ldrb	r3, [r4, #13]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   128b4:	2b05      	cmp	r3, #5
   128b6:	d165      	bne.n	12984 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   128b8:	ab04      	add	r3, sp, #16
   128ba:	2202      	movs	r2, #2
   128bc:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   128c0:	2200      	movs	r2, #0
   128c2:	9300      	str	r3, [sp, #0]
   128c4:	2101      	movs	r1, #1
   128c6:	4b35      	ldr	r3, [pc, #212]	; (1299c <ticker_stop_adv_stop+0x100>)
   128c8:	4610      	mov	r0, r2
   128ca:	f7fe f929 	bl	10b20 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   128ce:	2802      	cmp	r0, #2
   128d0:	d00d      	beq.n	128ee <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   128d2:	9802      	ldr	r0, [sp, #8]
   128d4:	b1c0      	cbz	r0, 12908 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   128d6:	9802      	ldr	r0, [sp, #8]
   128d8:	2801      	cmp	r0, #1
   128da:	d119      	bne.n	12910 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
   128dc:	7be3      	ldrb	r3, [r4, #15]
   128de:	2b00      	cmp	r3, #0
   128e0:	d050      	beq.n	12984 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   128e2:	4b2f      	ldr	r3, [pc, #188]	; (129a0 <ticker_stop_adv_stop+0x104>)
   128e4:	2204      	movs	r2, #4
   128e6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   128e8:	2200      	movs	r2, #0
   128ea:	4611      	mov	r1, r2
   128ec:	e046      	b.n	1297c <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   128ee:	2201      	movs	r2, #1
   128f0:	4611      	mov	r1, r2
   128f2:	4610      	mov	r0, r2
   128f4:	f7fd fa24 	bl	fd40 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   128f8:	9b02      	ldr	r3, [sp, #8]
   128fa:	2b02      	cmp	r3, #2
   128fc:	d1e9      	bne.n	128d2 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   128fe:	2101      	movs	r1, #1
   12900:	2000      	movs	r0, #0
   12902:	f7fe f9b7 	bl	10c74 <ticker_job_sched>
   12906:	e7f7      	b.n	128f8 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   12908:	2302      	movs	r3, #2
   1290a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   1290c:	7b23      	ldrb	r3, [r4, #12]
   1290e:	b92b      	cbnz	r3, 1291c <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
   12910:	4040      	eors	r0, r0
   12912:	f380 8811 	msr	BASEPRI, r0
   12916:	f04f 0004 	mov.w	r0, #4
   1291a:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1291c:	ab03      	add	r3, sp, #12
   1291e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
   12920:	7320      	strb	r0, [r4, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12922:	4611      	mov	r1, r2
   12924:	9300      	str	r3, [sp, #0]
   12926:	4b1d      	ldr	r3, [pc, #116]	; (1299c <ticker_stop_adv_stop+0x100>)
   12928:	f7fe f8fa 	bl	10b20 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1292c:	2802      	cmp	r0, #2
   1292e:	d00f      	beq.n	12950 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   12930:	9a03      	ldr	r2, [sp, #12]
   12932:	b1d2      	cbz	r2, 1296a <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   12934:	9c03      	ldr	r4, [sp, #12]
   12936:	2c01      	cmp	r4, #1
   12938:	d1ea      	bne.n	12910 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1293a:	2200      	movs	r2, #0
   1293c:	4611      	mov	r1, r2
   1293e:	4b19      	ldr	r3, [pc, #100]	; (129a4 <ticker_stop_adv_stop+0x108>)
   12940:	4620      	mov	r0, r4
   12942:	f7fd fa25 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12946:	4602      	mov	r2, r0
   12948:	2800      	cmp	r0, #0
   1294a:	d1e1      	bne.n	12910 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1294c:	4b16      	ldr	r3, [pc, #88]	; (129a8 <ticker_stop_adv_stop+0x10c>)
   1294e:	e013      	b.n	12978 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12950:	2201      	movs	r2, #1
   12952:	4611      	mov	r1, r2
   12954:	4610      	mov	r0, r2
   12956:	f7fd f9f3 	bl	fd40 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   1295a:	9b03      	ldr	r3, [sp, #12]
   1295c:	2b02      	cmp	r3, #2
   1295e:	d1e7      	bne.n	12930 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12960:	2101      	movs	r1, #1
   12962:	2000      	movs	r0, #0
   12964:	f7fe f986 	bl	10c74 <ticker_job_sched>
   12968:	e7f7      	b.n	1295a <ticker_stop_adv_stop+0xbe>
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   1296a:	6963      	ldr	r3, [r4, #20]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1296c:	69a1      	ldr	r1, [r4, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   1296e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12972:	4299      	cmp	r1, r3
   12974:	d9ea      	bls.n	1294c <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
   12976:	4b0b      	ldr	r3, [pc, #44]	; (129a4 <ticker_stop_adv_stop+0x108>)
   12978:	4611      	mov	r1, r2
   1297a:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1297c:	f7fd fa08 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12980:	2800      	cmp	r0, #0
   12982:	d1c5      	bne.n	12910 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12984:	2200      	movs	r2, #0
   12986:	4b09      	ldr	r3, [pc, #36]	; (129ac <ticker_stop_adv_stop+0x110>)
   12988:	4611      	mov	r1, r2
   1298a:	2001      	movs	r0, #1
   1298c:	f7fd fa00 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12990:	2800      	cmp	r0, #0
   12992:	d1bd      	bne.n	12910 <ticker_stop_adv_stop+0x74>
}
   12994:	b004      	add	sp, #16
   12996:	bd10      	pop	{r4, pc}
   12998:	20000f64 	.word	0x20000f64
   1299c:	00011d99 	.word	0x00011d99
   129a0:	20006a48 	.word	0x20006a48
   129a4:	20006a18 	.word	0x20006a18
   129a8:	20006aa8 	.word	0x20006aa8
   129ac:	200069e8 	.word	0x200069e8

000129b0 <adv_scan_configure.constprop.45>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   129b0:	b513      	push	{r0, r1, r4, lr}
	u32_t aa = 0x8e89bed6;
   129b2:	ac02      	add	r4, sp, #8
   129b4:	4b0e      	ldr	r3, [pc, #56]	; (129f0 <adv_scan_configure.constprop.45+0x40>)
   129b6:	f844 3d04 	str.w	r3, [r4, #-4]!
	radio_reset();
   129ba:	f004 fc79 	bl	172b0 <radio_reset>
	radio_tx_power_set(0);
   129be:	2000      	movs	r0, #0
   129c0:	f004 fc94 	bl	172ec <radio_tx_power_set>
	radio_isr_set(isr);
   129c4:	480b      	ldr	r0, [pc, #44]	; (129f4 <adv_scan_configure.constprop.45+0x44>)
   129c6:	f004 fc3d 	bl	17244 <radio_isr_set>
	radio_phy_set(phy, flags);
   129ca:	2100      	movs	r1, #0
   129cc:	4608      	mov	r0, r1
   129ce:	f004 fc7d 	bl	172cc <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   129d2:	4620      	mov	r0, r4
   129d4:	f004 fca8 	bl	17328 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   129d8:	2200      	movs	r2, #0
   129da:	2125      	movs	r1, #37	; 0x25
   129dc:	2008      	movs	r0, #8
   129de:	f004 fcbb 	bl	17358 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   129e2:	4905      	ldr	r1, [pc, #20]	; (129f8 <adv_scan_configure.constprop.45+0x48>)
   129e4:	f240 605b 	movw	r0, #1627	; 0x65b
   129e8:	f004 fd46 	bl	17478 <radio_crc_configure>
}
   129ec:	b002      	add	sp, #8
   129ee:	bd10      	pop	{r4, pc}
   129f0:	8e89bed6 	.word	0x8e89bed6
   129f4:	00014061 	.word	0x00014061
   129f8:	00555555 	.word	0x00555555

000129fc <event_stop.constprop.46>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   129fc:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   129fe:	4b05      	ldr	r3, [pc, #20]	; (12a14 <event_stop.constprop.46+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a00:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   12a02:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12a04:	4611      	mov	r1, r2
   12a06:	4610      	mov	r0, r2
   12a08:	f7fd f9c2 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   12a0c:	b108      	cbz	r0, 12a12 <event_stop.constprop.46+0x16>
   12a0e:	f7ff fc57 	bl	122c0 <chan_set.part.23>
   12a12:	bd08      	pop	{r3, pc}
   12a14:	20006a38 	.word	0x20006a38

00012a18 <event_common_prepare>:
{
   12a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   12a1c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   12a1e:	681d      	ldr	r5, [r3, #0]
{
   12a20:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12a22:	2c00      	cmp	r4, #0
{
   12a24:	4680      	mov	r8, r0
   12a26:	910b      	str	r1, [sp, #44]	; 0x2c
   12a28:	4617      	mov	r7, r2
   12a2a:	469a      	mov	sl, r3
   12a2c:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12a30:	da03      	bge.n	12a3a <event_common_prepare+0x22>
		_ticks_xtal_to_start =
   12a32:	9c16      	ldr	r4, [sp, #88]	; 0x58
   12a34:	42ac      	cmp	r4, r5
   12a36:	bf38      	it	cc
   12a38:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   12a3a:	42ac      	cmp	r4, r5
   12a3c:	4e4e      	ldr	r6, [pc, #312]	; (12b78 <event_common_prepare+0x160>)
   12a3e:	d91b      	bls.n	12a78 <event_common_prepare+0x60>
		ticker_status =
   12a40:	f241 4397 	movw	r3, #5271	; 0x1497
   12a44:	9308      	str	r3, [sp, #32]
   12a46:	4b4d      	ldr	r3, [pc, #308]	; (12b7c <event_common_prepare+0x164>)
   12a48:	9305      	str	r3, [sp, #20]
   12a4a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   12a4c:	1b63      	subs	r3, r4, r5
		ticker_status =
   12a4e:	9300      	str	r3, [sp, #0]
   12a50:	9607      	str	r6, [sp, #28]
   12a52:	4643      	mov	r3, r8
   12a54:	9106      	str	r1, [sp, #24]
   12a56:	9104      	str	r1, [sp, #16]
   12a58:	9103      	str	r1, [sp, #12]
   12a5a:	9102      	str	r1, [sp, #8]
   12a5c:	9101      	str	r1, [sp, #4]
   12a5e:	2201      	movs	r2, #1
   12a60:	4608      	mov	r0, r1
   12a62:	f7fd ffcf 	bl	10a04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12a66:	f030 0302 	bics.w	r3, r0, #2
   12a6a:	d02b      	beq.n	12ac4 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
   12a6c:	4040      	eors	r0, r0
   12a6e:	f380 8811 	msr	BASEPRI, r0
   12a72:	f04f 0004 	mov.w	r0, #4
   12a76:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   12a78:	d21d      	bcs.n	12ab6 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
   12a7a:	2300      	movs	r3, #0
   12a7c:	461a      	mov	r2, r3
   12a7e:	4619      	mov	r1, r3
   12a80:	4618      	mov	r0, r3
   12a82:	f7ff fe93 	bl	127ac <event_active>
		ticker_status =
   12a86:	f241 43ac 	movw	r3, #5292	; 0x14ac
   12a8a:	2100      	movs	r1, #0
   12a8c:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   12a8e:	1b2c      	subs	r4, r5, r4
		ticker_status =
   12a90:	4b3b      	ldr	r3, [pc, #236]	; (12b80 <event_common_prepare+0x168>)
   12a92:	9305      	str	r3, [sp, #20]
   12a94:	9607      	str	r6, [sp, #28]
   12a96:	4643      	mov	r3, r8
   12a98:	9106      	str	r1, [sp, #24]
   12a9a:	9104      	str	r1, [sp, #16]
   12a9c:	9103      	str	r1, [sp, #12]
   12a9e:	9102      	str	r1, [sp, #8]
   12aa0:	9101      	str	r1, [sp, #4]
   12aa2:	9400      	str	r4, [sp, #0]
   12aa4:	2201      	movs	r2, #1
   12aa6:	4608      	mov	r0, r1
   12aa8:	f7fd ffac 	bl	10a04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12aac:	f030 0302 	bics.w	r3, r0, #2
   12ab0:	d1dc      	bne.n	12a6c <event_common_prepare+0x54>
   12ab2:	462c      	mov	r4, r5
   12ab4:	e00b      	b.n	12ace <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
   12ab6:	2300      	movs	r3, #0
   12ab8:	461a      	mov	r2, r3
   12aba:	4619      	mov	r1, r3
   12abc:	4618      	mov	r0, r3
   12abe:	f7ff fe75 	bl	127ac <event_active>
		event_xtal(0, 0, 0, NULL);
   12ac2:	2300      	movs	r3, #0
   12ac4:	461a      	mov	r2, r3
   12ac6:	4619      	mov	r1, r3
   12ac8:	4618      	mov	r0, r3
   12aca:	f7ff fe61 	bl	12790 <event_xtal>
	_radio.remainder_anchor = remainder;
   12ace:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 12b88 <event_common_prepare+0x170>
   12ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ad4:	f8cb 3008 	str.w	r3, [fp, #8]
	ticker_status =
   12ad8:	f241 43c4 	movw	r3, #5316	; 0x14c4
   12adc:	9308      	str	r3, [sp, #32]
   12ade:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12ae0:	9306      	str	r3, [sp, #24]
   12ae2:	2200      	movs	r2, #0
   12ae4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12ae6:	9305      	str	r3, [sp, #20]
   12ae8:	9607      	str	r6, [sp, #28]
   12aea:	4643      	mov	r3, r8
   12aec:	9204      	str	r2, [sp, #16]
   12aee:	9203      	str	r2, [sp, #12]
   12af0:	9202      	str	r2, [sp, #8]
   12af2:	9201      	str	r2, [sp, #4]
   12af4:	9400      	str	r4, [sp, #0]
   12af6:	4611      	mov	r1, r2
   12af8:	4610      	mov	r0, r2
   12afa:	f7fd ff83 	bl	10a04 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12afe:	f030 0302 	bics.w	r3, r0, #2
   12b02:	d1b3      	bne.n	12a6c <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   12b04:	2005      	movs	r0, #5
   12b06:	f7ff ff79 	bl	129fc <event_stop.constprop.46>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   12b0a:	f8db 3178 	ldr.w	r3, [fp, #376]	; 0x178
   12b0e:	429d      	cmp	r5, r3
   12b10:	d021      	beq.n	12b56 <event_common_prepare+0x13e>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   12b12:	683a      	ldr	r2, [r7, #0]
		*ticks_active_to_start = _radio.ticks_active_to_start;
   12b14:	f8ca 3000 	str.w	r3, [sl]
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   12b18:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   12b1c:	429a      	cmp	r2, r3
   12b1e:	bf38      	it	cc
   12b20:	461a      	movcc	r2, r3
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   12b26:	bfb8      	it	lt
   12b28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
		ticker_status =
   12b2c:	f241 41f1 	movw	r1, #5361	; 0x14f1
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   12b30:	bfb8      	it	lt
   12b32:	603b      	strlt	r3, [r7, #0]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   12b34:	b292      	uxth	r2, r2
   12b36:	b2a3      	uxth	r3, r4
		ticker_status =
   12b38:	9106      	str	r1, [sp, #24]
   12b3a:	2100      	movs	r1, #0
   12b3c:	9302      	str	r3, [sp, #8]
   12b3e:	9201      	str	r2, [sp, #4]
   12b40:	9200      	str	r2, [sp, #0]
   12b42:	9605      	str	r6, [sp, #20]
   12b44:	9104      	str	r1, [sp, #16]
   12b46:	9103      	str	r1, [sp, #12]
   12b48:	464a      	mov	r2, r9
   12b4a:	4608      	mov	r0, r1
   12b4c:	f7fd ffa2 	bl	10a94 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12b50:	f030 0302 	bics.w	r3, r0, #2
   12b54:	d18a      	bne.n	12a6c <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   12b56:	20ff      	movs	r0, #255	; 0xff
   12b58:	f7ff fd0c 	bl	12574 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   12b5c:	4b09      	ldr	r3, [pc, #36]	; (12b84 <event_common_prepare+0x16c>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12b5e:	2201      	movs	r2, #1
   12b60:	4611      	mov	r1, r2
   12b62:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   12b64:	f8c3 9008 	str.w	r9, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12b68:	f7fd f912 	bl	fd90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   12b6c:	2800      	cmp	r0, #0
   12b6e:	f47f af7d 	bne.w	12a6c <event_common_prepare+0x54>
}
   12b72:	b00d      	add	sp, #52	; 0x34
   12b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b78:	00012891 	.word	0x00012891
   12b7c:	000127ad 	.word	0x000127ad
   12b80:	00012791 	.word	0x00012791
   12b84:	20006ac8 	.word	0x20006ac8
   12b88:	20000f64 	.word	0x20000f64

00012b8c <radio_event_adv_prepare>:
{
   12b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   12b8e:	4a0b      	ldr	r2, [pc, #44]	; (12bbc <radio_event_adv_prepare+0x30>)
   12b90:	7b13      	ldrb	r3, [r2, #12]
   12b92:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   12b96:	b10b      	cbz	r3, 12b9c <radio_event_adv_prepare+0x10>
   12b98:	f7ff fb92 	bl	122c0 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   12b9c:	2305      	movs	r3, #5
   12b9e:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   12ba0:	9403      	str	r4, [sp, #12]
   12ba2:	4c07      	ldr	r4, [pc, #28]	; (12bc0 <radio_event_adv_prepare+0x34>)
   12ba4:	9402      	str	r4, [sp, #8]
   12ba6:	9301      	str	r3, [sp, #4]
   12ba8:	69d3      	ldr	r3, [r2, #28]
   12baa:	9300      	str	r3, [sp, #0]
   12bac:	f102 0318 	add.w	r3, r2, #24
   12bb0:	3214      	adds	r2, #20
   12bb2:	f7ff ff31 	bl	12a18 <event_common_prepare>
}
   12bb6:	b004      	add	sp, #16
   12bb8:	bd10      	pop	{r4, pc}
   12bba:	bf00      	nop
   12bbc:	20000f64 	.word	0x20000f64
   12bc0:	00012df9 	.word	0x00012df9

00012bc4 <event_scan_prepare>:
{
   12bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   12bc6:	4a0b      	ldr	r2, [pc, #44]	; (12bf4 <event_scan_prepare+0x30>)
   12bc8:	7b13      	ldrb	r3, [r2, #12]
   12bca:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   12bce:	b10b      	cbz	r3, 12bd4 <event_scan_prepare+0x10>
   12bd0:	f7ff fb76 	bl	122c0 <chan_set.part.23>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   12bd4:	2306      	movs	r3, #6
   12bd6:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   12bd8:	9403      	str	r4, [sp, #12]
   12bda:	4c07      	ldr	r4, [pc, #28]	; (12bf8 <event_scan_prepare+0x34>)
   12bdc:	9402      	str	r4, [sp, #8]
   12bde:	9301      	str	r3, [sp, #4]
   12be0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   12be4:	9300      	str	r3, [sp, #0]
   12be6:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
   12bea:	32cc      	adds	r2, #204	; 0xcc
   12bec:	f7ff ff14 	bl	12a18 <event_common_prepare>
}
   12bf0:	b004      	add	sp, #16
   12bf2:	bd10      	pop	{r4, pc}
   12bf4:	20000f64 	.word	0x20000f64
   12bf8:	00012ea1 	.word	0x00012ea1

00012bfc <event_adv_stop>:
{
   12bfc:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   12bfe:	2005      	movs	r0, #5
   12c00:	f7ff fefc 	bl	129fc <event_stop.constprop.46>
	ticker_status =
   12c04:	f241 73b7 	movw	r3, #6071	; 0x17b7
   12c08:	2100      	movs	r1, #0
   12c0a:	9300      	str	r3, [sp, #0]
   12c0c:	2205      	movs	r2, #5
   12c0e:	4b06      	ldr	r3, [pc, #24]	; (12c28 <event_adv_stop+0x2c>)
   12c10:	4608      	mov	r0, r1
   12c12:	f7fd ff85 	bl	10b20 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12c16:	f030 0302 	bics.w	r3, r0, #2
   12c1a:	d001      	beq.n	12c20 <event_adv_stop+0x24>
   12c1c:	f7ff fb50 	bl	122c0 <chan_set.part.23>
}
   12c20:	b003      	add	sp, #12
   12c22:	f85d fb04 	ldr.w	pc, [sp], #4
   12c26:	bf00      	nop
   12c28:	0001289d 	.word	0x0001289d

00012c2c <packet_rx_allocate.constprop.47>:
static void packet_rx_allocate(u8_t max)
   12c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
   12c30:	4d21      	ldr	r5, [pc, #132]	; (12cb8 <packet_rx_allocate.constprop.47+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
   12c32:	f895 4136 	ldrb.w	r4, [r5, #310]	; 0x136
	if (acquire == _radio.packet_rx_count) {
   12c36:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
	if (max > _radio.link_rx_data_quota) {
   12c3a:	f895 9148 	ldrb.w	r9, [r5, #328]	; 0x148
	acquire = _radio.packet_rx_acquire + 1;
   12c3e:	3401      	adds	r4, #1
   12c40:	b2e4      	uxtb	r4, r4
		acquire = 0;
   12c42:	42a3      	cmp	r3, r4
   12c44:	bf08      	it	eq
   12c46:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
   12c48:	f505 779e 	add.w	r7, r5, #316	; 0x13c
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   12c4c:	f505 7892 	add.w	r8, r5, #292	; 0x124
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   12c50:	f1b9 0f00 	cmp.w	r9, #0
   12c54:	d003      	beq.n	12c5e <packet_rx_allocate.constprop.47+0x32>
   12c56:	f895 3135 	ldrb.w	r3, [r5, #309]	; 0x135
   12c5a:	429c      	cmp	r4, r3
   12c5c:	d101      	bne.n	12c62 <packet_rx_allocate.constprop.47+0x36>
   12c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
   12c62:	4638      	mov	r0, r7
   12c64:	f7fc ffdb 	bl	fc1e <mem_acquire>
		if (!link) {
   12c68:	4606      	mov	r6, r0
   12c6a:	2800      	cmp	r0, #0
   12c6c:	d0f7      	beq.n	12c5e <packet_rx_allocate.constprop.47+0x32>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   12c6e:	4640      	mov	r0, r8
   12c70:	f7fc ffd5 	bl	fc1e <mem_acquire>
		if (!radio_pdu_node_rx) {
   12c74:	b928      	cbnz	r0, 12c82 <packet_rx_allocate.constprop.47+0x56>
			mem_release(link, &_radio.link_rx_free);
   12c76:	4630      	mov	r0, r6
   12c78:	4910      	ldr	r1, [pc, #64]	; (12cbc <packet_rx_allocate.constprop.47+0x90>)
}
   12c7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
   12c7e:	f7fc bfe8 	b.w	fc52 <mem_release>
		radio_pdu_node_rx->hdr.onion.link = link;
   12c82:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   12c84:	f895 2136 	ldrb.w	r2, [r5, #310]	; 0x136
   12c88:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   12c8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
   12c90:	f885 4136 	strb.w	r4, [r5, #310]	; 0x136
		if (acquire == _radio.packet_rx_count) {
   12c94:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
		acquire = _radio.packet_rx_acquire + 1;
   12c98:	3401      	adds	r4, #1
   12c9a:	b2e4      	uxtb	r4, r4
			acquire = 0;
   12c9c:	42a3      	cmp	r3, r4
   12c9e:	bf08      	it	eq
   12ca0:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
   12ca2:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   12ca6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   12caa:	3b01      	subs	r3, #1
   12cac:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
   12cb0:	fa5f f989 	uxtb.w	r9, r9
   12cb4:	e7cc      	b.n	12c50 <packet_rx_allocate.constprop.47+0x24>
   12cb6:	bf00      	nop
   12cb8:	20000f64 	.word	0x20000f64
   12cbc:	200010a0 	.word	0x200010a0

00012cc0 <common_init>:
{
   12cc0:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
   12cc2:	4c2e      	ldr	r4, [pc, #184]	; (12d7c <common_init+0xbc>)
   12cc4:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   12cc8:	2a00      	cmp	r2, #0
   12cca:	d037      	beq.n	12d3c <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
   12ccc:	f504 7384 	add.w	r3, r4, #264	; 0x108
   12cd0:	f44f 7196 	mov.w	r1, #300	; 0x12c
   12cd4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   12cd8:	f7fc ff7a 	bl	fbd0 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
   12cdc:	4b28      	ldr	r3, [pc, #160]	; (12d80 <common_init+0xc0>)
   12cde:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
   12ce2:	f8b4 112c 	ldrh.w	r1, [r4, #300]	; 0x12c
   12ce6:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   12cea:	f7fc ff71 	bl	fbd0 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
   12cee:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
   12cf2:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
   12cf6:	4b23      	ldr	r3, [pc, #140]	; (12d84 <common_init+0xc4>)
   12cf8:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   12cfc:	440a      	add	r2, r1
   12cfe:	2108      	movs	r1, #8
   12d00:	f7fc ff66 	bl	fbd0 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
   12d04:	4b20      	ldr	r3, [pc, #128]	; (12d88 <common_init+0xc8>)
   12d06:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   12d0a:	2202      	movs	r2, #2
   12d0c:	2124      	movs	r1, #36	; 0x24
   12d0e:	f7fc ff5f 	bl	fbd0 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
   12d12:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
   12d16:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   12d1a:	4b1c      	ldr	r3, [pc, #112]	; (12d8c <common_init+0xcc>)
   12d1c:	f8b4 115c 	ldrh.w	r1, [r4, #348]	; 0x15c
   12d20:	3a01      	subs	r2, #1
   12d22:	b292      	uxth	r2, r2
   12d24:	f7fc ff54 	bl	fbd0 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
   12d28:	4816      	ldr	r0, [pc, #88]	; (12d84 <common_init+0xc4>)
   12d2a:	f7fc ff78 	bl	fc1e <mem_acquire>
	LL_ASSERT(link);
   12d2e:	b940      	cbnz	r0, 12d42 <common_init+0x82>
   12d30:	4040      	eors	r0, r0
   12d32:	f380 8811 	msr	BASEPRI, r0
   12d36:	f04f 0004 	mov.w	r0, #4
   12d3a:	df02      	svc	2
		_radio.conn_free = NULL;
   12d3c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   12d40:	e7cc      	b.n	12cdc <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
   12d42:	4a13      	ldr	r2, [pc, #76]	; (12d90 <common_init+0xd0>)
   12d44:	1f11      	subs	r1, r2, #4
   12d46:	f7fc ffb0 	bl	fcaa <memq_init>
	_radio.advertiser.chan_map = 0x07;
   12d4a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   12d4e:	f043 0307 	orr.w	r3, r3, #7
   12d52:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	_radio.data_chan_map[0] = 0xFF;
   12d56:	23ff      	movs	r3, #255	; 0xff
   12d58:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
   12d5c:	f884 3117 	strb.w	r3, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
   12d60:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
   12d64:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
   12d68:	231f      	movs	r3, #31
   12d6a:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
   12d6e:	2325      	movs	r3, #37	; 0x25
   12d70:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
}
   12d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
   12d78:	f7ff bf58 	b.w	12c2c <packet_rx_allocate.constprop.47>
   12d7c:	20000f64 	.word	0x20000f64
   12d80:	20001088 	.word	0x20001088
   12d84:	200010a0 	.word	0x200010a0
   12d88:	200010b4 	.word	0x200010b4
   12d8c:	200010bc 	.word	0x200010bc
   12d90:	200010a8 	.word	0x200010a8

00012d94 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   12d94:	4b02      	ldr	r3, [pc, #8]	; (12da0 <mayfly_xtal_start+0xc>)
   12d96:	6818      	ldr	r0, [r3, #0]
   12d98:	6843      	ldr	r3, [r0, #4]
   12d9a:	2100      	movs	r1, #0
   12d9c:	681b      	ldr	r3, [r3, #0]
   12d9e:	4718      	bx	r3
   12da0:	20000f64 	.word	0x20000f64

00012da4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   12da4:	4b02      	ldr	r3, [pc, #8]	; (12db0 <mayfly_xtal_stop+0xc>)
   12da6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
   12da8:	6843      	ldr	r3, [r0, #4]
   12daa:	2100      	movs	r1, #0
   12dac:	685b      	ldr	r3, [r3, #4]
   12dae:	4718      	bx	r3
   12db0:	20000f64 	.word	0x20000f64

00012db4 <preempt_calc>:
{
   12db4:	b570      	push	{r4, r5, r6, lr}
   12db6:	4614      	mov	r4, r2
   12db8:	460e      	mov	r6, r1
   12dba:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   12dbc:	f7fd ff6c 	bl	10c98 <ticker_ticks_now_get>
	u32_t diff =
   12dc0:	4621      	mov	r1, r4
   12dc2:	f7fd ff6b 	bl	10c9c <ticker_ticks_diff_get>
	diff += 3;
   12dc6:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   12dc8:	2c09      	cmp	r4, #9
   12dca:	d911      	bls.n	12df0 <preempt_calc+0x3c>
		if (s_xtal_retained) {
   12dcc:	4b09      	ldr	r3, [pc, #36]	; (12df4 <preempt_calc+0x40>)
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	b113      	cbz	r3, 12dd8 <preempt_calc+0x24>
   12dd2:	2000      	movs	r0, #0
   12dd4:	f7ff f9e4 	bl	121a0 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   12dd8:	4632      	mov	r2, r6
   12dda:	2100      	movs	r1, #0
   12ddc:	4628      	mov	r0, r5
   12dde:	f7ff fa75 	bl	122cc <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   12de2:	68ab      	ldr	r3, [r5, #8]
   12de4:	441c      	add	r4, r3
		if (diff <
   12de6:	2c26      	cmp	r4, #38	; 0x26
   12de8:	d800      	bhi.n	12dec <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
   12dea:	60ac      	str	r4, [r5, #8]
		return 1;
   12dec:	2001      	movs	r0, #1
}
   12dee:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   12df0:	2000      	movs	r0, #0
   12df2:	bd70      	pop	{r4, r5, r6, pc}
   12df4:	20001160 	.word	0x20001160

00012df8 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   12df8:	4b26      	ldr	r3, [pc, #152]	; (12e94 <event_adv+0x9c>)
   12dfa:	7bda      	ldrb	r2, [r3, #15]
{
   12dfc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   12dfe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
   12e02:	4605      	mov	r5, r0
   12e04:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   12e06:	b12a      	cbz	r2, 12e14 <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12e08:	4040      	eors	r0, r0
   12e0a:	f380 8811 	msr	BASEPRI, r0
   12e0e:	f04f 0004 	mov.w	r0, #4
   12e12:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   12e14:	7b1b      	ldrb	r3, [r3, #12]
   12e16:	b2db      	uxtb	r3, r3
   12e18:	2b05      	cmp	r3, #5
   12e1a:	d1f5      	bne.n	12e08 <event_adv+0x10>
	_radio.role = ROLE_ADV;
   12e1c:	2601      	movs	r6, #1
   12e1e:	73e6      	strb	r6, [r4, #15]
	_radio.ticks_anchor = ticks_at_expire;
   12e20:	6060      	str	r0, [r4, #4]
	_radio.ticker_id_prepare = 0;
   12e22:	7321      	strb	r1, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   12e24:	7363      	strb	r3, [r4, #13]
	adv_scan_configure(0, 0);
   12e26:	f7ff fdc3 	bl	129b0 <adv_scan_configure.constprop.45>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   12e2a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   12e2e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   12e32:	f362 0343 	bfi	r3, r2, #1, #3
   12e36:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	adv_setup();
   12e3a:	f7ff fb21 	bl	12480 <adv_setup>
	if (_radio.advertiser.filter_policy) {
   12e3e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   12e42:	f013 0f18 	tst.w	r3, #24
   12e46:	d007      	beq.n	12e58 <event_adv+0x60>
		struct ll_filter *wl = ctrl_filter_get(true);
   12e48:	4630      	mov	r0, r6
   12e4a:	f003 ff2b 	bl	16ca4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   12e4e:	1c82      	adds	r2, r0, #2
   12e50:	7841      	ldrb	r1, [r0, #1]
   12e52:	7800      	ldrb	r0, [r0, #0]
   12e54:	f004 fb74 	bl	17540 <radio_filter_configure>
	remainder_us = radio_tmr_start(1,
   12e58:	68a2      	ldr	r2, [r4, #8]
   12e5a:	f105 0109 	add.w	r1, r5, #9
   12e5e:	2001      	movs	r0, #1
   12e60:	f004 fbc4 	bl	175ec <radio_tmr_start>
	radio_tmr_end_capture();
   12e64:	f004 fc92 	bl	1778c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   12e68:	462a      	mov	r2, r5
   12e6a:	2105      	movs	r1, #5
   12e6c:	480a      	ldr	r0, [pc, #40]	; (12e98 <event_adv+0xa0>)
   12e6e:	f7ff ffa1 	bl	12db4 <preempt_calc>
   12e72:	4603      	mov	r3, r0
   12e74:	b128      	cbz	r0, 12e82 <event_adv+0x8a>
		_radio.state = STATE_STOP;
   12e76:	2304      	movs	r3, #4
   12e78:	7423      	strb	r3, [r4, #16]
}
   12e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   12e7e:	f004 babf 	b.w	17400 <radio_disable>
		ticker_status =
   12e82:	4a06      	ldr	r2, [pc, #24]	; (12e9c <event_adv+0xa4>)
   12e84:	4601      	mov	r1, r0
   12e86:	f7fd febf 	bl	10c08 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12e8a:	f030 0302 	bics.w	r3, r0, #2
   12e8e:	d1bb      	bne.n	12e08 <event_adv+0x10>
   12e90:	bd70      	pop	{r4, r5, r6, pc}
   12e92:	bf00      	nop
   12e94:	20000f64 	.word	0x20000f64
   12e98:	20000f78 	.word	0x20000f78
   12e9c:	00012189 	.word	0x00012189

00012ea0 <event_scan>:
{
   12ea0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   12ea2:	4b49      	ldr	r3, [pc, #292]	; (12fc8 <event_scan+0x128>)
   12ea4:	7bda      	ldrb	r2, [r3, #15]
{
   12ea6:	b08a      	sub	sp, #40	; 0x28
   12ea8:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   12eaa:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   12eae:	461c      	mov	r4, r3
   12eb0:	b12a      	cbz	r2, 12ebe <event_scan+0x1e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12eb2:	4040      	eors	r0, r0
   12eb4:	f380 8811 	msr	BASEPRI, r0
   12eb8:	f04f 0004 	mov.w	r0, #4
   12ebc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   12ebe:	7b1b      	ldrb	r3, [r3, #12]
   12ec0:	b2db      	uxtb	r3, r3
   12ec2:	2b06      	cmp	r3, #6
   12ec4:	d1f5      	bne.n	12eb2 <event_scan+0x12>
	_radio.role = ROLE_SCAN;
   12ec6:	2202      	movs	r2, #2
   12ec8:	73e2      	strb	r2, [r4, #15]
	_radio.ticker_id_prepare = 0;
   12eca:	7326      	strb	r6, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   12ecc:	7363      	strb	r3, [r4, #13]
	_radio.scanner.state = 0;
   12ece:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	_radio.ticks_anchor = ticks_at_expire;
   12ed2:	6060      	str	r0, [r4, #4]
	_radio.state = STATE_RX;
   12ed4:	2201      	movs	r2, #1
	_radio.scanner.state = 0;
   12ed6:	f366 0341 	bfi	r3, r6, #1, #1
	_radio.state = STATE_RX;
   12eda:	7422      	strb	r2, [r4, #16]
	_radio.scanner.state = 0;
   12edc:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(0, 0);
   12ee0:	f7ff fd66 	bl	129b0 <adv_scan_configure.constprop.45>
	chan_set(37 + _radio.scanner.chan++);
   12ee4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12ee8:	f3c3 0081 	ubfx	r0, r3, #2, #2
   12eec:	1c42      	adds	r2, r0, #1
   12eee:	f362 0383 	bfi	r3, r2, #2, #2
   12ef2:	3025      	adds	r0, #37	; 0x25
   12ef4:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   12ef8:	f7ff faa3 	bl	12442 <chan_set>
	if (_radio.scanner.chan == 3) {
   12efc:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12f00:	f003 020c 	and.w	r2, r3, #12
   12f04:	2a0c      	cmp	r2, #12
		_radio.scanner.chan = 0;
   12f06:	bf08      	it	eq
   12f08:	f366 0383 	bfieq	r3, r6, #2, #2
	radio_tmr_tifs_set(RADIO_TIFS);
   12f0c:	f04f 0096 	mov.w	r0, #150	; 0x96
		_radio.scanner.chan = 0;
   12f10:	bf08      	it	eq
   12f12:	f884 30dc 	strbeq.w	r3, [r4, #220]	; 0xdc
	radio_tmr_tifs_set(RADIO_TIFS);
   12f16:	f004 fb5d 	bl	175d4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   12f1a:	2300      	movs	r3, #0
   12f1c:	4619      	mov	r1, r3
   12f1e:	461a      	mov	r2, r3
   12f20:	4618      	mov	r0, r3
   12f22:	f004 fad3 	bl	174cc <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   12f26:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   12f2a:	f894 2135 	ldrb.w	r2, [r4, #309]	; 0x135
   12f2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12f32:	3008      	adds	r0, #8
   12f34:	f004 fa3e 	bl	173b4 <radio_pkt_rx_set>
	radio_rssi_measure();
   12f38:	f004 fae0 	bl	174fc <radio_rssi_measure>
	if (_radio.scanner.filter_policy) {
   12f3c:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   12f40:	f013 0f06 	tst.w	r3, #6
   12f44:	d007      	beq.n	12f56 <event_scan+0xb6>
		struct ll_filter *wl = ctrl_filter_get(true);
   12f46:	2001      	movs	r0, #1
   12f48:	f003 feac 	bl	16ca4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   12f4c:	1c82      	adds	r2, r0, #2
   12f4e:	7841      	ldrb	r1, [r0, #1]
   12f50:	7800      	ldrb	r0, [r0, #0]
   12f52:	f004 faf5 	bl	17540 <radio_filter_configure>
	remainder_us = radio_tmr_start(0,
   12f56:	68a2      	ldr	r2, [r4, #8]
   12f58:	f105 0109 	add.w	r1, r5, #9
   12f5c:	2000      	movs	r0, #0
   12f5e:	f004 fb45 	bl	175ec <radio_tmr_start>
	radio_tmr_end_capture();
   12f62:	f004 fc13 	bl	1778c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   12f66:	2106      	movs	r1, #6
   12f68:	462a      	mov	r2, r5
   12f6a:	4818      	ldr	r0, [pc, #96]	; (12fcc <event_scan+0x12c>)
   12f6c:	f7ff ff22 	bl	12db4 <preempt_calc>
   12f70:	4601      	mov	r1, r0
   12f72:	b130      	cbz	r0, 12f82 <event_scan+0xe2>
		_radio.state = STATE_STOP;
   12f74:	2304      	movs	r3, #4
   12f76:	7423      	strb	r3, [r4, #16]
}
   12f78:	b00a      	add	sp, #40	; 0x28
   12f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   12f7e:	f004 ba3f 	b.w	17400 <radio_disable>
		ret = ticker_start(
   12f82:	f641 035a 	movw	r3, #6234	; 0x185a
   12f86:	9308      	str	r3, [sp, #32]
   12f88:	4b11      	ldr	r3, [pc, #68]	; (12fd0 <event_scan+0x130>)
   12f8a:	9307      	str	r3, [sp, #28]
   12f8c:	2204      	movs	r2, #4
   12f8e:	4b11      	ldr	r3, [pc, #68]	; (12fd4 <event_scan+0x134>)
   12f90:	9206      	str	r2, [sp, #24]
   12f92:	9305      	str	r3, [sp, #20]
   12f94:	9004      	str	r0, [sp, #16]
   12f96:	9003      	str	r0, [sp, #12]
   12f98:	9002      	str	r0, [sp, #8]
   12f9a:	9001      	str	r0, [sp, #4]
   12f9c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   12fa0:	3309      	adds	r3, #9
   12fa2:	9300      	str	r3, [sp, #0]
   12fa4:	462b      	mov	r3, r5
   12fa6:	f7fd fd2d 	bl	10a04 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12faa:	f030 0302 	bics.w	r3, r0, #2
   12fae:	d180      	bne.n	12eb2 <event_scan+0x12>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fb0:	4619      	mov	r1, r3
   12fb2:	4618      	mov	r0, r3
   12fb4:	4a08      	ldr	r2, [pc, #32]	; (12fd8 <event_scan+0x138>)
   12fb6:	f7fd fe27 	bl	10c08 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12fba:	f030 0302 	bics.w	r3, r0, #2
   12fbe:	f47f af78 	bne.w	12eb2 <event_scan+0x12>
}
   12fc2:	b00a      	add	sp, #40	; 0x28
   12fc4:	bd70      	pop	{r4, r5, r6, pc}
   12fc6:	bf00      	nop
   12fc8:	20000f64 	.word	0x20000f64
   12fcc:	20001030 	.word	0x20001030
   12fd0:	00012891 	.word	0x00012891
   12fd4:	000127c9 	.word	0x000127c9
   12fd8:	00012189 	.word	0x00012189

00012fdc <ctrl_tx_enqueue>:
{
   12fdc:	b510      	push	{r4, lr}
	    !conn->empty &&
   12fde:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   12fe2:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
	if (
   12fe6:	f014 0f80 	tst.w	r4, #128	; 0x80
   12fea:	d118      	bne.n	1301e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   12fec:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	    !conn->empty &&
   12ff0:	b1ab      	cbz	r3, 1301e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   12ff2:	0724      	lsls	r4, r4, #28
   12ff4:	d413      	bmi.n	1301e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   12ff6:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   12ffa:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   12ffc:	bf04      	itt	eq
   12ffe:	681c      	ldreq	r4, [r3, #0]
   13000:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->pkt_tx_ctrl) {
   13004:	b992      	cbnz	r2, 1302c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   13006:	681a      	ldr	r2, [r3, #0]
   13008:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   1300a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   1300c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	conn->pkt_tx_ctrl_last = node_tx;
   13010:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (node_tx->next == 0) {
   13014:	680b      	ldr	r3, [r1, #0]
   13016:	b90b      	cbnz	r3, 1301c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   13018:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
   1301c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   1301e:	b92a      	cbnz	r2, 1302c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   13020:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   13024:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   13026:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   1302a:	e7ef      	b.n	1300c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   1302c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   13030:	681a      	ldr	r2, [r3, #0]
   13032:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   13034:	6019      	str	r1, [r3, #0]
   13036:	e7eb      	b.n	13010 <ctrl_tx_enqueue+0x34>

00013038 <ctrl_tx_sec_enqueue>:
{
   13038:	b410      	push	{r4}
	if (conn->pause_tx) {
   1303a:	f890 40d0 	ldrb.w	r4, [r0, #208]	; 0xd0
   1303e:	0724      	lsls	r4, r4, #28
{
   13040:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   13042:	d50f      	bpl.n	13064 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   13044:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
   13048:	b931      	cbnz	r1, 13058 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   1304a:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1304e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   13050:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
}
   13054:	bc10      	pop	{r4}
   13056:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   13058:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1305c:	6819      	ldr	r1, [r3, #0]
   1305e:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   13060:	601a      	str	r2, [r3, #0]
   13062:	e7f7      	b.n	13054 <ctrl_tx_sec_enqueue+0x1c>
}
   13064:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   13066:	f7ff bfb9 	b.w	12fdc <ctrl_tx_enqueue>
	...

0001306c <start_enc_rsp_send>:
{
   1306c:	b510      	push	{r4, lr}
   1306e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   13070:	b9c9      	cbnz	r1, 130a6 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13072:	480f      	ldr	r0, [pc, #60]	; (130b0 <start_enc_rsp_send+0x44>)
   13074:	f7fc fdd3 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   13078:	b1b8      	cbz	r0, 130aa <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   1307a:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
   1307c:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   13080:	f043 0320 	orr.w	r3, r3, #32
   13084:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13088:	780b      	ldrb	r3, [r1, #0]
   1308a:	f043 0303 	orr.w	r3, r3, #3
   1308e:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   13090:	2301      	movs	r3, #1
   13092:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   13094:	2306      	movs	r3, #6
   13096:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
   13098:	b140      	cbz	r0, 130ac <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
   1309a:	4601      	mov	r1, r0
   1309c:	4620      	mov	r0, r4
   1309e:	f7ff ff9d 	bl	12fdc <ctrl_tx_enqueue>
	return 0;
   130a2:	2000      	movs	r0, #0
   130a4:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
   130a6:	2000      	movs	r0, #0
   130a8:	e7e8      	b.n	1307c <start_enc_rsp_send+0x10>
			return 1;
   130aa:	2001      	movs	r0, #1
}
   130ac:	bd10      	pop	{r4, pc}
   130ae:	bf00      	nop
   130b0:	200010b4 	.word	0x200010b4

000130b4 <reject_ext_ind_send>:
{
   130b4:	b570      	push	{r4, r5, r6, lr}
   130b6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   130b8:	480b      	ldr	r0, [pc, #44]	; (130e8 <reject_ext_ind_send+0x34>)
{
   130ba:	460e      	mov	r6, r1
   130bc:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   130be:	f7fc fdae 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   130c2:	b178      	cbz	r0, 130e4 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130c4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   130c6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130c8:	f043 0303 	orr.w	r3, r3, #3
   130cc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   130ce:	2303      	movs	r3, #3
   130d0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   130d2:	2311      	movs	r3, #17
   130d4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   130d6:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   130d8:	4601      	mov	r1, r0
   130da:	4620      	mov	r0, r4
   130dc:	f7ff ff7e 	bl	12fdc <ctrl_tx_enqueue>
	return 0;
   130e0:	2000      	movs	r0, #0
   130e2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   130e4:	2001      	movs	r0, #1
}
   130e6:	bd70      	pop	{r4, r5, r6, pc}
   130e8:	200010b4 	.word	0x200010b4

000130ec <unknown_rsp_send>:
{
   130ec:	b538      	push	{r3, r4, r5, lr}
   130ee:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   130f0:	480a      	ldr	r0, [pc, #40]	; (1311c <unknown_rsp_send+0x30>)
{
   130f2:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   130f4:	f7fc fd93 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   130f8:	b170      	cbz	r0, 13118 <unknown_rsp_send+0x2c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130fa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   130fc:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130fe:	f043 0303 	orr.w	r3, r3, #3
   13102:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   13104:	2302      	movs	r3, #2
   13106:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   13108:	2307      	movs	r3, #7
   1310a:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1310c:	4601      	mov	r1, r0
   1310e:	4620      	mov	r0, r4
   13110:	f7ff ff64 	bl	12fdc <ctrl_tx_enqueue>
	return 0;
   13114:	2000      	movs	r0, #0
   13116:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   13118:	2001      	movs	r0, #1
}
   1311a:	bd38      	pop	{r3, r4, r5, pc}
   1311c:	200010b4 	.word	0x200010b4

00013120 <event_connection_prepare>:
{
   13120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   13124:	4fac      	ldr	r7, [pc, #688]	; (133d8 <event_connection_prepare+0x2b8>)
{
   13126:	b08f      	sub	sp, #60	; 0x3c
   13128:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
   1312a:	7b3b      	ldrb	r3, [r7, #12]
{
   1312c:	910b      	str	r1, [sp, #44]	; 0x2c
   1312e:	4681      	mov	r9, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   13130:	b12b      	cbz	r3, 1313e <event_connection_prepare+0x1e>
			LL_ASSERT(0);
   13132:	4040      	eors	r0, r0
   13134:	f380 8811 	msr	BASEPRI, r0
   13138:	f04f 0004 	mov.w	r0, #4
   1313c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   1313e:	f894 3020 	ldrb.w	r3, [r4, #32]
   13142:	3307      	adds	r3, #7
   13144:	b2db      	uxtb	r3, r3
   13146:	733b      	strb	r3, [r7, #12]
	if (conn->role) {
   13148:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1314c:	2b00      	cmp	r3, #0
   1314e:	da09      	bge.n	13164 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   13150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
   13152:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   13154:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
   13158:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
   1315a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
   1315c:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
   1315e:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
   13160:	bf88      	it	hi
   13162:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
   13164:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   13166:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
   1316a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
   1316c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
   1316e:	b292      	uxth	r2, r2
   13170:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   13172:	4432      	add	r2, r6
   13174:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   13176:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1317a:	429a      	cmp	r2, r3
   1317c:	d15c      	bne.n	13238 <event_connection_prepare+0x118>
   1317e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   13182:	075a      	lsls	r2, r3, #29
   13184:	f100 816a 	bmi.w	1345c <event_connection_prepare+0x33c>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   13188:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
   1318c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   13190:	429a      	cmp	r2, r3
   13192:	f000 8163 	beq.w	1345c <event_connection_prepare+0x33c>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   13196:	2005      	movs	r0, #5
   13198:	f7ff fc30 	bl	129fc <event_stop.constprop.46>
	conn_upd = _radio.conn_upd;
   1319c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
	if (conn_upd && (conn_upd != conn)) {
   131a0:	b10b      	cbz	r3, 131a6 <event_connection_prepare+0x86>
   131a2:	429c      	cmp	r4, r3
   131a4:	d141      	bne.n	1322a <event_connection_prepare+0x10a>
	switch (conn->llcp_conn_param.state) {
   131a6:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   131aa:	f003 0307 	and.w	r3, r3, #7
   131ae:	2b05      	cmp	r3, #5
   131b0:	d8bf      	bhi.n	13132 <event_connection_prepare+0x12>
   131b2:	e8df f003 	tbb	[pc, r3]
   131b6:	5103      	.short	0x5103
   131b8:	3a3a3ae7 	.word	0x3a3a3ae7
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   131bc:	4887      	ldr	r0, [pc, #540]	; (133dc <event_connection_prepare+0x2bc>)
   131be:	f7fc fd2e 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   131c2:	4601      	mov	r1, r0
   131c4:	b388      	cbz	r0, 1322a <event_connection_prepare+0x10a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   131c6:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   131ca:	2204      	movs	r2, #4
   131cc:	f362 0302 	bfi	r3, r2, #0, #3
   131d0:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   131d4:	7903      	ldrb	r3, [r0, #4]
   131d6:	f043 0303 	orr.w	r3, r3, #3
   131da:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   131dc:	2318      	movs	r3, #24
   131de:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   131e0:	230f      	movs	r3, #15
   131e2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   131e4:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   131e8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   131ea:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   131ec:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   131f0:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   131f2:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   131f6:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   131f8:	2300      	movs	r3, #0
   131fa:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
   131fc:	74c3      	strb	r3, [r0, #19]
   131fe:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   13200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13204:	7543      	strb	r3, [r0, #21]
   13206:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   13208:	75c3      	strb	r3, [r0, #23]
   1320a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1320c:	7643      	strb	r3, [r0, #25]
   1320e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   13210:	76c3      	strb	r3, [r0, #27]
   13212:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   13214:	7743      	strb	r3, [r0, #29]
   13216:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
   13218:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
   1321c:	4620      	mov	r0, r4
   1321e:	f7ff fedd 	bl	12fdc <ctrl_tx_enqueue>
	conn->procedure_expire = conn->procedure_reload;
   13222:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	_radio.conn_upd = conn;
   13224:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
	conn->procedure_expire = conn->procedure_reload;
   13228:	86a3      	strh	r3, [r4, #52]	; 0x34
	if (conn->llcp_ack != conn->llcp_req) {
   1322a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1322e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   13232:	429a      	cmp	r2, r3
   13234:	f000 8112 	beq.w	1345c <event_connection_prepare+0x33c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   13238:	2005      	movs	r0, #5
   1323a:	f7ff fbdf 	bl	129fc <event_stop.constprop.46>
		switch (conn->llcp_type) {
   1323e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13242:	3b01      	subs	r3, #1
   13244:	2b04      	cmp	r3, #4
   13246:	f63f af74 	bhi.w	13132 <event_connection_prepare+0x12>
   1324a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1324e:	00c9      	.short	0x00c9
   13250:	032d02d1 	.word	0x032d02d1
   13254:	046e0440 	.word	0x046e0440
	if (conn->llcp_conn_param.status) {
   13258:	f894 50ab 	ldrb.w	r5, [r4, #171]	; 0xab
   1325c:	b1ed      	cbz	r5, 1329a <event_connection_prepare+0x17a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1325e:	485f      	ldr	r0, [pc, #380]	; (133dc <event_connection_prepare+0x2bc>)
   13260:	f7fc fcdd 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   13264:	4601      	mov	r1, r0
   13266:	2800      	cmp	r0, #0
   13268:	d0df      	beq.n	1322a <event_connection_prepare+0x10a>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1326a:	7903      	ldrb	r3, [r0, #4]
   1326c:	f043 0303 	orr.w	r3, r3, #3
   13270:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   13272:	2311      	movs	r3, #17
   13274:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13276:	2303      	movs	r3, #3
   13278:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1327a:	230f      	movs	r3, #15
   1327c:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1327e:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
   13282:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   13284:	4620      	mov	r0, r4
   13286:	f7ff fea9 	bl	12fdc <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1328a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1328e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
		_radio.conn_upd = NULL;
   13292:	2300      	movs	r3, #0
   13294:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   13298:	e7c7      	b.n	1322a <event_connection_prepare+0x10a>
	if (!conn->role) {
   1329a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1329e:	2b00      	cmp	r3, #0
   132a0:	db2f      	blt.n	13302 <event_connection_prepare+0x1e2>
		if (conn->llcp_req != conn->llcp_ack) {
   132a2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   132a6:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   132aa:	4299      	cmp	r1, r3
   132ac:	d1c4      	bne.n	13238 <event_connection_prepare+0x118>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   132ae:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_offset_us = 0;
   132b2:	66e5      	str	r5, [r4, #108]	; 0x6c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   132b4:	2205      	movs	r2, #5
   132b6:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   132ba:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   132be:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   132c2:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
   132c6:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   132ca:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
   132ce:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   132d2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   132d6:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   132da:	2502      	movs	r5, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   132dc:	f083 0308 	eor.w	r3, r3, #8
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   132e0:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   132e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp.conn_upd.win_size = 1;
   132e8:	2001      	movs	r0, #1
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   132ea:	f363 0282 	bfi	r2, r3, #2, #1
		conn->llcp_ack--;
   132ee:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
   132f0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   132f4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   132f8:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
		conn->llcp_ack--;
   132fc:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
   13300:	e793      	b.n	1322a <event_connection_prepare+0x10a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13302:	4836      	ldr	r0, [pc, #216]	; (133dc <event_connection_prepare+0x2bc>)
   13304:	f7fc fc8b 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   13308:	4601      	mov	r1, r0
   1330a:	2800      	cmp	r0, #0
   1330c:	d08d      	beq.n	1322a <event_connection_prepare+0x10a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1330e:	7903      	ldrb	r3, [r0, #4]
   13310:	f043 0303 	orr.w	r3, r3, #3
   13314:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13316:	2318      	movs	r3, #24
   13318:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   1331a:	2310      	movs	r3, #16
   1331c:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
   1331e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   13322:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
   13324:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
   13326:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1332a:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
   1332c:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   13330:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
   13332:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   13336:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   13338:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   1333c:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
   13340:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
   13344:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
   13348:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
   1334c:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
   13350:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
   13354:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
   13358:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   1335c:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
   13360:	f8b4 30be 	ldrh.w	r3, [r4, #190]	; 0xbe
   13364:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
   13368:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   1336c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   13370:	4620      	mov	r0, r4
   13372:	f7ff fe33 	bl	12fdc <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13376:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1337a:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	_radio.conn_upd = NULL;
   1337e:	f8c7 517c 	str.w	r5, [r7, #380]	; 0x17c
   13382:	e752      	b.n	1322a <event_connection_prepare+0x10a>
	if (conn->pause_tx) {
   13384:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   13388:	071b      	lsls	r3, r3, #28
   1338a:	f53f af4e 	bmi.w	1322a <event_connection_prepare+0x10a>
	node_rx = packet_rx_reserve_get(2);
   1338e:	2002      	movs	r0, #2
   13390:	f7fe fd46 	bl	11e20 <packet_rx_reserve_get>
	if (!node_rx) {
   13394:	2800      	cmp	r0, #0
   13396:	f43f af48 	beq.w	1322a <event_connection_prepare+0x10a>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1339a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   1339e:	2203      	movs	r2, #3
   133a0:	f362 0302 	bfi	r3, r2, #0, #3
   133a4:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	node_rx->hdr.handle = conn->handle;
   133a8:	8c23      	ldrh	r3, [r4, #32]
   133aa:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133ac:	2301      	movs	r3, #1
   133ae:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   133b0:	7a03      	ldrb	r3, [r0, #8]
   133b2:	4313      	orrs	r3, r2
   133b4:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   133b6:	2318      	movs	r3, #24
   133b8:	7243      	strb	r3, [r0, #9]
	pdu->payload.llctrl.opcode =
   133ba:	230f      	movs	r3, #15
   133bc:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   133be:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   133c2:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   133c4:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
   133c6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   133ca:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   133cc:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   133d0:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
   133d2:	f7fe ffc7 	bl	12364 <packet_rx_enqueue>
   133d6:	e728      	b.n	1322a <event_connection_prepare+0x10a>
   133d8:	20000f64 	.word	0x20000f64
   133dc:	200010b4 	.word	0x200010b4
	if (!conn_upd) {
   133e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   133e4:	b90b      	cbnz	r3, 133ea <event_connection_prepare+0x2ca>
		_radio.conn_upd = conn;
   133e6:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   133ea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   133ee:	f013 0303 	ands.w	r3, r3, #3
   133f2:	d079      	beq.n	134e8 <event_connection_prepare+0x3c8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   133f4:	4839      	ldr	r0, [pc, #228]	; (134dc <event_connection_prepare+0x3bc>)
   133f6:	f7fc fc12 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   133fa:	4601      	mov	r1, r0
   133fc:	b370      	cbz	r0, 1345c <event_connection_prepare+0x33c>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   133fe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   13402:	f36f 0301 	bfc	r3, #0, #2
   13406:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
   1340a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1340c:	3306      	adds	r3, #6
   1340e:	4433      	add	r3, r6
   13410:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
   13412:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13416:	7902      	ldrb	r2, [r0, #4]
   13418:	f042 0203 	orr.w	r2, r2, #3
   1341c:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1341e:	220c      	movs	r2, #12
   13420:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   13422:	2200      	movs	r2, #0
   13424:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   13426:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   1342a:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1342c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1342e:	f240 40e2 	movw	r0, #1250	; 0x4e2
   13432:	fbb2 f2f0 	udiv	r2, r2, r0
   13436:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   1343a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
   1343e:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   13442:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   13446:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   1344a:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   1344e:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   13452:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
   13456:	4620      	mov	r0, r4
   13458:	f7ff fdc0 	bl	12fdc <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1345c:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
   13460:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   13464:	429a      	cmp	r2, r3
   13466:	d01d      	beq.n	134a4 <event_connection_prepare+0x384>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   13468:	2005      	movs	r0, #5
   1346a:	f7ff fac7 	bl	129fc <event_stop.constprop.46>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1346e:	481b      	ldr	r0, [pc, #108]	; (134dc <event_connection_prepare+0x3bc>)
   13470:	f7fc fbd5 	bl	fc1e <mem_acquire>
		if (node_tx) {
   13474:	4601      	mov	r1, r0
   13476:	b1a8      	cbz	r0, 134a4 <event_connection_prepare+0x384>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   13478:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   1347c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13480:	7903      	ldrb	r3, [r0, #4]
   13482:	f043 0303 	orr.w	r3, r3, #3
   13486:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   13488:	2302      	movs	r3, #2
   1348a:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1348c:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   1348e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
   13492:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   13494:	4620      	mov	r0, r4
   13496:	f7ff fda1 	bl	12fdc <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   1349a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
   1349c:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   1349e:	bf98      	it	ls
   134a0:	3301      	addls	r3, #1
   134a2:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
   134a4:	f894 3020 	ldrb.w	r3, [r4, #32]
   134a8:	f994 501d 	ldrsb.w	r5, [r4, #29]
   134ac:	480c      	ldr	r0, [pc, #48]	; (134e0 <event_connection_prepare+0x3c0>)
   134ae:	490d      	ldr	r1, [pc, #52]	; (134e4 <event_connection_prepare+0x3c4>)
   134b0:	68a2      	ldr	r2, [r4, #8]
   134b2:	9403      	str	r4, [sp, #12]
   134b4:	3307      	adds	r3, #7
   134b6:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   134ba:	bf38      	it	cc
   134bc:	4601      	movcc	r1, r0
   134be:	b2db      	uxtb	r3, r3
   134c0:	e88d 000c 	stmia.w	sp, {r2, r3}
   134c4:	9102      	str	r1, [sp, #8]
   134c6:	1d23      	adds	r3, r4, #4
   134c8:	4622      	mov	r2, r4
   134ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   134cc:	4648      	mov	r0, r9
	conn->event_counter = event_counter + 1;
   134ce:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   134d0:	f7ff faa2 	bl	12a18 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   134d4:	8466      	strh	r6, [r4, #34]	; 0x22
}
   134d6:	b00f      	add	sp, #60	; 0x3c
   134d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134dc:	200010b4 	.word	0x200010b4
   134e0:	00013f69 	.word	0x00013f69
   134e4:	00013c19 	.word	0x00013c19
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   134e8:	f8b4 8068 	ldrh.w	r8, [r4, #104]	; 0x68
   134ec:	eba6 0808 	sub.w	r8, r6, r8
   134f0:	fa1f f888 	uxth.w	r8, r8
	} else if (instant_latency <= 0x7FFF) {
   134f4:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   134f8:	d1b0      	bne.n	1345c <event_connection_prepare+0x33c>
		conn->llcp_ack = conn->llcp_req;
   134fa:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   134fe:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13502:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   13506:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
   1350a:	428a      	cmp	r2, r1
   1350c:	d008      	beq.n	13520 <event_connection_prepare+0x400>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   1350e:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13512:	f002 0207 	and.w	r2, r2, #7
   13516:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13518:	bf04      	itt	eq
   1351a:	f884 10a9 	strbeq.w	r1, [r4, #169]	; 0xa9
			conn->procedure_expire = 0;
   1351e:	86a3      	strheq	r3, [r4, #52]	; 0x34
		if (_radio.conn_upd == conn) {
   13520:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
		_radio.ticker_id_prepare = 0;
   13524:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   13526:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   13528:	bf08      	it	eq
   1352a:	f8c7 317c 	streq.w	r3, [r7, #380]	; 0x17c
		_radio.ticker_id_prepare = 0;
   1352e:	733b      	strb	r3, [r7, #12]
		if ((conn->llcp.conn_upd.interval !=
   13530:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   13532:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
   13536:	429a      	cmp	r2, r3
   13538:	d114      	bne.n	13564 <event_connection_prepare+0x444>
		     conn->conn_interval) ||
   1353a:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
   1353e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13540:	4299      	cmp	r1, r3
   13542:	d10f      	bne.n	13564 <event_connection_prepare+0x444>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   13544:	f240 43e2 	movw	r3, #1250	; 0x4e2
   13548:	435a      	muls	r2, r3
   1354a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
   1354e:	f242 7110 	movw	r1, #10000	; 0x2710
   13552:	fb01 2303 	mla	r3, r1, r3, r2
   13556:	3b01      	subs	r3, #1
   13558:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   1355c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1355e:	b29b      	uxth	r3, r3
   13560:	429a      	cmp	r2, r3
   13562:	d016      	beq.n	13592 <event_connection_prepare+0x472>
			radio_pdu_node_rx = packet_rx_reserve_get(2);
   13564:	2002      	movs	r0, #2
   13566:	f7fe fc5b 	bl	11e20 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
   1356a:	2800      	cmp	r0, #0
   1356c:	f43f ade1 	beq.w	13132 <event_connection_prepare+0x12>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   13570:	8c23      	ldrh	r3, [r4, #32]
   13572:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13574:	2305      	movs	r3, #5
   13576:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   13578:	2300      	movs	r3, #0
   1357a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
   1357c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
   13580:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
   13582:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   13586:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
   13588:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
   1358c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
   1358e:	f7fe fee9 	bl	12364 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13592:	6823      	ldr	r3, [r4, #0]
   13594:	6865      	ldr	r5, [r4, #4]
   13596:	2b00      	cmp	r3, #0
   13598:	da09      	bge.n	135ae <event_connection_prepare+0x48e>
			u32_t ticks_prepare_to_start =
   1359a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1359c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   135a0:	42a8      	cmp	r0, r5
   135a2:	bf2c      	ite	cs
   135a4:	4481      	addcs	r9, r0
   135a6:	44a9      	addcc	r9, r5
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   135a8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   135aa:	eba9 0903 	sub.w	r9, r9, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   135ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   135b0:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
		conn_interval_old = instant_latency * conn->conn_interval;
   135b4:	fb13 f308 	smulbb	r3, r3, r8
   135b8:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   135ba:	fbb3 f2fb 	udiv	r2, r3, fp
   135be:	b291      	uxth	r1, r2
   135c0:	910b      	str	r1, [sp, #44]	; 0x2c
		conn_interval_new = latency *
   135c2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   135c6:	fb1b f001 	smulbb	r0, fp, r1
   135ca:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   135cc:	4283      	cmp	r3, r0
   135ce:	49ac      	ldr	r1, [pc, #688]	; (13880 <event_connection_prepare+0x760>)
   135d0:	f080 80f0 	bcs.w	137b4 <event_connection_prepare+0x694>
				TICKER_US_TO_TICKS((conn_interval_new -
   135d4:	1ac0      	subs	r0, r0, r3
   135d6:	f240 1223 	movw	r2, #291	; 0x123
   135da:	4342      	muls	r2, r0
   135dc:	17c3      	asrs	r3, r0, #31
   135de:	fb01 2303 	mla	r3, r1, r3, r2
   135e2:	fba0 0101 	umull	r0, r1, r0, r1
   135e6:	4419      	add	r1, r3
   135e8:	a3a3      	add	r3, pc, #652	; (adr r3, 13878 <event_connection_prepare+0x758>)
   135ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   135ee:	f7ec fe6d 	bl	2cc <__aeabi_uldivmod>
   135f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   135f6:	4481      	add	r9, r0
		conn->latency_prepare -= (instant_latency - latency);
   135f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   135fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   135fc:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 138a4 <event_connection_prepare+0x784>
   13600:	eba3 0308 	sub.w	r3, r3, r8
   13604:	4413      	add	r3, r2
   13606:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
   13608:	6823      	ldr	r3, [r4, #0]
   1360a:	429d      	cmp	r5, r3
   1360c:	bf38      	it	cc
   1360e:	461d      	movcc	r5, r3
		if (conn->role) {
   13610:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
   13614:	950d      	str	r5, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   13616:	f240 46e2 	movw	r6, #1250	; 0x4e2
		if (conn->role) {
   1361a:	2b00      	cmp	r3, #0
   1361c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1361e:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   13620:	fb06 f50b 	mul.w	r5, r6, fp
		if (conn->role) {
   13624:	f280 80d7 	bge.w	137d6 <event_connection_prepare+0x6b6>
				conn->slave.window_widening_periodic_us *
   13628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
   1362a:	6c62      	ldr	r2, [r4, #68]	; 0x44
				conn->slave.window_widening_periodic_us *
   1362c:	980b      	ldr	r0, [sp, #44]	; 0x2c
			conn->slave.window_widening_prepare_us -=
   1362e:	fb03 2818 	mls	r8, r3, r8, r2
				(((gc_lookup_ppm[_radio.sca] +
   13632:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
   13636:	4a93      	ldr	r2, [pc, #588]	; (13884 <event_connection_prepare+0x764>)
   13638:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   1363c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13640:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   13648:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
   1364c:	441f      	add	r7, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   1364e:	436f      	muls	r7, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   13650:	f507 2774 	add.w	r7, r7, #999424	; 0xf4000
				conn->llcp.conn_upd.win_size * 1250;
   13654:	4372      	muls	r2, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   13656:	4b8c      	ldr	r3, [pc, #560]	; (13888 <event_connection_prepare+0x768>)
			conn->slave.window_size_prepare_us =
   13658:	64e2      	str	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   1365a:	f207 273f 	addw	r7, r7, #575	; 0x23f
   1365e:	fbb7 f7f3 	udiv	r7, r7, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   13662:	086b      	lsrs	r3, r5, #1
				conn->slave.window_widening_periodic_us *
   13664:	4378      	muls	r0, r7
				(conn_interval_us >> 1) - RADIO_TIFS;
   13666:	3b96      	subs	r3, #150	; 0x96
			conn->slave.ticks_to_offset = 0;
   13668:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   1366a:	4480      	add	r8, r0
			conn->slave.window_widening_periodic_us =
   1366c:	63e7      	str	r7, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
   1366e:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
   13670:	65a2      	str	r2, [r4, #88]	; 0x58
			conn->slave.window_widening_prepare_us +=
   13672:	4598      	cmp	r8, r3
   13674:	bf94      	ite	ls
   13676:	f8c4 8044 	strls.w	r8, [r4, #68]	; 0x44
   1367a:	6463      	strhi	r3, [r4, #68]	; 0x44
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   1367c:	fba0 010a 	umull	r0, r1, r0, sl
   13680:	a37d      	add	r3, pc, #500	; (adr r3, 13878 <event_connection_prepare+0x758>)
   13682:	e9d3 2300 	ldrd	r2, r3, [r3]
   13686:	f7ec fe21 	bl	2cc <__aeabi_uldivmod>
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   1368a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ticks_at_expire -=
   1368c:	eba9 0900 	sub.w	r9, r9, r0
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   13690:	fbb3 f0f6 	udiv	r0, r3, r6
   13694:	4370      	muls	r0, r6
   13696:	a378      	add	r3, pc, #480	; (adr r3, 13878 <event_connection_prepare+0x758>)
   13698:	e9d3 2300 	ldrd	r2, r3, [r3]
   1369c:	fba0 010a 	umull	r0, r1, r0, sl
   136a0:	f7ec fe14 	bl	2cc <__aeabi_uldivmod>
			periodic_us -=
   136a4:	1bef      	subs	r7, r5, r7
			ticks_win_offset =
   136a6:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
   136aa:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   136ae:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   136b0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
   136b4:	f8a4 b024 	strh.w	fp, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   136b8:	f242 7210 	movw	r2, #10000	; 0x2710
   136bc:	fb02 5303 	mla	r3, r2, r3, r5
   136c0:	3b01      	subs	r3, #1
   136c2:	fbb3 f3f5 	udiv	r3, r3, r5
   136c6:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   136c8:	4b70      	ldr	r3, [pc, #448]	; (1388c <event_connection_prepare+0x76c>)
   136ca:	442b      	add	r3, r5
   136cc:	fbb3 f5f5 	udiv	r5, r3, r5
		if (!conn->llcp.conn_upd.is_internal) {
   136d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   136d4:	8665      	strh	r5, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
   136d6:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   136da:	bf08      	it	eq
   136dc:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
   136de:	2101      	movs	r1, #1
   136e0:	2000      	movs	r0, #0
   136e2:	f004 f929 	bl	17938 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   136e6:	2200      	movs	r2, #0
		mayfly_was_enabled =
   136e8:	900b      	str	r0, [sp, #44]	; 0x2c
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   136ea:	2101      	movs	r1, #1
   136ec:	4610      	mov	r0, r2
   136ee:	f7fc fb27 	bl	fd40 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136f2:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   136f6:	f641 13b1 	movw	r3, #6577	; 0x19b1
   136fa:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   136fc:	3207      	adds	r2, #7
		ticker_status =
   136fe:	9300      	str	r3, [sp, #0]
   13700:	b2d2      	uxtb	r2, r2
   13702:	4b63      	ldr	r3, [pc, #396]	; (13890 <event_connection_prepare+0x770>)
   13704:	4608      	mov	r0, r1
   13706:	f7fd fa0b 	bl	10b20 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1370a:	f030 0802 	bics.w	r8, r0, #2
   1370e:	f47f ad10 	bne.w	13132 <event_connection_prepare+0x12>
				     TICKER_US_TO_TICKS(periodic_us),
   13712:	fba7 ab0a 	umull	sl, fp, r7, sl
   13716:	a358      	add	r3, pc, #352	; (adr r3, 13878 <event_connection_prepare+0x758>)
   13718:	e9d3 2300 	ldrd	r2, r3, [r3]
   1371c:	4650      	mov	r0, sl
   1371e:	4659      	mov	r1, fp
   13720:	f7ec fdd4 	bl	2cc <__aeabi_uldivmod>
				     TICKER_REMAINDER(periodic_us),
   13724:	4a5b      	ldr	r2, [pc, #364]	; (13894 <event_connection_prepare+0x774>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13726:	f894 5020 	ldrb.w	r5, [r4, #32]
   1372a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(periodic_us),
   1372e:	2307      	movs	r3, #7
   13730:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13734:	2100      	movs	r1, #0
   13736:	4343      	muls	r3, r0
   13738:	fb02 3301 	mla	r3, r2, r1, r3
   1373c:	fba0 0102 	umull	r0, r1, r0, r2
   13740:	ebba 0000 	subs.w	r0, sl, r0
   13744:	4419      	add	r1, r3
   13746:	eb6b 0101 	sbc.w	r1, fp, r1
   1374a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1374e:	2300      	movs	r3, #0
   13750:	f7ec fdbc 	bl	2cc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13756:	68e3      	ldr	r3, [r4, #12]
   13758:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   1375c:	494e      	ldr	r1, [pc, #312]	; (13898 <event_connection_prepare+0x778>)
		ticker_status =
   1375e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13760:	4413      	add	r3, r2
   13762:	b29a      	uxth	r2, r3
   13764:	4b4d      	ldr	r3, [pc, #308]	; (1389c <event_connection_prepare+0x77c>)
		ticker_status =
   13766:	9204      	str	r2, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13768:	ea13 032e 	ands.w	r3, r3, lr, asr #32
   1376c:	bf38      	it	cc
   1376e:	460b      	movcc	r3, r1
   13770:	3507      	adds	r5, #7
		ticker_status =
   13772:	f641 11c1 	movw	r1, #6593	; 0x19c1
   13776:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13778:	b2ed      	uxtb	r5, r5
		ticker_status =
   1377a:	4945      	ldr	r1, [pc, #276]	; (13890 <event_connection_prepare+0x770>)
   1377c:	9107      	str	r1, [sp, #28]
   1377e:	9305      	str	r3, [sp, #20]
   13780:	9406      	str	r4, [sp, #24]
   13782:	f8cd 800c 	str.w	r8, [sp, #12]
   13786:	e88d 00c0 	stmia.w	sp, {r6, r7}
   1378a:	464b      	mov	r3, r9
   1378c:	462a      	mov	r2, r5
   1378e:	4641      	mov	r1, r8
   13790:	4640      	mov	r0, r8
   13792:	f7fd f937 	bl	10a04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13796:	f030 0002 	bics.w	r0, r0, #2
   1379a:	f47f acca 	bne.w	13132 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
   1379e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   137a0:	2b00      	cmp	r3, #0
   137a2:	f43f ae98 	beq.w	134d6 <event_connection_prepare+0x3b6>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   137a6:	2201      	movs	r2, #1
   137a8:	4611      	mov	r1, r2
}
   137aa:	b00f      	add	sp, #60	; 0x3c
   137ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   137b0:	f7fc bac6 	b.w	fd40 <mayfly_enable>
				TICKER_US_TO_TICKS((conn_interval_old -
   137b4:	fb0b 3212 	mls	r2, fp, r2, r3
   137b8:	b292      	uxth	r2, r2
   137ba:	fba2 0101 	umull	r0, r1, r2, r1
   137be:	f240 1323 	movw	r3, #291	; 0x123
   137c2:	fb03 1102 	mla	r1, r3, r2, r1
   137c6:	a32c      	add	r3, pc, #176	; (adr r3, 13878 <event_connection_prepare+0x758>)
   137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   137cc:	f7ec fd7e 	bl	2cc <__aeabi_uldivmod>
			ticks_at_expire -=
   137d0:	eba9 0900 	sub.w	r9, r9, r0
   137d4:	e710      	b.n	135f8 <event_connection_prepare+0x4d8>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   137d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   137d8:	a327      	add	r3, pc, #156	; (adr r3, 13878 <event_connection_prepare+0x758>)
   137da:	e9d3 2300 	ldrd	r2, r3, [r3]
   137de:	fba1 010a 	umull	r0, r1, r1, sl
   137e2:	f7ec fd73 	bl	2cc <__aeabi_uldivmod>
			ticks_win_offset =
   137e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   137ea:	1c46      	adds	r6, r0, #1
		periodic_us = conn_interval_us;
   137ec:	462f      	mov	r7, r5
   137ee:	e75c      	b.n	136aa <event_connection_prepare+0x58a>
	if (conn->llcp.chan_map.initiate) {
   137f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   137f4:	b313      	cbz	r3, 1383c <event_connection_prepare+0x71c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   137f6:	482a      	ldr	r0, [pc, #168]	; (138a0 <event_connection_prepare+0x780>)
   137f8:	f7fc fa11 	bl	fc1e <mem_acquire>
		if (node_tx) {
   137fc:	4605      	mov	r5, r0
   137fe:	2800      	cmp	r0, #0
   13800:	f43f ae2c 	beq.w	1345c <event_connection_prepare+0x33c>
			conn->llcp.chan_map.initiate = 0;
   13804:	2300      	movs	r3, #0
   13806:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
   1380a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1380c:	3306      	adds	r3, #6
   1380e:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   13810:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13814:	7903      	ldrb	r3, [r0, #4]
   13816:	f043 0303 	orr.w	r3, r3, #3
   1381a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1381c:	2308      	movs	r3, #8
   1381e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   13820:	2301      	movs	r3, #1
   13822:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   13824:	f104 0161 	add.w	r1, r4, #97	; 0x61
   13828:	2205      	movs	r2, #5
   1382a:	3008      	adds	r0, #8
   1382c:	f7ec ff14 	bl	658 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   13830:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
   13834:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
   13838:	4629      	mov	r1, r5
   1383a:	e60c      	b.n	13456 <event_connection_prepare+0x336>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1383c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
   13840:	1af3      	subs	r3, r6, r3
   13842:	041d      	lsls	r5, r3, #16
   13844:	f53f ae0a 	bmi.w	1345c <event_connection_prepare+0x33c>
		conn->llcp_ack = conn->llcp_req;
   13848:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   1384c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
   13850:	f104 0517 	add.w	r5, r4, #23
   13854:	2205      	movs	r2, #5
   13856:	f104 0161 	add.w	r1, r4, #97	; 0x61
   1385a:	4628      	mov	r0, r5
   1385c:	f7ec fefc 	bl	658 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   13860:	2105      	movs	r1, #5
   13862:	4628      	mov	r0, r5
   13864:	f7fc fb74 	bl	ff50 <util_ones_count_get>
		conn->data_chan_count =
   13868:	7f63      	ldrb	r3, [r4, #29]
   1386a:	f360 0305 	bfi	r3, r0, #0, #6
   1386e:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   13870:	2301      	movs	r3, #1
   13872:	7723      	strb	r3, [r4, #28]
   13874:	e5f2      	b.n	1345c <event_connection_prepare+0x33c>
   13876:	bf00      	nop
   13878:	1afd498d 	.word	0x1afd498d
   1387c:	00000007 	.word	0x00000007
   13880:	09ce5400 	.word	0x09ce5400
   13884:	0001a3e0 	.word	0x0001a3e0
   13888:	000f4240 	.word	0x000f4240
   1388c:	026259ff 	.word	0x026259ff
   13890:	00012891 	.word	0x00012891
   13894:	1afd498d 	.word	0x1afd498d
   13898:	00013bd5 	.word	0x00013bd5
   1389c:	00013bd9 	.word	0x00013bd9
   138a0:	200010b4 	.word	0x200010b4
   138a4:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
   138a8:	f894 8060 	ldrb.w	r8, [r4, #96]	; 0x60
   138ac:	f1b8 0f00 	cmp.w	r8, #0
   138b0:	f47f add4 	bne.w	1345c <event_connection_prepare+0x33c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   138b4:	48c6      	ldr	r0, [pc, #792]	; (13bd0 <event_connection_prepare+0xab0>)
   138b6:	f7fc f9b2 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   138ba:	4605      	mov	r5, r0
   138bc:	2800      	cmp	r0, #0
   138be:	f43f adcd 	beq.w	1345c <event_connection_prepare+0x33c>
	if (!conn->role) {
   138c2:	f994 301d 	ldrsb.w	r3, [r4, #29]
   138c6:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   138c8:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   138cc:	db4d      	blt.n	1396a <event_connection_prepare+0x84a>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   138ce:	f104 07d1 	add.w	r7, r4, #209	; 0xd1
   138d2:	463b      	mov	r3, r7
   138d4:	4642      	mov	r2, r8
   138d6:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   138da:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   138de:	f003 fc0c 	bl	170fa <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   138e2:	2210      	movs	r2, #16
   138e4:	4639      	mov	r1, r7
   138e6:	f104 00f2 	add.w	r0, r4, #242	; 0xf2
   138ea:	f7ec feb5 	bl	658 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   138ee:	f104 01ea 	add.w	r1, r4, #234	; 0xea
   138f2:	2208      	movs	r2, #8
   138f4:	f204 100b 	addw	r0, r4, #267	; 0x10b
   138f8:	f7ec feae 	bl	658 <memcpy>
		conn->ccm_rx.direction = 0;
   138fc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->ccm_rx.counter = 0;
   13900:	f884 80e1 	strb.w	r8, [r4, #225]	; 0xe1
		conn->ccm_rx.direction = 0;
   13904:	f368 0300 	bfi	r3, r8, #0, #1
   13908:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->ccm_tx.direction = 1;
   1390c:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
		conn->ccm_rx.counter = 0;
   13910:	f884 80e2 	strb.w	r8, [r4, #226]	; 0xe2
		conn->ccm_tx.direction = 1;
   13914:	f043 0301 	orr.w	r3, r3, #1
   13918:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
		conn->enc_rx = 1;
   1391c:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
		conn->ccm_rx.counter = 0;
   13920:	f884 80e3 	strb.w	r8, [r4, #227]	; 0xe3
		conn->enc_rx = 1;
   13924:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   13928:	f884 80e4 	strb.w	r8, [r4, #228]	; 0xe4
   1392c:	f884 80e5 	strb.w	r8, [r4, #229]	; 0xe5
   13930:	f884 80e6 	strb.w	r8, [r4, #230]	; 0xe6
   13934:	f884 80e7 	strb.w	r8, [r4, #231]	; 0xe7
   13938:	f884 80e8 	strb.w	r8, [r4, #232]	; 0xe8
		conn->ccm_tx.counter = 0;
   1393c:	f8a4 8102 	strh.w	r8, [r4, #258]	; 0x102
   13940:	f8a4 8104 	strh.w	r8, [r4, #260]	; 0x104
   13944:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
   13948:	f8a4 8108 	strh.w	r8, [r4, #264]	; 0x108
		conn->enc_rx = 1;
   1394c:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   13950:	4651      	mov	r1, sl
   13952:	4620      	mov	r0, r4
   13954:	f7ff fb8a 	bl	1306c <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   13958:	4629      	mov	r1, r5
   1395a:	4620      	mov	r0, r4
   1395c:	f7ff fb3e 	bl	12fdc <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   13960:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   13964:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   13968:	e578      	b.n	1345c <event_connection_prepare+0x33c>
	else if (!conn->pause_tx || conn->refresh) {
   1396a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   1396e:	f003 0348 	and.w	r3, r3, #72	; 0x48
   13972:	2b08      	cmp	r3, #8
   13974:	f000 809b 	beq.w	13aae <event_connection_prepare+0x98e>
		if (conn->llcp.encryption.error_code) {
   13978:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
   1397c:	b1f7      	cbz	r7, 139bc <event_connection_prepare+0x89c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1397e:	7903      	ldrb	r3, [r0, #4]
   13980:	f043 0303 	orr.w	r3, r3, #3
   13984:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   13986:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1398a:	0698      	lsls	r0, r3, #26
   1398c:	d511      	bpl.n	139b2 <event_connection_prepare+0x892>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   1398e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	if (conn->common.fex_valid &&
   13992:	0759      	lsls	r1, r3, #29
   13994:	d50d      	bpl.n	139b2 <event_connection_prepare+0x892>
		pdu->payload.llctrl.opcode =
   13996:	2311      	movs	r3, #17
   13998:	71eb      	strb	r3, [r5, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1399a:	2303      	movs	r3, #3
   1399c:	722b      	strb	r3, [r5, #8]
		p->error_code = conn->llcp.encryption.error_code;
   1399e:	726f      	strb	r7, [r5, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   139a0:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   139a2:	716b      	strb	r3, [r5, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   139a4:	796b      	ldrb	r3, [r5, #5]
   139a6:	3301      	adds	r3, #1
   139a8:	716b      	strb	r3, [r5, #5]
	conn->llcp.encryption.error_code = 0;
   139aa:	2300      	movs	r3, #0
   139ac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   139b0:	e7d2      	b.n	13958 <event_connection_prepare+0x838>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   139b2:	230d      	movs	r3, #13
   139b4:	71eb      	strb	r3, [r5, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   139b6:	722f      	strb	r7, [r5, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   139b8:	2301      	movs	r3, #1
   139ba:	e7f2      	b.n	139a2 <event_connection_prepare+0x882>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   139bc:	4884      	ldr	r0, [pc, #528]	; (13bd0 <event_connection_prepare+0xab0>)
   139be:	f7fc f92e 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   139c2:	4680      	mov	r8, r0
   139c4:	2800      	cmp	r0, #0
   139c6:	f000 80fd 	beq.w	13bc4 <event_connection_prepare+0xaa4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139ca:	7903      	ldrb	r3, [r0, #4]
   139cc:	f043 0303 	orr.w	r3, r3, #3
   139d0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   139d2:	230d      	movs	r3, #13
   139d4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   139d6:	f04f 0a04 	mov.w	sl, #4
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   139da:	f100 0308 	add.w	r3, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   139de:	4619      	mov	r1, r3
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   139e0:	f108 0b10 	add.w	fp, r8, #16
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   139e4:	f880 a007 	strb.w	sl, [r0, #7]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   139e8:	2008      	movs	r0, #8
   139ea:	930c      	str	r3, [sp, #48]	; 0x30
   139ec:	f003 fb1a 	bl	17024 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   139f0:	4659      	mov	r1, fp
   139f2:	4650      	mov	r0, sl
   139f4:	f003 fb16 	bl	17024 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   139f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   139fa:	2208      	movs	r2, #8
   139fc:	4619      	mov	r1, r3
   139fe:	f104 0084 	add.w	r0, r4, #132	; 0x84
   13a02:	f7ec fe29 	bl	658 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   13a06:	4652      	mov	r2, sl
   13a08:	4659      	mov	r1, fp
   13a0a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   13a0e:	f7ec fe23 	bl	658 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   13a12:	4641      	mov	r1, r8
   13a14:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   13a16:	f104 08d1 	add.w	r8, r4, #209	; 0xd1
	ctrl_tx_enqueue(conn, node_tx);
   13a1a:	f7ff fadf 	bl	12fdc <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   13a1e:	4643      	mov	r3, r8
   13a20:	463a      	mov	r2, r7
   13a22:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   13a26:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   13a2a:	f003 fb66 	bl	170fa <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   13a2e:	2210      	movs	r2, #16
   13a30:	4641      	mov	r1, r8
   13a32:	f104 00f2 	add.w	r0, r4, #242	; 0xf2
   13a36:	f7ec fe0f 	bl	658 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   13a3a:	2208      	movs	r2, #8
   13a3c:	f104 01ea 	add.w	r1, r4, #234	; 0xea
   13a40:	f204 100b 	addw	r0, r4, #267	; 0x10b
   13a44:	f7ec fe08 	bl	658 <memcpy>
			conn->ccm_rx.direction = 1;
   13a48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
			conn->ccm_rx.counter = 0;
   13a4c:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
			conn->ccm_rx.direction = 1;
   13a50:	f043 0301 	orr.w	r3, r3, #1
   13a54:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->ccm_tx.direction = 0;
   13a58:	f894 310a 	ldrb.w	r3, [r4, #266]	; 0x10a
			conn->ccm_rx.counter = 0;
   13a5c:	f884 70e2 	strb.w	r7, [r4, #226]	; 0xe2
			conn->ccm_tx.direction = 0;
   13a60:	f367 0300 	bfi	r3, r7, #0, #1
   13a64:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
			conn->enc_rx = 1;
   13a68:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
			conn->ccm_rx.counter = 0;
   13a6c:	f884 70e3 	strb.w	r7, [r4, #227]	; 0xe3
			conn->enc_rx = 1;
   13a70:	f043 0310 	orr.w	r3, r3, #16
   13a74:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a78:	792b      	ldrb	r3, [r5, #4]
			conn->ccm_rx.counter = 0;
   13a7a:	f884 70e4 	strb.w	r7, [r4, #228]	; 0xe4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a7e:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   13a82:	f884 70e5 	strb.w	r7, [r4, #229]	; 0xe5
   13a86:	f884 70e6 	strb.w	r7, [r4, #230]	; 0xe6
   13a8a:	f884 70e7 	strb.w	r7, [r4, #231]	; 0xe7
   13a8e:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
			conn->ccm_tx.counter = 0;
   13a92:	f8a4 7102 	strh.w	r7, [r4, #258]	; 0x102
   13a96:	f8a4 7104 	strh.w	r7, [r4, #260]	; 0x104
   13a9a:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
   13a9e:	f8a4 7108 	strh.w	r7, [r4, #264]	; 0x108
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13aa2:	712b      	strb	r3, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13aa4:	2301      	movs	r3, #1
   13aa6:	716b      	strb	r3, [r5, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   13aa8:	2305      	movs	r3, #5
   13aaa:	71eb      	strb	r3, [r5, #7]
   13aac:	e754      	b.n	13958 <event_connection_prepare+0x838>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   13aae:	4651      	mov	r1, sl
   13ab0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
   13ab4:	f7ff fada 	bl	1306c <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   13ab8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   13abc:	f892 30d0 	ldrb.w	r3, [r2, #208]	; 0xd0
   13ac0:	f368 0382 	bfi	r3, r8, #2, #1
		_radio.conn_curr->pause_tx = 0;
   13ac4:	f368 03c3 	bfi	r3, r8, #3, #1
   13ac8:	f882 30d0 	strb.w	r3, [r2, #208]	; 0xd0
   13acc:	e744      	b.n	13958 <event_connection_prepare+0x838>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13ace:	4840      	ldr	r0, [pc, #256]	; (13bd0 <event_connection_prepare+0xab0>)
   13ad0:	f7fc f8a5 	bl	fc1e <mem_acquire>
	if (node_tx) {
   13ad4:	4605      	mov	r5, r0
   13ad6:	2800      	cmp	r0, #0
   13ad8:	f43f acc0 	beq.w	1345c <event_connection_prepare+0x33c>
		conn->llcp_ack = conn->llcp_req;
   13adc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   13ae0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
   13ae4:	238f      	movs	r3, #143	; 0x8f
   13ae6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13aea:	7903      	ldrb	r3, [r0, #4]
   13aec:	f043 0303 	orr.w	r3, r3, #3
   13af0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13af2:	2309      	movs	r3, #9
   13af4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   13af6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   13afa:	2b00      	cmp	r3, #0
   13afc:	bfac      	ite	ge
   13afe:	2308      	movge	r3, #8
   13b00:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   13b02:	2208      	movs	r2, #8
		pdu_ctrl_tx->payload.llctrl.opcode =
   13b04:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   13b06:	2100      	movs	r1, #0
   13b08:	4410      	add	r0, r2
   13b0a:	f7ec fdd1 	bl	6b0 <memset>
			conn->llcp_features & 0xFF;
   13b0e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   13b12:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
   13b14:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   13b16:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   13b18:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   13b1a:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
   13b1c:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
   13b1e:	4620      	mov	r0, r4
   13b20:	f7ff fa5c 	bl	12fdc <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   13b24:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   13b26:	86a3      	strh	r3, [r4, #52]	; 0x34
   13b28:	e498      	b.n	1345c <event_connection_prepare+0x33c>
	if (conn->llcp_version.tx == 0) {
   13b2a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   13b2e:	07da      	lsls	r2, r3, #31
   13b30:	d421      	bmi.n	13b76 <event_connection_prepare+0xa56>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13b32:	4827      	ldr	r0, [pc, #156]	; (13bd0 <event_connection_prepare+0xab0>)
   13b34:	f7fc f873 	bl	fc1e <mem_acquire>
		if (node_tx) {
   13b38:	4601      	mov	r1, r0
   13b3a:	2800      	cmp	r0, #0
   13b3c:	f43f ac8e 	beq.w	1345c <event_connection_prepare+0x33c>
			conn->llcp_ack = conn->llcp_req;
   13b40:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   13b44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
   13b48:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   13b4c:	f043 0301 	orr.w	r3, r3, #1
   13b50:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13b54:	7903      	ldrb	r3, [r0, #4]
   13b56:	f043 0303 	orr.w	r3, r3, #3
   13b5a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13b5c:	2306      	movs	r3, #6
   13b5e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   13b60:	230c      	movs	r3, #12
   13b62:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   13b64:	2309      	movs	r3, #9
   13b66:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   13b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b6c:	7243      	strb	r3, [r0, #9]
   13b6e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   13b70:	72c3      	strb	r3, [r0, #11]
   13b72:	7303      	strb	r3, [r0, #12]
   13b74:	e7d3      	b.n	13b1e <event_connection_prepare+0x9fe>
	} else if (conn->llcp_version.rx != 0) {
   13b76:	079b      	lsls	r3, r3, #30
   13b78:	f57f aadb 	bpl.w	13132 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
   13b7c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   13b80:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		radio_pdu_node_rx = packet_rx_reserve_get(2);
   13b84:	2002      	movs	r0, #2
   13b86:	f7fe f94b 	bl	11e20 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
   13b8a:	2800      	cmp	r0, #0
   13b8c:	f43f aad1 	beq.w	13132 <event_connection_prepare+0x12>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   13b90:	8c23      	ldrh	r3, [r4, #32]
   13b92:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13b94:	2301      	movs	r3, #1
   13b96:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   13b98:	7a03      	ldrb	r3, [r0, #8]
   13b9a:	f043 0303 	orr.w	r3, r3, #3
   13b9e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13ba0:	2306      	movs	r3, #6
   13ba2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   13ba4:	230c      	movs	r3, #12
   13ba6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   13ba8:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
   13bac:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   13bae:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
   13bb2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   13bb6:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
   13bba:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   13bbe:	f7fe fbd1 	bl	12364 <packet_rx_enqueue>
   13bc2:	e44b      	b.n	1345c <event_connection_prepare+0x33c>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   13bc4:	4902      	ldr	r1, [pc, #8]	; (13bd0 <event_connection_prepare+0xab0>)
   13bc6:	4628      	mov	r0, r5
   13bc8:	f7fc f843 	bl	fc52 <mem_release>
   13bcc:	e446      	b.n	1345c <event_connection_prepare+0x33c>
   13bce:	bf00      	nop
   13bd0:	200010b4 	.word	0x200010b4

00013bd4 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   13bd4:	f7ff baa4 	b.w	13120 <event_connection_prepare>

00013bd8 <event_slave_prepare>:
   13bd8:	f7ff baa2 	b.w	13120 <event_connection_prepare>

00013bdc <connection_configure>:
{
   13bdc:	b510      	push	{r4, lr}
   13bde:	4604      	mov	r4, r0
	radio_reset();
   13be0:	f003 fb66 	bl	172b0 <radio_reset>
	radio_tx_power_set(0);
   13be4:	2000      	movs	r0, #0
   13be6:	f003 fb81 	bl	172ec <radio_tx_power_set>
	radio_isr_set(isr);
   13bea:	480a      	ldr	r0, [pc, #40]	; (13c14 <connection_configure+0x38>)
   13bec:	f003 fb2a 	bl	17244 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   13bf0:	f104 0010 	add.w	r0, r4, #16
   13bf4:	f003 fb98 	bl	17328 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   13bf8:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   13bfa:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   13bfc:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   13bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   13c02:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13c04:	f240 605b 	movw	r0, #1627	; 0x65b
   13c08:	4319      	orrs	r1, r3
}
   13c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13c0e:	f003 bc33 	b.w	17478 <radio_crc_configure>
   13c12:	bf00      	nop
   13c14:	00014061 	.word	0x00014061

00013c18 <event_slave>:
{
   13c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   13c1c:	4d4b      	ldr	r5, [pc, #300]	; (13d4c <event_slave+0x134>)
{
   13c1e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   13c20:	7beb      	ldrb	r3, [r5, #15]
{
   13c22:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   13c24:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   13c28:	462f      	mov	r7, r5
   13c2a:	b12b      	cbz	r3, 13c38 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c2c:	4040      	eors	r0, r0
   13c2e:	f380 8811 	msr	BASEPRI, r0
   13c32:	f04f 0004 	mov.w	r0, #4
   13c36:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   13c38:	7b2a      	ldrb	r2, [r5, #12]
   13c3a:	8c23      	ldrh	r3, [r4, #32]
   13c3c:	b2d2      	uxtb	r2, r2
   13c3e:	3307      	adds	r3, #7
   13c40:	429a      	cmp	r2, r3
   13c42:	d1f3      	bne.n	13c2c <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
   13c44:	2303      	movs	r3, #3
   13c46:	73eb      	strb	r3, [r5, #15]
	_radio.packet_counter = 0;
   13c48:	f885 8114 	strb.w	r8, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   13c4c:	f885 8115 	strb.w	r8, [r5, #277]	; 0x115
	_radio.state = STATE_RX;
   13c50:	2301      	movs	r3, #1
   13c52:	742b      	strb	r3, [r5, #16]
	conn->latency_event = conn->latency_prepare;
   13c54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   13c56:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   13c5a:	b2d2      	uxtb	r2, r2
	_radio.ticks_anchor = ticks_at_expire;
   13c5c:	6068      	str	r0, [r5, #4]
	conn->latency_event = conn->latency_prepare;
   13c5e:	8563      	strh	r3, [r4, #42]	; 0x2a
	connection_configure(conn);
   13c60:	4620      	mov	r0, r4
	conn->latency_prepare = 0;
   13c62:	f8a4 8028 	strh.w	r8, [r4, #40]	; 0x28
	_radio.ticker_id_prepare = 0;
   13c66:	f885 800c 	strb.w	r8, [r5, #12]
	_radio.ticker_id_event =
   13c6a:	736a      	strb	r2, [r5, #13]
	connection_configure(conn);
   13c6c:	f7ff ffb6 	bl	13bdc <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   13c70:	2096      	movs	r0, #150	; 0x96
   13c72:	f003 fcaf 	bl	175d4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   13c76:	4643      	mov	r3, r8
   13c78:	4642      	mov	r2, r8
   13c7a:	4641      	mov	r1, r8
   13c7c:	4640      	mov	r0, r8
   13c7e:	f003 fc25 	bl	174cc <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13c82:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   13c86:	f895 2135 	ldrb.w	r2, [r5, #309]	; 0x135
   13c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   13c8e:	4620      	mov	r0, r4
   13c90:	3108      	adds	r1, #8
   13c92:	f7fe faa1 	bl	121d8 <rx_packet_set>
	if (conn->data_chan_sel) {
   13c96:	7f63      	ldrb	r3, [r4, #29]
   13c98:	f013 0540 	ands.w	r5, r3, #64	; 0x40
   13c9c:	d1c6      	bne.n	13c2c <event_slave+0x14>
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   13c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   13ca4:	7fa1      	ldrb	r1, [r4, #30]
   13ca6:	9300      	str	r3, [sp, #0]
   13ca8:	f104 001f 	add.w	r0, r4, #31
   13cac:	f104 0317 	add.w	r3, r4, #23
   13cb0:	f7fe f880 	bl	11db4 <chan_sel_1>
	chan_set(data_chan_use);
   13cb4:	f7fe fbc5 	bl	12442 <chan_set>
	conn->slave.window_widening_event_us +=
   13cb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   13cba:	6c62      	ldr	r2, [r4, #68]	; 0x44
	conn->slave.window_widening_prepare_us = 0;
   13cbc:	6465      	str	r5, [r4, #68]	; 0x44
	conn->slave.window_widening_event_us +=
   13cbe:	4413      	add	r3, r2
	    conn->slave.window_widening_max_us) {
   13cc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
   13cc2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
   13cc4:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   13cc6:	bf88      	it	hi
   13cc8:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
   13cca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   13ccc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
   13cce:	2500      	movs	r5, #0
	conn->slave.window_size_event_us +=
   13cd0:	4413      	add	r3, r2
   13cd2:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us =
   13cd4:	68ba      	ldr	r2, [r7, #8]
	conn->slave.window_size_prepare_us = 0;
   13cd6:	64e5      	str	r5, [r4, #76]	; 0x4c
	remainder_us =
   13cd8:	f106 0109 	add.w	r1, r6, #9
   13cdc:	4628      	mov	r0, r5
   13cde:	f003 fc85 	bl	175ec <radio_tmr_start>
   13ce2:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   13ce4:	f003 fd1e 	bl	17724 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   13ce8:	4628      	mov	r0, r5
   13cea:	f003 fd3d 	bl	17768 <radio_tmr_aa_save>
   13cee:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
   13cf0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13cf2:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
   13cf4:	4629      	mov	r1, r5
   13cf6:	4628      	mov	r0, r5
   13cf8:	eb03 0942 	add.w	r9, r3, r2, lsl #1
   13cfc:	f003 fb6d 	bl	173da <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   13d00:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   13d02:	4629      	mov	r1, r5
	hcto += addr_us_get(0);
   13d04:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   13d06:	4628      	mov	r0, r5
   13d08:	f003 fb69 	bl	173de <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   13d0c:	4440      	add	r0, r8
   13d0e:	f003 fceb 	bl	176e8 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   13d12:	f894 1020 	ldrb.w	r1, [r4, #32]
   13d16:	3107      	adds	r1, #7
   13d18:	4632      	mov	r2, r6
   13d1a:	b2c9      	uxtb	r1, r1
   13d1c:	4620      	mov	r0, r4
   13d1e:	f7ff f849 	bl	12db4 <preempt_calc>
   13d22:	4603      	mov	r3, r0
   13d24:	b148      	cbz	r0, 13d3a <event_slave+0x122>
		_radio.state = STATE_STOP;
   13d26:	2304      	movs	r3, #4
   13d28:	743b      	strb	r3, [r7, #16]
		radio_disable();
   13d2a:	f003 fb69 	bl	17400 <radio_disable>
	packet_tx_enqueue(2);
   13d2e:	2002      	movs	r0, #2
}
   13d30:	b003      	add	sp, #12
   13d32:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
   13d36:	f7fe bc1d 	b.w	12574 <packet_tx_enqueue>
		ticker_status =
   13d3a:	4a05      	ldr	r2, [pc, #20]	; (13d50 <event_slave+0x138>)
   13d3c:	4601      	mov	r1, r0
   13d3e:	f7fc ff63 	bl	10c08 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d42:	f030 0302 	bics.w	r3, r0, #2
   13d46:	f47f af71 	bne.w	13c2c <event_slave+0x14>
   13d4a:	e7f0      	b.n	13d2e <event_slave+0x116>
   13d4c:	20000f64 	.word	0x20000f64
   13d50:	00012189 	.word	0x00012189

00013d54 <mayfly_xtal_stop_calc>:
{
   13d54:	b530      	push	{r4, r5, lr}
   13d56:	b08d      	sub	sp, #52	; 0x34
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13d58:	2302      	movs	r3, #2
   13d5a:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id = 0xff;
   13d5c:	23ff      	movs	r3, #255	; 0xff
   13d5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13d62:	4d48      	ldr	r5, [pc, #288]	; (13e84 <mayfly_xtal_stop_calc+0x130>)
			       _radio.connection_count));
   13d64:	4c48      	ldr	r4, [pc, #288]	; (13e88 <mayfly_xtal_stop_calc+0x134>)
	ticks_to_expire = 0;
   13d66:	2300      	movs	r3, #0
   13d68:	930a      	str	r3, [sp, #40]	; 0x28
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13d6a:	ab09      	add	r3, sp, #36	; 0x24
   13d6c:	9302      	str	r3, [sp, #8]
   13d6e:	ab0a      	add	r3, sp, #40	; 0x28
   13d70:	9300      	str	r3, [sp, #0]
   13d72:	9501      	str	r5, [sp, #4]
   13d74:	ab0b      	add	r3, sp, #44	; 0x2c
   13d76:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   13d7a:	2101      	movs	r1, #1
   13d7c:	2000      	movs	r0, #0
   13d7e:	f7fc ff05 	bl	10b8c <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   13d82:	2802      	cmp	r0, #2
   13d84:	d00b      	beq.n	13d9e <mayfly_xtal_stop_calc+0x4a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d88:	b16b      	cbz	r3, 13da6 <mayfly_xtal_stop_calc+0x52>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   13d8a:	4040      	eors	r0, r0
   13d8c:	f380 8811 	msr	BASEPRI, r0
   13d90:	f04f 0004 	mov.w	r0, #4
   13d94:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13d96:	2101      	movs	r1, #1
   13d98:	2000      	movs	r0, #0
   13d9a:	f7fc ff6b 	bl	10c74 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   13d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13da0:	2b02      	cmp	r3, #2
   13da2:	d0f8      	beq.n	13d96 <mayfly_xtal_stop_calc+0x42>
   13da4:	e7ef      	b.n	13d86 <mayfly_xtal_stop_calc+0x32>
	} while (ticker_id != 0xff &&
   13da6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   13daa:	2aff      	cmp	r2, #255	; 0xff
   13dac:	d046      	beq.n	13e3c <mayfly_xtal_stop_calc+0xe8>
   13dae:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   13db2:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   13db4:	429a      	cmp	r2, r3
   13db6:	dad8      	bge.n	13d6a <mayfly_xtal_stop_calc+0x16>
	if ((ticker_id != 0xff) &&
   13db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13dba:	2ba8      	cmp	r3, #168	; 0xa8
   13dbc:	d83e      	bhi.n	13e3c <mayfly_xtal_stop_calc+0xe8>
		if (!s_xtal_retained) {
   13dbe:	4b33      	ldr	r3, [pc, #204]	; (13e8c <mayfly_xtal_stop_calc+0x138>)
   13dc0:	781a      	ldrb	r2, [r3, #0]
   13dc2:	b93a      	cbnz	r2, 13dd4 <mayfly_xtal_stop_calc+0x80>
			s_xtal_retained = 1;
   13dc4:	2001      	movs	r0, #1
   13dc6:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   13dc8:	4611      	mov	r1, r2
   13dca:	4b31      	ldr	r3, [pc, #196]	; (13e90 <mayfly_xtal_stop_calc+0x13c>)
   13dcc:	f7fb ffe0 	bl	fd90 <mayfly_enqueue>
			LL_ASSERT(!retval);
   13dd0:	2800      	cmp	r0, #0
   13dd2:	d1da      	bne.n	13d8a <mayfly_xtal_stop_calc+0x36>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   13dd4:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   13dd8:	2a04      	cmp	r2, #4
   13dda:	d926      	bls.n	13e2a <mayfly_xtal_stop_calc+0xd6>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   13ddc:	2a06      	cmp	r2, #6
   13dde:	d926      	bls.n	13e2e <mayfly_xtal_stop_calc+0xda>
				conn = mem_get(_radio.conn_pool,
   13de0:	3a07      	subs	r2, #7
   13de2:	b292      	uxth	r2, r2
   13de4:	f44f 7196 	mov.w	r1, #300	; 0x12c
   13de8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
   13dec:	f7fb ff46 	bl	fc7c <mem_get>
			ticks_prepare_to_start =
   13df0:	6883      	ldr	r3, [r0, #8]
   13df2:	6842      	ldr	r2, [r0, #4]
   13df4:	429a      	cmp	r2, r3
   13df6:	bf38      	it	cc
   13df8:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   13dfa:	6803      	ldr	r3, [r0, #0]
   13dfc:	2b00      	cmp	r3, #0
   13dfe:	db14      	blt.n	13e2a <mayfly_xtal_stop_calc+0xd6>
				if (hdr->ticks_xtal_to_start >
   13e00:	429a      	cmp	r2, r3
   13e02:	d212      	bcs.n	13e2a <mayfly_xtal_stop_calc+0xd6>
					u32_t ticks_drift_plus =
   13e04:	1a9b      	subs	r3, r3, r2
						ticker_update(
   13e06:	b29b      	uxth	r3, r3
					ticker_status =
   13e08:	9006      	str	r0, [sp, #24]
   13e0a:	4922      	ldr	r1, [pc, #136]	; (13e94 <mayfly_xtal_stop_calc+0x140>)
   13e0c:	9105      	str	r1, [sp, #20]
   13e0e:	2000      	movs	r0, #0
   13e10:	9302      	str	r3, [sp, #8]
   13e12:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   13e16:	9004      	str	r0, [sp, #16]
   13e18:	9003      	str	r0, [sp, #12]
   13e1a:	9001      	str	r0, [sp, #4]
   13e1c:	9000      	str	r0, [sp, #0]
   13e1e:	2101      	movs	r1, #1
   13e20:	f7fc fe38 	bl	10a94 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   13e24:	f030 0302 	bics.w	r3, r0, #2
   13e28:	d1af      	bne.n	13d8a <mayfly_xtal_stop_calc+0x36>
}
   13e2a:	b00d      	add	sp, #52	; 0x34
   13e2c:	bd30      	pop	{r4, r5, pc}
				hdr = &_radio.scanner.hdr;
   13e2e:	481a      	ldr	r0, [pc, #104]	; (13e98 <mayfly_xtal_stop_calc+0x144>)
   13e30:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
   13e34:	2a05      	cmp	r2, #5
   13e36:	bf18      	it	ne
   13e38:	4618      	movne	r0, r3
   13e3a:	e7d9      	b.n	13df0 <mayfly_xtal_stop_calc+0x9c>
		if (s_xtal_retained) {
   13e3c:	4b13      	ldr	r3, [pc, #76]	; (13e8c <mayfly_xtal_stop_calc+0x138>)
   13e3e:	781b      	ldrb	r3, [r3, #0]
   13e40:	b113      	cbz	r3, 13e48 <mayfly_xtal_stop_calc+0xf4>
   13e42:	2001      	movs	r0, #1
   13e44:	f7fe f9ac 	bl	121a0 <mayfly_xtal_retain.part.15>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   13e48:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   13e4c:	1f53      	subs	r3, r2, #5
   13e4e:	b2db      	uxtb	r3, r3
   13e50:	2bf9      	cmp	r3, #249	; 0xf9
   13e52:	d8ea      	bhi.n	13e2a <mayfly_xtal_stop_calc+0xd6>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   13e54:	2a06      	cmp	r2, #6
   13e56:	d90e      	bls.n	13e76 <mayfly_xtal_stop_calc+0x122>
				conn = mem_get(_radio.conn_pool,
   13e58:	4b0b      	ldr	r3, [pc, #44]	; (13e88 <mayfly_xtal_stop_calc+0x134>)
   13e5a:	3a07      	subs	r2, #7
   13e5c:	b292      	uxth	r2, r2
   13e5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   13e62:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   13e66:	f7fb ff09 	bl	fc7c <mem_get>
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   13e6a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   13e6e:	2101      	movs	r1, #1
   13e70:	f7fe fa2c 	bl	122cc <prepare_normal_set>
}
   13e74:	e7d9      	b.n	13e2a <mayfly_xtal_stop_calc+0xd6>
				hdr = &_radio.scanner.hdr;
   13e76:	4808      	ldr	r0, [pc, #32]	; (13e98 <mayfly_xtal_stop_calc+0x144>)
   13e78:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
   13e7c:	2a05      	cmp	r2, #5
   13e7e:	bf18      	it	ne
   13e80:	4618      	movne	r0, r3
   13e82:	e7f2      	b.n	13e6a <mayfly_xtal_stop_calc+0x116>
   13e84:	00011d99 	.word	0x00011d99
   13e88:	20000f64 	.word	0x20000f64
   13e8c:	20001160 	.word	0x20001160
   13e90:	20006a78 	.word	0x20006a78
   13e94:	00011d9d 	.word	0x00011d9d
   13e98:	20000f78 	.word	0x20000f78

00013e9c <prepare_pdu_data_tx>:
{
   13e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
   13e9e:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
	if (/* empty packet */
   13ea2:	061a      	lsls	r2, r3, #24
{
   13ea4:	4604      	mov	r4, r0
   13ea6:	460f      	mov	r7, r1
	if (/* empty packet */
   13ea8:	d409      	bmi.n	13ebe <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   13eaa:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
	    conn->empty ||
   13eae:	b135      	cbz	r5, 13ebe <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   13eb0:	f013 0f08 	tst.w	r3, #8
   13eb4:	f8d0 e118 	ldr.w	lr, [r0, #280]	; 0x118
   13eb8:	d022      	beq.n	13f00 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   13eba:	4575      	cmp	r5, lr
   13ebc:	d020      	beq.n	13f00 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
   13ebe:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   13ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13ec6:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   13eca:	f003 faeb 	bl	174a4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13ece:	7803      	ldrb	r3, [r0, #0]
   13ed0:	2201      	movs	r2, #1
   13ed2:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   13ed6:	2200      	movs	r2, #0
   13ed8:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   13eda:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13ede:	7003      	strb	r3, [r0, #0]
   13ee0:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   13ee2:	b152      	cbz	r2, 13efa <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
   13ee4:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   13ee8:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   13eea:	7803      	ldrb	r3, [r0, #0]
   13eec:	f36f 1347 	bfc	r3, #5, #3
   13ef0:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   13ef2:	2300      	movs	r3, #0
   13ef4:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   13ef6:	6038      	str	r0, [r7, #0]
   13ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
   13efa:	f362 1304 	bfi	r3, r2, #4, #1
   13efe:	e7f3      	b.n	13ee8 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
   13f00:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
		if (!conn->packet_tx_head_len) {
   13f04:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   13f08:	1d2a      	adds	r2, r5, #4
   13f0a:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
   13f0c:	b911      	cbnz	r1, 13f14 <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   13f0e:	7841      	ldrb	r1, [r0, #1]
   13f10:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
		if (conn->packet_tx_head_offset) {
   13f14:	b123      	cbz	r3, 13f20 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13f16:	5cd1      	ldrb	r1, [r2, r3]
   13f18:	2601      	movs	r6, #1
   13f1a:	f366 0101 	bfi	r1, r6, #0, #2
   13f1e:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   13f20:	f894 6128 	ldrb.w	r6, [r4, #296]	; 0x128
   13f24:	1af6      	subs	r6, r6, r3
   13f26:	b2f6      	uxtb	r6, r6
   13f28:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
   13f2a:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
   13f2c:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
   13f2e:	f36f 1104 	bfc	r1, #4, #1
   13f32:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
   13f34:	d905      	bls.n	13f42 <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
   13f36:	211b      	movs	r1, #27
   13f38:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
   13f3a:	5cd1      	ldrb	r1, [r2, r3]
   13f3c:	f041 0110 	orr.w	r1, r1, #16
   13f40:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
   13f42:	6829      	ldr	r1, [r5, #0]
   13f44:	b119      	cbz	r1, 13f4e <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
   13f46:	5cd1      	ldrb	r1, [r2, r3]
   13f48:	f041 0110 	orr.w	r1, r1, #16
   13f4c:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
   13f4e:	f1be 0f00 	cmp.w	lr, #0
   13f52:	d1ca      	bne.n	13eea <prepare_pdu_data_tx+0x4e>
   13f54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13f58:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   13f5a:	bf1c      	itt	ne
   13f5c:	f8c4 511c 	strne.w	r5, [r4, #284]	; 0x11c
   13f60:	f8c4 5118 	strne.w	r5, [r4, #280]	; 0x118
   13f64:	e7c1      	b.n	13eea <prepare_pdu_data_tx+0x4e>
	...

00013f68 <event_master>:
{
   13f68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f6c:	4d3a      	ldr	r5, [pc, #232]	; (14058 <event_master+0xf0>)
{
   13f6e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f70:	7beb      	ldrb	r3, [r5, #15]
{
   13f72:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   13f74:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   13f78:	b12b      	cbz	r3, 13f86 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13f7a:	4040      	eors	r0, r0
   13f7c:	f380 8811 	msr	BASEPRI, r0
   13f80:	f04f 0004 	mov.w	r0, #4
   13f84:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   13f86:	7b2b      	ldrb	r3, [r5, #12]
   13f88:	8c22      	ldrh	r2, [r4, #32]
   13f8a:	b2db      	uxtb	r3, r3
   13f8c:	3207      	adds	r2, #7
   13f8e:	4293      	cmp	r3, r2
   13f90:	d1f3      	bne.n	13f7a <event_master+0x12>
	_radio.packet_counter = 0;
   13f92:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   13f96:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   13f9a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   13f9c:	f04f 0804 	mov.w	r8, #4
   13fa0:	f885 800f 	strb.w	r8, [r5, #15]
	_radio.ticker_id_prepare = 0;
   13fa4:	732e      	strb	r6, [r5, #12]
	_radio.ticker_id_event =
   13fa6:	736b      	strb	r3, [r5, #13]
	conn->latency_event = conn->latency_prepare;
   13fa8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   13faa:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	_radio.state = STATE_TX;
   13fae:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   13fb0:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   13fb2:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   13fb4:	7428      	strb	r0, [r5, #16]
	_radio.ticks_anchor = ticks_at_expire;
   13fb6:	606f      	str	r7, [r5, #4]
	packet_tx_enqueue(2);
   13fb8:	f7fe fadc 	bl	12574 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   13fbc:	a903      	add	r1, sp, #12
   13fbe:	4620      	mov	r0, r4
   13fc0:	f7ff ff6c 	bl	13e9c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   13fc4:	9903      	ldr	r1, [sp, #12]
   13fc6:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
   13fca:	780b      	ldrb	r3, [r1, #0]
   13fcc:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   13fd0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   13fd4:	f362 0382 	bfi	r3, r2, #2, #1
   13fd8:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   13fda:	4620      	mov	r0, r4
   13fdc:	f7ff fdfe 	bl	13bdc <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   13fe0:	2096      	movs	r0, #150	; 0x96
   13fe2:	f003 faf7 	bl	175d4 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
   13fe6:	4630      	mov	r0, r6
   13fe8:	f003 fa64 	bl	174b4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   13fec:	9903      	ldr	r1, [sp, #12]
   13fee:	4620      	mov	r0, r4
   13ff0:	f7fe f913 	bl	1221a <tx_packet_set>
	if (conn->data_chan_sel) {
   13ff4:	7f63      	ldrb	r3, [r4, #29]
   13ff6:	065a      	lsls	r2, r3, #25
   13ff8:	d4bf      	bmi.n	13f7a <event_master+0x12>
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   13ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13ffe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   14000:	7fa1      	ldrb	r1, [r4, #30]
   14002:	9300      	str	r3, [sp, #0]
   14004:	f104 001f 	add.w	r0, r4, #31
   14008:	f104 0317 	add.w	r3, r4, #23
   1400c:	f7fd fed2 	bl	11db4 <chan_sel_1>
	chan_set(data_chan_use);
   14010:	f7fe fa17 	bl	12442 <chan_set>
		remainder_us = radio_tmr_start(1,
   14014:	68aa      	ldr	r2, [r5, #8]
   14016:	f107 0109 	add.w	r1, r7, #9
   1401a:	2001      	movs	r0, #1
   1401c:	f003 fae6 	bl	175ec <radio_tmr_start>
		radio_tmr_end_capture();
   14020:	f003 fbb4 	bl	1778c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   14024:	f894 1020 	ldrb.w	r1, [r4, #32]
   14028:	3107      	adds	r1, #7
   1402a:	463a      	mov	r2, r7
   1402c:	b2c9      	uxtb	r1, r1
   1402e:	4620      	mov	r0, r4
   14030:	f7fe fec0 	bl	12db4 <preempt_calc>
	if (0 !=
   14034:	4603      	mov	r3, r0
   14036:	b130      	cbz	r0, 14046 <event_master+0xde>
		_radio.state = STATE_STOP;
   14038:	f885 8010 	strb.w	r8, [r5, #16]
		radio_disable();
   1403c:	f003 f9e0 	bl	17400 <radio_disable>
}
   14040:	b004      	add	sp, #16
   14042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ticker_status =
   14046:	4a05      	ldr	r2, [pc, #20]	; (1405c <event_master+0xf4>)
   14048:	4601      	mov	r1, r0
   1404a:	f7fc fddd 	bl	10c08 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1404e:	f030 0302 	bics.w	r3, r0, #2
   14052:	d192      	bne.n	13f7a <event_master+0x12>
   14054:	e7f4      	b.n	14040 <event_master+0xd8>
   14056:	bf00      	nop
   14058:	20000f64 	.word	0x20000f64
   1405c:	00012189 	.word	0x00012189

00014060 <isr>:
{
   14060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14064:	b091      	sub	sp, #68	; 0x44
	trx_done = radio_is_done();
   14066:	f003 f9f3 	bl	17450 <radio_is_done>
   1406a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   1406c:	b336      	cbz	r6, 140bc <isr+0x5c>
		crc_ok = radio_crc_is_valid();
   1406e:	f003 fa0f 	bl	17490 <radio_crc_is_valid>
   14072:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   14076:	f003 fa8f 	bl	17598 <radio_filter_has_match>
   1407a:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
   1407c:	f003 fa96 	bl	175ac <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   14080:	f003 fc38 	bl	178f4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   14084:	f003 fc24 	bl	178d0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   14088:	f003 fa50 	bl	1752c <radio_rssi_is_ready>
   1408c:	b2c4      	uxtb	r4, r0
	radio_status_reset();
   1408e:	f003 f9c9 	bl	17424 <radio_status_reset>
	radio_tmr_status_reset();
   14092:	f003 fa91 	bl	175b8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   14096:	f003 fa77 	bl	17588 <radio_filter_status_reset>
	radio_ar_status_reset();
   1409a:	f003 fc1f 	bl	178dc <radio_ar_status_reset>
	radio_rssi_status_reset();
   1409e:	f003 fa3d 	bl	1751c <radio_rssi_status_reset>
	switch (_radio.state) {
   140a2:	486e      	ldr	r0, [pc, #440]	; (1425c <isr+0x1fc>)
   140a4:	7c03      	ldrb	r3, [r0, #16]
   140a6:	4681      	mov	r9, r0
   140a8:	2b05      	cmp	r3, #5
   140aa:	d82b      	bhi.n	14104 <isr+0xa4>
   140ac:	e8df f013 	tbh	[pc, r3, lsl #1]
   140b0:	0087005f 	.word	0x0087005f
   140b4:	0bbf000a 	.word	0x0bbf000a
   140b8:	0bbf0bbf 	.word	0x0bbf0bbf
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   140bc:	4634      	mov	r4, r6
   140be:	4635      	mov	r5, r6
   140c0:	46b0      	mov	r8, r6
   140c2:	e7e4      	b.n	1408e <isr+0x2e>
	_radio.state = STATE_RX;
   140c4:	2301      	movs	r3, #1
   140c6:	7403      	strb	r3, [r0, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
   140c8:	f003 fb72 	bl	177b0 <radio_tmr_end_get>
   140cc:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   140ce:	2096      	movs	r0, #150	; 0x96
   140d0:	f003 fa80 	bl	175d4 <radio_tmr_tifs_set>
	switch (_radio.role) {
   140d4:	f899 300f 	ldrb.w	r3, [r9, #15]
   140d8:	3b01      	subs	r3, #1
   140da:	34c3      	adds	r4, #195	; 0xc3
   140dc:	2b03      	cmp	r3, #3
   140de:	d811      	bhi.n	14104 <isr+0xa4>
   140e0:	e8df f003 	tbb	[pc, r3]
   140e4:	48482402 	.word	0x48482402
		radio_switch_complete_and_tx(0, 0, 0, 0);
   140e8:	2300      	movs	r3, #0
   140ea:	461a      	mov	r2, r3
   140ec:	4619      	mov	r1, r3
   140ee:	4618      	mov	r0, r3
   140f0:	f003 f9ec 	bl	174cc <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   140f4:	f003 f9da 	bl	174ac <radio_pkt_scratch_get>
   140f8:	f003 f95c 	bl	173b4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   140fc:	f003 f99e 	bl	1743c <radio_is_ready>
   14100:	4605      	mov	r5, r0
   14102:	b128      	cbz	r0, 14110 <isr+0xb0>
		LL_ASSERT(0);
   14104:	4040      	eors	r0, r0
   14106:	f380 8811 	msr	BASEPRI, r0
   1410a:	f04f 0004 	mov.w	r0, #4
   1410e:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
   14110:	4601      	mov	r1, r0
   14112:	f003 f964 	bl	173de <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
   14116:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
   14118:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   1411a:	4628      	mov	r0, r5
   1411c:	f003 f95b 	bl	173d6 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   14120:	1a20      	subs	r0, r4, r0
   14122:	f003 fae1 	bl	176e8 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   14126:	f003 fb31 	bl	1778c <radio_tmr_end_capture>
   1412a:	e020      	b.n	1416e <isr+0x10e>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1412c:	2300      	movs	r3, #0
   1412e:	4619      	mov	r1, r3
   14130:	461a      	mov	r2, r3
   14132:	4618      	mov	r0, r3
   14134:	f003 f9ca 	bl	174cc <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   14138:	f899 2135 	ldrb.w	r2, [r9, #309]	; 0x135
   1413c:	f8d9 3130 	ldr.w	r3, [r9, #304]	; 0x130
   14140:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   14144:	3008      	adds	r0, #8
   14146:	f003 f935 	bl	173b4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1414a:	f003 f977 	bl	1743c <radio_is_ready>
   1414e:	4605      	mov	r5, r0
   14150:	2800      	cmp	r0, #0
   14152:	d1d7      	bne.n	14104 <isr+0xa4>
		hcto += radio_rx_chain_delay_get(0, 0);
   14154:	4601      	mov	r1, r0
   14156:	f003 f942 	bl	173de <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
   1415a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
   1415c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   1415e:	4628      	mov	r0, r5
   14160:	f003 f939 	bl	173d6 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   14164:	1a20      	subs	r0, r4, r0
   14166:	f003 fabf 	bl	176e8 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   1416a:	f003 f9c7 	bl	174fc <radio_rssi_measure>
}
   1416e:	b011      	add	sp, #68	; 0x44
   14170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
   14174:	2300      	movs	r3, #0
   14176:	461a      	mov	r2, r3
   14178:	4619      	mov	r1, r3
   1417a:	4618      	mov	r0, r3
   1417c:	f003 f9a6 	bl	174cc <radio_switch_complete_and_tx>
			      packet_rx[_radio.packet_rx_last]->pdu_data);
   14180:	f899 2135 	ldrb.w	r2, [r9, #309]	; 0x135
   14184:	f8d9 3130 	ldr.w	r3, [r9, #304]	; 0x130
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
   14188:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   1418c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14190:	3108      	adds	r1, #8
   14192:	f7fe f821 	bl	121d8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   14196:	f003 f951 	bl	1743c <radio_is_ready>
   1419a:	4605      	mov	r5, r0
   1419c:	2800      	cmp	r0, #0
   1419e:	d1b1      	bne.n	14104 <isr+0xa4>
		hcto += radio_rx_chain_delay_get(0, 0);
   141a0:	4601      	mov	r1, r0
   141a2:	f003 f91c 	bl	173de <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
   141a6:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
   141a8:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   141aa:	4628      	mov	r0, r5
   141ac:	f003 f913 	bl	173d6 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   141b0:	1a20      	subs	r0, r4, r0
   141b2:	f003 fa99 	bl	176e8 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   141b6:	2001      	movs	r0, #1
   141b8:	f7fe f9dc 	bl	12574 <packet_tx_enqueue>
   141bc:	e7d7      	b.n	1416e <isr+0x10e>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   141be:	b92e      	cbnz	r6, 141cc <isr+0x16c>
		_radio.state = STATE_CLOSE;
   141c0:	2303      	movs	r3, #3
   141c2:	f889 3010 	strb.w	r3, [r9, #16]
		radio_disable();
   141c6:	f003 f91b 	bl	17400 <radio_disable>
   141ca:	e7d0      	b.n	1416e <isr+0x10e>
	switch (_radio.role) {
   141cc:	7bc3      	ldrb	r3, [r0, #15]
   141ce:	3b01      	subs	r3, #1
   141d0:	2b03      	cmp	r3, #3
   141d2:	d897      	bhi.n	14104 <isr+0xa4>
   141d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   141d8:	02000004 	.word	0x02000004
   141dc:	04410441 	.word	0x04410441
		if (crc_ok) {
   141e0:	f1b8 0f00 	cmp.w	r8, #0
   141e4:	d0ec      	beq.n	141c0 <isr+0x160>
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   141e6:	f003 f961 	bl	174ac <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   141ea:	f899 2074 	ldrb.w	r2, [r9, #116]	; 0x74
   141ee:	2326      	movs	r3, #38	; 0x26
   141f0:	2127      	movs	r1, #39	; 0x27
   141f2:	fb11 3302 	smlabb	r3, r1, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   141f6:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   141f8:	930b      	str	r3, [sp, #44]	; 0x2c
   141fa:	eb09 0603 	add.w	r6, r9, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   141fe:	f002 030f 	and.w	r3, r2, #15
   14202:	2b03      	cmp	r3, #3
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   14204:	4604      	mov	r4, r0
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   14206:	d12b      	bne.n	14260 <isr+0x200>
   14208:	7843      	ldrb	r3, [r0, #1]
   1420a:	2b0c      	cmp	r3, #12
   1420c:	d128      	bne.n	14260 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
   1420e:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
		(devmatch_ok)) &&
   14212:	071b      	lsls	r3, r3, #28
   14214:	d500      	bpl.n	14218 <isr+0x1b8>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
   14216:	b31d      	cbz	r5, 14260 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
   14218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1421a:	f819 3003 	ldrb.w	r3, [r9, r3]
   1421e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14222:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14226:	d11b      	bne.n	14260 <isr+0x200>
		 !memcmp(adv->payload.adv_ind.addr,
   14228:	2206      	movs	r2, #6
   1422a:	f104 0108 	add.w	r1, r4, #8
   1422e:	1cb0      	adds	r0, r6, #2
   14230:	f7ec f9fd 	bl	62e <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   14234:	b9a0      	cbnz	r0, 14260 <isr+0x200>
		_radio.state = STATE_CLOSE;
   14236:	2303      	movs	r3, #3
   14238:	f889 3010 	strb.w	r3, [r9, #16]
		radio_switch_complete_and_disable();
   1423c:	f003 f950 	bl	174e0 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   14240:	f899 00c4 	ldrb.w	r0, [r9, #196]	; 0xc4
   14244:	2327      	movs	r3, #39	; 0x27
   14246:	fb03 9000 	mla	r0, r3, r0, r9
   1424a:	3076      	adds	r0, #118	; 0x76
   1424c:	f003 f8b8 	bl	173c0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   14250:	f003 f8f4 	bl	1743c <radio_is_ready>
   14254:	2800      	cmp	r0, #0
   14256:	d08a      	beq.n	1416e <isr+0x10e>
   14258:	e754      	b.n	14104 <isr+0xa4>
   1425a:	bf00      	nop
   1425c:	20000f64 	.word	0x20000f64
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   14260:	7823      	ldrb	r3, [r4, #0]
   14262:	f003 030f 	and.w	r3, r3, #15
   14266:	2b05      	cmp	r3, #5
   14268:	d1aa      	bne.n	141c0 <isr+0x160>
   1426a:	7863      	ldrb	r3, [r4, #1]
   1426c:	2b22      	cmp	r3, #34	; 0x22
   1426e:	d1a7      	bne.n	141c0 <isr+0x160>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14272:	f819 3003 	ldrb.w	r3, [r9, r3]
   14276:	f003 030f 	and.w	r3, r3, #15
   1427a:	2b01      	cmp	r3, #1
   1427c:	f040 8186 	bne.w	1458c <isr+0x52c>
		       isr_adv_ci_adva_check(adv, ci) &&
   14280:	4621      	mov	r1, r4
   14282:	4630      	mov	r0, r6
   14284:	f7fd ff42 	bl	1210c <isr_adv_ci_adva_check>
   14288:	b190      	cbz	r0, 142b0 <isr+0x250>
	return (adv->rx_addr == ci->tx_addr) &&
   1428a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1428c:	f819 2003 	ldrb.w	r2, [r9, r3]
   14290:	7823      	ldrb	r3, [r4, #0]
   14292:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14296:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1429a:	f040 8175 	bne.w	14588 <isr+0x528>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   1429e:	2206      	movs	r2, #6
   142a0:	1ca1      	adds	r1, r4, #2
   142a2:	f106 0008 	add.w	r0, r6, #8
   142a6:	f7ec f9c2 	bl	62e <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   142aa:	fab0 f080 	clz	r0, r0
   142ae:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   142b0:	2800      	cmp	r0, #0
   142b2:	d085      	beq.n	141c0 <isr+0x160>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   142b4:	f899 3176 	ldrb.w	r3, [r9, #374]	; 0x176
   142b8:	b133      	cbz	r3, 142c8 <isr+0x268>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   142ba:	f899 3174 	ldrb.w	r3, [r9, #372]	; 0x174
   142be:	f899 2175 	ldrb.w	r2, [r9, #373]	; 0x175
   142c2:	429a      	cmp	r2, r3
   142c4:	f47f af7c 	bne.w	141c0 <isr+0x160>
   142c8:	f8d9 30c8 	ldr.w	r3, [r9, #200]	; 0xc8
   142cc:	2b00      	cmp	r3, #0
   142ce:	f43f af77 	beq.w	141c0 <isr+0x160>
			radio_pdu_node_rx = packet_rx_reserve_get(3);
   142d2:	2003      	movs	r0, #3
   142d4:	f7fd fda4 	bl	11e20 <packet_rx_reserve_get>
		if (radio_pdu_node_rx == 0) {
   142d8:	4607      	mov	r7, r0
   142da:	2800      	cmp	r0, #0
   142dc:	f43f af70 	beq.w	141c0 <isr+0x160>
		_radio.state = STATE_STOP;
   142e0:	f04f 0b04 	mov.w	fp, #4
   142e4:	f889 b010 	strb.w	fp, [r9, #16]
		radio_disable();
   142e8:	f003 f88a 	bl	17400 <radio_disable>
		conn = _radio.advertiser.conn;
   142ec:	f8d9 80c8 	ldr.w	r8, [r9, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   142f0:	f8d9 1104 	ldr.w	r1, [r9, #260]	; 0x104
		_radio.advertiser.conn = NULL;
   142f4:	2500      	movs	r5, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   142f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
   142fa:	4640      	mov	r0, r8
		_radio.advertiser.conn = NULL;
   142fc:	f8c9 50c8 	str.w	r5, [r9, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   14300:	f7fb fcbf 	bl	fc82 <mem_index_get>
		memcpy(&conn->crc_init[0],
   14304:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   14306:	f8a8 0020 	strh.w	r0, [r8, #32]
		memcpy(&conn->crc_init[0],
   1430a:	f104 0112 	add.w	r1, r4, #18
   1430e:	f108 0014 	add.w	r0, r8, #20
   14312:	f7ec f9a1 	bl	658 <memcpy>
		memcpy(&conn->access_addr[0],
   14316:	f108 0310 	add.w	r3, r8, #16
   1431a:	4618      	mov	r0, r3
   1431c:	465a      	mov	r2, fp
		memcpy(&conn->data_chan_map[0],
   1431e:	f108 0617 	add.w	r6, r8, #23
		memcpy(&conn->access_addr[0],
   14322:	f104 010e 	add.w	r1, r4, #14
   14326:	930c      	str	r3, [sp, #48]	; 0x30
   14328:	f7ec f996 	bl	658 <memcpy>
		memcpy(&conn->data_chan_map[0],
   1432c:	2205      	movs	r2, #5
   1432e:	f104 011e 	add.w	r1, r4, #30
   14332:	4630      	mov	r0, r6
   14334:	f7ec f990 	bl	658 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   14338:	2105      	movs	r1, #5
   1433a:	4630      	mov	r0, r6
   1433c:	f7fb fe08 	bl	ff50 <util_ones_count_get>
		conn->data_chan_count =
   14340:	f898 201d 	ldrb.w	r2, [r8, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   14344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		conn->data_chan_count =
   14346:	f360 0205 	bfi	r2, r0, #0, #6
   1434a:	f888 201d 	strb.w	r2, [r8, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   1434e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   14352:	f3c2 0204 	ubfx	r2, r2, #0, #5
   14356:	f888 201e 	strb.w	r2, [r8, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   1435a:	8b26      	ldrh	r6, [r4, #24]
		conn->conn_interval =
   1435c:	f8a8 6024 	strh.w	r6, [r8, #36]	; 0x24
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   14360:	7ee1      	ldrb	r1, [r4, #27]
   14362:	7ea2      	ldrb	r2, [r4, #26]
   14364:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14368:	f8a8 2026 	strh.w	r2, [r8, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1436c:	4619      	mov	r1, r3
   1436e:	465a      	mov	r2, fp
   14370:	f108 0054 	add.w	r0, r8, #84	; 0x54
   14374:	f7ec f970 	bl	658 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   14378:	f240 4ae2 	movw	sl, #1250	; 0x4e2
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   1437c:	8ba3      	ldrh	r3, [r4, #28]
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   1437e:	fb0a f606 	mul.w	r6, sl, r6
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   14382:	f242 7210 	movw	r2, #10000	; 0x2710
   14386:	fb02 6303 	mla	r3, r2, r3, r6
   1438a:	3b01      	subs	r3, #1
   1438c:	fbb3 f3f6 	udiv	r3, r3, r6
   14390:	f8a8 302e 	strh.w	r3, [r8, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   14394:	4b88      	ldr	r3, [pc, #544]	; (145b8 <isr+0x558>)
   14396:	4433      	add	r3, r6
   14398:	fbb3 f3f6 	udiv	r3, r3, r6
   1439c:	f8a8 3032 	strh.w	r3, [r8, #50]	; 0x32
		radio_pdu_node_rx->hdr.handle = conn->handle;
   143a0:	f8b8 3020 	ldrh.w	r3, [r8, #32]
   143a4:	80fb      	strh	r3, [r7, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   143a6:	4621      	mov	r1, r4
		radio_le_conn_cmplt->role = 0x01;
   143a8:	2301      	movs	r3, #1
		radio_le_conn_cmplt->status = 0x00;
   143aa:	72fd      	strb	r5, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   143ac:	733b      	strb	r3, [r7, #12]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   143ae:	f811 3b02 	ldrb.w	r3, [r1], #2
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   143b2:	f04f 0b03 	mov.w	fp, #3
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   143b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   143ba:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   143bc:	737b      	strb	r3, [r7, #13]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   143be:	f887 b004 	strb.w	fp, [r7, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   143c2:	f107 000e 	add.w	r0, r7, #14
   143c6:	f7ec f947 	bl	658 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   143ca:	8b23      	ldrh	r3, [r4, #24]
		radio_le_conn_cmplt->interval =
   143cc:	82bb      	strh	r3, [r7, #20]
			pdu_adv->payload.connect_ind.lldata.latency;
   143ce:	8b63      	ldrh	r3, [r4, #26]
		radio_le_conn_cmplt->latency =
   143d0:	82fb      	strh	r3, [r7, #22]
			pdu_adv->payload.connect_ind.lldata.timeout;
   143d2:	8ba3      	ldrh	r3, [r4, #28]
		radio_le_conn_cmplt->timeout =
   143d4:	833b      	strh	r3, [r7, #24]
			pdu_adv->payload.connect_ind.lldata.sca;
   143d6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   143da:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   143de:	76bb      	strb	r3, [r7, #26]
		rx_fc_lock(conn->handle);
   143e0:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   143e4:	f7fd feb6 	bl	12154 <rx_fc_lock>
		packet_rx_enqueue();
   143e8:	f7fd ffbc 	bl	12364 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   143ec:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   143f0:	f898 3038 	ldrb.w	r3, [r8, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
   143f4:	4971      	ldr	r1, [pc, #452]	; (145bc <isr+0x55c>)
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   143f6:	0952      	lsrs	r2, r2, #5
   143f8:	f362 0384 	bfi	r3, r2, #2, #3
   143fc:	f888 3038 	strb.w	r3, [r8, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
   14400:	f899 311c 	ldrb.w	r3, [r9, #284]	; 0x11c
			   gc_lookup_ppm[conn->slave.sca]) *
   14404:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   14408:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1440c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1440e:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   14410:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   14414:	4a6a      	ldr	r2, [pc, #424]	; (145c0 <isr+0x560>)
   14416:	f203 233f 	addw	r3, r3, #575	; 0x23f
   1441a:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   1441e:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
   14422:	0873      	lsrs	r3, r6, #1
   14424:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   14426:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   1442a:	7d63      	ldrb	r3, [r4, #21]
		conn->slave.window_size_prepare_us = 0;
   1442c:	f8c8 504c 	str.w	r5, [r8, #76]	; 0x4c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   14430:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
   14434:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14438:	4629      	mov	r1, r5
   1443a:	4628      	mov	r0, r5
   1443c:	f002 ffcd 	bl	173da <radio_rx_ready_delay_get>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14440:	4960      	ldr	r1, [pc, #384]	; (145c4 <isr+0x564>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14442:	4607      	mov	r7, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14444:	f200 4052 	addw	r0, r0, #1106	; 0x452
   14448:	a359      	add	r3, pc, #356	; (adr r3, 145b0 <isr+0x550>)
   1444a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1444e:	fba0 0101 	umull	r0, r1, r0, r1
   14452:	f7eb ff3b 	bl	2cc <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   14456:	f8d9 3178 	ldr.w	r3, [r9, #376]	; 0x178
   1445a:	f8c8 3004 	str.w	r3, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   1445e:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   14460:	4293      	cmp	r3, r2
   14462:	bf38      	it	cc
   14464:	4613      	movcc	r3, r2
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   1446a:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us -=
   1446c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
		conn->hdr.ticks_xtal_to_start =
   14470:	f8c8 2000 	str.w	r2, [r8]
		conn->hdr.ticks_slot =
   14474:	f8c8 000c 	str.w	r0, [r8, #12]
		conn->hdr.ticks_preempt_to_start =
   14478:	f8c8 5008 	str.w	r5, [r8, #8]
		conn_interval_us -=
   1447c:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   1447e:	f003 f997 	bl	177b0 <radio_tmr_end_get>
   14482:	900d      	str	r0, [sp, #52]	; 0x34
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   14484:	8ae0      	ldrh	r0, [r4, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   14486:	4629      	mov	r1, r5
		conn_offset_us +=
   14488:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1448c:	4628      	mov	r0, r5
   1448e:	f002 ffa2 	bl	173d6 <radio_tx_chain_delay_get>
   14492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14494:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   14498:	449a      	add	sl, r3
   1449a:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   1449e:	ebaa 0307 	sub.w	r3, sl, r7
   144a2:	930d      	str	r3, [sp, #52]	; 0x34
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   144a4:	f240 4375 	movw	r3, #1141	; 0x475
   144a8:	9300      	str	r3, [sp, #0]
   144aa:	2205      	movs	r2, #5
   144ac:	4b46      	ldr	r3, [pc, #280]	; (145c8 <isr+0x568>)
   144ae:	f8df a114 	ldr.w	sl, [pc, #276]	; 145c4 <isr+0x564>
   144b2:	4629      	mov	r1, r5
   144b4:	4628      	mov	r0, r5
   144b6:	f7fc fb33 	bl	10b20 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   144ba:	f240 4176 	movw	r1, #1142	; 0x476
   144be:	f7fe f9cf 	bl	12860 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   144c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144c4:	f819 3003 	ldrb.w	r3, [r9, r3]
   144c8:	f003 030f 	and.w	r3, r3, #15
   144cc:	2b01      	cmp	r3, #1
   144ce:	d106      	bne.n	144de <isr+0x47e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   144d0:	9500      	str	r5, [sp, #0]
   144d2:	462b      	mov	r3, r5
   144d4:	465a      	mov	r2, fp
   144d6:	4629      	mov	r1, r5
   144d8:	4628      	mov	r0, r5
   144da:	f7fc fb21 	bl	10b20 <ticker_stop>
		     TICKER_US_TO_TICKS(conn_interval_us),
   144de:	fba6 670a 	umull	r6, r7, r6, sl
   144e2:	a333      	add	r3, pc, #204	; (adr r3, 145b0 <isr+0x550>)
   144e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   144e8:	4630      	mov	r0, r6
   144ea:	4639      	mov	r1, r7
   144ec:	f7eb feee 	bl	2cc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   144f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   144f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   144f6:	f898 9020 	ldrb.w	r9, [r8, #32]
   144fa:	f8cd 8018 	str.w	r8, [sp, #24]
   144fe:	eba3 0b02 	sub.w	fp, r3, r2
   14502:	f240 438d 	movw	r3, #1165	; 0x48d
   14506:	9308      	str	r3, [sp, #32]
   14508:	4b30      	ldr	r3, [pc, #192]	; (145cc <isr+0x56c>)
   1450a:	9307      	str	r3, [sp, #28]
   1450c:	4b30      	ldr	r3, [pc, #192]	; (145d0 <isr+0x570>)
   1450e:	9305      	str	r3, [sp, #20]
   14510:	f8d8 300c 	ldr.w	r3, [r8, #12]
   14514:	4413      	add	r3, r2
   14516:	b29b      	uxth	r3, r3
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14518:	4a2e      	ldr	r2, [pc, #184]	; (145d4 <isr+0x574>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1451a:	9304      	str	r3, [sp, #16]
		     TICKER_US_TO_TICKS(conn_interval_us),
   1451c:	4604      	mov	r4, r0
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1451e:	2307      	movs	r3, #7
   14520:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14524:	2100      	movs	r1, #0
   14526:	4343      	muls	r3, r0
   14528:	fb02 3301 	mla	r3, r2, r1, r3
   1452c:	fba0 0102 	umull	r0, r1, r0, r2
   14530:	1a30      	subs	r0, r6, r0
   14532:	4419      	add	r1, r3
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14534:	f04f 0800 	mov.w	r8, #0
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1453c:	f04f 0300 	mov.w	r3, #0
   14540:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14544:	f8cd 800c 	str.w	r8, [sp, #12]
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14548:	f7eb fec0 	bl	2cc <__aeabi_uldivmod>
		     TICKER_US_TO_TICKS(conn_offset_us),
   1454c:	990d      	ldr	r1, [sp, #52]	; 0x34
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1454e:	9002      	str	r0, [sp, #8]
		     TICKER_US_TO_TICKS(conn_offset_us),
   14550:	a317      	add	r3, pc, #92	; (adr r3, 145b0 <isr+0x550>)
   14552:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14556:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_offset_us),
   1455a:	fba1 010a 	umull	r0, r1, r1, sl
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1455e:	9401      	str	r4, [sp, #4]
		     TICKER_US_TO_TICKS(conn_offset_us),
   14560:	f7eb feb4 	bl	2cc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14564:	f109 0907 	add.w	r9, r9, #7
   14568:	fa5f f989 	uxtb.w	r9, r9
   1456c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14570:	9000      	str	r0, [sp, #0]
   14572:	465b      	mov	r3, fp
   14574:	464a      	mov	r2, r9
   14576:	4641      	mov	r1, r8
		ticker_status =
   14578:	4608      	mov	r0, r1
   1457a:	f7fc fa43 	bl	10a04 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1457e:	f030 0302 	bics.w	r3, r0, #2
   14582:	f47f adbf 	bne.w	14104 <isr+0xa4>
   14586:	e5f2      	b.n	1416e <isr+0x10e>
	return (adv->rx_addr == ci->tx_addr) &&
   14588:	2000      	movs	r0, #0
   1458a:	e691      	b.n	142b0 <isr+0x250>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
   1458c:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
   14590:	f3c3 03c1 	ubfx	r3, r3, #3, #2
		(devmatch_ok)) &&
   14594:	079f      	lsls	r7, r3, #30
   14596:	d500      	bpl.n	1459a <isr+0x53a>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
   14598:	b135      	cbz	r5, 145a8 <isr+0x548>
	       isr_adv_ci_adva_check(adv, ci);
   1459a:	4621      	mov	r1, r4
   1459c:	4630      	mov	r0, r6
   1459e:	f7fd fdb5 	bl	1210c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
   145a2:	f000 0001 	and.w	r0, r0, #1
   145a6:	e683      	b.n	142b0 <isr+0x250>
   145a8:	4628      	mov	r0, r5
   145aa:	e7fa      	b.n	145a2 <isr+0x542>
   145ac:	f3af 8000 	nop.w
   145b0:	1afd498d 	.word	0x1afd498d
   145b4:	00000007 	.word	0x00000007
   145b8:	026259ff 	.word	0x026259ff
   145bc:	0001a3e0 	.word	0x0001a3e0
   145c0:	000f4240 	.word	0x000f4240
   145c4:	3b9aca00 	.word	0x3b9aca00
   145c8:	00012861 	.word	0x00012861
   145cc:	00012891 	.word	0x00012891
   145d0:	00013bd9 	.word	0x00013bd9
   145d4:	1afd498d 	.word	0x1afd498d
		if (crc_ok &&
   145d8:	f1b8 0f00 	cmp.w	r8, #0
   145dc:	f000 81fe 	beq.w	149dc <isr+0x97c>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
   145e0:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
   145e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   145e8:	b113      	cbz	r3, 145f0 <isr+0x590>
		if (crc_ok &&
   145ea:	2d00      	cmp	r5, #0
   145ec:	f000 81f6 	beq.w	149dc <isr+0x97c>
	bool dir_report = false;
   145f0:	2200      	movs	r2, #0
   145f2:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   145f6:	f899 1135 	ldrb.w	r1, [r9, #309]	; 0x135
   145fa:	f8d9 2130 	ldr.w	r2, [r9, #304]	; 0x130
   145fe:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14602:	f8d9 20fc 	ldr.w	r2, [r9, #252]	; 0xfc
	pdu_adv_rx = (struct pdu_adv *)
   14606:	f105 0708 	add.w	r7, r5, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1460a:	2a00      	cmp	r2, #0
   1460c:	f000 8164 	beq.w	148d8 <isr+0x878>
   14610:	f899 2176 	ldrb.w	r2, [r9, #374]	; 0x176
   14614:	b132      	cbz	r2, 14624 <isr+0x5c4>
				      (_radio.fc_req == _radio.fc_ack)) &&
   14616:	f899 2174 	ldrb.w	r2, [r9, #372]	; 0x174
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1461a:	f899 1175 	ldrb.w	r1, [r9, #373]	; 0x175
   1461e:	4291      	cmp	r1, r2
   14620:	f040 815a 	bne.w	148d8 <isr+0x878>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   14624:	2b00      	cmp	r3, #0
   14626:	f000 8145 	beq.w	148b4 <isr+0x854>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   1462a:	7a2b      	ldrb	r3, [r5, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1462c:	f013 030f 	ands.w	r3, r3, #15
   14630:	f040 819f 	bne.w	14972 <isr+0x912>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   14634:	f003 f8bc 	bl	177b0 <radio_tmr_end_get>
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   14638:	f8d9 30d8 	ldr.w	r3, [r9, #216]	; 0xd8
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1463c:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   14640:	48d5      	ldr	r0, [pc, #852]	; (14998 <isr+0x938>)
   14642:	2207      	movs	r2, #7
   14644:	fba3 0100 	umull	r0, r1, r3, r0
   14648:	fb02 1103 	mla	r1, r2, r3, r1
   1464c:	a3ce      	add	r3, pc, #824	; (adr r3, 14988 <isr+0x928>)
   1464e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14652:	f7eb fe3b 	bl	2cc <__aeabi_uldivmod>
   14656:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1465a:	4580      	cmp	r8, r0
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1465c:	f04f 0600 	mov.w	r6, #0
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   14660:	f080 813a 	bcs.w	148d8 <isr+0x878>
			radio_pdu_node_rx = packet_rx_reserve_get(3);
   14664:	2003      	movs	r0, #3
   14666:	f7fd fbdb 	bl	11e20 <packet_rx_reserve_get>
		if (radio_pdu_node_rx == 0) {
   1466a:	4683      	mov	fp, r0
   1466c:	2800      	cmp	r0, #0
   1466e:	f000 81b5 	beq.w	149dc <isr+0x97c>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   14672:	f8d9 2178 	ldr.w	r2, [r9, #376]	; 0x178
		conn = _radio.scanner.conn;
   14676:	f8d9 40fc 	ldr.w	r4, [r9, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   1467a:	f8c9 60fc 	str.w	r6, [r9, #252]	; 0xfc
		_radio.state = STATE_STOP;
   1467e:	2304      	movs	r3, #4
		conn->hdr.ticks_xtal_to_start =
   14680:	2127      	movs	r1, #39	; 0x27
		ticks_slot_offset = (conn->hdr. ticks_active_to_start <
   14682:	2a27      	cmp	r2, #39	; 0x27
		_radio.state = STATE_STOP;
   14684:	f889 3010 	strb.w	r3, [r9, #16]
		conn->hdr.ticks_xtal_to_start =
   14688:	6021      	str	r1, [r4, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   1468a:	f8d9 10f8 	ldr.w	r1, [r9, #248]	; 0xf8
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1468e:	6062      	str	r2, [r4, #4]
		conn->hdr.ticks_preempt_to_start =
   14690:	60a6      	str	r6, [r4, #8]
		ticks_slot_offset = (conn->hdr. ticks_active_to_start <
   14692:	bf38      	it	cc
   14694:	2227      	movcc	r2, #39	; 0x27
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   14696:	60e1      	str	r1, [r4, #12]
		_radio.state = STATE_STOP;
   14698:	930b      	str	r3, [sp, #44]	; 0x2c
		ticks_slot_offset = (conn->hdr. ticks_active_to_start <
   1469a:	4690      	mov	r8, r2
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1469c:	f002 ff06 	bl	174ac <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   146a0:	7802      	ldrb	r2, [r0, #0]
   146a2:	2105      	movs	r1, #5
   146a4:	f361 0203 	bfi	r2, r1, #0, #4
			pdu_adv_tx->chan_sel = 0;
   146a8:	f366 1245 	bfi	r2, r6, #5, #1
   146ac:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   146ae:	7a29      	ldrb	r1, [r5, #8]
   146b0:	b2d2      	uxtb	r2, r2
   146b2:	f3c1 1180 	ubfx	r1, r1, #6, #1
   146b6:	f361 12c7 	bfi	r2, r1, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   146ba:	2122      	movs	r1, #34	; 0x22
   146bc:	7041      	strb	r1, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   146be:	f899 10dd 	ldrb.w	r1, [r9, #221]	; 0xdd
   146c2:	f3c1 1100 	ubfx	r1, r1, #4, #1
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   146c6:	4607      	mov	r7, r0
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   146c8:	f361 1286 	bfi	r2, r1, #6, #1
   146cc:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   146d0:	49b2      	ldr	r1, [pc, #712]	; (1499c <isr+0x93c>)
   146d2:	2206      	movs	r2, #6
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   146d4:	f107 0a08 	add.w	sl, r7, #8
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   146d8:	f7eb ffbe 	bl	658 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   146dc:	f105 010a 	add.w	r1, r5, #10
   146e0:	2206      	movs	r2, #6
   146e2:	4650      	mov	r0, sl
   146e4:	f7eb ffb8 	bl	658 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   146e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   146ea:	f104 0110 	add.w	r1, r4, #16
   146ee:	461a      	mov	r2, r3
   146f0:	f107 000e 	add.w	r0, r7, #14
   146f4:	f7eb ffb0 	bl	658 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   146f8:	2203      	movs	r2, #3
   146fa:	f104 0114 	add.w	r1, r4, #20
   146fe:	f107 0012 	add.w	r0, r7, #18
   14702:	f7eb ffa9 	bl	658 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   14706:	2301      	movs	r3, #1
   14708:	757b      	strb	r3, [r7, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1470a:	f8b9 30f0 	ldrh.w	r3, [r9, #240]	; 0xf0
		conn_interval_us =
   1470e:	f240 46e2 	movw	r6, #1250	; 0x4e2
   14712:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   14714:	f003 f84c 	bl	177b0 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   14718:	f8d9 3008 	ldr.w	r3, [r9, #8]
		if (_radio.scanner.win_offset_us == 0) {
   1471c:	f8d9 5100 	ldr.w	r5, [r9, #256]	; 0x100
		if (!_radio.remainder_anchor ||
   14720:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   14722:	bfcc      	ite	gt
   14724:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   14728:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   1472c:	2d00      	cmp	r5, #0
   1472e:	f040 8141 	bne.w	149b4 <isr+0x954>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   14732:	75bd      	strb	r5, [r7, #22]
   14734:	75fd      	strb	r5, [r7, #23]
   14736:	4605      	mov	r5, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   14738:	2100      	movs	r1, #0
   1473a:	4608      	mov	r0, r1
   1473c:	f002 fe46 	bl	173cc <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   14740:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   14742:	1a2d      	subs	r5, r5, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   14744:	4608      	mov	r0, r1
   14746:	f002 fe46 	bl	173d6 <radio_tx_chain_delay_get>
   1474a:	1a2d      	subs	r5, r5, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   1474c:	f105 031e 	add.w	r3, r5, #30
   14750:	930b      	str	r3, [sp, #44]	; 0x2c
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   14752:	f8b9 30f0 	ldrh.w	r3, [r9, #240]	; 0xf0
   14756:	833b      	strh	r3, [r7, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   14758:	f8b9 30f2 	ldrh.w	r3, [r9, #242]	; 0xf2
   1475c:	837b      	strh	r3, [r7, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   1475e:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   14762:	83bb      	strh	r3, [r7, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   14764:	f104 0117 	add.w	r1, r4, #23
   14768:	2205      	movs	r2, #5
   1476a:	f107 001e 	add.w	r0, r7, #30
   1476e:	f7eb ff73 	bl	658 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   14772:	7fa2      	ldrb	r2, [r4, #30]
   14774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   14778:	f362 0304 	bfi	r3, r2, #0, #5
   1477c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   14780:	f899 211c 	ldrb.w	r2, [r9, #284]	; 0x11c
   14784:	f362 1347 	bfi	r3, r2, #5, #3
   14788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		radio_switch_complete_and_disable();
   1478c:	f002 fea8 	bl	174e0 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   14790:	4638      	mov	r0, r7
   14792:	f002 fe15 	bl	173c0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   14796:	f002 fe51 	bl	1743c <radio_is_ready>
   1479a:	4605      	mov	r5, r0
   1479c:	2800      	cmp	r0, #0
   1479e:	f47f acb1 	bne.w	14104 <isr+0xa4>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   147a2:	f8d9 1104 	ldr.w	r1, [r9, #260]	; 0x104
   147a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
   147aa:	4620      	mov	r0, r4
   147ac:	f7fb fa69 	bl	fc82 <mem_index_get>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   147b0:	2303      	movs	r3, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   147b2:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
   147b4:	f88b 500b 	strb.w	r5, [fp, #11]
		radio_le_conn_cmplt->role = 0x00;
   147b8:	f88b 500c 	strb.w	r5, [fp, #12]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   147bc:	f88b 3004 	strb.w	r3, [fp, #4]
				pdu_adv_tx->rx_addr;
   147c0:	783b      	ldrb	r3, [r7, #0]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   147c2:	f8ab 0006 	strh.w	r0, [fp, #6]
				pdu_adv_tx->rx_addr;
   147c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   147ca:	4651      	mov	r1, sl
   147cc:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type =
   147ce:	f88b 300d 	strb.w	r3, [fp, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   147d2:	f10b 000e 	add.w	r0, fp, #14
   147d6:	f7eb ff3f 	bl	658 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   147da:	f8b9 30f0 	ldrh.w	r3, [r9, #240]	; 0xf0
   147de:	f8ab 3014 	strh.w	r3, [fp, #20]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   147e2:	f8b9 30f2 	ldrh.w	r3, [r9, #242]	; 0xf2
   147e6:	f8ab 3016 	strh.w	r3, [fp, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   147ea:	f8b9 30f4 	ldrh.w	r3, [r9, #244]	; 0xf4
   147ee:	f8ab 3018 	strh.w	r3, [fp, #24]
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   147f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   147f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   147fa:	f88b 301a 	strb.w	r3, [fp, #26]
		rx_fc_lock(conn->handle);
   147fe:	8c20      	ldrh	r0, [r4, #32]
				     TICKER_US_TO_TICKS(conn_interval_us),
   14800:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 149b0 <isr+0x950>
		rx_fc_lock(conn->handle);
   14804:	f7fd fca6 	bl	12154 <rx_fc_lock>
		packet_rx_enqueue();
   14808:	f7fd fdac 	bl	12364 <packet_rx_enqueue>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1480c:	f240 6333 	movw	r3, #1587	; 0x633
   14810:	2206      	movs	r2, #6
   14812:	9300      	str	r3, [sp, #0]
   14814:	4629      	mov	r1, r5
   14816:	4b62      	ldr	r3, [pc, #392]	; (149a0 <isr+0x940>)
   14818:	4628      	mov	r0, r5
   1481a:	f7fc f981 	bl	10b20 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   1481e:	f240 6134 	movw	r1, #1588	; 0x634
   14822:	f7fe f805 	bl	12830 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14826:	462b      	mov	r3, r5
   14828:	2204      	movs	r2, #4
   1482a:	4629      	mov	r1, r5
   1482c:	9500      	str	r5, [sp, #0]
   1482e:	4628      	mov	r0, r5
   14830:	f7fc f976 	bl	10b20 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14834:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14838:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
   1483c:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1483e:	eba3 0a08 	sub.w	sl, r3, r8
		ticker_status =
   14842:	f240 634b 	movw	r3, #1611	; 0x64b
   14846:	9308      	str	r3, [sp, #32]
   14848:	4b56      	ldr	r3, [pc, #344]	; (149a4 <isr+0x944>)
   1484a:	9307      	str	r3, [sp, #28]
   1484c:	4b56      	ldr	r3, [pc, #344]	; (149a8 <isr+0x948>)
   1484e:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14850:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
   14852:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14854:	4498      	add	r8, r3
				     TICKER_US_TO_TICKS(conn_interval_us),
   14856:	fba6 670b 	umull	r6, r7, r6, fp
		ticker_status =
   1485a:	fa1f f388 	uxth.w	r3, r8
   1485e:	9304      	str	r3, [sp, #16]
				     TICKER_REMAINDER(conn_interval_us),
   14860:	4630      	mov	r0, r6
   14862:	a34b      	add	r3, pc, #300	; (adr r3, 14990 <isr+0x930>)
   14864:	e9d3 2300 	ldrd	r2, r3, [r3]
   14868:	4639      	mov	r1, r7
   1486a:	f7eb fd2f 	bl	2cc <__aeabi_uldivmod>
   1486e:	4610      	mov	r0, r2
   14870:	4619      	mov	r1, r3
   14872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14876:	2300      	movs	r3, #0
   14878:	f7eb fd28 	bl	2cc <__aeabi_uldivmod>
				     TICKER_US_TO_TICKS(conn_interval_us),
   1487c:	a344      	add	r3, pc, #272	; (adr r3, 14990 <isr+0x930>)
   1487e:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14882:	9002      	str	r0, [sp, #8]
				     TICKER_US_TO_TICKS(conn_interval_us),
   14884:	4639      	mov	r1, r7
   14886:	4630      	mov	r0, r6
   14888:	f7eb fd20 	bl	2cc <__aeabi_uldivmod>
				     TICKER_US_TO_TICKS(conn_space_us),
   1488c:	990b      	ldr	r1, [sp, #44]	; 0x2c
				     TICKER_US_TO_TICKS(conn_interval_us),
   1488e:	9001      	str	r0, [sp, #4]
				     TICKER_US_TO_TICKS(conn_space_us),
   14890:	a33f      	add	r3, pc, #252	; (adr r3, 14990 <isr+0x930>)
   14892:	e9d3 2300 	ldrd	r2, r3, [r3]
   14896:	fba1 010b 	umull	r0, r1, r1, fp
   1489a:	f7eb fd17 	bl	2cc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1489e:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
   148a2:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   148a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   148aa:	9000      	str	r0, [sp, #0]
   148ac:	4653      	mov	r3, sl
   148ae:	464a      	mov	r2, r9
   148b0:	4629      	mov	r1, r5
   148b2:	e661      	b.n	14578 <isr+0x518>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   148b4:	f899 20dd 	ldrb.w	r2, [r9, #221]	; 0xdd
   148b8:	7a2b      	ldrb	r3, [r5, #8]
   148ba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   148be:	f3c3 1380 	ubfx	r3, r3, #6, #1
   148c2:	429a      	cmp	r2, r3
   148c4:	d108      	bne.n	148d8 <isr+0x878>
		(memcmp(&_radio.scanner.adv_addr[0],
   148c6:	2206      	movs	r2, #6
   148c8:	f105 010a 	add.w	r1, r5, #10
   148cc:	4837      	ldr	r0, [pc, #220]	; (149ac <isr+0x94c>)
   148ce:	f7eb feae 	bl	62e <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   148d2:	2800      	cmp	r0, #0
   148d4:	f43f aea9 	beq.w	1462a <isr+0x5ca>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   148d8:	7a2b      	ldrb	r3, [r5, #8]
   148da:	f013 030f 	ands.w	r3, r3, #15
   148de:	d002      	beq.n	148e6 <isr+0x886>
   148e0:	2b06      	cmp	r3, #6
   148e2:	f040 8088 	bne.w	149f6 <isr+0x996>
		 (_radio.scanner.type != 0) &&
   148e6:	f899 20dd 	ldrb.w	r2, [r9, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   148ea:	07d0      	lsls	r0, r2, #31
   148ec:	d573      	bpl.n	149d6 <isr+0x976>
		 (_radio.scanner.type != 0) &&
   148ee:	f8d9 10fc 	ldr.w	r1, [r9, #252]	; 0xfc
   148f2:	2900      	cmp	r1, #0
   148f4:	d16f      	bne.n	149d6 <isr+0x976>
		err = isr_rx_scan_report(rssi_ready,
   148f6:	4620      	mov	r0, r4
   148f8:	f7fd fd7c 	bl	123f4 <isr_rx_scan_report.isra.35>
		if (err) {
   148fc:	4606      	mov	r6, r0
   148fe:	2800      	cmp	r0, #0
   14900:	d16c      	bne.n	149dc <isr+0x97c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   14902:	f002 fdd3 	bl	174ac <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   14906:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   14908:	4924      	ldr	r1, [pc, #144]	; (1499c <isr+0x93c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1490a:	2203      	movs	r2, #3
   1490c:	f362 0303 	bfi	r3, r2, #0, #4
   14910:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   14912:	7a2a      	ldrb	r2, [r5, #8]
   14914:	b2db      	uxtb	r3, r3
   14916:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1491a:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   1491e:	220c      	movs	r2, #12
   14920:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14922:	f899 20dd 	ldrb.w	r2, [r9, #221]	; 0xdd
   14926:	f3c2 1200 	ubfx	r2, r2, #4, #1
   1492a:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1492e:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   14930:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14932:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   14936:	f7eb fe8f 	bl	658 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   1493a:	2206      	movs	r2, #6
   1493c:	f105 010a 	add.w	r1, r5, #10
   14940:	f104 0008 	add.w	r0, r4, #8
   14944:	f7eb fe88 	bl	658 <memcpy>
		_radio.scanner.state = 1;
   14948:	f899 30dc 	ldrb.w	r3, [r9, #220]	; 0xdc
   1494c:	f043 0302 	orr.w	r3, r3, #2
   14950:	f889 30dc 	strb.w	r3, [r9, #220]	; 0xdc
		radio_tmr_tifs_set(RADIO_TIFS);
   14954:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   14956:	2302      	movs	r3, #2
   14958:	f889 3010 	strb.w	r3, [r9, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   1495c:	f002 fe3a 	bl	175d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14960:	4630      	mov	r0, r6
   14962:	f002 fda7 	bl	174b4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   14966:	4620      	mov	r0, r4
   14968:	f002 fd2a 	bl	173c0 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   1496c:	f002 ff0e 	bl	1778c <radio_tmr_end_capture>
   14970:	e46e      	b.n	14250 <isr+0x1f0>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   14972:	2b01      	cmp	r3, #1
   14974:	d1b4      	bne.n	148e0 <isr+0x880>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   14976:	2100      	movs	r1, #0
   14978:	4638      	mov	r0, r7
   1497a:	f7fd fc6f 	bl	1225c <isr_scan_tgta_check.isra.28>
				      (_radio.fc_req == _radio.fc_ack)) &&
   1497e:	2800      	cmp	r0, #0
   14980:	d0aa      	beq.n	148d8 <isr+0x878>
   14982:	e657      	b.n	14634 <isr+0x5d4>
   14984:	f3af 8000 	nop.w
   14988:	3b9aca00 	.word	0x3b9aca00
   1498c:	00000000 	.word	0x00000000
   14990:	1afd498d 	.word	0x1afd498d
   14994:	00000007 	.word	0x00000007
   14998:	1afd498d 	.word	0x1afd498d
   1499c:	20001042 	.word	0x20001042
   149a0:	00012831 	.word	0x00012831
   149a4:	00012891 	.word	0x00012891
   149a8:	00013bd5 	.word	0x00013bd5
   149ac:	20001048 	.word	0x20001048
   149b0:	3b9aca00 	.word	0x3b9aca00
			conn_space_us = _radio.scanner.win_offset_us +
   149b4:	4445      	add	r5, r8
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   149b6:	2d00      	cmp	r5, #0
   149b8:	db0b      	blt.n	149d2 <isr+0x972>
   149ba:	4285      	cmp	r5, r0
   149bc:	d309      	bcc.n	149d2 <isr+0x972>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   149be:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
   149c2:	1a28      	subs	r0, r5, r0
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   149c4:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   149c8:	7d7b      	ldrb	r3, [r7, #21]
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   149ca:	82f8      	strh	r0, [r7, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   149cc:	3301      	adds	r3, #1
   149ce:	757b      	strb	r3, [r7, #21]
   149d0:	e6b2      	b.n	14738 <isr+0x6d8>
				conn_space_us += conn_interval_us;
   149d2:	4435      	add	r5, r6
   149d4:	e7ef      	b.n	149b6 <isr+0x956>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   149d6:	b973      	cbnz	r3, 149f6 <isr+0x996>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   149d8:	7a6b      	ldrb	r3, [r5, #9]
   149da:	bba3      	cbnz	r3, 14a46 <isr+0x9e6>
			_radio.state = STATE_CLOSE;
   149dc:	2303      	movs	r3, #3
   149de:	f889 3010 	strb.w	r3, [r9, #16]
			radio_disable();
   149e2:	f002 fd0d 	bl	17400 <radio_disable>
			_radio.scanner.state = 0;
   149e6:	f899 30dc 	ldrb.w	r3, [r9, #220]	; 0xdc
   149ea:	f36f 0341 	bfc	r3, #1, #1
   149ee:	f889 30dc 	strb.w	r3, [r9, #220]	; 0xdc
   149f2:	f7ff bbbc 	b.w	1416e <isr+0x10e>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   149f6:	2b01      	cmp	r3, #1
   149f8:	d01e      	beq.n	14a38 <isr+0x9d8>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   149fa:	7a2b      	ldrb	r3, [r5, #8]
					&dir_report))) ||
   149fc:	f003 020b 	and.w	r2, r3, #11
   14a00:	2a02      	cmp	r2, #2
   14a02:	d0e9      	beq.n	149d8 <isr+0x978>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   14a04:	f003 030f 	and.w	r3, r3, #15
   14a08:	2b04      	cmp	r3, #4
   14a0a:	d1e7      	bne.n	149dc <isr+0x97c>
		   (_radio.scanner.state != 0) &&
   14a0c:	f899 30dc 	ldrb.w	r3, [r9, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14a10:	0799      	lsls	r1, r3, #30
   14a12:	d5e3      	bpl.n	149dc <isr+0x97c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   14a14:	f002 fd4a 	bl	174ac <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   14a18:	7a2b      	ldrb	r3, [r5, #8]
   14a1a:	7802      	ldrb	r2, [r0, #0]
   14a1c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14a20:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14a24:	d1da      	bne.n	149dc <isr+0x97c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   14a26:	2206      	movs	r2, #6
   14a28:	f105 010a 	add.w	r1, r5, #10
   14a2c:	3008      	adds	r0, #8
   14a2e:	f7eb fdfe 	bl	62e <memcmp>
		   (_radio.scanner.state != 0) &&
   14a32:	2800      	cmp	r0, #0
   14a34:	d0d0      	beq.n	149d8 <isr+0x978>
   14a36:	e7d1      	b.n	149dc <isr+0x97c>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   14a38:	a90f      	add	r1, sp, #60	; 0x3c
   14a3a:	4638      	mov	r0, r7
   14a3c:	f7fd fc0e 	bl	1225c <isr_scan_tgta_check.isra.28>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   14a40:	2800      	cmp	r0, #0
   14a42:	d1c9      	bne.n	149d8 <isr+0x978>
   14a44:	e7d9      	b.n	149fa <isr+0x99a>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   14a46:	f8d9 30fc 	ldr.w	r3, [r9, #252]	; 0xfc
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	d1c6      	bne.n	149dc <isr+0x97c>
		err = isr_rx_scan_report(rssi_ready,
   14a4e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   14a52:	4620      	mov	r0, r4
   14a54:	f7fd fcce 	bl	123f4 <isr_rx_scan_report.isra.35>
   14a58:	e7c0      	b.n	149dc <isr+0x97c>
	_radio.packet_counter++;
   14a5a:	f890 3114 	ldrb.w	r3, [r0, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14a5e:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
	_radio.packet_counter++;
   14a62:	3301      	adds	r3, #1
   14a64:	f880 3114 	strb.w	r3, [r0, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14a68:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
   14a6c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14a70:	2301      	movs	r3, #1
   14a72:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   14a74:	f1b8 0f00 	cmp.w	r8, #0
   14a78:	f000 869b 	beq.w	157b2 <isr+0x1752>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14a7c:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
   14a80:	7a29      	ldrb	r1, [r5, #8]
   14a82:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14a86:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14a8a:	f003 0201 	and.w	r2, r3, #1
   14a8e:	4291      	cmp	r1, r2
   14a90:	f000 8112 	beq.w	14cb8 <isr+0xc58>
		_radio.conn_curr->sn++;
   14a94:	f082 0201 	eor.w	r2, r2, #1
   14a98:	f362 0300 	bfi	r3, r2, #0, #1
   14a9c:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
		if (_radio.role == ROLE_SLAVE) {
   14aa0:	7bc3      	ldrb	r3, [r0, #15]
   14aa2:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   14aa4:	bf02      	ittt	eq
   14aa6:	f894 3038 	ldrbeq.w	r3, [r4, #56]	; 0x38
   14aaa:	f043 0301 	orreq.w	r3, r3, #1
   14aae:	f884 3038 	strbeq.w	r3, [r4, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
   14ab2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14ab6:	061a      	lsls	r2, r3, #24
   14ab8:	f100 80fa 	bmi.w	14cb0 <isr+0xc50>
			node_tx = _radio.conn_curr->pkt_tx_head;
   14abc:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
				 _radio.conn_curr->packet_tx_head_offset);
   14ac0:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
				(node_tx->pdu_data +
   14ac4:	1d30      	adds	r0, r6, #4
			pdu_data_tx = (struct pdu_data *)
   14ac6:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   14aca:	f89a 7001 	ldrb.w	r7, [sl, #1]
			if (pdu_data_tx_len != 0) {
   14ace:	2f00      	cmp	r7, #0
   14ad0:	d076      	beq.n	14bc0 <isr+0xb60>
				if (_radio.conn_curr->enc_tx) {
   14ad2:	069b      	lsls	r3, r3, #26
   14ad4:	d50a      	bpl.n	14aec <isr+0xa8c>
					_radio.conn_curr->ccm_tx.counter++;
   14ad6:	f8d4 2102 	ldr.w	r2, [r4, #258]	; 0x102
   14ada:	f8d4 3106 	ldr.w	r3, [r4, #262]	; 0x106
   14ade:	3201      	adds	r2, #1
   14ae0:	f143 0300 	adc.w	r3, r3, #0
   14ae4:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   14ae8:	f8c4 3106 	str.w	r3, [r4, #262]	; 0x106
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14aec:	5c43      	ldrb	r3, [r0, r1]
   14aee:	f003 0303 	and.w	r3, r3, #3
   14af2:	2b03      	cmp	r3, #3
   14af4:	d164      	bne.n	14bc0 <isr+0xb60>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   14af6:	f89a 3003 	ldrb.w	r3, [sl, #3]
   14afa:	3b02      	subs	r3, #2
   14afc:	2b0b      	cmp	r3, #11
   14afe:	d85f      	bhi.n	14bc0 <isr+0xb60>
   14b00:	e8df f003 	tbb	[pc, r3]
   14b04:	5e904506 	.word	0x5e904506
   14b08:	5e5e5e5e 	.word	0x5e5e5e5e
   14b0c:	975e6960 	.word	0x975e6960
		_radio.state = STATE_CLOSE;
   14b10:	2303      	movs	r3, #3
   14b12:	f889 3010 	strb.w	r3, [r9, #16]
		radio_disable();
   14b16:	f002 fc73 	bl	17400 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14b1a:	f002 fc8f 	bl	1743c <radio_is_ready>
   14b1e:	2800      	cmp	r0, #0
   14b20:	f47f aaf0 	bne.w	14104 <isr+0xa4>
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   14b24:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14b28:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14b2c:	2913      	cmp	r1, #19
   14b2e:	bf08      	it	eq
   14b30:	2116      	moveq	r1, #22
   14b32:	f7fd fbef 	bl	12314 <terminate_ind_rx_enqueue>
		terminate = 1;
   14b36:	2401      	movs	r4, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14b38:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   14b3c:	f893 2129 	ldrb.w	r2, [r3, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
   14b40:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14b44:	443a      	add	r2, r7
   14b46:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
   14b48:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14b4a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
			if (_radio.conn_curr->packet_tx_head_offset ==
   14b4e:	d11c      	bne.n	14b8a <isr+0xb2a>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14b50:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   14b54:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
	conn->packet_tx_head_len = 0;
   14b58:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14b5a:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
   14b5c:	f883 0128 	strb.w	r0, [r3, #296]	; 0x128
	conn->packet_tx_head_offset = 0;
   14b60:	f883 0129 	strb.w	r0, [r3, #297]	; 0x129
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14b64:	d16f      	bne.n	14c46 <isr+0xbe6>
		if (node_tx) {
   14b66:	b186      	cbz	r6, 14b8a <isr+0xb2a>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14b68:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14b6c:	6817      	ldr	r7, [r2, #0]
   14b6e:	f8c3 7114 	str.w	r7, [r3, #276]	; 0x114
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14b72:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
   14b74:	bf06      	itte	eq
   14b76:	f8c3 0118 	streq.w	r0, [r3, #280]	; 0x118
				conn->pkt_tx_ctrl_last = NULL;
   14b7a:	f8c3 011c 	streq.w	r0, [r3, #284]	; 0x11c
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14b7e:	f8c3 7118 	strne.w	r7, [r3, #280]	; 0x118
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   14b82:	49c7      	ldr	r1, [pc, #796]	; (14ea0 <isr+0xe40>)
   14b84:	4630      	mov	r0, r6
   14b86:	f7fb f864 	bl	fc52 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   14b8a:	2600      	movs	r6, #0
   14b8c:	e064      	b.n	14c58 <isr+0xbf8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   14b8e:	2208      	movs	r2, #8
   14b90:	f10a 010e 	add.w	r1, sl, #14
   14b94:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   14b98:	f7eb fd5e 	bl	658 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14b9c:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14ba0:	2204      	movs	r2, #4
   14ba2:	f10a 0116 	add.w	r1, sl, #22
   14ba6:	30ea      	adds	r0, #234	; 0xea
   14ba8:	f7eb fd56 	bl	658 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14bac:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   14bb0:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
   14bb4:	f042 0208 	orr.w	r2, r2, #8
   14bb8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		_radio.conn_curr->procedure_expire =
   14bbc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   14bbe:	869a      	strh	r2, [r3, #52]	; 0x34
	u8_t terminate = 0;
   14bc0:	2400      	movs	r4, #0
   14bc2:	e7b9      	b.n	14b38 <isr+0xad8>
		_radio.conn_curr->pause_tx = 1;
   14bc4:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
		_radio.conn_curr->refresh = 1;
   14bc8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   14bcc:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
		_radio.conn_curr->procedure_expire =
   14bd0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		_radio.conn_curr->procedure_expire = 0;
   14bd2:	86a3      	strh	r3, [r4, #52]	; 0x34
   14bd4:	e7f4      	b.n	14bc0 <isr+0xb60>
		if (_radio.role == ROLE_MASTER) {
   14bd6:	f899 a00f 	ldrb.w	sl, [r9, #15]
   14bda:	fa5f fa8a 	uxtb.w	sl, sl
   14bde:	f1ba 0f04 	cmp.w	sl, #4
   14be2:	d11f      	bne.n	14c24 <isr+0xbc4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14be4:	7933      	ldrb	r3, [r6, #4]
   14be6:	f043 0303 	orr.w	r3, r3, #3
   14bea:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   14bec:	2317      	movs	r3, #23
   14bee:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14bf0:	2303      	movs	r3, #3
   14bf2:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   14bf4:	2208      	movs	r2, #8
   14bf6:	f104 0162 	add.w	r1, r4, #98	; 0x62
   14bfa:	3004      	adds	r0, #4
   14bfc:	f7eb fd2c 	bl	658 <memcpy>
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   14c00:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   14c04:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   14c06:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
   14c0a:	7473      	strb	r3, [r6, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   14c0c:	f106 0112 	add.w	r1, r6, #18
   14c10:	2008      	movs	r0, #8
   14c12:	f002 fa07 	bl	17024 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   14c16:	f106 011a 	add.w	r1, r6, #26
   14c1a:	4650      	mov	r0, sl
   14c1c:	f002 fa02 	bl	17024 <rand_isr_get>
			*node_tx = NULL;
   14c20:	2600      	movs	r6, #0
   14c22:	e7cd      	b.n	14bc0 <isr+0xb60>
			_radio.conn_curr->pause_tx = 1;
   14c24:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14c28:	f043 0308 	orr.w	r3, r3, #8
   14c2c:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
   14c30:	e7c6      	b.n	14bc0 <isr+0xb60>
		_radio.conn_curr->pause_rx = 0;
   14c32:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
		_radio.conn_curr->pause_tx = 0;
   14c36:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14c3a:	f36f 03c3 	bfc	r3, #3, #1
   14c3e:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
		_radio.conn_curr->procedure_expire = 0;
   14c42:	2300      	movs	r3, #0
   14c44:	e7c5      	b.n	14bd2 <isr+0xb72>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14c46:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   14c4a:	428a      	cmp	r2, r1
   14c4c:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14c4e:	bf08      	it	eq
   14c50:	f8c3 2120 	streq.w	r2, [r3, #288]	; 0x120
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14c54:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (terminate) {
   14c58:	b37c      	cbz	r4, 14cba <isr+0xc5a>
		connection_release(_radio.conn_curr);
   14c5a:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14c5e:	f7fd fcd7 	bl	12610 <connection_release>
		_radio.conn_curr = NULL;
   14c62:	2300      	movs	r3, #0
   14c64:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   14c68:	469a      	mov	sl, r3
	if (!radio_tmr_aa_restore()) {
   14c6a:	f002 fd83 	bl	17774 <radio_tmr_aa_restore>
   14c6e:	b918      	cbnz	r0, 14c78 <isr+0xc18>
		radio_tmr_aa_save(radio_tmr_aa_get());
   14c70:	f002 fd74 	bl	1775c <radio_tmr_aa_get>
   14c74:	f002 fd78 	bl	17768 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   14c78:	4c8a      	ldr	r4, [pc, #552]	; (14ea4 <isr+0xe44>)
   14c7a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14c7e:	2b00      	cmp	r3, #0
   14c80:	f43f aa75 	beq.w	1416e <isr+0x10e>
	if (tx_release) {
   14c84:	b11e      	cbz	r6, 14c8e <isr+0xc2e>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14c86:	4631      	mov	r1, r6
   14c88:	8c18      	ldrh	r0, [r3, #32]
   14c8a:	f7fd fc4f 	bl	1252c <pdu_node_tx_release>
	if (rx_enqueue) {
   14c8e:	f1ba 0f00 	cmp.w	sl, #0
   14c92:	f43f aa6c 	beq.w	1416e <isr+0x10e>
		rx_fc_lock(_radio.conn_curr->handle);
   14c96:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14c9a:	8c18      	ldrh	r0, [r3, #32]
   14c9c:	f7fd fa5a 	bl	12154 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14ca0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14ca4:	8c1b      	ldrh	r3, [r3, #32]
   14ca6:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14ca8:	f7fd fb5c 	bl	12364 <packet_rx_enqueue>
   14cac:	f7ff ba5f 	b.w	1416e <isr+0x10e>
			_radio.conn_curr->empty = 0;
   14cb0:	f36f 13c7 	bfc	r3, #7, #1
   14cb4:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14cb8:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14cba:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   14cbe:	7a2a      	ldrb	r2, [r5, #8]
   14cc0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14cc4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14cc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14ccc:	429a      	cmp	r2, r3
   14cce:	d03f      	beq.n	14d50 <isr+0xcf0>
	u8_t rx_enqueue = 0;
   14cd0:	f04f 0a00 	mov.w	sl, #0
		_radio.crc_expire = 0;
   14cd4:	4b73      	ldr	r3, [pc, #460]	; (14ea4 <isr+0xe44>)
   14cd6:	2400      	movs	r4, #0
   14cd8:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   14cdc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14ce0:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   14ce2:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   14ce6:	a90f      	add	r1, sp, #60	; 0x3c
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   14ce8:	f890 70d0 	ldrb.w	r7, [r0, #208]	; 0xd0
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   14cec:	f7ff f8d6 	bl	13e9c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14cf0:	f899 3010 	ldrb.w	r3, [r9, #16]
   14cf4:	4a6b      	ldr	r2, [pc, #428]	; (14ea4 <isr+0xe44>)
   14cf6:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   14cf8:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14cfc:	d015      	beq.n	14d2a <isr+0xcca>
   14cfe:	2c00      	cmp	r4, #0
   14d00:	f040 8571 	bne.w	157e6 <isr+0x1786>
   14d04:	f1b8 0f00 	cmp.w	r8, #0
   14d08:	d007      	beq.n	14d1a <isr+0xcba>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14d0a:	7a2b      	ldrb	r3, [r5, #8]
   14d0c:	06db      	lsls	r3, r3, #27
   14d0e:	d404      	bmi.n	14d1a <isr+0xcba>
			 (pdu_data_tx->len == 0)) ||
   14d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14d12:	785b      	ldrb	r3, [r3, #1]
   14d14:	2b00      	cmp	r3, #0
   14d16:	f000 8566 	beq.w	157e6 <isr+0x1786>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   14d1a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
			 (pdu_data_tx->len == 0)) ||
   14d1e:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d22:	2b00      	cmp	r3, #0
   14d24:	bf0c      	ite	eq
   14d26:	2302      	moveq	r3, #2
   14d28:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   14d2a:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14d2c:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14d2e:	f040 8575 	bne.w	1581c <isr+0x17bc>
		if (_radio.role == ROLE_MASTER) {
   14d32:	7bd3      	ldrb	r3, [r2, #15]
   14d34:	2b04      	cmp	r3, #4
   14d36:	f040 8559 	bne.w	157ec <isr+0x178c>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14d3a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14d3e:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
   14d42:	f367 12c7 	bfi	r2, r7, #7, #1
   14d46:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			radio_disable();
   14d4a:	f002 fb59 	bl	17400 <radio_disable>
   14d4e:	e78c      	b.n	14c6a <isr+0xc0a>
	    (packet_rx_reserve_get(3) != 0) &&
   14d50:	2003      	movs	r0, #3
   14d52:	f7fd f865 	bl	11e20 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14d56:	2800      	cmp	r0, #0
   14d58:	d0ba      	beq.n	14cd0 <isr+0xc70>
	    (packet_rx_reserve_get(3) != 0) &&
   14d5a:	f899 3176 	ldrb.w	r3, [r9, #374]	; 0x176
   14d5e:	b373      	cbz	r3, 14dbe <isr+0xd5e>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14d60:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
   14d64:	f8d9 2144 	ldr.w	r2, [r9, #324]	; 0x144
	    ((_radio.fc_ena == 0) ||
   14d68:	4293      	cmp	r3, r2
   14d6a:	d105      	bne.n	14d78 <isr+0xd18>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14d6c:	f899 2174 	ldrb.w	r2, [r9, #372]	; 0x174
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14d70:	f899 1175 	ldrb.w	r1, [r9, #373]	; 0x175
   14d74:	4291      	cmp	r1, r2
   14d76:	d022      	beq.n	14dbe <isr+0xd5e>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14d78:	f8d9 2144 	ldr.w	r2, [r9, #324]	; 0x144
	      (_radio.fc_req == _radio.fc_ack)) ||
   14d7c:	4293      	cmp	r3, r2
   14d7e:	d0a7      	beq.n	14cd0 <isr+0xc70>
	      (_radio.fc_req != _radio.fc_ack) &&
   14d80:	f899 3174 	ldrb.w	r3, [r9, #372]	; 0x174
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14d84:	f899 2175 	ldrb.w	r2, [r9, #373]	; 0x175
   14d88:	429a      	cmp	r2, r3
   14d8a:	d0a1      	beq.n	14cd0 <isr+0xc70>
		(((_radio.fc_req == 0) &&
   14d8c:	f899 3174 	ldrb.w	r3, [r9, #372]	; 0x174
	      (_radio.fc_req != _radio.fc_ack) &&
   14d90:	b933      	cbnz	r3, 14da0 <isr+0xd40>
		   _radio.conn_curr->handle)) ||
   14d92:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
		(((_radio.fc_req == 0) &&
   14d96:	f8b9 2172 	ldrh.w	r2, [r9, #370]	; 0x172
   14d9a:	8c1b      	ldrh	r3, [r3, #32]
   14d9c:	429a      	cmp	r2, r3
   14d9e:	d00e      	beq.n	14dbe <isr+0xd5e>
		 ((_radio.fc_req != 0) &&
   14da0:	f899 3174 	ldrb.w	r3, [r9, #372]	; 0x174
		   _radio.conn_curr->handle)) ||
   14da4:	2b00      	cmp	r3, #0
   14da6:	d093      	beq.n	14cd0 <isr+0xc70>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14da8:	f899 3174 	ldrb.w	r3, [r9, #372]	; 0x174
		   _radio.conn_curr->handle)))))) {
   14dac:	f8d9 1110 	ldr.w	r1, [r9, #272]	; 0x110
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14db0:	eb09 0343 	add.w	r3, r9, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   14db4:	f8b3 216c 	ldrh.w	r2, [r3, #364]	; 0x16c
   14db8:	8c0b      	ldrh	r3, [r1, #32]
   14dba:	429a      	cmp	r2, r3
   14dbc:	d188      	bne.n	14cd0 <isr+0xc70>
		if (pdu_data_rx->len != 0) {
   14dbe:	7a6f      	ldrb	r7, [r5, #9]
   14dc0:	2f00      	cmp	r7, #0
   14dc2:	f000 816f 	beq.w	150a4 <isr+0x1044>
			if (_radio.conn_curr->enc_rx) {
   14dc6:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   14dca:	f893 70d0 	ldrb.w	r7, [r3, #208]	; 0xd0
   14dce:	f017 0710 	ands.w	r7, r7, #16
   14dd2:	d005      	beq.n	14de0 <isr+0xd80>
				done = radio_ccm_is_done();
   14dd4:	f002 fd54 	bl	17880 <radio_ccm_is_done>
				LL_ASSERT(done);
   14dd8:	2800      	cmp	r0, #0
   14dda:	f43f a993 	beq.w	14104 <isr+0xa4>
				ccm_rx_increment = 1;
   14dde:	2701      	movs	r7, #1
			if ((_radio.conn_curr->enc_rx &&
   14de0:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   14de4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14de8:	06d9      	lsls	r1, r3, #27
   14dea:	d410      	bmi.n	14e0e <isr+0xdae>
			    (_radio.conn_curr->pause_rx &&
   14dec:	f8d9 4110 	ldr.w	r4, [r9, #272]	; 0x110
   14df0:	7a2b      	ldrb	r3, [r5, #8]
   14df2:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
			     !radio_ccm_mic_is_valid()) ||
   14df6:	f010 0f04 	tst.w	r0, #4
   14dfa:	d124      	bne.n	14e46 <isr+0xde6>
			switch (pdu_data_rx->ll_id) {
   14dfc:	f013 0303 	ands.w	r3, r3, #3
   14e00:	f000 8150 	beq.w	150a4 <isr+0x1044>
   14e04:	2b02      	cmp	r3, #2
   14e06:	d853      	bhi.n	14eb0 <isr+0xe50>
	*rx_enqueue = 1;
   14e08:	f04f 0a01 	mov.w	sl, #1
   14e0c:	e0fd      	b.n	1500a <isr+0xfaa>
			     !radio_ccm_mic_is_valid()) ||
   14e0e:	f002 fd55 	bl	178bc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14e12:	2800      	cmp	r0, #0
   14e14:	d1ea      	bne.n	14dec <isr+0xd8c>
				_radio.state = STATE_CLOSE;
   14e16:	2303      	movs	r3, #3
   14e18:	f889 3010 	strb.w	r3, [r9, #16]
				radio_disable();
   14e1c:	f002 faf0 	bl	17400 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14e20:	f002 fb0c 	bl	1743c <radio_is_ready>
   14e24:	4604      	mov	r4, r0
   14e26:	2800      	cmp	r0, #0
   14e28:	f47f a96c 	bne.w	14104 <isr+0xa4>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14e2c:	213d      	movs	r1, #61	; 0x3d
   14e2e:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14e32:	f7fd fa6f 	bl	12314 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14e36:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   14e3a:	f7fd fbe9 	bl	12610 <connection_release>
				_radio.conn_curr = NULL;
   14e3e:	46a2      	mov	sl, r4
   14e40:	f8c9 4110 	str.w	r4, [r9, #272]	; 0x110
   14e44:	e711      	b.n	14c6a <isr+0xc0a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14e46:	f003 0203 	and.w	r2, r3, #3
   14e4a:	2a03      	cmp	r2, #3
   14e4c:	d1e3      	bne.n	14e16 <isr+0xdb6>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14e4e:	f994 201d 	ldrsb.w	r2, [r4, #29]
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   14e52:	7ae9      	ldrb	r1, [r5, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14e54:	2a00      	cmp	r2, #0
   14e56:	f000 0240 	and.w	r2, r0, #64	; 0x40
   14e5a:	db15      	blt.n	14e88 <isr+0xe28>
	       (!conn->role &&
   14e5c:	b922      	cbnz	r2, 14e68 <isr+0xe08>
		((!conn->refresh &&
   14e5e:	2902      	cmp	r1, #2
   14e60:	d0cc      	beq.n	14dfc <isr+0xd9c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14e62:	2911      	cmp	r1, #17
   14e64:	d8d7      	bhi.n	14e16 <isr+0xdb6>
   14e66:	e009      	b.n	14e7c <isr+0xe1c>
		 (conn->refresh &&
   14e68:	1e8a      	subs	r2, r1, #2
   14e6a:	b2d2      	uxtb	r2, r2
   14e6c:	2a09      	cmp	r2, #9
   14e6e:	d8f8      	bhi.n	14e62 <isr+0xe02>
   14e70:	f240 2e05 	movw	lr, #517	; 0x205
   14e74:	fa2e f202 	lsr.w	r2, lr, r2
   14e78:	07d2      	lsls	r2, r2, #31
   14e7a:	d4bf      	bmi.n	14dfc <isr+0xd9c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14e7c:	4a0a      	ldr	r2, [pc, #40]	; (14ea8 <isr+0xe48>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14e7e:	fa22 f101 	lsr.w	r1, r2, r1
   14e82:	07ca      	lsls	r2, r1, #31
   14e84:	d5c7      	bpl.n	14e16 <isr+0xdb6>
   14e86:	e7b9      	b.n	14dfc <isr+0xd9c>
	       (conn->role &&
   14e88:	b92a      	cbnz	r2, 14e96 <isr+0xe36>
		((!conn->refresh &&
   14e8a:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14e8c:	d0b6      	beq.n	14dfc <isr+0xd9c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14e8e:	2911      	cmp	r1, #17
   14e90:	d8c1      	bhi.n	14e16 <isr+0xdb6>
   14e92:	4a06      	ldr	r2, [pc, #24]	; (14eac <isr+0xe4c>)
   14e94:	e7f3      	b.n	14e7e <isr+0xe1e>
		 (conn->refresh &&
   14e96:	1e8a      	subs	r2, r1, #2
   14e98:	2a01      	cmp	r2, #1
   14e9a:	d9af      	bls.n	14dfc <isr+0xd9c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14e9c:	290b      	cmp	r1, #11
   14e9e:	e7f5      	b.n	14e8c <isr+0xe2c>
   14ea0:	200010b4 	.word	0x200010b4
   14ea4:	20000f64 	.word	0x20000f64
   14ea8:	00022060 	.word	0x00022060
   14eac:	00022040 	.word	0x00022040
   14eb0:	f994 201d 	ldrsb.w	r2, [r4, #29]
   14eb4:	7ae9      	ldrb	r1, [r5, #11]
	if (_radio.conn_curr->role) {
   14eb6:	2a00      	cmp	r2, #0
   14eb8:	da0d      	bge.n	14ed6 <isr+0xe76>
   14eba:	2919      	cmp	r1, #25
   14ebc:	d814      	bhi.n	14ee8 <isr+0xe88>
   14ebe:	f04f 0e01 	mov.w	lr, #1
   14ec2:	4bc9      	ldr	r3, [pc, #804]	; (151e8 <isr+0x1188>)
   14ec4:	fa0e fe01 	lsl.w	lr, lr, r1
   14ec8:	ea0e 0303 	and.w	r3, lr, r3
   14ecc:	b163      	cbz	r3, 14ee8 <isr+0xe88>
		nack = unknown_rsp_send(_radio.conn_curr,
   14ece:	4620      	mov	r0, r4
   14ed0:	f7fe f90c 	bl	130ec <unknown_rsp_send>
   14ed4:	e234      	b.n	15340 <isr+0x12e0>
   14ed6:	2918      	cmp	r1, #24
   14ed8:	d806      	bhi.n	14ee8 <isr+0xe88>
   14eda:	2301      	movs	r3, #1
   14edc:	f8df e314 	ldr.w	lr, [pc, #788]	; 151f4 <isr+0x1194>
   14ee0:	408b      	lsls	r3, r1
   14ee2:	ea13 0f0e 	tst.w	r3, lr
   14ee6:	d1f2      	bne.n	14ece <isr+0xe6e>
	switch (pdu_data_rx->payload.llctrl.opcode) {
   14ee8:	2911      	cmp	r1, #17
   14eea:	d8f0      	bhi.n	14ece <isr+0xe6e>
   14eec:	e8df f011 	tbh	[pc, r1, lsl #1]
   14ef0:	00660012 	.word	0x00660012
   14ef4:	00a900a5 	.word	0x00a900a5
   14ef8:	00dd00c3 	.word	0x00dd00c3
   14efc:	011200f0 	.word	0x011200f0
   14f00:	015e011e 	.word	0x015e011e
   14f04:	019f0184 	.word	0x019f0184
   14f08:	021401b6 	.word	0x021401b6
   14f0c:	021d011e 	.word	0x021d011e
   14f10:	03e20368 	.word	0x03e20368
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   14f14:	f8b5 0015 	ldrh.w	r0, [r5, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   14f18:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   14f1a:	1ac3      	subs	r3, r0, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   14f1c:	041b      	lsls	r3, r3, #16
   14f1e:	f100 8631 	bmi.w	15b84 <isr+0x1b24>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14f22:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   14f26:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   14f2a:	4299      	cmp	r1, r3
   14f2c:	f47f a8ea 	bne.w	14104 <isr+0xa4>
	if (_radio.conn_upd == 0) {
   14f30:	f8d9 117c 	ldr.w	r1, [r9, #380]	; 0x17c
   14f34:	b921      	cbnz	r1, 14f40 <isr+0xee0>
		LL_ASSERT(conn->role);
   14f36:	2a00      	cmp	r2, #0
   14f38:	f6bf a8e4 	bge.w	14104 <isr+0xa4>
		_radio.conn_upd = conn;
   14f3c:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
	conn->llcp.conn_upd.win_size =
   14f40:	7b2a      	ldrb	r2, [r5, #12]
   14f42:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   14f46:	f8b5 100d 	ldrh.w	r1, [r5, #13]
   14f4a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14f4e:	434a      	muls	r2, r1
	conn->llcp.conn_upd.win_offset_us =
   14f50:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   14f52:	7c29      	ldrb	r1, [r5, #16]
   14f54:	7bea      	ldrb	r2, [r5, #15]
   14f56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp.conn_upd.interval =
   14f5a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   14f5e:	7ca9      	ldrb	r1, [r5, #18]
   14f60:	7c6a      	ldrb	r2, [r5, #17]
   14f62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp.conn_upd.latency =
   14f66:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   14f6a:	7cea      	ldrb	r2, [r5, #19]
   14f6c:	7d29      	ldrb	r1, [r5, #20]
	conn->llcp.conn_upd.instant =
   14f6e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   14f72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp.conn_upd.timeout =
   14f76:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14f7a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
   14f7e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   14f82:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   14f86:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   14f88:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_type = LLCP_CONN_UPD;
   14f8c:	2201      	movs	r2, #1
   14f8e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
   14f92:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14f96:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   14f9a:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   14f9e:	4293      	cmp	r3, r2
   14fa0:	d007      	beq.n	14fb2 <isr+0xf52>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   14fa2:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14fa6:	f003 0307 	and.w	r3, r3, #7
   14faa:	2b04      	cmp	r3, #4
   14fac:	d101      	bne.n	14fb2 <isr+0xf52>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14fae:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
			_radio.conn_curr->procedure_expire = 0;
   14fb2:	f04f 0a00 	mov.w	sl, #0
   14fb6:	f8a4 a034 	strh.w	sl, [r4, #52]	; 0x34
   14fba:	e026      	b.n	1500a <isr+0xfaa>
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   14fbc:	f8b5 3011 	ldrh.w	r3, [r5, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   14fc0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   14fc2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   14fc4:	0418      	lsls	r0, r3, #16
   14fc6:	f100 85dd 	bmi.w	15b84 <isr+0x1b24>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14fca:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   14fce:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   14fd2:	429a      	cmp	r2, r3
   14fd4:	f47f a896 	bne.w	14104 <isr+0xa4>
	memcpy(&conn->llcp.chan_map.chm[0],
   14fd8:	2205      	movs	r2, #5
   14fda:	f105 010c 	add.w	r1, r5, #12
   14fde:	f104 0061 	add.w	r0, r4, #97	; 0x61
   14fe2:	f7eb fb39 	bl	658 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   14fe6:	7c6b      	ldrb	r3, [r5, #17]
   14fe8:	7caa      	ldrb	r2, [r5, #18]
   14fea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   14fee:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
   14ff2:	2302      	movs	r3, #2
	conn->llcp.chan_map.initiate = 0;
   14ff4:	f04f 0a00 	mov.w	sl, #0
	conn->llcp_type = LLCP_CHAN_MAP;
   14ff8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
   14ffc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
   15000:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
		_radio.conn_curr->llcp_ack--;
   15004:	3b01      	subs	r3, #1
   15006:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->nesn++;
   1500a:	4b78      	ldr	r3, [pc, #480]	; (151ec <isr+0x118c>)
   1500c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15010:	f891 30d0 	ldrb.w	r3, [r1, #208]	; 0xd0
   15014:	f083 0302 	eor.w	r3, r3, #2
   15018:	f881 30d0 	strb.w	r3, [r1, #208]	; 0xd0
			if (ccm_rx_increment) {
   1501c:	2f00      	cmp	r7, #0
   1501e:	f43f ae59 	beq.w	14cd4 <isr+0xc74>
				_radio.conn_curr->ccm_rx.counter++;
   15022:	f8d1 20e1 	ldr.w	r2, [r1, #225]	; 0xe1
   15026:	f8d1 30e5 	ldr.w	r3, [r1, #229]	; 0xe5
   1502a:	3201      	adds	r2, #1
   1502c:	f143 0300 	adc.w	r3, r3, #0
   15030:	f8c1 20e1 	str.w	r2, [r1, #225]	; 0xe1
   15034:	f8c1 30e5 	str.w	r3, [r1, #229]	; 0xe5
   15038:	e64c      	b.n	14cd4 <isr+0xc74>
		_radio.conn_curr->llcp_terminate.reason_peer =
   1503a:	7b2b      	ldrb	r3, [r5, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1503c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
   15040:	e030      	b.n	150a4 <isr+0x1044>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   15042:	2208      	movs	r2, #8
   15044:	f105 0116 	add.w	r1, r5, #22
   15048:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1504c:	f7eb fb04 	bl	658 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   15050:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15054:	2204      	movs	r2, #4
   15056:	f105 011e 	add.w	r1, r5, #30
   1505a:	30ea      	adds	r0, #234	; 0xea
   1505c:	f7eb fafc 	bl	658 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   15060:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15064:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
   15068:	f042 0204 	orr.w	r2, r2, #4
   1506c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		_radio.conn_curr->procedure_expire =
   15070:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   15072:	869a      	strh	r2, [r3, #52]	; 0x34
   15074:	e6c8      	b.n	14e08 <isr+0xda8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   15076:	2208      	movs	r2, #8
   15078:	f105 010c 	add.w	r1, r5, #12
   1507c:	f104 0084 	add.w	r0, r4, #132	; 0x84
   15080:	f7eb faea 	bl	658 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   15084:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15088:	2204      	movs	r2, #4
   1508a:	f105 0114 	add.w	r1, r5, #20
   1508e:	30ee      	adds	r0, #238	; 0xee
   15090:	f7eb fae2 	bl	658 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   15094:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15098:	f892 30d0 	ldrb.w	r3, [r2, #208]	; 0xd0
   1509c:	f043 0304 	orr.w	r3, r3, #4
   150a0:	f882 30d0 	strb.w	r3, [r2, #208]	; 0xd0
	u8_t rx_enqueue = 0;
   150a4:	f04f 0a00 	mov.w	sl, #0
   150a8:	e7af      	b.n	1500a <isr+0xfaa>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   150aa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   150ae:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   150b2:	429a      	cmp	r2, r3
   150b4:	d004      	beq.n	150c0 <isr+0x1060>
   150b6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   150ba:	2a03      	cmp	r2, #3
   150bc:	f47f a822 	bne.w	14104 <isr+0xa4>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   150c0:	f04f 0a00 	mov.w	sl, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   150c4:	2203      	movs	r2, #3
		_radio.conn_curr->llcp.encryption.initiate = 0;
   150c6:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   150ca:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
   150ce:	e799      	b.n	15004 <isr+0xfa4>
		if (_radio.role == ROLE_SLAVE) {
   150d0:	f899 300f 	ldrb.w	r3, [r9, #15]
   150d4:	2b03      	cmp	r3, #3
   150d6:	d120      	bne.n	1511a <isr+0x10ba>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   150d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   150dc:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   150e0:	429a      	cmp	r2, r3
   150e2:	d004      	beq.n	150ee <isr+0x108e>
   150e4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   150e8:	2a03      	cmp	r2, #3
   150ea:	f47f a80b 	bne.w	14104 <isr+0xa4>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   150ee:	2200      	movs	r2, #0
   150f0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			_radio.conn_curr->llcp_ack--;
   150f4:	3b01      	subs	r3, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   150f6:	2203      	movs	r2, #3
   150f8:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
			_radio.conn_curr->llcp_ack--;
   150fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		if (_radio.conn_curr->refresh) {
   15100:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   15104:	0659      	lsls	r1, r3, #25
   15106:	d505      	bpl.n	15114 <isr+0x10b4>
			_radio.conn_curr->refresh = 0;
   15108:	f36f 1386 	bfc	r3, #6, #1
   1510c:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15110:	2306      	movs	r3, #6
   15112:	712b      	strb	r3, [r5, #4]
		_radio.conn_curr->procedure_expire = 0;
   15114:	2300      	movs	r3, #0
   15116:	86a3      	strh	r3, [r4, #52]	; 0x34
   15118:	e676      	b.n	14e08 <isr+0xda8>
			_radio.conn_curr->pause_rx = 0;
   1511a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
			_radio.conn_curr->pause_tx = 0;
   1511e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   15122:	f36f 03c3 	bfc	r3, #3, #1
   15126:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
   1512a:	e7e9      	b.n	15100 <isr+0x10a0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1512c:	4830      	ldr	r0, [pc, #192]	; (151f0 <isr+0x1190>)
   1512e:	f7fa fd76 	bl	fc1e <mem_acquire>
	if (!node_tx) {
   15132:	4682      	mov	sl, r0
   15134:	2800      	cmp	r0, #0
   15136:	f43f adcb 	beq.w	14cd0 <isr+0xc70>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1513a:	7b2b      	ldrb	r3, [r5, #12]
	       (features[1] << 8) | (features[2] << 16);
   1513c:	7b69      	ldrb	r1, [r5, #13]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1513e:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   15142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   15146:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1514a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1514e:	f043 0310 	orr.w	r3, r3, #16
   15152:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   15156:	7ba9      	ldrb	r1, [r5, #14]
   15158:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1515c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
   15160:	f3c1 0110 	ubfx	r1, r1, #0, #17
   15164:	400b      	ands	r3, r1
   15166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
   1516a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   1516e:	f043 0320 	orr.w	r3, r3, #32
   15172:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15176:	7903      	ldrb	r3, [r0, #4]
   15178:	f043 0303 	orr.w	r3, r3, #3
   1517c:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   1517e:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15180:	2309      	movs	r3, #9
   15182:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   15184:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   15186:	2100      	movs	r1, #0
   15188:	4410      	add	r0, r2
   1518a:	f7eb fa91 	bl	6b0 <memset>
		conn->llcp_features & 0xFF;
   1518e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15192:	f88a 3008 	strb.w	r3, [sl, #8]
		(conn->llcp_features >> 8) & 0xFF;
   15196:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   15198:	0c1b      	lsrs	r3, r3, #16
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   1519a:	f88a 2009 	strb.w	r2, [sl, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   1519e:	f88a 300a 	strb.w	r3, [sl, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   151a2:	4651      	mov	r1, sl
   151a4:	4620      	mov	r0, r4
   151a6:	f7fd ff47 	bl	13038 <ctrl_tx_sec_enqueue>
   151aa:	e77b      	b.n	150a4 <isr+0x1044>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   151ac:	7b2b      	ldrb	r3, [r5, #12]
	       (features[1] << 8) | (features[2] << 16);
   151ae:	7b6a      	ldrb	r2, [r5, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   151b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   151b4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   151b8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   151bc:	f043 0310 	orr.w	r3, r3, #16
   151c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   151c4:	7baa      	ldrb	r2, [r5, #14]
   151c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   151ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   151ce:	f3c2 0210 	ubfx	r2, r2, #0, #17
   151d2:	4013      	ands	r3, r2
   151d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
   151d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   151dc:	f043 0320 	orr.w	r3, r3, #32
   151e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   151e4:	e796      	b.n	15114 <isr+0x10b4>
   151e6:	bf00      	nop
   151e8:	02814030 	.word	0x02814030
   151ec:	20000f64 	.word	0x20000f64
   151f0:	200010b4 	.word	0x200010b4
   151f4:	0100050b 	.word	0x0100050b
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151f8:	48a8      	ldr	r0, [pc, #672]	; (1549c <isr+0x143c>)
   151fa:	f7fa fd10 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   151fe:	4601      	mov	r1, r0
   15200:	2800      	cmp	r0, #0
   15202:	f43f ad65 	beq.w	14cd0 <isr+0xc70>
		conn->refresh = 1;
   15206:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
	conn->enc_rx = 0;
   1520a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   1520e:	f36f 1304 	bfc	r3, #4, #1
   15212:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15216:	790b      	ldrb	r3, [r1, #4]
   15218:	f043 0303 	orr.w	r3, r3, #3
   1521c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   1521e:	2301      	movs	r3, #1
   15220:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   15222:	230b      	movs	r3, #11
   15224:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   15226:	4620      	mov	r0, r4
   15228:	f7fd fed8 	bl	12fdc <ctrl_tx_enqueue>
   1522c:	e73a      	b.n	150a4 <isr+0x1044>
	} else if (!conn->role) {
   1522e:	2a00      	cmp	r2, #0
   15230:	db0d      	blt.n	1524e <isr+0x11ee>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15232:	489a      	ldr	r0, [pc, #616]	; (1549c <isr+0x143c>)
   15234:	f7fa fcf3 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   15238:	4601      	mov	r1, r0
   1523a:	2800      	cmp	r0, #0
   1523c:	f43f ad48 	beq.w	14cd0 <isr+0xc70>
		conn->enc_tx = 0;
   15240:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
	conn->pause_rx = 1;
   15244:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   15248:	f043 0304 	orr.w	r3, r3, #4
   1524c:	e7df      	b.n	1520e <isr+0x11ae>
		conn->enc_tx = 0;
   1524e:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   15252:	f36f 1345 	bfc	r3, #5, #1
   15256:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
   1525a:	e723      	b.n	150a4 <isr+0x1044>
	if (!conn->llcp_version.tx) {
   1525c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   15260:	f013 0a01 	ands.w	sl, r3, #1
   15264:	d150      	bne.n	15308 <isr+0x12a8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15266:	488d      	ldr	r0, [pc, #564]	; (1549c <isr+0x143c>)
   15268:	f7fa fcd9 	bl	fc1e <mem_acquire>
		if (!node_tx) {
   1526c:	4601      	mov	r1, r0
   1526e:	2800      	cmp	r0, #0
   15270:	f43f ad2e 	beq.w	14cd0 <isr+0xc70>
		conn->llcp_version.tx = 1;
   15274:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   15278:	f043 0301 	orr.w	r3, r3, #1
   1527c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15280:	7903      	ldrb	r3, [r0, #4]
   15282:	f043 0303 	orr.w	r3, r3, #3
   15286:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15288:	2306      	movs	r3, #6
   1528a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1528c:	230c      	movs	r3, #12
   1528e:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   15290:	2309      	movs	r3, #9
   15292:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   15294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15298:	7243      	strb	r3, [r0, #9]
   1529a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   1529c:	72c3      	strb	r3, [r0, #11]
   1529e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   152a0:	4620      	mov	r0, r4
   152a2:	f7fd fec9 	bl	13038 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   152a6:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   152aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   152ae:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   152b2:	f002 f8f7 	bl	174a4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   152b6:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   152b8:	f880 a001 	strb.w	sl, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   152bc:	2201      	movs	r2, #1
   152be:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   152c2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   152c6:	7003      	strb	r3, [r0, #0]
   152c8:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   152ca:	b1c2      	cbz	r2, 152fe <isr+0x129e>
		pdu_data_tx->md = 1;
   152cc:	f043 0310 	orr.w	r3, r3, #16
   152d0:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   152d2:	7b2b      	ldrb	r3, [r5, #12]
   152d4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version. company_id = v->company_id;
   152d8:	7baa      	ldrb	r2, [r5, #14]
   152da:	7b6b      	ldrb	r3, [r5, #13]
   152dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152e0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
   152e4:	7beb      	ldrb	r3, [r5, #15]
   152e6:	7c2a      	ldrb	r2, [r5, #16]
   152e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   152ec:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
   152f0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   152f4:	f043 0302 	orr.w	r3, r3, #2
   152f8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
   152fc:	e685      	b.n	1500a <isr+0xfaa>
		pdu_data_tx->md = 0;
   152fe:	f362 1304 	bfi	r3, r2, #4, #1
   15302:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
   15304:	4692      	mov	sl, r2
   15306:	e7e4      	b.n	152d2 <isr+0x1272>
	} else if (!conn->llcp_version.rx) {
   15308:	f013 0302 	ands.w	r3, r3, #2
   1530c:	f47f aeca 	bne.w	150a4 <isr+0x1044>
		conn->procedure_expire = 0;
   15310:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
   15312:	f04f 0a01 	mov.w	sl, #1
   15316:	e7dc      	b.n	152d2 <isr+0x1272>
		_radio.conn_curr->pause_rx = 0;
   15318:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
		_radio.conn_curr->pause_tx = 0;
   1531c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   15320:	f36f 03c3 	bfc	r3, #3, #1
   15324:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
   15328:	e6f4      	b.n	15114 <isr+0x10b4>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   1532a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1532e:	930b      	str	r3, [sp, #44]	; 0x2c
   15330:	b15b      	cbz	r3, 1534a <isr+0x12ea>
   15332:	429c      	cmp	r4, r3
   15334:	d009      	beq.n	1534a <isr+0x12ea>
			nack = reject_ext_ind_send(_radio.conn_curr,
   15336:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn,
   15338:	210f      	movs	r1, #15
				nack = reject_ext_ind_send(conn,
   1533a:	4620      	mov	r0, r4
   1533c:	f7fd feba 	bl	130b4 <reject_ext_ind_send>
		nack = unknown_rsp_send(_radio.conn_curr,
   15340:	4682      	mov	sl, r0
		if (!nack) {
   15342:	2800      	cmp	r0, #0
   15344:	f47f acc4 	bne.w	14cd0 <isr+0xc70>
   15348:	e65f      	b.n	1500a <isr+0xfaa>
		if (!_radio.conn_curr->role) {
   1534a:	2a00      	cmp	r2, #0
   1534c:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
   15350:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15354:	920c      	str	r2, [sp, #48]	; 0x30
   15356:	f2c0 80a5 	blt.w	154a4 <isr+0x1444>
			if ((conn->llcp_conn_param.req !=
   1535a:	4293      	cmp	r3, r2
   1535c:	d009      	beq.n	15372 <isr+0x1312>
			    ((conn->llcp_conn_param.state ==
   1535e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
					conn->llcp_conn_param.ack) &&
   15362:	f013 0307 	ands.w	r3, r3, #7
   15366:	d002      	beq.n	1536e <isr+0x130e>
			      LLCP_CPR_STATE_REQ) ||
   15368:	3b04      	subs	r3, #4
   1536a:	2b01      	cmp	r3, #1
   1536c:	d801      	bhi.n	15372 <isr+0x1312>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1536e:	2223      	movs	r2, #35	; 0x23
   15370:	e7e2      	b.n	15338 <isr+0x12d8>
			} else if ((conn->llcp_req != conn->llcp_ack) &&
   15372:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   15376:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1537a:	429a      	cmp	r2, r3
   1537c:	d005      	beq.n	1538a <isr+0x132a>
   1537e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   15382:	2b03      	cmp	r3, #3
   15384:	d001      	beq.n	1538a <isr+0x132a>
				nack = reject_ext_ind_send(_radio.conn_curr,
   15386:	222a      	movs	r2, #42	; 0x2a
   15388:	e7d6      	b.n	15338 <isr+0x12d8>
				if ((cpr->interval_min < 6) ||
   1538a:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
   1538e:	4652      	mov	r2, sl
   15390:	2a05      	cmp	r2, #5
   15392:	d91e      	bls.n	153d2 <isr+0x1372>
				    (cpr->interval_max > 3200) ||
   15394:	89eb      	ldrh	r3, [r5, #14]
				if ((cpr->interval_min < 6) ||
   15396:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1539a:	d81a      	bhi.n	153d2 <isr+0x1372>
				    (cpr->interval_max > 3200) ||
   1539c:	459a      	cmp	sl, r3
   1539e:	d818      	bhi.n	153d2 <isr+0x1372>
				    (cpr->latency > 499) ||
   153a0:	f8b5 b010 	ldrh.w	fp, [r5, #16]
   153a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
				    (cpr->interval_min > cpr->interval_max) ||
   153a8:	f5bb 7ffa 	cmp.w	fp, #500	; 0x1f4
   153ac:	d211      	bcs.n	153d2 <isr+0x1372>
				    (cpr->timeout < 10) ||
   153ae:	f8b5 c012 	ldrh.w	ip, [r5, #18]
				    (cpr->latency > 499) ||
   153b2:	f1ac 0e0a 	sub.w	lr, ip, #10
   153b6:	fa1f fe8e 	uxth.w	lr, lr
   153ba:	f640 4276 	movw	r2, #3190	; 0xc76
   153be:	4596      	cmp	lr, r2
   153c0:	d807      	bhi.n	153d2 <isr+0x1372>
				     ((cpr->latency + 1) *
   153c2:	fb0b 3203 	mla	r2, fp, r3, r3
				    (cpr->timeout > 3200) ||
   153c6:	ebb2 0f8c 	cmp.w	r2, ip, lsl #2
   153ca:	da02      	bge.n	153d2 <isr+0x1372>
				    (cpr->preferred_periodicity >
   153cc:	7d2a      	ldrb	r2, [r5, #20]
				      cpr->interval_max)) ||
   153ce:	4293      	cmp	r3, r2
   153d0:	d201      	bcs.n	153d6 <isr+0x1376>
				nack = reject_ext_ind_send(conn,
   153d2:	221e      	movs	r2, #30
   153d4:	e7b0      	b.n	15338 <isr+0x12d8>
				conn->llcp_conn_param.interval = cpr->interval_min;
   153d6:	f8a4 a0ac 	strh.w	sl, [r4, #172]	; 0xac
				conn->llcp_conn_param.latency =	cpr->latency;
   153da:	f8a4 b0ae 	strh.w	fp, [r4, #174]	; 0xae
				conn->llcp_conn_param.timeout =	cpr->timeout;
   153de:	f8a4 c0b0 	strh.w	ip, [r4, #176]	; 0xb0
				conn->llcp_conn_param.preferred_periodicity =
   153e2:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
					cpr->reference_conn_event_count;
   153e6:	7daa      	ldrb	r2, [r5, #22]
   153e8:	7d6b      	ldrb	r3, [r5, #21]
   153ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   153ee:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   153f2:	7e2a      	ldrb	r2, [r5, #24]
   153f4:	7deb      	ldrb	r3, [r5, #23]
   153f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   153fa:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   153fe:	7eaa      	ldrb	r2, [r5, #26]
   15400:	7e6b      	ldrb	r3, [r5, #25]
   15402:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15406:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   1540a:	7f2a      	ldrb	r2, [r5, #28]
   1540c:	7eeb      	ldrb	r3, [r5, #27]
   1540e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15412:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   15416:	7faa      	ldrb	r2, [r5, #30]
   15418:	7f6b      	ldrb	r3, [r5, #29]
   1541a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1541e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   15422:	f895 2020 	ldrb.w	r2, [r5, #32]
   15426:	7feb      	ldrb	r3, [r5, #31]
   15428:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1542c:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   15430:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   15434:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   15438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1543c:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
				if ((conn->llcp_conn_param.interval !=
   15440:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
   15444:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15446:	429a      	cmp	r2, r3
   15448:	d10f      	bne.n	1546a <isr+0x140a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1544a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1544c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15450:	4353      	muls	r3, r2
   15452:	f242 7210 	movw	r2, #10000	; 0x2710
   15456:	fb02 310c 	mla	r1, r2, ip, r3
   1545a:	3901      	subs	r1, #1
   1545c:	fb91 f1f3 	sdiv	r1, r1, r3
				     conn->latency) ||
   15460:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   15462:	b289      	uxth	r1, r1
   15464:	428b      	cmp	r3, r1
   15466:	f000 809d 	beq.w	155a4 <isr+0x1544>
					if (conn->pause_tx) {
   1546a:	f010 0f08 	tst.w	r0, #8
   1546e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   15472:	f000 808f 	beq.w	15594 <isr+0x1534>
						conn->llcp_conn_param.state =
   15476:	2202      	movs	r2, #2
   15478:	f362 0302 	bfi	r3, r2, #0, #3
   1547c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
	u8_t rx_enqueue = 0;
   15480:	f04f 0a00 	mov.w	sl, #0
			conn->llcp_conn_param.ack--;
   15484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15486:	3b01      	subs	r3, #1
   15488:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
			if (_radio.conn_upd == 0) {
   1548c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1548e:	2b00      	cmp	r3, #0
   15490:	f47f adbb 	bne.w	1500a <isr+0xfaa>
				_radio.conn_upd = conn;
   15494:	4b02      	ldr	r3, [pc, #8]	; (154a0 <isr+0x1440>)
   15496:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   1549a:	e5b6      	b.n	1500a <isr+0xfaa>
   1549c:	200010b4 	.word	0x200010b4
   154a0:	20000f64 	.word	0x20000f64
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   154a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   154a6:	4293      	cmp	r3, r2
   154a8:	d004      	beq.n	154b4 <isr+0x1454>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   154aa:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   154ae:	079a      	lsls	r2, r3, #30
   154b0:	f47e ae28 	bne.w	14104 <isr+0xa4>
			if ((cpr->interval_min < 6) ||
   154b4:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
   154b8:	4653      	mov	r3, sl
   154ba:	2b05      	cmp	r3, #5
   154bc:	d989      	bls.n	153d2 <isr+0x1372>
			    (cpr->interval_max > 3200) ||
   154be:	89ea      	ldrh	r2, [r5, #14]
			if ((cpr->interval_min < 6) ||
   154c0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   154c4:	d885      	bhi.n	153d2 <isr+0x1372>
			    (cpr->interval_max > 3200) ||
   154c6:	4592      	cmp	sl, r2
   154c8:	d883      	bhi.n	153d2 <isr+0x1372>
			    (cpr->latency > 499) ||
   154ca:	f8b5 c010 	ldrh.w	ip, [r5, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   154ce:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   154d2:	f4bf af7e 	bcs.w	153d2 <isr+0x1372>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   154d6:	f8b5 e012 	ldrh.w	lr, [r5, #18]
			    (cpr->latency > 499) ||
   154da:	f1ae 000a 	sub.w	r0, lr, #10
   154de:	b280      	uxth	r0, r0
   154e0:	f640 4b76 	movw	fp, #3190	; 0xc76
   154e4:	4558      	cmp	r0, fp
   154e6:	f63f af74 	bhi.w	153d2 <isr+0x1372>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   154ea:	fb0c 2102 	mla	r1, ip, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   154ee:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   154f2:	f6bf af6e 	bge.w	153d2 <isr+0x1372>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   154f6:	7d29      	ldrb	r1, [r5, #20]
						    cpr->interval_max)) ||
   154f8:	428a      	cmp	r2, r1
   154fa:	f4ff af6a 	bcc.w	153d2 <isr+0x1372>
			conn->llcp_conn_param.interval = cpr->interval_min;
   154fe:	f8a4 a0ac 	strh.w	sl, [r4, #172]	; 0xac
			conn->llcp_conn_param.latency =	cpr->latency;
   15502:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
			conn->llcp_conn_param.timeout =	cpr->timeout;
   15506:	f8a4 e0b0 	strh.w	lr, [r4, #176]	; 0xb0
			conn->llcp_conn_param.preferred_periodicity =
   1550a:	f884 10b2 	strb.w	r1, [r4, #178]	; 0xb2
				cpr->reference_conn_event_count;
   1550e:	7da9      	ldrb	r1, [r5, #22]
   15510:	7d6a      	ldrb	r2, [r5, #21]
   15512:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   15516:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1551a:	7e29      	ldrb	r1, [r5, #24]
   1551c:	7dea      	ldrb	r2, [r5, #23]
   1551e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15522:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   15526:	7ea9      	ldrb	r1, [r5, #26]
   15528:	7e6a      	ldrb	r2, [r5, #25]
   1552a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1552e:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   15532:	7f29      	ldrb	r1, [r5, #28]
   15534:	7eea      	ldrb	r2, [r5, #27]
   15536:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1553a:	f8a4 20ba 	strh.w	r2, [r4, #186]	; 0xba
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1553e:	7fa9      	ldrb	r1, [r5, #30]
   15540:	7f6a      	ldrb	r2, [r5, #29]
   15542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15546:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1554a:	f895 1020 	ldrb.w	r1, [r5, #32]
   1554e:	7fea      	ldrb	r2, [r5, #31]
   15550:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15554:	f8a4 20be 	strh.w	r2, [r4, #190]	; 0xbe
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   15558:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1555c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   15560:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15564:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
			if ((conn->llcp_conn_param.interval !=
   15568:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   1556c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1556e:	4291      	cmp	r1, r2
   15570:	d10e      	bne.n	15590 <isr+0x1530>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   15572:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   15574:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15578:	434a      	muls	r2, r1
   1557a:	f242 7110 	movw	r1, #10000	; 0x2710
   1557e:	fb01 230e 	mla	r3, r1, lr, r2
   15582:	3b01      	subs	r3, #1
   15584:	fb93 f3f2 	sdiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != conn->latency) ||
   15588:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1558a:	b29b      	uxth	r3, r3
   1558c:	429a      	cmp	r2, r3
   1558e:	d009      	beq.n	155a4 <isr+0x1544>
				conn->llcp_conn_param.state =
   15590:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   15594:	2203      	movs	r2, #3
   15596:	f362 0302 	bfi	r3, r2, #0, #3
   1559a:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
				*rx_enqueue = 1;
   1559e:	f04f 0a01 	mov.w	sl, #1
   155a2:	e76f      	b.n	15484 <isr+0x1424>
				conn->llcp_conn_param.cmd = 0;
   155a4:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
				conn->llcp_conn_param.state =
   155a8:	2201      	movs	r2, #1
   155aa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
				conn->llcp_conn_param.status = 0;
   155ae:	f04f 0a00 	mov.w	sl, #0
				conn->llcp_conn_param.state =
   155b2:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_conn_param.status = 0;
   155b6:	f884 a0ab 	strb.w	sl, [r4, #171]	; 0xab
				conn->llcp_conn_param.state =
   155ba:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
   155be:	e761      	b.n	15484 <isr+0x1424>
		if (!_radio.conn_curr->role &&
   155c0:	2a00      	cmp	r2, #0
   155c2:	f6ff ad6f 	blt.w	150a4 <isr+0x1044>
   155c6:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   155ca:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   155ce:	429a      	cmp	r2, r3
   155d0:	f43f ad68 	beq.w	150a4 <isr+0x1044>
		    (_radio.conn_curr->llcp_conn_param.state ==
   155d4:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		     _radio.conn_curr->llcp_conn_param.ack) &&
   155d8:	f003 0307 	and.w	r3, r3, #7
   155dc:	2b04      	cmp	r3, #4
   155de:	f47f ad61 	bne.w	150a4 <isr+0x1044>
			if ((cpr->interval_min < 6) ||
   155e2:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
   155e6:	fa1f f38c 	uxth.w	r3, ip
   155ea:	2b05      	cmp	r3, #5
   155ec:	d91e      	bls.n	1562c <isr+0x15cc>
			    (cpr->interval_max > 3200) ||
   155ee:	89ea      	ldrh	r2, [r5, #14]
			if ((cpr->interval_min < 6) ||
   155f0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   155f4:	d81a      	bhi.n	1562c <isr+0x15cc>
			    (cpr->interval_max > 3200) ||
   155f6:	4293      	cmp	r3, r2
   155f8:	d818      	bhi.n	1562c <isr+0x15cc>
			    (cpr->latency > 499) ||
   155fa:	f8b5 e010 	ldrh.w	lr, [r5, #16]
   155fe:	fa1f f38e 	uxth.w	r3, lr
			    (cpr->interval_min > cpr->interval_max) ||
   15602:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   15606:	d211      	bcs.n	1562c <isr+0x15cc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   15608:	8a68      	ldrh	r0, [r5, #18]
   1560a:	fa1f fa80 	uxth.w	sl, r0
			    (cpr->latency > 499) ||
   1560e:	f1aa 010a 	sub.w	r1, sl, #10
   15612:	b289      	uxth	r1, r1
   15614:	f640 4b76 	movw	fp, #3190	; 0xc76
   15618:	4559      	cmp	r1, fp
   1561a:	d807      	bhi.n	1562c <isr+0x15cc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   1561c:	fb03 2302 	mla	r3, r3, r2, r2
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   15620:	ebb3 0f8a 	cmp.w	r3, sl, lsl #2
   15624:	da02      	bge.n	1562c <isr+0x15cc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   15626:	7d2b      	ldrb	r3, [r5, #20]
						    cpr->interval_max)) ||
   15628:	429a      	cmp	r2, r3
   1562a:	d202      	bcs.n	15632 <isr+0x15d2>
				nack = reject_ext_ind_send(conn,
   1562c:	221e      	movs	r2, #30
   1562e:	2110      	movs	r1, #16
   15630:	e683      	b.n	1533a <isr+0x12da>
			_radio.conn_curr->procedure_expire = 0;
   15632:	f04f 0a00 	mov.w	sl, #0
   15636:	f8a4 a034 	strh.w	sl, [r4, #52]	; 0x34
			conn->llcp_conn_param.interval = cpr->interval_min;
   1563a:	f8a4 c0ac 	strh.w	ip, [r4, #172]	; 0xac
			conn->llcp_conn_param.latency =	cpr->latency;
   1563e:	f8a4 e0ae 	strh.w	lr, [r4, #174]	; 0xae
			conn->llcp_conn_param.timeout =	cpr->timeout;
   15642:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			conn->llcp_conn_param.preferred_periodicity =
   15646:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
				cpr->reference_conn_event_count;
   1564a:	7daa      	ldrb	r2, [r5, #22]
   1564c:	7d6b      	ldrb	r3, [r5, #21]
   1564e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   15652:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   15656:	7e2a      	ldrb	r2, [r5, #24]
   15658:	7deb      	ldrb	r3, [r5, #23]
   1565a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1565e:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   15662:	7eaa      	ldrb	r2, [r5, #26]
   15664:	7e6b      	ldrb	r3, [r5, #25]
   15666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1566a:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   1566e:	7f2a      	ldrb	r2, [r5, #28]
   15670:	7eeb      	ldrb	r3, [r5, #27]
   15672:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15676:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1567a:	7faa      	ldrb	r2, [r5, #30]
   1567c:	7f6b      	ldrb	r3, [r5, #29]
   1567e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15682:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   15686:	f895 2020 	ldrb.w	r2, [r5, #32]
   1568a:	7feb      	ldrb	r3, [r5, #31]
   1568c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15690:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   15694:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   15698:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1569c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   156a0:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   156a4:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   156a8:	2201      	movs	r2, #1
   156aa:	f362 0302 	bfi	r3, r2, #0, #3
   156ae:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
   156b2:	e4aa      	b.n	1500a <isr+0xfaa>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   156b4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		   _radio.conn_curr->llcp_conn_param.req) {
   156b8:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   156bc:	4283      	cmp	r3, r0
   156be:	7b2b      	ldrb	r3, [r5, #12]
   156c0:	d064      	beq.n	1578c <isr+0x172c>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   156c2:	2b0f      	cmp	r3, #15
   156c4:	f47f acee 	bne.w	150a4 <isr+0x1044>
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   156c8:	2a00      	cmp	r2, #0
   156ca:	7b6b      	ldrb	r3, [r5, #13]
   156cc:	db33      	blt.n	15736 <isr+0x16d6>
   156ce:	2b1a      	cmp	r3, #26
   156d0:	d131      	bne.n	15736 <isr+0x16d6>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   156d2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   156d6:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   156da:	4299      	cmp	r1, r3
   156dc:	f47e ad12 	bne.w	14104 <isr+0xa4>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   156e0:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   156e4:	2205      	movs	r2, #5
   156e6:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   156ea:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   156ee:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   156f2:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
   156f6:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   156fa:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
   156fe:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15702:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15706:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		conn->llcp.conn_upd.win_size = 1;
   1570a:	f04f 0e01 	mov.w	lr, #1
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1570e:	f083 0308 	eor.w	r3, r3, #8
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15712:	f36e 0201 	bfi	r2, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   15716:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   1571a:	2000      	movs	r0, #0
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1571c:	f363 0282 	bfi	r2, r3, #2, #1
		conn->llcp_ack--;
   15720:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
   15722:	f884 e070 	strb.w	lr, [r4, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
   15726:	66e0      	str	r0, [r4, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   15728:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   1572c:	f884 e05e 	strb.w	lr, [r4, #94]	; 0x5e
		conn->llcp_ack--;
   15730:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
   15734:	e4b6      	b.n	150a4 <isr+0x1044>
	else if (rej_ext_ind->error_code != 0x23) {
   15736:	2b23      	cmp	r3, #35	; 0x23
   15738:	d010      	beq.n	1575c <isr+0x16fc>
		LL_ASSERT(_radio.conn_upd == conn);
   1573a:	f8d9 117c 	ldr.w	r1, [r9, #380]	; 0x17c
   1573e:	428c      	cmp	r4, r1
   15740:	f47e ace0 	bne.w	14104 <isr+0xa4>
		_radio.conn_upd = NULL;
   15744:	2100      	movs	r1, #0
		if (conn->role) {
   15746:	428a      	cmp	r2, r1
			conn->slave.ticks_to_offset =
   15748:	bfb8      	it	lt
   1574a:	f8d4 20cc 	ldrlt.w	r2, [r4, #204]	; 0xcc
		_radio.conn_upd = NULL;
   1574e:	f8c9 117c 	str.w	r1, [r9, #380]	; 0x17c
		conn->llcp_conn_param.ack =
   15752:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
		conn->procedure_expire = 0;
   15756:	86a1      	strh	r1, [r4, #52]	; 0x34
			conn->slave.ticks_to_offset =
   15758:	bfb8      	it	lt
   1575a:	65a2      	strlt	r2, [r4, #88]	; 0x58
	if (!conn->llcp_conn_param.cmd) {
   1575c:	f894 a0aa 	ldrb.w	sl, [r4, #170]	; 0xaa
   15760:	f01a 0a08 	ands.w	sl, sl, #8
   15764:	f43f ac51 	beq.w	1500a <isr+0xfaa>
	cp->status = rej_ext_ind->error_code;
   15768:	72eb      	strb	r3, [r5, #11]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1576a:	2205      	movs	r2, #5
   1576c:	712a      	strb	r2, [r5, #4]
	cp->latency = conn->latency;
   1576e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	cp->interval = conn->conn_interval;
   15770:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	cp->latency = conn->latency;
   15772:	81ea      	strh	r2, [r5, #14]
	cp->timeout = conn->supervision_reload *
   15774:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	cp->interval = conn->conn_interval;
   15776:	81ab      	strh	r3, [r5, #12]
	cp->timeout = conn->supervision_reload *
   15778:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   1577a:	237d      	movs	r3, #125	; 0x7d
   1577c:	4353      	muls	r3, r2
	cp->timeout = conn->supervision_reload *
   1577e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15782:	fb93 f3f2 	sdiv	r3, r3, r2
   15786:	822b      	strh	r3, [r5, #16]
   15788:	f7ff bb3e 	b.w	14e08 <isr+0xda8>
		switch (rej_ext_ind->reject_opcode) {
   1578c:	2b03      	cmp	r3, #3
   1578e:	f47f ac89 	bne.w	150a4 <isr+0x1044>
			_radio.conn_curr->pause_rx = 0;
   15792:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
			_radio.conn_curr->pause_tx = 0;
   15796:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1579a:	f36f 03c3 	bfc	r3, #3, #1
   1579e:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
			_radio.conn_curr->procedure_expire = 0;
   157a2:	2300      	movs	r3, #0
   157a4:	86a3      	strh	r3, [r4, #52]	; 0x34
			pdu_rx->payload.llctrl.opcode =
   157a6:	230d      	movs	r3, #13
   157a8:	72eb      	strb	r3, [r5, #11]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   157aa:	7b6b      	ldrb	r3, [r5, #13]
   157ac:	732b      	strb	r3, [r5, #12]
   157ae:	f7ff bb2b 	b.w	14e08 <isr+0xda8>
		if (_radio.crc_expire == 0) {
   157b2:	f890 3115 	ldrb.w	r3, [r0, #277]	; 0x115
   157b6:	b913      	cbnz	r3, 157be <isr+0x175e>
			_radio.crc_expire = 2;
   157b8:	2302      	movs	r3, #2
   157ba:	f880 3115 	strb.w	r3, [r0, #277]	; 0x115
		_radio.crc_expire--;
   157be:	f899 4115 	ldrb.w	r4, [r9, #277]	; 0x115
		if (!_radio.conn_curr->supervision_expire) {
   157c2:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
		_radio.crc_expire--;
   157c6:	3c01      	subs	r4, #1
   157c8:	b2e4      	uxtb	r4, r4
   157ca:	f889 4115 	strb.w	r4, [r9, #277]	; 0x115
		if (!_radio.conn_curr->supervision_expire) {
   157ce:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
   157d0:	fab4 f484 	clz	r4, r4
   157d4:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   157d6:	b90a      	cbnz	r2, 157dc <isr+0x177c>
			_radio.conn_curr->supervision_expire =
   157d8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   157da:	8619      	strh	r1, [r3, #48]	; 0x30
	u8_t rx_enqueue = 0;
   157dc:	f04f 0a00 	mov.w	sl, #0
	struct radio_pdu_node_tx *tx_release = NULL;
   157e0:	4656      	mov	r6, sl
   157e2:	f7ff ba7e 	b.w	14ce2 <isr+0xc82>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   157e6:	2303      	movs	r3, #3
   157e8:	f7ff ba9f 	b.w	14d2a <isr+0xcca>
			radio_switch_complete_and_disable();
   157ec:	f001 fe78 	bl	174e0 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   157f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   157f2:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   157f6:	780b      	ldrb	r3, [r1, #0]
   157f8:	f890 20d0 	ldrb.w	r2, [r0, #208]	; 0xd0
   157fc:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   15800:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15804:	f362 0382 	bfi	r3, r2, #2, #1
   15808:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   1580a:	f7fc fd06 	bl	1221a <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   1580e:	f001 fe15 	bl	1743c <radio_is_ready>
   15812:	2800      	cmp	r0, #0
   15814:	f43f aa29 	beq.w	14c6a <isr+0xc0a>
   15818:	f7fe bc74 	b.w	14104 <isr+0xa4>
		radio_tmr_tifs_set(RADIO_TIFS);
   1581c:	2096      	movs	r0, #150	; 0x96
   1581e:	f001 fed9 	bl	175d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   15822:	2000      	movs	r0, #0
   15824:	f001 fe46 	bl	174b4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   15828:	f001 ffb0 	bl	1778c <radio_tmr_end_capture>
   1582c:	e7e0      	b.n	157f0 <isr+0x1790>
	switch (_radio.role) {
   1582e:	7bc2      	ldrb	r2, [r0, #15]
   15830:	2a04      	cmp	r2, #4
   15832:	f63e ac67 	bhi.w	14104 <isr+0xa4>
   15836:	e8df f012 	tbh	[pc, r2, lsl #1]
   1583a:	018c      	.short	0x018c
   1583c:	00570005 	.word	0x00570005
   15840:	00a100a1 	.word	0x00a100a1
	if ((_radio.state == STATE_CLOSE) &&
   15844:	2b03      	cmp	r3, #3
   15846:	d10a      	bne.n	1585e <isr+0x17fe>
	    (_radio.advertiser.chan_map_current != 0)) {
   15848:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   1584c:	f013 0f0e 	tst.w	r3, #14
   15850:	d005      	beq.n	1585e <isr+0x17fe>
		adv_setup();
   15852:	f7fc fe15 	bl	12480 <adv_setup>
		radio_tx_enable();
   15856:	f001 fdcd 	bl	173f4 <radio_tx_enable>
   1585a:	f7fe bc64 	b.w	14126 <isr+0xc6>
		radio_filter_disable();
   1585e:	f001 fe89 	bl	17574 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
   15862:	f899 3010 	ldrb.w	r3, [r9, #16]
   15866:	2b03      	cmp	r3, #3
   15868:	d168      	bne.n	1593c <isr+0x18dc>
		pdu_adv = (struct pdu_adv *)
   1586a:	f899 3074 	ldrb.w	r3, [r9, #116]	; 0x74
   1586e:	2227      	movs	r2, #39	; 0x27
   15870:	fb02 9303 	mla	r3, r2, r3, r9
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   15874:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		if ((_radio.state == STATE_CLOSE) &&
   15878:	f003 030f 	and.w	r3, r3, #15
   1587c:	2b01      	cmp	r3, #1
   1587e:	d05d      	beq.n	1593c <isr+0x18dc>
			rand_isr_get(sizeof(random_delay), &random_delay);
   15880:	a90f      	add	r1, sp, #60	; 0x3c
   15882:	2001      	movs	r0, #1
   15884:	f001 fbce 	bl	17024 <rand_isr_get>
			random_delay %= 10;
   15888:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
					      TICKER_US_TO_TICKS(random_delay *
   1588c:	48b8      	ldr	r0, [pc, #736]	; (15b70 <isr+0x1b10>)
			random_delay %= 10;
   1588e:	230a      	movs	r3, #10
   15890:	fbb1 f2f3 	udiv	r2, r1, r3
   15894:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
   15898:	3201      	adds	r2, #1
   1589a:	b2d2      	uxtb	r2, r2
   1589c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
					      TICKER_US_TO_TICKS(random_delay *
   158a0:	b2d2      	uxtb	r2, r2
   158a2:	fba2 0100 	umull	r0, r1, r2, r0
   158a6:	23e8      	movs	r3, #232	; 0xe8
   158a8:	fb03 1102 	mla	r1, r3, r2, r1
   158ac:	a3ae      	add	r3, pc, #696	; (adr r3, 15b68 <isr+0x1b08>)
   158ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   158b2:	f7ea fd0b 	bl	2cc <__aeabi_uldivmod>
			ticker_status =
   158b6:	f640 6379 	movw	r3, #3705	; 0xe79
   158ba:	2100      	movs	r1, #0
   158bc:	9306      	str	r3, [sp, #24]
   158be:	4bad      	ldr	r3, [pc, #692]	; (15b74 <isr+0x1b14>)
   158c0:	9305      	str	r3, [sp, #20]
   158c2:	9104      	str	r1, [sp, #16]
   158c4:	b283      	uxth	r3, r0
   158c6:	9103      	str	r1, [sp, #12]
   158c8:	9102      	str	r1, [sp, #8]
   158ca:	9101      	str	r1, [sp, #4]
   158cc:	9100      	str	r1, [sp, #0]
   158ce:	2205      	movs	r2, #5
   158d0:	4608      	mov	r0, r1
   158d2:	f7fb f8df 	bl	10a94 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158d6:	f030 0302 	bics.w	r3, r0, #2
   158da:	d02f      	beq.n	1593c <isr+0x18dc>
   158dc:	f899 300e 	ldrb.w	r3, [r9, #14]
   158e0:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158e2:	d02b      	beq.n	1593c <isr+0x18dc>
   158e4:	f7fe bc0e 	b.w	14104 <isr+0xa4>
	if (_radio.state == STATE_CLOSE) {
   158e8:	2b03      	cmp	r3, #3
   158ea:	d11a      	bne.n	15922 <isr+0x18c2>
		radio_tmr_tifs_set(RADIO_TIFS);
   158ec:	2096      	movs	r0, #150	; 0x96
   158ee:	f001 fe71 	bl	175d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   158f2:	2300      	movs	r3, #0
   158f4:	4619      	mov	r1, r3
   158f6:	461a      	mov	r2, r3
   158f8:	4618      	mov	r0, r3
   158fa:	f001 fde7 	bl	174cc <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   158fe:	f8d9 3130 	ldr.w	r3, [r9, #304]	; 0x130
   15902:	f899 2135 	ldrb.w	r2, [r9, #309]	; 0x135
   15906:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1590a:	3008      	adds	r0, #8
   1590c:	f001 fd52 	bl	173b4 <radio_pkt_rx_set>
		radio_rssi_measure();
   15910:	f001 fdf4 	bl	174fc <radio_rssi_measure>
		_radio.state = STATE_RX;
   15914:	2301      	movs	r3, #1
   15916:	f889 3010 	strb.w	r3, [r9, #16]
		radio_rx_enable();
   1591a:	f001 fd65 	bl	173e8 <radio_rx_enable>
   1591e:	f7fe bc02 	b.w	14126 <isr+0xc6>
		radio_filter_disable();
   15922:	f001 fe27 	bl	17574 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   15926:	f899 3010 	ldrb.w	r3, [r9, #16]
   1592a:	2b05      	cmp	r3, #5
   1592c:	d106      	bne.n	1593c <isr+0x18dc>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1592e:	2300      	movs	r3, #0
   15930:	9300      	str	r3, [sp, #0]
   15932:	2204      	movs	r2, #4
   15934:	4619      	mov	r1, r3
   15936:	4618      	mov	r0, r3
   15938:	f7fb f8f2 	bl	10b20 <ticker_stop>
	_radio.role = ROLE_NONE;
   1593c:	2400      	movs	r4, #0
   1593e:	f889 400f 	strb.w	r4, [r9, #15]
	_radio.state = STATE_NONE;
   15942:	f889 4010 	strb.w	r4, [r9, #16]
	_radio.ticker_id_event = 0;
   15946:	f889 400d 	strb.w	r4, [r9, #13]
	radio_tmr_stop();
   1594a:	f001 fec1 	bl	176d0 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1594e:	4622      	mov	r2, r4
   15950:	4621      	mov	r1, r4
   15952:	4620      	mov	r0, r4
   15954:	4b88      	ldr	r3, [pc, #544]	; (15b78 <isr+0x1b18>)
   15956:	f7fa fa1b 	bl	fd90 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1595a:	4604      	mov	r4, r0
   1595c:	2800      	cmp	r0, #0
   1595e:	f47e abd1 	bne.w	14104 <isr+0xa4>
	clock_control_off(_radio.hf_clock, NULL);
   15962:	f8d9 0000 	ldr.w	r0, [r9]
   15966:	6843      	ldr	r3, [r0, #4]
   15968:	4621      	mov	r1, r4
   1596a:	685b      	ldr	r3, [r3, #4]
   1596c:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1596e:	2201      	movs	r2, #1
   15970:	4611      	mov	r1, r2
   15972:	4620      	mov	r0, r4
   15974:	f7fa f9e4 	bl	fd40 <mayfly_enable>
   15978:	f7fe bbf9 	b.w	1416e <isr+0x10e>
	if (_radio.conn_curr == 0) {
   1597c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
   15980:	2800      	cmp	r0, #0
   15982:	d0db      	beq.n	1593c <isr+0x18dc>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   15984:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   15988:	b189      	cbz	r1, 159ae <isr+0x194e>
   1598a:	f899 300f 	ldrb.w	r3, [r9, #15]
   1598e:	2b03      	cmp	r3, #3
   15990:	d003      	beq.n	1599a <isr+0x193a>
   15992:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   15996:	07dc      	lsls	r4, r3, #31
   15998:	d509      	bpl.n	159ae <isr+0x194e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1599a:	f7fc fcbb 	bl	12314 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1599e:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   159a2:	f7fc fe35 	bl	12610 <connection_release>
			_radio.conn_curr = NULL;
   159a6:	2300      	movs	r3, #0
   159a8:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   159ac:	e7c6      	b.n	1593c <isr+0x18dc>
	latency_event = _radio.conn_curr->latency_event;
   159ae:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   159b0:	f899 7114 	ldrb.w	r7, [r9, #276]	; 0x114
	elapsed_event = latency_event + 1;
   159b4:	1c75      	adds	r5, r6, #1
   159b6:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
   159b8:	2f00      	cmp	r7, #0
   159ba:	d06b      	beq.n	15a94 <isr+0x1a34>
		if (_radio.role == ROLE_SLAVE) {
   159bc:	f899 300f 	ldrb.w	r3, [r9, #15]
   159c0:	2b03      	cmp	r3, #3
   159c2:	d15b      	bne.n	15a7c <isr+0x1a1c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   159c4:	f001 fed6 	bl	17774 <radio_tmr_aa_restore>
   159c8:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
   159ca:	f001 fed9 	bl	17780 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   159ce:	f8d9 7110 	ldr.w	r7, [r9, #272]	; 0x110
   159d2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 15b80 <isr+0x1b20>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   159d6:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
   159da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   159dc:	f100 0b58 	add.w	fp, r0, #88	; 0x58
			if (start_to_address_actual_us <=
   159e0:	45d8      	cmp	r8, fp
					TICKER_US_TO_TICKS(window_widening_event_us);
   159e2:	a361      	add	r3, pc, #388	; (adr r3, 15b68 <isr+0x1b08>)
   159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   159e8:	d83b      	bhi.n	15a62 <isr+0x1a02>
					TICKER_US_TO_TICKS(window_widening_event_us);
   159ea:	fba0 010a 	umull	r0, r1, r0, sl
   159ee:	f7ea fc6d 	bl	2cc <__aeabi_uldivmod>
				ticks_drift_plus =
   159f2:	b284      	uxth	r4, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   159f4:	ebab 0008 	sub.w	r0, fp, r8
   159f8:	a35b      	add	r3, pc, #364	; (adr r3, 15b68 <isr+0x1b08>)
   159fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   159fe:	fba0 010a 	umull	r0, r1, r0, sl
   15a02:	f7ea fc63 	bl	2cc <__aeabi_uldivmod>
				ticks_drift_minus =
   15a06:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   15a08:	2200      	movs	r2, #0
   15a0a:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
   15a0c:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
   15a0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   15a12:	b36a      	cbz	r2, 15a70 <isr+0x1a10>
				if (pdu_data_tx->len ||
   15a14:	7952      	ldrb	r2, [r2, #5]
   15a16:	b912      	cbnz	r2, 15a1e <isr+0x19be>
   15a18:	f897 2129 	ldrb.w	r2, [r7, #297]	; 0x129
   15a1c:	b10a      	cbz	r2, 15a22 <isr+0x19c2>
					_radio.conn_curr->latency_event = 0;
   15a1e:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
   15a20:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   15a22:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15a26:	2100      	movs	r1, #0
   15a28:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
   15a2a:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15a2e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   15a30:	b1aa      	cbz	r2, 15a5e <isr+0x19fe>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   15a32:	4295      	cmp	r5, r2
   15a34:	f080 8085 	bcs.w	15b42 <isr+0x1ae2>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   15a38:	1b52      	subs	r2, r2, r5
   15a3a:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
   15a3c:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   15a3e:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   15a40:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
   15a42:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   15a44:	d97f      	bls.n	15b46 <isr+0x1ae6>
			else if (_radio.role == ROLE_SLAVE) {
   15a46:	f899 200f 	ldrb.w	r2, [r9, #15]
   15a4a:	2a03      	cmp	r2, #3
   15a4c:	d107      	bne.n	15a5e <isr+0x19fe>
				if (latency_event != 0) {
   15a4e:	2e00      	cmp	r6, #0
   15a50:	d179      	bne.n	15b46 <isr+0x1ae6>
					force = _radio.conn_curr->slave.force & 0x01;
   15a52:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
   15a54:	087a      	lsrs	r2, r7, #1
					if (force) {
   15a56:	f017 0701 	ands.w	r7, r7, #1
   15a5a:	d135      	bne.n	15ac8 <isr+0x1a68>
					_radio.conn_curr->slave.force >>= 1;
   15a5c:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
   15a5e:	2700      	movs	r7, #0
   15a60:	e035      	b.n	15ace <isr+0x1a6e>
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   15a62:	fba8 010a 	umull	r0, r1, r8, sl
   15a66:	f7ea fc31 	bl	2cc <__aeabi_uldivmod>
				ticks_drift_minus =
   15a6a:	2302      	movs	r3, #2
				ticks_drift_plus =
   15a6c:	b284      	uxth	r4, r0
   15a6e:	e7cb      	b.n	15a08 <isr+0x19a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   15a70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
   15a74:	07d2      	lsls	r2, r2, #31
   15a76:	d5d4      	bpl.n	15a22 <isr+0x19c2>
				_radio.conn_curr->latency_event =
   15a78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   15a7a:	e7d1      	b.n	15a20 <isr+0x19c0>
		} else if (reason_peer) {
   15a7c:	b141      	cbz	r1, 15a90 <isr+0x1a30>
			_radio.conn_curr->master.terminate_ack = 1;
   15a7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   15a82:	f043 0301 	orr.w	r3, r3, #1
   15a86:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
   15a8a:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
   15a8c:	461c      	mov	r4, r3
   15a8e:	e7c8      	b.n	15a22 <isr+0x19c2>
	ticks_drift_minus = 0;
   15a90:	460b      	mov	r3, r1
   15a92:	e7fb      	b.n	15a8c <isr+0x1a2c>
	else if (_radio.conn_curr->connect_expire) {
   15a94:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   15a96:	b184      	cbz	r4, 15aba <isr+0x1a5a>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   15a98:	42a5      	cmp	r5, r4
   15a9a:	d204      	bcs.n	15aa6 <isr+0x1a46>
			_radio.conn_curr->connect_expire -= elapsed_event;
   15a9c:	1b64      	subs	r4, r4, r5
   15a9e:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
   15aa0:	463c      	mov	r4, r7
   15aa2:	4623      	mov	r3, r4
   15aa4:	e7c1      	b.n	15a2a <isr+0x19ca>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   15aa6:	213e      	movs	r1, #62	; 0x3e
   15aa8:	f7fc fc34 	bl	12314 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   15aac:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15ab0:	f7fc fdae 	bl	12610 <connection_release>
			_radio.conn_curr = NULL;
   15ab4:	f8c9 7110 	str.w	r7, [r9, #272]	; 0x110
   15ab8:	e740      	b.n	1593c <isr+0x18dc>
		if (!_radio.conn_curr->supervision_expire) {
   15aba:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   15abc:	2b00      	cmp	r3, #0
   15abe:	d1f0      	bne.n	15aa2 <isr+0x1a42>
			_radio.conn_curr->supervision_expire =
   15ac0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   15ac2:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
   15ac4:	461c      	mov	r4, r3
   15ac6:	e7b0      	b.n	15a2a <isr+0x19ca>
						_radio.conn_curr->slave.force |=
   15ac8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   15acc:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
   15ace:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   15ad0:	b11a      	cbz	r2, 15ada <isr+0x1a7a>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   15ad2:	4295      	cmp	r5, r2
   15ad4:	d239      	bcs.n	15b4a <isr+0x1aea>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   15ad6:	1b55      	subs	r5, r2, r5
   15ad8:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   15ada:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
   15ade:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   15ae2:	4291      	cmp	r1, r2
   15ae4:	d006      	beq.n	15af4 <isr+0x1a94>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   15ae6:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   15aea:	3a01      	subs	r2, #1
   15aec:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
   15aee:	bf9c      	itt	ls
   15af0:	2200      	movls	r2, #0
   15af2:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   15af4:	b917      	cbnz	r7, 15afc <isr+0x1a9c>
   15af6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   15af8:	42b2      	cmp	r2, r6
   15afa:	d028      	beq.n	15b4e <isr+0x1aee>
		lazy = _radio.conn_curr->latency_event + 1;
   15afc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   15afe:	3101      	adds	r1, #1
   15b00:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   15b02:	b924      	cbnz	r4, 15b0e <isr+0x1aae>
   15b04:	b91b      	cbnz	r3, 15b0e <isr+0x1aae>
   15b06:	b911      	cbnz	r1, 15b0e <isr+0x1aae>
	    (lazy != 0) || (force != 0)) {
   15b08:	2f00      	cmp	r7, #0
   15b0a:	f43f af17 	beq.w	1593c <isr+0x18dc>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   15b0e:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
   15b12:	4a1a      	ldr	r2, [pc, #104]	; (15b7c <isr+0x1b1c>)
   15b14:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   15b16:	3507      	adds	r5, #7
		ticker_status =
   15b18:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   15b1a:	b2ed      	uxtb	r5, r5
		ticker_status =
   15b1c:	9205      	str	r2, [sp, #20]
   15b1e:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
   15b20:	9506      	str	r5, [sp, #24]
		ticker_status =
   15b22:	4623      	mov	r3, r4
   15b24:	9704      	str	r7, [sp, #16]
   15b26:	9102      	str	r1, [sp, #8]
   15b28:	9101      	str	r1, [sp, #4]
   15b2a:	462a      	mov	r2, r5
   15b2c:	4608      	mov	r0, r1
   15b2e:	f7fa ffb1 	bl	10a94 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15b32:	f030 0302 	bics.w	r3, r0, #2
   15b36:	f43f af01 	beq.w	1593c <isr+0x18dc>
   15b3a:	f899 300e 	ldrb.w	r3, [r9, #14]
   15b3e:	429d      	cmp	r5, r3
   15b40:	e6cf      	b.n	158e2 <isr+0x1882>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   15b42:	2108      	movs	r1, #8
   15b44:	e729      	b.n	1599a <isr+0x193a>
				force = 1;
   15b46:	2701      	movs	r7, #1
   15b48:	e7c1      	b.n	15ace <isr+0x1a6e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   15b4a:	2122      	movs	r1, #34	; 0x22
   15b4c:	e725      	b.n	1599a <isr+0x193a>
	lazy = 0;
   15b4e:	4639      	mov	r1, r7
   15b50:	e7d7      	b.n	15b02 <isr+0x1aa2>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   15b52:	3b04      	subs	r3, #4
   15b54:	2b01      	cmp	r3, #1
   15b56:	f63e aad5 	bhi.w	14104 <isr+0xa4>
		_radio.state = STATE_NONE;
   15b5a:	2300      	movs	r3, #0
   15b5c:	7403      	strb	r3, [r0, #16]
   15b5e:	f7fe bb06 	b.w	1416e <isr+0x10e>
   15b62:	bf00      	nop
   15b64:	f3af 8000 	nop.w
   15b68:	1afd498d 	.word	0x1afd498d
   15b6c:	00000007 	.word	0x00000007
   15b70:	d4a51000 	.word	0xd4a51000
   15b74:	00012819 	.word	0x00012819
   15b78:	20006a08 	.word	0x20006a08
   15b7c:	00012801 	.word	0x00012801
   15b80:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   15b84:	2328      	movs	r3, #40	; 0x28
   15b86:	f7ff ba59 	b.w	1503c <isr+0xfdc>
   15b8a:	bf00      	nop

00015b8c <radio_init>:
{
   15b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   15b90:	4d3b      	ldr	r5, [pc, #236]	; (15c80 <radio_init+0xf4>)
{
   15b92:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15b94:	f89d c018 	ldrb.w	ip, [sp, #24]
   15b98:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   15b9c:	f8bd 801c 	ldrh.w	r8, [sp, #28]
	_radio.hf_clock = hf_clock;
   15ba0:	6028      	str	r0, [r5, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   15ba2:	f44f 7096 	mov.w	r0, #300	; 0x12c
   15ba6:	fb00 4002 	mla	r0, r0, r2, r4
	mem_radio_end = mem_radio + mem_size;
   15baa:	19a7      	adds	r7, r4, r6
	_radio.conn_pool = mem_radio;
   15bac:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
	tx_count_max += 1;
   15bb0:	f10c 0401 	add.w	r4, ip, #1
   15bb4:	fa5f fe84 	uxtb.w	lr, r4
	_radio.sca = sca;
   15bb8:	f885 111c 	strb.w	r1, [r5, #284]	; 0x11c
	    (offsetof(struct pdu_data, payload) +
   15bbc:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   15bc0:	1cd9      	adds	r1, r3, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   15bc2:	2c2a      	cmp	r4, #42	; 0x2a
	rx_count_max += 3;
   15bc4:	b2c9      	uxtb	r1, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15bc6:	bf98      	it	ls
   15bc8:	eb01 0441 	addls.w	r4, r1, r1, lsl #1
	_radio.packet_data_octets_max = packet_data_octets_max;
   15bcc:	f8a5 8128 	strh.w	r8, [r5, #296]	; 0x128
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   15bd0:	bf88      	it	hi
   15bd2:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   15bd6:	f885 1148 	strb.w	r1, [r5, #328]	; 0x148
		_radio.packet_rx_data_pool_size =
   15bda:	bf8c      	ite	hi
   15bdc:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15be0:	eb01 0184 	addls.w	r1, r1, r4, lsl #2
	_radio.packet_rx_count = (rx_count_max + 1);
   15be4:	f103 0304 	add.w	r3, r3, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   15be8:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   15bec:	b2db      	uxtb	r3, r3
		_radio.packet_rx_data_pool_size =
   15bee:	bf8c      	ite	hi
   15bf0:	fb18 f101 	smulbbhi	r1, r8, r1
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15bf4:	0089      	lslls	r1, r1, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   15bf6:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   15bfa:	f8a5 112a 	strh.w	r1, [r5, #298]	; 0x12a
	_radio.packet_tx_count = (tx_count_max + 1);
   15bfe:	f885 c168 	strb.w	ip, [r5, #360]	; 0x168
	_radio.packet_rx = (void *)mem_radio;
   15c02:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15c06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   15c0a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15c0e:	f8b5 412a 	ldrh.w	r4, [r5, #298]	; 0x12a
	_radio.pkt_tx = (void *)mem_radio;
   15c12:	f8c5 0160 	str.w	r0, [r5, #352]	; 0x160
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15c16:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15c18:	2134      	movs	r1, #52	; 0x34
	_radio.pkt_release = (void *)mem_radio;
   15c1a:	f8c5 0164 	str.w	r0, [r5, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15c1e:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15c20:	f8a5 112c 	strh.w	r1, [r5, #300]	; 0x12c
	_radio.pkt_rx_data_pool = mem_radio;
   15c24:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15c28:	fbb4 f1f1 	udiv	r1, r4, r1
	mem_radio += _radio.packet_rx_data_pool_size;
   15c2c:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   15c2e:	189c      	adds	r4, r3, r2
	_radio.link_rx_pool = mem_radio;
   15c30:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   15c34:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   15c38:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	_radio.pkt_tx_ctrl_pool = mem_radio;
   15c3c:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   15c40:	340a      	adds	r4, #10
   15c42:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   15c46:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   15c48:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   15c4a:	f8a5 415c 	strh.w	r4, [r5, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   15c4e:	fb0e 0404 	mla	r4, lr, r4, r0
	if (retcode) {
   15c52:	1be4      	subs	r4, r4, r7
	_radio.connection_count = connection_count_max;
   15c54:	f885 210c 	strb.w	r2, [r5, #268]	; 0x10c
	_radio.packet_rx_count = (rx_count_max + 1);
   15c58:	f885 3134 	strb.w	r3, [r5, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15c5c:	f885 112e 	strb.w	r1, [r5, #302]	; 0x12e
	_radio.pkt_tx_data_pool = mem_radio;
   15c60:	f8c5 0154 	str.w	r0, [r5, #340]	; 0x154
	if (retcode) {
   15c64:	d003      	beq.n	15c6e <radio_init+0xe2>
		return (retcode + mem_size);
   15c66:	4434      	add	r4, r6
}
   15c68:	4620      	mov	r0, r4
   15c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   15c6e:	2301      	movs	r3, #1
   15c70:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
	common_init();
   15c74:	f7fd f824 	bl	12cc0 <common_init>
	radio_setup();
   15c78:	f001 faf8 	bl	1726c <radio_setup>
	return retcode;
   15c7c:	e7f4      	b.n	15c68 <radio_init+0xdc>
   15c7e:	bf00      	nop
   15c80:	20000f64 	.word	0x20000f64

00015c84 <ll_reset>:
{
   15c84:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   15c86:	2103      	movs	r1, #3
   15c88:	2005      	movs	r0, #5
   15c8a:	f7fc f945 	bl	11f18 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   15c8e:	2104      	movs	r1, #4
   15c90:	2006      	movs	r0, #6
   15c92:	f7fc f941 	bl	11f18 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   15c96:	4c22      	ldr	r4, [pc, #136]	; (15d20 <ll_reset+0x9c>)
   15c98:	2500      	movs	r5, #0
   15c9a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   15c9e:	b2ab      	uxth	r3, r5
   15ca0:	429a      	cmp	r2, r3
   15ca2:	f105 0501 	add.w	r5, r5, #1
   15ca6:	d834      	bhi.n	15d12 <ll_reset+0x8e>
	_radio.advertiser.is_enabled = 0;
   15ca8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   15cac:	f36f 0300 	bfc	r3, #0, #1
   15cb0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	_radio.scanner.is_enabled = 0;
   15cb4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	_radio.advertiser.conn = NULL;
   15cb8:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   15cba:	f360 0300 	bfi	r3, r0, #0, #1
   15cbe:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15cc2:	2234      	movs	r2, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15cc4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
   15cc8:	fbb3 f3f2 	udiv	r3, r3, r2
   15ccc:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15cd0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_last = 0;
   15cd4:	f884 0135 	strb.w	r0, [r4, #309]	; 0x135
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15cd8:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   15cda:	f884 0169 	strb.w	r0, [r4, #361]	; 0x169
	_radio.packet_release_last = 0;
   15cde:	f884 016c 	strb.w	r0, [r4, #364]	; 0x16c
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15ce2:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
	_radio.fc_ack = _radio.fc_req;
   15ce6:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
	_radio.advertiser.conn = NULL;
   15cea:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	_radio.scanner.conn = NULL;
   15cee:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15cf2:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
	_radio.packet_rx_acquire = 0;
   15cf6:	f884 0136 	strb.w	r0, [r4, #310]	; 0x136
	_radio.packet_tx_last = 0;
   15cfa:	f884 016a 	strb.w	r0, [r4, #362]	; 0x16a
	_radio.packet_release_first = 0;
   15cfe:	f884 016b 	strb.w	r0, [r4, #363]	; 0x16b
	_radio.fc_ack = _radio.fc_req;
   15d02:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
	ll_filter_reset(false);
   15d06:	f001 f86f 	bl	16de8 <ll_filter_reset>
}
   15d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   15d0e:	f7fc bfd7 	b.w	12cc0 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   15d12:	1da8      	adds	r0, r5, #6
   15d14:	21ff      	movs	r1, #255	; 0xff
   15d16:	b2c0      	uxtb	r0, r0
   15d18:	f7fc f8fe 	bl	11f18 <role_disable>
   15d1c:	e7bd      	b.n	15c9a <ll_reset+0x16>
   15d1e:	bf00      	nop
   15d20:	20000f64 	.word	0x20000f64

00015d24 <ll_radio_state_abort>:
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   15d24:	2005      	movs	r0, #5
   15d26:	f7fc be69 	b.w	129fc <event_stop.constprop.46>
	...

00015d2c <radio_adv_data_get>:
}
   15d2c:	4800      	ldr	r0, [pc, #0]	; (15d30 <radio_adv_data_get+0x4>)
   15d2e:	4770      	bx	lr
   15d30:	20000f8a 	.word	0x20000f8a

00015d34 <radio_scan_data_get>:
}
   15d34:	4800      	ldr	r0, [pc, #0]	; (15d38 <radio_scan_data_get+0x4>)
   15d36:	4770      	bx	lr
   15d38:	20000fda 	.word	0x20000fda

00015d3c <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   15d3c:	4b02      	ldr	r3, [pc, #8]	; (15d48 <radio_adv_is_enabled+0xc>)
   15d3e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   15d42:	f000 0001 	and.w	r0, r0, #1
   15d46:	4770      	bx	lr
   15d48:	20000f64 	.word	0x20000f64

00015d4c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   15d4c:	4b05      	ldr	r3, [pc, #20]	; (15d64 <radio_adv_filter_pol_get+0x18>)
   15d4e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
   15d52:	f010 0001 	ands.w	r0, r0, #1
		return _radio.advertiser.filter_policy;
   15d56:	bf1c      	itt	ne
   15d58:	f893 0025 	ldrbne.w	r0, [r3, #37]	; 0x25
   15d5c:	f3c0 00c1 	ubfxne	r0, r0, #3, #2
}
   15d60:	4770      	bx	lr
   15d62:	bf00      	nop
   15d64:	20000f64 	.word	0x20000f64

00015d68 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   15d68:	4b02      	ldr	r3, [pc, #8]	; (15d74 <radio_scan_is_enabled+0xc>)
   15d6a:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   15d6e:	f000 0001 	and.w	r0, r0, #1
   15d72:	4770      	bx	lr
   15d74:	20000f64 	.word	0x20000f64

00015d78 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   15d78:	4b05      	ldr	r3, [pc, #20]	; (15d90 <radio_scan_filter_pol_get+0x18>)
   15d7a:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
   15d7e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   15d82:	bf1c      	itt	ne
   15d84:	f893 00dd 	ldrbne.w	r0, [r3, #221]	; 0xdd
   15d88:	f3c0 0041 	ubfxne	r0, r0, #1, #2
}
   15d8c:	4770      	bx	lr
   15d8e:	bf00      	nop
   15d90:	20000f64 	.word	0x20000f64

00015d94 <ll_conn_update>:
{
   15d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d98:	460c      	mov	r4, r1
   15d9a:	4690      	mov	r8, r2
   15d9c:	461d      	mov	r5, r3
   15d9e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   15da2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   15da6:	f7fc f8a1 	bl	11eec <connection_get>
	if (!conn) {
   15daa:	b168      	cbz	r0, 15dc8 <ll_conn_update+0x34>
	if (!cmd) {
   15dac:	2c00      	cmp	r4, #0
   15dae:	d143      	bne.n	15e38 <ll_conn_update+0xa4>
		if (conn->common.fex_valid &&
   15db0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   15db4:	069a      	lsls	r2, r3, #26
   15db6:	d503      	bpl.n	15dc0 <ll_conn_update+0x2c>
		    (conn->llcp_features &
   15db8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		if (conn->common.fex_valid &&
   15dbc:	079b      	lsls	r3, r3, #30
   15dbe:	d43a      	bmi.n	15e36 <ll_conn_update+0xa2>
		} else if (conn->role) {
   15dc0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	da14      	bge.n	15df2 <ll_conn_update+0x5e>
		return 1;
   15dc8:	2001      	movs	r0, #1
   15dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   15dce:	42a3      	cmp	r3, r4
   15dd0:	d0fa      	beq.n	15dc8 <ll_conn_update+0x34>
			    (conn->llcp_conn_param.state !=
   15dd2:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
			     conn->llcp_conn_param.ack) ||
   15dd6:	f003 0207 	and.w	r2, r3, #7
   15dda:	2a03      	cmp	r2, #3
   15ddc:	d1f4      	bne.n	15dc8 <ll_conn_update+0x34>
			conn->llcp_conn_param.state = cmd;
   15dde:	f361 0302 	bfi	r3, r1, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15de2:	b2db      	uxtb	r3, r3
   15de4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   15de8:	f880 80ab 	strb.w	r8, [r0, #171]	; 0xab
			conn->llcp_conn_param.cmd = 1;
   15dec:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
   15df0:	e01e      	b.n	15e30 <ll_conn_update+0x9c>
		if (conn->llcp_req != conn->llcp_ack) {
   15df2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   15df6:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   15dfa:	429a      	cmp	r2, r3
   15dfc:	f04f 0101 	mov.w	r1, #1
   15e00:	d1e2      	bne.n	15dc8 <ll_conn_update+0x34>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15e02:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
   15e06:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
   15e0a:	2400      	movs	r4, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15e0c:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   15e10:	f364 0382 	bfi	r3, r4, #2, #1
		conn->llcp_req++;
   15e14:	3201      	adds	r2, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   15e16:	66c4      	str	r4, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.interval = interval;
   15e18:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
		conn->llcp.conn_upd.latency = latency;
   15e1c:	f8a0 6064 	strh.w	r6, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = timeout;
   15e20:	f8a0 7066 	strh.w	r7, [r0, #102]	; 0x66
		conn->llcp.conn_upd.is_internal = 0;
   15e24:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
   15e28:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
		conn->llcp_req++;
   15e2c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
	return 0;
   15e30:	2000      	movs	r0, #0
   15e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   15e36:	2401      	movs	r4, #1
		cmd--;
   15e38:	1e61      	subs	r1, r4, #1
		if (cmd) {
   15e3a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   15e3e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
   15e42:	f890 40a9 	ldrb.w	r4, [r0, #169]	; 0xa9
   15e46:	d1c2      	bne.n	15dce <ll_conn_update+0x3a>
			if (conn->llcp_conn_param.req !=
   15e48:	429c      	cmp	r4, r3
   15e4a:	d1bd      	bne.n	15dc8 <ll_conn_update+0x34>
			conn->llcp_conn_param.state = cmd;
   15e4c:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.status = 0;
   15e50:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
			conn->llcp_conn_param.state = cmd;
   15e54:	f361 0302 	bfi	r3, r1, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15e58:	b2db      	uxtb	r3, r3
   15e5a:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   15e5e:	3401      	adds	r4, #1
			conn->llcp_conn_param.interval = interval;
   15e60:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
			conn->llcp_conn_param.latency = latency;
   15e64:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
			conn->llcp_conn_param.timeout = timeout;
   15e68:	f8a0 70b0 	strh.w	r7, [r0, #176]	; 0xb0
			conn->llcp_conn_param.cmd = 1;
   15e6c:	f880 30aa 	strb.w	r3, [r0, #170]	; 0xaa
			conn->llcp_conn_param.req++;
   15e70:	f880 40a8 	strb.w	r4, [r0, #168]	; 0xa8
   15e74:	e7dc      	b.n	15e30 <ll_conn_update+0x9c>

00015e76 <ll_chm_get>:
{
   15e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e78:	460d      	mov	r5, r1
	conn = connection_get(handle);
   15e7a:	f7fc f837 	bl	11eec <connection_get>
	if (!conn) {
   15e7e:	4604      	mov	r4, r0
   15e80:	b160      	cbz	r0, 15e9c <ll_chm_get+0x26>
		conn->chm_update = 0;
   15e82:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15e84:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   15e88:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15e8a:	2205      	movs	r2, #5
   15e8c:	4631      	mov	r1, r6
   15e8e:	4628      	mov	r0, r5
   15e90:	f7ea fbe2 	bl	658 <memcpy>
	} while (conn->chm_update);
   15e94:	7f20      	ldrb	r0, [r4, #28]
   15e96:	2800      	cmp	r0, #0
   15e98:	d1f6      	bne.n	15e88 <ll_chm_get+0x12>
   15e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   15e9c:	2001      	movs	r0, #1
}
   15e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015ea0 <ll_start_enc_req_send>:
{
   15ea0:	b570      	push	{r4, r5, r6, lr}
   15ea2:	460d      	mov	r5, r1
   15ea4:	4616      	mov	r6, r2
	conn = connection_get(handle);
   15ea6:	f7fc f821 	bl	11eec <connection_get>
	if (!conn) {
   15eaa:	4604      	mov	r4, r0
   15eac:	b908      	cbnz	r0, 15eb2 <ll_start_enc_req_send+0x12>
		return 1;
   15eae:	2001      	movs	r0, #1
   15eb0:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   15eb2:	b315      	cbz	r5, 15efa <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   15eb4:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
   15eb8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   15ebc:	d110      	bne.n	15ee0 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   15ebe:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   15ec2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   15ec6:	4293      	cmp	r3, r2
   15ec8:	d1f1      	bne.n	15eae <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
   15eca:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
   15ecc:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
   15ece:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			conn->llcp.encryption.initiate = 0;
   15ed2:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
			conn->llcp_req++;
   15ed6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			conn->llcp_type = LLCP_ENCRYPTION;
   15eda:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
   15ede:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   15ee0:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
   15ee4:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
   15ee8:	4293      	cmp	r3, r2
   15eea:	d1e0      	bne.n	15eae <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   15eec:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   15eee:	f884 509a 	strb.w	r5, [r4, #154]	; 0x9a
			conn->llcp_terminate.req++;
   15ef2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
	return 0;
   15ef6:	2000      	movs	r0, #0
   15ef8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   15efa:	2210      	movs	r2, #16
   15efc:	4631      	mov	r1, r6
   15efe:	306c      	adds	r0, #108	; 0x6c
   15f00:	f7ea fbaa 	bl	658 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   15f04:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   15f08:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   15f0c:	4293      	cmp	r3, r2
   15f0e:	d1ce      	bne.n	15eae <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   15f10:	2203      	movs	r2, #3
		conn->llcp_req++;
   15f12:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
   15f14:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
		conn->llcp.encryption.initiate = 0;
   15f18:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		conn->llcp_type = LLCP_ENCRYPTION;
   15f1c:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
		conn->llcp_req++;
   15f20:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
   15f24:	e7e7      	b.n	15ef6 <ll_start_enc_req_send+0x56>

00015f26 <ll_feature_req_send>:
{
   15f26:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15f28:	f7fb ffe0 	bl	11eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15f2c:	b168      	cbz	r0, 15f4a <ll_feature_req_send+0x24>
   15f2e:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   15f32:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   15f36:	4293      	cmp	r3, r2
   15f38:	d107      	bne.n	15f4a <ll_feature_req_send+0x24>
	conn->llcp_req++;
   15f3a:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15f3c:	2204      	movs	r2, #4
	conn->llcp_req++;
   15f3e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15f42:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	return 0;
   15f46:	2000      	movs	r0, #0
   15f48:	bd08      	pop	{r3, pc}
		return 1;
   15f4a:	2001      	movs	r0, #1
}
   15f4c:	bd08      	pop	{r3, pc}

00015f4e <ll_version_ind_send>:
{
   15f4e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15f50:	f7fb ffcc 	bl	11eec <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15f54:	b168      	cbz	r0, 15f72 <ll_version_ind_send+0x24>
   15f56:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
   15f5a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   15f5e:	4293      	cmp	r3, r2
   15f60:	d107      	bne.n	15f72 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   15f62:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15f64:	2205      	movs	r2, #5
	conn->llcp_req++;
   15f66:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15f6a:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
	return 0;
   15f6e:	2000      	movs	r0, #0
   15f70:	bd08      	pop	{r3, pc}
		return 1;
   15f72:	2001      	movs	r0, #1
}
   15f74:	bd08      	pop	{r3, pc}

00015f76 <ll_terminate_ind_send>:
{
   15f76:	b510      	push	{r4, lr}
   15f78:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15f7a:	f7fb ffb7 	bl	11eec <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   15f7e:	b160      	cbz	r0, 15f9a <ll_terminate_ind_send+0x24>
   15f80:	f890 2099 	ldrb.w	r2, [r0, #153]	; 0x99
   15f84:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
   15f88:	4293      	cmp	r3, r2
   15f8a:	d106      	bne.n	15f9a <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   15f8c:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   15f8e:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
	conn->llcp_terminate.req++;
   15f92:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
	return 0;
   15f96:	2000      	movs	r0, #0
   15f98:	bd10      	pop	{r4, pc}
		return 1;
   15f9a:	2001      	movs	r0, #1
}
   15f9c:	bd10      	pop	{r4, pc}

00015f9e <ll_tx_pwr_lvl_get>:
{
   15f9e:	b510      	push	{r4, lr}
   15fa0:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15fa2:	f7fb ffa3 	bl	11eec <connection_get>
	if (!conn) {
   15fa6:	b110      	cbz	r0, 15fae <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   15fa8:	2000      	movs	r0, #0
   15faa:	7020      	strb	r0, [r4, #0]
	return 0;
   15fac:	bd10      	pop	{r4, pc}
		return 1;
   15fae:	2001      	movs	r0, #1
}
   15fb0:	bd10      	pop	{r4, pc}
	...

00015fb4 <ll_rx_get>:
{
   15fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fb8:	4605      	mov	r5, r0
   15fba:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   15fbc:	4918      	ldr	r1, [pc, #96]	; (16020 <ll_rx_get+0x6c>)
   15fbe:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   15fc2:	f8d1 2144 	ldr.w	r2, [r1, #324]	; 0x144
   15fc6:	4293      	cmp	r3, r2
   15fc8:	460f      	mov	r7, r1
   15fca:	d01f      	beq.n	1600c <ll_rx_get+0x58>
		_radio_pdu_node_rx = _radio.link_rx_head->mem;
   15fcc:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle,
   15fd0:	f201 116b 	addw	r1, r1, #363	; 0x16b
   15fd4:	f898 2000 	ldrb.w	r2, [r8]
   15fd8:	f7fb ff3e 	bl	11e58 <tx_cmplt_get>
		if (!cmplt) {
   15fdc:	4604      	mov	r4, r0
   15fde:	b9e0      	cbnz	r0, 1601a <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   15fe0:	ae02      	add	r6, sp, #8
   15fe2:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
   15fe6:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   15fea:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
   15fee:	4631      	mov	r1, r6
   15ff0:	f10d 0006 	add.w	r0, sp, #6
   15ff4:	f7fb ff30 	bl	11e58 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   15ff8:	b934      	cbnz	r4, 16008 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   15ffa:	b928      	cbnz	r0, 16008 <ll_rx_get+0x54>
			*node_rx = _radio_pdu_node_rx;
   15ffc:	f8c5 8000 	str.w	r8, [r5]
}
   16000:	4620      	mov	r0, r4
   16002:	b002      	add	sp, #8
   16004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   16008:	4604      	mov	r4, r0
   1600a:	e7ee      	b.n	15fea <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1600c:	f891 216c 	ldrb.w	r2, [r1, #364]	; 0x16c
   16010:	f201 116b 	addw	r1, r1, #363	; 0x16b
   16014:	f7fb ff20 	bl	11e58 <tx_cmplt_get>
   16018:	4604      	mov	r4, r0
		*node_rx = NULL;
   1601a:	2300      	movs	r3, #0
   1601c:	602b      	str	r3, [r5, #0]
   1601e:	e7ef      	b.n	16000 <ll_rx_get+0x4c>
   16020:	20000f64 	.word	0x20000f64

00016024 <ll_rx_mem_release>:
{
   16024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_radio_pdu_node_rx_free,
   16028:	4c16      	ldr	r4, [pc, #88]	; (16084 <ll_rx_mem_release+0x60>)
{
   1602a:	4605      	mov	r5, r0
	_radio_pdu_node_rx = *node_rx;
   1602c:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1602e:	f5a4 7692 	sub.w	r6, r4, #292	; 0x124
			mem_release(conn, &_radio.conn_free);
   16032:	f1a4 071c 	sub.w	r7, r4, #28
	while (_radio_pdu_node_rx) {
   16036:	b920      	cbnz	r0, 16042 <ll_rx_mem_release+0x1e>
	*node_rx = _radio_pdu_node_rx;
   16038:	6028      	str	r0, [r5, #0]
}
   1603a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1603e:	f7fc bdf5 	b.w	12c2c <packet_rx_allocate.constprop.47>
		switch (_radio_pdu_node_rx_free->hdr.type) {
   16042:	7902      	ldrb	r2, [r0, #4]
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   16044:	f8d0 8000 	ldr.w	r8, [r0]
   16048:	2a07      	cmp	r2, #7
   1604a:	d806      	bhi.n	1605a <ll_rx_mem_release+0x36>
   1604c:	2301      	movs	r3, #1
   1604e:	4093      	lsls	r3, r2
   16050:	f013 0fee 	tst.w	r3, #238	; 0xee
   16054:	d107      	bne.n	16066 <ll_rx_mem_release+0x42>
   16056:	06db      	lsls	r3, r3, #27
   16058:	d40a      	bmi.n	16070 <ll_rx_mem_release+0x4c>
			LL_ASSERT(0);
   1605a:	4040      	eors	r0, r0
   1605c:	f380 8811 	msr	BASEPRI, r0
   16060:	f04f 0004 	mov.w	r0, #4
   16064:	df02      	svc	2
			mem_release(_radio_pdu_node_rx_free,
   16066:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   16068:	f7f9 fdf3 	bl	fc52 <mem_release>
{
   1606c:	4640      	mov	r0, r8
   1606e:	e7e2      	b.n	16036 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   16070:	88c2      	ldrh	r2, [r0, #6]
   16072:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
   16076:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1607a:	f7f9 fdff 	bl	fc7c <mem_get>
			mem_release(conn, &_radio.conn_free);
   1607e:	4639      	mov	r1, r7
   16080:	e7f2      	b.n	16068 <ll_rx_mem_release+0x44>
   16082:	bf00      	nop
   16084:	20001088 	.word	0x20001088

00016088 <do_radio_rx_fc_set>:
	if (req == ack) {
   16088:	4291      	cmp	r1, r2
{
   1608a:	b510      	push	{r4, lr}
   1608c:	4b14      	ldr	r3, [pc, #80]	; (160e0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1608e:	d119      	bne.n	160c4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   16090:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   16094:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16098:	4294      	cmp	r4, r2
   1609a:	d111      	bne.n	160c0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1609c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1609e:	bf14      	ite	ne
   160a0:	460a      	movne	r2, r1
   160a2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   160a4:	3a01      	subs	r2, #1
   160a6:	b2d2      	uxtb	r2, r2
   160a8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   160ac:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			if (req != _radio.fc_req) {
   160b0:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
			_radio.fc_handle[--ack1] = handle;
   160b4:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
			if (req != _radio.fc_req) {
   160b8:	4291      	cmp	r1, r2
   160ba:	d00f      	beq.n	160dc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   160bc:	f883 1175 	strb.w	r1, [r3, #373]	; 0x175
			return 1;
   160c0:	2001      	movs	r0, #1
   160c2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   160c4:	b929      	cbnz	r1, 160d2 <do_radio_rx_fc_set+0x4a>
   160c6:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
				return 1;
   160ca:	1a18      	subs	r0, r3, r0
   160cc:	bf18      	it	ne
   160ce:	2001      	movne	r0, #1
   160d0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   160d2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   160d6:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
   160da:	e7f6      	b.n	160ca <do_radio_rx_fc_set+0x42>
	return 0;
   160dc:	2000      	movs	r0, #0
}
   160de:	bd10      	pop	{r4, pc}
   160e0:	20000f64 	.word	0x20000f64

000160e4 <radio_rx_fc_set>:
{
   160e4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   160e6:	4b14      	ldr	r3, [pc, #80]	; (16138 <radio_rx_fc_set+0x54>)
   160e8:	f893 2176 	ldrb.w	r2, [r3, #374]	; 0x176
{
   160ec:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   160ee:	b302      	cbz	r2, 16132 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   160f0:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   160f4:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   160f6:	f893 2175 	ldrb.w	r2, [r3, #373]	; 0x175
		if (fc) {
   160fa:	b135      	cbz	r5, 1610a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   160fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16100:	4298      	cmp	r0, r3
   16102:	d016      	beq.n	16132 <radio_rx_fc_set+0x4e>
}
   16104:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   16106:	f7ff bfbf 	b.w	16088 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1610a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
   1610e:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   16112:	42a0      	cmp	r0, r4
   16114:	d10d      	bne.n	16132 <radio_rx_fc_set+0x4e>
   16116:	4291      	cmp	r1, r2
   16118:	d00b      	beq.n	16132 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1611a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
			_radio.fc_ack = req;
   1611e:	f883 1175 	strb.w	r1, [r3, #373]	; 0x175
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   16122:	42a0      	cmp	r0, r4
   16124:	d005      	beq.n	16132 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   16126:	f893 0174 	ldrb.w	r0, [r3, #372]	; 0x174
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1612a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   1612c:	bf08      	it	eq
   1612e:	f883 2175 	strbeq.w	r2, [r3, #373]	; 0x175
}
   16132:	2000      	movs	r0, #0
   16134:	bc30      	pop	{r4, r5}
   16136:	4770      	bx	lr
   16138:	20000f64 	.word	0x20000f64

0001613c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1613c:	4801      	ldr	r0, [pc, #4]	; (16144 <ll_tx_mem_acquire+0x8>)
   1613e:	f7f9 bd6e 	b.w	fc1e <mem_acquire>
   16142:	bf00      	nop
   16144:	200010bc 	.word	0x200010bc

00016148 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   16148:	4901      	ldr	r1, [pc, #4]	; (16150 <ll_tx_mem_release+0x8>)
   1614a:	f7f9 bd82 	b.w	fc52 <mem_release>
   1614e:	bf00      	nop
   16150:	200010bc 	.word	0x200010bc

00016154 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   16154:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   16156:	4d2b      	ldr	r5, [pc, #172]	; (16204 <ll_tx_mem_enqueue+0xb0>)
   16158:	f895 416a 	ldrb.w	r4, [r5, #362]	; 0x16a
	if (last == _radio.packet_tx_count) {
   1615c:	f895 3168 	ldrb.w	r3, [r5, #360]	; 0x168
	last = _radio.packet_tx_last + 1;
   16160:	3401      	adds	r4, #1
{
   16162:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   16164:	b2e4      	uxtb	r4, r4
{
   16166:	4607      	mov	r7, r0
   16168:	460e      	mov	r6, r1
		last = 0;
   1616a:	42a3      	cmp	r3, r4
   1616c:	bf08      	it	eq
   1616e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   16170:	f7fb febc 	bl	11eec <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   16174:	2800      	cmp	r0, #0
   16176:	d042      	beq.n	161fe <ll_tx_mem_enqueue+0xaa>
   16178:	f895 3169 	ldrb.w	r3, [r5, #361]	; 0x169
   1617c:	429c      	cmp	r4, r3
   1617e:	d03e      	beq.n	161fe <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   16180:	f8b5 315c 	ldrh.w	r3, [r5, #348]	; 0x15c
   16184:	7972      	ldrb	r2, [r6, #5]
   16186:	3b07      	subs	r3, #7
   16188:	429a      	cmp	r2, r3
   1618a:	d905      	bls.n	16198 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1618c:	4040      	eors	r0, r0
   1618e:	f380 8811 	msr	BASEPRI, r0
   16192:	f04f 0004 	mov.w	r0, #4
   16196:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   16198:	f895 216a 	ldrb.w	r2, [r5, #362]	; 0x16a
   1619c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   161a0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   161a4:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   161a8:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   161aa:	f885 416a 	strb.w	r4, [r5, #362]	; 0x16a
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   161ae:	f990 301d 	ldrsb.w	r3, [r0, #29]
   161b2:	2b00      	cmp	r3, #0
   161b4:	db02      	blt.n	161bc <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   161b6:	2000      	movs	r0, #0
}
   161b8:	b009      	add	sp, #36	; 0x24
   161ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   161bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   161be:	2b00      	cmp	r3, #0
   161c0:	d0f9      	beq.n	161b6 <ll_tx_mem_enqueue+0x62>
   161c2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   161c6:	f012 0302 	ands.w	r3, r2, #2
   161ca:	d1f4      	bne.n	161b6 <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
   161cc:	f042 0202 	orr.w	r2, r2, #2
   161d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   161d4:	f890 2020 	ldrb.w	r2, [r0, #32]
   161d8:	490b      	ldr	r1, [pc, #44]	; (16208 <ll_tx_mem_enqueue+0xb4>)
   161da:	9105      	str	r1, [sp, #20]
   161dc:	3207      	adds	r2, #7
   161de:	2101      	movs	r1, #1
   161e0:	9006      	str	r0, [sp, #24]
   161e2:	9304      	str	r3, [sp, #16]
   161e4:	9103      	str	r1, [sp, #12]
   161e6:	9302      	str	r3, [sp, #8]
   161e8:	9301      	str	r3, [sp, #4]
   161ea:	9300      	str	r3, [sp, #0]
   161ec:	4618      	mov	r0, r3
   161ee:	b2d2      	uxtb	r2, r2
   161f0:	2103      	movs	r1, #3
   161f2:	f7fa fc4f 	bl	10a94 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161f6:	f030 0302 	bics.w	r3, r0, #2
   161fa:	d1c7      	bne.n	1618c <ll_tx_mem_enqueue+0x38>
   161fc:	e7db      	b.n	161b6 <ll_tx_mem_enqueue+0x62>
		return 1;
   161fe:	2001      	movs	r0, #1
   16200:	e7da      	b.n	161b8 <ll_tx_mem_enqueue+0x64>
   16202:	bf00      	nop
   16204:	20000f64 	.word	0x20000f64
   16208:	000127e9 	.word	0x000127e9

0001620c <ll_adv_scan_state_cb>:

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   1620c:	4770      	bx	lr
	...

00016210 <radio_adv_enable>:
{
   16210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
   16214:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 164f0 <radio_adv_enable+0x2e0>
   16218:	f89a 4024 	ldrb.w	r4, [sl, #36]	; 0x24
{
   1621c:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1621e:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
   16220:	f014 0401 	ands.w	r4, r4, #1
{
   16224:	4607      	mov	r7, r0
   16226:	4691      	mov	r9, r2
   16228:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1622c:	930d      	str	r3, [sp, #52]	; 0x34
   1622e:	4656      	mov	r6, sl
	if (_radio.advertiser.is_enabled) {
   16230:	d001      	beq.n	16236 <radio_adv_enable+0x26>
	return BT_HCI_ERR_CMD_DISALLOWED;
   16232:	200c      	movs	r0, #12
   16234:	e146      	b.n	164c4 <radio_adv_enable+0x2b4>
	pdu_adv = (struct pdu_adv *)
   16236:	f89a 2075 	ldrb.w	r2, [sl, #117]	; 0x75
   1623a:	2326      	movs	r3, #38	; 0x26
   1623c:	f04f 0827 	mov.w	r8, #39	; 0x27
   16240:	fb18 3802 	smlabb	r8, r8, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   16244:	f81a 3008 	ldrb.w	r3, [sl, r8]
   16248:	f003 030f 	and.w	r3, r3, #15
   1624c:	2b01      	cmp	r3, #1
   1624e:	d873      	bhi.n	16338 <radio_adv_enable+0x128>
		if (_radio.advertiser.conn) {
   16250:	f8da 50c8 	ldr.w	r5, [sl, #200]	; 0xc8
   16254:	2d00      	cmp	r5, #0
   16256:	d1ec      	bne.n	16232 <radio_adv_enable+0x22>
		link = mem_acquire(&_radio.link_rx_free);
   16258:	f50a 709e 	add.w	r0, sl, #316	; 0x13c
   1625c:	f7f9 fcdf 	bl	fc1e <mem_acquire>
		if (!link) {
   16260:	4683      	mov	fp, r0
   16262:	b150      	cbz	r0, 1627a <radio_adv_enable+0x6a>
		conn = mem_acquire(&_radio.conn_free);
   16264:	f50a 7084 	add.w	r0, sl, #264	; 0x108
   16268:	f7f9 fcd9 	bl	fc1e <mem_acquire>
		if (!conn) {
   1626c:	4604      	mov	r4, r0
   1626e:	b930      	cbnz	r0, 1627e <radio_adv_enable+0x6e>
			mem_release(link, &_radio.link_rx_free);
   16270:	f50a 719e 	add.w	r1, sl, #316	; 0x13c
   16274:	4658      	mov	r0, fp
   16276:	f7f9 fcec 	bl	fc52 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1627a:	2007      	movs	r0, #7
   1627c:	e122      	b.n	164c4 <radio_adv_enable+0x2b4>
		conn->handle = 0xFFFF;
   1627e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16282:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   16284:	238f      	movs	r3, #143	; 0x8f
   16286:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
   1628a:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1628c:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   1628e:	f365 1386 	bfi	r3, r5, #6, #1
		conn->role = 1;
   16292:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16296:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
   16298:	2306      	movs	r3, #6
   1629a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
   1629c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
   162a0:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
   162a2:	f365 1345 	bfi	r3, r5, #5, #1
		conn->slave.latency_enabled = 0;
   162a6:	f365 0300 	bfi	r3, r5, #0, #1
		conn->slave.latency_cancel = 0;
   162aa:	f365 0341 	bfi	r3, r5, #1, #1
   162ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
   162b2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
   162b6:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
   162b8:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0;
   162bc:	f365 0341 	bfi	r3, r5, #1, #1
   162c0:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0;
   162c4:	f890 30d0 	ldrb.w	r3, [r0, #208]	; 0xd0
		conn->latency_event = 0;
   162c8:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->sn = 0;
   162ca:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   162ce:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   162d2:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   162d6:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   162da:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   162de:	f365 1345 	bfi	r3, r5, #5, #1
		conn->refresh = 0;
   162e2:	f365 1386 	bfi	r3, r5, #6, #1
		conn->empty = 0;
   162e6:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->slave.window_widening_prepare_us = 0;
   162ea:	6445      	str	r5, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
   162ec:	6485      	str	r5, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
   162ee:	6585      	str	r5, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
   162f0:	8605      	strh	r5, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
   162f2:	8685      	strh	r5, [r0, #52]	; 0x34
		conn->llcp_req = 0;
   162f4:	f880 505c 	strb.w	r5, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
   162f8:	f880 505d 	strb.w	r5, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0;
   162fc:	f880 5098 	strb.w	r5, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
   16300:	f880 5099 	strb.w	r5, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
   16304:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   16308:	f8c0 b09c 	str.w	fp, [r0, #156]	; 0x9c
		conn->llcp_conn_param.req = 0;
   1630c:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
		conn->llcp_conn_param.ack = 0;
   16310:	f880 50a9 	strb.w	r5, [r0, #169]	; 0xa9
		conn->empty = 0;
   16314:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
		conn->pkt_tx_head = NULL;
   16318:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114
		conn->pkt_tx_ctrl = NULL;
   1631c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
		conn->pkt_tx_ctrl_last = NULL;
   16320:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
		conn->pkt_tx_data = NULL;
   16324:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
		conn->pkt_tx_last = NULL;
   16328:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
		conn->packet_tx_head_len = 0;
   1632c:	f880 5128 	strb.w	r5, [r0, #296]	; 0x128
		conn->packet_tx_head_offset = 0;
   16330:	f880 5129 	strb.w	r5, [r0, #297]	; 0x129
		_radio.advertiser.conn = conn;
   16334:	f8ca 00c8 	str.w	r0, [sl, #200]	; 0xc8
	_radio.advertiser.chan_map = chan_map;
   16338:	a80e      	add	r0, sp, #56	; 0x38
   1633a:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   1633e:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
   16342:	f362 0302 	bfi	r3, r2, #0, #3
	_radio.advertiser.filter_policy = filter_policy;
   16346:	f369 03c4 	bfi	r3, r9, #3, #2
   1634a:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	_radio.advertiser.hdr.ticks_active_to_start =
   1634e:	f8d6 3178 	ldr.w	r3, [r6, #376]	; 0x178
   16352:	61b3      	str	r3, [r6, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   16354:	2327      	movs	r3, #39	; 0x27
   16356:	6173      	str	r3, [r6, #20]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   16358:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   1635a:	2300      	movs	r3, #0
   1635c:	61f3      	str	r3, [r6, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1635e:	f7f9 fdf7 	bl	ff50 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16362:	f81a 5008 	ldrb.w	r5, [sl, r8]
   16366:	f005 050f 	and.w	r5, r5, #15
   1636a:	0043      	lsls	r3, r0, #1
   1636c:	2d01      	cmp	r5, #1
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   1636e:	4403      	add	r3, r0
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16370:	d160      	bne.n	16434 <radio_adv_enable+0x224>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   16372:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16376:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   1637a:	0080      	lsls	r0, r0, #2
   1637c:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   16380:	4955      	ldr	r1, [pc, #340]	; (164d8 <radio_adv_enable+0x2c8>)
   16382:	f8df b170 	ldr.w	fp, [pc, #368]	; 164f4 <radio_adv_enable+0x2e4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   16386:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   16388:	a351      	add	r3, pc, #324	; (adr r3, 164d0 <radio_adv_enable+0x2c0>)
   1638a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1638e:	fba0 0101 	umull	r0, r1, r0, r1
   16392:	f7e9 ff9b 	bl	2cc <__aeabi_uldivmod>
	ticks_slot_offset =
   16396:	69b2      	ldr	r2, [r6, #24]
   16398:	6973      	ldr	r3, [r6, #20]
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   1639a:	6230      	str	r0, [r6, #32]
	ticks_slot_offset =
   1639c:	429a      	cmp	r2, r3
   1639e:	bf38      	it	cc
   163a0:	461a      	movcc	r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   163a2:	2d01      	cmp	r5, #1
	ticks_slot_offset =
   163a4:	4690      	mov	r8, r2
   163a6:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   163aa:	4d4c      	ldr	r5, [pc, #304]	; (164dc <radio_adv_enable+0x2cc>)
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   163ac:	d152      	bne.n	16454 <radio_adv_enable+0x244>
   163ae:	2f00      	cmp	r7, #0
   163b0:	d150      	bne.n	16454 <radio_adv_enable+0x244>
		u32_t ticks_now = ticker_ticks_now_get();
   163b2:	f7fa fc71 	bl	10c98 <ticker_ticks_now_get>
				    _radio.advertiser.hdr.ticks_slot),
   163b6:	6a33      	ldr	r3, [r6, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   163b8:	f8cd 9020 	str.w	r9, [sp, #32]
   163bc:	4443      	add	r3, r8
   163be:	b29a      	uxth	r2, r3
   163c0:	9204      	str	r2, [sp, #16]
   163c2:	9301      	str	r3, [sp, #4]
		u32_t ticks_now = ticker_ticks_now_get();
   163c4:	4682      	mov	sl, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   163c6:	4603      	mov	r3, r0
   163c8:	9507      	str	r5, [sp, #28]
   163ca:	9706      	str	r7, [sp, #24]
   163cc:	f8cd b014 	str.w	fp, [sp, #20]
   163d0:	9703      	str	r7, [sp, #12]
   163d2:	9702      	str	r7, [sp, #8]
   163d4:	9700      	str	r7, [sp, #0]
   163d6:	2205      	movs	r2, #5
   163d8:	2103      	movs	r1, #3
   163da:	4638      	mov	r0, r7
   163dc:	f7fa fb12 	bl	10a04 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   163e0:	2802      	cmp	r0, #2
   163e2:	d033      	beq.n	1644c <radio_adv_enable+0x23c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   163e4:	980d      	ldr	r0, [sp, #52]	; 0x34
   163e6:	b9c0      	cbnz	r0, 1641a <radio_adv_enable+0x20a>
		ret_cb = TICKER_STATUS_BUSY;
   163e8:	2302      	movs	r3, #2
   163ea:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   163ec:	4b3c      	ldr	r3, [pc, #240]	; (164e0 <radio_adv_enable+0x2d0>)
   163ee:	9305      	str	r3, [sp, #20]
   163f0:	2203      	movs	r2, #3
   163f2:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   163f6:	9300      	str	r3, [sp, #0]
   163f8:	f8cd 9020 	str.w	r9, [sp, #32]
   163fc:	9507      	str	r5, [sp, #28]
   163fe:	9006      	str	r0, [sp, #24]
   16400:	9004      	str	r0, [sp, #16]
   16402:	9003      	str	r0, [sp, #12]
   16404:	9002      	str	r0, [sp, #8]
   16406:	9001      	str	r0, [sp, #4]
   16408:	4653      	mov	r3, sl
   1640a:	4611      	mov	r1, r2
		ret =
   1640c:	f7fa fafa 	bl	10a04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   16410:	2802      	cmp	r0, #2
   16412:	d044      	beq.n	1649e <radio_adv_enable+0x28e>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   16414:	980d      	ldr	r0, [sp, #52]	; 0x34
   16416:	2800      	cmp	r0, #0
   16418:	d045      	beq.n	164a6 <radio_adv_enable+0x296>
	if (conn) {
   1641a:	2c00      	cmp	r4, #0
   1641c:	f43f af09 	beq.w	16232 <radio_adv_enable+0x22>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   16420:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16424:	492f      	ldr	r1, [pc, #188]	; (164e4 <radio_adv_enable+0x2d4>)
   16426:	f7f9 fc14 	bl	fc52 <mem_release>
		mem_release(conn, &_radio.conn_free);
   1642a:	492f      	ldr	r1, [pc, #188]	; (164e8 <radio_adv_enable+0x2d8>)
   1642c:	4620      	mov	r0, r4
   1642e:	f7f9 fc10 	bl	fc52 <mem_release>
   16432:	e6fe      	b.n	16232 <radio_adv_enable+0x22>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   16434:	2d02      	cmp	r5, #2
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   16436:	bf06      	itte	eq
   16438:	ebc3 03c3 	rsbeq	r3, r3, r3, lsl #3
   1643c:	eb00 00c3 	addeq.w	r0, r0, r3, lsl #3
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   16440:	ebc0 10c3 	rsbne	r0, r0, r3, lsl #7
   16444:	0080      	lsls	r0, r0, #2
   16446:	e79b      	b.n	16380 <radio_adv_enable+0x170>
				cpu_sleep();
   16448:	f7fb fca2 	bl	11d90 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1644c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1644e:	2b02      	cmp	r3, #2
   16450:	d0fa      	beq.n	16448 <radio_adv_enable+0x238>
   16452:	e7c7      	b.n	163e4 <radio_adv_enable+0x1d4>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16454:	f7fa fc20 	bl	10c98 <ticker_ticks_now_get>
		ret =
   16458:	9507      	str	r5, [sp, #28]
   1645a:	2500      	movs	r5, #0
   1645c:	f8cd 9020 	str.w	r9, [sp, #32]
   16460:	9506      	str	r5, [sp, #24]
   16462:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16466:	6a33      	ldr	r3, [r6, #32]
		ret =
   16468:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1646a:	4682      	mov	sl, r0
   1646c:	4443      	add	r3, r8
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1646e:	481f      	ldr	r0, [pc, #124]	; (164ec <radio_adv_enable+0x2dc>)
		ret =
   16470:	9502      	str	r5, [sp, #8]
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   16472:	b2ba      	uxth	r2, r7
		ret =
   16474:	b29b      	uxth	r3, r3
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   16476:	fba2 0100 	umull	r0, r1, r2, r0
		ret =
   1647a:	9304      	str	r3, [sp, #16]
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1647c:	2391      	movs	r3, #145	; 0x91
   1647e:	fb03 1102 	mla	r1, r3, r2, r1
   16482:	a313      	add	r3, pc, #76	; (adr r3, 164d0 <radio_adv_enable+0x2c0>)
   16484:	e9d3 2300 	ldrd	r2, r3, [r3]
   16488:	f7e9 ff20 	bl	2cc <__aeabi_uldivmod>
		ret =
   1648c:	9500      	str	r5, [sp, #0]
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1648e:	9001      	str	r0, [sp, #4]
		ret =
   16490:	4653      	mov	r3, sl
   16492:	2205      	movs	r2, #5
   16494:	2103      	movs	r1, #3
   16496:	4628      	mov	r0, r5
   16498:	e7b8      	b.n	1640c <radio_adv_enable+0x1fc>
			cpu_sleep();
   1649a:	f7fb fc79 	bl	11d90 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1649e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   164a0:	2b02      	cmp	r3, #2
   164a2:	d0fa      	beq.n	1649a <radio_adv_enable+0x28a>
   164a4:	e7b6      	b.n	16414 <radio_adv_enable+0x204>
		_radio.advertiser.is_enabled = 1;
   164a6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   164aa:	f043 0301 	orr.w	r3, r3, #1
   164ae:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   164b2:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
   164b6:	f013 0401 	ands.w	r4, r3, #1
   164ba:	d103      	bne.n	164c4 <radio_adv_enable+0x2b4>
			ll_adv_scan_state_cb(BIT(0));
   164bc:	2001      	movs	r0, #1
   164be:	f7ff fea5 	bl	1620c <ll_adv_scan_state_cb>
		return 0;
   164c2:	4620      	mov	r0, r4
}
   164c4:	b00f      	add	sp, #60	; 0x3c
   164c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ca:	bf00      	nop
   164cc:	f3af 8000 	nop.w
   164d0:	1afd498d 	.word	0x1afd498d
   164d4:	00000007 	.word	0x00000007
   164d8:	3b9aca00 	.word	0x3b9aca00
   164dc:	00011d99 	.word	0x00011d99
   164e0:	00012bfd 	.word	0x00012bfd
   164e4:	200010a0 	.word	0x200010a0
   164e8:	2000106c 	.word	0x2000106c
   164ec:	84e72a00 	.word	0x84e72a00
   164f0:	20000f64 	.word	0x20000f64
   164f4:	00012b8d 	.word	0x00012b8d

000164f8 <radio_adv_disable>:
{
   164f8:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   164fa:	2103      	movs	r1, #3
   164fc:	2005      	movs	r0, #5
   164fe:	f7fb fd0b 	bl	11f18 <role_disable>
	if (!status) {
   16502:	4605      	mov	r5, r0
   16504:	b9e8      	cbnz	r0, 16542 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   16506:	4c10      	ldr	r4, [pc, #64]	; (16548 <radio_adv_disable+0x50>)
   16508:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1650c:	f360 0200 	bfi	r2, r0, #0, #1
   16510:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   16514:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16518:	07d3      	lsls	r3, r2, #31
   1651a:	d401      	bmi.n	16520 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   1651c:	f7ff fe76 	bl	1620c <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   16520:	f8d4 60c8 	ldr.w	r6, [r4, #200]	; 0xc8
		if (conn) {
   16524:	b15e      	cbz	r6, 1653e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   16526:	2300      	movs	r3, #0
   16528:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1652c:	4907      	ldr	r1, [pc, #28]	; (1654c <radio_adv_disable+0x54>)
   1652e:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
   16532:	f7f9 fb8e 	bl	fc52 <mem_release>
			mem_release(conn, &_radio.conn_free);
   16536:	4906      	ldr	r1, [pc, #24]	; (16550 <radio_adv_disable+0x58>)
   16538:	4630      	mov	r0, r6
   1653a:	f7f9 fb8a 	bl	fc52 <mem_release>
}
   1653e:	4628      	mov	r0, r5
   16540:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   16542:	250c      	movs	r5, #12
   16544:	e7fb      	b.n	1653e <radio_adv_disable+0x46>
   16546:	bf00      	nop
   16548:	20000f64 	.word	0x20000f64
   1654c:	200010a0 	.word	0x200010a0
   16550:	2000106c 	.word	0x2000106c
   16554:	00000000 	.word	0x00000000

00016558 <radio_scan_enable>:
{
   16558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   1655c:	4c50      	ldr	r4, [pc, #320]	; (166a0 <radio_scan_enable+0x148>)
   1655e:	f894 50dc 	ldrb.w	r5, [r4, #220]	; 0xdc
{
   16562:	b08c      	sub	sp, #48	; 0x30
   16564:	461f      	mov	r7, r3
	if (_radio.scanner.is_enabled) {
   16566:	f015 0501 	ands.w	r5, r5, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1656a:	f04f 0302 	mov.w	r3, #2
{
   1656e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16570:	930b      	str	r3, [sp, #44]	; 0x2c
{
   16572:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   16574:	d003      	beq.n	1657e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16576:	200c      	movs	r0, #12
}
   16578:	b00c      	add	sp, #48	; 0x30
   1657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   1657e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   16582:	f360 0300 	bfi	r3, r0, #0, #1
	_radio.scanner.init_addr_type = init_addr_type;
   16586:	f366 1304 	bfi	r3, r6, #4, #1
   1658a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1658e:	2206      	movs	r2, #6
   16590:	f104 00de 	add.w	r0, r4, #222	; 0xde
   16594:	f7ea f860 	bl	658 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   16598:	4e42      	ldr	r6, [pc, #264]	; (166a4 <radio_scan_enable+0x14c>)
   1659a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   1659e:	f04f 0891 	mov.w	r8, #145	; 0x91
   165a2:	fba2 0106 	umull	r0, r1, r2, r6
   165a6:	fb08 1102 	mla	r1, r8, r2, r1
   165aa:	a33b      	add	r3, pc, #236	; (adr r3, 16698 <radio_scan_enable+0x140>)
   165ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   165b0:	f7e9 fe8c 	bl	2cc <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   165b4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   165b8:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   165bc:	f8d4 a178 	ldr.w	sl, [r4, #376]	; 0x178
	_radio.scanner.ticks_window =
   165c0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   165c4:	f362 0342 	bfi	r3, r2, #1, #2
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   165c8:	b2ba      	uxth	r2, r7
   165ca:	fba2 6706 	umull	r6, r7, r2, r6
   165ce:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.filter_policy = filter_policy;
   165d2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	_radio.scanner.hdr.ticks_xtal_to_start =
   165d6:	2327      	movs	r3, #39	; 0x27
		_radio.scanner.ticks_window +
   165d8:	f100 0909 	add.w	r9, r0, #9
	_radio.scanner.hdr.ticks_xtal_to_start =
   165dc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_active_to_start =
   165e0:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   165e4:	a32c      	add	r3, pc, #176	; (adr r3, 16698 <radio_scan_enable+0x140>)
   165e6:	e9d3 2300 	ldrd	r2, r3, [r3]
	_radio.scanner.hdr.ticks_preempt_to_start =
   165ea:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   165ee:	4630      	mov	r0, r6
   165f0:	4639      	mov	r1, r7
   165f2:	f7e9 fe6b 	bl	2cc <__aeabi_uldivmod>
	    (ticks_interval -
   165f6:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	_radio.scanner.hdr.ticks_slot =
   165fa:	4599      	cmp	r9, r3
   165fc:	bf94      	ite	ls
   165fe:	f8c4 90d8 	strls.w	r9, [r4, #216]	; 0xd8
   16602:	f8c4 30d8 	strhi.w	r3, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   16606:	4680      	mov	r8, r0
	ticks_anchor = ticker_ticks_now_get();
   16608:	f7fa fb46 	bl	10c98 <ticker_ticks_now_get>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1660c:	ab0b      	add	r3, sp, #44	; 0x2c
   1660e:	9308      	str	r3, [sp, #32]
   16610:	4b25      	ldr	r3, [pc, #148]	; (166a8 <radio_scan_enable+0x150>)
   16612:	9307      	str	r3, [sp, #28]
   16614:	4b25      	ldr	r3, [pc, #148]	; (166ac <radio_scan_enable+0x154>)
   16616:	9506      	str	r5, [sp, #24]
   16618:	9305      	str	r3, [sp, #20]
   1661a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1661e:	9503      	str	r5, [sp, #12]
   16620:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   16624:	bf2c      	ite	cs
   16626:	4453      	addcs	r3, sl
   16628:	3327      	addcc	r3, #39	; 0x27
   1662a:	b29b      	uxth	r3, r3
	ticks_anchor = ticker_ticks_now_get();
   1662c:	4681      	mov	r9, r0
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1662e:	9304      	str	r3, [sp, #16]
			   TICKER_REMAINDER((u64_t) interval * 625),
   16630:	4630      	mov	r0, r6
   16632:	a319      	add	r3, pc, #100	; (adr r3, 16698 <radio_scan_enable+0x140>)
   16634:	e9d3 2300 	ldrd	r2, r3, [r3]
   16638:	4639      	mov	r1, r7
   1663a:	f7e9 fe47 	bl	2cc <__aeabi_uldivmod>
   1663e:	4610      	mov	r0, r2
   16640:	4619      	mov	r1, r3
   16642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16646:	2300      	movs	r3, #0
   16648:	f7e9 fe40 	bl	2cc <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1664c:	e88d 0120 	stmia.w	sp, {r5, r8}
   16650:	9002      	str	r0, [sp, #8]
   16652:	464b      	mov	r3, r9
   16654:	2206      	movs	r2, #6
   16656:	2103      	movs	r1, #3
   16658:	4628      	mov	r0, r5
   1665a:	f7fa f9d3 	bl	10a04 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1665e:	2802      	cmp	r0, #2
   16660:	d015      	beq.n	1668e <radio_scan_enable+0x136>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   16662:	980b      	ldr	r0, [sp, #44]	; 0x2c
   16664:	2800      	cmp	r0, #0
   16666:	d186      	bne.n	16576 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   16668:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1666c:	f043 0301 	orr.w	r3, r3, #1
   16670:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   16674:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16678:	f013 0401 	ands.w	r4, r3, #1
   1667c:	f47f af7c 	bne.w	16578 <radio_scan_enable+0x20>
		ll_adv_scan_state_cb(BIT(1));
   16680:	2002      	movs	r0, #2
   16682:	f7ff fdc3 	bl	1620c <ll_adv_scan_state_cb>
	return 0;
   16686:	4620      	mov	r0, r4
   16688:	e776      	b.n	16578 <radio_scan_enable+0x20>
			cpu_sleep();
   1668a:	f7fb fb81 	bl	11d90 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1668e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16690:	2b02      	cmp	r3, #2
   16692:	d0fa      	beq.n	1668a <radio_scan_enable+0x132>
   16694:	e7e5      	b.n	16662 <radio_scan_enable+0x10a>
   16696:	bf00      	nop
   16698:	1afd498d 	.word	0x1afd498d
   1669c:	00000007 	.word	0x00000007
   166a0:	20000f64 	.word	0x20000f64
   166a4:	84e72a00 	.word	0x84e72a00
   166a8:	00011d99 	.word	0x00011d99
   166ac:	00012bc5 	.word	0x00012bc5

000166b0 <radio_scan_disable>:
{
   166b0:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   166b2:	2104      	movs	r1, #4
   166b4:	2006      	movs	r0, #6
   166b6:	f7fb fc2f 	bl	11f18 <role_disable>
	if (!status) {
   166ba:	4605      	mov	r5, r0
   166bc:	b9e8      	cbnz	r0, 166fa <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   166be:	4c10      	ldr	r4, [pc, #64]	; (16700 <radio_scan_disable+0x50>)
   166c0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   166c4:	f360 0200 	bfi	r2, r0, #0, #1
   166c8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   166cc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   166d0:	07d3      	lsls	r3, r2, #31
   166d2:	d401      	bmi.n	166d8 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   166d4:	f7ff fd9a 	bl	1620c <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   166d8:	f8d4 60fc 	ldr.w	r6, [r4, #252]	; 0xfc
		if (conn) {
   166dc:	b15e      	cbz	r6, 166f6 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   166de:	2300      	movs	r3, #0
   166e0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   166e4:	4907      	ldr	r1, [pc, #28]	; (16704 <radio_scan_disable+0x54>)
   166e6:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
   166ea:	f7f9 fab2 	bl	fc52 <mem_release>
			mem_release(conn, &_radio.conn_free);
   166ee:	4906      	ldr	r1, [pc, #24]	; (16708 <radio_scan_disable+0x58>)
   166f0:	4630      	mov	r0, r6
   166f2:	f7f9 faae 	bl	fc52 <mem_release>
}
   166f6:	4628      	mov	r0, r5
   166f8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   166fa:	250c      	movs	r5, #12
   166fc:	e7fb      	b.n	166f6 <radio_scan_disable+0x46>
   166fe:	bf00      	nop
   16700:	20000f64 	.word	0x20000f64
   16704:	200010a0 	.word	0x200010a0
   16708:	2000106c 	.word	0x2000106c

0001670c <ll_rx_dequeue>:
{
   1670c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1670e:	4d33      	ldr	r5, [pc, #204]	; (167dc <ll_rx_dequeue+0xd0>)
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   16710:	aa02      	add	r2, sp, #8
   16712:	2300      	movs	r3, #0
   16714:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   16718:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
   1671c:	f505 71a0 	add.w	r1, r5, #320	; 0x140
   16720:	f7f9 fad5 	bl	fcce <memq_dequeue>
   16724:	462c      	mov	r4, r5
	LL_ASSERT(link);
   16726:	b928      	cbnz	r0, 16734 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
   16728:	4040      	eors	r0, r0
   1672a:	f380 8811 	msr	BASEPRI, r0
   1672e:	f04f 0004 	mov.w	r0, #4
   16732:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   16734:	f505 719e 	add.w	r1, r5, #316	; 0x13c
   16738:	f7f9 fa8b 	bl	fc52 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   1673c:	9a01      	ldr	r2, [sp, #4]
   1673e:	7911      	ldrb	r1, [r2, #4]
   16740:	2907      	cmp	r1, #7
   16742:	d8f1      	bhi.n	16728 <ll_rx_dequeue+0x1c>
   16744:	2301      	movs	r3, #1
   16746:	408b      	lsls	r3, r1
   16748:	f013 0fee 	tst.w	r3, #238	; 0xee
   1674c:	d111      	bne.n	16772 <ll_rx_dequeue+0x66>
   1674e:	06dd      	lsls	r5, r3, #27
   16750:	d5ea      	bpl.n	16728 <ll_rx_dequeue+0x1c>
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   16752:	2903      	cmp	r1, #3
   16754:	d134      	bne.n	167c0 <ll_rx_dequeue+0xb4>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   16756:	7ad3      	ldrb	r3, [r2, #11]
   16758:	2b3c      	cmp	r3, #60	; 0x3c
   1675a:	d015      	beq.n	16788 <ll_rx_dequeue+0x7c>
   1675c:	7b12      	ldrb	r2, [r2, #12]
   1675e:	bb8a      	cbnz	r2, 167c4 <ll_rx_dequeue+0xb8>
			LL_ASSERT(_radio.scanner.is_enabled);
   16760:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16764:	07d9      	lsls	r1, r3, #31
   16766:	d5df      	bpl.n	16728 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
   16768:	f362 0300 	bfi	r3, r2, #0, #1
   1676c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16770:	e018      	b.n	167a4 <ll_rx_dequeue+0x98>
		LL_ASSERT(_radio.link_rx_data_quota <
   16772:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
   16776:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
   1677a:	3801      	subs	r0, #1
   1677c:	4283      	cmp	r3, r0
   1677e:	dad3      	bge.n	16728 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
   16780:	3301      	adds	r3, #1
   16782:	f885 3148 	strb.w	r3, [r5, #328]	; 0x148
		break;
   16786:	e7e4      	b.n	16752 <ll_rx_dequeue+0x46>
				_radio.advertiser.conn = NULL;
   16788:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   1678a:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   1678e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
			LL_ASSERT(_radio.advertiser.is_enabled);
   16792:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16796:	07d8      	lsls	r0, r3, #31
   16798:	d5c6      	bpl.n	16728 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
   1679a:	f36f 0300 	bfc	r3, #0, #1
   1679e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (conn) {
   167a2:	b98d      	cbnz	r5, 167c8 <ll_rx_dequeue+0xbc>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   167a4:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
   167a8:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
   167ac:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   167b0:	f3c0 0000 	ubfx	r0, r0, #0, #1
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   167b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
		if (!bm) {
   167b8:	b240      	sxtb	r0, r0
   167ba:	b908      	cbnz	r0, 167c0 <ll_rx_dequeue+0xb4>
			ll_adv_scan_state_cb(0);
   167bc:	f7ff fd26 	bl	1620c <ll_adv_scan_state_cb>
}
   167c0:	b003      	add	sp, #12
   167c2:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
   167c4:	2500      	movs	r5, #0
   167c6:	e7e4      	b.n	16792 <ll_rx_dequeue+0x86>
			mem_release(node_rx->hdr.onion.link,
   167c8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   167cc:	4904      	ldr	r1, [pc, #16]	; (167e0 <ll_rx_dequeue+0xd4>)
   167ce:	f7f9 fa40 	bl	fc52 <mem_release>
			mem_release(conn, &_radio.conn_free);
   167d2:	4904      	ldr	r1, [pc, #16]	; (167e4 <ll_rx_dequeue+0xd8>)
   167d4:	4628      	mov	r0, r5
   167d6:	f7f9 fa3c 	bl	fc52 <mem_release>
   167da:	e7e3      	b.n	167a4 <ll_rx_dequeue+0x98>
   167dc:	20000f64 	.word	0x20000f64
   167e0:	200010a0 	.word	0x200010a0
   167e4:	2000106c 	.word	0x2000106c

000167e8 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   167e8:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   167ea:	4c0b      	ldr	r4, [pc, #44]	; (16818 <rtc0_nrf5_isr+0x30>)
   167ec:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   167f0:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   167f4:	b122      	cbz	r2, 16800 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   167f6:	2000      	movs	r0, #0
   167f8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   167fc:	f7fa f8f4 	bl	109e8 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   16800:	b12d      	cbz	r5, 1680e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   16802:	2300      	movs	r3, #0
   16804:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   16808:	2001      	movs	r0, #1
   1680a:	f7fa f8ed 	bl	109e8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1680e:	2000      	movs	r0, #0
}
   16810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   16814:	f7f9 bb0a 	b.w	fe2c <mayfly_run>
   16818:	4000b000 	.word	0x4000b000

0001681c <swi4_nrf5_isr>:
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   1681c:	2001      	movs	r0, #1
   1681e:	f7f9 bb05 	b.w	fe2c <mayfly_run>

00016822 <rng_nrf5_isr>:
	isr_rand(arg);
   16822:	f000 bc07 	b.w	17034 <isr_rand>

00016826 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16826:	4668      	mov	r0, sp
   16828:	f020 0107 	bic.w	r1, r0, #7
   1682c:	468d      	mov	sp, r1
   1682e:	b501      	push	{r0, lr}
	isr_radio();
   16830:	f000 fd00 	bl	17234 <isr_radio>
	ISR_DIRECT_PM();
   16834:	f7ea fafa 	bl	e2c <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   16838:	f7ea f8f6 	bl	a28 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1683c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16840:	4685      	mov	sp, r0
   16842:	4770      	bx	lr

00016844 <radio_active_callback>:
{
   16844:	4770      	bx	lr
	...

00016848 <radio_event_callback>:
	k_sem_give(sem_recv);
   16848:	4b01      	ldr	r3, [pc, #4]	; (16850 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1684a:	6818      	ldr	r0, [r3, #0]
   1684c:	f001 bf24 	b.w	18698 <_impl_k_sem_give>
   16850:	20001884 	.word	0x20001884

00016854 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   16854:	b510      	push	{r4, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   16856:	4b36      	ldr	r3, [pc, #216]	; (16930 <ll_init+0xdc>)
{
   16858:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   1685a:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   1685c:	2204      	movs	r2, #4
   1685e:	2109      	movs	r1, #9
   16860:	4834      	ldr	r0, [pc, #208]	; (16934 <ll_init+0xe0>)
   16862:	f000 fbc7 	bl	16ff4 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   16866:	4834      	ldr	r0, [pc, #208]	; (16938 <ll_init+0xe4>)
   16868:	220c      	movs	r2, #12
   1686a:	2111      	movs	r1, #17
   1686c:	f000 fbca 	bl	17004 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   16870:	4832      	ldr	r0, [pc, #200]	; (1693c <ll_init+0xe8>)
   16872:	f001 fa49 	bl	17d08 <device_get_binding>
	if (!clk_k32) {
   16876:	b918      	cbnz	r0, 16880 <ll_init+0x2c>
		return -ENODEV;
   16878:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);
	irq_enable(NRF5_IRQ_RNG_IRQn);

	return 0;
}
   1687c:	b006      	add	sp, #24
   1687e:	bd10      	pop	{r4, pc}
	return api->on(dev, sys);
   16880:	6843      	ldr	r3, [r0, #4]
   16882:	2101      	movs	r1, #1
   16884:	681b      	ldr	r3, [r3, #0]
   16886:	4798      	blx	r3
	cntr_init();
   16888:	f000 faba 	bl	16e00 <cntr_init>
	mayfly_init();
   1688c:	f7f9 fa2e 	bl	fcec <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16890:	4b2b      	ldr	r3, [pc, #172]	; (16940 <ll_init+0xec>)
   16892:	2208      	movs	r2, #8
   16894:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   16896:	2203      	movs	r2, #3
   16898:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1689a:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1689c:	2000      	movs	r0, #0
	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   1689e:	4a29      	ldr	r2, [pc, #164]	; (16944 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   168a0:	7418      	strb	r0, [r3, #16]
	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   168a2:	9202      	str	r2, [sp, #8]
   168a4:	220e      	movs	r2, #14
   168a6:	9201      	str	r2, [sp, #4]
   168a8:	9300      	str	r3, [sp, #0]
   168aa:	4a27      	ldr	r2, [pc, #156]	; (16948 <ll_init+0xf4>)
   168ac:	2304      	movs	r3, #4
   168ae:	2109      	movs	r1, #9
   168b0:	f7fa f83c 	bl	1092c <ticker_init>
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   168b4:	4825      	ldr	r0, [pc, #148]	; (1694c <ll_init+0xf8>)
   168b6:	f001 fa27 	bl	17d08 <device_get_binding>
	if (!clk_m16) {
   168ba:	2800      	cmp	r0, #0
   168bc:	d0dc      	beq.n	16878 <ll_init+0x24>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   168be:	f44f 734d 	mov.w	r3, #820	; 0x334
   168c2:	9304      	str	r3, [sp, #16]
   168c4:	4b22      	ldr	r3, [pc, #136]	; (16950 <ll_init+0xfc>)
   168c6:	9303      	str	r3, [sp, #12]
   168c8:	231b      	movs	r3, #27
   168ca:	9302      	str	r3, [sp, #8]
   168cc:	9301      	str	r3, [sp, #4]
   168ce:	2302      	movs	r3, #2
   168d0:	9300      	str	r3, [sp, #0]
   168d2:	2301      	movs	r3, #1
   168d4:	461a      	mov	r2, r3
   168d6:	2107      	movs	r1, #7
   168d8:	f7ff f958 	bl	15b8c <radio_init>
	if (err) {
   168dc:	4604      	mov	r4, r0
   168de:	bb20      	cbnz	r0, 1692a <ll_init+0xd6>
	ll_filter_reset(true);
   168e0:	2001      	movs	r0, #1
   168e2:	f000 fa81 	bl	16de8 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   168e6:	4622      	mov	r2, r4
   168e8:	4621      	mov	r1, r4
   168ea:	2001      	movs	r0, #1
   168ec:	f7ea fa84 	bl	df8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   168f0:	4622      	mov	r2, r4
   168f2:	4621      	mov	r1, r4
   168f4:	200b      	movs	r0, #11
   168f6:	f7ea fa7f 	bl	df8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   168fa:	4622      	mov	r2, r4
   168fc:	4621      	mov	r1, r4
   168fe:	2018      	movs	r0, #24
   16900:	f7ea fa7a 	bl	df8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   16904:	4622      	mov	r2, r4
   16906:	2101      	movs	r1, #1
   16908:	200d      	movs	r0, #13
   1690a:	f7ea fa75 	bl	df8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1690e:	2001      	movs	r0, #1
   16910:	f7ea fa48 	bl	da4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   16914:	200b      	movs	r0, #11
   16916:	f7ea fa45 	bl	da4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1691a:	2018      	movs	r0, #24
   1691c:	f7ea fa42 	bl	da4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   16920:	200d      	movs	r0, #13
   16922:	f7ea fa3f 	bl	da4 <_arch_irq_enable>
	return 0;
   16926:	4620      	mov	r0, r4
   16928:	e7a8      	b.n	1687c <ll_init+0x28>
		return -ENOMEM;
   1692a:	f06f 000b 	mvn.w	r0, #11
   1692e:	e7a5      	b.n	1687c <ll_init+0x28>
   16930:	20001884 	.word	0x20001884
   16934:	20001864 	.word	0x20001864
   16938:	20001870 	.word	0x20001870
   1693c:	00019c50 	.word	0x00019c50
   16940:	20001844 	.word	0x20001844
   16944:	200015dc 	.word	0x200015dc
   16948:	20001498 	.word	0x20001498
   1694c:	00019c5b 	.word	0x00019c5b
   16950:	20001164 	.word	0x20001164

00016954 <ll_timeslice_ticker_id_get>:

void ll_timeslice_ticker_id_get(u8_t * const instance_index, u8_t * const user_id)
{
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
   16954:	2308      	movs	r3, #8
   16956:	700b      	strb	r3, [r1, #0]
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
   16958:	2300      	movs	r3, #0
   1695a:	7003      	strb	r3, [r0, #0]
   1695c:	4770      	bx	lr
	...

00016960 <ll_adv_params_set>:
#else /* !CONFIG_BT_CTLR_ADV_EXT */
u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
   16960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16964:	4615      	mov	r5, r2
   16966:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16968:	2206      	movs	r2, #6
   1696a:	2300      	movs	r3, #0
   1696c:	f88d 3000 	strb.w	r3, [sp]
   16970:	f88d 2002 	strb.w	r2, [sp, #2]
   16974:	2301      	movs	r3, #1
   16976:	2202      	movs	r2, #2
{
   16978:	4607      	mov	r7, r0
   1697a:	4688      	mov	r8, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1697c:	f88d 3001 	strb.w	r3, [sp, #1]
   16980:	f88d 2003 	strb.w	r2, [sp, #3]
   16984:	f88d 3004 	strb.w	r3, [sp, #4]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   16988:	f7ff f9d8 	bl	15d3c <radio_adv_is_enabled>
   1698c:	4604      	mov	r4, r0
   1698e:	2800      	cmp	r0, #0
   16990:	d15a      	bne.n	16a48 <ll_adv_params_set+0xe8>
   16992:	4a2e      	ldr	r2, [pc, #184]	; (16a4c <ll_adv_params_set+0xec>)
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   16994:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   16998:	7813      	ldrb	r3, [r2, #0]
   1699a:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1699e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
   169a2:	f1b8 0f01 	cmp.w	r8, #1
	ll_adv.filter_policy = filter_policy;
   169a6:	f361 03c4 	bfi	r3, r1, #3, #2
		ll_adv.interval = interval;
   169aa:	bf14      	ite	ne
   169ac:	8057      	strhne	r7, [r2, #2]
		ll_adv.interval = 0;
   169ae:	8050      	strheq	r0, [r2, #2]
	ll_adv.filter_policy = filter_policy;
   169b0:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   169b2:	f7ff f9bb 	bl	15d2c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   169b6:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   169ba:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   169be:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
   169c2:	ab02      	add	r3, sp, #8
   169c4:	4498      	add	r8, r3
   169c6:	5c83      	ldrb	r3, [r0, r2]
   169c8:	f818 1c08 	ldrb.w	r1, [r8, #-8]
   169cc:	f361 0303 	bfi	r3, r1, #0, #4
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   169d0:	f005 0501 	and.w	r5, r5, #1
   169d4:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   169d8:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
   169dc:	f36f 13c7 	bfc	r3, #7, #1
   169e0:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   169e2:	b2db      	uxtb	r3, r3
   169e4:	f003 010f 	and.w	r1, r3, #15
   169e8:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   169ea:	eb00 0702 	add.w	r7, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   169ee:	d126      	bne.n	16a3e <ll_adv_params_set+0xde>
		pdu->rx_addr = direct_addr_type;
   169f0:	f366 13c7 	bfi	r3, r6, #7, #1
   169f4:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   169f6:	9908      	ldr	r1, [sp, #32]
   169f8:	2206      	movs	r2, #6
   169fa:	f107 0008 	add.w	r0, r7, #8
   169fe:	f7e9 fe2b 	bl	658 <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   16a02:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   16a04:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   16a06:	f7ff f995 	bl	15d34 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16a0a:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   16a0e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   16a12:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   16a16:	2604      	movs	r6, #4
   16a18:	5c83      	ldrb	r3, [r0, r2]
   16a1a:	f366 0303 	bfi	r3, r6, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   16a1e:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   16a22:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
   16a26:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16a2a:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   16a2c:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   16a2e:	784b      	ldrb	r3, [r1, #1]
   16a30:	b90b      	cbnz	r3, 16a36 <ll_adv_params_set+0xd6>
		pdu->len = BDADDR_SIZE;
   16a32:	2306      	movs	r3, #6
   16a34:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   16a36:	4620      	mov	r0, r4
   16a38:	b002      	add	sp, #8
   16a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
   16a3e:	787b      	ldrb	r3, [r7, #1]
   16a40:	2b00      	cmp	r3, #0
   16a42:	d1e0      	bne.n	16a06 <ll_adv_params_set+0xa6>
		pdu->len = BDADDR_SIZE;
   16a44:	2306      	movs	r3, #6
   16a46:	e7dd      	b.n	16a04 <ll_adv_params_set+0xa4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16a48:	240c      	movs	r4, #12
   16a4a:	e7f4      	b.n	16a36 <ll_adv_params_set+0xd6>
   16a4c:	20001888 	.word	0x20001888

00016a50 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   16a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a54:	460f      	mov	r7, r1
   16a56:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   16a58:	f7ff f968 	bl	15d2c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16a5c:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   16a60:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   16a64:	ebc4 02c2 	rsb	r2, r4, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
   16a68:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   16a6a:	f810 e002 	ldrb.w	lr, [r0, r2]
   16a6e:	f00e 030f 	and.w	r3, lr, #15
   16a72:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16a74:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   16a78:	d037      	beq.n	16aea <ll_adv_data_set+0x9a>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   16a7a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   16a7e:	42a3      	cmp	r3, r4
   16a80:	d104      	bne.n	16a8c <ll_adv_data_set+0x3c>
		last = radio_adv_data->last + 1;
   16a82:	3401      	adds	r4, #1
   16a84:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
   16a86:	2c02      	cmp	r4, #2
   16a88:	bf08      	it	eq
   16a8a:	2400      	moveq	r4, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   16a8c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16a90:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   16a94:	eb05 0803 	add.w	r8, r5, r3
	pdu->type = prev->type;
   16a98:	5ce8      	ldrb	r0, [r5, r3]
   16a9a:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
	} else {
		pdu->chan_sel = 0;
   16a9e:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   16aa2:	f36f 1045 	bfc	r0, #5, #1
   16aa6:	54e8      	strb	r0, [r5, r3]
	}

	pdu->tx_addr = prev->tx_addr;
   16aa8:	5ca8      	ldrb	r0, [r5, r2]
   16aaa:	f815 e003 	ldrb.w	lr, [r5, r3]
   16aae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16ab2:	f360 1e86 	bfi	lr, r0, #6, #1
   16ab6:	f805 e003 	strb.w	lr, [r5, r3]
	pdu->rx_addr = prev->rx_addr;
   16aba:	5caa      	ldrb	r2, [r5, r2]
   16abc:	fa5f f08e 	uxtb.w	r0, lr
   16ac0:	09d2      	lsrs	r2, r2, #7
   16ac2:	f362 10c7 	bfi	r0, r2, #7, #1
   16ac6:	54e8      	strb	r0, [r5, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   16ac8:	2206      	movs	r2, #6
   16aca:	3102      	adds	r1, #2
   16acc:	f108 0002 	add.w	r0, r8, #2
   16ad0:	f7e9 fdc2 	bl	658 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   16ad4:	4632      	mov	r2, r6
   16ad6:	4639      	mov	r1, r7
   16ad8:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   16adc:	3606      	adds	r6, #6
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   16ade:	f7e9 fdbb 	bl	658 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   16ae2:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   16ae6:	f885 404f 	strb.w	r4, [r5, #79]	; 0x4f
   16aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016aee <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   16aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16af2:	4606      	mov	r6, r0
   16af4:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   16af6:	f7ff f91d 	bl	15d34 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   16afa:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   16afe:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   16b02:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   16b04:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   16b06:	d136      	bne.n	16b76 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
   16b08:	1c5d      	adds	r5, r3, #1
   16b0a:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   16b0c:	2d02      	cmp	r5, #2
			last = 0;
   16b0e:	bf08      	it	eq
   16b10:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   16b12:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16b16:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   16b1a:	b22b      	sxth	r3, r5
   16b1c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   16b20:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   16b24:	f04f 0e04 	mov.w	lr, #4
   16b28:	5ce0      	ldrb	r0, [r4, r3]
   16b2a:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   16b2e:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   16b32:	f36f 1045 	bfc	r0, #5, #1
   16b36:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
   16b38:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   16b3a:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
   16b3c:	5ce2      	ldrb	r2, [r4, r3]
   16b3e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16b42:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   16b46:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
   16b4a:	f36f 12c7 	bfc	r2, #7, #1
   16b4e:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
   16b50:	1db3      	adds	r3, r6, #6
   16b52:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   16b56:	2206      	movs	r2, #6
   16b58:	3102      	adds	r1, #2
   16b5a:	f108 0002 	add.w	r0, r8, #2
   16b5e:	f7e9 fd7b 	bl	658 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   16b62:	4632      	mov	r2, r6
   16b64:	4639      	mov	r1, r7
   16b66:	f108 0008 	add.w	r0, r8, #8
   16b6a:	f7e9 fd75 	bl	658 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   16b6e:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   16b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b76:	461d      	mov	r5, r3
   16b78:	e7cb      	b.n	16b12 <ll_scan_data_set+0x24>
	...

00016b7c <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   16b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   16b80:	b918      	cbnz	r0, 16b8a <ll_adv_enable+0xe>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   16b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
   16b86:	f7ff bcb7 	b.w	164f8 <radio_adv_disable>
	} else if (radio_adv_is_enabled()) {
   16b8a:	f7ff f8d7 	bl	15d3c <radio_adv_is_enabled>
   16b8e:	4607      	mov	r7, r0
   16b90:	bbb0      	cbnz	r0, 16c00 <ll_adv_enable+0x84>
	radio_adv_data = radio_adv_data_get();
   16b92:	f7ff f8cb 	bl	15d2c <radio_adv_data_get>
   16b96:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
   16b98:	f7ff f8cc 	bl	15d34 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   16b9c:	f896 404f 	ldrb.w	r4, [r6, #79]	; 0x4f
   16ba0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16ba4:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   16ba8:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   16bac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16bb0:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16bb4:	18c5      	adds	r5, r0, r3
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   16bb6:	5d30      	ldrb	r0, [r6, r4]
   16bb8:	4639      	mov	r1, r7
   16bba:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16bbe:	f7fa f871 	bl	10ca4 <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   16bc2:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   16bc6:	2206      	movs	r2, #6
   16bc8:	4601      	mov	r1, r0
   16bca:	f108 0002 	add.w	r0, r8, #2
   16bce:	f7e9 fd43 	bl	658 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   16bd2:	5d30      	ldrb	r0, [r6, r4]
   16bd4:	4639      	mov	r1, r7
   16bd6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16bda:	f7fa f863 	bl	10ca4 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   16bde:	2206      	movs	r2, #6
   16be0:	4601      	mov	r1, r0
   16be2:	1ca8      	adds	r0, r5, #2
   16be4:	f7e9 fd38 	bl	658 <memcpy>
				  ll_adv.filter_policy, rl_idx);
   16be8:	4807      	ldr	r0, [pc, #28]	; (16c08 <ll_adv_enable+0x8c>)
   16bea:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   16bec:	8840      	ldrh	r0, [r0, #2]
   16bee:	f3c1 02c1 	ubfx	r2, r1, #3, #2
   16bf2:	23ff      	movs	r3, #255	; 0xff
   16bf4:	f001 0107 	and.w	r1, r1, #7
}
   16bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   16bfc:	f7ff bb08 	b.w	16210 <radio_adv_enable>
}
   16c00:	2000      	movs	r0, #0
   16c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16c06:	bf00      	nop
   16c08:	20001888 	.word	0x20001888

00016c0c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   16c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16c10:	4681      	mov	r9, r0
   16c12:	4688      	mov	r8, r1
   16c14:	4617      	mov	r7, r2
   16c16:	461e      	mov	r6, r3
	if (radio_scan_is_enabled()) {
   16c18:	f7ff f8a6 	bl	15d68 <radio_scan_is_enabled>
   16c1c:	b988      	cbnz	r0, 16c42 <ll_scan_params_set+0x36>
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	ll_scan.type = type;
   16c1e:	4d0a      	ldr	r5, [pc, #40]	; (16c48 <ll_scan_params_set+0x3c>)
   16c20:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   16c22:	f8a5 8000 	strh.w	r8, [r5]
	ll_scan.type = type;
   16c26:	f369 0400 	bfi	r4, r9, #0, #1
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   16c2a:	4622      	mov	r2, r4
   16c2c:	f366 0242 	bfi	r2, r6, #1, #2
	ll_scan.filter_policy = filter_policy;
   16c30:	4613      	mov	r3, r2
   16c32:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   16c36:	806f      	strh	r7, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   16c38:	f362 03c4 	bfi	r3, r2, #3, #2
   16c3c:	712b      	strb	r3, [r5, #4]

	return 0;
   16c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16c42:	200c      	movs	r0, #12
}
   16c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16c48:	2000188c 	.word	0x2000188c

00016c4c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   16c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c4e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   16c50:	b920      	cbnz	r0, 16c5c <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   16c52:	b005      	add	sp, #20
   16c54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   16c58:	f7ff bd2a 	b.w	166b0 <radio_scan_disable>
	} else if (radio_scan_is_enabled()) {
   16c5c:	f7ff f884 	bl	15d68 <radio_scan_is_enabled>
   16c60:	4606      	mov	r6, r0
   16c62:	b9d0      	cbnz	r0, 16c9a <ll_scan_enable+0x4e>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   16c64:	4d0e      	ldr	r5, [pc, #56]	; (16ca0 <ll_scan_enable+0x54>)
   16c66:	792c      	ldrb	r4, [r5, #4]
   16c68:	f004 0701 	and.w	r7, r4, #1
   16c6c:	f3c4 0440 	ubfx	r4, r4, #1, #1
   16c70:	4601      	mov	r1, r0
   16c72:	4620      	mov	r0, r4
   16c74:	f7fa f816 	bl	10ca4 <ll_addr_get>
   16c78:	22ff      	movs	r2, #255	; 0xff
   16c7a:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   16c7c:	792a      	ldrb	r2, [r5, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   16c7e:	882b      	ldrh	r3, [r5, #0]
   16c80:	9602      	str	r6, [sp, #8]
   16c82:	f3c2 02c1 	ubfx	r2, r2, #3, #2
   16c86:	9201      	str	r2, [sp, #4]
   16c88:	886a      	ldrh	r2, [r5, #2]
   16c8a:	9200      	str	r2, [sp, #0]
   16c8c:	4621      	mov	r1, r4
   16c8e:	4602      	mov	r2, r0
   16c90:	4638      	mov	r0, r7
   16c92:	f7ff fc61 	bl	16558 <radio_scan_enable>
}
   16c96:	b005      	add	sp, #20
   16c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   16c9a:	2000      	movs	r0, #0
   16c9c:	e7fb      	b.n	16c96 <ll_scan_enable+0x4a>
   16c9e:	bf00      	nop
   16ca0:	2000188c 	.word	0x2000188c

00016ca4 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
   16ca4:	b928      	cbnz	r0, 16cb2 <ctrl_filter_get+0xe>
   16ca6:	4040      	eors	r0, r0
   16ca8:	f380 8811 	msr	BASEPRI, r0
   16cac:	f04f 0004 	mov.w	r0, #4
   16cb0:	df02      	svc	2
	return &wl_filter;
#endif
}
   16cb2:	4801      	ldr	r0, [pc, #4]	; (16cb8 <ctrl_filter_get+0x14>)
   16cb4:	4770      	bx	lr
   16cb6:	bf00      	nop
   16cb8:	20001892 	.word	0x20001892

00016cbc <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
   16cbc:	2008      	movs	r0, #8
   16cbe:	4770      	bx	lr

00016cc0 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
   16cc0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16cc2:	f7ff f843 	bl	15d4c <radio_adv_filter_pol_get>
   16cc6:	4604      	mov	r4, r0
   16cc8:	b110      	cbz	r0, 16cd0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16cca:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
   16ccc:	4620      	mov	r0, r4
   16cce:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16cd0:	f7ff f852 	bl	15d78 <radio_scan_filter_pol_get>
   16cd4:	07c3      	lsls	r3, r0, #31
   16cd6:	d4f8      	bmi.n	16cca <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
   16cd8:	4b02      	ldr	r3, [pc, #8]	; (16ce4 <ll_wl_clear+0x24>)
   16cda:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
   16cdc:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
   16cde:	4b02      	ldr	r3, [pc, #8]	; (16ce8 <ll_wl_clear+0x28>)
   16ce0:	701c      	strb	r4, [r3, #0]
	return 0;
   16ce2:	e7f3      	b.n	16ccc <ll_wl_clear+0xc>
   16ce4:	20001892 	.word	0x20001892
   16ce8:	20001dc0 	.word	0x20001dc0

00016cec <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
   16cec:	b570      	push	{r4, r5, r6, lr}
   16cee:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16cf0:	f7ff f82c 	bl	15d4c <radio_adv_filter_pol_get>
   16cf4:	4605      	mov	r5, r0
   16cf6:	b110      	cbz	r0, 16cfe <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16cf8:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   16cfa:	4628      	mov	r0, r5
   16cfc:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16cfe:	f7ff f83b 	bl	15d78 <radio_scan_filter_pol_get>
   16d02:	07c3      	lsls	r3, r0, #31
   16d04:	d4f8      	bmi.n	16cf8 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   16d06:	7823      	ldrb	r3, [r4, #0]
   16d08:	2bff      	cmp	r3, #255	; 0xff
   16d0a:	d103      	bne.n	16d14 <ll_wl_add+0x28>
		wl_anon = 1;
   16d0c:	4b11      	ldr	r3, [pc, #68]	; (16d54 <ll_wl_add+0x68>)
   16d0e:	2201      	movs	r2, #1
   16d10:	701a      	strb	r2, [r3, #0]
		return 0;
   16d12:	e7f2      	b.n	16cfa <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
   16d14:	4910      	ldr	r1, [pc, #64]	; (16d58 <ll_wl_add+0x6c>)
   16d16:	780a      	ldrb	r2, [r1, #0]
   16d18:	2aff      	cmp	r2, #255	; 0xff
   16d1a:	d018      	beq.n	16d4e <ll_wl_add+0x62>
   16d1c:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
   16d1e:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
   16d22:	07f6      	lsls	r6, r6, #31
   16d24:	d411      	bmi.n	16d4a <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
   16d26:	2601      	movs	r6, #1
   16d28:	4086      	lsls	r6, r0
   16d2a:	4332      	orrs	r2, r6
   16d2c:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16d2e:	f003 0301 	and.w	r3, r3, #1
   16d32:	784a      	ldrb	r2, [r1, #1]
   16d34:	4083      	lsls	r3, r0
   16d36:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16d38:	2206      	movs	r2, #6
   16d3a:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16d3e:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16d40:	3002      	adds	r0, #2
   16d42:	1c61      	adds	r1, r4, #1
   16d44:	f7e9 fc88 	bl	658 <memcpy>
   16d48:	e7d7      	b.n	16cfa <ll_wl_add+0xe>
	     index++) {
   16d4a:	3001      	adds	r0, #1
   16d4c:	e7e7      	b.n	16d1e <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   16d4e:	2507      	movs	r5, #7
   16d50:	e7d3      	b.n	16cfa <ll_wl_add+0xe>
   16d52:	bf00      	nop
   16d54:	20001dc0 	.word	0x20001dc0
   16d58:	20001892 	.word	0x20001892

00016d5c <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
   16d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d60:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16d62:	f7fe fff3 	bl	15d4c <radio_adv_filter_pol_get>
   16d66:	4606      	mov	r6, r0
   16d68:	b118      	cbz	r0, 16d72 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16d6a:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
   16d6c:	4630      	mov	r0, r6
   16d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   16d72:	f7ff f801 	bl	15d78 <radio_scan_filter_pol_get>
   16d76:	07c1      	lsls	r1, r0, #31
   16d78:	d4f7      	bmi.n	16d6a <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   16d7a:	f897 8000 	ldrb.w	r8, [r7]
   16d7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   16d82:	d102      	bne.n	16d8a <ll_wl_remove+0x2e>
		wl_anon = 0;
   16d84:	4b16      	ldr	r3, [pc, #88]	; (16de0 <ll_wl_remove+0x84>)
   16d86:	701e      	strb	r6, [r3, #0]
		return 0;
   16d88:	e7f0      	b.n	16d6c <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   16d8a:	4c16      	ldr	r4, [pc, #88]	; (16de4 <ll_wl_remove+0x88>)
   16d8c:	7823      	ldrb	r3, [r4, #0]
   16d8e:	b133      	cbz	r3, 16d9e <ll_wl_remove+0x42>
   16d90:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   16d92:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   16d94:	f04f 0906 	mov.w	r9, #6
	while (index--) {
   16d98:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   16d9c:	d201      	bcs.n	16da2 <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
   16d9e:	2612      	movs	r6, #18
   16da0:	e7e4      	b.n	16d6c <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
   16da2:	7823      	ldrb	r3, [r4, #0]
   16da4:	40eb      	lsrs	r3, r5
   16da6:	07da      	lsls	r2, r3, #31
   16da8:	d5f6      	bpl.n	16d98 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   16daa:	7863      	ldrb	r3, [r4, #1]
   16dac:	412b      	asrs	r3, r5
   16dae:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   16db2:	07db      	lsls	r3, r3, #31
   16db4:	d4f0      	bmi.n	16d98 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   16db6:	fb09 4005 	mla	r0, r9, r5, r4
   16dba:	2206      	movs	r2, #6
   16dbc:	4639      	mov	r1, r7
   16dbe:	3002      	adds	r0, #2
   16dc0:	f7e9 fc35 	bl	62e <memcmp>
		     (addr_type & 0x01)) &&
   16dc4:	2800      	cmp	r0, #0
   16dc6:	d1e7      	bne.n	16d98 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
   16dc8:	2301      	movs	r3, #1
   16dca:	40ab      	lsls	r3, r5
   16dcc:	7822      	ldrb	r2, [r4, #0]
   16dce:	43db      	mvns	r3, r3
   16dd0:	b2db      	uxtb	r3, r3
   16dd2:	401a      	ands	r2, r3
   16dd4:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   16dd6:	7862      	ldrb	r2, [r4, #1]
   16dd8:	4013      	ands	r3, r2
   16dda:	7063      	strb	r3, [r4, #1]
   16ddc:	e7c6      	b.n	16d6c <ll_wl_remove+0x10>
   16dde:	bf00      	nop
   16de0:	20001dc0 	.word	0x20001dc0
   16de4:	20001892 	.word	0x20001892

00016de8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   16de8:	4a03      	ldr	r2, [pc, #12]	; (16df8 <ll_filter_reset+0x10>)
   16dea:	2300      	movs	r3, #0
   16dec:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   16dee:	4a03      	ldr	r2, [pc, #12]	; (16dfc <ll_filter_reset+0x14>)
   16df0:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   16df2:	7053      	strb	r3, [r2, #1]
   16df4:	4770      	bx	lr
   16df6:	bf00      	nop
   16df8:	20001dc0 	.word	0x20001dc0
   16dfc:	20001892 	.word	0x20001892

00016e00 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   16e00:	4b05      	ldr	r3, [pc, #20]	; (16e18 <cntr_init+0x18>)
   16e02:	2200      	movs	r2, #0
   16e04:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   16e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   16e0c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   16e10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   16e14:	4770      	bx	lr
   16e16:	bf00      	nop
   16e18:	4000b000 	.word	0x4000b000

00016e1c <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   16e1c:	4a04      	ldr	r2, [pc, #16]	; (16e30 <cntr_start+0x14>)
   16e1e:	7813      	ldrb	r3, [r2, #0]
   16e20:	1c59      	adds	r1, r3, #1
   16e22:	7011      	strb	r1, [r2, #0]
   16e24:	2001      	movs	r0, #1
   16e26:	b913      	cbnz	r3, 16e2e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   16e28:	4a02      	ldr	r2, [pc, #8]	; (16e34 <cntr_start+0x18>)
   16e2a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   16e2c:	4618      	mov	r0, r3
}
   16e2e:	4770      	bx	lr
   16e30:	200018c4 	.word	0x200018c4
   16e34:	4000b000 	.word	0x4000b000

00016e38 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   16e38:	4b09      	ldr	r3, [pc, #36]	; (16e60 <cntr_stop+0x28>)
   16e3a:	7818      	ldrb	r0, [r3, #0]
   16e3c:	b928      	cbnz	r0, 16e4a <cntr_stop+0x12>
   16e3e:	4040      	eors	r0, r0
   16e40:	f380 8811 	msr	BASEPRI, r0
   16e44:	f04f 0004 	mov.w	r0, #4
   16e48:	df02      	svc	2

	if (--_refcount) {
   16e4a:	3801      	subs	r0, #1
   16e4c:	b2c0      	uxtb	r0, r0
   16e4e:	7018      	strb	r0, [r3, #0]
   16e50:	2301      	movs	r3, #1
   16e52:	b910      	cbnz	r0, 16e5a <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   16e54:	4a03      	ldr	r2, [pc, #12]	; (16e64 <cntr_stop+0x2c>)
   16e56:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   16e58:	4770      	bx	lr
		return 1;
   16e5a:	4618      	mov	r0, r3
}
   16e5c:	4770      	bx	lr
   16e5e:	bf00      	nop
   16e60:	200018c4 	.word	0x200018c4
   16e64:	4000b000 	.word	0x4000b000

00016e68 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   16e68:	4b01      	ldr	r3, [pc, #4]	; (16e70 <cntr_cnt_get+0x8>)
   16e6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   16e6e:	4770      	bx	lr
   16e70:	4000b000 	.word	0x4000b000

00016e74 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   16e74:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   16e78:	4b01      	ldr	r3, [pc, #4]	; (16e80 <cntr_cmp_set+0xc>)
   16e7a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   16e7e:	4770      	bx	lr
   16e80:	4000b000 	.word	0x4000b000

00016e84 <isr>:
{
	return get(rng_isr, octets, rand);
}

static int isr(struct rand *rng, bool store)
{
   16e84:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
   16e86:	b1d0      	cbz	r0, 16ebe <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
   16e88:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
   16e8a:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
   16e8c:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
   16e8e:	1c53      	adds	r3, r2, #1
   16e90:	b2db      	uxtb	r3, r3
		last = 0;
   16e92:	42ab      	cmp	r3, r5
   16e94:	bf08      	it	eq
   16e96:	2300      	moveq	r3, #0
	if (last == rng->first) {
   16e98:	42a3      	cmp	r3, r4
   16e9a:	d010      	beq.n	16ebe <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   16e9c:	b161      	cbz	r1, 16eb8 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   16e9e:	490a      	ldr	r1, [pc, #40]	; (16ec8 <isr+0x44>)
   16ea0:	4402      	add	r2, r0
   16ea2:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   16ea6:	7111      	strb	r1, [r2, #4]
	rng->last = last;
   16ea8:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
   16eaa:	3301      	adds	r3, #1
   16eac:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
   16eae:	429d      	cmp	r5, r3
   16eb0:	bf08      	it	eq
   16eb2:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
   16eb4:	42a3      	cmp	r3, r4
   16eb6:	d005      	beq.n	16ec4 <isr+0x40>
		return 0;
	}

	return -EBUSY;
   16eb8:	f06f 000f 	mvn.w	r0, #15
   16ebc:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   16ebe:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16ec2:	bd30      	pop	{r4, r5, pc}
		return 0;
   16ec4:	2000      	movs	r0, #0
}
   16ec6:	bd30      	pop	{r4, r5, pc}
   16ec8:	4000d000 	.word	0x4000d000

00016ecc <get>:
{
   16ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(rng);
   16ed0:	4606      	mov	r6, r0
   16ed2:	b928      	cbnz	r0, 16ee0 <get+0x14>
   16ed4:	4040      	eors	r0, r0
   16ed6:	f380 8811 	msr	BASEPRI, r0
   16eda:	f04f 0004 	mov.w	r0, #4
   16ede:	df02      	svc	2
	first = rng->first;
   16ee0:	7884      	ldrb	r4, [r0, #2]
	last = rng->last;
   16ee2:	78c3      	ldrb	r3, [r0, #3]
   16ee4:	1d27      	adds	r7, r4, #4
	if (first <= last) {
   16ee6:	429c      	cmp	r4, r3
   16ee8:	440a      	add	r2, r1
		s = &rng->rand[first];
   16eea:	4407      	add	r7, r0
	if (first <= last) {
   16eec:	d821      	bhi.n	16f32 <get+0x66>
		avail = last - first;
   16eee:	1b1b      	subs	r3, r3, r4
   16ef0:	b2db      	uxtb	r3, r3
		if (octets < avail) {
   16ef2:	4299      	cmp	r1, r3
			remaining = avail - octets;
   16ef4:	bf3f      	itttt	cc
   16ef6:	b2c8      	uxtbcc	r0, r1
   16ef8:	1a1b      	subcc	r3, r3, r0
   16efa:	fa5f fe83 	uxtbcc.w	lr, r3
			avail = octets;
   16efe:	4603      	movcc	r3, r0
		first += avail;
   16f00:	441c      	add	r4, r3
		octets -= avail;
   16f02:	eba1 0003 	sub.w	r0, r1, r3
			remaining = 0;
   16f06:	bf28      	it	cs
   16f08:	f04f 0e00 	movcs.w	lr, #0
		first += avail;
   16f0c:	b2e4      	uxtb	r4, r4
   16f0e:	4615      	mov	r5, r2
   16f10:	443b      	add	r3, r7
		while (avail--) {
   16f12:	429f      	cmp	r7, r3
   16f14:	d108      	bne.n	16f28 <get+0x5c>
	if (remaining < rng->threshold) {
   16f16:	7873      	ldrb	r3, [r6, #1]
		rng->first = first;
   16f18:	70b4      	strb	r4, [r6, #2]
	if (remaining < rng->threshold) {
   16f1a:	4573      	cmp	r3, lr
		NRF_RNG->TASKS_START = 1;
   16f1c:	bf82      	ittt	hi
   16f1e:	4b20      	ldrhi	r3, [pc, #128]	; (16fa0 <get+0xd4>)
   16f20:	2201      	movhi	r2, #1
   16f22:	601a      	strhi	r2, [r3, #0]
}
   16f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
   16f28:	f817 2b01 	ldrb.w	r2, [r7], #1
   16f2c:	f805 2d01 	strb.w	r2, [r5, #-1]!
   16f30:	e7ef      	b.n	16f12 <get+0x46>
		avail = rng->count - first;
   16f32:	7805      	ldrb	r5, [r0, #0]
   16f34:	1b2d      	subs	r5, r5, r4
   16f36:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
   16f38:	42a9      	cmp	r1, r5
   16f3a:	d228      	bcs.n	16f8e <get+0xc2>
			remaining = avail + last - octets;
   16f3c:	b2c8      	uxtb	r0, r1
   16f3e:	eba3 0e00 	sub.w	lr, r3, r0
   16f42:	4475      	add	r5, lr
			first += avail;
   16f44:	4404      	add	r4, r0
			remaining = avail + last - octets;
   16f46:	fa5f fe85 	uxtb.w	lr, r5
			first += avail;
   16f4a:	b2e4      	uxtb	r4, r4
			avail = octets;
   16f4c:	4605      	mov	r5, r0
		octets -= avail;
   16f4e:	1b48      	subs	r0, r1, r5
   16f50:	eb07 0c05 	add.w	ip, r7, r5
   16f54:	4611      	mov	r1, r2
		while (avail--) {
   16f56:	4567      	cmp	r7, ip
   16f58:	d11c      	bne.n	16f94 <get+0xc8>
   16f5a:	1b55      	subs	r5, r2, r5
		if (octets && last) {
   16f5c:	2800      	cmp	r0, #0
   16f5e:	d0da      	beq.n	16f16 <get+0x4a>
   16f60:	2b00      	cmp	r3, #0
   16f62:	d0d8      	beq.n	16f16 <get+0x4a>
			if (octets < last) {
   16f64:	4298      	cmp	r0, r3
				remaining = last - octets;
   16f66:	bf3a      	itte	cc
   16f68:	b2c4      	uxtbcc	r4, r0
   16f6a:	1b1b      	subcc	r3, r3, r4
   16f6c:	461c      	movcs	r4, r3
			s = &rng->rand[0];
   16f6e:	f106 0204 	add.w	r2, r6, #4
				remaining = last - octets;
   16f72:	bf34      	ite	cc
   16f74:	fa5f fe83 	uxtbcc.w	lr, r3
				remaining = 0;
   16f78:	f04f 0e00 	movcs.w	lr, #0
			octets -= last;
   16f7c:	1b00      	subs	r0, r0, r4
   16f7e:	1913      	adds	r3, r2, r4
			while (last--) {
   16f80:	429a      	cmp	r2, r3
   16f82:	d0c8      	beq.n	16f16 <get+0x4a>
				*(--d) = *s++;
   16f84:	f812 1b01 	ldrb.w	r1, [r2], #1
   16f88:	f805 1d01 	strb.w	r1, [r5, #-1]!
   16f8c:	e7f8      	b.n	16f80 <get+0xb4>
   16f8e:	469e      	mov	lr, r3
			first = 0;
   16f90:	2400      	movs	r4, #0
   16f92:	e7dc      	b.n	16f4e <get+0x82>
			*(--d) = *s++;
   16f94:	f817 8b01 	ldrb.w	r8, [r7], #1
   16f98:	f801 8d01 	strb.w	r8, [r1, #-1]!
   16f9c:	e7db      	b.n	16f56 <get+0x8a>
   16f9e:	bf00      	nop
   16fa0:	4000d000 	.word	0x4000d000

00016fa4 <init>:
{
   16fa4:	b510      	push	{r4, lr}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   16fa6:	1d1c      	adds	r4, r3, #4
   16fa8:	42a2      	cmp	r2, r4
   16faa:	d805      	bhi.n	16fb8 <init+0x14>
   16fac:	4040      	eors	r0, r0
   16fae:	f380 8811 	msr	BASEPRI, r0
   16fb2:	f04f 0004 	mov.w	r0, #4
   16fb6:	df02      	svc	2
	*rng = (struct rand *)context;
   16fb8:	6001      	str	r1, [r0, #0]
	p->threshold = threshold;
   16fba:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   16fbc:	2300      	movs	r3, #0
   16fbe:	70cb      	strb	r3, [r1, #3]
   16fc0:	708b      	strb	r3, [r1, #2]
	p->count = len - offsetof(struct rand, rand);
   16fc2:	3a04      	subs	r2, #4
	if (!rng_isr || !rng_thr) {
   16fc4:	4b08      	ldr	r3, [pc, #32]	; (16fe8 <init+0x44>)
	p->count = len - offsetof(struct rand, rand);
   16fc6:	700a      	strb	r2, [r1, #0]
	if (!rng_isr || !rng_thr) {
   16fc8:	681b      	ldr	r3, [r3, #0]
   16fca:	b113      	cbz	r3, 16fd2 <init+0x2e>
   16fcc:	4b07      	ldr	r3, [pc, #28]	; (16fec <init+0x48>)
   16fce:	681b      	ldr	r3, [r3, #0]
   16fd0:	b94b      	cbnz	r3, 16fe6 <init+0x42>
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   16fd2:	4b07      	ldr	r3, [pc, #28]	; (16ff0 <init+0x4c>)
   16fd4:	2201      	movs	r2, #1
		NRF_RNG->EVENTS_VALRDY = 0;
   16fd6:	2100      	movs	r1, #0
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   16fd8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   16fdc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   16fe0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   16fe4:	601a      	str	r2, [r3, #0]
   16fe6:	bd10      	pop	{r4, pc}
   16fe8:	200018c8 	.word	0x200018c8
   16fec:	200018cc 	.word	0x200018cc
   16ff0:	4000d000 	.word	0x4000d000

00016ff4 <rand_init>:
	init(&rng_thr, context, context_len, threshold);
   16ff4:	4613      	mov	r3, r2
   16ff6:	460a      	mov	r2, r1
   16ff8:	4601      	mov	r1, r0
   16ffa:	4801      	ldr	r0, [pc, #4]	; (17000 <rand_init+0xc>)
   16ffc:	f7ff bfd2 	b.w	16fa4 <init>
   17000:	200018cc 	.word	0x200018cc

00017004 <rand_isr_init>:
	init(&rng_isr, context, context_len, threshold);
   17004:	4613      	mov	r3, r2
   17006:	460a      	mov	r2, r1
   17008:	4601      	mov	r1, r0
   1700a:	4801      	ldr	r0, [pc, #4]	; (17010 <rand_isr_init+0xc>)
   1700c:	f7ff bfca 	b.w	16fa4 <init>
   17010:	200018c8 	.word	0x200018c8

00017014 <rand_get>:
	return get(rng_thr, octets, rand);
   17014:	4b02      	ldr	r3, [pc, #8]	; (17020 <rand_get+0xc>)
   17016:	460a      	mov	r2, r1
   17018:	4601      	mov	r1, r0
   1701a:	6818      	ldr	r0, [r3, #0]
   1701c:	f7ff bf56 	b.w	16ecc <get>
   17020:	200018cc 	.word	0x200018cc

00017024 <rand_isr_get>:
	return get(rng_isr, octets, rand);
   17024:	4b02      	ldr	r3, [pc, #8]	; (17030 <rand_isr_get+0xc>)
   17026:	460a      	mov	r2, r1
   17028:	4601      	mov	r1, r0
   1702a:	6818      	ldr	r0, [r3, #0]
   1702c:	f7ff bf4e 	b.w	16ecc <get>
   17030:	200018c8 	.word	0x200018c8

00017034 <isr_rand>:

void isr_rand(void *param)
{
   17034:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   17036:	4b0e      	ldr	r3, [pc, #56]	; (17070 <isr_rand+0x3c>)
   17038:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1703c:	b1bb      	cbz	r3, 1706e <isr_rand+0x3a>
		int ret;

		ret = isr(rng_isr, true);
   1703e:	4b0d      	ldr	r3, [pc, #52]	; (17074 <isr_rand+0x40>)
   17040:	2101      	movs	r1, #1
   17042:	6818      	ldr	r0, [r3, #0]
   17044:	f7ff ff1e 	bl	16e84 <isr>
		if (ret != -EBUSY) {
   17048:	f110 0f10 	cmn.w	r0, #16
   1704c:	d007      	beq.n	1705e <isr_rand+0x2a>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   1704e:	4b0a      	ldr	r3, [pc, #40]	; (17078 <isr_rand+0x44>)
   17050:	3037      	adds	r0, #55	; 0x37
   17052:	bf14      	ite	ne
   17054:	2100      	movne	r1, #0
   17056:	2101      	moveq	r1, #1
   17058:	6818      	ldr	r0, [r3, #0]
   1705a:	f7ff ff13 	bl	16e84 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   1705e:	4b04      	ldr	r3, [pc, #16]	; (17070 <isr_rand+0x3c>)
   17060:	2200      	movs	r2, #0

		if (ret != -EBUSY) {
   17062:	3010      	adds	r0, #16
		NRF_RNG->EVENTS_VALRDY = 0;
   17064:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
   17068:	bf1c      	itt	ne
   1706a:	2201      	movne	r2, #1
   1706c:	605a      	strne	r2, [r3, #4]
   1706e:	bd08      	pop	{r3, pc}
   17070:	4000d000 	.word	0x4000d000
   17074:	200018c8 	.word	0x200018c8
   17078:	200018cc 	.word	0x200018cc

0001707c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   1707c:	4b11      	ldr	r3, [pc, #68]	; (170c4 <do_ecb+0x48>)
{
   1707e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   17080:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   17082:	2500      	movs	r5, #0
   17084:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   17086:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   17088:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1708c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   17090:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   17094:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   17096:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   1709a:	b934      	cbnz	r4, 170aa <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1709c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   170a0:	b91c      	cbnz	r4, 170aa <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   170a2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   170a6:	2c00      	cmp	r4, #0
   170a8:	d1f5      	bne.n	17096 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   170aa:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   170ac:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   170b0:	2c00      	cmp	r4, #0
   170b2:	d1e8      	bne.n	17086 <do_ecb+0xa>
   170b4:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   170b8:	2e00      	cmp	r6, #0
   170ba:	d0e4      	beq.n	17086 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   170bc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   170c0:	bd70      	pop	{r4, r5, r6, pc}
   170c2:	bf00      	nop
   170c4:	4000e000 	.word	0x4000e000

000170c8 <ecb_encrypt_be>:
}

void ecb_encrypt_be(u8_t const *const key_be, u8_t const *const clear_text_be,
		    u8_t * const cipher_text_be)
{
   170c8:	b530      	push	{r4, r5, lr}
   170ca:	b08d      	sub	sp, #52	; 0x34
   170cc:	460d      	mov	r5, r1
   170ce:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   170d0:	4601      	mov	r1, r0
   170d2:	2210      	movs	r2, #16
   170d4:	4668      	mov	r0, sp
   170d6:	f7e9 fabf 	bl	658 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   170da:	2210      	movs	r2, #16
   170dc:	4629      	mov	r1, r5
   170de:	eb0d 0002 	add.w	r0, sp, r2
   170e2:	f7e9 fab9 	bl	658 <memcpy>

	do_ecb(&ecb);
   170e6:	4668      	mov	r0, sp
   170e8:	f7ff ffc8 	bl	1707c <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   170ec:	2210      	movs	r2, #16
   170ee:	a908      	add	r1, sp, #32
   170f0:	4620      	mov	r0, r4
   170f2:	f7e9 fab1 	bl	658 <memcpy>
}
   170f6:	b00d      	add	sp, #52	; 0x34
   170f8:	bd30      	pop	{r4, r5, pc}

000170fa <ecb_encrypt>:

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   170fa:	b570      	push	{r4, r5, r6, lr}
   170fc:	b08c      	sub	sp, #48	; 0x30
   170fe:	460e      	mov	r6, r1
   17100:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   17102:	4601      	mov	r1, r0
   17104:	2210      	movs	r2, #16
   17106:	4668      	mov	r0, sp
{
   17108:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1710a:	f7f8 fdbf 	bl	fc8c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1710e:	2210      	movs	r2, #16
   17110:	eb0d 0002 	add.w	r0, sp, r2
   17114:	4631      	mov	r1, r6
   17116:	f7f8 fdb9 	bl	fc8c <mem_rcopy>

	do_ecb(&ecb);
   1711a:	4668      	mov	r0, sp
   1711c:	f7ff ffae 	bl	1707c <do_ecb>

	if (cipher_text_le) {
   17120:	b125      	cbz	r5, 1712c <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   17122:	2210      	movs	r2, #16
   17124:	a908      	add	r1, sp, #32
   17126:	4628      	mov	r0, r5
   17128:	f7f8 fdb0 	bl	fc8c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1712c:	b124      	cbz	r4, 17138 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1712e:	2210      	movs	r2, #16
   17130:	a908      	add	r1, sp, #32
   17132:	4620      	mov	r0, r4
   17134:	f7e9 fa90 	bl	658 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   17138:	b00c      	add	sp, #48	; 0x30
   1713a:	bd70      	pop	{r4, r5, r6, pc}

0001713c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   1713c:	4b07      	ldr	r3, [pc, #28]	; (1715c <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1713e:	4a08      	ldr	r2, [pc, #32]	; (17160 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   17140:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   17144:	4907      	ldr	r1, [pc, #28]	; (17164 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   17146:	4a08      	ldr	r2, [pc, #32]	; (17168 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   17148:	2800      	cmp	r0, #0
   1714a:	bf14      	ite	ne
   1714c:	4610      	movne	r0, r2
   1714e:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   17150:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   17152:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   17156:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1715a:	4770      	bx	lr
   1715c:	4001f000 	.word	0x4001f000
   17160:	40008140 	.word	0x40008140
   17164:	40001004 	.word	0x40001004
   17168:	40001000 	.word	0x40001000

0001716c <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1716c:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1716e:	4e2c      	ldr	r6, [pc, #176]	; (17220 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   17170:	4f2c      	ldr	r7, [pc, #176]	; (17224 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   17172:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   17174:	4b2c      	ldr	r3, [pc, #176]	; (17228 <sw_switch.isra.9+0xbc>)
   17176:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1717a:	b22b      	sxth	r3, r5
   1717c:	00dc      	lsls	r4, r3, #3
   1717e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   17182:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   17186:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1718a:	f105 040b 	add.w	r4, r5, #11
   1718e:	b2e4      	uxtb	r4, r4
   17190:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   17192:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   17196:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1719a:	3fc0      	subs	r7, #192	; 0xc0
   1719c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   171a0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   171a4:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
   171a8:	2800      	cmp	r0, #0
   171aa:	d034      	beq.n	17216 <sw_switch.isra.9+0xaa>
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_NS;
   171ac:	f24a 075a 	movw	r7, #41050	; 0xa05a
   171b0:	f649 4040 	movw	r0, #40000	; 0x9c40
   171b4:	2a02      	cmp	r2, #2
   171b6:	bf0c      	ite	eq
   171b8:	4602      	moveq	r2, r0
   171ba:	463a      	movne	r2, r7
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   171bc:	f242 47b8 	movw	r7, #9400	; 0x24b8
   171c0:	f241 504a 	movw	r0, #5450	; 0x154a
   171c4:	2902      	cmp	r1, #2
   171c6:	bf18      	it	ne
   171c8:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   171ca:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
   171ce:	4401      	add	r1, r0
   171d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   171d4:	fbb1 f1f2 	udiv	r1, r1, r2
		    hal_radio_tx_ready_delay_ns_get(phy_next, flags_next) +
		    hal_radio_rx_chain_delay_ns_get(phy_curr, 1));

		HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   171d8:	4a14      	ldr	r2, [pc, #80]	; (1722c <sw_switch.isra.9+0xc0>)
   171da:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   171de:	009b      	lsls	r3, r3, #2
   171e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   171e4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		}
#endif /* CONFIG_SOC_NRF52840 */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   171e8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   171ec:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   171ee:	bf8b      	itete	hi
   171f0:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   171f4:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   171f6:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
   171f8:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   171fc:	bf88      	it	hi
   171fe:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   17202:	4b08      	ldr	r3, [pc, #32]	; (17224 <sw_switch.isra.9+0xb8>)
   17204:	f44f 6290 	mov.w	r2, #1152	; 0x480
   17208:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
	NRF_PPI_regw_sideeffects();
#endif

	sw_tifs_toggle += 1;
   1720c:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1720e:	f003 0301 	and.w	r3, r3, #1
   17212:	7033      	strb	r3, [r6, #0]
   17214:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   17216:	4a06      	ldr	r2, [pc, #24]	; (17230 <sw_switch.isra.9+0xc4>)
   17218:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1721c:	212d      	movs	r1, #45	; 0x2d
   1721e:	e7de      	b.n	171de <sw_switch.isra.9+0x72>
   17220:	20001aec 	.word	0x20001aec
   17224:	4001f000 	.word	0x4001f000
   17228:	4000110c 	.word	0x4000110c
   1722c:	40001000 	.word	0x40001000
   17230:	40001004 	.word	0x40001004

00017234 <isr_radio>:
	if (sfp_radio_isr) {
   17234:	4b02      	ldr	r3, [pc, #8]	; (17240 <isr_radio+0xc>)
   17236:	681b      	ldr	r3, [r3, #0]
   17238:	b103      	cbz	r3, 1723c <isr_radio+0x8>
		sfp_radio_isr();
   1723a:	4718      	bx	r3
   1723c:	4770      	bx	lr
   1723e:	bf00      	nop
   17240:	20001ae8 	.word	0x20001ae8

00017244 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   17244:	4b06      	ldr	r3, [pc, #24]	; (17260 <radio_isr_set+0x1c>)
   17246:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   17248:	4b06      	ldr	r3, [pc, #24]	; (17264 <radio_isr_set+0x20>)
   1724a:	2210      	movs	r2, #16
   1724c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   17250:	4b05      	ldr	r3, [pc, #20]	; (17268 <radio_isr_set+0x24>)
   17252:	2202      	movs	r2, #2
   17254:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   17258:	2001      	movs	r0, #1
   1725a:	f7e9 bda3 	b.w	da4 <_arch_irq_enable>
   1725e:	bf00      	nop
   17260:	20001ae8 	.word	0x20001ae8
   17264:	40001000 	.word	0x40001000
   17268:	e000e100 	.word	0xe000e100

0001726c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1726c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   17274:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   17276:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1727a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1727e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   17282:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   17286:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1728a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1728e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   17292:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   17296:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1729a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1729e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   172a2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   172a6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   172aa:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   172ae:	4770      	bx	lr

000172b0 <radio_reset>:
{
   172b0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   172b2:	2001      	movs	r0, #1
   172b4:	f7e9 fd84 	bl	dc0 <_arch_irq_disable>
	NRF_RADIO->POWER =
   172b8:	4b03      	ldr	r3, [pc, #12]	; (172c8 <radio_reset+0x18>)
   172ba:	2200      	movs	r2, #0
   172bc:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   172c0:	2201      	movs	r2, #1
   172c2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   172c6:	bd08      	pop	{r3, pc}
   172c8:	40001000 	.word	0x40001000

000172cc <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   172cc:	4b06      	ldr	r3, [pc, #24]	; (172e8 <radio_phy_set+0x1c>)
	switch (phy) {
   172ce:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   172d0:	bf0c      	ite	eq
   172d2:	2204      	moveq	r2, #4
   172d4:	2203      	movne	r2, #3
   172d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   172da:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   172de:	f042 0201 	orr.w	r2, r2, #1
   172e2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   172e6:	4770      	bx	lr
   172e8:	40001000 	.word	0x40001000

000172ec <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   172ec:	4b01      	ldr	r3, [pc, #4]	; (172f4 <radio_tx_power_set+0x8>)
   172ee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   172f2:	4770      	bx	lr
   172f4:	40001000 	.word	0x40001000

000172f8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   172f8:	4b01      	ldr	r3, [pc, #4]	; (17300 <radio_freq_chan_set+0x8>)
   172fa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   172fe:	4770      	bx	lr
   17300:	40001000 	.word	0x40001000

00017304 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   17304:	4b07      	ldr	r3, [pc, #28]	; (17324 <radio_whiten_iv_set+0x20>)
   17306:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1730a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1730e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   17312:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   17316:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1731a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1731e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   17322:	4770      	bx	lr
   17324:	40001000 	.word	0x40001000

00017328 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   17328:	4a0a      	ldr	r2, [pc, #40]	; (17354 <radio_aa_set+0x2c>)
   1732a:	2300      	movs	r3, #0
   1732c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   17330:	2301      	movs	r3, #1
   17332:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   17336:	78c3      	ldrb	r3, [r0, #3]
   17338:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1733c:	7843      	ldrb	r3, [r0, #1]
   1733e:	7881      	ldrb	r1, [r0, #2]
   17340:	041b      	lsls	r3, r3, #16
   17342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   17346:	7801      	ldrb	r1, [r0, #0]
   17348:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1734c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   17350:	4770      	bx	lr
   17352:	bf00      	nop
   17354:	40001000 	.word	0x40001000

00017358 <radio_pkt_configure>:
	switch (phy) {
   17358:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1735c:	2b02      	cmp	r3, #2
{
   1735e:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   17360:	bf0c      	ite	eq
   17362:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
   17366:	2400      	movne	r4, #0
	if (dc) {
   17368:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1736a:	f1c0 0308 	rsb	r3, r0, #8
   1736e:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   17372:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   17376:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1737a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1737e:	4a0b      	ldr	r2, [pc, #44]	; (173ac <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   17380:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   17384:	bf48      	it	mi
   17386:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
   1738a:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1738c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   17390:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   17394:	4b06      	ldr	r3, [pc, #24]	; (173b0 <radio_pkt_configure+0x58>)
   17396:	4003      	ands	r3, r0
   17398:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1739c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   173a0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   173a4:	4319      	orrs	r1, r3
   173a6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   173aa:	bd10      	pop	{r4, pc}
   173ac:	40001000 	.word	0x40001000
   173b0:	fef80000 	.word	0xfef80000

000173b4 <radio_pkt_rx_set>:
   173b4:	4b01      	ldr	r3, [pc, #4]	; (173bc <radio_pkt_rx_set+0x8>)
   173b6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   173ba:	4770      	bx	lr
   173bc:	40001000 	.word	0x40001000

000173c0 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   173c0:	4b01      	ldr	r3, [pc, #4]	; (173c8 <radio_pkt_tx_set+0x8>)
   173c2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   173c6:	4770      	bx	lr
   173c8:	40001000 	.word	0x40001000

000173cc <radio_tx_ready_delay_get>:
	switch (phy) {
   173cc:	2802      	cmp	r0, #2
}
   173ce:	bf0c      	ite	eq
   173d0:	2028      	moveq	r0, #40	; 0x28
   173d2:	2029      	movne	r0, #41	; 0x29
   173d4:	4770      	bx	lr

000173d6 <radio_tx_chain_delay_get>:
}
   173d6:	2001      	movs	r0, #1
   173d8:	4770      	bx	lr

000173da <radio_rx_ready_delay_get>:
}
   173da:	2029      	movs	r0, #41	; 0x29
   173dc:	4770      	bx	lr

000173de <radio_rx_chain_delay_get>:
	switch (phy) {
   173de:	2802      	cmp	r0, #2
}
   173e0:	bf0c      	ite	eq
   173e2:	2006      	moveq	r0, #6
   173e4:	200a      	movne	r0, #10
   173e6:	4770      	bx	lr

000173e8 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   173e8:	4b01      	ldr	r3, [pc, #4]	; (173f0 <radio_rx_enable+0x8>)
   173ea:	2201      	movs	r2, #1
   173ec:	605a      	str	r2, [r3, #4]
   173ee:	4770      	bx	lr
   173f0:	40001000 	.word	0x40001000

000173f4 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   173f4:	4b01      	ldr	r3, [pc, #4]	; (173fc <radio_tx_enable+0x8>)
   173f6:	2201      	movs	r2, #1
   173f8:	601a      	str	r2, [r3, #0]
   173fa:	4770      	bx	lr
   173fc:	40001000 	.word	0x40001000

00017400 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   17400:	4a07      	ldr	r2, [pc, #28]	; (17420 <radio_disable+0x20>)
   17402:	f44f 6390 	mov.w	r3, #1152	; 0x480
   17406:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1740a:	2301      	movs	r3, #1
   1740c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1740e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   17410:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   17414:	2100      	movs	r1, #0
   17416:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   1741a:	6113      	str	r3, [r2, #16]
   1741c:	4770      	bx	lr
   1741e:	bf00      	nop
   17420:	4001f000 	.word	0x4001f000

00017424 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   17424:	4b04      	ldr	r3, [pc, #16]	; (17438 <radio_status_reset+0x14>)
   17426:	2200      	movs	r2, #0
   17428:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1742c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   17430:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   17434:	4770      	bx	lr
   17436:	bf00      	nop
   17438:	40001000 	.word	0x40001000

0001743c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1743c:	4b03      	ldr	r3, [pc, #12]	; (1744c <radio_is_ready+0x10>)
   1743e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   17442:	3000      	adds	r0, #0
   17444:	bf18      	it	ne
   17446:	2001      	movne	r0, #1
   17448:	4770      	bx	lr
   1744a:	bf00      	nop
   1744c:	40001000 	.word	0x40001000

00017450 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   17450:	4b03      	ldr	r3, [pc, #12]	; (17460 <radio_is_done+0x10>)
   17452:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   17456:	3000      	adds	r0, #0
   17458:	bf18      	it	ne
   1745a:	2001      	movne	r0, #1
   1745c:	4770      	bx	lr
   1745e:	bf00      	nop
   17460:	40001000 	.word	0x40001000

00017464 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   17464:	4b03      	ldr	r3, [pc, #12]	; (17474 <radio_is_idle+0x10>)
   17466:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1746a:	fab0 f080 	clz	r0, r0
   1746e:	0940      	lsrs	r0, r0, #5
   17470:	4770      	bx	lr
   17472:	bf00      	nop
   17474:	40001000 	.word	0x40001000

00017478 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   17478:	4b04      	ldr	r3, [pc, #16]	; (1748c <radio_crc_configure+0x14>)
   1747a:	f240 1203 	movw	r2, #259	; 0x103
   1747e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   17482:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   17486:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   1748a:	4770      	bx	lr
   1748c:	40001000 	.word	0x40001000

00017490 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   17490:	4b03      	ldr	r3, [pc, #12]	; (174a0 <radio_crc_is_valid+0x10>)
   17492:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17496:	3000      	adds	r0, #0
   17498:	bf18      	it	ne
   1749a:	2001      	movne	r0, #1
   1749c:	4770      	bx	lr
   1749e:	bf00      	nop
   174a0:	40001000 	.word	0x40001000

000174a4 <radio_pkt_empty_get>:
}
   174a4:	4800      	ldr	r0, [pc, #0]	; (174a8 <radio_pkt_empty_get+0x4>)
   174a6:	4770      	bx	lr
   174a8:	200019dc 	.word	0x200019dc

000174ac <radio_pkt_scratch_get>:
}
   174ac:	4800      	ldr	r0, [pc, #0]	; (174b0 <radio_pkt_scratch_get+0x4>)
   174ae:	4770      	bx	lr
   174b0:	200019e0 	.word	0x200019e0

000174b4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   174b4:	4b04      	ldr	r3, [pc, #16]	; (174c8 <radio_switch_complete_and_rx+0x14>)
   174b6:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   174b8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   174ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   174be:	4602      	mov	r2, r0
   174c0:	4608      	mov	r0, r1
   174c2:	f7ff be53 	b.w	1716c <sw_switch.isra.9>
   174c6:	bf00      	nop
   174c8:	40001000 	.word	0x40001000

000174cc <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   174cc:	4b03      	ldr	r3, [pc, #12]	; (174dc <radio_switch_complete_and_tx+0x10>)
   174ce:	2103      	movs	r1, #3
   174d0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   174d4:	4601      	mov	r1, r0
   174d6:	2001      	movs	r0, #1
   174d8:	f7ff be48 	b.w	1716c <sw_switch.isra.9>
   174dc:	40001000 	.word	0x40001000

000174e0 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   174e0:	4b05      	ldr	r3, [pc, #20]	; (174f8 <radio_switch_complete_and_disable+0x18>)
   174e2:	2203      	movs	r2, #3
   174e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   174e8:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   174ec:	f44f 6290 	mov.w	r2, #1152	; 0x480
   174f0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   174f4:	4770      	bx	lr
   174f6:	bf00      	nop
   174f8:	40001000 	.word	0x40001000

000174fc <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   174fc:	4a03      	ldr	r2, [pc, #12]	; (1750c <radio_rssi_measure+0x10>)
   174fe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17502:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   17506:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   1750a:	4770      	bx	lr
   1750c:	40001000 	.word	0x40001000

00017510 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   17510:	4b01      	ldr	r3, [pc, #4]	; (17518 <radio_rssi_get+0x8>)
   17512:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   17516:	4770      	bx	lr
   17518:	40001000 	.word	0x40001000

0001751c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1751c:	4b02      	ldr	r3, [pc, #8]	; (17528 <radio_rssi_status_reset+0xc>)
   1751e:	2200      	movs	r2, #0
   17520:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   17524:	4770      	bx	lr
   17526:	bf00      	nop
   17528:	40001000 	.word	0x40001000

0001752c <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1752c:	4b03      	ldr	r3, [pc, #12]	; (1753c <radio_rssi_is_ready+0x10>)
   1752e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   17532:	3000      	adds	r0, #0
   17534:	bf18      	it	ne
   17536:	2001      	movne	r0, #1
   17538:	4770      	bx	lr
   1753a:	bf00      	nop
   1753c:	40001000 	.word	0x40001000

00017540 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   17540:	b530      	push	{r4, r5, lr}
   17542:	2400      	movs	r4, #0
   17544:	00a3      	lsls	r3, r4, #2
   17546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1754a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1754e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   17550:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   17554:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   17556:	8895      	ldrh	r5, [r2, #4]
   17558:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   1755c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1755e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   17562:	d1ef      	bne.n	17544 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   17564:	4b02      	ldr	r3, [pc, #8]	; (17570 <radio_filter_configure+0x30>)
   17566:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1756a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1756e:	bd30      	pop	{r4, r5, pc}
   17570:	40001000 	.word	0x40001000

00017574 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   17574:	4a03      	ldr	r2, [pc, #12]	; (17584 <radio_filter_disable+0x10>)
   17576:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1757a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1757e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   17582:	4770      	bx	lr
   17584:	40001000 	.word	0x40001000

00017588 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   17588:	4b02      	ldr	r3, [pc, #8]	; (17594 <radio_filter_status_reset+0xc>)
   1758a:	2200      	movs	r2, #0
   1758c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   17590:	4770      	bx	lr
   17592:	bf00      	nop
   17594:	40001000 	.word	0x40001000

00017598 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   17598:	4b03      	ldr	r3, [pc, #12]	; (175a8 <radio_filter_has_match+0x10>)
   1759a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1759e:	3000      	adds	r0, #0
   175a0:	bf18      	it	ne
   175a2:	2001      	movne	r0, #1
   175a4:	4770      	bx	lr
   175a6:	bf00      	nop
   175a8:	40001000 	.word	0x40001000

000175ac <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   175ac:	4b01      	ldr	r3, [pc, #4]	; (175b4 <radio_filter_match_get+0x8>)
   175ae:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   175b2:	4770      	bx	lr
   175b4:	40001000 	.word	0x40001000

000175b8 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   175b8:	4b05      	ldr	r3, [pc, #20]	; (175d0 <radio_tmr_status_reset+0x18>)
   175ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   175be:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   175c2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   175c6:	227f      	movs	r2, #127	; 0x7f
   175c8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   175cc:	4770      	bx	lr
   175ce:	bf00      	nop
   175d0:	4000b000 	.word	0x4000b000

000175d4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   175d4:	4b03      	ldr	r3, [pc, #12]	; (175e4 <radio_tmr_tifs_set+0x10>)
   175d6:	4a04      	ldr	r2, [pc, #16]	; (175e8 <radio_tmr_tifs_set+0x14>)
   175d8:	781b      	ldrb	r3, [r3, #0]
   175da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   175de:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   175e2:	4770      	bx	lr
   175e4:	20001aec 	.word	0x20001aec
   175e8:	40009000 	.word	0x40009000

000175ec <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   175ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   175f0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   175f4:	4c30      	ldr	r4, [pc, #192]	; (176b8 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
   175f6:	4d31      	ldr	r5, [pc, #196]	; (176bc <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   175f8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   175fc:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   175fe:	bf88      	it	hi
   17600:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
   17604:	4b2e      	ldr	r3, [pc, #184]	; (176c0 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   17606:	4c2f      	ldr	r4, [pc, #188]	; (176c4 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
   17608:	bf82      	ittt	hi
   1760a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1760e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   17612:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   17616:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   17618:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
   1761c:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1761e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   17620:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   17624:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   17626:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1762a:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1762e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   17632:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   17636:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   1763a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1763e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   17642:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
   17646:	4920      	ldr	r1, [pc, #128]	; (176c8 <radio_tmr_start+0xdc>)
   17648:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   1764c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   17650:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   17654:	f7ff fd72 	bl	1713c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   17658:	4b1c      	ldr	r3, [pc, #112]	; (176cc <radio_tmr_start+0xe0>)
   1765a:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1765c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   17660:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   17664:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   17668:	601e      	str	r6, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   1766a:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1766e:	3b74      	subs	r3, #116	; 0x74
   17670:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   17674:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   17678:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_TASK;

#if !defined(CONFIG_SOC_NRF52840)
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   1767c:	f503 739a 	add.w	r3, r3, #308	; 0x134
   17680:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
   17684:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   17688:	33c4      	adds	r3, #196	; 0xc4
   1768a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   1768e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   17692:	3bc0      	subs	r3, #192	; 0xc0
   17694:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
   17698:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1769c:	33c8      	adds	r3, #200	; 0xc8
   1769e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !defined(CONFIG_SOC_NRF52840) */
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   176a2:	f44f 6310 	mov.w	r3, #2304	; 0x900
   176a6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   176aa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   176ae:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   176b2:	4628      	mov	r0, r5
   176b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176b8:	7ff0bdbf 	.word	0x7ff0bdbf
   176bc:	000f4240 	.word	0x000f4240
   176c0:	40008000 	.word	0x40008000
   176c4:	4000b000 	.word	0x4000b000
   176c8:	4000b148 	.word	0x4000b148
   176cc:	40009000 	.word	0x40009000

000176d0 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   176d0:	4a04      	ldr	r2, [pc, #16]	; (176e4 <radio_tmr_stop+0x14>)
   176d2:	2301      	movs	r3, #1
   176d4:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   176d6:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   176d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   176dc:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   176de:	6113      	str	r3, [r2, #16]
   176e0:	4770      	bx	lr
   176e2:	bf00      	nop
   176e4:	40008000 	.word	0x40008000

000176e8 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   176e8:	4b0c      	ldr	r3, [pc, #48]	; (1771c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   176ea:	4a0d      	ldr	r2, [pc, #52]	; (17720 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   176ec:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   176f0:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   176f4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   176f8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   176fc:	3240      	adds	r2, #64	; 0x40
   176fe:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   17702:	f502 7280 	add.w	r2, r2, #256	; 0x100
   17706:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   1770a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   1770e:	3a34      	subs	r2, #52	; 0x34
   17710:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   17714:	2218      	movs	r2, #24
   17716:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1771a:	4770      	bx	lr
   1771c:	40008000 	.word	0x40008000
   17720:	40001104 	.word	0x40001104

00017724 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   17724:	4b0b      	ldr	r3, [pc, #44]	; (17754 <radio_tmr_aa_capture+0x30>)
   17726:	4a0c      	ldr	r2, [pc, #48]	; (17758 <radio_tmr_aa_capture+0x34>)
   17728:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   1772c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17730:	3240      	adds	r2, #64	; 0x40
   17732:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   17736:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   1773a:	3a3c      	subs	r2, #60	; 0x3c
   1773c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   17740:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17744:	3240      	adds	r2, #64	; 0x40
   17746:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   1774a:	220c      	movs	r2, #12
   1774c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   17750:	4770      	bx	lr
   17752:	bf00      	nop
   17754:	4001f000 	.word	0x4001f000
   17758:	40001100 	.word	0x40001100

0001775c <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1775c:	4b01      	ldr	r3, [pc, #4]	; (17764 <radio_tmr_aa_get+0x8>)
   1775e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   17762:	4770      	bx	lr
   17764:	40008000 	.word	0x40008000

00017768 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   17768:	4b01      	ldr	r3, [pc, #4]	; (17770 <radio_tmr_aa_save+0x8>)
   1776a:	6018      	str	r0, [r3, #0]
   1776c:	4770      	bx	lr
   1776e:	bf00      	nop
   17770:	20001ae4 	.word	0x20001ae4

00017774 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   17774:	4b01      	ldr	r3, [pc, #4]	; (1777c <radio_tmr_aa_restore+0x8>)
   17776:	6818      	ldr	r0, [r3, #0]
   17778:	4770      	bx	lr
   1777a:	bf00      	nop
   1777c:	20001ae4 	.word	0x20001ae4

00017780 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   17780:	4b01      	ldr	r3, [pc, #4]	; (17788 <radio_tmr_ready_get+0x8>)
   17782:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   17786:	4770      	bx	lr
   17788:	40008000 	.word	0x40008000

0001778c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   1778c:	4b06      	ldr	r3, [pc, #24]	; (177a8 <radio_tmr_end_capture+0x1c>)
   1778e:	4a07      	ldr	r2, [pc, #28]	; (177ac <radio_tmr_end_capture+0x20>)
   17790:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   17794:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   17798:	323c      	adds	r2, #60	; 0x3c
   1779a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   1779e:	2220      	movs	r2, #32
   177a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   177a4:	4770      	bx	lr
   177a6:	bf00      	nop
   177a8:	4001f000 	.word	0x4001f000
   177ac:	4000110c 	.word	0x4000110c

000177b0 <radio_tmr_end_get>:
#endif
}

u32_t radio_tmr_end_get(void)
{
	return EVENT_TIMER->CC[2];
   177b0:	4b01      	ldr	r3, [pc, #4]	; (177b8 <radio_tmr_end_get+0x8>)
   177b2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   177b6:	4770      	bx	lr
   177b8:	40008000 	.word	0x40008000

000177bc <radio_ccm_rx_pkt_set>:
{
	SIM_SIDE_EFFECTS_MISSING;

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   177bc:	4b16      	ldr	r3, [pc, #88]	; (17818 <radio_ccm_rx_pkt_set+0x5c>)
{
   177be:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   177c0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   177c2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   177c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   177c8:	4e14      	ldr	r6, [pc, #80]	; (1781c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   177ca:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   177ce:	4d14      	ldr	r5, [pc, #80]	; (17820 <radio_ccm_rx_pkt_set+0x64>)
   177d0:	2902      	cmp	r1, #2
   177d2:	bf0c      	ite	eq
   177d4:	4629      	moveq	r1, r5
   177d6:	4631      	movne	r1, r6
#endif
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
   177d8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   177dc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   177e0:	4810      	ldr	r0, [pc, #64]	; (17824 <radio_ccm_rx_pkt_set+0x68>)
   177e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   177e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   177ea:	4a0f      	ldr	r2, [pc, #60]	; (17828 <radio_ccm_rx_pkt_set+0x6c>)
   177ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   177f0:	490e      	ldr	r1, [pc, #56]	; (1782c <radio_ccm_rx_pkt_set+0x70>)
   177f2:	4a0f      	ldr	r2, [pc, #60]	; (17830 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
   177f4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   177f8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   177fc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   17800:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   17804:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   17808:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   1780c:	2140      	movs	r1, #64	; 0x40
   1780e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   17812:	2201      	movs	r2, #1
   17814:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   17816:	bd70      	pop	{r4, r5, r6, pc}
   17818:	4000f000 	.word	0x4000f000
   1781c:	01000001 	.word	0x01000001
   17820:	01010001 	.word	0x01010001
   17824:	200019e0 	.word	0x200019e0
   17828:	200018d0 	.word	0x200018d0
   1782c:	40001104 	.word	0x40001104
   17830:	4001f000 	.word	0x4001f000

00017834 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17834:	b510      	push	{r4, lr}
	SIM_SIDE_EFFECTS_MISSING;

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17836:	4b0e      	ldr	r3, [pc, #56]	; (17870 <radio_ccm_tx_pkt_set+0x3c>)
   17838:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1783a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1783c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17840:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   17844:	4c0b      	ldr	r4, [pc, #44]	; (17874 <radio_ccm_tx_pkt_set+0x40>)
   17846:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1784a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   1784e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17852:	4809      	ldr	r0, [pc, #36]	; (17878 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   17854:	4909      	ldr	r1, [pc, #36]	; (1787c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   17856:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1785a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1785e:	2101      	movs	r1, #1
   17860:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17864:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17868:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   1786c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   1786e:	bd10      	pop	{r4, pc}
   17870:	4000f000 	.word	0x4000f000
   17874:	01010000 	.word	0x01010000
   17878:	200019e0 	.word	0x200019e0
   1787c:	200018d0 	.word	0x200018d0

00017880 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	SIM_SIDE_EFFECTS_MISSING;

	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   17880:	4b0c      	ldr	r3, [pc, #48]	; (178b4 <radio_ccm_is_done+0x34>)
   17882:	2202      	movs	r2, #2
   17884:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17888:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1788c:	b16a      	cbz	r2, 178aa <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   1788e:	2202      	movs	r2, #2
   17890:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   17894:	4a08      	ldr	r2, [pc, #32]	; (178b8 <radio_ccm_is_done+0x38>)
   17896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1789a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   1789e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   178a2:	fab0 f080 	clz	r0, r0
   178a6:	0940      	lsrs	r0, r0, #5
   178a8:	4770      	bx	lr
   178aa:	bf20      	wfe
  __ASM volatile ("sev");
   178ac:	bf40      	sev
  __ASM volatile ("wfe");
   178ae:	bf20      	wfe
   178b0:	e7ea      	b.n	17888 <radio_ccm_is_done+0x8>
   178b2:	bf00      	nop
   178b4:	4000f000 	.word	0x4000f000
   178b8:	e000e100 	.word	0xe000e100

000178bc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   178bc:	4b03      	ldr	r3, [pc, #12]	; (178cc <radio_ccm_mic_is_valid+0x10>)
   178be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   178c2:	3000      	adds	r0, #0
   178c4:	bf18      	it	ne
   178c6:	2001      	movne	r0, #1
   178c8:	4770      	bx	lr
   178ca:	bf00      	nop
   178cc:	4000f000 	.word	0x4000f000

000178d0 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   178d0:	4b01      	ldr	r3, [pc, #4]	; (178d8 <radio_ar_match_get+0x8>)
   178d2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   178d6:	4770      	bx	lr
   178d8:	4000f000 	.word	0x4000f000

000178dc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   178dc:	4a04      	ldr	r2, [pc, #16]	; (178f0 <radio_ar_status_reset+0x14>)
   178de:	2300      	movs	r3, #0
   178e0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   178e4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   178e8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   178ec:	4770      	bx	lr
   178ee:	bf00      	nop
   178f0:	40001000 	.word	0x40001000

000178f4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   178f4:	4b08      	ldr	r3, [pc, #32]	; (17918 <radio_ar_has_match+0x24>)
   178f6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   178fa:	b160      	cbz	r0, 17916 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   178fc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17900:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   17904:	b138      	cbz	r0, 17916 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   17906:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1790a:	b120      	cbz	r0, 17916 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1790c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   17910:	fab0 f080 	clz	r0, r0
   17914:	0940      	lsrs	r0, r0, #5
}
   17916:	4770      	bx	lr
   17918:	40001000 	.word	0x40001000

0001791c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1791c:	2901      	cmp	r1, #1
   1791e:	d005      	beq.n	1792c <mayfly_enable_cb+0x10>
   17920:	4040      	eors	r0, r0
   17922:	f380 8811 	msr	BASEPRI, r0
   17926:	f04f 0004 	mov.w	r0, #4
   1792a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   1792c:	2018      	movs	r0, #24
	if (enable) {
   1792e:	b10a      	cbz	r2, 17934 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   17930:	f7e9 ba38 	b.w	da4 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   17934:	f7e9 ba44 	b.w	dc0 <_arch_irq_disable>

00017938 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17938:	b139      	cbz	r1, 1794a <mayfly_is_enabled+0x12>
   1793a:	2901      	cmp	r1, #1
   1793c:	d008      	beq.n	17950 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   1793e:	4040      	eors	r0, r0
   17940:	f380 8811 	msr	BASEPRI, r0
   17944:	f04f 0004 	mov.w	r0, #4
   17948:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   1794a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   1794c:	f7e9 ba46 	b.w	ddc <_arch_irq_is_enabled>
   17950:	2018      	movs	r0, #24
   17952:	e7fb      	b.n	1794c <mayfly_is_enabled+0x14>

00017954 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17954:	4288      	cmp	r0, r1
   17956:	d00a      	beq.n	1796e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   17958:	b918      	cbnz	r0, 17962 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1795a:	1e4b      	subs	r3, r1, #1
   1795c:	4258      	negs	r0, r3
   1795e:	4158      	adcs	r0, r3
   17960:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   17962:	2801      	cmp	r0, #1
   17964:	d105      	bne.n	17972 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   17966:	fab1 f081 	clz	r0, r1
   1796a:	0940      	lsrs	r0, r0, #5
   1796c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1796e:	2001      	movs	r0, #1
   17970:	4770      	bx	lr
   17972:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   17974:	4770      	bx	lr
	...

00017978 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   17978:	4b08      	ldr	r3, [pc, #32]	; (1799c <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   1797a:	b139      	cbz	r1, 1798c <mayfly_pend+0x14>
   1797c:	2901      	cmp	r1, #1
   1797e:	d00a      	beq.n	17996 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   17980:	4040      	eors	r0, r0
   17982:	f380 8811 	msr	BASEPRI, r0
   17986:	f04f 0004 	mov.w	r0, #4
   1798a:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1798c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17990:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17994:	4770      	bx	lr
   17996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1799a:	e7f9      	b.n	17990 <mayfly_pend+0x18>
   1799c:	e000e100 	.word	0xe000e100

000179a0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   179a0:	4b01      	ldr	r3, [pc, #4]	; (179a8 <net_buf_pool_get+0x8>)
   179a2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   179a6:	4770      	bx	lr
   179a8:	20006bc8 	.word	0x20006bc8

000179ac <net_buf_id>:
#define UNINIT_BUF(pool, n) (struct net_buf *)(((u8_t *)(pool->__bufs)) + \
					       ((n) * BUF_SIZE(pool)))

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   179ac:	7983      	ldrb	r3, [r0, #6]
	u8_t *pool_start = (u8_t *)pool->__bufs;
   179ae:	4a09      	ldr	r2, [pc, #36]	; (179d4 <net_buf_id+0x28>)
   179b0:	eb02 1243 	add.w	r2, r2, r3, lsl #5
	u8_t *buf_ptr = (u8_t *)buf;

	return (buf_ptr - pool_start) / BUF_SIZE(pool);
   179b4:	69d3      	ldr	r3, [r2, #28]
   179b6:	1ac0      	subs	r0, r0, r3
   179b8:	8a93      	ldrh	r3, [r2, #20]
   179ba:	8ad2      	ldrh	r2, [r2, #22]
   179bc:	3303      	adds	r3, #3
   179be:	3203      	adds	r2, #3
   179c0:	f022 0203 	bic.w	r2, r2, #3
   179c4:	f023 0303 	bic.w	r3, r3, #3
   179c8:	4413      	add	r3, r2
   179ca:	3310      	adds	r3, #16
}
   179cc:	fbb0 f0f3 	udiv	r0, r0, r3
   179d0:	4770      	bx	lr
   179d2:	bf00      	nop
   179d4:	20006bc8 	.word	0x20006bc8

000179d8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   179d8:	b570      	push	{r4, r5, r6, lr}
   179da:	4604      	mov	r4, r0
	__asm__ volatile(
   179dc:	f04f 0320 	mov.w	r3, #32
   179e0:	f3ef 8511 	mrs	r5, BASEPRI
   179e4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   179e8:	8a43      	ldrh	r3, [r0, #18]
   179ea:	b363      	cbz	r3, 17a46 <net_buf_alloc+0x6e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   179ec:	8a02      	ldrh	r2, [r0, #16]
   179ee:	429a      	cmp	r2, r3
   179f0:	d90f      	bls.n	17a12 <net_buf_alloc+0x3a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   179f2:	2100      	movs	r1, #0
   179f4:	f000 fbdd 	bl	181b2 <k_queue_get>
			if (buf) {
   179f8:	b158      	cbz	r0, 17a12 <net_buf_alloc+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   179fa:	f385 8811 	msr	BASEPRI, r5
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   179fe:	2301      	movs	r3, #1
   17a00:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
   17a02:	2300      	movs	r3, #0
   17a04:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
   17a06:	6003      	str	r3, [r0, #0]
	buf->len   = 0;
   17a08:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   17a0a:	f100 0310 	add.w	r3, r0, #16
   17a0e:	6083      	str	r3, [r0, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
   17a10:	e01f      	b.n	17a52 <net_buf_alloc+0x7a>
		uninit_count = pool->uninit_count--;
   17a12:	8a66      	ldrh	r6, [r4, #18]
   17a14:	1e73      	subs	r3, r6, #1
   17a16:	8263      	strh	r3, [r4, #18]
   17a18:	f385 8811 	msr	BASEPRI, r5
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   17a1c:	8aa1      	ldrh	r1, [r4, #20]
   17a1e:	8ae0      	ldrh	r0, [r4, #22]
   17a20:	8a23      	ldrh	r3, [r4, #16]
   17a22:	3003      	adds	r0, #3
   17a24:	1cca      	adds	r2, r1, #3
   17a26:	f022 0203 	bic.w	r2, r2, #3
   17a2a:	f020 0003 	bic.w	r0, r0, #3
   17a2e:	4410      	add	r0, r2
   17a30:	69e2      	ldr	r2, [r4, #28]
   17a32:	1b9b      	subs	r3, r3, r6
   17a34:	3010      	adds	r0, #16
   17a36:	fb03 2000 	mla	r0, r3, r0, r2
	return pool - _net_buf_pool_list;
   17a3a:	4b06      	ldr	r3, [pc, #24]	; (17a54 <net_buf_alloc+0x7c>)
	buf->size = pool->buf_size;
   17a3c:	81c1      	strh	r1, [r0, #14]
	return pool - _net_buf_pool_list;
   17a3e:	1ae4      	subs	r4, r4, r3
   17a40:	1164      	asrs	r4, r4, #5
	buf->pool_id = pool_id(pool);
   17a42:	7184      	strb	r4, [r0, #6]
		goto success;
   17a44:	e7db      	b.n	179fe <net_buf_alloc+0x26>
   17a46:	f385 8811 	msr	BASEPRI, r5
	buf = k_lifo_get(&pool->free, timeout);
   17a4a:	f000 fbb2 	bl	181b2 <k_queue_get>
	if (!buf) {
   17a4e:	2800      	cmp	r0, #0
   17a50:	d1d5      	bne.n	179fe <net_buf_alloc+0x26>
}
   17a52:	bd70      	pop	{r4, r5, r6, pc}
   17a54:	20006bc8 	.word	0x20006bc8

00017a58 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   17a58:	b570      	push	{r4, r5, r6, lr}
   17a5a:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   17a5c:	f000 fba9 	bl	181b2 <k_queue_get>
	if (!buf) {
   17a60:	4605      	mov	r5, r0
   17a62:	b128      	cbz	r0, 17a70 <net_buf_get+0x18>
   17a64:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17a66:	7963      	ldrb	r3, [r4, #5]
   17a68:	f013 0301 	ands.w	r3, r3, #1
   17a6c:	d102      	bne.n	17a74 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17a6e:	6023      	str	r3, [r4, #0]

	return buf;
}
   17a70:	4628      	mov	r0, r5
   17a72:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17a74:	2100      	movs	r1, #0
   17a76:	4630      	mov	r0, r6
   17a78:	f000 fb9b 	bl	181b2 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   17a7c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   17a7e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   17a80:	f023 0301 	bic.w	r3, r3, #1
   17a84:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17a86:	4604      	mov	r4, r0
   17a88:	e7ed      	b.n	17a66 <net_buf_get+0xe>

00017a8a <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17a8a:	f100 0310 	add.w	r3, r0, #16
   17a8e:	4419      	add	r1, r3
   17a90:	6081      	str	r1, [r0, #8]
   17a92:	4770      	bx	lr

00017a94 <net_buf_slist_put>:
}

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   17a94:	b510      	push	{r4, lr}
	unsigned int key;

	NET_BUF_ASSERT(list);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   17a96:	460b      	mov	r3, r1
   17a98:	681c      	ldr	r4, [r3, #0]
   17a9a:	b964      	cbnz	r4, 17ab6 <net_buf_slist_put+0x22>
	__asm__ volatile(
   17a9c:	f04f 0220 	mov.w	r2, #32
   17aa0:	f3ef 8411 	mrs	r4, BASEPRI
   17aa4:	f382 8811 	msr	BASEPRI, r2
	if (!list->tail) {
   17aa8:	6842      	ldr	r2, [r0, #4]
   17aaa:	b952      	cbnz	r2, 17ac2 <net_buf_slist_put+0x2e>
		list->head = (sys_snode_t *)head;
   17aac:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   17aae:	6043      	str	r3, [r0, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17ab0:	f384 8811 	msr	BASEPRI, r4
   17ab4:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   17ab6:	795a      	ldrb	r2, [r3, #5]
   17ab8:	f042 0201 	orr.w	r2, r2, #1
   17abc:	715a      	strb	r2, [r3, #5]
   17abe:	4623      	mov	r3, r4
   17ac0:	e7ea      	b.n	17a98 <net_buf_slist_put+0x4>
		list->tail->next = (sys_snode_t *)head;
   17ac2:	6011      	str	r1, [r2, #0]
   17ac4:	e7f3      	b.n	17aae <net_buf_slist_put+0x1a>

00017ac6 <net_buf_slist_get>:
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   17ac6:	b570      	push	{r4, r5, r6, lr}
   17ac8:	4603      	mov	r3, r0
	__asm__ volatile(
   17aca:	f04f 0220 	mov.w	r2, #32
   17ace:	f3ef 8111 	mrs	r1, BASEPRI
   17ad2:	f382 8811 	msr	BASEPRI, r2
   17ad6:	6800      	ldr	r0, [r0, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   17ad8:	b128      	cbz	r0, 17ae6 <net_buf_slist_get+0x20>
	if (list->tail == node) {
   17ada:	685c      	ldr	r4, [r3, #4]
	list->head = node->next;
   17adc:	6802      	ldr	r2, [r0, #0]
   17ade:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
   17ae0:	42a0      	cmp	r0, r4
		list->tail = list->head;
   17ae2:	bf08      	it	eq
   17ae4:	605a      	streq	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17ae6:	f381 8811 	msr	BASEPRI, r1

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   17aea:	b128      	cbz	r0, 17af8 <net_buf_slist_get+0x32>
   17aec:	4602      	mov	r2, r0
		return NULL;
	}

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17aee:	7951      	ldrb	r1, [r2, #5]
   17af0:	f011 0101 	ands.w	r1, r1, #1
   17af4:	d101      	bne.n	17afa <net_buf_slist_get+0x34>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   17af6:	6011      	str	r1, [r2, #0]

	return buf;
}
   17af8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   17afa:	f04f 0120 	mov.w	r1, #32
   17afe:	f3ef 8511 	mrs	r5, BASEPRI
   17b02:	f381 8811 	msr	BASEPRI, r1
   17b06:	6819      	ldr	r1, [r3, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   17b08:	b129      	cbz	r1, 17b16 <net_buf_slist_get+0x50>
	if (list->tail == node) {
   17b0a:	685e      	ldr	r6, [r3, #4]
	list->head = node->next;
   17b0c:	680c      	ldr	r4, [r1, #0]
   17b0e:	601c      	str	r4, [r3, #0]
	if (list->tail == node) {
   17b10:	42b1      	cmp	r1, r6
		list->tail = list->head;
   17b12:	bf08      	it	eq
   17b14:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   17b16:	6011      	str	r1, [r2, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17b18:	f385 8811 	msr	BASEPRI, r5
		frag->flags &= ~NET_BUF_FRAGS;
   17b1c:	7951      	ldrb	r1, [r2, #5]
   17b1e:	f021 0101 	bic.w	r1, r1, #1
   17b22:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   17b24:	6812      	ldr	r2, [r2, #0]
   17b26:	e7e2      	b.n	17aee <net_buf_slist_get+0x28>

00017b28 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   17b28:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   17b2a:	460a      	mov	r2, r1
   17b2c:	6814      	ldr	r4, [r2, #0]
   17b2e:	b914      	cbnz	r4, 17b36 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   17b30:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   17b32:	f000 bb22 	b.w	1817a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   17b36:	7953      	ldrb	r3, [r2, #5]
   17b38:	f043 0301 	orr.w	r3, r3, #1
   17b3c:	7153      	strb	r3, [r2, #5]
   17b3e:	4622      	mov	r2, r4
   17b40:	e7f4      	b.n	17b2c <net_buf_put+0x4>
	...

00017b44 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   17b44:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   17b46:	4c0c      	ldr	r4, [pc, #48]	; (17b78 <net_buf_unref+0x34>)
	while (buf) {
   17b48:	b900      	cbnz	r0, 17b4c <net_buf_unref+0x8>
   17b4a:	bd38      	pop	{r3, r4, r5, pc}
		if (--buf->ref > 0) {
   17b4c:	7903      	ldrb	r3, [r0, #4]
		struct net_buf *frags = buf->frags;
   17b4e:	6805      	ldr	r5, [r0, #0]
		if (--buf->ref > 0) {
   17b50:	3b01      	subs	r3, #1
   17b52:	b2db      	uxtb	r3, r3
   17b54:	7103      	strb	r3, [r0, #4]
   17b56:	2b00      	cmp	r3, #0
   17b58:	d1f7      	bne.n	17b4a <net_buf_unref+0x6>
		buf->frags = NULL;
   17b5a:	6003      	str	r3, [r0, #0]
		pool = net_buf_pool_get(buf->pool_id);
   17b5c:	7983      	ldrb	r3, [r0, #6]
		if (pool->destroy) {
   17b5e:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   17b62:	6992      	ldr	r2, [r2, #24]
   17b64:	b112      	cbz	r2, 17b6c <net_buf_unref+0x28>
			pool->destroy(buf);
   17b66:	4790      	blx	r2
{
   17b68:	4628      	mov	r0, r5
   17b6a:	e7ed      	b.n	17b48 <net_buf_unref+0x4>
	k_lifo_put(&pool->free, buf);
   17b6c:	4601      	mov	r1, r0
   17b6e:	eb04 1043 	add.w	r0, r4, r3, lsl #5
   17b72:	f000 fafe 	bl	18172 <k_queue_prepend>
   17b76:	e7f7      	b.n	17b68 <net_buf_unref+0x24>
   17b78:	20006bc8 	.word	0x20006bc8

00017b7c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   17b7c:	7903      	ldrb	r3, [r0, #4]
   17b7e:	3301      	adds	r3, #1
   17b80:	7103      	strb	r3, [r0, #4]
	return buf;
}
   17b82:	4770      	bx	lr

00017b84 <net_buf_simple_add>:
	return buf->data + buf->len;
   17b84:	8883      	ldrh	r3, [r0, #4]
   17b86:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   17b88:	4419      	add	r1, r3
   17b8a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17b8c:	18d0      	adds	r0, r2, r3
   17b8e:	4770      	bx	lr

00017b90 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   17b90:	b430      	push	{r4, r5}
   17b92:	8883      	ldrh	r3, [r0, #4]
   17b94:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   17b96:	189d      	adds	r5, r3, r2
   17b98:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17b9a:	18e0      	adds	r0, r4, r3
}
   17b9c:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17b9e:	f7e8 bd5b 	b.w	658 <memcpy>

00017ba2 <net_buf_simple_add_u8>:
   17ba2:	8883      	ldrh	r3, [r0, #4]
   17ba4:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   17ba6:	b510      	push	{r4, lr}
	buf->len += len;
   17ba8:	1c5c      	adds	r4, r3, #1
   17baa:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   17bac:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   17bae:	18d0      	adds	r0, r2, r3
   17bb0:	bd10      	pop	{r4, pc}

00017bb2 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   17bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17bb4:	ab02      	add	r3, sp, #8
   17bb6:	8884      	ldrh	r4, [r0, #4]
   17bb8:	f823 1d02 	strh.w	r1, [r3, #-2]!
   17bbc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   17bbe:	1ca2      	adds	r2, r4, #2
   17bc0:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17bc2:	4619      	mov	r1, r3
   17bc4:	2202      	movs	r2, #2
   17bc6:	1928      	adds	r0, r5, r4
   17bc8:	f7e8 fd46 	bl	658 <memcpy>
}
   17bcc:	b003      	add	sp, #12
   17bce:	bd30      	pop	{r4, r5, pc}

00017bd0 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   17bd0:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   17bd2:	020b      	lsls	r3, r1, #8
   17bd4:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   17bd8:	a902      	add	r1, sp, #8
   17bda:	6804      	ldr	r4, [r0, #0]
   17bdc:	f821 3d02 	strh.w	r3, [r1, #-2]!
   17be0:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   17be2:	1c9a      	adds	r2, r3, #2
   17be4:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17be6:	2202      	movs	r2, #2
   17be8:	18e0      	adds	r0, r4, r3
   17bea:	f7e8 fd35 	bl	658 <memcpy>
}
   17bee:	b002      	add	sp, #8
   17bf0:	bd10      	pop	{r4, pc}

00017bf2 <net_buf_simple_add_be32>:
	val = sys_cpu_to_le32(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, u32_t val)
{
   17bf2:	b513      	push	{r0, r1, r4, lr}
   17bf4:	ba0b      	rev	r3, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be32(val);
   17bf6:	a902      	add	r1, sp, #8
   17bf8:	6804      	ldr	r4, [r0, #0]
   17bfa:	f841 3d04 	str.w	r3, [r1, #-4]!
   17bfe:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   17c00:	1d1a      	adds	r2, r3, #4
   17c02:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   17c04:	2204      	movs	r2, #4
   17c06:	18e0      	adds	r0, r4, r3
   17c08:	f7e8 fd26 	bl	658 <memcpy>
}
   17c0c:	b002      	add	sp, #8
   17c0e:	bd10      	pop	{r4, pc}

00017c10 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   17c10:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17c12:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   17c14:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   17c16:	4411      	add	r1, r2
	buf->data -= len;
   17c18:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17c1a:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   17c1c:	4618      	mov	r0, r3
   17c1e:	4770      	bx	lr

00017c20 <net_buf_simple_push_be16>:
	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
}

void net_buf_simple_push_be16(struct net_buf_simple *buf, u16_t val)
{
   17c20:	b507      	push	{r0, r1, r2, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   17c22:	020b      	lsls	r3, r1, #8
   17c24:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   17c28:	a902      	add	r1, sp, #8
	buf->len += len;
   17c2a:	8882      	ldrh	r2, [r0, #4]
	val = sys_cpu_to_be16(val);
   17c2c:	f821 3d02 	strh.w	r3, [r1, #-2]!
	buf->data -= len;
   17c30:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   17c32:	3202      	adds	r2, #2
	buf->data -= len;
   17c34:	3b02      	subs	r3, #2
   17c36:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17c38:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   17c3a:	2202      	movs	r2, #2
   17c3c:	4618      	mov	r0, r3
   17c3e:	f7e8 fd0b 	bl	658 <memcpy>
}
   17c42:	b003      	add	sp, #12
   17c44:	f85d fb04 	ldr.w	pc, [sp], #4

00017c48 <net_buf_simple_push_u8>:
	buf->data -= len;
   17c48:	6802      	ldr	r2, [r0, #0]
   17c4a:	1e53      	subs	r3, r2, #1
   17c4c:	6003      	str	r3, [r0, #0]
	buf->len += len;
   17c4e:	8883      	ldrh	r3, [r0, #4]
   17c50:	3301      	adds	r3, #1
   17c52:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   17c54:	f802 1c01 	strb.w	r1, [r2, #-1]
   17c58:	4770      	bx	lr

00017c5a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   17c5a:	8883      	ldrh	r3, [r0, #4]
   17c5c:	1a5b      	subs	r3, r3, r1
   17c5e:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   17c60:	6803      	ldr	r3, [r0, #0]
   17c62:	4419      	add	r1, r3
   17c64:	6001      	str	r1, [r0, #0]
}
   17c66:	4608      	mov	r0, r1
   17c68:	4770      	bx	lr

00017c6a <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   17c6a:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   17c6c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   17c6e:	2101      	movs	r1, #1
	val = buf->data[0];
   17c70:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   17c72:	f7ff fff2 	bl	17c5a <net_buf_simple_pull>

	return val;
}
   17c76:	4610      	mov	r0, r2
   17c78:	bd08      	pop	{r3, pc}

00017c7a <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   17c7a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   17c7c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c7e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   17c80:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c82:	f7ff ffea 	bl	17c5a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   17c86:	4610      	mov	r0, r2
   17c88:	bd08      	pop	{r3, pc}

00017c8a <net_buf_simple_pull_be16>:

u16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
   17c8a:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   17c8c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c8e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   17c90:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17c92:	f7ff ffe2 	bl	17c5a <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   17c96:	0210      	lsls	r0, r2, #8
   17c98:	ea40 2012 	orr.w	r0, r0, r2, lsr #8
}
   17c9c:	b280      	uxth	r0, r0
   17c9e:	bd08      	pop	{r3, pc}

00017ca0 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

u32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   17ca0:	b508      	push	{r3, lr}
	u32_t val;

	val = UNALIGNED_GET((u32_t *)buf->data);
   17ca2:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17ca4:	2104      	movs	r1, #4
	val = UNALIGNED_GET((u32_t *)buf->data);
   17ca6:	681a      	ldr	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   17ca8:	f7ff ffd7 	bl	17c5a <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
   17cac:	0610      	lsls	r0, r2, #24
   17cae:	0a13      	lsrs	r3, r2, #8
   17cb0:	ea40 6012 	orr.w	r0, r0, r2, lsr #24
   17cb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   17cb8:	0212      	lsls	r2, r2, #8
   17cba:	4318      	orrs	r0, r3
   17cbc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
}
   17cc0:	4310      	orrs	r0, r2
   17cc2:	bd08      	pop	{r3, pc}

00017cc4 <net_buf_simple_headroom>:

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17cc4:	f100 0308 	add.w	r3, r0, #8
   17cc8:	6800      	ldr	r0, [r0, #0]
}
   17cca:	1ac0      	subs	r0, r0, r3
   17ccc:	4770      	bx	lr

00017cce <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   17cce:	6802      	ldr	r2, [r0, #0]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   17cd0:	88c3      	ldrh	r3, [r0, #6]
	return buf->data - buf->__buf;
   17cd2:	f100 0108 	add.w	r1, r0, #8
   17cd6:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   17cd8:	8880      	ldrh	r0, [r0, #4]
   17cda:	1a9b      	subs	r3, r3, r2
}
   17cdc:	1a18      	subs	r0, r3, r0
   17cde:	4770      	bx	lr

00017ce0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   17ce0:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   17ce2:	4b08      	ldr	r3, [pc, #32]	; (17d04 <_sys_device_do_config_level+0x24>)
   17ce4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17ce8:	3001      	adds	r0, #1
   17cea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17cee:	4620      	mov	r0, r4
   17cf0:	42a8      	cmp	r0, r5
   17cf2:	f104 040c 	add.w	r4, r4, #12
   17cf6:	d300      	bcc.n	17cfa <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   17cf8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   17cfa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   17cfe:	685b      	ldr	r3, [r3, #4]
   17d00:	4798      	blx	r3
   17d02:	e7f4      	b.n	17cee <_sys_device_do_config_level+0xe>
   17d04:	0001a3f0 	.word	0x0001a3f0

00017d08 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   17d08:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   17d0a:	4c0b      	ldr	r4, [pc, #44]	; (17d38 <device_get_binding+0x30>)
   17d0c:	4e0b      	ldr	r6, [pc, #44]	; (17d3c <device_get_binding+0x34>)
{
   17d0e:	4605      	mov	r5, r0
	for (info = __device_init_start; info != __device_init_end; info++) {
   17d10:	42b4      	cmp	r4, r6
   17d12:	d101      	bne.n	17d18 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   17d14:	2400      	movs	r4, #0
   17d16:	e00c      	b.n	17d32 <device_get_binding+0x2a>
		if (!info->driver_api) {
   17d18:	6863      	ldr	r3, [r4, #4]
   17d1a:	b90b      	cbnz	r3, 17d20 <device_get_binding+0x18>
	for (info = __device_init_start; info != __device_init_end; info++) {
   17d1c:	340c      	adds	r4, #12
   17d1e:	e7f7      	b.n	17d10 <device_get_binding+0x8>
		if (name == info->config->name) {
   17d20:	6823      	ldr	r3, [r4, #0]
   17d22:	6819      	ldr	r1, [r3, #0]
   17d24:	42a9      	cmp	r1, r5
   17d26:	d004      	beq.n	17d32 <device_get_binding+0x2a>
		if (!strcmp(name, info->config->name)) {
   17d28:	4628      	mov	r0, r5
   17d2a:	f7e8 fc73 	bl	614 <strcmp>
   17d2e:	2800      	cmp	r0, #0
   17d30:	d1f4      	bne.n	17d1c <device_get_binding+0x14>
}
   17d32:	4620      	mov	r0, r4
   17d34:	bd70      	pop	{r4, r5, r6, pc}
   17d36:	bf00      	nop
   17d38:	20006ae0 	.word	0x20006ae0
   17d3c:	20006b64 	.word	0x20006b64

00017d40 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   17d40:	1c43      	adds	r3, r0, #1
   17d42:	d003      	beq.n	17d4c <_sys_power_save_idle_exit+0xc>
   17d44:	4b03      	ldr	r3, [pc, #12]	; (17d54 <_sys_power_save_idle_exit+0x14>)
   17d46:	681b      	ldr	r3, [r3, #0]
   17d48:	4298      	cmp	r0, r3
   17d4a:	db01      	blt.n	17d50 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   17d4c:	f7eb bbae 	b.w	34ac <_timer_idle_exit>
   17d50:	4770      	bx	lr
   17d52:	bf00      	nop
   17d54:	20006ad8 	.word	0x20006ad8

00017d58 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17d58:	4d0f      	ldr	r5, [pc, #60]	; (17d98 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   17d5a:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   17d5c:	4f0f      	ldr	r7, [pc, #60]	; (17d9c <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d5e:	f105 060c 	add.w	r6, r5, #12
	__asm__ volatile(
   17d62:	f04f 0220 	mov.w	r2, #32
   17d66:	f3ef 8311 	mrs	r3, BASEPRI
   17d6a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   17d6e:	68eb      	ldr	r3, [r5, #12]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d70:	42b3      	cmp	r3, r6
   17d72:	d00a      	beq.n	17d8a <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   17d74:	b14b      	cbz	r3, 17d8a <idle+0x32>
   17d76:	691c      	ldr	r4, [r3, #16]
   17d78:	1c63      	adds	r3, r4, #1
   17d7a:	d008      	beq.n	17d8e <idle+0x36>
   17d7c:	683b      	ldr	r3, [r7, #0]
   17d7e:	42a3      	cmp	r3, r4
   17d80:	dd05      	ble.n	17d8e <idle+0x36>
	_kernel.idle = ticks;
   17d82:	616c      	str	r4, [r5, #20]
	k_cpu_idle();
   17d84:	f7e9 f88e 	bl	ea4 <k_cpu_idle>
   17d88:	e7eb      	b.n	17d62 <idle+0xa>
   17d8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   17d8e:	4620      	mov	r0, r4
   17d90:	f7eb fb78 	bl	3484 <_timer_idle_enter>
   17d94:	e7f5      	b.n	17d82 <idle+0x2a>
   17d96:	bf00      	nop
   17d98:	20001bc0 	.word	0x20001bc0
   17d9c:	20006ad8 	.word	0x20006ad8

00017da0 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
   17da0:	4770      	bx	lr
	...

00017da4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   17da4:	4802      	ldr	r0, [pc, #8]	; (17db0 <_bss_zero+0xc>)
   17da6:	4a03      	ldr	r2, [pc, #12]	; (17db4 <_bss_zero+0x10>)
   17da8:	2100      	movs	r1, #0
   17daa:	1a12      	subs	r2, r2, r0
   17dac:	f7e8 bc80 	b.w	6b0 <memset>
   17db0:	20000000 	.word	0x20000000
   17db4:	20001e50 	.word	0x20001e50

00017db8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   17db8:	4802      	ldr	r0, [pc, #8]	; (17dc4 <_data_copy+0xc>)
   17dba:	4a03      	ldr	r2, [pc, #12]	; (17dc8 <_data_copy+0x10>)
   17dbc:	4903      	ldr	r1, [pc, #12]	; (17dcc <_data_copy+0x14>)
   17dbe:	1a12      	subs	r2, r2, r0
   17dc0:	f7e8 bc4a 	b.w	658 <memcpy>
   17dc4:	20005d48 	.word	0x20005d48
   17dc8:	20006c68 	.word	0x20006c68
   17dcc:	0001a458 	.word	0x0001a458

00017dd0 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
   17dd0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17dd2:	2002      	movs	r0, #2
   17dd4:	f7ff ff84 	bl	17ce0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   17dd8:	4908      	ldr	r1, [pc, #32]	; (17dfc <_main+0x2c>)
   17dda:	4809      	ldr	r0, [pc, #36]	; (17e00 <_main+0x30>)
   17ddc:	f7e9 fb1e 	bl	141c <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   17de0:	2003      	movs	r0, #3
   17de2:	f7ff ff7d 	bl	17ce0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   17de6:	f000 feb9 	bl	18b5c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17dea:	f7e8 fd2d 	bl	848 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   17dee:	4a05      	ldr	r2, [pc, #20]	; (17e04 <_main+0x34>)
   17df0:	7a13      	ldrb	r3, [r2, #8]
   17df2:	f023 0301 	bic.w	r3, r3, #1
   17df6:	7213      	strb	r3, [r2, #8]
   17df8:	bd08      	pop	{r3, pc}
   17dfa:	bf00      	nop
   17dfc:	0001a40c 	.word	0x0001a40c
   17e00:	0001a428 	.word	0x0001a428
   17e04:	20001b58 	.word	0x20001b58

00017e08 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   17e08:	b580      	push	{r7, lr}
   17e0a:	b086      	sub	sp, #24
   17e0c:	4d32      	ldr	r5, [pc, #200]	; (17ed8 <_Cstart+0xd0>)
   17e0e:	af06      	add	r7, sp, #24
	_IntLibInit();
   17e10:	f7e8 fe20 	bl	a54 <_IntLibInit>
   17e14:	2320      	movs	r3, #32
   17e16:	195a      	adds	r2, r3, r5
	list->head = (sys_dnode_t *)list;
   17e18:	515a      	str	r2, [r3, r5]
   17e1a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   17e1c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
	list->tail = (sys_dnode_t *)list;
   17e20:	6052      	str	r2, [r2, #4]
   17e22:	d1f8      	bne.n	17e16 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   17e24:	4e2d      	ldr	r6, [pc, #180]	; (17edc <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   17e26:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 17f04 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   17e2a:	61ae      	str	r6, [r5, #24]
	_setup_new_thread(_main_thread, _main_stack,
   17e2c:	2400      	movs	r4, #0
   17e2e:	f04f 0901 	mov.w	r9, #1
   17e32:	4643      	mov	r3, r8
   17e34:	f44f 7200 	mov.w	r2, #512	; 0x200
   17e38:	4929      	ldr	r1, [pc, #164]	; (17ee0 <_Cstart+0xd8>)
   17e3a:	f8cd 9010 	str.w	r9, [sp, #16]
   17e3e:	4630      	mov	r0, r6
   17e40:	9403      	str	r4, [sp, #12]
   17e42:	9402      	str	r4, [sp, #8]
   17e44:	9401      	str	r4, [sp, #4]
   17e46:	9400      	str	r4, [sp, #0]
   17e48:	f000 fe04 	bl	18a54 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17e4c:	7a73      	ldrb	r3, [r6, #9]
	_add_thread_to_ready_q(_main_thread);
   17e4e:	4630      	mov	r0, r6
   17e50:	f023 0304 	bic.w	r3, r3, #4
   17e54:	7273      	strb	r3, [r6, #9]
   17e56:	f000 f9f3 	bl	18240 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   17e5a:	230f      	movs	r3, #15
   17e5c:	9303      	str	r3, [sp, #12]
   17e5e:	4921      	ldr	r1, [pc, #132]	; (17ee4 <_Cstart+0xdc>)
   17e60:	f8cd 9010 	str.w	r9, [sp, #16]
   17e64:	9402      	str	r4, [sp, #8]
   17e66:	9401      	str	r4, [sp, #4]
   17e68:	9400      	str	r4, [sp, #0]
   17e6a:	4b1f      	ldr	r3, [pc, #124]	; (17ee8 <_Cstart+0xe0>)
   17e6c:	481f      	ldr	r0, [pc, #124]	; (17eec <_Cstart+0xe4>)
   17e6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17e72:	f000 fdef 	bl	18a54 <_setup_new_thread>
   17e76:	4b1d      	ldr	r3, [pc, #116]	; (17eec <_Cstart+0xe4>)
   17e78:	4a1c      	ldr	r2, [pc, #112]	; (17eec <_Cstart+0xe4>)
   17e7a:	7a5b      	ldrb	r3, [r3, #9]
   17e7c:	f023 0304 	bic.w	r3, r3, #4
   17e80:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(_idle_thread);
   17e82:	4610      	mov	r0, r2
   17e84:	f000 f9dc 	bl	18240 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   17e88:	4b19      	ldr	r3, [pc, #100]	; (17ef0 <_Cstart+0xe8>)
   17e8a:	60eb      	str	r3, [r5, #12]
	list->tail = (sys_dnode_t *)list;
   17e8c:	612b      	str	r3, [r5, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   17e8e:	4b19      	ldr	r3, [pc, #100]	; (17ef4 <_Cstart+0xec>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   17e90:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17e94:	4b18      	ldr	r3, [pc, #96]	; (17ef8 <_Cstart+0xf0>)
   17e96:	22e0      	movs	r2, #224	; 0xe0
   17e98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   17e9c:	77dc      	strb	r4, [r3, #31]
   17e9e:	761c      	strb	r4, [r3, #24]
   17ea0:	765c      	strb	r4, [r3, #25]
   17ea2:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   17ea6:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   17eaa:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   17eac:	f7e8 ff72 	bl	d94 <_FaultInit>
	_CpuIdleInit();
   17eb0:	f7e8 fff2 	bl	e98 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17eb4:	4620      	mov	r0, r4
   17eb6:	f7ff ff13 	bl	17ce0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17eba:	4648      	mov	r0, r9
   17ebc:	f7ff ff10 	bl	17ce0 <_sys_device_do_config_level>
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   17ec0:	4b0e      	ldr	r3, [pc, #56]	; (17efc <_Cstart+0xf4>)

	_current = main_thread;
   17ec2:	60ae      	str	r6, [r5, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   17ec4:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   17ec8:	4a0d      	ldr	r2, [pc, #52]	; (17f00 <_Cstart+0xf8>)
   17eca:	f383 8809 	msr	PSP, r3
   17ece:	2100      	movs	r1, #0
   17ed0:	f381 8811 	msr	BASEPRI, r1
   17ed4:	4640      	mov	r0, r8
   17ed6:	4710      	bx	r2
   17ed8:	20001bc0 	.word	0x20001bc0
   17edc:	20001b58 	.word	0x20001b58
   17ee0:	20004a08 	.word	0x20004a08
   17ee4:	20004c08 	.word	0x20004c08
   17ee8:	00017d59 	.word	0x00017d59
   17eec:	20001af0 	.word	0x20001af0
   17ef0:	20001bcc 	.word	0x20001bcc
   17ef4:	20005548 	.word	0x20005548
   17ef8:	e000ed00 	.word	0xe000ed00
   17efc:	20004c08 	.word	0x20004c08
   17f00:	000189ed 	.word	0x000189ed
   17f04:	00017dd1 	.word	0x00017dd1

00017f08 <adjust_owner_prio.isra.7>:
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   17f08:	b538      	push	{r3, r4, r5, lr}
{
	if (mutex->owner->base.prio != new_prio) {
   17f0a:	f990 300a 	ldrsb.w	r3, [r0, #10]
   17f0e:	428b      	cmp	r3, r1
static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   17f10:	4604      	mov	r4, r0
   17f12:	460d      	mov	r5, r1
	if (mutex->owner->base.prio != new_prio) {
   17f14:	d00e      	beq.n	17f34 <adjust_owner_prio.isra.7+0x2c>
	return !(_is_thread_prevented_from_running(thread) ||
   17f16:	7a43      	ldrb	r3, [r0, #9]
   17f18:	06db      	lsls	r3, r3, #27
   17f1a:	d10a      	bne.n	17f32 <adjust_owner_prio.isra.7+0x2a>
   17f1c:	6a03      	ldr	r3, [r0, #32]
   17f1e:	3301      	adds	r3, #1
   17f20:	d107      	bne.n	17f32 <adjust_owner_prio.isra.7+0x2a>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   17f22:	f000 fa0f 	bl	18344 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   17f26:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   17f28:	4620      	mov	r0, r4
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
   17f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17f2e:	f000 b987 	b.w	18240 <_add_thread_to_ready_q>
	} else {
		thread->base.prio = prio;
   17f32:	72a5      	strb	r5, [r4, #10]
   17f34:	bd38      	pop	{r3, r4, r5, pc}
	...

00017f38 <_impl_k_mutex_lock>:

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   17f38:	b570      	push	{r4, r5, r6, lr}
	--_current->base.sched_locked;
   17f3a:	4a30      	ldr	r2, [pc, #192]	; (17ffc <_impl_k_mutex_lock+0xc4>)
   17f3c:	460d      	mov	r5, r1
   17f3e:	6891      	ldr	r1, [r2, #8]
   17f40:	7acb      	ldrb	r3, [r1, #11]
   17f42:	3b01      	subs	r3, #1
   17f44:	4604      	mov	r4, r0
   17f46:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   17f48:	68c3      	ldr	r3, [r0, #12]
   17f4a:	4611      	mov	r1, r2
   17f4c:	b14b      	cbz	r3, 17f62 <_impl_k_mutex_lock+0x2a>
   17f4e:	6880      	ldr	r0, [r0, #8]
   17f50:	6892      	ldr	r2, [r2, #8]
   17f52:	4290      	cmp	r0, r2
   17f54:	d011      	beq.n	17f7a <_impl_k_mutex_lock+0x42>
		return 0;
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   17f56:	b995      	cbnz	r5, 17f7e <_impl_k_mutex_lock+0x46>
		k_sched_unlock();
   17f58:	f000 fa9a 	bl	18490 <k_sched_unlock>
		return -EBUSY;
   17f5c:	f06f 000f 	mvn.w	r0, #15
   17f60:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   17f62:	6892      	ldr	r2, [r2, #8]
   17f64:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   17f68:	6122      	str	r2, [r4, #16]
		mutex->lock_count++;
   17f6a:	3301      	adds	r3, #1
   17f6c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17f6e:	688b      	ldr	r3, [r1, #8]
   17f70:	60a3      	str	r3, [r4, #8]
		k_sched_unlock();
   17f72:	f000 fa8d 	bl	18490 <k_sched_unlock>
		return 0;
   17f76:	2000      	movs	r0, #0
   17f78:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   17f7a:	6922      	ldr	r2, [r4, #16]
   17f7c:	e7f4      	b.n	17f68 <_impl_k_mutex_lock+0x30>
	}

	new_prio = new_prio_for_inheritance(_current->base.prio,
   17f7e:	f992 100a 	ldrsb.w	r1, [r2, #10]
   17f82:	f990 300a 	ldrsb.w	r3, [r0, #10]
   17f86:	4299      	cmp	r1, r3
   17f88:	bfa8      	it	ge
   17f8a:	4619      	movge	r1, r3
   17f8c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   17f90:	f04f 0320 	mov.w	r3, #32
   17f94:	f3ef 8611 	mrs	r6, BASEPRI
   17f98:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17f9c:	68a0      	ldr	r0, [r4, #8]
   17f9e:	f990 300a 	ldrsb.w	r3, [r0, #10]
   17fa2:	4299      	cmp	r1, r3
   17fa4:	da01      	bge.n	17faa <_impl_k_mutex_lock+0x72>
		adjust_owner_prio(mutex, new_prio);
   17fa6:	f7ff ffaf 	bl	17f08 <adjust_owner_prio.isra.7>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   17faa:	4620      	mov	r0, r4
   17fac:	4629      	mov	r1, r5
   17fae:	f000 fa2f 	bl	18410 <_pend_current_thread>
	_update_time_slice_before_swap();
   17fb2:	f000 fb15 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   17fb6:	4630      	mov	r0, r6
   17fb8:	f7e8 fd98 	bl	aec <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   17fbc:	2800      	cmp	r0, #0
   17fbe:	d0d8      	beq.n	17f72 <_impl_k_mutex_lock+0x3a>
	return list->head == list;
   17fc0:	6823      	ldr	r3, [r4, #0]
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   17fc2:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fc4:	429c      	cmp	r4, r3
   17fc6:	bf08      	it	eq
   17fc8:	2300      	moveq	r3, #0
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   17fca:	b133      	cbz	r3, 17fda <_impl_k_mutex_lock+0xa2>
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
   17fcc:	f993 300a 	ldrsb.w	r3, [r3, #10]
   17fd0:	4299      	cmp	r1, r3
   17fd2:	bfa8      	it	ge
   17fd4:	4619      	movge	r1, r3
   17fd6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   17fda:	f04f 0320 	mov.w	r3, #32
   17fde:	f3ef 8511 	mrs	r5, BASEPRI
   17fe2:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   17fe6:	68a0      	ldr	r0, [r4, #8]
   17fe8:	f7ff ff8e 	bl	17f08 <adjust_owner_prio.isra.7>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17fec:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   17ff0:	f000 fa4e 	bl	18490 <k_sched_unlock>

	return -EAGAIN;
   17ff4:	f06f 000a 	mvn.w	r0, #10
}
   17ff8:	bd70      	pop	{r4, r5, r6, pc}
   17ffa:	bf00      	nop
   17ffc:	20001bc0 	.word	0x20001bc0

00018000 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18002:	4e34      	ldr	r6, [pc, #208]	; (180d4 <_impl_k_mutex_unlock+0xd4>)
   18004:	68b2      	ldr	r2, [r6, #8]
   18006:	7ad3      	ldrb	r3, [r2, #11]
   18008:	3b01      	subs	r3, #1
   1800a:	4605      	mov	r5, r0
   1800c:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   1800e:	68c3      	ldr	r3, [r0, #12]
   18010:	3b01      	subs	r3, #1
   18012:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   18014:	b11b      	cbz	r3, 1801e <_impl_k_mutex_unlock+0x1e>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
   18016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_sched_unlock();
   1801a:	f000 ba39 	b.w	18490 <k_sched_unlock>
	__asm__ volatile(
   1801e:	f04f 0320 	mov.w	r3, #32
   18022:	f3ef 8711 	mrs	r7, BASEPRI
   18026:	f383 8811 	msr	BASEPRI, r3
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1802a:	6901      	ldr	r1, [r0, #16]
   1802c:	6880      	ldr	r0, [r0, #8]
   1802e:	f7ff ff6b 	bl	17f08 <adjust_owner_prio.isra.7>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   18032:	4b29      	ldr	r3, [pc, #164]	; (180d8 <_impl_k_mutex_unlock+0xd8>)
   18034:	682c      	ldr	r4, [r5, #0]
   18036:	681b      	ldr	r3, [r3, #0]
   18038:	b183      	cbz	r3, 1805c <_impl_k_mutex_unlock+0x5c>
   1803a:	42a5      	cmp	r5, r4
   1803c:	bf08      	it	eq
   1803e:	2400      	moveq	r4, #0
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   18040:	b924      	cbnz	r4, 1804c <_impl_k_mutex_unlock+0x4c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18042:	f387 8811 	msr	BASEPRI, r7
		mutex->owner = NULL;
   18046:	2300      	movs	r3, #0
   18048:	60ab      	str	r3, [r5, #8]
   1804a:	e7e4      	b.n	18016 <_impl_k_mutex_unlock+0x16>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1804c:	6a23      	ldr	r3, [r4, #32]
   1804e:	3302      	adds	r3, #2
   18050:	d108      	bne.n	18064 <_impl_k_mutex_unlock+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   18052:	686b      	ldr	r3, [r5, #4]
   18054:	429c      	cmp	r4, r3
   18056:	d0f4      	beq.n	18042 <_impl_k_mutex_unlock+0x42>
   18058:	6824      	ldr	r4, [r4, #0]
   1805a:	e7f1      	b.n	18040 <_impl_k_mutex_unlock+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1805c:	42a5      	cmp	r5, r4
   1805e:	d0f0      	beq.n	18042 <_impl_k_mutex_unlock+0x42>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   18060:	2c00      	cmp	r4, #0
   18062:	d0ee      	beq.n	18042 <_impl_k_mutex_unlock+0x42>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18064:	e894 000c 	ldmia.w	r4, {r2, r3}
   18068:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1806a:	6822      	ldr	r2, [r4, #0]
   1806c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1806e:	7a63      	ldrb	r3, [r4, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18070:	6a21      	ldr	r1, [r4, #32]
   18072:	f023 0302 	bic.w	r3, r3, #2
   18076:	7263      	strb	r3, [r4, #9]
   18078:	1c4b      	adds	r3, r1, #1
	return _abort_timeout(&thread->base.timeout);
   1807a:	f104 0210 	add.w	r2, r4, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1807e:	d00e      	beq.n	1809e <_impl_k_mutex_unlock+0x9e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   18080:	6933      	ldr	r3, [r6, #16]
   18082:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   18084:	bf1f      	itttt	ne
   18086:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   18088:	6913      	ldrne	r3, [r2, #16]
   1808a:	185b      	addne	r3, r3, r1
   1808c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1808e:	6963      	ldr	r3, [r4, #20]
   18090:	6922      	ldr	r2, [r4, #16]
   18092:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   18094:	6922      	ldr	r2, [r4, #16]
   18096:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   18098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1809c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1809e:	7a63      	ldrb	r3, [r4, #9]
   180a0:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   180a4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   180a8:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   180aa:	d102      	bne.n	180b2 <_impl_k_mutex_unlock+0xb2>
   180ac:	6a23      	ldr	r3, [r4, #32]
   180ae:	3301      	adds	r3, #1
   180b0:	d00b      	beq.n	180ca <_impl_k_mutex_unlock+0xca>
   180b2:	f387 8811 	msr	BASEPRI, r7
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   180b6:	2300      	movs	r3, #0
   180b8:	6663      	str	r3, [r4, #100]	; 0x64
		mutex->lock_count++;
   180ba:	68eb      	ldr	r3, [r5, #12]
		mutex->owner = new_owner;
   180bc:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   180be:	3301      	adds	r3, #1
   180c0:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   180c2:	f994 300a 	ldrsb.w	r3, [r4, #10]
   180c6:	612b      	str	r3, [r5, #16]
   180c8:	e7a5      	b.n	18016 <_impl_k_mutex_unlock+0x16>
		_add_thread_to_ready_q(thread);
   180ca:	4620      	mov	r0, r4
   180cc:	f000 f8b8 	bl	18240 <_add_thread_to_ready_q>
   180d0:	e7ef      	b.n	180b2 <_impl_k_mutex_unlock+0xb2>
   180d2:	bf00      	nop
   180d4:	20001bc0 	.word	0x20001bc0
   180d8:	20001dc8 	.word	0x20001dc8

000180dc <k_queue_init>:
	list->head = NULL;
   180dc:	2300      	movs	r3, #0
   180de:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   180e0:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   180e2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   180e6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   180e8:	60c3      	str	r3, [r0, #12]
   180ea:	4770      	bx	lr

000180ec <k_queue_cancel_wait>:
	return 0;
#endif
}

void k_queue_cancel_wait(struct k_queue *queue)
{
   180ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   180ee:	f04f 0320 	mov.w	r3, #32
   180f2:	f3ef 8411 	mrs	r4, BASEPRI
   180f6:	f383 8811 	msr	BASEPRI, r3
	return _handle_obj_poll_events(&queue->poll_events, state);
   180fa:	2100      	movs	r1, #0
   180fc:	3008      	adds	r0, #8
   180fe:	f001 f909 	bl	19314 <_handle_obj_poll_events>
			(void)_Swap(key);
			return;
		}
	}
#else
	if (handle_poll_events(queue, K_POLL_STATE_NOT_READY)) {
   18102:	b130      	cbz	r0, 18112 <k_queue_cancel_wait+0x26>
	_update_time_slice_before_swap();
   18104:	f000 fa6c 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   18108:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   1810a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1810e:	f7e8 bced 	b.w	aec <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18112:	f384 8811 	msr	BASEPRI, r4
   18116:	bd10      	pop	{r4, pc}

00018118 <k_queue_insert>:

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   18118:	b510      	push	{r4, lr}
	__asm__ volatile(
   1811a:	f04f 0320 	mov.w	r3, #32
   1811e:	f3ef 8411 	mrs	r4, BASEPRI
   18122:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   18126:	b931      	cbnz	r1, 18136 <k_queue_insert+0x1e>
	node->next = list->head;
   18128:	6803      	ldr	r3, [r0, #0]
   1812a:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   1812c:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   1812e:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   18130:	b943      	cbnz	r3, 18144 <k_queue_insert+0x2c>
		list->tail = node;
   18132:	6042      	str	r2, [r0, #4]
   18134:	e006      	b.n	18144 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   18136:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   18138:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   1813a:	b98b      	cbnz	r3, 18160 <k_queue_insert+0x48>
	if (!list->tail) {
   1813c:	6843      	ldr	r3, [r0, #4]
   1813e:	b96b      	cbnz	r3, 1815c <k_queue_insert+0x44>
		list->tail = node;
   18140:	6042      	str	r2, [r0, #4]
		list->head = node;
   18142:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   18144:	2104      	movs	r1, #4
   18146:	3008      	adds	r0, #8
   18148:	f001 f8e4 	bl	19314 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   1814c:	b150      	cbz	r0, 18164 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   1814e:	f000 fa47 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   18152:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   18154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18158:	f7e8 bcc8 	b.w	aec <__swap>
		list->tail->next = node;
   1815c:	601a      	str	r2, [r3, #0]
   1815e:	e7e8      	b.n	18132 <k_queue_insert+0x1a>
		prev->next = node;
   18160:	600a      	str	r2, [r1, #0]
   18162:	e7ef      	b.n	18144 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18164:	f384 8811 	msr	BASEPRI, r4
   18168:	bd10      	pop	{r4, pc}

0001816a <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   1816a:	460a      	mov	r2, r1
   1816c:	6841      	ldr	r1, [r0, #4]
   1816e:	f7ff bfd3 	b.w	18118 <k_queue_insert>

00018172 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   18172:	460a      	mov	r2, r1
   18174:	2100      	movs	r1, #0
   18176:	f7ff bfcf 	b.w	18118 <k_queue_insert>

0001817a <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1817a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1817c:	f04f 0320 	mov.w	r3, #32
   18180:	f3ef 8411 	mrs	r4, BASEPRI
   18184:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   18188:	6843      	ldr	r3, [r0, #4]
   1818a:	b96b      	cbnz	r3, 181a8 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   1818c:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   1818e:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   18190:	2104      	movs	r1, #4
   18192:	3008      	adds	r0, #8
   18194:	f001 f8be 	bl	19314 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   18198:	b140      	cbz	r0, 181ac <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   1819a:	f000 fa21 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   1819e:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   181a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   181a4:	f7e8 bca2 	b.w	aec <__swap>
		list->tail->next = (sys_snode_t *)head;
   181a8:	6019      	str	r1, [r3, #0]
   181aa:	e7f0      	b.n	1818e <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   181ac:	f384 8811 	msr	BASEPRI, r4
   181b0:	bd10      	pop	{r4, pc}

000181b2 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   181b2:	b530      	push	{r4, r5, lr}
   181b4:	4604      	mov	r4, r0
   181b6:	b087      	sub	sp, #28
   181b8:	460d      	mov	r5, r1
	__asm__ volatile(
   181ba:	f04f 0220 	mov.w	r2, #32
   181be:	f3ef 8311 	mrs	r3, BASEPRI
   181c2:	f382 8811 	msr	BASEPRI, r2
   181c6:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   181c8:	b152      	cbz	r2, 181e0 <k_queue_get+0x2e>
	list->head = node->next;
   181ca:	6811      	ldr	r1, [r2, #0]
   181cc:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   181ce:	6840      	ldr	r0, [r0, #4]
   181d0:	4282      	cmp	r2, r0
		list->tail = list->head;
   181d2:	bf08      	it	eq
   181d4:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   181d6:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   181da:	4610      	mov	r0, r2
   181dc:	b007      	add	sp, #28
   181de:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   181e0:	b919      	cbnz	r1, 181ea <k_queue_get+0x38>
   181e2:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   181e6:	2200      	movs	r2, #0
   181e8:	e7f7      	b.n	181da <k_queue_get+0x28>
   181ea:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   181ee:	2104      	movs	r1, #4
   181f0:	4603      	mov	r3, r0
   181f2:	eb0d 0001 	add.w	r0, sp, r1
   181f6:	f000 ffd5 	bl	191a4 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   181fa:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   181fe:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   18200:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   18204:	2101      	movs	r1, #1
   18206:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   18208:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   1820c:	f000 ffde 	bl	191cc <k_poll>
		if (err) {
   18210:	2800      	cmp	r0, #0
   18212:	d1e8      	bne.n	181e6 <k_queue_get+0x34>
	__asm__ volatile(
   18214:	f04f 0320 	mov.w	r3, #32
   18218:	f3ef 8111 	mrs	r1, BASEPRI
   1821c:	f383 8811 	msr	BASEPRI, r3
   18220:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   18222:	b12a      	cbz	r2, 18230 <k_queue_get+0x7e>
	if (list->tail == node) {
   18224:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   18226:	6813      	ldr	r3, [r2, #0]
   18228:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   1822a:	4282      	cmp	r2, r0
		list->tail = list->head;
   1822c:	bf08      	it	eq
   1822e:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18230:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   18234:	2a00      	cmp	r2, #0
   18236:	d1d0      	bne.n	181da <k_queue_get+0x28>
   18238:	1c6b      	adds	r3, r5, #1
   1823a:	d0de      	beq.n	181fa <k_queue_get+0x48>
   1823c:	e7d3      	b.n	181e6 <k_queue_get+0x34>
	...

00018240 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   18240:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   18242:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   18246:	4c10      	ldr	r4, [pc, #64]	; (18288 <_add_thread_to_ready_q+0x48>)
	return prio + _NUM_COOP_PRIO;
   18248:	f103 0110 	add.w	r1, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   1824c:	114a      	asrs	r2, r1, #5
   1824e:	3206      	adds	r2, #6
   18250:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   18254:	f001 051f 	and.w	r5, r1, #31
   18258:	2101      	movs	r1, #1
   1825a:	40a9      	lsls	r1, r5
   1825c:	6855      	ldr	r5, [r2, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
   1825e:	3314      	adds	r3, #20
   18260:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	*bmap |= _get_ready_q_prio_bit(prio);
   18264:	4329      	orrs	r1, r5
   18266:	6051      	str	r1, [r2, #4]
	node->next = list;
   18268:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   1826a:	685a      	ldr	r2, [r3, #4]
   1826c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   1826e:	685a      	ldr	r2, [r3, #4]
   18270:	6010      	str	r0, [r2, #0]
	list->tail = node;
   18272:	6058      	str	r0, [r3, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   18274:	69a3      	ldr	r3, [r4, #24]
   18276:	f990 100a 	ldrsb.w	r1, [r0, #10]
   1827a:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1827e:	4291      	cmp	r1, r2
   18280:	bfa8      	it	ge
   18282:	4618      	movge	r0, r3
   18284:	61a0      	str	r0, [r4, #24]
   18286:	bd30      	pop	{r4, r5, pc}
   18288:	20001bc0 	.word	0x20001bc0

0001828c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1828c:	7a42      	ldrb	r2, [r0, #9]
   1828e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   18292:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18296:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   18298:	d104      	bne.n	182a4 <_ready_thread+0x18>
   1829a:	6a03      	ldr	r3, [r0, #32]
   1829c:	3301      	adds	r3, #1
   1829e:	d101      	bne.n	182a4 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   182a0:	f7ff bfce 	b.w	18240 <_add_thread_to_ready_q>
   182a4:	4770      	bx	lr
	...

000182a8 <_add_timeout>:
{
   182a8:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   182aa:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   182ac:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   182ae:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   182b0:	bb13      	cbnz	r3, 182f8 <_add_timeout+0x50>
	__asm__ volatile(
   182b2:	f04f 0220 	mov.w	r2, #32
   182b6:	f3ef 8411 	mrs	r4, BASEPRI
   182ba:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   182be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   182c2:	610a      	str	r2, [r1, #16]
	if (thread) {
   182c4:	b180      	cbz	r0, 182e8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   182c6:	68ca      	ldr	r2, [r1, #12]
   182c8:	b14a      	cbz	r2, 182de <_add_timeout+0x36>
	node->prev->next = node->next;
   182ca:	e890 0006 	ldmia.w	r0, {r1, r2}
   182ce:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   182d0:	6801      	ldr	r1, [r0, #0]
   182d2:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   182d4:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   182d6:	61c3      	str	r3, [r0, #28]
   182d8:	f022 0202 	bic.w	r2, r2, #2
   182dc:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   182de:	f7ff ffd5 	bl	1828c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   182e2:	f384 8811 	msr	BASEPRI, r4
   182e6:	bd70      	pop	{r4, r5, r6, pc}
   182e8:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   182ec:	694b      	ldr	r3, [r1, #20]
   182ee:	b32b      	cbz	r3, 1833c <_add_timeout+0x94>
			timeout->func(timeout);
   182f0:	4608      	mov	r0, r1
}
   182f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   182f6:	4718      	bx	r3
	return list->head == list;
   182f8:	4a11      	ldr	r2, [pc, #68]	; (18340 <_add_timeout+0x98>)
   182fa:	4610      	mov	r0, r2
   182fc:	f850 3f0c 	ldr.w	r3, [r0, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18300:	4283      	cmp	r3, r0
   18302:	d10c      	bne.n	1831e <_add_timeout+0x76>
	node->next = list;
   18304:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   18306:	6913      	ldr	r3, [r2, #16]
   18308:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1830a:	6913      	ldr	r3, [r2, #16]
   1830c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1830e:	6111      	str	r1, [r2, #16]
   18310:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   18312:	1b64      	subs	r4, r4, r5
   18314:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   18316:	6914      	ldr	r4, [r2, #16]
   18318:	42a3      	cmp	r3, r4
   1831a:	d0f3      	beq.n	18304 <_add_timeout+0x5c>
   1831c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1831e:	2b00      	cmp	r3, #0
   18320:	d0f0      	beq.n	18304 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   18322:	690c      	ldr	r4, [r1, #16]
   18324:	691d      	ldr	r5, [r3, #16]
   18326:	42ac      	cmp	r4, r5
   18328:	dcf3      	bgt.n	18312 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   1832a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1832c:	1b2c      	subs	r4, r5, r4
   1832e:	611c      	str	r4, [r3, #16]
   18330:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   18332:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   18334:	685a      	ldr	r2, [r3, #4]
   18336:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   18338:	6059      	str	r1, [r3, #4]
   1833a:	bd70      	pop	{r4, r5, r6, pc}
   1833c:	bd70      	pop	{r4, r5, r6, pc}
   1833e:	bf00      	nop
   18340:	20001bc0 	.word	0x20001bc0

00018344 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   18344:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   18348:	b510      	push	{r4, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   1834a:	f990 200a 	ldrsb.w	r2, [r0, #10]
   1834e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   18350:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   18352:	3214      	adds	r2, #20
   18354:	604b      	str	r3, [r1, #4]
   18356:	4b14      	ldr	r3, [pc, #80]	; (183a8 <_remove_thread_from_ready_q+0x64>)
   18358:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   1835c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   18360:	428a      	cmp	r2, r1
   18362:	d10f      	bne.n	18384 <_remove_thread_from_ready_q+0x40>
		_clear_ready_q_prio_bit(thread->base.prio);
   18364:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   18368:	3110      	adds	r1, #16
   1836a:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   1836c:	3206      	adds	r2, #6
   1836e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   18372:	2401      	movs	r4, #1
   18374:	f001 011f 	and.w	r1, r1, #31
   18378:	fa04 f101 	lsl.w	r1, r4, r1
   1837c:	6854      	ldr	r4, [r2, #4]
   1837e:	ea24 0401 	bic.w	r4, r4, r1
   18382:	6054      	str	r4, [r2, #4]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   18384:	699a      	ldr	r2, [r3, #24]
   18386:	4290      	cmp	r0, r2
   18388:	d10b      	bne.n	183a2 <_remove_thread_from_ready_q+0x5e>
	return __builtin_ffs(op);
   1838a:	69d9      	ldr	r1, [r3, #28]
   1838c:	fa91 f2a1 	rbit	r2, r1
   18390:	2900      	cmp	r1, #0
   18392:	fab2 f282 	clz	r2, r2
   18396:	bf08      	it	eq
   18398:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
	sys_dlist_t *list = &_ready_q.q[q_index];
   1839c:	3204      	adds	r2, #4
   1839e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   183a2:	619a      	str	r2, [r3, #24]
   183a4:	bd10      	pop	{r4, pc}
   183a6:	bf00      	nop
   183a8:	20001bc0 	.word	0x20001bc0

000183ac <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   183ac:	b430      	push	{r4, r5}
	return list->head == list;
   183ae:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   183b0:	42a1      	cmp	r1, r4
   183b2:	bf08      	it	eq
   183b4:	2400      	moveq	r4, #0
   183b6:	b314      	cbz	r4, 183fe <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   183b8:	f990 500a 	ldrsb.w	r5, [r0, #10]
   183bc:	f994 300a 	ldrsb.w	r3, [r4, #10]
   183c0:	429d      	cmp	r5, r3
   183c2:	da16      	bge.n	183f2 <_pend_thread+0x46>
		node->prev = insert_point->prev;
   183c4:	6863      	ldr	r3, [r4, #4]
   183c6:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   183c8:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   183ca:	6863      	ldr	r3, [r4, #4]
   183cc:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   183ce:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   183d0:	7a43      	ldrb	r3, [r0, #9]
   183d2:	f043 0302 	orr.w	r3, r3, #2
   183d6:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   183d8:	1c53      	adds	r3, r2, #1
   183da:	d017      	beq.n	1840c <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   183dc:	3209      	adds	r2, #9
   183de:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   183e0:	bc30      	pop	{r4, r5}
   183e2:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   183e6:	460a      	mov	r2, r1
   183e8:	3301      	adds	r3, #1
   183ea:	f100 0110 	add.w	r1, r0, #16
   183ee:	f7ff bf5b 	b.w	182a8 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   183f2:	684b      	ldr	r3, [r1, #4]
   183f4:	429c      	cmp	r4, r3
   183f6:	d002      	beq.n	183fe <_pend_thread+0x52>
   183f8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   183fa:	2c00      	cmp	r4, #0
   183fc:	d1db      	bne.n	183b6 <_pend_thread+0xa>
	node->next = list;
   183fe:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   18400:	684b      	ldr	r3, [r1, #4]
   18402:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   18404:	684b      	ldr	r3, [r1, #4]
   18406:	6018      	str	r0, [r3, #0]
	list->tail = node;
   18408:	6048      	str	r0, [r1, #4]
   1840a:	e7e1      	b.n	183d0 <_pend_thread+0x24>
}
   1840c:	bc30      	pop	{r4, r5}
   1840e:	4770      	bx	lr

00018410 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   18410:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   18412:	4c06      	ldr	r4, [pc, #24]	; (1842c <_pend_current_thread+0x1c>)
{
   18414:	460e      	mov	r6, r1
   18416:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   18418:	68a0      	ldr	r0, [r4, #8]
   1841a:	f7ff ff93 	bl	18344 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   1841e:	4632      	mov	r2, r6
   18420:	4629      	mov	r1, r5
   18422:	68a0      	ldr	r0, [r4, #8]
}
   18424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   18428:	f7ff bfc0 	b.w	183ac <_pend_thread>
   1842c:	20001bc0 	.word	0x20001bc0

00018430 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   18430:	4a09      	ldr	r2, [pc, #36]	; (18458 <__must_switch_threads+0x28>)
   18432:	69d1      	ldr	r1, [r2, #28]

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   18434:	6892      	ldr	r2, [r2, #8]
   18436:	2900      	cmp	r1, #0
   18438:	fa91 f3a1 	rbit	r3, r1
   1843c:	f992 000a 	ldrsb.w	r0, [r2, #10]
   18440:	fab3 f383 	clz	r3, r3
   18444:	bf08      	it	eq
   18446:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   1844a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   1844c:	4298      	cmp	r0, r3
   1844e:	bfd4      	ite	le
   18450:	2000      	movle	r0, #0
   18452:	2001      	movgt	r0, #1
   18454:	4770      	bx	lr
   18456:	bf00      	nop
   18458:	20001bc0 	.word	0x20001bc0

0001845c <_reschedule_threads>:
{
   1845c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   1845e:	4b0a      	ldr	r3, [pc, #40]	; (18488 <_reschedule_threads+0x2c>)
   18460:	689b      	ldr	r3, [r3, #8]
   18462:	895b      	ldrh	r3, [r3, #10]
   18464:	2b7f      	cmp	r3, #127	; 0x7f
   18466:	4604      	mov	r4, r0
   18468:	d802      	bhi.n	18470 <_reschedule_threads+0x14>
   1846a:	f7ff ffe1 	bl	18430 <__must_switch_threads>
   1846e:	b910      	cbnz	r0, 18476 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18470:	f384 8811 	msr	BASEPRI, r4
   18474:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   18476:	4b05      	ldr	r3, [pc, #20]	; (1848c <_reschedule_threads+0x30>)
   18478:	2200      	movs	r2, #0
   1847a:	4620      	mov	r0, r4
}
   1847c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   18480:	601a      	str	r2, [r3, #0]
   18482:	f7e8 bb33 	b.w	aec <__swap>
   18486:	bf00      	nop
   18488:	20001bc0 	.word	0x20001bc0
   1848c:	20001dcc 	.word	0x20001dcc

00018490 <k_sched_unlock>:
	__asm__ volatile(
   18490:	f04f 0320 	mov.w	r3, #32
   18494:	f3ef 8011 	mrs	r0, BASEPRI
   18498:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   1849c:	4b03      	ldr	r3, [pc, #12]	; (184ac <k_sched_unlock+0x1c>)
   1849e:	689a      	ldr	r2, [r3, #8]
   184a0:	7ad3      	ldrb	r3, [r2, #11]
   184a2:	3301      	adds	r3, #1
   184a4:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   184a6:	f7ff bfd9 	b.w	1845c <_reschedule_threads>
   184aa:	bf00      	nop
   184ac:	20001bc0 	.word	0x20001bc0

000184b0 <_move_thread_to_end_of_prio_q>:
{
   184b0:	b510      	push	{r4, lr}
	int q_index = _get_ready_q_q_index(thread->base.prio);
   184b2:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   184b6:	4a11      	ldr	r2, [pc, #68]	; (184fc <_move_thread_to_end_of_prio_q+0x4c>)
   184b8:	3314      	adds	r3, #20
   184ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   184be:	6859      	ldr	r1, [r3, #4]
   184c0:	4288      	cmp	r0, r1
   184c2:	d01a      	beq.n	184fa <_move_thread_to_end_of_prio_q+0x4a>
	node->prev->next = node->next;
   184c4:	6841      	ldr	r1, [r0, #4]
   184c6:	6804      	ldr	r4, [r0, #0]
   184c8:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   184ca:	6804      	ldr	r4, [r0, #0]
   184cc:	6061      	str	r1, [r4, #4]
	node->next = list;
   184ce:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   184d0:	6859      	ldr	r1, [r3, #4]
   184d2:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   184d4:	6859      	ldr	r1, [r3, #4]
   184d6:	6008      	str	r0, [r1, #0]
	list->tail = node;
   184d8:	6058      	str	r0, [r3, #4]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   184da:	6993      	ldr	r3, [r2, #24]
   184dc:	4298      	cmp	r0, r3
   184de:	d10b      	bne.n	184f8 <_move_thread_to_end_of_prio_q+0x48>
	return __builtin_ffs(op);
   184e0:	69d1      	ldr	r1, [r2, #28]
   184e2:	fa91 f3a1 	rbit	r3, r1
   184e6:	2900      	cmp	r1, #0
   184e8:	fab3 f383 	clz	r3, r3
   184ec:	bf08      	it	eq
   184ee:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	sys_dlist_t *list = &_ready_q.q[q_index];
   184f2:	3304      	adds	r3, #4
   184f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   184f8:	6193      	str	r3, [r2, #24]
   184fa:	bd10      	pop	{r4, pc}
   184fc:	20001bc0 	.word	0x20001bc0

00018500 <_impl_k_yield>:
{
   18500:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18502:	f04f 0320 	mov.w	r3, #32
   18506:	f3ef 8511 	mrs	r5, BASEPRI
   1850a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   1850e:	4c09      	ldr	r4, [pc, #36]	; (18534 <_impl_k_yield+0x34>)
   18510:	68a0      	ldr	r0, [r4, #8]
   18512:	f7ff ffcd 	bl	184b0 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   18516:	68a2      	ldr	r2, [r4, #8]
   18518:	69a3      	ldr	r3, [r4, #24]
   1851a:	429a      	cmp	r2, r3
   1851c:	d102      	bne.n	18524 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1851e:	f385 8811 	msr	BASEPRI, r5
   18522:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   18524:	4b04      	ldr	r3, [pc, #16]	; (18538 <_impl_k_yield+0x38>)
   18526:	2200      	movs	r2, #0
   18528:	601a      	str	r2, [r3, #0]
   1852a:	4628      	mov	r0, r5
}
   1852c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18530:	f7e8 badc 	b.w	aec <__swap>
   18534:	20001bc0 	.word	0x20001bc0
   18538:	20001dcc 	.word	0x20001dcc

0001853c <_impl_k_sleep>:
{
   1853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
   1853e:	b918      	cbnz	r0, 18548 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   18540:	f7ff ffde 	bl	18500 <_impl_k_yield>
}
   18544:	b003      	add	sp, #12
   18546:	bd30      	pop	{r4, r5, pc}
   18548:	230a      	movs	r3, #10
   1854a:	3009      	adds	r0, #9
   1854c:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   18550:	3001      	adds	r0, #1
   18552:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   18554:	f04f 0320 	mov.w	r3, #32
   18558:	f3ef 8511 	mrs	r5, BASEPRI
   1855c:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   18560:	4c08      	ldr	r4, [pc, #32]	; (18584 <_impl_k_sleep+0x48>)
   18562:	68a0      	ldr	r0, [r4, #8]
   18564:	f7ff feee 	bl	18344 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   18568:	68a0      	ldr	r0, [r4, #8]
   1856a:	9b01      	ldr	r3, [sp, #4]
   1856c:	f100 0110 	add.w	r1, r0, #16
   18570:	2200      	movs	r2, #0
   18572:	f7ff fe99 	bl	182a8 <_add_timeout>
	_time_slice_elapsed = 0;
   18576:	4b04      	ldr	r3, [pc, #16]	; (18588 <_impl_k_sleep+0x4c>)
   18578:	2200      	movs	r2, #0
   1857a:	4628      	mov	r0, r5
   1857c:	601a      	str	r2, [r3, #0]
   1857e:	f7e8 fab5 	bl	aec <__swap>
   18582:	e7df      	b.n	18544 <_impl_k_sleep+0x8>
   18584:	20001bc0 	.word	0x20001bc0
   18588:	20001dcc 	.word	0x20001dcc

0001858c <_impl_k_current_get>:
}
   1858c:	4b01      	ldr	r3, [pc, #4]	; (18594 <_impl_k_current_get+0x8>)
   1858e:	6898      	ldr	r0, [r3, #8]
   18590:	4770      	bx	lr
   18592:	bf00      	nop
   18594:	20001bc0 	.word	0x20001bc0

00018598 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   18598:	4b0d      	ldr	r3, [pc, #52]	; (185d0 <_is_thread_time_slicing+0x38>)
   1859a:	681b      	ldr	r3, [r3, #0]
   1859c:	2b00      	cmp	r3, #0
   1859e:	dd14      	ble.n	185ca <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   185a0:	4b0c      	ldr	r3, [pc, #48]	; (185d4 <_is_thread_time_slicing+0x3c>)
   185a2:	681b      	ldr	r3, [r3, #0]
   185a4:	4298      	cmp	r0, r3
   185a6:	d010      	beq.n	185ca <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   185a8:	4a0b      	ldr	r2, [pc, #44]	; (185d8 <_is_thread_time_slicing+0x40>)
   185aa:	f990 300a 	ldrsb.w	r3, [r0, #10]
   185ae:	6812      	ldr	r2, [r2, #0]
   185b0:	4293      	cmp	r3, r2
   185b2:	db0a      	blt.n	185ca <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   185b4:	4a09      	ldr	r2, [pc, #36]	; (185dc <_is_thread_time_slicing+0x44>)
   185b6:	3314      	adds	r3, #20
   185b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   185bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   185c0:	684b      	ldr	r3, [r1, #4]
   185c2:	1ac0      	subs	r0, r0, r3
   185c4:	bf18      	it	ne
   185c6:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   185c8:	4770      	bx	lr
		return 0;
   185ca:	2000      	movs	r0, #0
}
   185cc:	4770      	bx	lr
   185ce:	bf00      	nop
   185d0:	20001ce0 	.word	0x20001ce0
   185d4:	0001a408 	.word	0x0001a408
   185d8:	20001ce4 	.word	0x20001ce4
   185dc:	20001bc0 	.word	0x20001bc0

000185e0 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   185e0:	4b01      	ldr	r3, [pc, #4]	; (185e8 <_update_time_slice_before_swap+0x8>)
   185e2:	2200      	movs	r2, #0
   185e4:	601a      	str	r2, [r3, #0]
   185e6:	4770      	bx	lr
   185e8:	20001dcc 	.word	0x20001dcc

000185ec <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   185ec:	7a42      	ldrb	r2, [r0, #9]
   185ee:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   185f2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   185f6:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   185f8:	d104      	bne.n	18604 <_ready_thread+0x18>
   185fa:	6a03      	ldr	r3, [r0, #32]
   185fc:	3301      	adds	r3, #1
   185fe:	d101      	bne.n	18604 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   18600:	f7ff be1e 	b.w	18240 <_add_thread_to_ready_q>
   18604:	4770      	bx	lr
	...

00018608 <_unpend_first_thread>:
	if (_handling_timeouts) {
   18608:	4a10      	ldr	r2, [pc, #64]	; (1864c <_unpend_first_thread+0x44>)
   1860a:	6812      	ldr	r2, [r2, #0]
{
   1860c:	4603      	mov	r3, r0
   1860e:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   18610:	b16a      	cbz	r2, 1862e <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18612:	4283      	cmp	r3, r0
   18614:	bf08      	it	eq
   18616:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   18618:	b908      	cbnz	r0, 1861e <_unpend_first_thread+0x16>
   1861a:	2000      	movs	r0, #0
   1861c:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   1861e:	6a02      	ldr	r2, [r0, #32]
   18620:	3202      	adds	r2, #2
   18622:	d107      	bne.n	18634 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   18624:	685a      	ldr	r2, [r3, #4]
   18626:	4290      	cmp	r0, r2
   18628:	d0f7      	beq.n	1861a <_unpend_first_thread+0x12>
   1862a:	6800      	ldr	r0, [r0, #0]
   1862c:	e7f4      	b.n	18618 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1862e:	4283      	cmp	r3, r0
   18630:	d00a      	beq.n	18648 <_unpend_first_thread+0x40>
	if (thread) {
   18632:	b150      	cbz	r0, 1864a <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   18634:	e890 000c 	ldmia.w	r0, {r2, r3}
   18638:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1863a:	6802      	ldr	r2, [r0, #0]
   1863c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   1863e:	7a43      	ldrb	r3, [r0, #9]
   18640:	f023 0302 	bic.w	r3, r3, #2
   18644:	7243      	strb	r3, [r0, #9]
   18646:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18648:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   1864a:	4770      	bx	lr
   1864c:	20001dc8 	.word	0x20001dc8

00018650 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18650:	6903      	ldr	r3, [r0, #16]
   18652:	1c5a      	adds	r2, r3, #1
   18654:	d011      	beq.n	1867a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   18656:	4a0a      	ldr	r2, [pc, #40]	; (18680 <_abort_timeout+0x30>)
   18658:	6912      	ldr	r2, [r2, #16]
   1865a:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
   1865c:	bf1f      	itttt	ne
   1865e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   18660:	690a      	ldrne	r2, [r1, #16]
   18662:	189b      	addne	r3, r3, r2
   18664:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   18666:	e890 000c 	ldmia.w	r0, {r2, r3}
   1866a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1866c:	6802      	ldr	r2, [r0, #0]
   1866e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   18670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18674:	6103      	str	r3, [r0, #16]
	return 0;
   18676:	2000      	movs	r0, #0
   18678:	4770      	bx	lr
		return _INACTIVE;
   1867a:	4618      	mov	r0, r3
}
   1867c:	4770      	bx	lr
   1867e:	bf00      	nop
   18680:	20001bc0 	.word	0x20001bc0

00018684 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   18684:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   18688:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1868a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1868c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1868e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   18690:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   18692:	6143      	str	r3, [r0, #20]
   18694:	4770      	bx	lr
	...

00018698 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   18698:	b570      	push	{r4, r5, r6, lr}
   1869a:	4605      	mov	r5, r0
   1869c:	f04f 0320 	mov.w	r3, #32
   186a0:	f3ef 8611 	mrs	r6, BASEPRI
   186a4:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   186a8:	f7ff ffae 	bl	18608 <_unpend_first_thread>
	if (!thread) {
   186ac:	4604      	mov	r4, r0
   186ae:	b990      	cbnz	r0, 186d6 <_impl_k_sem_give+0x3e>
	sem->count += (sem->count != sem->limit);
   186b0:	68ab      	ldr	r3, [r5, #8]
   186b2:	68ea      	ldr	r2, [r5, #12]
   186b4:	429a      	cmp	r2, r3
   186b6:	bf18      	it	ne
   186b8:	3301      	addne	r3, #1
   186ba:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   186bc:	2102      	movs	r1, #2
   186be:	f105 0010 	add.w	r0, r5, #16
   186c2:	f000 fe27 	bl	19314 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   186c6:	b310      	cbz	r0, 1870e <_impl_k_sem_give+0x76>
	_update_time_slice_before_swap();
   186c8:	f7ff ff8a 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   186cc:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   186ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   186d2:	f7e8 ba0b 	b.w	aec <__swap>
	return _abort_timeout(&thread->base.timeout);
   186d6:	3010      	adds	r0, #16
   186d8:	f7ff ffba 	bl	18650 <_abort_timeout>
	_ready_thread(thread);
   186dc:	4620      	mov	r0, r4
   186de:	f7ff ff85 	bl	185ec <_ready_thread>
   186e2:	2300      	movs	r3, #0
   186e4:	6663      	str	r3, [r4, #100]	; 0x64
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   186e6:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   186ea:	2b0d      	cmp	r3, #13
   186ec:	d80f      	bhi.n	1870e <_impl_k_sem_give+0x76>
   186ee:	b11b      	cbz	r3, 186f8 <_impl_k_sem_give+0x60>
   186f0:	4b08      	ldr	r3, [pc, #32]	; (18714 <_impl_k_sem_give+0x7c>)
   186f2:	685b      	ldr	r3, [r3, #4]
   186f4:	051b      	lsls	r3, r3, #20
   186f6:	d50a      	bpl.n	1870e <_impl_k_sem_give+0x76>
	return _is_preempt(_current) && __must_switch_threads();
   186f8:	4b07      	ldr	r3, [pc, #28]	; (18718 <_impl_k_sem_give+0x80>)
   186fa:	689b      	ldr	r3, [r3, #8]
   186fc:	895b      	ldrh	r3, [r3, #10]
   186fe:	2b7f      	cmp	r3, #127	; 0x7f
   18700:	d805      	bhi.n	1870e <_impl_k_sem_give+0x76>
   18702:	f7ff fe95 	bl	18430 <__must_switch_threads>
   18706:	3000      	adds	r0, #0
   18708:	bf18      	it	ne
   1870a:	2001      	movne	r0, #1
   1870c:	e7db      	b.n	186c6 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1870e:	f386 8811 	msr	BASEPRI, r6
}
   18712:	bd70      	pop	{r4, r5, r6, pc}
   18714:	e000ed00 	.word	0xe000ed00
   18718:	20001bc0 	.word	0x20001bc0

0001871c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1871c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1871e:	f04f 0320 	mov.w	r3, #32
   18722:	f3ef 8411 	mrs	r4, BASEPRI
   18726:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1872a:	6883      	ldr	r3, [r0, #8]
   1872c:	b12b      	cbz	r3, 1873a <_impl_k_sem_take+0x1e>
		sem->count--;
   1872e:	3b01      	subs	r3, #1
   18730:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18732:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   18736:	2000      	movs	r0, #0
   18738:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   1873a:	b921      	cbnz	r1, 18746 <_impl_k_sem_take+0x2a>
   1873c:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   18740:	f06f 000f 	mvn.w	r0, #15
   18744:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   18746:	f7ff fe63 	bl	18410 <_pend_current_thread>
	_update_time_slice_before_swap();
   1874a:	f7ff ff49 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   1874e:	4620      	mov	r0, r4

	return _Swap(key);
}
   18750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18754:	f7e8 b9ca 	b.w	aec <__swap>

00018758 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   18758:	4b03      	ldr	r3, [pc, #12]	; (18768 <_impl_k_uptime_get_32+0x10>)
   1875a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1875e:	230a      	movs	r3, #10
   18760:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   18764:	4770      	bx	lr
   18766:	bf00      	nop
   18768:	20001dd0 	.word	0x20001dd0

0001876c <_tick_get>:
	__asm__ volatile(
   1876c:	f04f 0220 	mov.w	r2, #32
   18770:	f3ef 8311 	mrs	r3, BASEPRI
   18774:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   18778:	4a02      	ldr	r2, [pc, #8]	; (18784 <_tick_get+0x18>)
   1877a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1877e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   18782:	4770      	bx	lr
   18784:	20001dd0 	.word	0x20001dd0

00018788 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   18788:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   1878a:	f7ff ffef 	bl	1876c <_tick_get>
   1878e:	240a      	movs	r4, #10
   18790:	fba0 2304 	umull	r2, r3, r0, r4
   18794:	fb04 3301 	mla	r3, r4, r1, r3
}
   18798:	4610      	mov	r0, r2
   1879a:	4619      	mov	r1, r3
   1879c:	bd10      	pop	{r4, pc}
	...

000187a0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   187a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a4:	4607      	mov	r7, r0
	__asm__ volatile(
   187a6:	f04f 0320 	mov.w	r3, #32
   187aa:	f3ef 8011 	mrs	r0, BASEPRI
   187ae:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   187b2:	4963      	ldr	r1, [pc, #396]	; (18940 <_nano_sys_clock_tick_announce+0x1a0>)
   187b4:	e9d1 4500 	ldrd	r4, r5, [r1]
   187b8:	19e2      	adds	r2, r4, r7
   187ba:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   187be:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   187c2:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   187c6:	466e      	mov	r6, sp
   187c8:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   187cc:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   187d0:	f04f 0320 	mov.w	r3, #32
   187d4:	f3ef 8011 	mrs	r0, BASEPRI
   187d8:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   187dc:	4c59      	ldr	r4, [pc, #356]	; (18944 <_nano_sys_clock_tick_announce+0x1a4>)
   187de:	4621      	mov	r1, r4
   187e0:	4602      	mov	r2, r0
   187e2:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187e6:	428b      	cmp	r3, r1
   187e8:	d000      	beq.n	187ec <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   187ea:	b9fb      	cbnz	r3, 1882c <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   187ec:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   187f0:	68a0      	ldr	r0, [r4, #8]
   187f2:	f7ff fed1 	bl	18598 <_is_thread_time_slicing>
   187f6:	b1b0      	cbz	r0, 18826 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   187f8:	4a53      	ldr	r2, [pc, #332]	; (18948 <_nano_sys_clock_tick_announce+0x1a8>)
   187fa:	6811      	ldr	r1, [r2, #0]
   187fc:	230a      	movs	r3, #10
   187fe:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   18802:	4b52      	ldr	r3, [pc, #328]	; (1894c <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   18804:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   18806:	681b      	ldr	r3, [r3, #0]
   18808:	429f      	cmp	r7, r3
   1880a:	db0c      	blt.n	18826 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   1880c:	2300      	movs	r3, #0
   1880e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   18810:	f04f 0320 	mov.w	r3, #32
   18814:	f3ef 8511 	mrs	r5, BASEPRI
   18818:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   1881c:	68a0      	ldr	r0, [r4, #8]
   1881e:	f7ff fe47 	bl	184b0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18822:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   18826:	b003      	add	sp, #12
   18828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   1882c:	4d48      	ldr	r5, [pc, #288]	; (18950 <_nano_sys_clock_tick_announce+0x1b0>)
   1882e:	2101      	movs	r1, #1
   18830:	6029      	str	r1, [r5, #0]
   18832:	46ab      	mov	fp, r5
   18834:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   18836:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   1883a:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   1883e:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   18840:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   18842:	bfaa      	itet	ge
   18844:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   18848:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   1884c:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   18850:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   18852:	6920      	ldr	r0, [r4, #16]
		if (timeout->delta_ticks_from_prev == 0) {
   18854:	691d      	ldr	r5, [r3, #16]
   18856:	4298      	cmp	r0, r3
   18858:	bf14      	ite	ne
   1885a:	6818      	ldrne	r0, [r3, #0]
   1885c:	2000      	moveq	r0, #0
   1885e:	b9d5      	cbnz	r5, 18896 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   18860:	e893 0220 	ldmia.w	r3, {r5, r9}
   18864:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   18868:	681d      	ldr	r5, [r3, #0]
   1886a:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   1886e:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   18870:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   18874:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   18876:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   18878:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   1887a:	f8c3 c010 	str.w	ip, [r3, #16]
   1887e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   18882:	f04f 0320 	mov.w	r3, #32
   18886:	f3ef 8211 	mrs	r2, BASEPRI
   1888a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   1888e:	4603      	mov	r3, r0
   18890:	2800      	cmp	r0, #0
   18892:	d1d4      	bne.n	1883e <_nano_sys_clock_tick_announce+0x9e>
   18894:	e001      	b.n	1889a <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   18896:	2900      	cmp	r1, #0
   18898:	dcf1      	bgt.n	1887e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1889a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   1889e:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188a0:	42b0      	cmp	r0, r6
   188a2:	d103      	bne.n	188ac <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   188a4:	2300      	movs	r3, #0
   188a6:	f8cb 3000 	str.w	r3, [fp]
   188aa:	e7a1      	b.n	187f0 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   188ac:	2800      	cmp	r0, #0
   188ae:	d0f9      	beq.n	188a4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   188b0:	9b01      	ldr	r3, [sp, #4]
   188b2:	4298      	cmp	r0, r3
   188b4:	d101      	bne.n	188ba <_nano_sys_clock_tick_announce+0x11a>
   188b6:	2600      	movs	r6, #0
   188b8:	e000      	b.n	188bc <_nano_sys_clock_tick_announce+0x11c>
   188ba:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   188bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   188c0:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   188c4:	e890 000c 	ldmia.w	r0, {r2, r3}
   188c8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   188ca:	6802      	ldr	r2, [r0, #0]
   188cc:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   188ce:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   188d0:	f04f 0220 	mov.w	r2, #32
   188d4:	f3ef 8a11 	mrs	sl, BASEPRI
   188d8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   188dc:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   188e0:	b1fb      	cbz	r3, 18922 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   188e2:	68c2      	ldr	r2, [r0, #12]
   188e4:	b152      	cbz	r2, 188fc <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   188e6:	6859      	ldr	r1, [r3, #4]
   188e8:	681a      	ldr	r2, [r3, #0]
   188ea:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   188ec:	681a      	ldr	r2, [r3, #0]
   188ee:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   188f0:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   188f2:	f8c3 901c 	str.w	r9, [r3, #28]
   188f6:	f022 0202 	bic.w	r2, r2, #2
   188fa:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   188fc:	7a5a      	ldrb	r2, [r3, #9]
   188fe:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   18902:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18906:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   18908:	d102      	bne.n	18910 <_nano_sys_clock_tick_announce+0x170>
   1890a:	6a1a      	ldr	r2, [r3, #32]
   1890c:	3201      	adds	r2, #1
   1890e:	d013      	beq.n	18938 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18910:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   18914:	2e00      	cmp	r6, #0
   18916:	d0c5      	beq.n	188a4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   18918:	9b01      	ldr	r3, [sp, #4]
   1891a:	42b3      	cmp	r3, r6
   1891c:	d108      	bne.n	18930 <_nano_sys_clock_tick_announce+0x190>
   1891e:	2300      	movs	r3, #0
   18920:	e007      	b.n	18932 <_nano_sys_clock_tick_announce+0x192>
   18922:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   18926:	6943      	ldr	r3, [r0, #20]
   18928:	2b00      	cmp	r3, #0
   1892a:	d0f3      	beq.n	18914 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   1892c:	4798      	blx	r3
   1892e:	e7f1      	b.n	18914 <_nano_sys_clock_tick_announce+0x174>
   18930:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   18932:	4630      	mov	r0, r6
   18934:	461e      	mov	r6, r3
   18936:	e7c5      	b.n	188c4 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   18938:	4618      	mov	r0, r3
   1893a:	f7ff fc81 	bl	18240 <_add_thread_to_ready_q>
   1893e:	e7e7      	b.n	18910 <_nano_sys_clock_tick_announce+0x170>
   18940:	20001dd0 	.word	0x20001dd0
   18944:	20001bc0 	.word	0x20001bc0
   18948:	20001dcc 	.word	0x20001dcc
   1894c:	20001ce0 	.word	0x20001ce0
   18950:	20001dc8 	.word	0x20001dc8

00018954 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   18954:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   18956:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1895a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1895e:	4903      	ldr	r1, [pc, #12]	; (1896c <k_sys_work_q_init+0x18>)
   18960:	4803      	ldr	r0, [pc, #12]	; (18970 <k_sys_work_q_init+0x1c>)
   18962:	f000 f98d 	bl	18c80 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   18966:	2000      	movs	r0, #0
   18968:	bd08      	pop	{r3, pc}
   1896a:	bf00      	nop
   1896c:	20005548 	.word	0x20005548
   18970:	20001dd8 	.word	0x20001dd8

00018974 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   18974:	7a43      	ldrb	r3, [r0, #9]
   18976:	06da      	lsls	r2, r3, #27
   18978:	d104      	bne.n	18984 <_is_thread_ready+0x10>
   1897a:	6a00      	ldr	r0, [r0, #32]
   1897c:	1c43      	adds	r3, r0, #1
   1897e:	4258      	negs	r0, r3
   18980:	4158      	adcs	r0, r3
   18982:	4770      	bx	lr
   18984:	2000      	movs	r0, #0
}
   18986:	4770      	bx	lr

00018988 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18988:	6903      	ldr	r3, [r0, #16]
   1898a:	1c5a      	adds	r2, r3, #1
   1898c:	d011      	beq.n	189b2 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1898e:	4a0a      	ldr	r2, [pc, #40]	; (189b8 <_abort_timeout+0x30>)
   18990:	6912      	ldr	r2, [r2, #16]
   18992:	4290      	cmp	r0, r2
   18994:	bf1f      	itttt	ne
   18996:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   18998:	690a      	ldrne	r2, [r1, #16]
   1899a:	189b      	addne	r3, r3, r2
   1899c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   1899e:	e890 000c 	ldmia.w	r0, {r2, r3}
   189a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   189a4:	6802      	ldr	r2, [r0, #0]
   189a6:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   189a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   189ac:	6103      	str	r3, [r0, #16]
	return 0;
   189ae:	2000      	movs	r0, #0
   189b0:	4770      	bx	lr
		return _INACTIVE;
   189b2:	4618      	mov	r0, r3
}
   189b4:	4770      	bx	lr
   189b6:	bf00      	nop
   189b8:	20001bc0 	.word	0x20001bc0

000189bc <k_is_in_isr>:
   189bc:	f3ef 8005 	mrs	r0, IPSR
   189c0:	280d      	cmp	r0, #13
   189c2:	d807      	bhi.n	189d4 <k_is_in_isr+0x18>
   189c4:	b138      	cbz	r0, 189d6 <k_is_in_isr+0x1a>
   189c6:	4b04      	ldr	r3, [pc, #16]	; (189d8 <k_is_in_isr+0x1c>)
   189c8:	6858      	ldr	r0, [r3, #4]
   189ca:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   189ce:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   189d2:	4770      	bx	lr
   189d4:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   189d6:	4770      	bx	lr
   189d8:	e000ed00 	.word	0xe000ed00

000189dc <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   189dc:	4b02      	ldr	r3, [pc, #8]	; (189e8 <_is_thread_essential+0xc>)
   189de:	689b      	ldr	r3, [r3, #8]
   189e0:	7a18      	ldrb	r0, [r3, #8]
}
   189e2:	f000 0001 	and.w	r0, r0, #1
   189e6:	4770      	bx	lr
   189e8:	20001bc0 	.word	0x20001bc0

000189ec <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   189ec:	b508      	push	{r3, lr}
   189ee:	4604      	mov	r4, r0
   189f0:	4608      	mov	r0, r1
   189f2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   189f4:	461a      	mov	r2, r3
   189f6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   189f8:	f7ff fdc8 	bl	1858c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   189fc:	f7e8 fac8 	bl	f90 <_impl_k_thread_abort>

00018a00 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   18a00:	b510      	push	{r4, lr}
   18a02:	4601      	mov	r1, r0
	__asm__ volatile(
   18a04:	f04f 0320 	mov.w	r3, #32
   18a08:	f3ef 8411 	mrs	r4, BASEPRI
   18a0c:	f383 8811 	msr	BASEPRI, r3
   18a10:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   18a12:	075a      	lsls	r2, r3, #29
   18a14:	d402      	bmi.n	18a1c <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18a16:	f384 8811 	msr	BASEPRI, r4
   18a1a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18a1c:	f023 0304 	bic.w	r3, r3, #4
   18a20:	7243      	strb	r3, [r0, #9]
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   18a22:	f7ff ffa7 	bl	18974 <_is_thread_ready>
   18a26:	2800      	cmp	r0, #0
   18a28:	d0f5      	beq.n	18a16 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   18a2a:	4608      	mov	r0, r1
   18a2c:	f7ff fc08 	bl	18240 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   18a30:	4b07      	ldr	r3, [pc, #28]	; (18a50 <_impl_k_thread_start+0x50>)
   18a32:	689b      	ldr	r3, [r3, #8]
   18a34:	895b      	ldrh	r3, [r3, #10]
   18a36:	2b7f      	cmp	r3, #127	; 0x7f
   18a38:	d8ed      	bhi.n	18a16 <_impl_k_thread_start+0x16>
   18a3a:	f7ff fcf9 	bl	18430 <__must_switch_threads>
   18a3e:	2800      	cmp	r0, #0
   18a40:	d0e9      	beq.n	18a16 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   18a42:	f7ff fdcd 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   18a46:	4620      	mov	r0, r4
			return;
		}
	}

	irq_unlock(key);
}
   18a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18a4c:	f7e8 b84e 	b.w	aec <__swap>
   18a50:	20001bc0 	.word	0x20001bc0

00018a54 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   18a54:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   18a56:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18a58:	f7e8 b9f6 	b.w	e48 <_new_thread>

00018a5c <schedule_new_thread.part.13>:
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   18a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   18a5e:	f04f 0320 	mov.w	r3, #32
   18a62:	f3ef 8611 	mrs	r6, BASEPRI
   18a66:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   18a6a:	4a19      	ldr	r2, [pc, #100]	; (18ad0 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   18a6c:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   18a6e:	230a      	movs	r3, #10
   18a70:	3109      	adds	r1, #9
   18a72:	fbb1 f1f3 	udiv	r1, r1, r3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   18a76:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   18a78:	6201      	str	r1, [r0, #32]
   18a7a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   18a7c:	2300      	movs	r3, #0
   18a7e:	61c3      	str	r3, [r0, #28]
   18a80:	f851 3f0c 	ldr.w	r3, [r1, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a84:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   18a86:	f100 0510 	add.w	r5, r0, #16
   18a8a:	d107      	bne.n	18a9c <schedule_new_thread.part.13+0x40>
	node->next = list;
   18a8c:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   18a8e:	6913      	ldr	r3, [r2, #16]
   18a90:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   18a92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18a94:	6115      	str	r5, [r2, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18a96:	f386 8811 	msr	BASEPRI, r6
   18a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   18a9c:	2b00      	cmp	r3, #0
   18a9e:	d0f5      	beq.n	18a8c <schedule_new_thread.part.13+0x30>
   18aa0:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   18aa4:	6a04      	ldr	r4, [r0, #32]
   18aa6:	691f      	ldr	r7, [r3, #16]
   18aa8:	42bc      	cmp	r4, r7
   18aaa:	dc08      	bgt.n	18abe <schedule_new_thread.part.13+0x62>
		node->prev = insert_point->prev;
   18aac:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   18aae:	1b3c      	subs	r4, r7, r4
   18ab0:	611c      	str	r4, [r3, #16]
   18ab2:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   18ab4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   18ab6:	685a      	ldr	r2, [r3, #4]
   18ab8:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   18aba:	605d      	str	r5, [r3, #4]
   18abc:	e7eb      	b.n	18a96 <schedule_new_thread.part.13+0x3a>
		*delta -= in_q->delta_ticks_from_prev;
   18abe:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   18ac0:	4573      	cmp	r3, lr
   18ac2:	6204      	str	r4, [r0, #32]
   18ac4:	d0e2      	beq.n	18a8c <schedule_new_thread.part.13+0x30>
   18ac6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   18ac8:	2b00      	cmp	r3, #0
   18aca:	d1eb      	bne.n	18aa4 <schedule_new_thread.part.13+0x48>
   18acc:	e7de      	b.n	18a8c <schedule_new_thread.part.13+0x30>
   18ace:	bf00      	nop
   18ad0:	20001bc0 	.word	0x20001bc0

00018ad4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   18ad4:	b570      	push	{r4, r5, r6, lr}
   18ad6:	b086      	sub	sp, #24
   18ad8:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18ada:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   18adc:	9604      	str	r6, [sp, #16]
   18ade:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   18ae0:	9603      	str	r6, [sp, #12]
   18ae2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   18ae4:	9602      	str	r6, [sp, #8]
   18ae6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   18ae8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18aea:	9601      	str	r6, [sp, #4]
   18aec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   18aee:	9600      	str	r6, [sp, #0]
   18af0:	f7e8 f9aa 	bl	e48 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   18af4:	1c6b      	adds	r3, r5, #1
   18af6:	d003      	beq.n	18b00 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   18af8:	b92d      	cbnz	r5, 18b06 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   18afa:	4620      	mov	r0, r4
   18afc:	f7ff ff80 	bl	18a00 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   18b00:	4620      	mov	r0, r4
   18b02:	b006      	add	sp, #24
   18b04:	bd70      	pop	{r4, r5, r6, pc}
   18b06:	4629      	mov	r1, r5
   18b08:	4620      	mov	r0, r4
   18b0a:	f7ff ffa7 	bl	18a5c <schedule_new_thread.part.13>
   18b0e:	e7f7      	b.n	18b00 <_impl_k_thread_create+0x2c>

00018b10 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   18b10:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   18b12:	b510      	push	{r4, lr}
   18b14:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   18b16:	b103      	cbz	r3, 18b1a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   18b18:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   18b1a:	4620      	mov	r0, r4
   18b1c:	f7ff ff2a 	bl	18974 <_is_thread_ready>
   18b20:	b138      	cbz	r0, 18b32 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   18b22:	4620      	mov	r0, r4
   18b24:	f7ff fc0e 	bl	18344 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   18b28:	7a63      	ldrb	r3, [r4, #9]
   18b2a:	f043 0308 	orr.w	r3, r3, #8
   18b2e:	7263      	strb	r3, [r4, #9]
   18b30:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   18b32:	7a63      	ldrb	r3, [r4, #9]
   18b34:	079b      	lsls	r3, r3, #30
   18b36:	d508      	bpl.n	18b4a <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   18b38:	e894 000c 	ldmia.w	r4, {r2, r3}
   18b3c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   18b3e:	6822      	ldr	r2, [r4, #0]
   18b40:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   18b42:	7a63      	ldrb	r3, [r4, #9]
   18b44:	f023 0302 	bic.w	r3, r3, #2
   18b48:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   18b4a:	6a23      	ldr	r3, [r4, #32]
   18b4c:	3301      	adds	r3, #1
   18b4e:	d0eb      	beq.n	18b28 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   18b50:	f104 0010 	add.w	r0, r4, #16
   18b54:	f7ff ff18 	bl	18988 <_abort_timeout>
   18b58:	e7e6      	b.n	18b28 <_k_thread_single_abort+0x18>
	...

00018b5c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   18b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   18b5e:	4f21      	ldr	r7, [pc, #132]	; (18be4 <_init_static_threads+0x88>)
   18b60:	4d21      	ldr	r5, [pc, #132]	; (18be8 <_init_static_threads+0x8c>)
{
   18b62:	b087      	sub	sp, #28
   18b64:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   18b66:	42bd      	cmp	r5, r7
   18b68:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   18b6c:	d314      	bcc.n	18b98 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   18b6e:	4b1f      	ldr	r3, [pc, #124]	; (18bec <_init_static_threads+0x90>)
   18b70:	689a      	ldr	r2, [r3, #8]
   18b72:	7ad3      	ldrb	r3, [r2, #11]
   18b74:	3b01      	subs	r3, #1
   18b76:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   18b78:	f04f 0320 	mov.w	r3, #32
   18b7c:	f3ef 8511 	mrs	r5, BASEPRI
   18b80:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   18b84:	4c18      	ldr	r4, [pc, #96]	; (18be8 <_init_static_threads+0x8c>)
   18b86:	42b4      	cmp	r4, r6
   18b88:	d31f      	bcc.n	18bca <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18b8a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   18b8e:	b007      	add	sp, #28
   18b90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   18b94:	f7ff bc7c 	b.w	18490 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18b98:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   18b9c:	9304      	str	r3, [sp, #16]
   18b9e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18ba2:	9303      	str	r3, [sp, #12]
   18ba4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   18ba8:	9302      	str	r3, [sp, #8]
   18baa:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18bae:	9301      	str	r3, [sp, #4]
   18bb0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18bb4:	9300      	str	r3, [sp, #0]
   18bb6:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   18bba:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   18bbc:	f7e8 f944 	bl	e48 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18bc0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   18bc4:	64dd      	str	r5, [r3, #76]	; 0x4c
   18bc6:	4625      	mov	r5, r4
   18bc8:	e7cd      	b.n	18b66 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   18bca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18bcc:	1c4b      	adds	r3, r1, #1
   18bce:	d003      	beq.n	18bd8 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   18bd0:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   18bd2:	b919      	cbnz	r1, 18bdc <_init_static_threads+0x80>
   18bd4:	f7ff ff14 	bl	18a00 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18bd8:	342c      	adds	r4, #44	; 0x2c
   18bda:	e7d4      	b.n	18b86 <_init_static_threads+0x2a>
   18bdc:	f7ff ff3e 	bl	18a5c <schedule_new_thread.part.13>
   18be0:	e7fa      	b.n	18bd8 <_init_static_threads+0x7c>
   18be2:	bf00      	nop
   18be4:	20006b64 	.word	0x20006b64
   18be8:	20006b64 	.word	0x20006b64
   18bec:	20001bc0 	.word	0x20001bc0

00018bf0 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   18bf0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   18bf2:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   18bf4:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   18bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   18bfa:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   18bfc:	72c3      	strb	r3, [r0, #11]
   18bfe:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   18c00:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   18c02:	6183      	str	r3, [r0, #24]
	t->func = func;
   18c04:	6243      	str	r3, [r0, #36]	; 0x24
   18c06:	4770      	bx	lr

00018c08 <k_work_submit_to_queue>:
{
   18c08:	b500      	push	{lr}
   18c0a:	f101 0308 	add.w	r3, r1, #8
   18c0e:	f3bf 8f5b 	dmb	ish
   18c12:	e853 2f00 	ldrex	r2, [r3]
   18c16:	f042 0e01 	orr.w	lr, r2, #1
   18c1a:	e843 ec00 	strex	ip, lr, [r3]
   18c1e:	f1bc 0f00 	cmp.w	ip, #0
   18c22:	d1f6      	bne.n	18c12 <k_work_submit_to_queue+0xa>
   18c24:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   18c28:	07d3      	lsls	r3, r2, #31
   18c2a:	d403      	bmi.n	18c34 <k_work_submit_to_queue+0x2c>
}
   18c2c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   18c30:	f7ff ba9b 	b.w	1816a <k_queue_append>
   18c34:	f85d fb04 	ldr.w	pc, [sp], #4

00018c38 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   18c38:	f1a0 010c 	sub.w	r1, r0, #12
   18c3c:	6980      	ldr	r0, [r0, #24]
   18c3e:	f7ff bfe3 	b.w	18c08 <k_work_submit_to_queue>

00018c42 <work_q_main>:
{
   18c42:	b510      	push	{r4, lr}
   18c44:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   18c46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18c4a:	4620      	mov	r0, r4
   18c4c:	f7ff fab1 	bl	181b2 <k_queue_get>
		if (!work) {
   18c50:	4603      	mov	r3, r0
   18c52:	2800      	cmp	r0, #0
   18c54:	d0f7      	beq.n	18c46 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18c56:	3308      	adds	r3, #8
		handler = work->handler;
   18c58:	6842      	ldr	r2, [r0, #4]
   18c5a:	f3bf 8f5b 	dmb	ish
   18c5e:	e853 1f00 	ldrex	r1, [r3]
   18c62:	f021 0e01 	bic.w	lr, r1, #1
   18c66:	e843 ec00 	strex	ip, lr, [r3]
   18c6a:	f1bc 0f00 	cmp.w	ip, #0
   18c6e:	d1f6      	bne.n	18c5e <work_q_main+0x1c>
   18c70:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   18c74:	07cb      	lsls	r3, r1, #31
   18c76:	d500      	bpl.n	18c7a <work_q_main+0x38>
			handler(work);
   18c78:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   18c7a:	f7ff fc41 	bl	18500 <_impl_k_yield>
   18c7e:	e7e2      	b.n	18c46 <work_q_main+0x4>

00018c80 <k_work_q_start>:
{
   18c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c82:	b087      	sub	sp, #28
   18c84:	4604      	mov	r4, r0
   18c86:	461f      	mov	r7, r3
   18c88:	460d      	mov	r5, r1
   18c8a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   18c8c:	f7ff fa26 	bl	180dc <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   18c90:	2000      	movs	r0, #0
   18c92:	9005      	str	r0, [sp, #20]
   18c94:	9004      	str	r0, [sp, #16]
   18c96:	9002      	str	r0, [sp, #8]
   18c98:	9001      	str	r0, [sp, #4]
   18c9a:	9703      	str	r7, [sp, #12]
   18c9c:	9400      	str	r4, [sp, #0]
   18c9e:	4b04      	ldr	r3, [pc, #16]	; (18cb0 <k_work_q_start+0x30>)
   18ca0:	4632      	mov	r2, r6
   18ca2:	4629      	mov	r1, r5
   18ca4:	f104 0010 	add.w	r0, r4, #16
   18ca8:	f7ff ff14 	bl	18ad4 <_impl_k_thread_create>
}
   18cac:	b007      	add	sp, #28
   18cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cb0:	00018c43 	.word	0x00018c43

00018cb4 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   18cb4:	b500      	push	{lr}
   18cb6:	f100 0308 	add.w	r3, r0, #8
   18cba:	f3bf 8f5b 	dmb	ish
   18cbe:	e853 2f00 	ldrex	r2, [r3]
   18cc2:	f022 0201 	bic.w	r2, r2, #1
   18cc6:	e843 2e00 	strex	lr, r2, [r3]
   18cca:	f1be 0f00 	cmp.w	lr, #0
   18cce:	d1f6      	bne.n	18cbe <k_delayed_work_init+0xa>
   18cd0:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   18cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18cd8:	61c3      	str	r3, [r0, #28]
	t->func = func;
   18cda:	4a04      	ldr	r2, [pc, #16]	; (18cec <k_delayed_work_init+0x38>)
	work->handler = handler;
   18cdc:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   18cde:	2300      	movs	r3, #0
   18ce0:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   18ce2:	6143      	str	r3, [r0, #20]
	t->func = func;
   18ce4:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   18ce6:	6243      	str	r3, [r0, #36]	; 0x24
   18ce8:	f85d fb04 	ldr.w	pc, [sp], #4
   18cec:	00018c39 	.word	0x00018c39

00018cf0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   18cf0:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   18cf2:	f04f 0320 	mov.w	r3, #32
   18cf6:	f3ef 8411 	mrs	r4, BASEPRI
   18cfa:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   18cfe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   18d00:	b923      	cbnz	r3, 18d0c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18d02:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   18d06:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
   18d0a:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18d0c:	f3bf 8f5b 	dmb	ish
   18d10:	6883      	ldr	r3, [r0, #8]
   18d12:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   18d16:	07da      	lsls	r2, r3, #31
   18d18:	d51d      	bpl.n	18d56 <k_delayed_work_cancel+0x66>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   18d1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   18d1c:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   18d1e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   18d20:	2b00      	cmp	r3, #0
   18d22:	d0ee      	beq.n	18d02 <k_delayed_work_cancel+0x12>
		if (test == node) {
   18d24:	4298      	cmp	r0, r3
   18d26:	d113      	bne.n	18d50 <k_delayed_work_cancel+0x60>
   18d28:	6803      	ldr	r3, [r0, #0]
   18d2a:	6855      	ldr	r5, [r2, #4]
	if (!prev_node) {
   18d2c:	b959      	cbnz	r1, 18d46 <k_delayed_work_cancel+0x56>
		if (list->tail == node) {
   18d2e:	42a8      	cmp	r0, r5
		list->head = node->next;
   18d30:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   18d32:	d100      	bne.n	18d36 <k_delayed_work_cancel+0x46>
			list->tail = list->head;
   18d34:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   18d36:	2300      	movs	r3, #0
   18d38:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   18d3a:	2300      	movs	r3, #0
   18d3c:	6243      	str	r3, [r0, #36]	; 0x24
   18d3e:	f384 8811 	msr	BASEPRI, r4
	return 0;
   18d42:	4618      	mov	r0, r3
   18d44:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
   18d46:	42a8      	cmp	r0, r5
		prev_node->next = node->next;
   18d48:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   18d4a:	bf08      	it	eq
   18d4c:	6051      	streq	r1, [r2, #4]
   18d4e:	e7f2      	b.n	18d36 <k_delayed_work_cancel+0x46>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   18d50:	4619      	mov	r1, r3
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	e7e4      	b.n	18d20 <k_delayed_work_cancel+0x30>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18d56:	69c1      	ldr	r1, [r0, #28]
   18d58:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   18d5a:	f100 020c 	add.w	r2, r0, #12
   18d5e:	d0ec      	beq.n	18d3a <k_delayed_work_cancel+0x4a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   18d60:	4b08      	ldr	r3, [pc, #32]	; (18d84 <k_delayed_work_cancel+0x94>)
   18d62:	691b      	ldr	r3, [r3, #16]
   18d64:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   18d66:	bf1f      	itttt	ne
   18d68:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   18d6a:	6913      	ldrne	r3, [r2, #16]
   18d6c:	185b      	addne	r3, r3, r1
   18d6e:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   18d70:	6903      	ldr	r3, [r0, #16]
   18d72:	68c2      	ldr	r2, [r0, #12]
   18d74:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   18d76:	68c2      	ldr	r2, [r0, #12]
   18d78:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   18d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d7e:	61c3      	str	r3, [r0, #28]
   18d80:	e7db      	b.n	18d3a <k_delayed_work_cancel+0x4a>
   18d82:	bf00      	nop
   18d84:	20001bc0 	.word	0x20001bc0

00018d88 <k_delayed_work_submit_to_queue>:
{
   18d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d8a:	4607      	mov	r7, r0
   18d8c:	460c      	mov	r4, r1
   18d8e:	4615      	mov	r5, r2
	__asm__ volatile(
   18d90:	f04f 0320 	mov.w	r3, #32
   18d94:	f3ef 8611 	mrs	r6, BASEPRI
   18d98:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   18d9c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   18d9e:	b123      	cbz	r3, 18daa <k_delayed_work_submit_to_queue+0x22>
   18da0:	4283      	cmp	r3, r0
   18da2:	d00b      	beq.n	18dbc <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   18da4:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   18da8:	e00d      	b.n	18dc6 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   18daa:	b138      	cbz	r0, 18dbc <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   18dac:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   18dae:	b96d      	cbnz	r5, 18dcc <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   18db0:	4621      	mov	r1, r4
   18db2:	4638      	mov	r0, r7
   18db4:	f7ff ff28 	bl	18c08 <k_work_submit_to_queue>
	err = 0;
   18db8:	2000      	movs	r0, #0
   18dba:	e004      	b.n	18dc6 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   18dbc:	4620      	mov	r0, r4
   18dbe:	f7ff ff97 	bl	18cf0 <k_delayed_work_cancel>
		if (err < 0) {
   18dc2:	2800      	cmp	r0, #0
   18dc4:	daf2      	bge.n	18dac <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18dc6:	f386 8811 	msr	BASEPRI, r6
}
   18dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   18dcc:	220a      	movs	r2, #10
   18dce:	3509      	adds	r5, #9
   18dd0:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   18dd4:	4a16      	ldr	r2, [pc, #88]	; (18e30 <k_delayed_work_submit_to_queue+0xa8>)
   18dd6:	4611      	mov	r1, r2
	timeout->thread = thread;
   18dd8:	2300      	movs	r3, #0
   18dda:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   18ddc:	61a3      	str	r3, [r4, #24]
   18dde:	f851 3f0c 	ldr.w	r3, [r1, #12]!
		_add_timeout(NULL, &work->timeout, NULL,
   18de2:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18de4:	428b      	cmp	r3, r1
   18de6:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   18dea:	61e5      	str	r5, [r4, #28]
   18dec:	d106      	bne.n	18dfc <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   18dee:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   18df0:	6913      	ldr	r3, [r2, #16]
   18df2:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   18df4:	6913      	ldr	r3, [r2, #16]
   18df6:	601f      	str	r7, [r3, #0]
	list->tail = node;
   18df8:	6117      	str	r7, [r2, #16]
   18dfa:	e7dd      	b.n	18db8 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   18dfc:	2b00      	cmp	r3, #0
   18dfe:	d0f6      	beq.n	18dee <k_delayed_work_submit_to_queue+0x66>
   18e00:	f8d2 e010 	ldr.w	lr, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   18e04:	69e0      	ldr	r0, [r4, #28]
   18e06:	691d      	ldr	r5, [r3, #16]
   18e08:	42a8      	cmp	r0, r5
   18e0a:	dc08      	bgt.n	18e1e <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   18e0c:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   18e0e:	1a28      	subs	r0, r5, r0
   18e10:	6118      	str	r0, [r3, #16]
   18e12:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   18e14:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   18e16:	685a      	ldr	r2, [r3, #4]
   18e18:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   18e1a:	605f      	str	r7, [r3, #4]
   18e1c:	e7cc      	b.n	18db8 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   18e1e:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   18e20:	4573      	cmp	r3, lr
   18e22:	61e0      	str	r0, [r4, #28]
   18e24:	d0e3      	beq.n	18dee <k_delayed_work_submit_to_queue+0x66>
   18e26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   18e28:	2b00      	cmp	r3, #0
   18e2a:	d1eb      	bne.n	18e04 <k_delayed_work_submit_to_queue+0x7c>
   18e2c:	e7df      	b.n	18dee <k_delayed_work_submit_to_queue+0x66>
   18e2e:	bf00      	nop
   18e30:	20001bc0 	.word	0x20001bc0

00018e34 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18e34:	7a42      	ldrb	r2, [r0, #9]
   18e36:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   18e3a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18e3e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   18e40:	d104      	bne.n	18e4c <_ready_thread+0x18>
   18e42:	6a03      	ldr	r3, [r0, #32]
   18e44:	3301      	adds	r3, #1
   18e46:	d101      	bne.n	18e4c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   18e48:	f7ff b9fa 	b.w	18240 <_add_thread_to_ready_q>
   18e4c:	4770      	bx	lr

00018e4e <_unpend_thread>:
	node->prev->next = node->next;
   18e4e:	e890 000c 	ldmia.w	r0, {r2, r3}
   18e52:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   18e54:	6802      	ldr	r2, [r0, #0]
   18e56:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   18e58:	7a43      	ldrb	r3, [r0, #9]
   18e5a:	f023 0302 	bic.w	r3, r3, #2
   18e5e:	7243      	strb	r3, [r0, #9]
   18e60:	4770      	bx	lr
	...

00018e64 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18e64:	6903      	ldr	r3, [r0, #16]
   18e66:	1c5a      	adds	r2, r3, #1
   18e68:	d011      	beq.n	18e8e <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   18e6a:	4a0a      	ldr	r2, [pc, #40]	; (18e94 <_abort_timeout+0x30>)
   18e6c:	6912      	ldr	r2, [r2, #16]
   18e6e:	4290      	cmp	r0, r2
	return (node == list->tail) ? NULL : node->next;
   18e70:	bf1f      	itttt	ne
   18e72:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   18e74:	690a      	ldrne	r2, [r1, #16]
   18e76:	189b      	addne	r3, r3, r2
   18e78:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   18e7a:	e890 000c 	ldmia.w	r0, {r2, r3}
   18e7e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   18e80:	6802      	ldr	r2, [r0, #0]
   18e82:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   18e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18e88:	6103      	str	r3, [r0, #16]
	return 0;
   18e8a:	2000      	movs	r0, #0
   18e8c:	4770      	bx	lr
		return _INACTIVE;
   18e8e:	4618      	mov	r0, r3
}
   18e90:	4770      	bx	lr
   18e92:	bf00      	nop
   18e94:	20001bc0 	.word	0x20001bc0

00018e98 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   18e98:	b430      	push	{r4, r5}
	timeout->thread = thread;
   18e9a:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   18e9c:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   18e9e:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   18ea0:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   18ea2:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   18ea4:	b972      	cbnz	r2, 18ec4 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   18ea6:	f04f 0120 	mov.w	r1, #32
   18eaa:	f3ef 8211 	mrs	r2, BASEPRI
   18eae:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   18eb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18eb6:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18eb8:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   18ebc:	6943      	ldr	r3, [r0, #20]
   18ebe:	b16b      	cbz	r3, 18edc <_add_timeout.constprop.9+0x44>
}
   18ec0:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   18ec2:	4718      	bx	r3
	return list->head == list;
   18ec4:	4911      	ldr	r1, [pc, #68]	; (18f0c <_add_timeout.constprop.9+0x74>)
   18ec6:	4608      	mov	r0, r1
   18ec8:	f850 2f0c 	ldr.w	r2, [r0, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ecc:	4282      	cmp	r2, r0
   18ece:	d10d      	bne.n	18eec <_add_timeout.constprop.9+0x54>
	node->next = list;
   18ed0:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   18ed2:	690a      	ldr	r2, [r1, #16]
   18ed4:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   18ed6:	690a      	ldr	r2, [r1, #16]
   18ed8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18eda:	610b      	str	r3, [r1, #16]
}
   18edc:	bc30      	pop	{r4, r5}
   18ede:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   18ee0:	1b64      	subs	r4, r4, r5
   18ee2:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   18ee4:	690c      	ldr	r4, [r1, #16]
   18ee6:	42a2      	cmp	r2, r4
   18ee8:	d0f2      	beq.n	18ed0 <_add_timeout.constprop.9+0x38>
   18eea:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   18eec:	2a00      	cmp	r2, #0
   18eee:	d0ef      	beq.n	18ed0 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   18ef0:	691c      	ldr	r4, [r3, #16]
   18ef2:	6915      	ldr	r5, [r2, #16]
   18ef4:	42ac      	cmp	r4, r5
   18ef6:	dcf3      	bgt.n	18ee0 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   18ef8:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   18efa:	1b2c      	subs	r4, r5, r4
   18efc:	6114      	str	r4, [r2, #16]
   18efe:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   18f00:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   18f02:	6851      	ldr	r1, [r2, #4]
   18f04:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   18f06:	6053      	str	r3, [r2, #4]
   18f08:	e7e8      	b.n	18edc <_add_timeout.constprop.9+0x44>
   18f0a:	bf00      	nop
   18f0c:	20001bc0 	.word	0x20001bc0

00018f10 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   18f10:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18f12:	2b00      	cmp	r3, #0
{
   18f14:	b570      	push	{r4, r5, r6, lr}
   18f16:	4604      	mov	r4, r0
   18f18:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   18f1c:	dd0b      	ble.n	18f36 <_timer_expiration_handler+0x26>
	__asm__ volatile(
   18f1e:	f04f 0320 	mov.w	r3, #32
   18f22:	f3ef 8611 	mrs	r6, BASEPRI
   18f26:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   18f2a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   18f2c:	4629      	mov	r1, r5
   18f2e:	f7ff ffb3 	bl	18e98 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18f32:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   18f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18f38:	3301      	adds	r3, #1
   18f3a:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   18f3c:	6a23      	ldr	r3, [r4, #32]
   18f3e:	b10b      	cbz	r3, 18f44 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   18f40:	4620      	mov	r0, r4
   18f42:	4798      	blx	r3
	return list->head == list;
   18f44:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f46:	42ac      	cmp	r4, r5
   18f48:	d010      	beq.n	18f6c <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   18f4a:	b17c      	cbz	r4, 18f6c <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   18f4c:	4620      	mov	r0, r4
   18f4e:	f7ff ff7e 	bl	18e4e <_unpend_thread>
	__asm__ volatile(
   18f52:	f04f 0320 	mov.w	r3, #32
   18f56:	f3ef 8511 	mrs	r5, BASEPRI
   18f5a:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   18f5e:	4620      	mov	r0, r4
   18f60:	f7ff ff68 	bl	18e34 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18f64:	f385 8811 	msr	BASEPRI, r5
   18f68:	2300      	movs	r3, #0
   18f6a:	6663      	str	r3, [r4, #100]	; 0x64
   18f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00018f70 <k_timer_init>:
void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
   18f70:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;

	sys_dlist_init(&timer->wait_q);
   18f72:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   18f76:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   18f78:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   18f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	timer->status = 0;
   18f7e:	2300      	movs	r3, #0
   18f80:	6102      	str	r2, [r0, #16]
	t->func = func;
   18f82:	4a04      	ldr	r2, [pc, #16]	; (18f94 <k_timer_init+0x24>)
	timer->expiry_fn = expiry_fn;
   18f84:	6201      	str	r1, [r0, #32]
	timer->status = 0;
   18f86:	62c3      	str	r3, [r0, #44]	; 0x2c
	t->wait_q = NULL;
   18f88:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   18f8a:	6083      	str	r3, [r0, #8]
	t->func = func;
   18f8c:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   18f8e:	6303      	str	r3, [r0, #48]	; 0x30
   18f90:	4770      	bx	lr
   18f92:	bf00      	nop
   18f94:	00018f11 	.word	0x00018f11

00018f98 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   18f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f9a:	230a      	movs	r3, #10
   18f9c:	4604      	mov	r4, r0
   18f9e:	3209      	adds	r2, #9
   18fa0:	3109      	adds	r1, #9
   18fa2:	fbb2 f2f3 	udiv	r2, r2, r3
   18fa6:	fbb1 f1f3 	udiv	r1, r1, r3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   18faa:	9200      	str	r2, [sp, #0]
	duration_in_ticks = _ms_to_ticks(duration);
   18fac:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   18fae:	f04f 0320 	mov.w	r3, #32
   18fb2:	f3ef 8511 	mrs	r5, BASEPRI
   18fb6:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   18fba:	6903      	ldr	r3, [r0, #16]
   18fbc:	3301      	adds	r3, #1
   18fbe:	d001      	beq.n	18fc4 <_impl_k_timer_start+0x2c>
		_abort_timeout(&timer->timeout);
   18fc0:	f7ff ff50 	bl	18e64 <_abort_timeout>
	}

	timer->period = period_in_ticks;
   18fc4:	9b00      	ldr	r3, [sp, #0]
   18fc6:	62a3      	str	r3, [r4, #40]	; 0x28
	timer->status = 0;
   18fc8:	2300      	movs	r3, #0
   18fca:	62e3      	str	r3, [r4, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   18fcc:	9a01      	ldr	r2, [sp, #4]
   18fce:	f104 0118 	add.w	r1, r4, #24
   18fd2:	4620      	mov	r0, r4
   18fd4:	f7ff ff60 	bl	18e98 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18fd8:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);
}
   18fdc:	b003      	add	sp, #12
   18fde:	bd30      	pop	{r4, r5, pc}

00018fe0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   18fe0:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   18fe2:	f04f 0320 	mov.w	r3, #32
   18fe6:	f3ef 8411 	mrs	r4, BASEPRI
   18fea:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   18fee:	6903      	ldr	r3, [r0, #16]
   18ff0:	3301      	adds	r3, #1
   18ff2:	d016      	beq.n	19022 <_timeout_remaining_get+0x42>
	return list->head == list;
   18ff4:	490d      	ldr	r1, [pc, #52]	; (1902c <_timeout_remaining_get+0x4c>)
   18ff6:	460a      	mov	r2, r1
   18ff8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ffc:	4293      	cmp	r3, r2
   18ffe:	d012      	beq.n	19026 <_timeout_remaining_get+0x46>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   19000:	691a      	ldr	r2, [r3, #16]
   19002:	6909      	ldr	r1, [r1, #16]
		while (t != timeout) {
   19004:	4283      	cmp	r3, r0
   19006:	d105      	bne.n	19014 <_timeout_remaining_get+0x34>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   19008:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   1900c:	200a      	movs	r0, #10
   1900e:	fb82 0100 	smull	r0, r1, r2, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   19012:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19014:	b13b      	cbz	r3, 19026 <_timeout_remaining_get+0x46>
	return (node == list->tail) ? NULL : node->next;
   19016:	428b      	cmp	r3, r1
   19018:	d005      	beq.n	19026 <_timeout_remaining_get+0x46>
   1901a:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
   1901c:	691d      	ldr	r5, [r3, #16]
   1901e:	442a      	add	r2, r5
   19020:	e7f0      	b.n	19004 <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
   19022:	2200      	movs	r2, #0
   19024:	e7f0      	b.n	19008 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
   19026:	2300      	movs	r3, #0
   19028:	691b      	ldr	r3, [r3, #16]
   1902a:	deff      	udf	#255	; 0xff
   1902c:	20001bc0 	.word	0x20001bc0

00019030 <sys_dlist_remove>:
	node->prev->next = node->next;
   19030:	e890 000c 	ldmia.w	r0, {r2, r3}
   19034:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   19036:	6802      	ldr	r2, [r0, #0]
   19038:	6053      	str	r3, [r2, #4]
   1903a:	4770      	bx	lr

0001903c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   1903c:	b570      	push	{r4, r5, r6, lr}
   1903e:	2414      	movs	r4, #20
   19040:	4615      	mov	r5, r2
   19042:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   19046:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   19048:	2900      	cmp	r1, #0
   1904a:	da00      	bge.n	1904e <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   1904c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1904e:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   19050:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   19052:	f003 030f 	and.w	r3, r3, #15
   19056:	2b02      	cmp	r3, #2
   19058:	d003      	beq.n	19062 <clear_event_registrations+0x26>
   1905a:	2b04      	cmp	r3, #4
   1905c:	d001      	beq.n	19062 <clear_event_registrations+0x26>
   1905e:	2b01      	cmp	r3, #1
   19060:	d102      	bne.n	19068 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   19062:	4620      	mov	r0, r4
   19064:	f7ff ffe4 	bl	19030 <sys_dlist_remove>
   19068:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   1906c:	f04f 0320 	mov.w	r3, #32
   19070:	f3ef 8511 	mrs	r5, BASEPRI
   19074:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   19078:	3901      	subs	r1, #1
   1907a:	3c14      	subs	r4, #20
   1907c:	e7e4      	b.n	19048 <clear_event_registrations+0xc>
	...

00019080 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   19080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   19082:	2300      	movs	r3, #0
   19084:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   19086:	6883      	ldr	r3, [r0, #8]
{
   19088:	4605      	mov	r5, r0
   1908a:	460e      	mov	r6, r1
   1908c:	4617      	mov	r7, r2
	if (!event->poller) {
   1908e:	2b00      	cmp	r3, #0
   19090:	d049      	beq.n	19126 <_signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   19092:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   19094:	7a4b      	ldrb	r3, [r1, #9]
   19096:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   1909a:	0798      	lsls	r0, r3, #30
   1909c:	724a      	strb	r2, [r1, #9]
   1909e:	d542      	bpl.n	19126 <_signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   190a0:	6a0b      	ldr	r3, [r1, #32]
   190a2:	3302      	adds	r3, #2
   190a4:	d04a      	beq.n	1913c <_signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   190a6:	4608      	mov	r0, r1
   190a8:	f7ff ffc2 	bl	19030 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   190ac:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   190ae:	6a0c      	ldr	r4, [r1, #32]
   190b0:	f023 0302 	bic.w	r3, r3, #2
   190b4:	1c62      	adds	r2, r4, #1
   190b6:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   190b8:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   190bc:	d00c      	beq.n	190d8 <_signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   190be:	4b21      	ldr	r3, [pc, #132]	; (19144 <_signal_poll_event+0xc4>)
   190c0:	691b      	ldr	r3, [r3, #16]
   190c2:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   190c4:	bf1f      	itttt	ne
   190c6:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   190c8:	6913      	ldrne	r3, [r2, #16]
   190ca:	191b      	addne	r3, r3, r4
   190cc:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   190ce:	f7ff ffaf 	bl	19030 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   190d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   190d6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   190d8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   190da:	2e00      	cmp	r6, #0
   190dc:	bf0c      	ite	eq
   190de:	f06f 0303 	mvneq.w	r3, #3
   190e2:	2300      	movne	r3, #0
   190e4:	f010 041f 	ands.w	r4, r0, #31
   190e8:	664b      	str	r3, [r1, #100]	; 0x64
   190ea:	d11c      	bne.n	19126 <_signal_poll_event+0xa6>
   190ec:	6a0b      	ldr	r3, [r1, #32]
   190ee:	3301      	adds	r3, #1
   190f0:	d119      	bne.n	19126 <_signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   190f2:	4608      	mov	r0, r1
   190f4:	f7ff f8a4 	bl	18240 <_add_thread_to_ready_q>
   190f8:	f3ef 8305 	mrs	r3, IPSR
   190fc:	2b0d      	cmp	r3, #13
   190fe:	d81b      	bhi.n	19138 <_signal_poll_event+0xb8>
   19100:	b123      	cbz	r3, 1910c <_signal_poll_event+0x8c>
   19102:	4b11      	ldr	r3, [pc, #68]	; (19148 <_signal_poll_event+0xc8>)
   19104:	6858      	ldr	r0, [r3, #4]
   19106:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   1910a:	d00b      	beq.n	19124 <_signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   1910c:	4b0d      	ldr	r3, [pc, #52]	; (19144 <_signal_poll_event+0xc4>)
   1910e:	689b      	ldr	r3, [r3, #8]
   19110:	895b      	ldrh	r3, [r3, #10]
   19112:	2b7f      	cmp	r3, #127	; 0x7f
   19114:	d901      	bls.n	1911a <_signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   19116:	2000      	movs	r0, #0
   19118:	e004      	b.n	19124 <_signal_poll_event+0xa4>
   1911a:	f7ff f989 	bl	18430 <__must_switch_threads>
   1911e:	3000      	adds	r0, #0
   19120:	bf18      	it	ne
   19122:	2001      	movne	r0, #1
   19124:	6038      	str	r0, [r7, #0]
	event->state |= state;
   19126:	7b6b      	ldrb	r3, [r5, #13]
   19128:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   1912c:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   19130:	2000      	movs	r0, #0
	event->state |= state;
   19132:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   19134:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   19136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   19138:	4620      	mov	r0, r4
   1913a:	e7f3      	b.n	19124 <_signal_poll_event+0xa4>
		return -EAGAIN;
   1913c:	f06f 000a 	mvn.w	r0, #10
   19140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19142:	bf00      	nop
   19144:	20001bc0 	.word	0x20001bc0
   19148:	e000ed00 	.word	0xe000ed00

0001914c <add_event>:
	return list->head == list;
   1914c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1914e:	4298      	cmp	r0, r3
{
   19150:	b530      	push	{r4, r5, lr}
   19152:	d00a      	beq.n	1916a <add_event+0x1e>
   19154:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   19156:	b144      	cbz	r4, 1916a <add_event+0x1e>
   19158:	68a5      	ldr	r5, [r4, #8]
   1915a:	6812      	ldr	r2, [r2, #0]
   1915c:	682d      	ldr	r5, [r5, #0]
   1915e:	f992 200a 	ldrsb.w	r2, [r2, #10]
   19162:	f995 500a 	ldrsb.w	r5, [r5, #10]
   19166:	4295      	cmp	r5, r2
   19168:	da17      	bge.n	1919a <add_event+0x4e>
	node->next = list;
   1916a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1916c:	6843      	ldr	r3, [r0, #4]
   1916e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   19170:	6843      	ldr	r3, [r0, #4]
   19172:	6019      	str	r1, [r3, #0]
	list->tail = node;
   19174:	6041      	str	r1, [r0, #4]
   19176:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   19178:	689d      	ldr	r5, [r3, #8]
   1917a:	682d      	ldr	r5, [r5, #0]
   1917c:	f995 500a 	ldrsb.w	r5, [r5, #10]
   19180:	4295      	cmp	r5, r2
   19182:	dd06      	ble.n	19192 <add_event+0x46>
		node->prev = insert_point->prev;
   19184:	685a      	ldr	r2, [r3, #4]
   19186:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   19188:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1918a:	685a      	ldr	r2, [r3, #4]
   1918c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   1918e:	6059      	str	r1, [r3, #4]
   19190:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   19192:	42a3      	cmp	r3, r4
   19194:	d003      	beq.n	1919e <add_event+0x52>
   19196:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   19198:	b10b      	cbz	r3, 1919e <add_event+0x52>
   1919a:	2b00      	cmp	r3, #0
   1919c:	d1ec      	bne.n	19178 <add_event+0x2c>
	node->prev = list->tail;
   1919e:	e881 0011 	stmia.w	r1, {r0, r4}
   191a2:	e7e5      	b.n	19170 <add_event+0x24>

000191a4 <k_poll_event_init>:
{
   191a4:	b530      	push	{r4, r5, lr}
	event->type = type;
   191a6:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   191a8:	6103      	str	r3, [r0, #16]
	event->type = type;
   191aa:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   191ae:	7b81      	ldrb	r1, [r0, #14]
   191b0:	f362 0100 	bfi	r1, r2, #0, #1
   191b4:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   191b6:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   191b8:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   191ba:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   191be:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   191c2:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   191c4:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   191c6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   191c8:	bd30      	pop	{r4, r5, pc}
	...

000191cc <k_poll>:
{
   191cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191d0:	b087      	sub	sp, #28
   191d2:	4680      	mov	r8, r0
   191d4:	9101      	str	r1, [sp, #4]
   191d6:	4691      	mov	r9, r2
   191d8:	f04f 0320 	mov.w	r3, #32
   191dc:	f3ef 8111 	mrs	r1, BASEPRI
   191e0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   191e4:	4d4a      	ldr	r5, [pc, #296]	; (19310 <k_poll+0x144>)
   191e6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   191e8:	7a53      	ldrb	r3, [r2, #9]
   191ea:	f043 0320 	orr.w	r3, r3, #32
   191ee:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   191f0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   191f4:	f10d 0a18 	add.w	sl, sp, #24
   191f8:	68aa      	ldr	r2, [r5, #8]
   191fa:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   191fe:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   19200:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   19202:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   19206:	9b01      	ldr	r3, [sp, #4]
   19208:	429f      	cmp	r7, r3
   1920a:	db15      	blt.n	19238 <k_poll+0x6c>
	__asm__ volatile(
   1920c:	f04f 0320 	mov.w	r3, #32
   19210:	f3ef 8711 	mrs	r7, BASEPRI
   19214:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   19218:	68aa      	ldr	r2, [r5, #8]
   1921a:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   1921c:	f013 0420 	ands.w	r4, r3, #32
   19220:	d144      	bne.n	192ac <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   19222:	463a      	mov	r2, r7
   19224:	4631      	mov	r1, r6
   19226:	4640      	mov	r0, r8
   19228:	f7ff ff08 	bl	1903c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1922c:	f387 8811 	msr	BASEPRI, r7
}
   19230:	4620      	mov	r0, r4
   19232:	b007      	add	sp, #28
   19234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   19238:	f04f 0220 	mov.w	r2, #32
   1923c:	f3ef 8b11 	mrs	fp, BASEPRI
   19240:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   19244:	7b61      	ldrb	r1, [r4, #13]
   19246:	f001 020f 	and.w	r2, r1, #15
   1924a:	2a02      	cmp	r2, #2
   1924c:	d003      	beq.n	19256 <k_poll+0x8a>
   1924e:	2a04      	cmp	r2, #4
   19250:	d004      	beq.n	1925c <k_poll+0x90>
   19252:	2a01      	cmp	r2, #1
   19254:	d106      	bne.n	19264 <k_poll+0x98>
		if (event->signal->signaled) {
   19256:	6920      	ldr	r0, [r4, #16]
   19258:	6880      	ldr	r0, [r0, #8]
   1925a:	e001      	b.n	19260 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1925c:	6920      	ldr	r0, [r4, #16]
   1925e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   19260:	2800      	cmp	r0, #0
   19262:	d148      	bne.n	192f6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   19264:	f1b9 0f00 	cmp.w	r9, #0
   19268:	d016      	beq.n	19298 <k_poll+0xcc>
   1926a:	68a9      	ldr	r1, [r5, #8]
   1926c:	7a49      	ldrb	r1, [r1, #9]
   1926e:	068b      	lsls	r3, r1, #26
   19270:	d512      	bpl.n	19298 <k_poll+0xcc>
	switch (event->type) {
   19272:	2a02      	cmp	r2, #2
   19274:	d007      	beq.n	19286 <k_poll+0xba>
   19276:	2a04      	cmp	r2, #4
   19278:	d013      	beq.n	192a2 <k_poll+0xd6>
   1927a:	2a01      	cmp	r2, #1
   1927c:	d109      	bne.n	19292 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   1927e:	4652      	mov	r2, sl
   19280:	4621      	mov	r1, r4
   19282:	6920      	ldr	r0, [r4, #16]
   19284:	e003      	b.n	1928e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   19286:	6920      	ldr	r0, [r4, #16]
   19288:	4652      	mov	r2, sl
   1928a:	4621      	mov	r1, r4
   1928c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1928e:	f7ff ff5d 	bl	1914c <add_event>
	event->poller = poller;
   19292:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   19296:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   19298:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   1929c:	3701      	adds	r7, #1
   1929e:	3414      	adds	r4, #20
   192a0:	e7b1      	b.n	19206 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   192a2:	6920      	ldr	r0, [r4, #16]
   192a4:	4652      	mov	r2, sl
   192a6:	4621      	mov	r1, r4
   192a8:	3008      	adds	r0, #8
   192aa:	e7f0      	b.n	1928e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   192ac:	f023 0320 	bic.w	r3, r3, #32
   192b0:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   192b2:	f1b9 0f00 	cmp.w	r9, #0
   192b6:	d104      	bne.n	192c2 <k_poll+0xf6>
   192b8:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   192bc:	f06f 040a 	mvn.w	r4, #10
   192c0:	e7b6      	b.n	19230 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   192c2:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   192c4:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   192c6:	9004      	str	r0, [sp, #16]
   192c8:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   192ca:	f7ff f8a1 	bl	18410 <_pend_current_thread>
	_update_time_slice_before_swap();
   192ce:	f7ff f987 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   192d2:	4638      	mov	r0, r7
   192d4:	f7e7 fc0a 	bl	aec <__swap>
   192d8:	4604      	mov	r4, r0
	__asm__ volatile(
   192da:	f04f 0320 	mov.w	r3, #32
   192de:	f3ef 8511 	mrs	r5, BASEPRI
   192e2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   192e6:	462a      	mov	r2, r5
   192e8:	4631      	mov	r1, r6
   192ea:	4640      	mov	r0, r8
   192ec:	f7ff fea6 	bl	1903c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   192f0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   192f4:	e79c      	b.n	19230 <k_poll+0x64>
	event->state |= state;
   192f6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   192fa:	f362 1107 	bfi	r1, r2, #4, #4
   192fe:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   19300:	68a9      	ldr	r1, [r5, #8]
	event->poller = NULL;
   19302:	2300      	movs	r3, #0
   19304:	60a3      	str	r3, [r4, #8]
   19306:	7a4a      	ldrb	r2, [r1, #9]
   19308:	f022 0220 	bic.w	r2, r2, #32
   1930c:	724a      	strb	r2, [r1, #9]
   1930e:	e7c3      	b.n	19298 <k_poll+0xcc>
   19310:	20001bc0 	.word	0x20001bc0

00019314 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   19314:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   19316:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   19318:	42a0      	cmp	r0, r4
   1931a:	d102      	bne.n	19322 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   1931c:	2000      	movs	r0, #0
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   1931e:	b002      	add	sp, #8
   19320:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   19322:	4620      	mov	r0, r4
   19324:	f7ff fe84 	bl	19030 <sys_dlist_remove>
	if (!poll_event) {
   19328:	2c00      	cmp	r4, #0
   1932a:	d0f7      	beq.n	1931c <_handle_obj_poll_events+0x8>
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   1932c:	aa01      	add	r2, sp, #4
   1932e:	4620      	mov	r0, r4
   19330:	f7ff fea6 	bl	19080 <_signal_poll_event>
	return must_reschedule;
   19334:	9801      	ldr	r0, [sp, #4]
   19336:	e7f2      	b.n	1931e <_handle_obj_poll_events+0xa>

00019338 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   19338:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   1933a:	f04f 0320 	mov.w	r3, #32
   1933e:	f3ef 8511 	mrs	r5, BASEPRI
   19342:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   19346:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   19348:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1934a:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   1934c:	f04f 0101 	mov.w	r1, #1
   19350:	6081      	str	r1, [r0, #8]
   19352:	d105      	bne.n	19360 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   19354:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   19358:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   1935a:	4620      	mov	r0, r4
   1935c:	b003      	add	sp, #12
   1935e:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   19360:	4620      	mov	r0, r4
   19362:	f7ff fe65 	bl	19030 <sys_dlist_remove>
	if (!poll_event) {
   19366:	2c00      	cmp	r4, #0
   19368:	d0f4      	beq.n	19354 <k_poll_signal+0x1c>
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   1936a:	4620      	mov	r0, r4
   1936c:	aa01      	add	r2, sp, #4
   1936e:	f7ff fe87 	bl	19080 <_signal_poll_event>
	if (must_reschedule) {
   19372:	9b01      	ldr	r3, [sp, #4]
	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   19374:	4604      	mov	r4, r0
	if (must_reschedule) {
   19376:	b12b      	cbz	r3, 19384 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   19378:	f7ff f932 	bl	185e0 <_update_time_slice_before_swap>
	return __swap(key);
   1937c:	4628      	mov	r0, r5
   1937e:	f7e7 fbb5 	bl	aec <__swap>
   19382:	e7ea      	b.n	1935a <k_poll_signal+0x22>
   19384:	f385 8811 	msr	BASEPRI, r5
   19388:	e7e7      	b.n	1935a <k_poll_signal+0x22>

0001938a <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   1938a:	4770      	bx	lr
